
.vsteensy/build/03_Multiplexed_74165.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00006050 l    d  .fini	00000000 .fini
00006054 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
0000605c l    d  .ARM.exidx	00000000 .ARM.exidx
0000605c l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20000fb0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00000b4c l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00001358 l     F .text.itcm	0000005c schedule_transfer
000013b4 l     F .text.itcm	00000036 run_callbacks
000013ec l     F .text.itcm	000000a4 endpoint0_transmit.constprop.1
00001490 l     F .text.itcm	00000698 isr
20001204 l     O .bss	00000004 endpointN_notify_mask
20001208 l     O .bss	00000001 sof_usage
20001214 l     O .bss	00000004 endpoint0_notify_mask
20001218 l     O .bss	00000001 usb_reboot_timer
20001220 l     O .bss	00000008 endpoint0_setupdata
20001228 l     O .bss	00000008 reply_buffer
20001230 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20001239 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000123c l     O .bss	00000004 s_hotTemp
20001240 l     O .bss	00000004 s_hot_ROOM
20001244 l     O .bss	00000004 s_roomC_hotC
20001248 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 usb_desc.c
60001698 l     O .text.progmem	0000000a qualifier_descriptor
200005d4 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/arduino/arduino-1.8.5/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/arduino/arduino-1.8.5/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20000fb0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20000fb4 l       .bss	00000000 object.8610
600016f8 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 02_Multiplexed_74165.ino
00000110 l     F .text.itcm	00000044 _GLOBAL__sub_I_encoders
00000000 l    df *ABS*	00000000 EncoderBase.cpp
00000000 l    df *ABS*	00000000 EncPlex74165.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 yield.cpp
20001008 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
00000c18 l     F .text.itcm	0000006c rx_queue_transfer
00000c84 l     F .text.itcm	000000b4 rx_event
00000d38 l     F .text.itcm	00000098 usb_serial_flush_callback
00000dd0 l     F .text.itcm	0000017c usb_serial_write.part.1
20001028 l     O .bss	00000010 rx_index
20001038 l     O .bss	00000002 tx_packet_size
2000103a l     O .bss	00000001 tx_noautoflush
2000103b l     O .bss	00000001 tx_head
20001040 l     O .bss	00000100 rx_transfer
20001140 l     O .bss	00000001 rx_tail
20001144 l     O .bss	00000009 rx_list
2000114e l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20001150 l     O .bss	00000010 rx_count
20001160 l     O .bss	00000004 rx_available
20001164 l     O .bss	00000001 rx_head
20001165 l     O .bss	00000001 transmit_previous_timeout
20001166 l     O .bss	00000002 tx_available
20001180 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
20000530 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
00003904 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
20000550 l     O .data	00000010 zeroes.7258
200005a0 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 impure.c
20000600 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600016b0 l     F .text.progmem	00000008 __memset_veneer
600016b8 l     F .text.progmem	00000008 __main_veneer
600016c0 l     F .text.progmem	00000008 __startup_early_hook_veneer
600016c8 l     F .text.progmem	00000008 __pwm_init_veneer
600016d0 l     F .text.progmem	00000008 __set_arm_clock_veneer
600016d8 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600016e0 l     F .text.progmem	00000008 ____libc_init_array_veneer
600016e8 l     F .text.progmem	00000008 __startup_late_hook_veneer
600016f0 l     F .text.progmem	00000008 __delay_veneer
00006040 l     F .text.itcm	00000008 ___init_veneer
00001188 g     F .text.itcm	0000000c usb_serial_available
00000b38 g     F .text.itcm	00000004 operator new[](unsigned int)
00000b58 g     F .text.itcm	00000002 startup_default_late_hook
00000810  w    F .text.itcm	000000a0 yield
2000120c g     O .bss	00000004 usb_timer1_callback
600015f4 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
2000124c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
00000ae8 g     F .text.itcm	00000020 Print::println()
000028b8 g     F .text.itcm	00000002 __malloc_unlock
6000148c g     F .text.progmem	00000058 analog_init
00002d9c g     F .text.itcm	0000004a _vdprintf_r
200005b8 g     O .data	00000004 F_CPU_ACTUAL
00001f84 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00002750 g     F .text.itcm	000000c6 memmove
000009fc g     F .text.itcm	00000098 MillisTimer::runFromTimer()
00003220 g     F .text.itcm	0000004c _Balloc
20001020 g     O .bss	00000001 EventResponder::runningFromYield
00002148 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000100c g     O .bss	00000004 EventResponder::firstInterrupt
00001c70 g     F .text.itcm	00000004 usb_transfer_status
200005bc g     O .data	00000001 usb_enable_serial_event_processing
00000acc  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
2000000c g     O .data	00000280 digital_pin_to_info_PGM
20003280 g     O .bss	00000004 errno
00006050 g       .text.itcm	00000000 _etext
20000fb0 g       .bss	00000000 _sbss
60001700 g       *ABS*	00000000 _stextload
00000098 g     F .text.itcm	00000078 loop
00001b28 g     F .text.itcm	00000064 usb_config_rx
00000994 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
20001010 g     O .bss	00000004 EventResponder::lastInterrupt
00001fac g     F .text.itcm	00000134 memcpy
000046b8 g     F .text.itcm	00001570 _svfprintf_r
20001004 g     O .bss	00000004 systick_millis_count
00005d28 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20001238 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
600015f4  w    O .text.progmem	00000018 usb_string_manufacturer_name
000021a4 g     F .text.itcm	00000010 malloc
00000930  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
20000440 g     O .data	000000c8 __mprec_tens
600013a0 g     F .text.progmem	000000ec usb_init
20000fcc g     O .bss	0000002c encoders
20001274 g     O .bss	00000004 __malloc_top_pad
200012a0 g     O .bss	00000004 systick_safe_read
aaaaaaab g       *ABS*	00000000 _flexram_bank_config
200005b0 g     O .data	00000000 .hidden __dso_handle
00003158 g     F .text.itcm	0000001c _localeconv_r
0000339c g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
60001654 g     O .text.progmem	00000043 usb_config_descriptor_480
00005d58 g     F .text.itcm	000002e2 .hidden __udivmoddi4
00002c9c g     F .text.itcm	00000024 _sbrk_r
00000b54 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000268 ResetHandler
00001208 g     F .text.itcm	00000020 usb_serial_getchar
200016c0 g     O .bss	00000008 usb_cdc_line_coding
20001018 g     O .bss	00000004 EventResponder::lastYield
20001270 g     O .bss	00000004 __malloc_max_sbrked_mem
00000780 g     F .text.itcm	00000080 pinMode
000001d0 g     F .text.itcm	0000002c EncPlex74165::begin()
20280000 g       .bss.dma	00000000 _heap_end
2000101c g     O .bss	00000004 EventResponder::firstYield
20000324 g     O .data	00000004 _global_impure_ptr
000028bc g     F .text.itcm	000003de _realloc_r
00002154 g     F .text.itcm	00000050 __libc_init_array
20000508 g     O .data	00000028 __mprec_bigtens
00000b5c  w    F .text.itcm	0000008c HardFault_HandlerC
00000ab4  w    F .text.itcm	00000004 usb_serial_class::clear()
00000be8 g     F .text.itcm	00000030 _sbrk
6000775c g       *ABS*	00000000 _sdataload
00003630 g     F .text.itcm	00000042 __mcmp
20001024 g     O .bss	00000004 MillisTimer::listWaiting
200005d0 g     O .data	00000004 __brkval
20001168 g     O .bss	00000001 usb_cdc_line_rtsdtr
600016a4 g     F .text.progmem	00000000 _init
00000f4c g     F .text.itcm	00000002 usb_serial_reset
60001610 g     O .text.progmem	00000043 usb_config_descriptor_12
200032c0 g       .bss	00000000 _ebss
00003300 g     F .text.itcm	00000040 __hi0bits
20203050 g       .bss.dma	00000000 _heap_start
00000001 g       *ABS*	00000000 _itcm_block_count
20002000 g     O .bss	00000020 endpoint0_transfer_data
00001c74 g     F .text.itcm	000002b8 pwm_init
6000133c g     F .text.progmem	00000064 usb_pll_start
000034e0 g     F .text.itcm	000000a0 __pow5mult
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20002020 g     O .bss	00000020 endpoint0_transfer_ack
200016c8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00001c24 g     F .text.itcm	00000028 usb_transmit
00000a94 g     F .text.itcm	00000020 systick_isr
200005c0 g     O .data	00000010 Serial
20001268 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
00000ad4  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00000b54  w    F .text.itcm	00000002 startup_early_hook
00001144 g     F .text.itcm	00000044 usb_serial_peekchar
00003180 g     F .text.itcm	00000000 memchr
000003f0 g     F .text.itcm	000002c4 set_arm_clock
20000ffc g     O .bss	00000004 systick_cycle_count
200005e8 g     O .data	00000016 usb_string_serial_number_default
00002f88 g     F .text.itcm	000001d0 _free_r
00000ac4  w    F .text.itcm	00000004 usb_serial_class::flush()
20000fa4 g     O .data	00000004 __malloc_sbrk_base
00000abc  w    F .text.itcm	00000004 usb_serial_class::read()
00003580 g     F .text.itcm	000000ae __lshift
00001bf4 g     F .text.itcm	0000002e usb_prepare_transfer
00000b3c g     F .text.itcm	00000018 unused_interrupt_vector
00005c28 g     F .text.itcm	00000100 __ssprint_r
20001200 g     O .bss	00000004 usb_timer0_callback
600014e4 g     F .text.progmem	000000f8 tempmon_init
00003844 g     F .text.itcm	0000005e _vasnprintf_r
00000adc  w    F .text.itcm	0000000c serialEvent()
00002e48 g     F .text.itcm	000000a4 __register_exitproc
00001194 g     F .text.itcm	00000074 usb_serial_flush_input
000033b0 g     F .text.itcm	00000130 __multiply
00001228 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20001278 g     O .bss	00000028 __malloc_current_mallinfo
00003788 g     F .text.itcm	000000ba __d2b
0000213c g     F .text.itcm	0000000c __cxa_atexit
2000028c  w    O .data	00000028 vtable for usb_serial_class
20001000 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20001014 g     O .bss	00000004 MillisTimer::listActive
0000603c  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
20000b98 g     O .data	00000408 __malloc_av_
000012b8 g     F .text.itcm	000000a0 usb_serial_flush_output
000028b4 g     F .text.itcm	00000002 __malloc_lock
20001400 g     O .bss	000002c0 _VectorsRam
000038a4 g     F .text.itcm	0000005e _calloc_r
20001210 g     O .bss	00000001 usb_high_speed
00002818 g     F .text.itcm	0000009a memset
00000800 g     F .text.itcm	00000010 main
2000126c g     O .bss	00000004 __malloc_max_total_mem
20203000 g     O .bss.dma	00000043 usb_descriptor_buffer
00001f2c g     F .text.itcm	00000058 usb_init_serialnumber
60001700 g       .text.progmem	00000000 __init_array_end
00003a30 g     F .text.itcm	00000c84 _dtoa_r
000021b4 g     F .text.itcm	00000570 _malloc_r
00002e00 g     F .text.itcm	0000001a __ascii_wctomb
000008b0 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
000001fc g     F .text.itcm	00000090 EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
00002eec g     F .text.itcm	0000009c _malloc_trim_r
6000160c g     O .text.progmem	00000004 string0
00001254 g     F .text.itcm	00000018 usb_serial_write
00000b58  w    F .text.itcm	00000002 startup_late_hook
00000ac0  w    F .text.itcm	00000004 usb_serial_class::available()
0000007c  w    F .text.itcm	00000016 EncPlex74165::~EncPlex74165()
20003000 g     O .bss	00000280 endpoint_queue_head
600015dc  w    O .text.progmem	00000016 usb_string_product_name
000006b4 g     F .text.itcm	000000cc delay
00006050 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
00000b18 g     F .text.itcm	0000001e Print::printf(char const*, ...)
00002e1c g     F .text.itcm	0000002c _write_r
20000a28 g     O .data	00000004 _impure_ptr
00000154 g     F .text.itcm	0000007c PollingEncoder::EncoderBase::update(unsigned long, unsigned long)
600016f8 g       .text.progmem	00000000 __preinit_array_end
00002724 g     F .text.itcm	0000002a __ascii_mbtowc
00000094 g     F .text.itcm	00000002 setup
200002b8 g     O .data	0000006c usb_descriptor_list
000001fc g     F .text.itcm	00000090 EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
0000007c  w    F .text.itcm	00000016 EncPlex74165::~EncPlex74165()
20078000 g       .bss.dma	00000000 _estack
0000126c g     F .text.itcm	0000004c usb_serial_write_buffer_free
00000f50 g     F .text.itcm	00000108 usb_serial_configure
00000b08  w    F .text.itcm	0000000e _write
20000fb0 g       .data	00000000 _edata
00000ac8  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000020e0 g     F .text.itcm	0000004e ultoa
0000094c g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20000fa0 g     O .data	00000004 __malloc_trim_threshold
00000ab8  w    F .text.itcm	00000004 usb_serial_class::peek()
00003674 g     F .text.itcm	00000114 __mdiff
20000338 g     O .data	00000101 _ctype_
0000603c  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
600016f8 g       .text.progmem	00000000 __init_array_start
200005b4 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
00002cc0 g     F .text.itcm	000000dc strlen
600015dc g     O .text.progmem	00000016 usb_string_product_name_default
00002de8 g     F .text.itcm	00000018 vdprintf
6000129c g     F .text.progmem	000000a0 configure_cache
0000028c g     F .text.itcm	00000164 EncPlex74165::tick()
00000000  w      *UND*	00000000 _Jv_RegisterClasses
600016f8 g       .text.progmem	00000000 __preinit_array_start
00001c4c g     F .text.itcm	00000024 usb_receive
00003340 g     F .text.itcm	0000005a __lo0bits
00008700 g       *ABS*	00000000 _flashimagelen
00002130 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00000990 g     F .text.itcm	00000004 pendablesrvreq_isr
20000a2c g     O .data	0000016c __global_locale
00001058 g     F .text.itcm	000000ec usb_serial_read
00001b8c g     F .text.itcm	00000068 usb_config_tx
00003280 g     F .text.itcm	00000080 __multadd
0000326c g     F .text.itcm	00000012 _Bfree
200005e8  w    O .data	00000016 usb_string_serial_number
20000ff8 g     O .bss	00000004 stopwatch



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	6000133c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	600016d0 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016c0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013a0 <usb_init>
	analog_init();
600011e4:	bl	6000148c <analog_init>
	pwm_init();
600011e8:	bl	600016c8 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e4 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600016e8 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	600016e0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600016b8 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001700
60001220:	.word	0x00006050
60001224:	.word	0x20000000
60001228:	.word	0x6000775c
6000122c:	.word	0x20000fb0
60001230:	.word	0x20000fb0
60001234:	.word	0x200032c0
60001238:	.word	0xe000ed88
6000123c:	.word	0x200013fc
60001240:	.word	0x00000b3d
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00000991
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x00000a95
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20000ffc
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20001004
60001290:	.word	0x20001400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_32M	(SCB_MPU_RASR_SIZE(24) | SCB_MPU_RASR_ENABLE)
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	ldr	r2, [pc, #100]	; (60001304 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	ldr	r3, [pc, #100]	; (60001308 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	ldr	r0, [pc, #96]	; (6000130c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	ldr	r6, [pc, #96]	; (60001310 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	ldr	r5, [pc, #100]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b2:	ldr	r7, [pc, #100]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	ldr	r6, [pc, #92]	; (6000131c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012be:	ldr	r5, [pc, #96]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012c0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c4:	ldr	r7, [pc, #92]	; (60001324 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	ldr	r6, [pc, #92]	; (60001328 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012ca:	ldr	r5, [pc, #96]	; (6000132c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012cc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ce:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d0:	ldr	r7, [pc, #92]	; (60001330 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r6, [pc, #92]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d6:	ldr	r5, [pc, #96]	; (60001338 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012da:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012dc:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012de:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012e0:	dsb	sy
	asm("isb");
600012e4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012e8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012ec:	dsb	sy
	asm("isb");
600012f0:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600012f4:	ldr.w	r3, [r2, #-136]
600012f8:	orr.w	r3, r3, #196608	; 0x30000
600012fc:	str.w	r3, [r2, #-136]
60001300:	pop	{r4, r5, r6, r7, pc}
60001302:	nop
60001304:	.word	0xe000ed9c
60001308:	.word	0xe000eda0
6000130c:	.word	0xe000ed94
60001310:	.word	0x03080025
60001314:	.word	0x00200011
60001318:	.word	0x07020021
6000131c:	.word	0x20000012
60001320:	.word	0x13080025
60001324:	.word	0x20200013
60001328:	.word	0x130b0027
6000132c:	.word	0x40000014
60001330:	.word	0x13100033
60001334:	.word	0x60000015
60001338:	.word	0x070b002f

6000133c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000133c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000133e:	ldr	r2, [pc, #92]	; (6000139c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001340:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001342:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001346:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000134a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000134e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001352:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001356:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001358:	tst.w	r3, #2
6000135c:	beq.n	6000136c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000135e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001360:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001362:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001364:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001366:	tst.w	r3, #2
6000136a:	bne.n	6000135e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000136c:	tst.w	r3, #8192	; 0x2000
60001370:	bne.n	60001376 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001372:	str	r5, [r2, #20]
			continue;
60001374:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001376:	tst.w	r3, #4096	; 0x1000
6000137a:	bne.n	60001380 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000137c:	str	r6, [r2, #20]
			continue;
6000137e:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001380:	cmp	r3, #0
60001382:	bge.n	60001356 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001384:	tst.w	r3, #65536	; 0x10000
60001388:	beq.n	6000138e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000138a:	str	r1, [r2, #24]
			continue;
6000138c:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000138e:	lsls	r3, r3, #25
60001390:	bmi.n	60001396 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001392:	str	r7, [r2, #20]
			continue;
60001394:	b.n	60001356 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001396:	pop	{r4, r5, r6, r7}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400d8000

600013a0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a0:	ldr	r3, [pc, #192]	; (60001464 <usb_init+0xc4>)
600013a2:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600013a6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013ac:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013b0:	bl	600016d8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b4:	ldr	r1, [pc, #176]	; (60001468 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013b6:	ldr	r0, [pc, #180]	; (6000146c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013bc:	ldr	r4, [pc, #176]	; (60001470 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013be:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013c2:	ldr	r3, [pc, #176]	; (60001474 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013c4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013c8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013cc:	ldr	r2, [r4, #0]
600013ce:	ands	r3, r2
600013d0:	cbnz	r3, 600013da <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013d2:	ldr.w	r3, [r0, #424]	; 0x1a8
600013d6:	lsls	r2, r3, #30
600013d8:	beq.n	60001410 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013da:	ldr	r3, [pc, #144]	; (6000146c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013dc:	mov.w	r1, #2147483648	; 0x80000000
600013e0:	ldr	r2, [pc, #140]	; (60001470 <usb_init+0xd0>)
600013e2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013e4:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013e6:	ldr.w	r1, [r3, #320]	; 0x140
600013ea:	orr.w	r1, r1, #2
600013ee:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013f2:	ldr.w	r3, [r2, #320]	; 0x140
600013f6:	lsls	r3, r3, #30
600013f8:	bmi.n	600013f2 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600013fa:	mov.w	r0, #131072	; 0x20000
600013fe:	ldr	r1, [pc, #120]	; (60001478 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001400:	ldr	r3, [pc, #108]	; (60001470 <usb_init+0xd0>)
60001402:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001406:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001408:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000140a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000140c:	bl	600016f0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001410:	ldr	r5, [pc, #104]	; (6000147c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001412:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001414:	ldr	r3, [pc, #88]	; (60001470 <usb_init+0xd0>)
60001416:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000141a:	ldr	r4, [pc, #80]	; (6000146c <usb_init+0xcc>)
6000141c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000141e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001420:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001422:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001424:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001426:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000142a:	mov.w	r2, #640	; 0x280
6000142e:	bl	600016b0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001432:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001436:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000143a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000143e:	ldr	r2, [pc, #64]	; (60001480 <usb_init+0xe0>)
60001440:	ldr	r1, [pc, #64]	; (60001484 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001442:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001444:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001446:	str.w	r5, [r4, #344]	; 0x158
6000144a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000144e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001452:	ldr	r2, [pc, #52]	; (60001488 <usb_init+0xe8>)
60001454:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001458:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000145a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000145c:	str.w	r3, [r4, #320]	; 0x140
60001460:	pop	{r4, r5, r6, pc}
60001462:	nop
60001464:	.word	0x400d8000
60001468:	.word	0x400fc000
6000146c:	.word	0x402e0000
60001470:	.word	0x400d9000
60001474:	.word	0x001e1c00
60001478:	.word	0xe000e28c
6000147c:	.word	0x20003000
60001480:	.word	0x20001400
60001484:	.word	0x00001491
60001488:	.word	0xe000e10c

6000148c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000148c:	ldr	r3, [pc, #68]	; (600014d4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148e:	ldr	r1, [pc, #72]	; (600014d8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001490:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001492:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001494:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001498:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000149a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000149c:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014a2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a4:	orr.w	r0, r0, #768	; 0x300
600014a8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014aa:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014ac:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ae:	ldr	r3, [r2, #72]	; 0x48
600014b0:	lsls	r3, r3, #24
600014b2:	bmi.n	600014ae <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014b4:	ldr	r3, [pc, #36]	; (600014dc <analog_init+0x50>)
600014b6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014ba:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014bc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014be:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014c0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014c2:	ldr	r3, [r2, #72]	; 0x48
600014c4:	ands.w	r3, r3, #128	; 0x80
600014c8:	bne.n	600014c2 <analog_init+0x36>
	calibrating = 0;
600014ca:	ldr	r2, [pc, #20]	; (600014e0 <analog_init+0x54>)
600014cc:	strb	r3, [r2, #0]
}
600014ce:	pop	{r4, r5}
600014d0:	bx	lr
600014d2:	nop
600014d4:	.word	0x400fc000
600014d8:	.word	0x400c4000
600014dc:	.word	0x400c8000
600014e0:	.word	0x20001239

600014e4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e4:	ldr	r2, [pc, #216]	; (600015c0 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014e6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014e8:	ldr	r1, [pc, #216]	; (600015c4 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ea:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ee:	ldr	r3, [r2, #0]
600014f0:	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

FLASHMEM void tempmon_init(void)
{
600014f4:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014f8:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014fc:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #212]	; 600015d8 <tempmon_init+0xf4>
60001504:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001506:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150a:	ldr	r7, [pc, #188]	; (600015c8 <tempmon_init+0xe4>)
6000150c:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001514:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	vmov	s15, r0
60001528:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000152c:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000152e:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001532:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001536:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153a:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000153c:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001540:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001544:	ldr	r5, [pc, #132]	; (600015cc <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001546:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001550:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001554:	ldr	r6, [pc, #120]	; (600015d0 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001556:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155a:	ldr	r1, [pc, #120]	; (600015d4 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000155c:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155e:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001560:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001564:	vmov	s15, r3
60001568:	vcvt.f32.u32	s15, s15
6000156c:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001570:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001578:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000157c:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001580:	vmov	r3, s11
60001584:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158c:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001590:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001592:	and.w	r1, r1, r0, lsl #16
60001596:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159e:	orrs	r3, r1
600015a0:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a4:	vmov	r3, s15
600015a8:	ldr.w	r1, [r2, #272]	; 0x110
600015ac:	ubfx	r3, r3, #0, #12
600015b0:	orrs	r3, r1
600015b2:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015b6:	ldr	r3, [r2, #0]
600015b8:	orr.w	r3, r3, #2
600015bc:	str	r3, [r2, #0]
600015be:	pop	{r4, r5, r6, r7, pc}
600015c0:	.word	0x400d8180
600015c4:	.word	0x401f4400
600015c8:	.word	0x20001244
600015cc:	.word	0x20001240
600015d0:	.word	0x20001248
600015d4:	.word	0x0fff0000
600015d8:	.word	0x2000123c

600015dc <usb_string_product_name_default>:
600015dc:	..U.S.B. .S.e.r.
600015ec:	i.a.l...

600015f4 <usb_string_manufacturer_name_default>:
600015f4:	..T.e.e.n.s.y.d.
60001604:	u.i.n.o.

6000160c <string0>:
6000160c:	....

60001610 <usb_config_descriptor_12>:
60001610:	..C.....2.......
60001620:	...$....$....$..
60001630:	.$..............
60001640:	.........@......
60001650:	@...

60001654 <usb_config_descriptor_480>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	................
60001694:	....

60001698 <qualifier_descriptor>:
60001698:	.......@....

600016a4 <_init>:
600016a4:	push	{r3, r4, r5, r6, r7, lr}
600016a6:	nop
600016a8:	pop	{r3, r4, r5, r6, r7}
600016aa:	pop	{r3}
600016ac:	mov	lr, r3
600016ae:	bx	lr

600016b0 <__memset_veneer>:
600016b0:	ldr.w	pc, [pc]	; 600016b4 <__memset_veneer+0x4>
600016b4:	.word	0x00002819

600016b8 <__main_veneer>:
600016b8:	ldr.w	pc, [pc]	; 600016bc <__main_veneer+0x4>
600016bc:	.word	0x00000801

600016c0 <__startup_early_hook_veneer>:
600016c0:	ldr.w	pc, [pc]	; 600016c4 <__startup_early_hook_veneer+0x4>
600016c4:	.word	0x00000b55

600016c8 <__pwm_init_veneer>:
600016c8:	ldr.w	pc, [pc]	; 600016cc <__pwm_init_veneer+0x4>
600016cc:	.word	0x00001c75

600016d0 <__set_arm_clock_veneer>:
600016d0:	ldr.w	pc, [pc]	; 600016d4 <__set_arm_clock_veneer+0x4>
600016d4:	.word	0x000003f1

600016d8 <__usb_init_serialnumber_veneer>:
600016d8:	ldr.w	pc, [pc]	; 600016dc <__usb_init_serialnumber_veneer+0x4>
600016dc:	.word	0x00001f2d

600016e0 <____libc_init_array_veneer>:
600016e0:	ldr.w	pc, [pc]	; 600016e4 <____libc_init_array_veneer+0x4>
600016e4:	.word	0x00002155

600016e8 <__startup_late_hook_veneer>:
600016e8:	ldr.w	pc, [pc]	; 600016ec <__startup_late_hook_veneer+0x4>
600016ec:	.word	0x00000b59

600016f0 <__delay_veneer>:
600016f0:	ldr.w	pc, [pc]	; 600016f4 <__delay_veneer+0x4>
600016f4:	.word	0x000006b5

600016f8 <__init_array_start>:
600016f8:	.word	0x00000045
600016fc:	.word	0x00000111

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	lsrs	r0, r6, #30
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	str	r4, [r2, #4]
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	nop
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r6, #30
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	str	r4, [r2, #4]
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	lsrs	r0, r6, #30
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <EncPlex74165::~EncPlex74165()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
      7c:	ldr	r3, [r0, #16]
#pragma once

#include "EncPlexBase.h"

class EncPlex74165 : public PollingEncoder::EncPlexBase
      7e:	push	{r4, lr}
      80:	mov	r4, r0
      82:	cbz	r3, 8e <EncPlex74165::~EncPlex74165()+0x12>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
      84:	.word	0x0108f100
      88:	movs	r2, #3
      8a:	.short	0x4608
      8c:	blx	r3
      8e:	.short	0x4620
      90:	pop	{r4, pc}
      92:	.short	0xbf00

00000094 <setup>:
                                //74165 datasheet: http://www.ti.com/product/SN74HC165

EncPlex74165 encoders(encoderCount, pinLD, pinCLK, QH_A, QH_B);

void setup()
{
      94:	bx	lr
      96:	.short	0xbf00

00000098 <loop>:
}

elapsedMillis stopwatch = 0;

void loop()
{
      98:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      9c:	ldr.w	r9, [pc, #104]	; 108 <loop+0x70>
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
      a0:	.word	0x8068f8df
    encoders.tick();      // call as often as possible (~1-2kHz should be fine for mechanical encoders)
      a4:	ldr	r0, [pc, #84]	; (fc <loop+0x64>)
      a6:	bl	28c <EncPlex74165::tick()>
      aa:	ldr.w	r3, [r9]

    if (stopwatch > 200)  // display encoder values every 200 ms
      ae:	.short	0xf8d8
      b0:	movs	r0, #0
      b2:	subs	r3, r3, r2
      b4:	.word	0xd91e2bc8
      b8:	movs	r5, #0
      ba:	ldr	r6, [pc, #64]	; (fc <loop+0x64>)
    {
    }

    EncoderBase& EncPlexBase::operator[](std::size_t idx)
    {
        return idx < encoderCount ? encoders[idx] : encoders[encoderCount - 1];
      bc:	movs	r7, #44	; 0x2c
      be:	mov	r4, r5
    {
        for (unsigned i = 0; i < encoderCount; i++)
        {
            Serial.printf("E%u:%3d ", i, encoders[i].read());
      c0:	ldr	r1, [pc, #60]	; (100 <loop+0x68>)
      c2:	ldr	r0, [pc, #64]	; (104 <loop+0x6c>)
      c4:	.word	0x000ce896
      c8:	cmp	r2, r4
      ca:	.short	0xfb07
      cc:	adds	r2, #2
      ce:	.short	0x442b
      d0:	add.w	r5, r5, #44	; 0x2c
      d4:	.word	0xf1a2bf98
      d8:	lsls	r4, r5, #12
      da:	.short	0x4622
{
    encoders.tick();      // call as often as possible (~1-2kHz should be fine for mechanical encoders)

    if (stopwatch > 200)  // display encoder values every 200 ms
    {
        for (unsigned i = 0; i < encoderCount; i++)
      dc:	adds	r4, #1
        {
            Serial.printf("E%u:%3d ", i, encoders[i].read());
      de:	ldr	r3, [r3, #4]
      e0:	bl	b18 <Print::printf(char const*, ...)>
{
    encoders.tick();      // call as often as possible (~1-2kHz should be fine for mechanical encoders)

    if (stopwatch > 200)  // display encoder values every 200 ms
    {
        for (unsigned i = 0; i < encoderCount; i++)
      e4:	cmp	r4, #4
      e6:	bne.n	c0 <loop+0x28>
        {
            Serial.printf("E%u:%3d ", i, encoders[i].read());
        }
        Serial.println();
      e8:	.word	0xf0004806
      ec:	ldc2l	8, cr15, [sp], #868	; 0x364
      f0:	.word	0xf8c83000
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
      f4:	adds	r0, #0
      f6:	.short	0xe8bd
      f8:	strh	r0, [r7, #30]
      fa:	nop
      fc:	.word	0x20000fcc
     100:	movs	r0, r0
     102:	.short	0x2000
     104:	lsls	r0, r0, #23
     106:	movs	r0, #0
     108:	.word	0x20001004
     10c:	lsrs	r0, r7, #31
     10e:	.short	0x2000

00000110 <_GLOBAL__sub_I_encoders>:
        stopwatch = 0;
    }
}
     110:	push	{r4, lr}
constexpr unsigned pinCLK = 4; //clock pin for all shift registers
constexpr unsigned QH_A = 0;    //output pin QH of shift register A
constexpr unsigned QH_B = 1;    //output pin QH of shift register B
                                //74165 datasheet: http://www.ti.com/product/SN74HC165

EncPlex74165 encoders(encoderCount, pinLD, pinCLK, QH_A, QH_B);
     112:	movs	r3, #4
            Serial.printf("E%u:%3d ", i, encoders[i].read());
        }
        Serial.println();
        stopwatch = 0;
    }
}
     114:	.word	0x4c0ab082
constexpr unsigned pinCLK = 4; //clock pin for all shift registers
constexpr unsigned QH_A = 0;    //output pin QH of shift register A
constexpr unsigned QH_B = 1;    //output pin QH of shift register B
                                //74165 datasheet: http://www.ti.com/product/SN74HC165

EncPlex74165 encoders(encoderCount, pinLD, pinCLK, QH_A, QH_B);
     118:	movs	r1, #1
     11a:	.short	0x2200
     11c:	str	r1, [sp, #4]
     11e:	.short	0x4620
     120:	mov	r1, r3
     122:	str	r2, [sp, #0]
     124:	.word	0xf0002203
     128:	str??.w	r4, [r9, <undefined>]
     12c:	.word	0x49064a05
     130:	bl	2130 <__aeabi_atexit>
     134:	.word	0x4b064a05
     138:	ldr	r2, [r2, #0]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     13a:	.short	0x601a
            Serial.printf("E%u:%3d ", i, encoders[i].read());
        }
        Serial.println();
        stopwatch = 0;
    }
}
     13c:	add	sp, #8
     13e:	.short	0xbd10
     140:	lsrs	r4, r1, #31
     142:	movs	r0, #0
     144:	.word	0x200005b0
     148:	lsls	r5, r7, #1
     14a:	.short	0x0000
     14c:	asrs	r4, r0, #32
     14e:	.short	0x2000
     150:	lsrs	r0, r7, #31
     152:	.short	0x2000

00000154 <PollingEncoder::EncoderBase::update(unsigned long, unsigned long)>:

namespace PollingEncoder
{
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // https://www.mikrocontroller.net/articles/Drehgeber
    {
        int current = 0, diff;
     154:	cmp	r1, #1

        if (phaseA == HIGH) current = 3;
        if (phaseB == HIGH) current ^= 1;

        diff = last - current;
     156:	.short	0x6883

namespace PollingEncoder
{
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // https://www.mikrocontroller.net/articles/Drehgeber
    {
        int current = 0, diff;
     158:	ite	eq
     15a:	moveq	r1, #3
     15c:	.word	0x2a012100

        if (phaseA == HIGH) current = 3;
        if (phaseB == HIGH) current ^= 1;
     160:	it	eq
     162:	.short	0xf081
     164:	lsls	r1, r0, #4

        diff = last - current;
     166:	.short	0x1a5b
        if (diff & 1)
     168:	lsls	r2, r3, #31
     16a:	.short	0xd527
        {
            last = current;
            raw += (diff & 2) - 1;
     16c:	and.w	r2, r3, #2
     170:	.word	0x3a016803
#include "core_pins.h"

namespace PollingEncoder
{
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // https://www.mikrocontroller.net/articles/Drehgeber
    {
     174:	push	{r4, lr}

        diff = last - current;
        if (diff & 1)
        {
            last = current;
            raw += (diff & 2) - 1;
     176:	.short	0x4413

            if (limit)
     178:	ldrb	r4, [r0, #12]
#include "core_pins.h"

namespace PollingEncoder
{
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // https://www.mikrocontroller.net/articles/Drehgeber
    {
     17a:	subeq	sp, #8
        if (phaseB == HIGH) current ^= 1;

        diff = last - current;
        if (diff & 1)
        {
            last = current;
     17c:	str	r1, [r0, #8]
            raw += (diff & 2) - 1;
     17e:	str	r3, [r0, #0]

            if (limit)
     180:	cbz	r4, 19a <PollingEncoder::EncoderBase::update(unsigned long, unsigned long)+0x46>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
     182:	ldr	r2, [r0, #16]
     184:	cmp	r3, r2
     186:	.short	0xdc1b
            {
                raw = std::min(max, std::max(min, raw));
     188:	mov	r3, r2
	return __b;
      return __a;
     18a:	.short	0xf100
     18c:	lsls	r0, r2, #4
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
     18e:	ldr	r2, [r0, #20]
     190:	cmp	r2, r3
     192:	it	gt
     194:	ldrgt	r2, [r1, #0]
     196:	mov	r3, r2
     198:	str	r2, [r0, #0]
            }

            int32_t newVal = raw >> spr;
     19a:	ldr	r1, [r0, #40]	; 0x28
            if (newVal != value)
     19c:	ldr	r2, [r0, #4]
            if (limit)
            {
                raw = std::min(max, std::max(min, raw));
            }

            int32_t newVal = raw >> spr;
     19e:	.short	0x410b
            if (newVal != value)
     1a0:	cmp	r3, r2
     1a2:	.short	0xd00f
            {
                value = newVal;
                if (callback != nullptr)
     1a4:	ldr	r2, [r0, #32]
            }

            int32_t newVal = raw >> spr;
            if (newVal != value)
            {
                value = newVal;
     1a6:	.short	0x6043
                if (callback != nullptr)
     1a8:	cbz	r2, 1ca <PollingEncoder::EncoderBase::update(unsigned long, unsigned long)+0x76>
     1aa:	add	r1, sp, #8
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     1ac:	.word	0x30186a42
     1b0:	str.w	r3, [r1, #-4]!
     1b4:	blx	r2
                {
                    callback(value);
                }
                return true;
     1b6:	.short	0x2001
            }
        }
        return false;
    }
     1b8:	add	sp, #8
     1ba:	.short	0xbd10
                    callback(value);
                }
                return true;
            }
        }
        return false;
     1bc:	movs	r0, #0
    }
     1be:	bx	lr
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
     1c0:	.word	0xe7e44601
                    callback(value);
                }
                return true;
            }
        }
        return false;
     1c4:	movs	r0, #0
    }
     1c6:	.short	0xb002
     1c8:	pop	{r4, pc}
                value = newVal;
                if (callback != nullptr)
                {
                    callback(value);
                }
                return true;
     1ca:	.short	0x2001
            }
        }
        return false;
    }
     1cc:	add	sp, #8
     1ce:	.short	0xbd10

000001d0 <EncPlex74165::begin()>:
{
    begin();
}

void EncPlex74165::begin()
{
     1d0:	push	{r4, lr}
     1d2:	mov	r4, r0
    pinMode(A, INPUT);
     1d4:	movs	r1, #0
     1d6:	ldrb	r0, [r0, #24]
     1d8:	bl	780 <pinMode>
    pinMode(B, INPUT);
     1dc:	ldrb	r0, [r4, #28]
     1de:	movs	r1, #0
     1e0:	bl	780 <pinMode>
    pinMode(LD, OUTPUT);
     1e4:	ldrb.w	r0, [r4, #36]	; 0x24
     1e8:	movs	r1, #1
     1ea:	bl	780 <pinMode>
    pinMode(CLK, OUTPUT);
     1ee:	ldrb.w	r0, [r4, #40]	; 0x28
     1f2:	movs	r1, #1

    //pinMode(12, OUTPUT);
}
     1f4:	ldmia.w	sp!, {r4, lr}
void EncPlex74165::begin()
{
    pinMode(A, INPUT);
    pinMode(B, INPUT);
    pinMode(LD, OUTPUT);
    pinMode(CLK, OUTPUT);
     1f8:	b.w	780 <pinMode>

000001fc <EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
        EncoderBase* encoders;

        allCallback_t callback = nullptr;
    };

    EncPlexBase::EncPlexBase(unsigned eCnt) : encoderCount(eCnt), encoders(new EncoderBase[eCnt])
     1fc:	cmp.w	r1, #48758784	; 0x2e80000
#include "EncPlex74165.h"
#include "Arduino.h"

using namespace PollingEncoder;

EncPlex74165::EncPlex74165(unsigned encoderCount, unsigned pinLD, unsigned pinCLK, unsigned pinA, unsigned pinB)
     200:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     204:	mov	r9, r0
     206:	mov	r8, r1
     208:	mov	r4, r2
     20a:	mov	r5, r3
     20c:	str	r1, [r0, #0]
     20e:	bhi.n	286 <EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8a>
     210:	movs	r0, #44	; 0x2c
     212:	mul.w	r0, r0, r1
     216:	adds	r0, #8
     218:	bl	b38 <operator new[](unsigned int)>
     21c:	movs	r2, #44	; 0x2c
     21e:	str.w	r8, [r0, #4]
     222:	add.w	r3, r0, #8
     226:	str	r2, [r0, #0]
     228:	cmp.w	r8, #0
     22c:	beq.n	254 <EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x58>
     22e:	movs	r7, #0
     230:	adds	r0, #52	; 0x34
namespace PollingEncoder
{
    class EncoderBase
    {
     public:
        EncoderBase() {}
     232:	mov	r6, r7
     234:	adds	r7, #1
     236:	str.w	r6, [r0, #-44]
     23a:	str.w	r6, [r0, #-40]
     23e:	adds	r0, #44	; 0x2c
     240:	cmp	r8, r7
     242:	str.w	r6, [r0, #-80]
     246:	strb.w	r6, [r0, #-76]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     24a:	str.w	r6, [r0, #-56]
     24e:	str.w	r6, [r0, #-48]
     252:	bne.n	234 <EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
     254:	str.w	r3, [r9, #4]
     258:	movs	r1, #0
    : EncPlexBase(encoderCount), A(pinA), B(pinB), S(-1), LD(pinLD), CLK(pinCLK)
     25a:	ldr	r3, [sp, #32]
     25c:	mov.w	r2, #4294967295
{
    begin();
     260:	mov	r0, r9
#include "Arduino.h"

using namespace PollingEncoder;

EncPlex74165::EncPlex74165(unsigned encoderCount, unsigned pinLD, unsigned pinCLK, unsigned pinA, unsigned pinB)
    : EncPlexBase(encoderCount), A(pinA), B(pinB), S(-1), LD(pinLD), CLK(pinCLK)
     262:	str.w	r4, [r9, #36]	; 0x24
     266:	str.w	r3, [r9, #24]
     26a:	ldr	r3, [sp, #36]	; 0x24
     26c:	str.w	r5, [r9, #40]	; 0x28
     270:	str.w	r3, [r9, #28]
     274:	str.w	r1, [r9, #16]
     278:	str.w	r2, [r9, #32]
{
    begin();
     27c:	bl	1d0 <EncPlex74165::begin()>
}
     280:	mov	r0, r9
     282:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     286:	mov.w	r0, #4294967295
     28a:	b.n	218 <EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>

0000028c <EncPlex74165::tick()>:
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     28c:	ldrb.w	r1, [r0, #36]	; 0x24
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     290:	ldr	r3, [pc, #332]	; (3e0 <EncPlex74165::tick()+0x154>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     292:	lsls	r1, r1, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     294:	ldr	r2, [pc, #332]	; (3e4 <EncPlex74165::tick()+0x158>)

    //pinMode(12, OUTPUT);
}

void EncPlex74165::tick()
{
     296:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     29a:	ldr	r5, [pc, #332]	; (3e8 <EncPlex74165::tick()+0x15c>)
     29c:	mov	r6, r0

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     29e:	ldr.w	r8, [pc, #332]	; 3ec <EncPlex74165::tick()+0x160>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     2a2:	mov	r7, r3
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     2a4:	adds	r0, r5, r1
     2a6:	ldr	r4, [r5, r1]
     2a8:	sub	sp, #16
     2aa:	ldr	r0, [r0, #12]
     2ac:	str.w	r0, [r4, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     2b0:	ldr	r0, [r3, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     2b2:	ldr.w	r3, [r8]
     2b6:	umull	r3, r2, r2, r3
     2ba:	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     2bc:	ldr	r3, [r7, #0]
     2be:	subs	r3, r3, r0
     2c0:	cmp	r2, r3
     2c2:	bhi.n	2bc <EncPlex74165::tick()+0x30>
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     2c4:	ldrb	r2, [r6, #24]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     2c6:	add	r1, r5
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     2c8:	ldrb	r3, [r6, #28]
     2ca:	lsls	r2, r2, #4
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     2cc:	ldr	r1, [r1, #12]
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     2ce:	lsls	r3, r3, #4
    digitalWriteFast(LD, LOW);
    delayMicroseconds(1);
    digitalWriteFast(LD, HIGH);

     // first values are available directly after loading
    if (encoders[0].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
     2d0:	ldr	r0, [r6, #4]
     2d2:	adds	r7, r5, r2
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     2d4:	str.w	r1, [r4, #132]	; 0x84
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     2d8:	ldr	r1, [r5, r2]
     2da:	adds	r2, r5, r3
     2dc:	ldr	r3, [r5, r3]
     2de:	ldr	r1, [r1, #8]
     2e0:	ldr	r2, [r2, #12]
     2e2:	ldr	r4, [r3, #8]
     2e4:	ldr	r3, [r7, #12]
     2e6:	tst	r4, r2
     2e8:	ite	ne
     2ea:	movne	r2, #1
     2ec:	moveq	r2, #0
     2ee:	tst	r1, r3
     2f0:	ite	ne
     2f2:	movne	r1, #1
     2f4:	moveq	r1, #0
     2f6:	bl	154 <PollingEncoder::EncoderBase::update(unsigned long, unsigned long)>
     2fa:	cbz	r0, 318 <EncPlex74165::tick()+0x8c>
     2fc:	ldr	r3, [r6, #16]
     2fe:	cbz	r3, 318 <EncPlex74165::tick()+0x8c>
     300:	ldr	r1, [r6, #4]
     302:	movs	r0, #0
     304:	add	r2, sp, #16
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     306:	ldr	r3, [r6, #20]
     308:	ldr	r4, [r1, #4]
     30a:	mov	r1, sp
     30c:	str	r0, [sp, #0]
     30e:	add.w	r0, r6, #8
     312:	str.w	r4, [r2, #-12]!
     316:	blx	r3
    {
        callback(0, encoders[0].read());
    }
    for (unsigned i = 1; i < encoderCount; i++) // shift in the the rest of the encoders
     318:	ldr	r3, [r6, #0]
     31a:	cmp	r3, #1
     31c:	bls.n	3d8 <EncPlex74165::tick()+0x14c>
     31e:	mov.w	sl, #44	; 0x2c
     322:	movs	r7, #1
     324:	ldr	r0, [r6, #40]	; 0x28
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     326:	ldr	r4, [pc, #184]	; (3e0 <EncPlex74165::tick()+0x154>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     328:	ldr.w	r9, [pc, #184]	; 3e4 <EncPlex74165::tick()+0x158>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     32c:	uxtb	r3, r0
     32e:	lsls	r3, r3, #4
     330:	adds	r2, r5, r3
     332:	ldr	r3, [r5, r3]
     334:	ldr	r2, [r2, #12]
     336:	str.w	r2, [r3, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     33a:	ldr	r1, [r4, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     33c:	ldr.w	r2, [r8]
     340:	umull	r3, r2, r9, r2
     344:	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     346:	ldr	r3, [r4, #0]
     348:	subs	r3, r3, r1
     34a:	cmp	r2, r3
     34c:	bhi.n	346 <EncPlex74165::tick()+0xba>
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     34e:	ldrb	r2, [r6, #24]
     350:	ldrb	r3, [r6, #28]
     352:	lsls	r2, r2, #4
    {
        digitalWriteFast(CLK, HIGH);
       delayMicroseconds(1);
        if (encoders[i].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
     354:	ldr	r0, [r6, #4]
     356:	lsls	r3, r3, #4
     358:	ldr	r1, [r5, r2]
     35a:	add	r2, r5
     35c:	add.w	lr, r5, r3
     360:	ldr	r3, [r5, r3]
     362:	ldr	r1, [r1, #8]
     364:	add	r0, sl
     366:	ldr.w	ip, [r3, #8]
     36a:	ldr.w	lr, [lr, #12]
     36e:	ldr	r3, [r2, #12]
     370:	tst.w	ip, lr
     374:	ite	ne
     376:	movne	r2, #1
     378:	moveq	r2, #0
     37a:	tst	r1, r3
     37c:	ite	ne
     37e:	movne	r1, #1
     380:	moveq	r1, #0
     382:	bl	154 <PollingEncoder::EncoderBase::update(unsigned long, unsigned long)>
     386:	cbz	r0, 3a8 <EncPlex74165::tick()+0x11c>
     388:	ldr	r3, [r6, #16]
     38a:	cbz	r3, 3a8 <EncPlex74165::tick()+0x11c>
     38c:	ldr	r3, [r6, #4]
     38e:	add	r2, sp, #16
     390:	str	r7, [sp, #8]
     392:	add	r1, sp, #8
     394:	add.w	lr, r3, sl
     398:	add.w	r0, r6, #8
     39c:	ldr.w	r3, [lr, #4]
     3a0:	str.w	r3, [r2, #-4]!
     3a4:	ldr	r3, [r6, #20]
     3a6:	blx	r3
        {
            callback(i, encoders[i].read());
        }
        digitalWriteFast(CLK, LOW);
     3a8:	ldr	r0, [r6, #40]	; 0x28
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     3aa:	uxtb	r3, r0
     3ac:	lsls	r3, r3, #4
     3ae:	adds	r2, r5, r3
     3b0:	ldr	r3, [r5, r3]
     3b2:	ldr	r2, [r2, #12]
     3b4:	str.w	r2, [r3, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     3b8:	ldr	r1, [r4, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     3ba:	ldr.w	r2, [r8]
     3be:	umull	r3, r2, r9, r2
     3c2:	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     3c4:	ldr	r3, [r4, #0]
     3c6:	subs	r3, r3, r1
     3c8:	cmp	r2, r3
     3ca:	bhi.n	3c4 <EncPlex74165::tick()+0x138>
     // first values are available directly after loading
    if (encoders[0].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
    {
        callback(0, encoders[0].read());
    }
    for (unsigned i = 1; i < encoderCount; i++) // shift in the the rest of the encoders
     3cc:	adds	r7, #1
     3ce:	ldr	r3, [r6, #0]
     3d0:	add.w	sl, sl, #44	; 0x2c
     3d4:	cmp	r3, r7
     3d6:	bhi.n	32c <EncPlex74165::tick()+0xa0>
        digitalWriteFast(CLK, LOW);
        delayMicroseconds(1);
    }

    //digitalWriteFast(12, LOW);
     3d8:	add	sp, #16
     3da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3de:	nop
     3e0:	.word	0xe0001004
     3e4:	.word	0x431bde83
     3e8:	.word	0x2000000c
     3ec:	.word	0x200005b8

000003f0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     3f0:	ldr	r2, [pc, #600]	; (64c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     3f2:	ldr	r3, [pc, #604]	; (650 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     3f4:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     3f6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     3fa:	ldr	r4, [pc, #600]	; (654 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     3fc:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     400:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     402:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     404:	bls.n	440 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     406:	ldr	r3, [pc, #592]	; (658 <set_arm_clock+0x268>)
     408:	cmp	r0, r3
     40a:	bls.w	638 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     40e:	ldr	r3, [pc, #588]	; (65c <set_arm_clock+0x26c>)
     410:	movw	r5, #1575	; 0x627
     414:	ldr	r7, [pc, #584]	; (660 <set_arm_clock+0x270>)
     416:	add	r3, r0
     418:	ldr	r4, [pc, #584]	; (664 <set_arm_clock+0x274>)
     41a:	lsrs	r2, r3, #8
     41c:	umull	r3, r2, r7, r2
     420:	lsrs	r3, r2, #7
     422:	add.w	r3, r3, r3, lsl #2
     426:	add.w	r2, r3, r3, lsl #2
     42a:	addw	r3, r2, #1250	; 0x4e2
     42e:	cmp	r3, r5
     430:	it	cs
     432:	movcs	r3, r5
     434:	sub.w	r3, r3, #800	; 0x320
     438:	umull	r3, r5, r4, r3
     43c:	lsrs	r5, r5, #3
     43e:	b.n	44a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     440:	ldr	r5, [pc, #548]	; (668 <set_arm_clock+0x278>)
     442:	cmp	r0, r5
     444:	ite	ls
     446:	movls	r5, #6
     448:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     44a:	ldr	r2, [pc, #516]	; (650 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     44c:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     450:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     454:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     456:	orr.w	r3, r3, #192	; 0xc0
     45a:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     45e:	bcs.n	476 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     460:	ldr	r3, [pc, #496]	; (654 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     462:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     466:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     468:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     46a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     46c:	ldr	r3, [r2, #0]
     46e:	cmp	r3, #0
     470:	bge.n	46c <set_arm_clock+0x7c>
     472:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     476:	ands.w	r3, lr, #33554432	; 0x2000000
     47a:	bne.n	4e0 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     47c:	ldr	r4, [pc, #492]	; (66c <set_arm_clock+0x27c>)
     47e:	ldr	r2, [pc, #496]	; (670 <set_arm_clock+0x280>)
     480:	ldr.w	ip, [r4, #16]
     484:	mov	r4, r2
     486:	and.w	r2, ip, r2
     48a:	cmp	r2, r4
     48c:	itet	eq
     48e:	moveq.w	r3, #402653184	; 0x18000000
     492:	movne.w	r2, #4096	; 0x1000
     496:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     498:	eor.w	r4, lr, r3
     49c:	tst.w	r4, #939524096	; 0x38000000
     4a0:	beq.n	4b4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     4a2:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     4a6:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     4aa:	ldr	r4, [pc, #420]	; (650 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     4ac:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     4b0:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     4b4:	eor.w	r3, r1, r2
     4b8:	tst.w	r3, #12288	; 0x3000
     4bc:	beq.n	4d0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     4be:	ldr	r3, [pc, #400]	; (650 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     4c0:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     4c4:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     4c6:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     4c8:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     4ca:	ldr	r3, [r2, #72]	; 0x48
     4cc:	lsls	r4, r3, #28
     4ce:	bmi.n	4ca <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     4d0:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     4d4:	ldr	r2, [pc, #376]	; (650 <set_arm_clock+0x260>)
     4d6:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     4da:	ldr	r3, [r2, #72]	; 0x48
     4dc:	lsls	r1, r3, #26
     4de:	bmi.n	4da <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     4e0:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     4e2:	ldr	r4, [pc, #400]	; (674 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     4e4:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     4e6:	mul.w	r3, r1, r2
     4ea:	mul.w	r3, r0, r3
     4ee:	cmp	r3, r4
     4f0:	bhi.n	506 <set_arm_clock+0x116>
		if (div_arm < 8) {
     4f2:	cmp	r2, #7
     4f4:	bhi.w	622 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     4f8:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     4fa:	mul.w	r3, r1, r2
     4fe:	mul.w	r3, r0, r3
     502:	cmp	r3, r4
     504:	bls.n	4f2 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     506:	ldr	r0, [pc, #368]	; (678 <set_arm_clock+0x288>)
     508:	ldr	r4, [pc, #368]	; (67c <set_arm_clock+0x28c>)
     50a:	add	r0, r3
     50c:	umull	r0, r3, r4, r0
     510:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     512:	cmp	r3, #108	; 0x6c
     514:	bhi.w	62e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     518:	cmp	r3, #53	; 0x35
     51a:	bhi.w	63c <set_arm_clock+0x24c>
     51e:	ldr.w	r8, [pc, #392]	; 6a8 <set_arm_clock+0x2b8>
     522:	movs	r3, #54	; 0x36
     524:	ldr	r0, [pc, #344]	; (680 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     526:	ldr.w	ip, [pc, #324]	; 66c <set_arm_clock+0x27c>
     52a:	ldr	r4, [pc, #344]	; (684 <set_arm_clock+0x294>)
     52c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     530:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     534:	and.w	r4, r9, r4
     538:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     53a:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     53e:	beq.n	558 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     540:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     544:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     548:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     54a:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     54e:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     552:	ldr	r3, [r4, #0]
     554:	cmp	r3, #0
     556:	bge.n	552 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     558:	ldr.w	ip, [pc, #244]	; 650 <set_arm_clock+0x260>
     55c:	subs	r2, #1
     55e:	ldr.w	r3, [ip, #16]
     562:	and.w	r3, r3, #7
     566:	cmp	r3, r2
     568:	beq.n	57a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     56a:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     56e:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     570:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     574:	ldr	r3, [r4, #72]	; 0x48
     576:	lsls	r3, r3, #15
     578:	bmi.n	574 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     57a:	subs	r1, #1
     57c:	lsls	r1, r1, #10
     57e:	eor.w	r3, lr, r1
     582:	tst.w	r3, #7168	; 0x1c00
     586:	beq.n	5a2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     588:	ldr	r3, [pc, #196]	; (650 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     58a:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     58e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     592:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     594:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     598:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     59c:	ldr	r3, [r2, #72]	; 0x48
     59e:	lsls	r1, r3, #30
     5a0:	bmi.n	59c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     5a2:	ldr	r3, [pc, #228]	; (688 <set_arm_clock+0x298>)
     5a4:	ldr	r1, [pc, #228]	; (68c <set_arm_clock+0x29c>)
     5a6:	add	r3, r0
     5a8:	lsrs	r3, r3, #7
     5aa:	umull	r3, r1, r1, r3
     5ae:	lsrs	r1, r1, #12
     5b0:	cmp	r1, #4
     5b2:	it	cs
     5b4:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     5b6:	subs	r3, r1, #1
     5b8:	lsls	r3, r3, #8
     5ba:	eor.w	r2, lr, r3
     5be:	tst.w	r2, #768	; 0x300
     5c2:	beq.n	5d4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     5c4:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     5c8:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     5cc:	ldr	r2, [pc, #128]	; (650 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     5ce:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     5d2:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     5d4:	ldr	r3, [pc, #120]	; (650 <set_arm_clock+0x260>)
     5d6:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     5d8:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     5da:	bic.w	r4, r4, #33554432	; 0x2000000
     5de:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     5e0:	ldr	r3, [r2, #72]	; 0x48
     5e2:	lsls	r3, r3, #26
     5e4:	bmi.n	5e0 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     5e6:	ldr	r3, [pc, #168]	; (690 <set_arm_clock+0x2a0>)
     5e8:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     5ec:	ldr	r4, [pc, #164]	; (694 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     5ee:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     5f0:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     5f4:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     5f6:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     5fa:	ldr	r4, [pc, #156]	; (698 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     5fc:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     600:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     604:	ldr	r2, [pc, #148]	; (69c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     606:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     608:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     60a:	bcs.n	61e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     60c:	ldr	r3, [pc, #68]	; (654 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     60e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     612:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     614:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     616:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     618:	ldr	r3, [r2, #0]
     61a:	cmp	r3, #0
     61c:	bge.n	618 <set_arm_clock+0x228>
	}

	return frequency;
}
     61e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     622:	cmp	r1, #4
     624:	bhi.w	506 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     628:	adds	r1, #1
				div_arm = 1;
     62a:	movs	r2, #1
     62c:	b.n	4e6 <set_arm_clock+0xf6>
     62e:	ldr.w	r8, [pc, #124]	; 6ac <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     632:	movs	r3, #108	; 0x6c
     634:	ldr	r0, [pc, #104]	; (6a0 <set_arm_clock+0x2b0>)
     636:	b.n	526 <set_arm_clock+0x136>
     638:	movs	r5, #18
     63a:	b.n	44a <set_arm_clock+0x5a>
     63c:	ldr	r0, [pc, #100]	; (6a4 <set_arm_clock+0x2b4>)
     63e:	ldr.w	r8, [pc, #112]	; 6b0 <set_arm_clock+0x2c0>
     642:	mul.w	r0, r0, r3
     646:	orr.w	r8, r3, r8
     64a:	b.n	526 <set_arm_clock+0x136>
     64c:	.word	0x1f78a400
     650:	.word	0x400fc000
     654:	.word	0x40080000
     658:	.word	0x23c34600
     65c:	.word	0xdc3cba00
     660:	.word	0x004cb223
     664:	.word	0x51eb851f
     668:	.word	0x016e3600
     66c:	.word	0x400d8000
     670:	.word	0x80003040
     674:	.word	0x269fb1ff
     678:	.word	0x005b8d80
     67c:	.word	0x165e9f81
     680:	.word	0x269fb200
     684:	.word	0x8001307f
     688:	.word	0x08f0d17f
     68c:	.word	0x00e5109f
     690:	.word	0x431bde83
     694:	.word	0x200005b8
     698:	.word	0x200005b4
     69c:	.word	0x20001000
     6a0:	.word	0x4d3f6400
     6a4:	.word	0x00b71b00
     6a8:	.word	0x80002036
     6ac:	.word	0x8000206c
     6b0:	.word	0x80002000

000006b4 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     6b4:	cmp	r0, #0
     6b6:	beq.n	768 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     6b8:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     6ba:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6be:	sub	sp, #20
     6c0:	mov	fp, r0
     6c2:	ldr	r4, [pc, #168]	; (76c <delay+0xb8>)
     6c4:	ldr	r5, [pc, #168]	; (770 <delay+0xbc>)
     6c6:	ldr	r6, [pc, #172]	; (774 <delay+0xc0>)
     6c8:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     6cc:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     6d0:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     6d2:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     6d4:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     6d8:	cmp	r1, #0
     6da:	bne.n	6cc <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     6dc:	ldr	r7, [pc, #152]	; (778 <delay+0xc4>)
     6de:	strd	r8, r9, [sp, #8]
     6e2:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     6e4:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6e6:	ldr	r2, [pc, #148]	; (77c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     6e8:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     6ec:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6ee:	ldr	r2, [r2, #0]
     6f0:	movs	r7, #1
     6f2:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     6f6:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6fa:	mov	r8, r3
	if (frac > 1000) frac = 1000;
     6fc:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6fe:	cmp	r3, r1
     700:	it	eq
     702:	cmpeq	r2, r8
     704:	ite	cs
     706:	movcs	sl, r8
     708:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     70a:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     70e:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     712:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     714:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     716:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     71a:	cmp	r3, #0
     71c:	bne.n	70e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     71e:	ldr	r0, [sp, #4]
     720:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     722:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     724:	ldr	r0, [pc, #84]	; (77c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     726:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     72a:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     72c:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     730:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     734:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     738:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     73c:	mov	r8, r1
	if (frac > 1000) frac = 1000;
     73e:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     740:	cmp	r1, r3
     742:	it	eq
     744:	cmpeq	r0, r8
     746:	ite	cs
     748:	movcs	r3, r8
     74a:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     74c:	add	r2, r3
     74e:	cmp	r2, lr
     750:	bcc.n	762 <delay+0xae>
			if (--msec == 0) return;
     752:	subs.w	fp, fp, #1
			start += 1000;
     756:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     75a:	bne.n	70e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     75c:	add	sp, #20
     75e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     762:	bl	810 <yield>
	}
     766:	b.n	70e <delay+0x5a>
     768:	bx	lr
     76a:	nop
     76c:	.word	0x200012a0
     770:	.word	0x20001004
     774:	.word	0x20000ffc
     778:	.word	0xe0001004
     77c:	.word	0x20001000

00000780 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     780:	cmp	r0, #39	; 0x27
     782:	bhi.n	7be <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     784:	lsls	r0, r0, #4
     786:	ldr	r2, [pc, #104]	; (7f0 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     788:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     78a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     78e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     790:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     792:	beq.n	7c0 <pinMode+0x40>
     794:	cmp	r1, #4
     796:	beq.n	7c0 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     798:	ldr	r4, [r3, #12]
     79a:	ldr	r2, [r0, #4]
     79c:	bic.w	r2, r2, r4
     7a0:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     7a2:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     7a4:	cbz	r1, 7e2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     7a6:	cmp	r1, #2
     7a8:	beq.n	7e8 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     7aa:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     7ac:	ldr	r3, [r3, #4]
}
     7ae:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     7b2:	ite	eq
     7b4:	ldreq	r1, [pc, #60]	; (7f4 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     7b6:	ldrne	r1, [pc, #64]	; (7f8 <pinMode+0x78>)
     7b8:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     7ba:	movs	r2, #21
     7bc:	str	r2, [r3, #0]
}
     7be:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     7c0:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     7c2:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     7c4:	ldr	r4, [r0, #4]
     7c6:	orr.w	r2, r2, r4
     7ca:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     7cc:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     7ce:	beq.n	7e2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     7d0:	movw	r1, #2104	; 0x838
     7d4:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     7d6:	ldr	r3, [r3, #4]
     7d8:	movs	r2, #21
}
     7da:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     7de:	str	r2, [r3, #0]
}
     7e0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     7e2:	movs	r1, #56	; 0x38
     7e4:	str	r1, [r2, #0]
     7e6:	b.n	7d6 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     7e8:	ldr	r1, [pc, #16]	; (7fc <pinMode+0x7c>)
     7ea:	str	r1, [r2, #0]
     7ec:	b.n	7d6 <pinMode+0x56>
     7ee:	nop
     7f0:	.word	0x2000000c
     7f4:	.word	0x00013038
     7f8:	.word	0x00010038
     7fc:	.word	0x0001f038

00000800 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     800:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     802:	bl	94 <setup>
	while (1) {
		loop();
     806:	bl	98 <loop>
		yield();
     80a:	bl	810 <yield>
     80e:	b.n	806 <main+0x6>

00000810 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
     810:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
     812:	ldr	r4, [pc, #132]	; (898 <yield+0x88>)
     814:	ldrb	r3, [r4, #0]
     816:	cbnz	r3, 83a <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     818:	ldr	r3, [pc, #128]	; (89c <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     81a:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     81c:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     81e:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     820:	cbnz	r3, 86a <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     822:	ldr	r3, [pc, #124]	; (8a0 <yield+0x90>)
     824:	ldrb	r3, [r3, #0]
     826:	cmp	r3, #0
     828:	bne.n	87e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
     82a:	ldr	r3, [pc, #120]	; (8a4 <yield+0x94>)

	running = 0;
     82c:	movs	r1, #0
     82e:	ldr	r2, [r3, #0]
     830:	strb	r1, [r4, #0]
     832:	cbz	r2, 83a <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     834:	mrs	r2, IPSR
		if (ipsr != 0) return;
     838:	cbz	r2, 83c <yield+0x2c>
     83a:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     83c:	mrs	r0, PRIMASK
		__disable_irq();
     840:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
     842:	ldr	r2, [r3, #0]
		if (first == nullptr) {
     844:	cbz	r2, 884 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
     846:	ldr	r4, [pc, #96]	; (8a8 <yield+0x98>)
     848:	ldrb	r1, [r4, #0]
     84a:	cbnz	r1, 884 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     84c:	movs	r6, #1
		firstYield = first->_next;
     84e:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     850:	strb	r6, [r4, #0]
		firstYield = first->_next;
     852:	str	r5, [r3, #0]
		if (firstYield) {
     854:	cbz	r5, 88c <yield+0x7c>
			firstYield->_prev = nullptr;
     856:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     858:	cbnz	r0, 85c <yield+0x4c>
     85a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     85c:	movs	r5, #0
		(*(first->_function))(*first);
     85e:	ldr	r3, [r2, #8]
     860:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     862:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
     864:	blx	r3
		runningFromYield = false;
     866:	strb	r5, [r4, #0]
     868:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     86a:	bl	1188 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     86e:	cmp	r0, #0
     870:	beq.n	822 <yield+0x12>
     872:	bl	adc <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     876:	ldr	r3, [pc, #40]	; (8a0 <yield+0x90>)
     878:	ldrb	r3, [r3, #0]
     87a:	cmp	r3, #0
     87c:	beq.n	82a <yield+0x1a>
     87e:	bl	1f84 <HardwareSerial::processSerialEvents()>
     882:	b.n	82a <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     884:	cmp	r0, #0
     886:	bne.n	83a <yield+0x2a>
     888:	cpsie	i
     88a:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
     88c:	ldr	r3, [pc, #28]	; (8ac <yield+0x9c>)
     88e:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     890:	cmp	r0, #0
     892:	bne.n	85c <yield+0x4c>
     894:	b.n	85a <yield+0x4a>
     896:	nop
     898:	.word	0x20001008
     89c:	.word	0x200005bc
     8a0:	.word	0x20001268
     8a4:	.word	0x2000101c
     8a8:	.word	0x20001020
     8ac:	.word	0x20001018

000008b0 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
     8b0:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     8b2:	mrs	r2, PRIMASK
		__disable_irq();
     8b6:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
     8b8:	ldrb	r3, [r0, #29]
     8ba:	cbnz	r3, 8ca <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
     8bc:	ldrb	r1, [r0, #28]
     8be:	cmp	r1, #1
     8c0:	beq.n	8d4 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
     8c2:	cmp	r1, #3
     8c4:	beq.n	8e8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
     8c6:	movs	r3, #1
     8c8:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     8ca:	cbnz	r2, 8ce <EventResponder::triggerEventNotImmediate()+0x1e>
     8cc:	cpsie	i
	}
	enableInterrupts(irq);
}
     8ce:	ldr.w	r4, [sp], #4
     8d2:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
     8d4:	ldr	r4, [pc, #68]	; (91c <EventResponder::triggerEventNotImmediate()+0x6c>)
     8d6:	ldr	r1, [r4, #0]
     8d8:	cbz	r1, 904 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     8da:	ldr	r1, [pc, #68]	; (920 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
     8dc:	str	r3, [r0, #20]
				_prev = lastYield;
     8de:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
     8e0:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     8e2:	str	r3, [r0, #24]
				_prev->_next = this;
     8e4:	str	r0, [r3, #20]
     8e6:	b.n	8c6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
     8e8:	ldr	r4, [pc, #56]	; (924 <EventResponder::triggerEventNotImmediate()+0x74>)
     8ea:	ldr	r1, [r4, #0]
     8ec:	cbz	r1, 910 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     8ee:	ldr	r1, [pc, #56]	; (928 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
     8f0:	str	r3, [r0, #20]
				_prev = lastInterrupt;
     8f2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
     8f4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     8f6:	str	r3, [r0, #24]
				_prev->_next = this;
     8f8:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
     8fa:	ldr	r3, [pc, #48]	; (92c <EventResponder::triggerEventNotImmediate()+0x7c>)
     8fc:	mov.w	r1, #268435456	; 0x10000000
     900:	str	r1, [r3, #0]
     902:	b.n	8c6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
     904:	ldr	r3, [pc, #24]	; (920 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
     906:	str	r1, [r0, #20]
				_prev = nullptr;
     908:	str	r1, [r0, #24]
				firstYield = this;
     90a:	str	r0, [r4, #0]
				lastYield = this;
     90c:	str	r0, [r3, #0]
     90e:	b.n	8c6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
     910:	ldr	r3, [pc, #20]	; (928 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
     912:	str	r1, [r0, #20]
				_prev = nullptr;
     914:	str	r1, [r0, #24]
				firstInterrupt = this;
     916:	str	r0, [r4, #0]
				lastInterrupt = this;
     918:	str	r0, [r3, #0]
     91a:	b.n	8fa <EventResponder::triggerEventNotImmediate()+0x4a>
     91c:	.word	0x2000101c
     920:	.word	0x20001018
     924:	.word	0x2000100c
     928:	.word	0x20001010
     92c:	.word	0xe000ed04

00000930 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
     930:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     932:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     934:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     936:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     938:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     93a:	beq.n	944 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
     93c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     940:	b.w	8b0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     944:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
     946:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     94a:	bx	r3

0000094c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
     94c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     94e:	mrs	r1, PRIMASK
		__disable_irq();
     952:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     954:	ldr	r4, [pc, #48]	; (988 <EventResponder::runFromInterrupt()+0x3c>)
     956:	ldr	r3, [r4, #0]
		if (first) {
     958:	cbz	r3, 97e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     95a:	ldr	r6, [pc, #48]	; (98c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
     95c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
     95e:	ldr	r2, [r3, #20]
     960:	str	r2, [r4, #0]
			if (firstInterrupt) {
     962:	cbz	r2, 984 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
     964:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     966:	cbnz	r1, 96a <EventResponder::runFromInterrupt()+0x1e>
     968:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
     96a:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
     96c:	mov	r0, r3
     96e:	ldr	r3, [r3, #8]
     970:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     972:	mrs	r1, PRIMASK
		__disable_irq();
     976:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     978:	ldr	r3, [r4, #0]
		if (first) {
     97a:	cmp	r3, #0
     97c:	bne.n	95e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     97e:	cbnz	r1, 982 <EventResponder::runFromInterrupt()+0x36>
     980:	cpsie	i
     982:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     984:	str	r2, [r6, #0]
     986:	b.n	966 <EventResponder::runFromInterrupt()+0x1a>
     988:	.word	0x2000100c
     98c:	.word	0x20001010

00000990 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
     990:	b.w	94c <EventResponder::runFromInterrupt()>

00000994 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
     994:	ldr	r2, [pc, #96]	; (9f8 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
     996:	push	{r4, r5}
	if (listActive == nullptr) {
     998:	ldr	r4, [r2, #0]
     99a:	cmp	r4, #0
     99c:	beq.n	9f0 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
     99e:	ldr	r3, [r0, #0]
     9a0:	ldr	r1, [r4, #0]
     9a2:	cmp	r3, r1
     9a4:	bcs.n	9c6 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     9a6:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
     9a8:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
     9aa:	str	r4, [r0, #8]
		_prev = nullptr;
     9ac:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     9ae:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
     9b0:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
     9b2:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     9b4:	movs	r3, #2
}
     9b6:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     9b8:	strb	r3, [r0, #20]
}
     9ba:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
     9bc:	str	r3, [r0, #0]
     9be:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
     9c0:	ldr	r1, [r2, #0]
     9c2:	cmp	r3, r1
     9c4:	bcc.n	9d8 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     9c6:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     9c8:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     9ca:	cmp	r2, #0
     9cc:	bne.n	9bc <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
     9ce:	str	r2, [r0, #8]
		_prev = timer;
     9d0:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     9d2:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
     9d4:	str	r0, [r4, #8]
     9d6:	b.n	9b4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     9d8:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
     9da:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
     9dc:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
     9de:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     9e0:	str	r5, [r0, #12]
				timer->_prev = this;
     9e2:	str	r0, [r4, #12]
				_prev->_next = this;
     9e4:	ldr	r1, [r0, #12]
     9e6:	str	r0, [r1, #8]
				timer->_ms -= _ms;
     9e8:	str	r3, [r4, #0]
				_state = TimerActive;
     9ea:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
     9ec:	pop	{r4, r5}
     9ee:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
     9f0:	str	r4, [r0, #8]
		_prev = nullptr;
     9f2:	str	r4, [r0, #12]
		listActive = this;
     9f4:	str	r0, [r2, #0]
     9f6:	b.n	9b4 <MillisTimer::addToActiveList()+0x20>
     9f8:	.word	0x20001014

000009fc <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
     9fc:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
     9fe:	ldr	r6, [pc, #136]	; (a88 <MillisTimer::runFromTimer()+0x8c>)
     a00:	ldr	r4, [r6, #0]
	while (timer) {
     a02:	cbz	r4, a50 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     a04:	ldr	r3, [r4, #0]
     a06:	cmp	r3, #0
     a08:	bne.n	a80 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
     a0a:	mov	r5, r3
     a0c:	ldr	r7, [pc, #124]	; (a8c <MillisTimer::runFromTimer()+0x90>)
     a0e:	b.n	a1a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
     a10:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     a12:	cbz	r4, a50 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     a14:	ldr	r3, [r4, #0]
     a16:	cmp	r3, #0
     a18:	bne.n	a80 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
     a1a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
     a1c:	cbz	r3, a20 <MillisTimer::runFromTimer()+0x24>
     a1e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
     a20:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
     a22:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     a24:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
     a26:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     a28:	ldr	r3, [r3, #0]
     a2a:	cmp	r3, r7
     a2c:	bne.n	a72 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     a2e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     a30:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     a32:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     a34:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
     a36:	beq.n	a7a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     a38:	bl	8b0 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
     a3c:	ldr	r3, [r4, #4]
     a3e:	cmp	r3, #0
     a40:	beq.n	a10 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
     a42:	str	r3, [r4, #0]
				timer->addToActiveList();
     a44:	mov	r0, r4
     a46:	bl	994 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
     a4a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     a4c:	cmp	r4, #0
     a4e:	bne.n	a14 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     a50:	mrs	r3, PRIMASK
		__disable_irq();
     a54:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     a56:	ldr	r2, [pc, #56]	; (a90 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     a58:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     a5a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     a5c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
     a5e:	cbnz	r3, a62 <MillisTimer::runFromTimer()+0x66>
     a60:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
     a62:	cbz	r0, a70 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
     a64:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
     a66:	bl	994 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
     a6a:	mov	r0, r4
     a6c:	cmp	r0, #0
     a6e:	bne.n	a64 <MillisTimer::runFromTimer()+0x68>
     a70:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     a72:	mov	r2, r4
     a74:	movs	r1, #0
     a76:	blx	r3
     a78:	b.n	a3c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     a7a:	ldr	r3, [r0, #8]
     a7c:	blx	r3
     a7e:	b.n	a3c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
     a80:	subs	r3, #1
     a82:	str	r3, [r4, #0]
			break;
     a84:	b.n	a50 <MillisTimer::runFromTimer()+0x54>
     a86:	nop
     a88:	.word	0x20001014
     a8c:	.word	0x00000931
     a90:	.word	0x20001024

00000a94 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     a94:	ldr	r2, [pc, #16]	; (aa8 <systick_isr+0x14>)
     a96:	ldr	r3, [pc, #20]	; (aac <systick_isr+0x18>)
     a98:	ldr	r1, [r2, #0]
	systick_millis_count++;
     a9a:	ldr	r2, [pc, #20]	; (ab0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     a9c:	str	r1, [r3, #0]
	systick_millis_count++;
     a9e:	ldr	r3, [r2, #0]
     aa0:	adds	r3, #1
     aa2:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
     aa4:	b.w	9fc <MillisTimer::runFromTimer()>
     aa8:	.word	0xe0001004
     aac:	.word	0x20000ffc
     ab0:	.word	0x20001004

00000ab4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
     ab4:	b.w	1194 <usb_serial_flush_input>

00000ab8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     ab8:	b.w	1144 <usb_serial_peekchar>

00000abc <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     abc:	b.w	1208 <usb_serial_getchar>

00000ac0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     ac0:	b.w	1188 <usb_serial_available>

00000ac4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     ac4:	b.w	12b8 <usb_serial_flush_output>

00000ac8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
     ac8:	b.w	126c <usb_serial_write_buffer_free>

00000acc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     acc:	mov	r0, r1
     ace:	mov	r1, r2
     ad0:	b.w	1254 <usb_serial_write>

00000ad4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     ad4:	mov	r0, r1
     ad6:	b.w	1228 <usb_serial_putchar>
     ada:	nop

00000adc <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
     adc:	ldr	r3, [pc, #4]	; (ae4 <serialEvent()+0x8>)
     ade:	movs	r2, #0
     ae0:	strb	r2, [r3, #0]
     ae2:	bx	lr
     ae4:	.word	0x200005bc

00000ae8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     ae8:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
     aea:	ldr	r4, [pc, #24]	; (b04 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     aec:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
     aee:	ldr	r3, [r0, #0]
     af0:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     af2:	ldrh	r4, [r4, #0]
	return write(buf, 2);
     af4:	add	r1, sp, #4
     af6:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     af8:	strh.w	r4, [sp, #4]
	return write(buf, 2);
     afc:	blx	r3
}
     afe:	add	sp, #8
     b00:	pop	{r4, pc}
     b02:	nop
     b04:	.word	0x200002b4

00000b08 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
     b08:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
     b0a:	push	{r4, lr}
     b0c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
     b0e:	ldr	r3, [r3, #4]
     b10:	blx	r3
	return len;
}
     b12:	mov	r0, r4
     b14:	pop	{r4, pc}
     b16:	nop

00000b18 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
     b18:	push	{r1, r2, r3}
     b1a:	push	{lr}
     b1c:	sub	sp, #8
     b1e:	add	r3, sp, #12
     b20:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
     b24:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
     b26:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
     b28:	bl	2de8 <vdprintf>
#endif
}
     b2c:	add	sp, #8
     b2e:	ldr.w	lr, [sp], #4
     b32:	add	sp, #12
     b34:	bx	lr
     b36:	nop

00000b38 <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
     b38:	b.w	21a4 <malloc>

00000b3c <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     b3c:	movs	r0, #4
     b3e:	mov	r1, lr
     b40:	tst	r0, r1
     b42:	beq.n	b4c <_MSP>
     b44:	mrs	r0, PSP
     b48:	b.w	b5c <HardFault_HandlerC>

00000b4c <_MSP>:
     b4c:	mrs	r0, MSP
     b50:	b.w	b5c <HardFault_HandlerC>

00000b54 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     b54:	bx	lr
     b56:	nop

00000b58 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     b58:	bx	lr
     b5a:	nop

00000b5c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b5c:	ldr	r3, [pc, #108]	; (bcc <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     b5e:	movs	r1, #5
     b60:	ldr	r2, [pc, #108]	; (bd0 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     b62:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     b64:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     b66:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     b6a:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     b6c:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     b70:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b72:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     b74:	ldr	r4, [pc, #92]	; (bd4 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b76:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     b78:	ldr	r0, [pc, #92]	; (bd8 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b7a:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     b7c:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     b80:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     b84:	ldr	r3, [r4, #0]
     b86:	cmp	r3, r0
     b88:	bls.n	b90 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     b8a:	ldr	r0, [pc, #80]	; (bdc <HardFault_HandlerC+0x80>)
     b8c:	bl	3f0 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     b90:	ldr	r5, [pc, #56]	; (bcc <HardFault_HandlerC+0x70>)
     b92:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     b94:	movs	r0, #0
     b96:	ldr	r2, [pc, #72]	; (be0 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     b98:	ldr	r1, [pc, #72]	; (be4 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     b9a:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     b9e:	str	r0, [sp, #4]
     ba0:	ldr	r3, [sp, #4]
     ba2:	cmp	r3, r2
     ba4:	bhi.n	bb2 <HardFault_HandlerC+0x56>
     ba6:	ldr	r3, [sp, #4]
     ba8:	adds	r3, #1
     baa:	str	r3, [sp, #4]
     bac:	ldr	r3, [sp, #4]
     bae:	cmp	r3, r2
     bb0:	bls.n	ba6 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     bb2:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     bb6:	str	r0, [sp, #4]
     bb8:	ldr	r3, [sp, #4]
     bba:	cmp	r3, r1
     bbc:	bhi.n	b9a <HardFault_HandlerC+0x3e>
     bbe:	ldr	r3, [sp, #4]
     bc0:	adds	r3, #1
     bc2:	str	r3, [sp, #4]
     bc4:	ldr	r3, [sp, #4]
     bc6:	cmp	r3, r1
     bc8:	bls.n	bbe <HardFault_HandlerC+0x62>
     bca:	b.n	b9a <HardFault_HandlerC+0x3e>
     bcc:	.word	0x401bc000
     bd0:	.word	0x401f8000
     bd4:	.word	0x200005b8
     bd8:	.word	0x23c345ff
     bdc:	.word	0x11e1a300
     be0:	.word	0x000f423f
     be4:	.word	0x0089543f

00000be8 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
     be8:	ldr	r2, [pc, #36]	; (c10 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
     bea:	push	{r3, lr}
        char *prev = __brkval;
     bec:	ldr	r3, [r2, #0]
        if (incr != 0) {
     bee:	cbz	r0, bfa <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
     bf0:	add	r0, r3
     bf2:	ldr	r1, [pc, #32]	; (c14 <_sbrk+0x2c>)
     bf4:	cmp	r0, r1
     bf6:	bhi.n	bfe <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
     bf8:	str	r0, [r2, #0]
        }
        return prev;
}
     bfa:	mov	r0, r3
     bfc:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     bfe:	bl	2148 <__errno>
     c02:	movs	r2, #12
                        return (void *)-1;
     c04:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     c08:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
     c0a:	mov	r0, r3
     c0c:	pop	{r3, pc}
     c0e:	nop
     c10:	.word	0x200005d0
     c14:	.word	0x20280000

00000c18 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     c18:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     c1a:	ldr	r1, [pc, #80]	; (c6c <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     c1c:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     c20:	ldr	r5, [pc, #76]	; (c70 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     c22:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     c24:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     c28:	ldr	r6, [pc, #72]	; (c74 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     c2a:	ldr	r2, [pc, #76]	; (c78 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     c2c:	add.w	r5, r5, r0, lsl #5
     c30:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     c32:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     c34:	mov	r0, r5
     c36:	ldrh	r2, [r6, #0]
     c38:	bl	1bf4 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     c3c:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     c3e:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     c42:	add	r1, r4
	asm("dsb");
     c44:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     c48:	ldr	r2, [pc, #48]	; (c7c <rx_queue_transfer+0x64>)
     c4a:	str	r3, [r2, #0]
		location += 32;
     c4c:	adds	r3, #32
	} while (location < end_addr);
     c4e:	cmp	r1, r3
     c50:	bhi.n	c4a <rx_queue_transfer+0x32>
	asm("dsb");
     c52:	dsb	sy
	asm("isb");
     c56:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     c5a:	movs	r0, #3
     c5c:	mov	r1, r5
     c5e:	bl	1c4c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     c62:	ldr	r3, [pc, #28]	; (c80 <rx_queue_transfer+0x68>)
     c64:	mov.w	r2, #131072	; 0x20000
     c68:	str	r2, [r3, #0]
     c6a:	pop	{r3, r4, r5, r6, r7, pc}
     c6c:	.word	0x20200000
     c70:	.word	0x20001040
     c74:	.word	0x2000114e
     c78:	.word	0xe000e18c
     c7c:	.word	0xe000ef5c
     c80:	.word	0xe000e10c

00000c84 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     c84:	ldr	r2, [pc, #144]	; (d18 <rx_event+0x94>)
     c86:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     c88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     c8c:	ubfx	r3, r3, #16, #15
     c90:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     c92:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     c94:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     c96:	cmp	r4, #0
     c98:	ble.n	d0c <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     c9a:	ldr	r1, [pc, #128]	; (d1c <rx_event+0x98>)
		if (head != rx_tail) {
     c9c:	ldr	r2, [pc, #128]	; (d20 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     c9e:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     ca0:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     ca2:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     ca4:	ldr	r0, [pc, #124]	; (d24 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     ca6:	ldr	r6, [pc, #128]	; (d28 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     ca8:	cmp	r3, r2
     caa:	beq.n	cbc <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     cac:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     cb0:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     cb4:	rsb	r2, r7, #512	; 0x200
     cb8:	cmp	r4, r2
     cba:	bls.n	ce2 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     cbc:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     cbe:	movs	r2, #0
     cc0:	ldr	r7, [pc, #104]	; (d2c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     cc2:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     cc4:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     cc8:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     ccc:	ldr	r6, [pc, #96]	; (d30 <rx_event+0xac>)
     cce:	ite	ls
     cd0:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     cd2:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     cd4:	strb	r2, [r1, #0]
		rx_available += len;
     cd6:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     cd8:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     cda:	add	r4, r2
     cdc:	str	r4, [r6, #0]
     cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     ce2:	ldr	r3, [pc, #80]	; (d34 <rx_event+0xb0>)
     ce4:	add.w	r0, r7, r8, lsl #9
     ce8:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     cea:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     cec:	add.w	r1, r3, r5, lsl #9
     cf0:	add	r0, r3
     cf2:	bl	1fac <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     cf6:	ldr	r2, [pc, #56]	; (d30 <rx_event+0xac>)
				rx_queue_transfer(i);
     cf8:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     cfa:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     cfe:	ldr	r3, [r2, #0]
     d00:	add	r4, r3
     d02:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     d04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     d08:	b.w	c18 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     d0c:	mov	r0, r5
	}
}
     d0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     d12:	b.w	c18 <rx_queue_transfer>
     d16:	nop
     d18:	.word	0x2000114e
     d1c:	.word	0x20001164
     d20:	.word	0x20001140
     d24:	.word	0x20001144
     d28:	.word	0x20001150
     d2c:	.word	0x20001028
     d30:	.word	0x20001160
     d34:	.word	0x20200000

00000d38 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     d38:	ldr	r3, [pc, #120]	; (db4 <usb_serial_flush_callback+0x7c>)
     d3a:	ldrb	r2, [r3, #0]
     d3c:	cbnz	r2, d56 <usb_serial_flush_callback+0x1e>
     d3e:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     d42:	ldr	r2, [pc, #116]	; (db8 <usb_serial_flush_callback+0x80>)
     d44:	ldrb	r2, [r2, #0]
     d46:	cbz	r2, d56 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     d48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     d4c:	ldr	r5, [pc, #108]	; (dbc <usb_serial_flush_callback+0x84>)
     d4e:	ldrh	r2, [r5, #0]
     d50:	cbnz	r2, d58 <usb_serial_flush_callback+0x20>
     d52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d56:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     d58:	ldr	r6, [pc, #100]	; (dc0 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     d5a:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     d5e:	ldr	r7, [pc, #100]	; (dc4 <usb_serial_flush_callback+0x8c>)
     d60:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     d62:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     d64:	ldr	r4, [pc, #96]	; (dc8 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     d66:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     d6a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     d6e:	mov	r0, r7
     d70:	mov	r1, r4
     d72:	bl	1bf4 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     d76:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     d7a:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     d7e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     d82:	ldr	r3, [pc, #72]	; (dcc <usb_serial_flush_callback+0x94>)
     d84:	str	r1, [r3, #0]
		location += 32;
     d86:	adds	r1, #32
	} while (location < end_addr);
     d88:	cmp	r2, r1
     d8a:	bhi.n	d84 <usb_serial_flush_callback+0x4c>
	asm("dsb");
     d8c:	dsb	sy
	asm("isb");
     d90:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     d94:	movs	r0, #4
     d96:	mov	r1, r7
     d98:	bl	1c24 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     d9c:	ldrb	r3, [r6, #0]
     d9e:	ldr	r2, [pc, #32]	; (dc0 <usb_serial_flush_callback+0x88>)
     da0:	adds	r3, #1
     da2:	uxtb	r3, r3
     da4:	cmp	r3, #3
     da6:	it	hi
     da8:	movhi	r3, #0
     daa:	strb	r3, [r2, #0]
	tx_available = 0;
     dac:	movs	r3, #0
     dae:	strh	r3, [r5, #0]
     db0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     db4:	.word	0x2000103a
     db8:	.word	0x20001238
     dbc:	.word	0x20001166
     dc0:	.word	0x2000103b
     dc4:	.word	0x20001180
     dc8:	.word	0x20201000
     dcc:	.word	0xe000ef70

00000dd0 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     dd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dd4:	sub	sp, #20
     dd6:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     dd8:	str	r1, [sp, #4]
     dda:	cmp	r1, #0
     ddc:	beq.w	f24 <usb_serial_write.part.1+0x154>
     de0:	movs	r3, #0
     de2:	ldr.w	r8, [pc, #348]	; f40 <usb_serial_write.part.1+0x170>
     de6:	ldr.w	r9, [pc, #332]	; f34 <usb_serial_write.part.1+0x164>
     dea:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     dec:	ldr	r6, [pc, #312]	; (f28 <usb_serial_write.part.1+0x158>)
     dee:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     df2:	ldr.w	sl, [pc, #336]	; f44 <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     df6:	ldr.w	fp, [pc, #336]	; f48 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     dfa:	ldr	r2, [pc, #304]	; (f2c <usb_serial_write.part.1+0x15c>)
     dfc:	ldrb	r4, [r2, #0]
     dfe:	ldr	r2, [pc, #304]	; (f30 <usb_serial_write.part.1+0x160>)
     e00:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     e04:	cmp	r3, #0
     e06:	bne.n	ee6 <usb_serial_write.part.1+0x116>
     e08:	mov	r5, r3
     e0a:	mov	r4, r3
     e0c:	b.n	e38 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     e0e:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     e12:	cbnz	r4, e16 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     e14:	ldr	r5, [r6, #0]
     e16:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     e18:	cmp	r3, #0
     e1a:	bne.n	eda <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     e1c:	ldr	r3, [r6, #0]
     e1e:	subs	r3, r3, r5
     e20:	cmp	r3, #120	; 0x78
     e22:	bhi.n	f18 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     e24:	ldrb.w	r3, [sl]
     e28:	cmp	r3, #0
     e2a:	beq.n	eda <usb_serial_write.part.1+0x10a>
			yield();
     e2c:	bl	810 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     e30:	ldrh.w	r3, [r8]
     e34:	cmp	r3, #0
     e36:	bne.n	ee2 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     e38:	mov	r0, r7
     e3a:	bl	1c70 <usb_transfer_status>
			if (!(status & 0x80)) {
     e3e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     e42:	ldr	r2, [pc, #240]	; (f34 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     e44:	bne.n	e0e <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     e46:	mov.w	r3, #2048	; 0x800
     e4a:	ldr	r2, [pc, #224]	; (f2c <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     e4c:	strb.w	r0, [r9]
     e50:	ldrb	r4, [r2, #0]
     e52:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     e54:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     e58:	lsls	r4, r4, #11
		if (size >= tx_available) {
     e5a:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     e5c:	ldr	r1, [pc, #216]	; (f38 <usb_serial_write.part.1+0x168>)
     e5e:	add	r0, r4
		if (size >= tx_available) {
     e60:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     e62:	add	r0, r1
		if (size >= tx_available) {
     e64:	bcc.n	eee <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     e66:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     e68:	ldr	r1, [sp, #8]
     e6a:	bl	1fac <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     e6e:	movs	r3, #0
     e70:	mov	r1, r4
     e72:	mov.w	r2, #2048	; 0x800
     e76:	mov	r0, r7
     e78:	bl	1bf4 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     e7c:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     e80:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     e84:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     e88:	str.w	r3, [fp]
		location += 32;
     e8c:	adds	r3, #32
	} while (location < end_addr);
     e8e:	cmp	r4, r3
     e90:	bhi.n	e88 <usb_serial_write.part.1+0xb8>
	asm("dsb");
     e92:	dsb	sy
	asm("isb");
     e96:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     e9a:	movs	r0, #4
     e9c:	mov	r1, r7
     e9e:	bl	1c24 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     ea2:	ldr	r3, [pc, #136]	; (f2c <usb_serial_write.part.1+0x15c>)
     ea4:	ldr	r2, [pc, #132]	; (f2c <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     ea6:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     ea8:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     eaa:	ldr	r0, [pc, #144]	; (f3c <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     eac:	adds	r3, #1
     eae:	uxtb	r3, r3
     eb0:	cmp	r3, #3
     eb2:	it	hi
     eb4:	movhi	r3, #0
     eb6:	strb	r3, [r2, #0]
			size -= tx_available;
     eb8:	ldrh.w	r2, [r8]
			sent += tx_available;
     ebc:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     ebe:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     ec2:	add	r3, r2
     ec4:	str	r3, [sp, #0]
			data += tx_available;
     ec6:	ldr	r3, [sp, #8]
     ec8:	add	r3, r2
     eca:	str	r3, [sp, #8]
     ecc:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     ece:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     ed2:	ldr	r1, [sp, #4]
     ed4:	subs	r2, r1, r2
     ed6:	str	r2, [sp, #4]
     ed8:	bne.n	dfa <usb_serial_write.part.1+0x2a>
     eda:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     edc:	add	sp, #20
     ede:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ee2:	ldr	r2, [pc, #72]	; (f2c <usb_serial_write.part.1+0x15c>)
     ee4:	ldrb	r4, [r2, #0]
     ee6:	mov	r2, r3
     ee8:	rsb	r0, r3, #2048	; 0x800
     eec:	b.n	e58 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     eee:	ldr	r4, [sp, #4]
     ef0:	ldr	r1, [sp, #8]
     ef2:	mov	r2, r4
     ef4:	str	r3, [sp, #12]
     ef6:	bl	1fac <memcpy>
			tx_available -= size;
     efa:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     efc:	ldr	r2, [pc, #60]	; (f3c <usb_serial_write.part.1+0x16c>)
     efe:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     f02:	subs	r3, r3, r4
     f04:	strh.w	r3, [r8]
     f08:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     f0a:	str.w	r1, [r2, #132]	; 0x84
     f0e:	mov	r0, r3
     f10:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     f12:	add	sp, #20
     f14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     f18:	movs	r3, #1
				return sent;
     f1a:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     f1c:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     f1e:	add	sp, #20
     f20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     f24:	ldr	r0, [sp, #4]
     f26:	b.n	edc <usb_serial_write.part.1+0x10c>
     f28:	.word	0x20001004
     f2c:	.word	0x2000103b
     f30:	.word	0x20001180
     f34:	.word	0x20001165
     f38:	.word	0x20201000
     f3c:	.word	0x402e0000
     f40:	.word	0x20001166
     f44:	.word	0x20001238
     f48:	.word	0xe000ef70

00000f4c <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     f4c:	bx	lr
     f4e:	nop

00000f50 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     f50:	ldr	r3, [pc, #196]	; (1018 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     f52:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     f56:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     f58:	ldr	r7, [pc, #192]	; (101c <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     f5a:	cmp	r3, #0
     f5c:	beq.n	1008 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     f5e:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     f62:	ldr.w	r8, [pc, #236]	; 1050 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     f66:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     f68:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     f6c:	movs	r1, #0
     f6e:	movs	r2, #128	; 0x80
     f70:	ldr	r0, [pc, #172]	; (1020 <usb_serial_configure+0xd0>)
	tx_head = 0;
     f72:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     f74:	ldr	r6, [pc, #172]	; (1024 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     f76:	bl	2818 <memset>
	tx_head = 0;
     f7a:	ldr	r4, [pc, #172]	; (1028 <usb_serial_configure+0xd8>)
	tx_available = 0;
     f7c:	ldr	r3, [pc, #172]	; (102c <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f7e:	mov	r1, r5
     f80:	mov.w	r2, #256	; 0x100
     f84:	ldr	r0, [pc, #168]	; (1030 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     f86:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     f88:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     f8a:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f8c:	bl	2818 <memset>
	memset(rx_count, 0, sizeof(rx_count));
     f90:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f92:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     f94:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f96:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     f98:	str	r5, [r6, #8]
     f9a:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     f9c:	ldr	r1, [pc, #148]	; (1034 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     f9e:	ldr	r6, [pc, #152]	; (1038 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     fa0:	ldr	r0, [pc, #152]	; (103c <usb_serial_configure+0xec>)
	rx_available = 0;
     fa2:	ldr.w	lr, [pc, #176]	; 1054 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     fa6:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     fa8:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     faa:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     fac:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     fae:	str	r5, [r6, #0]
     fb0:	str	r5, [r6, #4]
     fb2:	str	r5, [r6, #8]
     fb4:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     fb6:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     fba:	bl	1b8c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     fbe:	ldrh.w	r1, [r8]
     fc2:	mov	r2, r5
     fc4:	ldr	r3, [pc, #120]	; (1040 <usb_serial_configure+0xf0>)
     fc6:	movs	r0, #3
     fc8:	bl	1b28 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     fcc:	mov	r3, r5
     fce:	ldrh	r1, [r7, #0]
     fd0:	movs	r2, #1
     fd2:	movs	r0, #4
     fd4:	bl	1b8c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     fd8:	mov	r0, r4
     fda:	adds	r4, #1
     fdc:	bl	c18 <rx_queue_transfer>
     fe0:	cmp	r4, #8
     fe2:	bne.n	fd8 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     fe4:	ldr	r3, [pc, #92]	; (1044 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     fe6:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     fe8:	ldr	r0, [pc, #92]	; (1048 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     fea:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     fec:	ldr	r4, [pc, #92]	; (104c <usb_serial_configure+0xfc>)
     fee:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     ff0:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     ff4:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     ff8:	ldr.w	r2, [r3, #328]	; 0x148
     ffc:	orr.w	r2, r2, #16777216	; 0x1000000
    1000:	str.w	r2, [r3, #328]	; 0x148
    1004:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1008:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    100a:	ldr.w	r8, [pc, #68]	; 1050 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    100e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    1010:	strh.w	r3, [r8]
    1014:	b.n	f6c <usb_serial_configure+0x1c>
    1016:	nop
    1018:	.word	0x20001210
    101c:	.word	0x20001038
    1020:	.word	0x20001180
    1024:	.word	0x20001150
    1028:	.word	0x2000103b
    102c:	.word	0x20001166
    1030:	.word	0x20001040
    1034:	.word	0x20001164
    1038:	.word	0x20001028
    103c:	.word	0x20001140
    1040:	.word	0x00000c85
    1044:	.word	0x402e0000
    1048:	.word	0x20001200
    104c:	.word	0x00000d39
    1050:	.word	0x2000114e
    1054:	.word	0x20001160

00001058 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1058:	ldr	r3, [pc, #196]	; (1120 <usb_serial_read+0xc8>)
    105a:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    105e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1062:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1064:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1066:	ldr	r3, [pc, #188]	; (1124 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1068:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    106a:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    106c:	cmp	r1, #0
    106e:	beq.n	1118 <usb_serial_read+0xc0>
    1070:	ldr	r3, [pc, #180]	; (1128 <usb_serial_read+0xd0>)
    1072:	uxtb	r4, r4
    1074:	ldrb	r3, [r3, #0]
    1076:	cmp	r4, r3
    1078:	beq.n	111c <usb_serial_read+0xc4>
    107a:	mov	sl, r0
    107c:	movs	r7, #0
    107e:	ldr.w	fp, [pc, #192]	; 1140 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    1082:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1084:	ldr	r3, [pc, #164]	; (112c <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    1086:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    108a:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    108c:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    108e:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    1090:	ldr	r3, [pc, #156]	; (1130 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1092:	it	cs
    1094:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    1096:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1098:	ldr	r3, [pc, #144]	; (112c <usb_serial_read+0xd4>)
    109a:	ldrh.w	lr, [r3, r5, lsl #1]
    109e:	ldr	r3, [pc, #148]	; (1134 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    10a0:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    10a4:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    10a8:	ldr	r3, [pc, #140]	; (1138 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    10aa:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    10ae:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    10b0:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    10b2:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    10b4:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    10b6:	bcs.n	10ec <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    10b8:	add.w	r1, lr, r5, lsl #9
    10bc:	mov	r2, r8
    10be:	add	r1, r3
    10c0:	bl	1fac <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    10c4:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    10c6:	ldr.w	r1, [fp]
    10ca:	mov	r0, r9
			rx_index[i] += len;
    10cc:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    10d0:	rsb	r1, r8, r1
			rx_index[i] += len;
    10d4:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    10d6:	str.w	r1, [fp]
			rx_index[i] += len;
    10da:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    10de:	ldr	r3, [pc, #92]	; (113c <usb_serial_read+0xe4>)
    10e0:	mov.w	r2, #131072	; 0x20000
    10e4:	str	r2, [r3, #0]
	return count;
}
    10e6:	add	sp, #12
    10e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    10ec:	bl	1fac <memcpy>
			p += avail;
			rx_available -= avail;
    10f0:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    10f4:	uxtb	r3, r4
			rx_queue_transfer(i);
    10f6:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    10f8:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    10fa:	add	sl, r6
			rx_available -= avail;
    10fc:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1100:	ldr	r2, [pc, #32]	; (1124 <usb_serial_read+0xcc>)
    1102:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    1104:	bl	c18 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1108:	cmp	r9, r7
    110a:	bls.n	1114 <usb_serial_read+0xbc>
    110c:	ldr	r3, [pc, #24]	; (1128 <usb_serial_read+0xd0>)
    110e:	ldrb	r3, [r3, #0]
    1110:	cmp	r4, r3
    1112:	bne.n	1082 <usb_serial_read+0x2a>
    1114:	mov	r0, r7
    1116:	b.n	10de <usb_serial_read+0x86>
    1118:	mov	r0, r1
    111a:	b.n	10de <usb_serial_read+0x86>
    111c:	movs	r0, #0
    111e:	b.n	10de <usb_serial_read+0x86>
    1120:	.word	0xe000e18c
    1124:	.word	0x20001140
    1128:	.word	0x20001164
    112c:	.word	0x20001028
    1130:	.word	0x20001144
    1134:	.word	0x20001150
    1138:	.word	0x20200000
    113c:	.word	0xe000e10c
    1140:	.word	0x20001160

00001144 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1144:	ldr	r3, [pc, #44]	; (1174 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    1146:	ldr	r2, [pc, #48]	; (1178 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1148:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    114a:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    114c:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    114e:	cmp	r3, r2
    1150:	beq.n	116e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1152:	adds	r3, #1
	uint32_t i = rx_list[tail];
    1154:	ldr	r0, [pc, #36]	; (117c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1156:	ldr	r2, [pc, #40]	; (1180 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1158:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    115a:	ldr	r1, [pc, #40]	; (1184 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    115c:	it	cs
    115e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1160:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1162:	ldrh.w	r1, [r1, r3, lsl #1]
    1166:	add.w	r3, r2, r3, lsl #9
    116a:	ldrb	r0, [r3, r1]
    116c:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    116e:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    1172:	bx	lr
    1174:	.word	0x20001140
    1178:	.word	0x20001164
    117c:	.word	0x20001144
    1180:	.word	0x20200000
    1184:	.word	0x20001028

00001188 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    1188:	ldr	r3, [pc, #4]	; (1190 <usb_serial_available+0x8>)
    118a:	ldr	r0, [r3, #0]
}
    118c:	bx	lr
    118e:	nop
    1190:	.word	0x20001160

00001194 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    1194:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1198:	ldr	r6, [pc, #84]	; (11f0 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    119a:	ldr	r5, [pc, #88]	; (11f4 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    119c:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    119e:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    11a0:	uxtb	r4, r4
	while (tail != rx_head) {
    11a2:	cmp	r4, r3
    11a4:	beq.n	11ea <usb_serial_flush_input+0x56>
    11a6:	ldr.w	r9, [pc, #84]	; 11fc <usb_serial_flush_input+0x68>
    11aa:	ldr.w	fp, [pc, #84]	; 1200 <usb_serial_flush_input+0x6c>
    11ae:	ldr.w	r8, [pc, #84]	; 1204 <usb_serial_flush_input+0x70>
    11b2:	ldr	r7, [pc, #68]	; (11f8 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    11b4:	adds	r4, #1
    11b6:	cmp	r4, #8
    11b8:	uxtb.w	sl, r4
    11bc:	bls.n	11c2 <usb_serial_flush_input+0x2e>
    11be:	movs	r4, #0
    11c0:	mov	sl, r4
		uint32_t i = rx_list[tail];
    11c2:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    11c6:	ldr.w	r2, [fp]
    11ca:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    11ce:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    11d0:	ldrh.w	r1, [r7, r1, lsl #1]
    11d4:	subs	r3, r3, r1
    11d6:	subs	r3, r2, r3
    11d8:	str.w	r3, [fp]
		rx_queue_transfer(i);
    11dc:	bl	c18 <rx_queue_transfer>
		rx_tail = tail;
    11e0:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    11e4:	ldrb	r3, [r5, #0]
    11e6:	cmp	r4, r3
    11e8:	bne.n	11b4 <usb_serial_flush_input+0x20>
    11ea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ee:	nop
    11f0:	.word	0x20001140
    11f4:	.word	0x20001164
    11f8:	.word	0x20001028
    11fc:	.word	0x20001144
    1200:	.word	0x20001160
    1204:	.word	0x20001150

00001208 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1208:	push	{lr}
    120a:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    120c:	movs	r1, #1
    120e:	add.w	r0, sp, #7
    1212:	bl	1058 <usb_serial_read>
    1216:	cbz	r0, 1222 <usb_serial_getchar+0x1a>
    1218:	ldrb.w	r0, [sp, #7]
	return -1;
}
    121c:	add	sp, #12
    121e:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    1222:	mov.w	r0, #4294967295
    1226:	b.n	121c <usb_serial_getchar+0x14>

00001228 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1228:	ldr	r3, [pc, #36]	; (1250 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    122a:	push	{lr}
    122c:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    122e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1230:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1234:	cbnz	r3, 1240 <usb_serial_putchar+0x18>
    1236:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    123a:	add	sp, #12
    123c:	ldr.w	pc, [sp], #4
    1240:	movs	r1, #1
    1242:	add.w	r0, sp, #7
    1246:	bl	dd0 <usb_serial_write.part.1>
    124a:	add	sp, #12
    124c:	ldr.w	pc, [sp], #4
    1250:	.word	0x20001238

00001254 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1254:	ldr	r3, [pc, #16]	; (1268 <usb_serial_write+0x14>)
    1256:	ldrb	r3, [r3, #0]
    1258:	and.w	r2, r3, #255	; 0xff
    125c:	cbz	r3, 1262 <usb_serial_write+0xe>
    125e:	b.w	dd0 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1262:	mov	r0, r2
    1264:	bx	lr
    1266:	nop
    1268:	.word	0x20001238

0000126c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    126c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1270:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    1272:	ldr.w	r8, [pc, #64]	; 12b4 <usb_serial_write_buffer_free+0x48>
    1276:	movs	r3, #1
    1278:	ldr	r5, [pc, #48]	; (12ac <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    127a:	mov	r7, r4
    127c:	ldr	r6, [pc, #48]	; (12b0 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    127e:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1282:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1284:	mov	r0, r5
    1286:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1288:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    128a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    128e:	beq.n	129c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1290:	bl	1c70 <usb_transfer_status>
    1294:	lsls	r3, r0, #24
    1296:	it	pl
    1298:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    129c:	cmp	r4, #4
    129e:	bne.n	1282 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    12a0:	movs	r3, #0
	return sum;
}
    12a2:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    12a4:	strb.w	r3, [r8]
	return sum;
}
    12a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12ac:	.word	0x20001180
    12b0:	.word	0x2000103b
    12b4:	.word	0x2000103a

000012b8 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    12b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    12bc:	ldr	r3, [pc, #124]	; (133c <usb_serial_flush_output+0x84>)
    12be:	ldrb	r3, [r3, #0]
    12c0:	cbz	r3, 12c8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    12c2:	ldr	r5, [pc, #124]	; (1340 <usb_serial_flush_output+0x88>)
    12c4:	ldrh	r2, [r5, #0]
    12c6:	cbnz	r2, 12cc <usb_serial_flush_output+0x14>
    12c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    12cc:	ldr.w	r8, [pc, #132]	; 1354 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    12d0:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    12d4:	ldr	r6, [pc, #108]	; (1344 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    12d6:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    12da:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    12de:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    12e0:	ldr	r4, [pc, #100]	; (1348 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    12e2:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    12e4:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    12e8:	ldr	r7, [pc, #96]	; (134c <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    12ea:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    12ee:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    12f0:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    12f4:	mov	r1, r4
    12f6:	bl	1bf4 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    12fa:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    12fe:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    1302:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1306:	ldr	r3, [pc, #72]	; (1350 <usb_serial_flush_output+0x98>)
    1308:	str	r1, [r3, #0]
		location += 32;
    130a:	adds	r1, #32
	} while (location < end_addr);
    130c:	cmp	r2, r1
    130e:	bhi.n	1308 <usb_serial_flush_output+0x50>
	asm("dsb");
    1310:	dsb	sy
	asm("isb");
    1314:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1318:	movs	r0, #4
    131a:	mov	r1, r6
    131c:	bl	1c24 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1320:	ldrb.w	r3, [r8]
    1324:	ldr	r2, [pc, #44]	; (1354 <usb_serial_flush_output+0x9c>)
    1326:	adds	r3, #1
    1328:	uxtb	r3, r3
    132a:	cmp	r3, #3
    132c:	it	hi
    132e:	movhi	r3, #0
    1330:	strb	r3, [r2, #0]
	tx_available = 0;
    1332:	movs	r3, #0
    1334:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    1336:	strb	r3, [r7, #0]
    1338:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    133c:	.word	0x20001238
    1340:	.word	0x20001166
    1344:	.word	0x20001180
    1348:	.word	0x20201000
    134c:	.word	0x2000103a
    1350:	.word	0xe000ef70
    1354:	.word	0x2000103b

00001358 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1358:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    135a:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    135c:	cbz	r3, 1366 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    135e:	ldr	r3, [r2, #4]
    1360:	orr.w	r3, r3, #32768	; 0x8000
    1364:	str	r3, [r2, #4]
	}
	__disable_irq();
    1366:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1368:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    136a:	cbz	r4, 1394 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    136c:	ldr	r3, [pc, #64]	; (13b0 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    136e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1370:	ldr.w	r4, [r3, #432]	; 0x1b0
    1374:	tst	r4, r1
    1376:	bne.n	13a8 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1378:	ldr.w	r4, [r3, #320]	; 0x140
    137c:	orr.w	r4, r4, #16384	; 0x4000
    1380:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1384:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    1388:	ldr.w	r4, [r3, #320]	; 0x140
    138c:	lsls	r4, r4, #17
    138e:	bpl.n	1378 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1390:	tst	r1, r5
    1392:	bne.n	13a8 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    1394:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    1396:	ldr	r4, [pc, #24]	; (13b0 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1398:	str	r2, [r0, #8]
	endpoint->status = 0;
    139a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    139c:	ldr.w	r3, [r4, #432]	; 0x1b0
    13a0:	orrs	r1, r3
    13a2:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    13a6:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    13a8:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    13aa:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    13ac:	pop	{r4, r5}
    13ae:	bx	lr
    13b0:	.word	0x402e0000

000013b4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    13b4:	push	{r4, r5, r6, lr}
    13b6:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    13b8:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    13ba:	cbz	r0, 13e2 <run_callbacks+0x2e>
    13bc:	mov	r2, r0
    13be:	movs	r4, #0
    13c0:	b.n	13ca <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    13c2:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    13c4:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    13c6:	cmp	r2, #1
    13c8:	beq.n	13e4 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    13ca:	ldr	r3, [r2, #4]
    13cc:	ands.w	r3, r3, #128	; 0x80
    13d0:	beq.n	13c2 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    13d2:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    13d4:	cbz	r4, 13e2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    13d6:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    13d8:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    13da:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    13dc:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    13de:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    13e0:	bne.n	13d6 <run_callbacks+0x22>
    13e2:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    13e4:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    13e6:	str	r3, [r6, #52]	; 0x34
			break;
    13e8:	b.n	13d4 <run_callbacks+0x20>
    13ea:	nop

000013ec <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    13ec:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    13ee:	cbnz	r1, 142e <endpoint0_transmit.constprop.1+0x42>
    13f0:	ldr	r4, [pc, #136]	; (147c <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13f2:	ldr	r1, [pc, #140]	; (1480 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    13f4:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    13f6:	ldr	r3, [pc, #140]	; (1484 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13f8:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    13fa:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    13fc:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13fe:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    1400:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1402:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1404:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1406:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    140a:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    140c:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1410:	ldr	r5, [pc, #116]	; (1488 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1412:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1416:	ldr.w	r1, [r3, #432]	; 0x1b0
    141a:	orr.w	r1, r1, #1
    141e:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1422:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1424:	ldr.w	r3, [r2, #432]	; 0x1b0
    1428:	cmp	r3, #0
    142a:	bne.n	1424 <endpoint0_transmit.constprop.1+0x38>
}
    142c:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    142e:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1430:	ldr	r3, [pc, #88]	; (148c <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1432:	ldr	r5, [pc, #80]	; (1484 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1434:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1436:	ldr	r4, [pc, #68]	; (147c <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1438:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    143c:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    143e:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1440:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1442:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1446:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1448:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    144c:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    144e:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1452:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1456:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    145a:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    145c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    145e:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1462:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1466:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    146a:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    146c:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    146e:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1472:	ldr.w	r3, [r2, #432]	; 0x1b0
    1476:	cmp	r3, #0
    1478:	bne.n	1472 <endpoint0_transmit.constprop.1+0x86>
    147a:	b.n	13f2 <endpoint0_transmit.constprop.1+0x6>
    147c:	.word	0x20003000
    1480:	.word	0x20002020
    1484:	.word	0x402e0000
    1488:	.word	0x20001214
    148c:	.word	0x20002000

00001490 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    1490:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1494:	ldr	r4, [pc, #752]	; (1788 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    1496:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1498:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    149c:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    14a0:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    14a4:	beq.n	1564 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    14a6:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    14aa:	cmp	r3, #0
    14ac:	beq.n	155a <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    14ae:	mov.w	fp, #65537	; 0x10001
    14b2:	ldr.w	r9, [pc, #764]	; 17b0 <isr+0x320>
    14b6:	ldr	r6, [pc, #724]	; (178c <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    14b8:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    14ba:	mov	sl, fp
    14bc:	ldr	r0, [r6, #40]	; 0x28
    14be:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    14c0:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    14c4:	ldr.w	r3, [r4, #320]	; 0x140
    14c8:	orr.w	r3, r3, #8192	; 0x2000
    14cc:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    14d0:	ldr.w	r3, [r4, #320]	; 0x140
    14d4:	lsls	r7, r3, #18
    14d6:	bpl.n	14c4 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    14d8:	ldr.w	r3, [r5, #320]	; 0x140
    14dc:	bic.w	r3, r3, #8192	; 0x2000
    14e0:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    14e4:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    14e8:	ldr.w	r3, [r4, #436]	; 0x1b4
    14ec:	ands.w	r3, r3, #65537	; 0x10001
    14f0:	bne.n	14e8 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    14f2:	uxth	r1, r0
    14f4:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    14f8:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    14fc:	cmp	r1, r7
    14fe:	bhi.w	164c <isr+0x1bc>
    1502:	cmp.w	r1, #1664	; 0x680
    1506:	bcs.w	18e0 <isr+0x450>
    150a:	cmp.w	r1, #258	; 0x102
    150e:	beq.w	17e6 <isr+0x356>
    1512:	bhi.w	16de <isr+0x24e>
    1516:	cmp	r1, #128	; 0x80
    1518:	beq.w	17cc <isr+0x33c>
    151c:	cmp	r1, #130	; 0x82
    151e:	bne.w	16ce <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1522:	uxth	r2, r2
    1524:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1528:	cmp	r1, #7
    152a:	bhi.w	16ce <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    152e:	lsls	r1, r1, #2
    1530:	ldr	r0, [pc, #604]	; (1790 <isr+0x300>)
		reply_buffer[0] = 0;
    1532:	ldr	r7, [pc, #608]	; (1794 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1534:	add	r0, r1
    1536:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1538:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    153a:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    153c:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    153e:	bpl.w	195e <isr+0x4ce>
    1542:	lsls	r2, r1, #15
    1544:	bpl.n	154a <isr+0xba>
			reply_buffer[0] = 1;
    1546:	movs	r3, #1
    1548:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    154a:	movs	r1, #2
    154c:	ldr	r0, [pc, #580]	; (1794 <isr+0x304>)
    154e:	bl	13ec <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1552:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1556:	cmp	r3, #0
    1558:	bne.n	14bc <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    155a:	ldr	r2, [pc, #556]	; (1788 <isr+0x2f8>)
    155c:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1560:	cmp	r3, #0
    1562:	bne.n	1606 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1564:	tst.w	r8, #64	; 0x40
    1568:	beq.n	159c <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    156a:	ldr	r3, [pc, #540]	; (1788 <isr+0x2f8>)
    156c:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1570:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1572:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1576:	ldr.w	r1, [r3, #444]	; 0x1bc
    157a:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    157e:	ldr.w	r4, [r2, #432]	; 0x1b0
    1582:	ldr	r3, [pc, #516]	; (1788 <isr+0x2f8>)
    1584:	cmp	r4, #0
    1586:	bne.n	157e <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1588:	mov.w	r2, #4294967295
    158c:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1590:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1594:	bl	f4c <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    1598:	ldr	r3, [pc, #508]	; (1798 <isr+0x308>)
    159a:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    159c:	tst.w	r8, #16777216	; 0x1000000
    15a0:	beq.n	15aa <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    15a2:	ldr	r3, [pc, #504]	; (179c <isr+0x30c>)
    15a4:	ldr	r3, [r3, #0]
    15a6:	cbz	r3, 15aa <isr+0x11a>
    15a8:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    15aa:	tst.w	r8, #33554432	; 0x2000000
    15ae:	beq.n	15b8 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    15b0:	ldr	r3, [pc, #492]	; (17a0 <isr+0x310>)
    15b2:	ldr	r3, [r3, #0]
    15b4:	cbz	r3, 15b8 <isr+0x128>
    15b6:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    15b8:	tst.w	r8, #4
    15bc:	beq.n	15d0 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    15be:	ldr	r3, [pc, #456]	; (1788 <isr+0x2f8>)
    15c0:	ldr.w	r3, [r3, #388]	; 0x184
    15c4:	ands.w	r3, r3, #512	; 0x200
    15c8:	beq.n	1646 <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    15ca:	ldr	r3, [pc, #472]	; (17a4 <isr+0x314>)
    15cc:	movs	r2, #1
    15ce:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    15d0:	ldr	r3, [pc, #436]	; (1788 <isr+0x2f8>)
    15d2:	ldr.w	r2, [r3, #328]	; 0x148
    15d6:	lsls	r2, r2, #24
    15d8:	bpl.n	1600 <isr+0x170>
    15da:	tst.w	r8, #128	; 0x80
    15de:	beq.n	1600 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    15e0:	ldr	r1, [pc, #452]	; (17a8 <isr+0x318>)
    15e2:	ldrb	r2, [r1, #0]
    15e4:	cbz	r2, 1600 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    15e6:	subs	r2, #1
    15e8:	uxtb	r2, r2
    15ea:	strb	r2, [r1, #0]
    15ec:	cbnz	r2, 1600 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    15ee:	ldr	r1, [pc, #444]	; (17ac <isr+0x31c>)
    15f0:	ldrb	r2, [r1, #0]
    15f2:	and.w	r2, r2, #251	; 0xfb
    15f6:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    15f8:	cmp	r2, #0
    15fa:	beq.w	1a62 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    15fe:	bkpt	0x00fb
		#endif
		#ifdef MULTITOUCH_INTERFACE
		usb_touchscreen_update_callback();
		#endif
	}
}
    1600:	add	sp, #12
    1602:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1606:	ldr	r1, [pc, #424]	; (17b0 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    1608:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    160c:	ldr	r0, [r1, #0]
    160e:	tst	r3, r0
    1610:	bne.w	19ea <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1614:	ldr	r2, [pc, #384]	; (1798 <isr+0x308>)
    1616:	ldr	r4, [r2, #0]
			if (completestatus) {
    1618:	ands	r4, r3
    161a:	beq.n	1564 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    161c:	lsls	r3, r4, #29
    161e:	bmi.w	1a80 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    1622:	lsls	r7, r4, #13
    1624:	bmi.w	1a78 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1628:	lsls	r6, r4, #28
    162a:	bmi.w	1a90 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    162e:	lsls	r5, r4, #12
    1630:	bmi.w	1a88 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1634:	lsls	r0, r4, #27
    1636:	bmi.w	1a70 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    163a:	lsls	r1, r4, #11
    163c:	bpl.n	1564 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    163e:	ldr	r0, [pc, #372]	; (17b4 <isr+0x324>)
    1640:	bl	13b4 <run_callbacks>
    1644:	b.n	1564 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1646:	ldr	r2, [pc, #348]	; (17a4 <isr+0x314>)
    1648:	strb	r3, [r2, #0]
    164a:	b.n	15d0 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    164c:	movw	r7, #8225	; 0x2021
    1650:	cmp	r1, r7
    1652:	beq.n	16c6 <isr+0x236>
    1654:	bhi.n	1736 <isr+0x2a6>
    1656:	cmp.w	r1, #2176	; 0x880
    165a:	beq.w	18c4 <isr+0x434>
    165e:	cmp.w	r1, #2304	; 0x900
    1662:	bne.n	16ce <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1664:	ubfx	r0, r0, #16, #8
    1668:	ldr	r2, [pc, #332]	; (17b8 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    166a:	ldr	r1, [pc, #336]	; (17bc <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    166c:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    166e:	ldr	r7, [pc, #336]	; (17c0 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1670:	ldr	r2, [pc, #336]	; (17c4 <isr+0x334>)
    1672:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1674:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1678:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    167c:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    1680:	bl	f50 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1684:	ldr	r2, [pc, #320]	; (17c8 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1686:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1688:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    168a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    168c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    168e:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1690:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1692:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1696:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1698:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    169c:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    169e:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    16a2:	ldr.w	r2, [r5, #432]	; 0x1b0
    16a6:	orr.w	r2, r2, #65536	; 0x10000
    16aa:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    16ae:	ldr	r2, [pc, #256]	; (17b0 <isr+0x320>)
    16b0:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    16b2:	ldr.w	r3, [r4, #432]	; 0x1b0
    16b6:	cmp	r3, #0
    16b8:	bne.n	16b2 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    16ba:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    16be:	cmp	r3, #0
    16c0:	bne.w	14bc <isr+0x2c>
    16c4:	b.n	155a <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    16c6:	lsrs	r1, r2, #16
    16c8:	cmp	r1, #7
    16ca:	beq.w	1966 <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    16ce:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    16d2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    16d6:	cmp	r3, #0
    16d8:	bne.w	14bc <isr+0x2c>
    16dc:	b.n	155a <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    16de:	movw	r7, #770	; 0x302
    16e2:	cmp	r1, r7
    16e4:	beq.w	185e <isr+0x3ce>
    16e8:	cmp.w	r1, #1280	; 0x500
    16ec:	bne.n	16ce <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16ee:	ldr	r2, [pc, #216]	; (17c8 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16f0:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16f2:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    16f4:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16f6:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16f8:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    16fa:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    16fe:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1700:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1704:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1706:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    170a:	ldr.w	r3, [r5, #432]	; 0x1b0
    170e:	orr.w	r3, r3, #65536	; 0x10000
    1712:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1716:	ldr.w	r3, [r4, #432]	; 0x1b0
    171a:	cmp	r3, #0
    171c:	bne.n	1716 <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    171e:	lsrs	r3, r0, #16
    1720:	lsls	r3, r3, #25
    1722:	orr.w	r3, r3, #16777216	; 0x1000000
    1726:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    172a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    172e:	cmp	r3, #0
    1730:	bne.w	14bc <isr+0x2c>
    1734:	b.n	155a <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1736:	movw	r3, #8737	; 0x2221
    173a:	cmp	r1, r3
    173c:	beq.w	184c <isr+0x3bc>
    1740:	movw	r3, #8993	; 0x2321
    1744:	cmp	r1, r3
    1746:	bne.n	16ce <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1748:	ldr	r3, [pc, #124]	; (17c8 <isr+0x338>)
    174a:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    174c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    174e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1750:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1752:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1754:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1758:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    175a:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    175e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1760:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1762:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1766:	ldr.w	r3, [r4, #432]	; 0x1b0
    176a:	orr.w	r3, r3, #65536	; 0x10000
    176e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1772:	ldr.w	r3, [r4, #432]	; 0x1b0
    1776:	cmp	r3, #0
    1778:	bne.n	1772 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    177a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    177e:	cmp	r3, #0
    1780:	bne.w	14bc <isr+0x2c>
    1784:	b.n	155a <isr+0xca>
    1786:	nop
    1788:	.word	0x402e0000
    178c:	.word	0x20003000
    1790:	.word	0x402e01c0
    1794:	.word	0x20001228
    1798:	.word	0x20001204
    179c:	.word	0x20001200
    17a0:	.word	0x2000120c
    17a4:	.word	0x20001210
    17a8:	.word	0x20001218
    17ac:	.word	0x20001208
    17b0:	.word	0x20001214
    17b4:	.word	0x20003240
    17b8:	.word	0x20001238
    17bc:	.word	0x000200c8
    17c0:	.word	0x00cc0002
    17c4:	.word	0x00c80002
    17c8:	.word	0x20002020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    17cc:	ldr	r2, [pc, #744]	; (1ab8 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    17ce:	movs	r1, #2
    17d0:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    17d2:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    17d4:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    17d6:	bl	13ec <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    17da:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    17de:	cmp	r3, #0
    17e0:	bne.w	14bc <isr+0x2c>
    17e4:	b.n	155a <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    17e6:	uxth	r2, r2
    17e8:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    17ec:	cmp	r3, #7
    17ee:	bhi.w	16ce <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    17f2:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    17f6:	mov.w	r3, r3, lsl #2
    17fa:	ldr	r2, [pc, #704]	; (1abc <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17fc:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1800:	add	r2, r3
    1802:	ldr	r3, [r2, #0]
    1804:	ite	ne
    1806:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    180a:	biceq.w	r3, r3, #1
    180e:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1810:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1812:	ldr	r3, [pc, #684]	; (1ac0 <isr+0x630>)
    1814:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1816:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1818:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    181a:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    181e:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1820:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1824:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1826:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1828:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    182c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1830:	orr.w	r3, r3, #65536	; 0x10000
    1834:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1838:	ldr.w	r3, [r4, #432]	; 0x1b0
    183c:	cmp	r3, #0
    183e:	bne.n	1838 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1840:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1844:	cmp	r3, #0
    1846:	bne.w	14bc <isr+0x2c>
    184a:	b.n	155a <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    184c:	ldr	r3, [pc, #628]	; (1ac4 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    184e:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1852:	ldr	r2, [pc, #628]	; (1ac8 <isr+0x638>)
    1854:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    1856:	ldr	r3, [pc, #628]	; (1acc <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1858:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    185a:	strb	r0, [r3, #0]
    185c:	b.n	1748 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    185e:	uxth	r2, r2
    1860:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1864:	cmp	r3, #7
    1866:	bhi.w	16ce <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    186a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    186e:	mov.w	r3, r3, lsl #2
    1872:	ldr	r2, [pc, #584]	; (1abc <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1874:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1878:	add	r2, r3
    187a:	ldr	r3, [r2, #0]
    187c:	ite	ne
    187e:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1882:	orreq.w	r3, r3, #1
    1886:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1888:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    188a:	ldr	r3, [pc, #564]	; (1ac0 <isr+0x630>)
    188c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    188e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1890:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1892:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1896:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1898:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    189c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    189e:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    18a0:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    18a4:	ldr.w	r3, [r4, #432]	; 0x1b0
    18a8:	orr.w	r3, r3, #65536	; 0x10000
    18ac:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    18b0:	ldr.w	r3, [r4, #432]	; 0x1b0
    18b4:	cmp	r3, #0
    18b6:	bne.n	18b0 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    18b8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    18bc:	cmp	r3, #0
    18be:	bne.w	14bc <isr+0x2c>
    18c2:	b.n	155a <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    18c4:	ldr	r2, [pc, #520]	; (1ad0 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    18c6:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    18c8:	ldr	r3, [pc, #492]	; (1ab8 <isr+0x628>)
    18ca:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    18cc:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    18ce:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    18d0:	bl	13ec <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    18d4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    18d8:	cmp	r3, #0
    18da:	bne.w	14bc <isr+0x2c>
    18de:	b.n	155a <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    18e0:	ldr	r3, [pc, #496]	; (1ad4 <isr+0x644>)
    18e2:	ldr	r1, [r3, #4]
    18e4:	cmp	r1, #0
    18e6:	beq.w	16ce <isr+0x23e>
    18ea:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    18ec:	uxth.w	lr, r2
    18f0:	b.n	18fc <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    18f2:	adds	r3, #12
    18f4:	ldr	r1, [r3, #4]
    18f6:	cmp	r1, #0
    18f8:	beq.w	16ce <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    18fc:	ldrh	r7, [r3, #0]
    18fe:	cmp	r7, r0
    1900:	bne.n	18f2 <isr+0x462>
    1902:	ldrh	r7, [r3, #2]
    1904:	cmp	r7, lr
    1906:	bne.n	18f2 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1908:	lsrs	r7, r0, #8
    190a:	cmp	r7, #3
    190c:	beq.w	1b1c <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1910:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1912:	lsrs	r2, r2, #16
    1914:	cmp	r3, r2
    1916:	it	cs
    1918:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    191a:	cmp.w	r0, #512	; 0x200
    191e:	beq.w	1a98 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1922:	cmp.w	r0, #1792	; 0x700
    1926:	beq.w	1a3c <isr+0x5ac>
    192a:	ldr	r7, [pc, #428]	; (1ad8 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    192c:	mov	r2, r3
    192e:	str	r3, [sp, #4]
    1930:	mov	r0, r7
    1932:	bl	1fac <memcpy>
    1936:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1938:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    193c:	add	r7, r3
	asm("dsb");
    193e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1942:	ldr	r1, [pc, #408]	; (1adc <isr+0x64c>)
    1944:	str	r2, [r1, #0]
		location += 32;
    1946:	adds	r2, #32
	} while (location < end_addr);
    1948:	cmp	r7, r2
    194a:	bhi.n	1942 <isr+0x4b2>
	asm("dsb");
    194c:	dsb	sy
	asm("isb");
    1950:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1954:	ldr	r0, [pc, #384]	; (1ad8 <isr+0x648>)
    1956:	mov	r1, r3
    1958:	bl	13ec <endpoint0_transmit.constprop.1>
    195c:	b.n	1552 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    195e:	lsls	r3, r1, #31
    1960:	bpl.w	154a <isr+0xba>
    1964:	b.n	1546 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1966:	ldr	r7, [pc, #376]	; (1ae0 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1968:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    196c:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    196e:	ldr	r1, [pc, #372]	; (1ae4 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1970:	ldr	r3, [pc, #372]	; (1ae8 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1972:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1974:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1978:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    197a:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    197e:	ldr	r1, [pc, #364]	; (1aec <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1980:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1982:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1986:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    198a:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    198e:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1990:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1994:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1998:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    199c:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    199e:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    19a0:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    19a4:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    19a6:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    19a8:	ldr.w	r3, [r4, #432]	; 0x1b0
    19ac:	cmp	r3, #0
    19ae:	bne.n	19a8 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    19b0:	ldr	r2, [pc, #268]	; (1ac0 <isr+0x630>)
    19b2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    19b4:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    19b8:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    19ba:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    19bc:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    19c0:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    19c2:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    19c6:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    19c8:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    19cc:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    19ce:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    19d2:	ldr.w	r3, [r5, #432]	; 0x1b0
    19d6:	orrs	r3, r0
    19d8:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    19dc:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    19e0:	ldr.w	r3, [r4, #432]	; 0x1b0
    19e4:	cmp	r3, #0
    19e6:	bne.n	19e0 <isr+0x550>
    19e8:	b.n	1552 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    19ea:	ldr	r4, [pc, #244]	; (1ae0 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    19ec:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    19f0:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    19f2:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    19f4:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    19f6:	cmp	r4, r0
    19f8:	bne.w	1614 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    19fc:	ldr	r1, [pc, #236]	; (1aec <isr+0x65c>)
    19fe:	ldr	r4, [pc, #240]	; (1af0 <isr+0x660>)
    1a00:	ldmia	r1, {r0, r1}
    1a02:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1a04:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1a06:	str	r0, [r4, #0]
    1a08:	strh	r1, [r4, #4]
    1a0a:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1a0c:	bne.w	1614 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1a10:	cpsid	i
	sof_usage |= (1 << interface);
    1a12:	ldr	r0, [pc, #224]	; (1af4 <isr+0x664>)
    1a14:	ldrb	r1, [r0, #0]
    1a16:	orr.w	r1, r1, #4
    1a1a:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1a1c:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1a20:	lsls	r0, r1, #24
    1a22:	bmi.n	1a32 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1a24:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1a28:	movs	r0, #128	; 0x80
    1a2a:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1a2e:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1a32:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1a34:	ldr	r2, [pc, #192]	; (1af8 <isr+0x668>)
    1a36:	movs	r1, #80	; 0x50
    1a38:	strb	r1, [r2, #0]
    1a3a:	b.n	1614 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1a3c:	ldr	r0, [pc, #188]	; (1afc <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1a3e:	mov	r2, r3
    1a40:	ldr	r7, [pc, #148]	; (1ad8 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1a42:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1a46:	ldr	r1, [pc, #184]	; (1b00 <isr+0x670>)
    1a48:	ldr	r0, [pc, #184]	; (1b04 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1a4a:	str	r3, [sp, #4]
    1a4c:	cmp.w	lr, #0
    1a50:	it	eq
    1a52:	moveq	r1, r0
    1a54:	mov	r0, r7
    1a56:	bl	1fac <memcpy>
					usb_descriptor_buffer[1] = 7;
    1a5a:	movs	r2, #7
    1a5c:	ldr	r3, [sp, #4]
    1a5e:	strb	r2, [r7, #1]
    1a60:	b.n	1938 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1a62:	ldr.w	r2, [r3, #328]	; 0x148
    1a66:	bic.w	r2, r2, #128	; 0x80
    1a6a:	str.w	r2, [r3, #328]	; 0x148
    1a6e:	b.n	15fe <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1a70:	ldr	r0, [pc, #148]	; (1b08 <isr+0x678>)
    1a72:	bl	13b4 <run_callbacks>
    1a76:	b.n	163a <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1a78:	ldr	r0, [pc, #144]	; (1b0c <isr+0x67c>)
    1a7a:	bl	13b4 <run_callbacks>
    1a7e:	b.n	1628 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1a80:	ldr	r0, [pc, #140]	; (1b10 <isr+0x680>)
    1a82:	bl	13b4 <run_callbacks>
    1a86:	b.n	1622 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1a88:	ldr	r0, [pc, #136]	; (1b14 <isr+0x684>)
    1a8a:	bl	13b4 <run_callbacks>
    1a8e:	b.n	1634 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1a90:	ldr	r0, [pc, #132]	; (1b18 <isr+0x688>)
    1a92:	bl	13b4 <run_callbacks>
    1a96:	b.n	162e <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1a98:	ldr	r0, [pc, #96]	; (1afc <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1a9a:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1a9c:	ldr	r1, [pc, #100]	; (1b04 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1a9e:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1aa0:	ldr	r0, [pc, #92]	; (1b00 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1aa2:	str	r3, [sp, #4]
    1aa4:	cmp	r7, #0
    1aa6:	it	eq
    1aa8:	moveq	r1, r0
    1aaa:	ldr	r0, [pc, #44]	; (1ad8 <isr+0x648>)
    1aac:	bl	1fac <memcpy>
    1ab0:	ldr	r7, [pc, #36]	; (1ad8 <isr+0x648>)
    1ab2:	ldr	r3, [sp, #4]
    1ab4:	b.n	1938 <isr+0x4a8>
    1ab6:	nop
    1ab8:	.word	0x20001228
    1abc:	.word	0x402e01c0
    1ac0:	.word	0x20002020
    1ac4:	.word	0x20001004
    1ac8:	.word	0x200016c8
    1acc:	.word	0x20001168
    1ad0:	.word	0x20001238
    1ad4:	.word	0x200002b8
    1ad8:	.word	0x20203000
    1adc:	.word	0xe000ef70
    1ae0:	.word	0x20001220
    1ae4:	.word	0x00070080
    1ae8:	.word	0x20002000
    1aec:	.word	0x20001230
    1af0:	.word	0x200016c0
    1af4:	.word	0x20001208
    1af8:	.word	0x20001218
    1afc:	.word	0x20001210
    1b00:	.word	0x60001610
    1b04:	.word	0x60001654
    1b08:	.word	0x20003200
    1b0c:	.word	0x20003140
    1b10:	.word	0x20003100
    1b14:	.word	0x200031c0
    1b18:	.word	0x20003180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1b1c:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1b1e:	ldrb	r3, [r1, #0]
    1b20:	cmp	r3, r2
    1b22:	it	cs
    1b24:	movcs	r3, r2
    1b26:	b.n	1922 <isr+0x492>

00001b28 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1b28:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1b2a:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1b2e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1b32:	ite	ne
    1b34:	movne	r7, #0
    1b36:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1b3a:	cmp	r2, #2
    1b3c:	bls.n	1b42 <usb_config_rx+0x1a>
    1b3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1b42:	mov.w	sl, r0, lsl #7
    1b46:	ldr.w	r9, [pc, #64]	; 1b88 <usb_config_rx+0x60>
    1b4a:	mov	r5, r1
    1b4c:	mov	r4, r0
    1b4e:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1b52:	movs	r1, #0
    1b54:	movs	r2, #64	; 0x40
    1b56:	mov	r8, r3
    1b58:	mov	r0, r6
    1b5a:	bl	2818 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1b5e:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1b60:	orr.w	r1, r7, r5, lsl #16
    1b64:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1b68:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1b6c:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1b6e:	cmp.w	r8, #0
    1b72:	beq.n	1b3e <usb_config_rx+0x16>
    1b74:	ldr	r3, [pc, #12]	; (1b84 <usb_config_rx+0x5c>)
    1b76:	lsls	r0, r4
    1b78:	ldr	r4, [r3, #0]
    1b7a:	orrs	r0, r4
    1b7c:	str	r0, [r3, #0]
    1b7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b82:	nop
    1b84:	.word	0x20001204
    1b88:	.word	0x20003000

00001b8c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1b8c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1b8e:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1b92:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1b96:	ite	ne
    1b98:	movne	r7, #0
    1b9a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1b9e:	cmp	r2, #2
    1ba0:	bls.n	1ba6 <usb_config_tx+0x1a>
    1ba2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1ba6:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1ba8:	lsls	r5, r0, #7
    1baa:	ldr.w	r9, [pc, #68]	; 1bf0 <usb_config_tx+0x64>
    1bae:	mov	r8, r1
    1bb0:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1bb2:	movs	r1, #0
    1bb4:	mov	r4, r0
    1bb6:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1bb8:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1bbc:	mov	r0, sl
    1bbe:	bl	2818 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1bc2:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1bc4:	orr.w	r1, r7, r8, lsl #16
    1bc8:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1bcc:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1bd0:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1bd4:	cmp	r6, #0
    1bd6:	beq.n	1ba2 <usb_config_tx+0x16>
    1bd8:	add.w	r0, r4, #16
    1bdc:	ldr	r3, [pc, #12]	; (1bec <usb_config_tx+0x60>)
    1bde:	lsls	r2, r0
    1be0:	ldr	r0, [r3, #0]
    1be2:	orrs	r2, r0
    1be4:	str	r2, [r3, #0]
    1be6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bea:	nop
    1bec:	.word	0x20001204
    1bf0:	.word	0x20003000

00001bf4 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1bf4:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1bf6:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1bf8:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1bfa:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1bfe:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1c00:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1c02:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1c04:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1c08:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1c0c:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1c10:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1c14:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1c16:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1c18:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1c1a:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1c1c:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1c1e:	pop	{r4, r5, r6, r7}
    1c20:	bx	lr
    1c22:	nop

00001c24 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1c24:	subs	r3, r0, #2
    1c26:	cmp	r3, #2
    1c28:	bls.n	1c2c <usb_transmit+0x8>
    1c2a:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1c2c:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1c2e:	ldr	r3, [pc, #24]	; (1c48 <usb_transmit+0x24>)
    1c30:	add.w	r4, r0, #16
    1c34:	movs	r5, #1
    1c36:	mov	r2, r1
    1c38:	add.w	r0, r3, r0, lsl #7
    1c3c:	lsl.w	r1, r5, r4
}
    1c40:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1c42:	b.w	1358 <schedule_transfer>
    1c46:	nop
    1c48:	.word	0x20003040

00001c4c <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1c4c:	subs	r3, r0, #2
    1c4e:	cmp	r3, #2
    1c50:	bls.n	1c54 <usb_receive+0x8>
    1c52:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1c54:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1c56:	ldr	r3, [pc, #20]	; (1c6c <usb_receive+0x20>)
    1c58:	movs	r4, #1
    1c5a:	mov	r2, r1
    1c5c:	lsl.w	r1, r4, r0
    1c60:	add.w	r0, r3, r0, lsl #7
}
    1c64:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1c68:	b.w	1358 <schedule_transfer>
    1c6c:	.word	0x20003000

00001c70 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1c70:	ldr	r0, [r0, #4]
#endif
}
    1c72:	bx	lr

00001c74 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c74:	ldr	r0, [pc, #656]	; (1f08 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1c76:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c7a:	ldr	r3, [pc, #656]	; (1f0c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c7c:	ldr	r2, [r0, #120]	; 0x78
    1c7e:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1c82:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c84:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1c86:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c88:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c8c:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c90:	ldr	r4, [pc, #636]	; (1f10 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c92:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c96:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1c98:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c9c:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1c9e:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1ca0:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1ca4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1ca8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cac:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1cb0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1cb4:	ldrh.w	r0, [r3, #392]	; 0x188
    1cb8:	uxth	r0, r0
    1cba:	orr.w	r0, r0, #240	; 0xf0
    1cbe:	strh.w	r0, [r3, #392]	; 0x188
    1cc2:	add.w	r0, r1, r1, lsl #1
    1cc6:	ldr	r3, [pc, #580]	; (1f0c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1cc8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1cca:	movs	r5, #0
    1ccc:	lsls	r0, r0, #5
    1cce:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cd0:	cmp	r1, #4
    1cd2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1cd4:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1cd8:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1cda:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1cdc:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1cde:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1ce0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1ce2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1ce4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1ce6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1ce8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1cea:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cec:	bne.n	1cc2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cee:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cf2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1cf6:	ldr	r3, [pc, #540]	; (1f14 <pwm_init+0x2a0>)
    1cf8:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cfc:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cfe:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d00:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d04:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d06:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d0a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d0e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1d12:	ldrh.w	r0, [r4, #392]	; 0x188
    1d16:	uxth	r0, r0
    1d18:	orr.w	r0, r0, #3840	; 0xf00
    1d1c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d20:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1d24:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d28:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1d2c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1d30:	ldrh.w	r0, [r3, #392]	; 0x188
    1d34:	uxth	r0, r0
    1d36:	orr.w	r0, r0, #240	; 0xf0
    1d3a:	strh.w	r0, [r3, #392]	; 0x188
    1d3e:	add.w	r0, r1, r1, lsl #1
    1d42:	ldr	r3, [pc, #464]	; (1f14 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1d44:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d46:	movs	r5, #0
    1d48:	lsls	r0, r0, #5
    1d4a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d4c:	cmp	r1, #4
    1d4e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d50:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d52:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1d56:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1d58:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1d5a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1d5c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1d5e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1d60:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1d62:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1d64:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1d66:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d68:	bne.n	1d3e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d6a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d6e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d72:	ldr	r3, [pc, #420]	; (1f18 <pwm_init+0x2a4>)
    1d74:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d78:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d7a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d7c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d80:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d82:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d86:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d8a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1d8e:	ldrh.w	r0, [r4, #392]	; 0x188
    1d92:	uxth	r0, r0
    1d94:	orr.w	r0, r0, #3840	; 0xf00
    1d98:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d9c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1da0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1da4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1da8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1dac:	ldrh.w	r0, [r3, #392]	; 0x188
    1db0:	uxth	r0, r0
    1db2:	orr.w	r0, r0, #240	; 0xf0
    1db6:	strh.w	r0, [r3, #392]	; 0x188
    1dba:	add.w	r0, r1, r1, lsl #1
    1dbe:	ldr	r3, [pc, #344]	; (1f18 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    1dc0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1dc2:	movs	r5, #0
    1dc4:	lsls	r0, r0, #5
    1dc6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1dc8:	cmp	r1, #4
    1dca:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1dcc:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1dce:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1dd2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1dd4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1dd6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1dd8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1dda:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1ddc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1dde:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1de0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1de2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1de4:	bne.n	1dba <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1de6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1dea:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1dee:	ldr	r3, [pc, #300]	; (1f1c <pwm_init+0x2a8>)
    1df0:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1df4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1df6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1df8:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1dfc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dfe:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1e02:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e06:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1e0a:	ldrh.w	r0, [r4, #392]	; 0x188
    1e0e:	uxth	r0, r0
    1e10:	orr.w	r0, r0, #3840	; 0xf00
    1e14:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1e18:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1e1c:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1e20:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1e24:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1e28:	ldrh.w	r0, [r3, #392]	; 0x188
    1e2c:	uxth	r0, r0
    1e2e:	orr.w	r0, r0, #240	; 0xf0
    1e32:	strh.w	r0, [r3, #392]	; 0x188
    1e36:	add.w	r0, r1, r1, lsl #1
    1e3a:	ldr	r3, [pc, #224]	; (1f1c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    1e3c:	adds	r1, #1
    1e3e:	lsls	r0, r0, #5
    1e40:	mov	r4, r3
    1e42:	cmp	r1, #4
    1e44:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1e46:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1e48:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1e4c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1e4e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1e50:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1e52:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1e54:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    1e56:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1e58:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1e5a:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1e5c:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1e5e:	bne.n	1e36 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e60:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e64:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e66:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e68:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e6c:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e6e:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e72:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e74:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e78:	orrs	r3, r7
    1e7a:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1e7e:	ldrh.w	r3, [r4, #392]	; 0x188
    1e82:	uxth	r3, r3
    1e84:	orr.w	r3, r3, #3840	; 0xf00
    1e88:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e8c:	lsls	r0, r2, #5
    1e8e:	ldr	r3, [pc, #144]	; (1f20 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e90:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1e92:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e94:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1e96:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1e98:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e9a:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e9c:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e9e:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1ea2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1ea4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1ea6:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ea8:	bne.n	1e8c <pwm_init+0x218>
    1eaa:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1eac:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1eae:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1eb2:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1eb6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1eb8:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1ebc:	lsls	r0, r2, #5
    1ebe:	ldr	r3, [pc, #100]	; (1f24 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ec0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1ec2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ec4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1ec6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1ec8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1eca:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1ecc:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1ece:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1ed0:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1ed2:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1ed4:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ed6:	bne.n	1ebc <pwm_init+0x248>
    1ed8:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1eda:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1edc:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1ee0:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1ee4:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1ee6:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1eea:	lsls	r0, r2, #5
    1eec:	ldr	r3, [pc, #56]	; (1f28 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1eee:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1ef0:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ef2:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1ef4:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1ef6:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1ef8:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1efa:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1efc:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1efe:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1f00:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1f02:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1f04:	bne.n	1eea <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1f06:	pop	{r4, r5, r6, r7, pc}
    1f08:	.word	0x400fc000
    1f0c:	.word	0x403dc000
    1f10:	.word	0xfc030000
    1f14:	.word	0x403e0000
    1f18:	.word	0x403e4000
    1f1c:	.word	0x403e8000
    1f20:	.word	0x401dc000
    1f24:	.word	0x401e0000
    1f28:	.word	0x401e4000

00001f2c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1f2c:	ldr	r2, [pc, #72]	; (1f78 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1f2e:	ldr	r3, [pc, #76]	; (1f7c <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1f30:	ldr.w	r0, [r2, #544]	; 0x220
    1f34:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1f38:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1f3a:	push	{r4, lr}
    1f3c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1f3e:	bhi.n	1f46 <usb_init_serialnumber+0x1a>
    1f40:	add.w	r0, r0, r0, lsl #2
    1f44:	lsls	r0, r0, #1
    1f46:	ldr	r4, [pc, #56]	; (1f80 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1f48:	add	r1, sp, #4
    1f4a:	movs	r2, #10
    1f4c:	bl	20e0 <ultoa>
    1f50:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1f52:	movs	r3, #0
    1f54:	mov	r0, r4
		char c = buf[i];
    1f56:	ldrb.w	r2, [r1], #1
    1f5a:	adds	r3, #1
		if (!c) break;
    1f5c:	cbz	r2, 1f6e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1f5e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1f60:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1f64:	bne.n	1f56 <usb_init_serialnumber+0x2a>
    1f66:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1f68:	strb	r3, [r4, #0]
}
    1f6a:	add	sp, #16
    1f6c:	pop	{r4, pc}
    1f6e:	lsls	r3, r3, #1
    1f70:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1f72:	strb	r3, [r4, #0]
}
    1f74:	add	sp, #16
    1f76:	pop	{r4, pc}
    1f78:	.word	0x401f4400
    1f7c:	.word	0x0098967f
    1f80:	.word	0x200005e8

00001f84 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    1f84:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    1f86:	ldr	r3, [pc, #28]	; (1fa4 <HardwareSerial::processSerialEvents()+0x20>)
    1f88:	ldrb	r4, [r3, #0]
    1f8a:	cbz	r4, 1fa0 <HardwareSerial::processSerialEvents()+0x1c>
    1f8c:	ldr	r5, [pc, #24]	; (1fa8 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    1f8e:	ldr.w	r3, [r5, #4]!
    1f92:	cmp	r3, #0
    1f94:	beq.n	1f8e <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    1f96:	blx	r3
			if (--handlers_still_to_process == 0) return;
    1f98:	subs	r3, r4, #1
    1f9a:	ands.w	r4, r3, #255	; 0xff
    1f9e:	bne.n	1f8e <HardwareSerial::processSerialEvents()+0xa>
    1fa0:	pop	{r3, r4, r5, pc}
    1fa2:	nop
    1fa4:	.word	0x20001268
    1fa8:	.word	0x20001248

00001fac <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1fac:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1fae:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1fb2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1fb6:	bne.n	2094 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1fb8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1fba:	bcc.n	2040 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1fbc:	ldr.w	r3, [r1], #4
    1fc0:	str.w	r3, [r0], #4
    1fc4:	ldr.w	r3, [r1], #4
    1fc8:	str.w	r3, [r0], #4
    1fcc:	ldr.w	r3, [r1], #4
    1fd0:	str.w	r3, [r0], #4
    1fd4:	ldr.w	r3, [r1], #4
    1fd8:	str.w	r3, [r0], #4
    1fdc:	ldr.w	r3, [r1], #4
    1fe0:	str.w	r3, [r0], #4
    1fe4:	ldr.w	r3, [r1], #4
    1fe8:	str.w	r3, [r0], #4
    1fec:	ldr.w	r3, [r1], #4
    1ff0:	str.w	r3, [r0], #4
    1ff4:	ldr.w	r3, [r1], #4
    1ff8:	str.w	r3, [r0], #4
    1ffc:	ldr.w	r3, [r1], #4
    2000:	str.w	r3, [r0], #4
    2004:	ldr.w	r3, [r1], #4
    2008:	str.w	r3, [r0], #4
    200c:	ldr.w	r3, [r1], #4
    2010:	str.w	r3, [r0], #4
    2014:	ldr.w	r3, [r1], #4
    2018:	str.w	r3, [r0], #4
    201c:	ldr.w	r3, [r1], #4
    2020:	str.w	r3, [r0], #4
    2024:	ldr.w	r3, [r1], #4
    2028:	str.w	r3, [r0], #4
    202c:	ldr.w	r3, [r1], #4
    2030:	str.w	r3, [r0], #4
    2034:	ldr.w	r3, [r1], #4
    2038:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    203c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    203e:	bcs.n	1fbc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2040:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2042:	bcc.n	2068 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2044:	ldr.w	r3, [r1], #4
    2048:	str.w	r3, [r0], #4
    204c:	ldr.w	r3, [r1], #4
    2050:	str.w	r3, [r0], #4
    2054:	ldr.w	r3, [r1], #4
    2058:	str.w	r3, [r0], #4
    205c:	ldr.w	r3, [r1], #4
    2060:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2064:	subs	r2, #16
	bhs	.Lmid_block_loop
    2066:	bcs.n	2044 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2068:	adds	r2, #12
	blo	.Lcopy_less_than_4
    206a:	bcc.n	2078 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    206c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2070:	str.w	r3, [r0], #4
	subs	r2, #4
    2074:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2076:	bcs.n	206c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2078:	adds	r2, #4
	beq	.Ldone
    207a:	beq.n	208e <memcpy+0xe2>

	lsls	r2, r2, #31
    207c:	lsls	r2, r2, #31
	itt ne
    207e:	itt	ne
	ldrbne  r3, [r1], #1
    2080:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2084:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2088:	bcc.n	208e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    208a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    208c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    208e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2090:	bx	lr
    2092:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2094:	cmp	r2, #8
	blo	.Lbyte_copy
    2096:	bcc.n	20c0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2098:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    209a:	beq.n	1fb8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    209c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    20a0:	beq.n	1fb8 <memcpy+0xc>

	rsb	r3, #4
    20a2:	rsb	r3, r3, #4
	subs	r2, r3
    20a6:	subs	r2, r2, r3

	lsls    r3, r3, #31
    20a8:	lsls	r3, r3, #31
	itt ne
    20aa:	itt	ne
	ldrbne  r3, [r1], #1
    20ac:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    20b0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    20b4:	bcc.n	1fb8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    20b6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    20ba:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    20be:	b.n	1fb8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    20c0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    20c2:	bcc.n	2078 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    20c4:	subs	r2, #1
	ldrb    r3, [r1], #1
    20c6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    20ca:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    20ce:	bcs.n	20c4 <memcpy+0x118>

	ldrb	r3, [r1]
    20d0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    20d2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    20d4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    20d6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    20d8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    20da:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    20dc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    20de:	bx	lr

000020e0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    20e0:	push	{r4, r5, r6, r7}
    20e2:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    20e4:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    20e6:	mov	r7, r6
    20e8:	b.n	20ec <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    20ea:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    20ec:	udiv	r3, r0, r2
    20f0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    20f4:	add.w	r4, r0, #55	; 0x37
    20f8:	cmp	r0, #9
    20fa:	add.w	r0, r0, #48	; 0x30
    20fe:	uxtb	r4, r4
    2100:	it	ls
    2102:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    2104:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2106:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    210a:	cmp	r3, #0
    210c:	bne.n	20ea <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    210e:	adds	r2, r1, r5
    2110:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    2112:	cbz	r5, 2128 <ultoa+0x48>
    2114:	adds	r3, #1
		t = buf[j];
    2116:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    211a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    211c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    211e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2120:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    2122:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2126:	blt.n	2114 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    2128:	mov	r0, r1
    212a:	pop	{r4, r5, r6, r7}
    212c:	bx	lr
    212e:	nop

00002130 <__aeabi_atexit>:
    2130:	mov	r3, r1
    2132:	mov	r1, r0
    2134:	mov	r0, r3
    2136:	b.w	213c <__cxa_atexit>
    213a:	nop

0000213c <__cxa_atexit>:
    213c:	mov	r3, r2
    213e:	mov	r2, r1
    2140:	mov	r1, r0
    2142:	movs	r0, #2
    2144:	b.w	2e48 <__register_exitproc>

00002148 <__errno>:
    2148:	ldr	r3, [pc, #4]	; (2150 <__errno+0x8>)
    214a:	ldr	r0, [r3, #0]
    214c:	bx	lr
    214e:	nop
    2150:	.word	0x20000a28

00002154 <__libc_init_array>:
    2154:	push	{r4, r5, r6, lr}
    2156:	ldr	r6, [pc, #60]	; (2194 <__libc_init_array+0x40>)
    2158:	ldr	r5, [pc, #60]	; (2198 <__libc_init_array+0x44>)
    215a:	subs	r6, r6, r5
    215c:	asrs	r6, r6, #2
    215e:	it	ne
    2160:	movne	r4, #0
    2162:	beq.n	2170 <__libc_init_array+0x1c>
    2164:	adds	r4, #1
    2166:	ldr.w	r3, [r5], #4
    216a:	blx	r3
    216c:	cmp	r6, r4
    216e:	bne.n	2164 <__libc_init_array+0x10>
    2170:	ldr	r6, [pc, #40]	; (219c <__libc_init_array+0x48>)
    2172:	ldr	r5, [pc, #44]	; (21a0 <__libc_init_array+0x4c>)
    2174:	subs	r6, r6, r5
    2176:	bl	6040 <___init_veneer>
    217a:	asrs	r6, r6, #2
    217c:	it	ne
    217e:	movne	r4, #0
    2180:	beq.n	2190 <__libc_init_array+0x3c>
    2182:	adds	r4, #1
    2184:	ldr.w	r3, [r5], #4
    2188:	blx	r3
    218a:	cmp	r6, r4
    218c:	bne.n	2182 <__libc_init_array+0x2e>
    218e:	pop	{r4, r5, r6, pc}
    2190:	pop	{r4, r5, r6, pc}
    2192:	nop
    2194:	.word	0x600016f8
    2198:	.word	0x600016f8
    219c:	.word	0x60001700
    21a0:	.word	0x600016f8

000021a4 <malloc>:
    21a4:	ldr	r3, [pc, #8]	; (21b0 <malloc+0xc>)
    21a6:	mov	r1, r0
    21a8:	ldr	r0, [r3, #0]
    21aa:	b.w	21b4 <_malloc_r>
    21ae:	nop
    21b0:	.word	0x20000a28

000021b4 <_malloc_r>:
    21b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b8:	add.w	r5, r1, #11
    21bc:	cmp	r5, #22
    21be:	sub	sp, #12
    21c0:	mov	r6, r0
    21c2:	bls.w	2304 <_malloc_r+0x150>
    21c6:	bics.w	r5, r5, #7
    21ca:	bmi.w	234c <_malloc_r+0x198>
    21ce:	cmp	r1, r5
    21d0:	bhi.w	234c <_malloc_r+0x198>
    21d4:	bl	28b4 <__malloc_lock>
    21d8:	cmp.w	r5, #504	; 0x1f8
    21dc:	bcc.w	2718 <_malloc_r+0x564>
    21e0:	lsrs	r3, r5, #9
    21e2:	beq.w	235a <_malloc_r+0x1a6>
    21e6:	cmp	r3, #4
    21e8:	bhi.w	24f2 <_malloc_r+0x33e>
    21ec:	lsrs	r0, r5, #6
    21ee:	add.w	lr, r0, #57	; 0x39
    21f2:	mov.w	r3, lr, lsl #1
    21f6:	adds	r0, #56	; 0x38
    21f8:	ldr	r7, [pc, #784]	; (250c <_malloc_r+0x358>)
    21fa:	add.w	r3, r7, r3, lsl #2
    21fe:	sub.w	r1, r3, #8
    2202:	ldr	r4, [r3, #4]
    2204:	cmp	r1, r4
    2206:	bne.n	2218 <_malloc_r+0x64>
    2208:	b.n	2364 <_malloc_r+0x1b0>
    220a:	cmp	r2, #0
    220c:	bge.w	2368 <_malloc_r+0x1b4>
    2210:	ldr	r4, [r4, #12]
    2212:	cmp	r1, r4
    2214:	beq.w	2364 <_malloc_r+0x1b0>
    2218:	ldr	r3, [r4, #4]
    221a:	bic.w	r3, r3, #3
    221e:	subs	r2, r3, r5
    2220:	cmp	r2, #15
    2222:	ble.n	220a <_malloc_r+0x56>
    2224:	ldr	r1, [pc, #740]	; (250c <_malloc_r+0x358>)
    2226:	ldr	r4, [r7, #16]
    2228:	add.w	lr, r1, #8
    222c:	cmp	r4, lr
    222e:	beq.w	2598 <_malloc_r+0x3e4>
    2232:	ldr	r3, [r4, #4]
    2234:	bic.w	r3, r3, #3
    2238:	subs	r2, r3, r5
    223a:	cmp	r2, #15
    223c:	bgt.w	2572 <_malloc_r+0x3be>
    2240:	cmp	r2, #0
    2242:	str.w	lr, [r1, #20]
    2246:	str.w	lr, [r1, #16]
    224a:	bge.w	238a <_malloc_r+0x1d6>
    224e:	cmp.w	r3, #512	; 0x200
    2252:	bcs.w	2524 <_malloc_r+0x370>
    2256:	lsrs	r3, r3, #3
    2258:	add.w	ip, r3, #1
    225c:	movs	r2, #1
    225e:	asrs	r3, r3, #2
    2260:	lsl.w	r3, r2, r3
    2264:	ldr	r2, [r1, #4]
    2266:	ldr.w	r8, [r1, ip, lsl #3]
    226a:	str.w	r8, [r4, #8]
    226e:	add.w	r9, r1, ip, lsl #3
    2272:	orrs	r2, r3
    2274:	sub.w	r3, r9, #8
    2278:	str	r3, [r4, #12]
    227a:	str	r2, [r1, #4]
    227c:	str.w	r4, [r1, ip, lsl #3]
    2280:	str.w	r4, [r8, #12]
    2284:	asrs	r3, r0, #2
    2286:	movs	r4, #1
    2288:	lsls	r4, r3
    228a:	cmp	r4, r2
    228c:	bhi.w	23a4 <_malloc_r+0x1f0>
    2290:	tst	r4, r2
    2292:	bne.n	22a2 <_malloc_r+0xee>
    2294:	bic.w	r0, r0, #3
    2298:	lsls	r4, r4, #1
    229a:	tst	r4, r2
    229c:	add.w	r0, r0, #4
    22a0:	beq.n	2298 <_malloc_r+0xe4>
    22a2:	add.w	r9, r7, r0, lsl #3
    22a6:	mov	ip, r9
    22a8:	mov	r8, r0
    22aa:	ldr.w	r1, [ip, #12]
    22ae:	cmp	ip, r1
    22b0:	bne.n	22c2 <_malloc_r+0x10e>
    22b2:	b.n	259c <_malloc_r+0x3e8>
    22b4:	cmp	r2, #0
    22b6:	bge.w	25bc <_malloc_r+0x408>
    22ba:	ldr	r1, [r1, #12]
    22bc:	cmp	ip, r1
    22be:	beq.w	259c <_malloc_r+0x3e8>
    22c2:	ldr	r3, [r1, #4]
    22c4:	bic.w	r3, r3, #3
    22c8:	subs	r2, r3, r5
    22ca:	cmp	r2, #15
    22cc:	ble.n	22b4 <_malloc_r+0x100>
    22ce:	mov	r4, r1
    22d0:	ldr.w	ip, [r1, #12]
    22d4:	ldr.w	r8, [r4, #8]!
    22d8:	adds	r3, r1, r5
    22da:	orr.w	r5, r5, #1
    22de:	str	r5, [r1, #4]
    22e0:	orr.w	r1, r2, #1
    22e4:	str.w	ip, [r8, #12]
    22e8:	mov	r0, r6
    22ea:	str.w	r8, [ip, #8]
    22ee:	str	r3, [r7, #20]
    22f0:	str	r3, [r7, #16]
    22f2:	str.w	lr, [r3, #12]
    22f6:	str.w	lr, [r3, #8]
    22fa:	str	r1, [r3, #4]
    22fc:	str	r2, [r3, r2]
    22fe:	bl	28b8 <__malloc_unlock>
    2302:	b.n	2344 <_malloc_r+0x190>
    2304:	cmp	r1, #16
    2306:	bhi.n	234c <_malloc_r+0x198>
    2308:	bl	28b4 <__malloc_lock>
    230c:	movs	r5, #16
    230e:	movs	r3, #6
    2310:	movs	r0, #2
    2312:	ldr	r7, [pc, #504]	; (250c <_malloc_r+0x358>)
    2314:	add.w	r3, r7, r3, lsl #2
    2318:	sub.w	r2, r3, #8
    231c:	ldr	r4, [r3, #4]
    231e:	cmp	r4, r2
    2320:	beq.w	25ae <_malloc_r+0x3fa>
    2324:	ldr	r3, [r4, #4]
    2326:	ldr	r1, [r4, #12]
    2328:	ldr	r5, [r4, #8]
    232a:	bic.w	r3, r3, #3
    232e:	add	r3, r4
    2330:	mov	r0, r6
    2332:	ldr	r2, [r3, #4]
    2334:	str	r1, [r5, #12]
    2336:	orr.w	r2, r2, #1
    233a:	str	r5, [r1, #8]
    233c:	str	r2, [r3, #4]
    233e:	bl	28b8 <__malloc_unlock>
    2342:	adds	r4, #8
    2344:	mov	r0, r4
    2346:	add	sp, #12
    2348:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    234c:	movs	r4, #0
    234e:	movs	r3, #12
    2350:	mov	r0, r4
    2352:	str	r3, [r6, #0]
    2354:	add	sp, #12
    2356:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    235a:	movs	r3, #128	; 0x80
    235c:	mov.w	lr, #64	; 0x40
    2360:	movs	r0, #63	; 0x3f
    2362:	b.n	21f8 <_malloc_r+0x44>
    2364:	mov	r0, lr
    2366:	b.n	2224 <_malloc_r+0x70>
    2368:	add	r3, r4
    236a:	ldr	r1, [r4, #12]
    236c:	ldr	r2, [r3, #4]
    236e:	ldr	r5, [r4, #8]
    2370:	orr.w	r2, r2, #1
    2374:	str	r1, [r5, #12]
    2376:	mov	r0, r6
    2378:	str	r5, [r1, #8]
    237a:	str	r2, [r3, #4]
    237c:	bl	28b8 <__malloc_unlock>
    2380:	adds	r4, #8
    2382:	mov	r0, r4
    2384:	add	sp, #12
    2386:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    238a:	add	r3, r4
    238c:	mov	r0, r6
    238e:	ldr	r2, [r3, #4]
    2390:	orr.w	r2, r2, #1
    2394:	str	r2, [r3, #4]
    2396:	bl	28b8 <__malloc_unlock>
    239a:	adds	r4, #8
    239c:	mov	r0, r4
    239e:	add	sp, #12
    23a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23a4:	ldr	r4, [r7, #8]
    23a6:	ldr	r3, [r4, #4]
    23a8:	bic.w	r8, r3, #3
    23ac:	cmp	r8, r5
    23ae:	bcc.n	23ba <_malloc_r+0x206>
    23b0:	rsb	r3, r5, r8
    23b4:	cmp	r3, #15
    23b6:	bgt.w	24d2 <_malloc_r+0x31e>
    23ba:	ldr	r3, [pc, #340]	; (2510 <_malloc_r+0x35c>)
    23bc:	ldr.w	r9, [pc, #352]	; 2520 <_malloc_r+0x36c>
    23c0:	ldr	r2, [r3, #0]
    23c2:	ldr.w	r3, [r9]
    23c6:	adds	r3, #1
    23c8:	add	r2, r5
    23ca:	add.w	sl, r4, r8
    23ce:	beq.w	2692 <_malloc_r+0x4de>
    23d2:	add.w	r2, r2, #4096	; 0x1000
    23d6:	adds	r2, #15
    23d8:	bic.w	r2, r2, #4080	; 0xff0
    23dc:	bic.w	r2, r2, #15
    23e0:	mov	r1, r2
    23e2:	mov	r0, r6
    23e4:	str	r2, [sp, #4]
    23e6:	bl	2c9c <_sbrk_r>
    23ea:	cmp.w	r0, #4294967295
    23ee:	mov	fp, r0
    23f0:	ldr	r2, [sp, #4]
    23f2:	beq.w	26a6 <_malloc_r+0x4f2>
    23f6:	cmp	sl, r0
    23f8:	bhi.w	25f4 <_malloc_r+0x440>
    23fc:	ldr	r3, [pc, #276]	; (2514 <_malloc_r+0x360>)
    23fe:	ldr	r1, [r3, #0]
    2400:	cmp	sl, fp
    2402:	add	r1, r2
    2404:	str	r1, [r3, #0]
    2406:	beq.w	26b0 <_malloc_r+0x4fc>
    240a:	ldr.w	r0, [r9]
    240e:	ldr.w	lr, [pc, #272]	; 2520 <_malloc_r+0x36c>
    2412:	adds	r0, #1
    2414:	ittet	ne
    2416:	rsbne	sl, sl, fp
    241a:	addne	r1, sl
    241c:	streq.w	fp, [lr]
    2420:	strne	r1, [r3, #0]
    2422:	ands.w	r1, fp, #7
    2426:	beq.w	2658 <_malloc_r+0x4a4>
    242a:	rsb	r0, r1, #8
    242e:	rsb	r1, r1, #4096	; 0x1000
    2432:	add	fp, r0
    2434:	adds	r1, #8
    2436:	add	r2, fp
    2438:	ubfx	r2, r2, #0, #12
    243c:	rsb	r9, r2, r1
    2440:	mov	r1, r9
    2442:	mov	r0, r6
    2444:	str	r3, [sp, #4]
    2446:	bl	2c9c <_sbrk_r>
    244a:	adds	r3, r0, #1
    244c:	ldr	r3, [sp, #4]
    244e:	beq.w	26d0 <_malloc_r+0x51c>
    2452:	rsb	r2, fp, r0
    2456:	add	r2, r9
    2458:	orr.w	r2, r2, #1
    245c:	ldr	r1, [r3, #0]
    245e:	str.w	fp, [r7, #8]
    2462:	add	r1, r9
    2464:	cmp	r4, r7
    2466:	str.w	r2, [fp, #4]
    246a:	str	r1, [r3, #0]
    246c:	ldr.w	r9, [pc, #164]	; 2514 <_malloc_r+0x360>
    2470:	beq.n	24a0 <_malloc_r+0x2ec>
    2472:	cmp.w	r8, #15
    2476:	bls.w	2674 <_malloc_r+0x4c0>
    247a:	ldr	r2, [r4, #4]
    247c:	sub.w	r3, r8, #12
    2480:	bic.w	r3, r3, #7
    2484:	adds	r0, r4, r3
    2486:	and.w	r2, r2, #1
    248a:	mov.w	lr, #5
    248e:	orrs	r2, r3
    2490:	cmp	r3, #15
    2492:	str	r2, [r4, #4]
    2494:	str.w	lr, [r0, #4]
    2498:	str.w	lr, [r0, #8]
    249c:	bhi.w	26d8 <_malloc_r+0x524>
    24a0:	ldr	r3, [pc, #116]	; (2518 <_malloc_r+0x364>)
    24a2:	ldr	r4, [r7, #8]
    24a4:	ldr	r2, [r3, #0]
    24a6:	cmp	r1, r2
    24a8:	it	hi
    24aa:	strhi	r1, [r3, #0]
    24ac:	ldr	r3, [pc, #108]	; (251c <_malloc_r+0x368>)
    24ae:	ldr	r2, [r3, #0]
    24b0:	cmp	r1, r2
    24b2:	ldr	r2, [r4, #4]
    24b4:	it	hi
    24b6:	strhi	r1, [r3, #0]
    24b8:	bic.w	r2, r2, #3
    24bc:	cmp	r5, r2
    24be:	sub.w	r3, r2, r5
    24c2:	bhi.n	24c8 <_malloc_r+0x314>
    24c4:	cmp	r3, #15
    24c6:	bgt.n	24d2 <_malloc_r+0x31e>
    24c8:	mov	r0, r6
    24ca:	bl	28b8 <__malloc_unlock>
    24ce:	movs	r4, #0
    24d0:	b.n	2344 <_malloc_r+0x190>
    24d2:	adds	r2, r4, r5
    24d4:	orr.w	r3, r3, #1
    24d8:	orr.w	r5, r5, #1
    24dc:	str	r5, [r4, #4]
    24de:	mov	r0, r6
    24e0:	str	r2, [r7, #8]
    24e2:	str	r3, [r2, #4]
    24e4:	bl	28b8 <__malloc_unlock>
    24e8:	adds	r4, #8
    24ea:	mov	r0, r4
    24ec:	add	sp, #12
    24ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24f2:	cmp	r3, #20
    24f4:	bls.n	25da <_malloc_r+0x426>
    24f6:	cmp	r3, #84	; 0x54
    24f8:	bhi.w	2644 <_malloc_r+0x490>
    24fc:	lsrs	r0, r5, #12
    24fe:	add.w	lr, r0, #111	; 0x6f
    2502:	mov.w	r3, lr, lsl #1
    2506:	adds	r0, #110	; 0x6e
    2508:	b.n	21f8 <_malloc_r+0x44>
    250a:	nop
    250c:	.word	0x20000b98
    2510:	.word	0x20001274
    2514:	.word	0x20001278
    2518:	.word	0x20001270
    251c:	.word	0x2000126c
    2520:	.word	0x20000fa4
    2524:	lsrs	r2, r3, #9
    2526:	cmp	r2, #4
    2528:	bls.n	25e8 <_malloc_r+0x434>
    252a:	cmp	r2, #20
    252c:	bhi.w	2696 <_malloc_r+0x4e2>
    2530:	add.w	r1, r2, #92	; 0x5c
    2534:	lsls	r1, r1, #1
    2536:	adds	r2, #91	; 0x5b
    2538:	add.w	ip, r7, r1, lsl #2
    253c:	ldr.w	r1, [r7, r1, lsl #2]
    2540:	ldr.w	r8, [pc, #476]	; 2720 <_malloc_r+0x56c>
    2544:	sub.w	ip, ip, #8
    2548:	cmp	ip, r1
    254a:	beq.w	265e <_malloc_r+0x4aa>
    254e:	ldr	r2, [r1, #4]
    2550:	bic.w	r2, r2, #3
    2554:	cmp	r3, r2
    2556:	bcs.n	255e <_malloc_r+0x3aa>
    2558:	ldr	r1, [r1, #8]
    255a:	cmp	ip, r1
    255c:	bne.n	254e <_malloc_r+0x39a>
    255e:	ldr.w	ip, [r1, #12]
    2562:	ldr	r2, [r7, #4]
    2564:	str.w	ip, [r4, #12]
    2568:	str	r1, [r4, #8]
    256a:	str.w	r4, [ip, #8]
    256e:	str	r4, [r1, #12]
    2570:	b.n	2284 <_malloc_r+0xd0>
    2572:	adds	r3, r4, r5
    2574:	orr.w	r7, r2, #1
    2578:	orr.w	r5, r5, #1
    257c:	str	r5, [r4, #4]
    257e:	mov	r0, r6
    2580:	str	r3, [r1, #20]
    2582:	str	r3, [r1, #16]
    2584:	str.w	lr, [r3, #12]
    2588:	str.w	lr, [r3, #8]
    258c:	str	r7, [r3, #4]
    258e:	str	r2, [r3, r2]
    2590:	adds	r4, #8
    2592:	bl	28b8 <__malloc_unlock>
    2596:	b.n	2344 <_malloc_r+0x190>
    2598:	ldr	r2, [r1, #4]
    259a:	b.n	2284 <_malloc_r+0xd0>
    259c:	add.w	r8, r8, #1
    25a0:	tst.w	r8, #3
    25a4:	add.w	ip, ip, #8
    25a8:	bne.w	22aa <_malloc_r+0xf6>
    25ac:	b.n	2610 <_malloc_r+0x45c>
    25ae:	ldr	r4, [r3, #12]
    25b0:	cmp	r3, r4
    25b2:	it	eq
    25b4:	addeq	r0, #2
    25b6:	beq.w	2224 <_malloc_r+0x70>
    25ba:	b.n	2324 <_malloc_r+0x170>
    25bc:	add	r3, r1
    25be:	mov	r4, r1
    25c0:	ldr	r2, [r3, #4]
    25c2:	ldr	r1, [r1, #12]
    25c4:	ldr.w	r5, [r4, #8]!
    25c8:	orr.w	r2, r2, #1
    25cc:	str	r2, [r3, #4]
    25ce:	mov	r0, r6
    25d0:	str	r1, [r5, #12]
    25d2:	str	r5, [r1, #8]
    25d4:	bl	28b8 <__malloc_unlock>
    25d8:	b.n	2344 <_malloc_r+0x190>
    25da:	add.w	lr, r3, #92	; 0x5c
    25de:	add.w	r0, r3, #91	; 0x5b
    25e2:	mov.w	r3, lr, lsl #1
    25e6:	b.n	21f8 <_malloc_r+0x44>
    25e8:	lsrs	r2, r3, #6
    25ea:	add.w	r1, r2, #57	; 0x39
    25ee:	lsls	r1, r1, #1
    25f0:	adds	r2, #56	; 0x38
    25f2:	b.n	2538 <_malloc_r+0x384>
    25f4:	cmp	r4, r7
    25f6:	ldr	r3, [pc, #296]	; (2720 <_malloc_r+0x56c>)
    25f8:	beq.w	23fc <_malloc_r+0x248>
    25fc:	ldr	r4, [r3, #8]
    25fe:	ldr	r2, [r4, #4]
    2600:	bic.w	r2, r2, #3
    2604:	b.n	24bc <_malloc_r+0x308>
    2606:	ldr.w	r3, [r9], #-8
    260a:	cmp	r9, r3
    260c:	bne.w	2714 <_malloc_r+0x560>
    2610:	tst.w	r0, #3
    2614:	add.w	r0, r0, #4294967295
    2618:	bne.n	2606 <_malloc_r+0x452>
    261a:	ldr	r3, [r7, #4]
    261c:	bic.w	r3, r3, r4
    2620:	str	r3, [r7, #4]
    2622:	lsls	r4, r4, #1
    2624:	cmp	r4, r3
    2626:	bhi.w	23a4 <_malloc_r+0x1f0>
    262a:	cmp	r4, #0
    262c:	beq.w	23a4 <_malloc_r+0x1f0>
    2630:	tst	r4, r3
    2632:	mov	r0, r8
    2634:	bne.w	22a2 <_malloc_r+0xee>
    2638:	lsls	r4, r4, #1
    263a:	tst	r4, r3
    263c:	add.w	r0, r0, #4
    2640:	beq.n	2638 <_malloc_r+0x484>
    2642:	b.n	22a2 <_malloc_r+0xee>
    2644:	cmp.w	r3, #340	; 0x154
    2648:	bhi.n	267c <_malloc_r+0x4c8>
    264a:	lsrs	r0, r5, #15
    264c:	add.w	lr, r0, #120	; 0x78
    2650:	mov.w	r3, lr, lsl #1
    2654:	adds	r0, #119	; 0x77
    2656:	b.n	21f8 <_malloc_r+0x44>
    2658:	mov.w	r1, #4096	; 0x1000
    265c:	b.n	2436 <_malloc_r+0x282>
    265e:	movs	r1, #1
    2660:	ldr.w	r3, [r8, #4]
    2664:	asrs	r2, r2, #2
    2666:	lsl.w	r2, r1, r2
    266a:	orrs	r2, r3
    266c:	str.w	r2, [r8, #4]
    2670:	mov	r1, ip
    2672:	b.n	2564 <_malloc_r+0x3b0>
    2674:	movs	r3, #1
    2676:	str.w	r3, [fp, #4]
    267a:	b.n	24c8 <_malloc_r+0x314>
    267c:	movw	r2, #1364	; 0x554
    2680:	cmp	r3, r2
    2682:	bhi.n	26c6 <_malloc_r+0x512>
    2684:	lsrs	r0, r5, #18
    2686:	add.w	lr, r0, #125	; 0x7d
    268a:	mov.w	r3, lr, lsl #1
    268e:	adds	r0, #124	; 0x7c
    2690:	b.n	21f8 <_malloc_r+0x44>
    2692:	adds	r2, #16
    2694:	b.n	23e0 <_malloc_r+0x22c>
    2696:	cmp	r2, #84	; 0x54
    2698:	bhi.n	26e8 <_malloc_r+0x534>
    269a:	lsrs	r2, r3, #12
    269c:	add.w	r1, r2, #111	; 0x6f
    26a0:	lsls	r1, r1, #1
    26a2:	adds	r2, #110	; 0x6e
    26a4:	b.n	2538 <_malloc_r+0x384>
    26a6:	ldr	r4, [r7, #8]
    26a8:	ldr	r2, [r4, #4]
    26aa:	bic.w	r2, r2, #3
    26ae:	b.n	24bc <_malloc_r+0x308>
    26b0:	ubfx	r0, sl, #0, #12
    26b4:	cmp	r0, #0
    26b6:	bne.w	240a <_malloc_r+0x256>
    26ba:	add	r2, r8
    26bc:	ldr	r3, [r7, #8]
    26be:	orr.w	r2, r2, #1
    26c2:	str	r2, [r3, #4]
    26c4:	b.n	24a0 <_malloc_r+0x2ec>
    26c6:	movs	r3, #254	; 0xfe
    26c8:	mov.w	lr, #127	; 0x7f
    26cc:	movs	r0, #126	; 0x7e
    26ce:	b.n	21f8 <_malloc_r+0x44>
    26d0:	movs	r2, #1
    26d2:	mov.w	r9, #0
    26d6:	b.n	245c <_malloc_r+0x2a8>
    26d8:	add.w	r1, r4, #8
    26dc:	mov	r0, r6
    26de:	bl	2f88 <_free_r>
    26e2:	ldr.w	r1, [r9]
    26e6:	b.n	24a0 <_malloc_r+0x2ec>
    26e8:	cmp.w	r2, #340	; 0x154
    26ec:	bhi.n	26fa <_malloc_r+0x546>
    26ee:	lsrs	r2, r3, #15
    26f0:	add.w	r1, r2, #120	; 0x78
    26f4:	lsls	r1, r1, #1
    26f6:	adds	r2, #119	; 0x77
    26f8:	b.n	2538 <_malloc_r+0x384>
    26fa:	movw	r1, #1364	; 0x554
    26fe:	cmp	r2, r1
    2700:	bhi.n	270e <_malloc_r+0x55a>
    2702:	lsrs	r2, r3, #18
    2704:	add.w	r1, r2, #125	; 0x7d
    2708:	lsls	r1, r1, #1
    270a:	adds	r2, #124	; 0x7c
    270c:	b.n	2538 <_malloc_r+0x384>
    270e:	movs	r1, #254	; 0xfe
    2710:	movs	r2, #126	; 0x7e
    2712:	b.n	2538 <_malloc_r+0x384>
    2714:	ldr	r3, [r7, #4]
    2716:	b.n	2622 <_malloc_r+0x46e>
    2718:	lsrs	r0, r5, #3
    271a:	adds	r3, r0, #1
    271c:	lsls	r3, r3, #1
    271e:	b.n	2312 <_malloc_r+0x15e>
    2720:	.word	0x20000b98

00002724 <__ascii_mbtowc>:
    2724:	sub	sp, #8
    2726:	cbz	r1, 273c <__ascii_mbtowc+0x18>
    2728:	cbz	r2, 2742 <__ascii_mbtowc+0x1e>
    272a:	cbz	r3, 2748 <__ascii_mbtowc+0x24>
    272c:	ldrb	r3, [r2, #0]
    272e:	str	r3, [r1, #0]
    2730:	ldrb	r2, [r2, #0]
    2732:	adds	r0, r2, #0
    2734:	it	ne
    2736:	movne	r0, #1
    2738:	add	sp, #8
    273a:	bx	lr
    273c:	add	r1, sp, #4
    273e:	cmp	r2, #0
    2740:	bne.n	272a <__ascii_mbtowc+0x6>
    2742:	mov	r0, r2
    2744:	add	sp, #8
    2746:	bx	lr
    2748:	mvn.w	r0, #1
    274c:	b.n	2738 <__ascii_mbtowc+0x14>
    274e:	nop

00002750 <memmove>:
    2750:	cmp	r0, r1
    2752:	push	{r4, r5, r6, r7, lr}
    2754:	bls.n	2772 <memmove+0x22>
    2756:	adds	r3, r1, r2
    2758:	cmp	r0, r3
    275a:	bcs.n	2772 <memmove+0x22>
    275c:	adds	r1, r0, r2
    275e:	cmp	r2, #0
    2760:	beq.n	2806 <memmove+0xb6>
    2762:	subs	r2, r3, r2
    2764:	ldrb.w	r4, [r3, #-1]!
    2768:	strb.w	r4, [r1, #-1]!
    276c:	cmp	r3, r2
    276e:	bne.n	2764 <memmove+0x14>
    2770:	pop	{r4, r5, r6, r7, pc}
    2772:	cmp	r2, #15
    2774:	bls.n	2808 <memmove+0xb8>
    2776:	orr.w	r3, r1, r0
    277a:	lsls	r3, r3, #30
    277c:	bne.n	280c <memmove+0xbc>
    277e:	add.w	r4, r0, #16
    2782:	add.w	r3, r1, #16
    2786:	mov	r5, r2
    2788:	ldr.w	r6, [r3, #-16]
    278c:	str.w	r6, [r4, #-16]
    2790:	ldr.w	r6, [r3, #-12]
    2794:	str.w	r6, [r4, #-12]
    2798:	ldr.w	r6, [r3, #-8]
    279c:	str.w	r6, [r4, #-8]
    27a0:	subs	r5, #16
    27a2:	ldr.w	r6, [r3, #-4]
    27a6:	str.w	r6, [r4, #-4]
    27aa:	cmp	r5, #15
    27ac:	add.w	r3, r3, #16
    27b0:	add.w	r4, r4, #16
    27b4:	bhi.n	2788 <memmove+0x38>
    27b6:	sub.w	r3, r2, #16
    27ba:	bic.w	r3, r3, #15
    27be:	and.w	lr, r2, #15
    27c2:	adds	r3, #16
    27c4:	cmp.w	lr, #3
    27c8:	add	r1, r3
    27ca:	add	r3, r0
    27cc:	bls.n	2812 <memmove+0xc2>
    27ce:	subs	r6, r3, #4
    27d0:	mov	r5, r1
    27d2:	mov	r4, lr
    27d4:	subs	r4, #4
    27d6:	ldr.w	r7, [r5], #4
    27da:	str.w	r7, [r6, #4]!
    27de:	cmp	r4, #3
    27e0:	bhi.n	27d4 <memmove+0x84>
    27e2:	sub.w	r4, lr, #4
    27e6:	bic.w	r4, r4, #3
    27ea:	adds	r4, #4
    27ec:	add	r3, r4
    27ee:	add	r1, r4
    27f0:	and.w	r2, r2, #3
    27f4:	cbz	r2, 2810 <memmove+0xc0>
    27f6:	subs	r3, #1
    27f8:	add	r2, r1
    27fa:	ldrb.w	r4, [r1], #1
    27fe:	strb.w	r4, [r3, #1]!
    2802:	cmp	r2, r1
    2804:	bne.n	27fa <memmove+0xaa>
    2806:	pop	{r4, r5, r6, r7, pc}
    2808:	mov	r3, r0
    280a:	b.n	27f4 <memmove+0xa4>
    280c:	mov	r3, r0
    280e:	b.n	27f6 <memmove+0xa6>
    2810:	pop	{r4, r5, r6, r7, pc}
    2812:	mov	r2, lr
    2814:	b.n	27f4 <memmove+0xa4>
    2816:	nop

00002818 <memset>:
    2818:	push	{r4, r5, r6}
    281a:	lsls	r4, r0, #30
    281c:	beq.n	28ac <memset+0x94>
    281e:	subs	r4, r2, #1
    2820:	cmp	r2, #0
    2822:	beq.n	28a8 <memset+0x90>
    2824:	uxtb	r5, r1
    2826:	mov	r3, r0
    2828:	b.n	2830 <memset+0x18>
    282a:	subs	r2, r4, #1
    282c:	cbz	r4, 28a8 <memset+0x90>
    282e:	mov	r4, r2
    2830:	strb.w	r5, [r3], #1
    2834:	lsls	r2, r3, #30
    2836:	bne.n	282a <memset+0x12>
    2838:	cmp	r4, #3
    283a:	bls.n	289a <memset+0x82>
    283c:	uxtb	r5, r1
    283e:	orr.w	r5, r5, r5, lsl #8
    2842:	cmp	r4, #15
    2844:	orr.w	r5, r5, r5, lsl #16
    2848:	bls.n	287e <memset+0x66>
    284a:	add.w	r2, r3, #16
    284e:	mov	r6, r4
    2850:	subs	r6, #16
    2852:	cmp	r6, #15
    2854:	str.w	r5, [r2, #-16]
    2858:	str.w	r5, [r2, #-12]
    285c:	str.w	r5, [r2, #-8]
    2860:	str.w	r5, [r2, #-4]
    2864:	add.w	r2, r2, #16
    2868:	bhi.n	2850 <memset+0x38>
    286a:	sub.w	r2, r4, #16
    286e:	bic.w	r2, r2, #15
    2872:	and.w	r4, r4, #15
    2876:	adds	r2, #16
    2878:	cmp	r4, #3
    287a:	add	r3, r2
    287c:	bls.n	289a <memset+0x82>
    287e:	mov	r6, r3
    2880:	mov	r2, r4
    2882:	subs	r2, #4
    2884:	cmp	r2, #3
    2886:	str.w	r5, [r6], #4
    288a:	bhi.n	2882 <memset+0x6a>
    288c:	subs	r2, r4, #4
    288e:	bic.w	r2, r2, #3
    2892:	adds	r2, #4
    2894:	add	r3, r2
    2896:	and.w	r4, r4, #3
    289a:	cbz	r4, 28a8 <memset+0x90>
    289c:	uxtb	r1, r1
    289e:	add	r4, r3
    28a0:	strb.w	r1, [r3], #1
    28a4:	cmp	r3, r4
    28a6:	bne.n	28a0 <memset+0x88>
    28a8:	pop	{r4, r5, r6}
    28aa:	bx	lr
    28ac:	mov	r4, r2
    28ae:	mov	r3, r0
    28b0:	b.n	2838 <memset+0x20>
    28b2:	nop

000028b4 <__malloc_lock>:
    28b4:	bx	lr
    28b6:	nop

000028b8 <__malloc_unlock>:
    28b8:	bx	lr
    28ba:	nop

000028bc <_realloc_r>:
    28bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28c0:	mov	r7, r2
    28c2:	sub	sp, #12
    28c4:	cmp	r1, #0
    28c6:	beq.w	2a4c <_realloc_r+0x190>
    28ca:	mov	r6, r1
    28cc:	mov	r9, r0
    28ce:	add.w	r5, r7, #11
    28d2:	bl	28b4 <__malloc_lock>
    28d6:	ldr.w	lr, [r6, #-4]
    28da:	cmp	r5, #22
    28dc:	bic.w	r4, lr, #3
    28e0:	sub.w	r8, r6, #8
    28e4:	bhi.n	2968 <_realloc_r+0xac>
    28e6:	movs	r2, #16
    28e8:	mov	r5, r2
    28ea:	cmp	r7, r5
    28ec:	bhi.n	2972 <_realloc_r+0xb6>
    28ee:	cmp	r4, r2
    28f0:	bge.n	29de <_realloc_r+0x122>
    28f2:	ldr	r3, [pc, #804]	; (2c18 <_realloc_r+0x35c>)
    28f4:	ldr	r1, [r3, #8]
    28f6:	add.w	r0, r8, r4
    28fa:	cmp	r0, r1
    28fc:	ldr	r1, [r0, #4]
    28fe:	beq.w	2ab4 <_realloc_r+0x1f8>
    2902:	bic.w	r3, r1, #1
    2906:	add	r3, r0
    2908:	ldr	r3, [r3, #4]
    290a:	lsls	r3, r3, #31
    290c:	bpl.n	2a0a <_realloc_r+0x14e>
    290e:	tst.w	lr, #1
    2912:	beq.n	2980 <_realloc_r+0xc4>
    2914:	mov	r1, r7
    2916:	mov	r0, r9
    2918:	bl	21b4 <_malloc_r>
    291c:	mov	r7, r0
    291e:	cbz	r0, 295a <_realloc_r+0x9e>
    2920:	ldr.w	r3, [r6, #-4]
    2924:	bic.w	r3, r3, #1
    2928:	add	r3, r8
    292a:	sub.w	r2, r0, #8
    292e:	cmp	r2, r3
    2930:	beq.w	2bbc <_realloc_r+0x300>
    2934:	subs	r2, r4, #4
    2936:	cmp	r2, #36	; 0x24
    2938:	bhi.w	2b9e <_realloc_r+0x2e2>
    293c:	cmp	r2, #19
    293e:	bhi.w	2b4a <_realloc_r+0x28e>
    2942:	mov	r3, r0
    2944:	mov	r2, r6
    2946:	ldr	r1, [r2, #0]
    2948:	str	r1, [r3, #0]
    294a:	ldr	r1, [r2, #4]
    294c:	str	r1, [r3, #4]
    294e:	ldr	r2, [r2, #8]
    2950:	str	r2, [r3, #8]
    2952:	mov	r1, r6
    2954:	mov	r0, r9
    2956:	bl	2f88 <_free_r>
    295a:	mov	r0, r9
    295c:	bl	28b8 <__malloc_unlock>
    2960:	mov	r0, r7
    2962:	add	sp, #12
    2964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2968:	bic.w	r5, r5, #7
    296c:	cmp	r5, #0
    296e:	mov	r2, r5
    2970:	bge.n	28ea <_realloc_r+0x2e>
    2972:	movs	r3, #12
    2974:	movs	r0, #0
    2976:	str.w	r3, [r9]
    297a:	add	sp, #12
    297c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2980:	ldr.w	r3, [r6, #-8]
    2984:	rsb	sl, r3, r8
    2988:	ldr.w	r3, [sl, #4]
    298c:	bic.w	ip, r3, #3
    2990:	add.w	r3, r4, ip
    2994:	cmp	r3, r2
    2996:	blt.n	2914 <_realloc_r+0x58>
    2998:	mov	r7, sl
    299a:	ldr.w	r1, [sl, #12]
    299e:	ldr.w	r0, [r7, #8]!
    29a2:	subs	r2, r4, #4
    29a4:	cmp	r2, #36	; 0x24
    29a6:	str	r1, [r0, #12]
    29a8:	str	r0, [r1, #8]
    29aa:	bhi.w	2bdc <_realloc_r+0x320>
    29ae:	cmp	r2, #19
    29b0:	bls.w	2bd8 <_realloc_r+0x31c>
    29b4:	ldr	r1, [r6, #0]
    29b6:	str.w	r1, [sl, #8]
    29ba:	ldr	r1, [r6, #4]
    29bc:	str.w	r1, [sl, #12]
    29c0:	cmp	r2, #27
    29c2:	bhi.w	2c1c <_realloc_r+0x360>
    29c6:	adds	r6, #8
    29c8:	add.w	r2, sl, #16
    29cc:	ldr	r1, [r6, #0]
    29ce:	str	r1, [r2, #0]
    29d0:	ldr	r1, [r6, #4]
    29d2:	str	r1, [r2, #4]
    29d4:	ldr	r1, [r6, #8]
    29d6:	str	r1, [r2, #8]
    29d8:	mov	r6, r7
    29da:	mov	r4, r3
    29dc:	mov	r8, sl
    29de:	subs	r3, r4, r5
    29e0:	cmp	r3, #15
    29e2:	bhi.n	2a20 <_realloc_r+0x164>
    29e4:	ldr.w	r3, [r8, #4]
    29e8:	and.w	r3, r3, #1
    29ec:	orrs	r3, r4
    29ee:	add	r4, r8
    29f0:	str.w	r3, [r8, #4]
    29f4:	ldr	r3, [r4, #4]
    29f6:	orr.w	r3, r3, #1
    29fa:	str	r3, [r4, #4]
    29fc:	mov	r0, r9
    29fe:	bl	28b8 <__malloc_unlock>
    2a02:	mov	r0, r6
    2a04:	add	sp, #12
    2a06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a0a:	bic.w	r1, r1, #3
    2a0e:	add	r1, r4
    2a10:	cmp	r1, r2
    2a12:	blt.n	2a58 <_realloc_r+0x19c>
    2a14:	ldr	r3, [r0, #12]
    2a16:	ldr	r2, [r0, #8]
    2a18:	mov	r4, r1
    2a1a:	str	r3, [r2, #12]
    2a1c:	str	r2, [r3, #8]
    2a1e:	b.n	29de <_realloc_r+0x122>
    2a20:	ldr.w	r2, [r8, #4]
    2a24:	add.w	r1, r8, r5
    2a28:	and.w	r2, r2, #1
    2a2c:	orrs	r5, r2
    2a2e:	orr.w	r2, r3, #1
    2a32:	add	r3, r1
    2a34:	str.w	r5, [r8, #4]
    2a38:	str	r2, [r1, #4]
    2a3a:	ldr	r2, [r3, #4]
    2a3c:	orr.w	r2, r2, #1
    2a40:	adds	r1, #8
    2a42:	str	r2, [r3, #4]
    2a44:	mov	r0, r9
    2a46:	bl	2f88 <_free_r>
    2a4a:	b.n	29fc <_realloc_r+0x140>
    2a4c:	mov	r1, r2
    2a4e:	add	sp, #12
    2a50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a54:	b.w	21b4 <_malloc_r>
    2a58:	tst.w	lr, #1
    2a5c:	bne.w	2914 <_realloc_r+0x58>
    2a60:	ldr.w	r3, [r6, #-8]
    2a64:	rsb	sl, r3, r8
    2a68:	ldr.w	r3, [sl, #4]
    2a6c:	bic.w	ip, r3, #3
    2a70:	add.w	lr, r1, ip
    2a74:	cmp	lr, r2
    2a76:	blt.n	2990 <_realloc_r+0xd4>
    2a78:	ldr	r3, [r0, #12]
    2a7a:	ldr	r2, [r0, #8]
    2a7c:	mov	r7, sl
    2a7e:	str	r3, [r2, #12]
    2a80:	str	r2, [r3, #8]
    2a82:	ldr.w	r1, [r7, #8]!
    2a86:	ldr.w	r3, [sl, #12]
    2a8a:	str	r3, [r1, #12]
    2a8c:	subs	r2, r4, #4
    2a8e:	cmp	r2, #36	; 0x24
    2a90:	str	r1, [r3, #8]
    2a92:	bhi.w	2bc8 <_realloc_r+0x30c>
    2a96:	cmp	r2, #19
    2a98:	bls.n	2b60 <_realloc_r+0x2a4>
    2a9a:	ldr	r3, [r6, #0]
    2a9c:	str.w	r3, [sl, #8]
    2aa0:	ldr	r3, [r6, #4]
    2aa2:	str.w	r3, [sl, #12]
    2aa6:	cmp	r2, #27
    2aa8:	bhi.w	2bec <_realloc_r+0x330>
    2aac:	adds	r6, #8
    2aae:	add.w	r3, sl, #16
    2ab2:	b.n	2b62 <_realloc_r+0x2a6>
    2ab4:	bic.w	fp, r1, #3
    2ab8:	add	fp, r4
    2aba:	add.w	r0, r5, #16
    2abe:	cmp	fp, r0
    2ac0:	bge.n	2b76 <_realloc_r+0x2ba>
    2ac2:	tst.w	lr, #1
    2ac6:	bne.w	2914 <_realloc_r+0x58>
    2aca:	ldr.w	r1, [r6, #-8]
    2ace:	rsb	sl, r1, r8
    2ad2:	ldr.w	r1, [sl, #4]
    2ad6:	bic.w	ip, r1, #3
    2ada:	add	fp, ip
    2adc:	cmp	r0, fp
    2ade:	bgt.w	2990 <_realloc_r+0xd4>
    2ae2:	mov	r7, sl
    2ae4:	ldr.w	r1, [sl, #12]
    2ae8:	ldr.w	r0, [r7, #8]!
    2aec:	subs	r2, r4, #4
    2aee:	cmp	r2, #36	; 0x24
    2af0:	str	r1, [r0, #12]
    2af2:	str	r0, [r1, #8]
    2af4:	bhi.w	2c60 <_realloc_r+0x3a4>
    2af8:	cmp	r2, #19
    2afa:	bls.w	2c48 <_realloc_r+0x38c>
    2afe:	ldr	r1, [r6, #0]
    2b00:	str.w	r1, [sl, #8]
    2b04:	ldr	r1, [r6, #4]
    2b06:	str.w	r1, [sl, #12]
    2b0a:	cmp	r2, #27
    2b0c:	bhi.w	2c6e <_realloc_r+0x3b2>
    2b10:	adds	r6, #8
    2b12:	add.w	r2, sl, #16
    2b16:	ldr	r1, [r6, #0]
    2b18:	str	r1, [r2, #0]
    2b1a:	ldr	r1, [r6, #4]
    2b1c:	str	r1, [r2, #4]
    2b1e:	ldr	r1, [r6, #8]
    2b20:	str	r1, [r2, #8]
    2b22:	add.w	r1, sl, r5
    2b26:	rsb	r2, r5, fp
    2b2a:	orr.w	r2, r2, #1
    2b2e:	str	r1, [r3, #8]
    2b30:	str	r2, [r1, #4]
    2b32:	ldr.w	r3, [sl, #4]
    2b36:	and.w	r3, r3, #1
    2b3a:	orrs	r5, r3
    2b3c:	mov	r0, r9
    2b3e:	str.w	r5, [sl, #4]
    2b42:	bl	28b8 <__malloc_unlock>
    2b46:	mov	r0, r7
    2b48:	b.n	2a04 <_realloc_r+0x148>
    2b4a:	ldr	r3, [r6, #0]
    2b4c:	str	r3, [r0, #0]
    2b4e:	ldr	r3, [r6, #4]
    2b50:	str	r3, [r0, #4]
    2b52:	cmp	r2, #27
    2b54:	bhi.n	2ba6 <_realloc_r+0x2ea>
    2b56:	add.w	r3, r0, #8
    2b5a:	add.w	r2, r6, #8
    2b5e:	b.n	2946 <_realloc_r+0x8a>
    2b60:	mov	r3, r7
    2b62:	ldr	r2, [r6, #0]
    2b64:	str	r2, [r3, #0]
    2b66:	ldr	r2, [r6, #4]
    2b68:	str	r2, [r3, #4]
    2b6a:	ldr	r2, [r6, #8]
    2b6c:	str	r2, [r3, #8]
    2b6e:	mov	r6, r7
    2b70:	mov	r4, lr
    2b72:	mov	r8, sl
    2b74:	b.n	29de <_realloc_r+0x122>
    2b76:	add.w	r1, r8, r5
    2b7a:	rsb	fp, r5, fp
    2b7e:	orr.w	r2, fp, #1
    2b82:	str	r1, [r3, #8]
    2b84:	str	r2, [r1, #4]
    2b86:	ldr.w	r3, [r6, #-4]
    2b8a:	and.w	r3, r3, #1
    2b8e:	orrs	r5, r3
    2b90:	mov	r0, r9
    2b92:	str.w	r5, [r6, #-4]
    2b96:	bl	28b8 <__malloc_unlock>
    2b9a:	mov	r0, r6
    2b9c:	b.n	2a04 <_realloc_r+0x148>
    2b9e:	mov	r1, r6
    2ba0:	bl	2750 <memmove>
    2ba4:	b.n	2952 <_realloc_r+0x96>
    2ba6:	ldr	r3, [r6, #8]
    2ba8:	str	r3, [r0, #8]
    2baa:	ldr	r3, [r6, #12]
    2bac:	str	r3, [r0, #12]
    2bae:	cmp	r2, #36	; 0x24
    2bb0:	beq.n	2c04 <_realloc_r+0x348>
    2bb2:	add.w	r3, r0, #16
    2bb6:	add.w	r2, r6, #16
    2bba:	b.n	2946 <_realloc_r+0x8a>
    2bbc:	ldr.w	r3, [r0, #-4]
    2bc0:	bic.w	r3, r3, #3
    2bc4:	add	r4, r3
    2bc6:	b.n	29de <_realloc_r+0x122>
    2bc8:	mov	r1, r6
    2bca:	mov	r0, r7
    2bcc:	mov	r4, lr
    2bce:	mov	r8, sl
    2bd0:	bl	2750 <memmove>
    2bd4:	mov	r6, r7
    2bd6:	b.n	29de <_realloc_r+0x122>
    2bd8:	mov	r2, r7
    2bda:	b.n	29cc <_realloc_r+0x110>
    2bdc:	mov	r1, r6
    2bde:	mov	r0, r7
    2be0:	mov	r4, r3
    2be2:	mov	r8, sl
    2be4:	bl	2750 <memmove>
    2be8:	mov	r6, r7
    2bea:	b.n	29de <_realloc_r+0x122>
    2bec:	ldr	r3, [r6, #8]
    2bee:	str.w	r3, [sl, #16]
    2bf2:	ldr	r3, [r6, #12]
    2bf4:	str.w	r3, [sl, #20]
    2bf8:	cmp	r2, #36	; 0x24
    2bfa:	beq.n	2c34 <_realloc_r+0x378>
    2bfc:	adds	r6, #16
    2bfe:	add.w	r3, sl, #24
    2c02:	b.n	2b62 <_realloc_r+0x2a6>
    2c04:	ldr	r3, [r6, #16]
    2c06:	str	r3, [r0, #16]
    2c08:	ldr	r3, [r6, #20]
    2c0a:	str	r3, [r0, #20]
    2c0c:	add.w	r2, r6, #24
    2c10:	add.w	r3, r0, #24
    2c14:	b.n	2946 <_realloc_r+0x8a>
    2c16:	nop
    2c18:	.word	0x20000b98
    2c1c:	ldr	r1, [r6, #8]
    2c1e:	str.w	r1, [sl, #16]
    2c22:	ldr	r1, [r6, #12]
    2c24:	str.w	r1, [sl, #20]
    2c28:	cmp	r2, #36	; 0x24
    2c2a:	beq.n	2c4c <_realloc_r+0x390>
    2c2c:	adds	r6, #16
    2c2e:	add.w	r2, sl, #24
    2c32:	b.n	29cc <_realloc_r+0x110>
    2c34:	ldr	r3, [r6, #16]
    2c36:	str.w	r3, [sl, #24]
    2c3a:	ldr	r3, [r6, #20]
    2c3c:	str.w	r3, [sl, #28]
    2c40:	adds	r6, #24
    2c42:	add.w	r3, sl, #32
    2c46:	b.n	2b62 <_realloc_r+0x2a6>
    2c48:	mov	r2, r7
    2c4a:	b.n	2b16 <_realloc_r+0x25a>
    2c4c:	ldr	r2, [r6, #16]
    2c4e:	str.w	r2, [sl, #24]
    2c52:	ldr	r2, [r6, #20]
    2c54:	str.w	r2, [sl, #28]
    2c58:	adds	r6, #24
    2c5a:	add.w	r2, sl, #32
    2c5e:	b.n	29cc <_realloc_r+0x110>
    2c60:	mov	r1, r6
    2c62:	mov	r0, r7
    2c64:	str	r3, [sp, #4]
    2c66:	bl	2750 <memmove>
    2c6a:	ldr	r3, [sp, #4]
    2c6c:	b.n	2b22 <_realloc_r+0x266>
    2c6e:	ldr	r1, [r6, #8]
    2c70:	str.w	r1, [sl, #16]
    2c74:	ldr	r1, [r6, #12]
    2c76:	str.w	r1, [sl, #20]
    2c7a:	cmp	r2, #36	; 0x24
    2c7c:	beq.n	2c86 <_realloc_r+0x3ca>
    2c7e:	adds	r6, #16
    2c80:	add.w	r2, sl, #24
    2c84:	b.n	2b16 <_realloc_r+0x25a>
    2c86:	ldr	r2, [r6, #16]
    2c88:	str.w	r2, [sl, #24]
    2c8c:	ldr	r2, [r6, #20]
    2c8e:	str.w	r2, [sl, #28]
    2c92:	adds	r6, #24
    2c94:	add.w	r2, sl, #32
    2c98:	b.n	2b16 <_realloc_r+0x25a>
    2c9a:	nop

00002c9c <_sbrk_r>:
    2c9c:	push	{r3, r4, r5, lr}
    2c9e:	ldr	r4, [pc, #28]	; (2cbc <_sbrk_r+0x20>)
    2ca0:	movs	r3, #0
    2ca2:	mov	r5, r0
    2ca4:	mov	r0, r1
    2ca6:	str	r3, [r4, #0]
    2ca8:	bl	be8 <_sbrk>
    2cac:	adds	r3, r0, #1
    2cae:	beq.n	2cb2 <_sbrk_r+0x16>
    2cb0:	pop	{r3, r4, r5, pc}
    2cb2:	ldr	r3, [r4, #0]
    2cb4:	cmp	r3, #0
    2cb6:	beq.n	2cb0 <_sbrk_r+0x14>
    2cb8:	str	r3, [r5, #0]
    2cba:	pop	{r3, r4, r5, pc}
    2cbc:	.word	0x20003280

00002cc0 <strlen>:
    2cc0:	pld	[r0]
    2cc4:	strd	r4, r5, [sp, #-8]!
    2cc8:	bic.w	r1, r0, #7
    2ccc:	mvn.w	ip, #0
    2cd0:	ands.w	r4, r0, #7
    2cd4:	pld	[r1, #32]
    2cd8:	bne.w	2d6e <strlen+0xae>
    2cdc:	mov.w	r4, #0
    2ce0:	mvn.w	r0, #7
    2ce4:	ldrd	r2, r3, [r1]
    2ce8:	pld	[r1, #64]	; 0x40
    2cec:	add.w	r0, r0, #8
    2cf0:	uadd8	r2, r2, ip
    2cf4:	sel	r2, r4, ip
    2cf8:	uadd8	r3, r3, ip
    2cfc:	sel	r3, r2, ip
    2d00:	cbnz	r3, 2d56 <strlen+0x96>
    2d02:	ldrd	r2, r3, [r1, #8]
    2d06:	uadd8	r2, r2, ip
    2d0a:	add.w	r0, r0, #8
    2d0e:	sel	r2, r4, ip
    2d12:	uadd8	r3, r3, ip
    2d16:	sel	r3, r2, ip
    2d1a:	cbnz	r3, 2d56 <strlen+0x96>
    2d1c:	ldrd	r2, r3, [r1, #16]
    2d20:	uadd8	r2, r2, ip
    2d24:	add.w	r0, r0, #8
    2d28:	sel	r2, r4, ip
    2d2c:	uadd8	r3, r3, ip
    2d30:	sel	r3, r2, ip
    2d34:	cbnz	r3, 2d56 <strlen+0x96>
    2d36:	ldrd	r2, r3, [r1, #24]
    2d3a:	add.w	r1, r1, #32
    2d3e:	uadd8	r2, r2, ip
    2d42:	add.w	r0, r0, #8
    2d46:	sel	r2, r4, ip
    2d4a:	uadd8	r3, r3, ip
    2d4e:	sel	r3, r2, ip
    2d52:	cmp	r3, #0
    2d54:	beq.n	2ce4 <strlen+0x24>
    2d56:	cmp	r2, #0
    2d58:	itt	eq
    2d5a:	addeq	r0, #4
    2d5c:	moveq	r2, r3
    2d5e:	rev	r2, r2
    2d60:	clz	r2, r2
    2d64:	ldrd	r4, r5, [sp], #8
    2d68:	add.w	r0, r0, r2, lsr #3
    2d6c:	bx	lr
    2d6e:	ldrd	r2, r3, [r1]
    2d72:	and.w	r5, r4, #3
    2d76:	rsb	r0, r4, #0
    2d7a:	mov.w	r5, r5, lsl #3
    2d7e:	tst.w	r4, #4
    2d82:	pld	[r1, #64]	; 0x40
    2d86:	lsl.w	r5, ip, r5
    2d8a:	orn	r2, r2, r5
    2d8e:	itt	ne
    2d90:	ornne	r3, r3, r5
    2d94:	movne	r2, ip
    2d96:	mov.w	r4, #0
    2d9a:	b.n	2cf0 <strlen+0x30>

00002d9c <_vdprintf_r>:
    2d9c:	push	{r4, r5, r6, r7, lr}
    2d9e:	sub.w	sp, sp, #532	; 0x214
    2da2:	add	r5, sp, #16
    2da4:	str	r3, [sp, #0]
    2da6:	mov	r7, r1
    2da8:	mov	r3, r2
    2daa:	mov.w	r4, #512	; 0x200
    2dae:	add	r2, sp, #12
    2db0:	mov	r1, r5
    2db2:	str	r4, [sp, #12]
    2db4:	mov	r6, r0
    2db6:	bl	3844 <_vasnprintf_r>
    2dba:	cbz	r0, 2de0 <_vdprintf_r+0x44>
    2dbc:	mov	r4, r0
    2dbe:	mov	r2, r0
    2dc0:	mov	r1, r7
    2dc2:	ldr	r3, [sp, #12]
    2dc4:	mov	r0, r6
    2dc6:	bl	2e1c <_write_r>
    2dca:	cmp	r4, r5
    2dcc:	str	r0, [sp, #12]
    2dce:	beq.n	2dda <_vdprintf_r+0x3e>
    2dd0:	mov	r0, r6
    2dd2:	mov	r1, r4
    2dd4:	bl	2f88 <_free_r>
    2dd8:	ldr	r0, [sp, #12]
    2dda:	add.w	sp, sp, #532	; 0x214
    2dde:	pop	{r4, r5, r6, r7, pc}
    2de0:	mov.w	r0, #4294967295
    2de4:	b.n	2dda <_vdprintf_r+0x3e>
    2de6:	nop

00002de8 <vdprintf>:
    2de8:	push	{r4}
    2dea:	ldr	r4, [pc, #16]	; (2dfc <vdprintf+0x14>)
    2dec:	mov	r3, r2
    2dee:	mov	r2, r1
    2df0:	mov	r1, r0
    2df2:	ldr	r0, [r4, #0]
    2df4:	ldr.w	r4, [sp], #4
    2df8:	b.w	2d9c <_vdprintf_r>
    2dfc:	.word	0x20000a28

00002e00 <__ascii_wctomb>:
    2e00:	cbz	r1, 2e0c <__ascii_wctomb+0xc>
    2e02:	cmp	r2, #255	; 0xff
    2e04:	bhi.n	2e10 <__ascii_wctomb+0x10>
    2e06:	strb	r2, [r1, #0]
    2e08:	movs	r0, #1
    2e0a:	bx	lr
    2e0c:	mov	r0, r1
    2e0e:	bx	lr
    2e10:	movs	r3, #138	; 0x8a
    2e12:	str	r3, [r0, #0]
    2e14:	mov.w	r0, #4294967295
    2e18:	bx	lr
    2e1a:	nop

00002e1c <_write_r>:
    2e1c:	push	{r4, r5, r6, lr}
    2e1e:	mov	r5, r1
    2e20:	ldr	r4, [pc, #32]	; (2e44 <_write_r+0x28>)
    2e22:	mov	r1, r2
    2e24:	mov	r6, r0
    2e26:	mov	r2, r3
    2e28:	mov	r0, r5
    2e2a:	movs	r3, #0
    2e2c:	str	r3, [r4, #0]
    2e2e:	bl	b08 <_write>
    2e32:	adds	r3, r0, #1
    2e34:	beq.n	2e38 <_write_r+0x1c>
    2e36:	pop	{r4, r5, r6, pc}
    2e38:	ldr	r3, [r4, #0]
    2e3a:	cmp	r3, #0
    2e3c:	beq.n	2e36 <_write_r+0x1a>
    2e3e:	str	r3, [r6, #0]
    2e40:	pop	{r4, r5, r6, pc}
    2e42:	nop
    2e44:	.word	0x20003280

00002e48 <__register_exitproc>:
    2e48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e4c:	ldr	r4, [pc, #148]	; (2ee4 <__register_exitproc+0x9c>)
    2e4e:	ldr	r5, [r4, #0]
    2e50:	ldr.w	r4, [r5, #328]	; 0x148
    2e54:	mov	r6, r0
    2e56:	mov	r8, r1
    2e58:	mov	sl, r2
    2e5a:	mov	r9, r3
    2e5c:	cbz	r4, 2ed0 <__register_exitproc+0x88>
    2e5e:	ldr	r0, [r4, #4]
    2e60:	cmp	r0, #31
    2e62:	bgt.n	2e94 <__register_exitproc+0x4c>
    2e64:	adds	r3, r0, #1
    2e66:	cbz	r6, 2e86 <__register_exitproc+0x3e>
    2e68:	add.w	r5, r4, r0, lsl #2
    2e6c:	movs	r2, #1
    2e6e:	str.w	sl, [r5, #136]	; 0x88
    2e72:	ldr.w	r1, [r4, #392]	; 0x188
    2e76:	lsls	r2, r0
    2e78:	orrs	r1, r2
    2e7a:	cmp	r6, #2
    2e7c:	str.w	r1, [r4, #392]	; 0x188
    2e80:	str.w	r9, [r5, #264]	; 0x108
    2e84:	beq.n	2ec4 <__register_exitproc+0x7c>
    2e86:	adds	r0, #2
    2e88:	str	r3, [r4, #4]
    2e8a:	str.w	r8, [r4, r0, lsl #2]
    2e8e:	movs	r0, #0
    2e90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e94:	ldr	r3, [pc, #80]	; (2ee8 <__register_exitproc+0xa0>)
    2e96:	cbz	r3, 2eda <__register_exitproc+0x92>
    2e98:	mov.w	r0, #400	; 0x190
    2e9c:	bl	21a4 <malloc>
    2ea0:	mov	r4, r0
    2ea2:	cbz	r0, 2eda <__register_exitproc+0x92>
    2ea4:	ldr.w	r3, [r5, #328]	; 0x148
    2ea8:	movs	r7, #0
    2eaa:	stmia.w	r0, {r3, r7}
    2eae:	str.w	r4, [r5, #328]	; 0x148
    2eb2:	mov	r0, r7
    2eb4:	movs	r3, #1
    2eb6:	str.w	r7, [r4, #392]	; 0x188
    2eba:	str.w	r7, [r4, #396]	; 0x18c
    2ebe:	cmp	r6, #0
    2ec0:	beq.n	2e86 <__register_exitproc+0x3e>
    2ec2:	b.n	2e68 <__register_exitproc+0x20>
    2ec4:	ldr.w	r1, [r4, #396]	; 0x18c
    2ec8:	orrs	r2, r1
    2eca:	str.w	r2, [r4, #396]	; 0x18c
    2ece:	b.n	2e86 <__register_exitproc+0x3e>
    2ed0:	add.w	r4, r5, #332	; 0x14c
    2ed4:	str.w	r4, [r5, #328]	; 0x148
    2ed8:	b.n	2e5e <__register_exitproc+0x16>
    2eda:	mov.w	r0, #4294967295
    2ede:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ee2:	nop
    2ee4:	.word	0x20000324
    2ee8:	.word	0x000021a5

00002eec <_malloc_trim_r>:
    2eec:	push	{r3, r4, r5, r6, r7, lr}
    2eee:	ldr	r7, [pc, #140]	; (2f7c <_malloc_trim_r+0x90>)
    2ef0:	mov	r4, r1
    2ef2:	mov	r6, r0
    2ef4:	bl	28b4 <__malloc_lock>
    2ef8:	ldr	r3, [r7, #8]
    2efa:	ldr	r5, [r3, #4]
    2efc:	bic.w	r5, r5, #3
    2f00:	subs	r1, r5, r4
    2f02:	addw	r1, r1, #4079	; 0xfef
    2f06:	bic.w	r1, r1, #4080	; 0xff0
    2f0a:	bic.w	r1, r1, #15
    2f0e:	sub.w	r4, r1, #4096	; 0x1000
    2f12:	cmp.w	r4, #4096	; 0x1000
    2f16:	blt.n	2f28 <_malloc_trim_r+0x3c>
    2f18:	movs	r1, #0
    2f1a:	mov	r0, r6
    2f1c:	bl	2c9c <_sbrk_r>
    2f20:	ldr	r3, [r7, #8]
    2f22:	add	r3, r5
    2f24:	cmp	r0, r3
    2f26:	beq.n	2f32 <_malloc_trim_r+0x46>
    2f28:	mov	r0, r6
    2f2a:	bl	28b8 <__malloc_unlock>
    2f2e:	movs	r0, #0
    2f30:	pop	{r3, r4, r5, r6, r7, pc}
    2f32:	negs	r1, r4
    2f34:	mov	r0, r6
    2f36:	bl	2c9c <_sbrk_r>
    2f3a:	adds	r0, #1
    2f3c:	beq.n	2f5a <_malloc_trim_r+0x6e>
    2f3e:	ldr	r3, [pc, #64]	; (2f80 <_malloc_trim_r+0x94>)
    2f40:	ldr	r2, [r7, #8]
    2f42:	ldr	r1, [r3, #0]
    2f44:	subs	r5, r5, r4
    2f46:	orr.w	r5, r5, #1
    2f4a:	mov	r0, r6
    2f4c:	subs	r1, r1, r4
    2f4e:	str	r5, [r2, #4]
    2f50:	str	r1, [r3, #0]
    2f52:	bl	28b8 <__malloc_unlock>
    2f56:	movs	r0, #1
    2f58:	pop	{r3, r4, r5, r6, r7, pc}
    2f5a:	movs	r1, #0
    2f5c:	mov	r0, r6
    2f5e:	bl	2c9c <_sbrk_r>
    2f62:	ldr	r2, [r7, #8]
    2f64:	subs	r3, r0, r2
    2f66:	cmp	r3, #15
    2f68:	ble.n	2f28 <_malloc_trim_r+0x3c>
    2f6a:	ldr	r4, [pc, #24]	; (2f84 <_malloc_trim_r+0x98>)
    2f6c:	ldr	r1, [pc, #16]	; (2f80 <_malloc_trim_r+0x94>)
    2f6e:	ldr	r4, [r4, #0]
    2f70:	orr.w	r3, r3, #1
    2f74:	subs	r0, r0, r4
    2f76:	str	r3, [r2, #4]
    2f78:	str	r0, [r1, #0]
    2f7a:	b.n	2f28 <_malloc_trim_r+0x3c>
    2f7c:	.word	0x20000b98
    2f80:	.word	0x20001278
    2f84:	.word	0x20000fa4

00002f88 <_free_r>:
    2f88:	cmp	r1, #0
    2f8a:	beq.n	3018 <_free_r+0x90>
    2f8c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f90:	mov	r5, r1
    2f92:	mov	r8, r0
    2f94:	bl	28b4 <__malloc_lock>
    2f98:	ldr.w	r7, [r5, #-4]
    2f9c:	ldr	r1, [pc, #424]	; (3148 <_free_r+0x1c0>)
    2f9e:	bic.w	r3, r7, #1
    2fa2:	sub.w	r4, r5, #8
    2fa6:	adds	r2, r4, r3
    2fa8:	ldr	r6, [r1, #8]
    2faa:	ldr	r0, [r2, #4]
    2fac:	cmp	r2, r6
    2fae:	bic.w	r0, r0, #3
    2fb2:	beq.n	307a <_free_r+0xf2>
    2fb4:	lsls	r6, r7, #31
    2fb6:	str	r0, [r2, #4]
    2fb8:	bmi.n	2fd2 <_free_r+0x4a>
    2fba:	ldr.w	r7, [r5, #-8]
    2fbe:	subs	r4, r4, r7
    2fc0:	add.w	lr, r1, #8
    2fc4:	ldr	r5, [r4, #8]
    2fc6:	cmp	r5, lr
    2fc8:	add	r3, r7
    2fca:	beq.n	30ac <_free_r+0x124>
    2fcc:	ldr	r7, [r4, #12]
    2fce:	str	r7, [r5, #12]
    2fd0:	str	r5, [r7, #8]
    2fd2:	adds	r5, r2, r0
    2fd4:	ldr	r5, [r5, #4]
    2fd6:	lsls	r5, r5, #31
    2fd8:	bpl.n	3060 <_free_r+0xd8>
    2fda:	orr.w	r2, r3, #1
    2fde:	str	r2, [r4, #4]
    2fe0:	str	r3, [r4, r3]
    2fe2:	cmp.w	r3, #512	; 0x200
    2fe6:	bcs.n	301a <_free_r+0x92>
    2fe8:	lsrs	r3, r3, #3
    2fea:	adds	r2, r3, #1
    2fec:	ldr	r5, [r1, #4]
    2fee:	ldr.w	r7, [r1, r2, lsl #3]
    2ff2:	str	r7, [r4, #8]
    2ff4:	movs	r0, #1
    2ff6:	asrs	r3, r3, #2
    2ff8:	lsl.w	r3, r0, r3
    2ffc:	add.w	r0, r1, r2, lsl #3
    3000:	orrs	r5, r3
    3002:	subs	r0, #8
    3004:	str	r0, [r4, #12]
    3006:	str	r5, [r1, #4]
    3008:	str.w	r4, [r1, r2, lsl #3]
    300c:	str	r4, [r7, #12]
    300e:	mov	r0, r8
    3010:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3014:	b.w	28b8 <__malloc_unlock>
    3018:	bx	lr
    301a:	lsrs	r2, r3, #9
    301c:	cmp	r2, #4
    301e:	bhi.n	30c8 <_free_r+0x140>
    3020:	lsrs	r2, r3, #6
    3022:	add.w	r7, r2, #57	; 0x39
    3026:	lsls	r7, r7, #1
    3028:	add.w	r5, r2, #56	; 0x38
    302c:	add.w	r0, r1, r7, lsl #2
    3030:	ldr.w	r2, [r1, r7, lsl #2]
    3034:	ldr	r1, [pc, #272]	; (3148 <_free_r+0x1c0>)
    3036:	subs	r0, #8
    3038:	cmp	r0, r2
    303a:	beq.n	30d8 <_free_r+0x150>
    303c:	ldr	r1, [r2, #4]
    303e:	bic.w	r1, r1, #3
    3042:	cmp	r3, r1
    3044:	bcs.n	304c <_free_r+0xc4>
    3046:	ldr	r2, [r2, #8]
    3048:	cmp	r0, r2
    304a:	bne.n	303c <_free_r+0xb4>
    304c:	ldr	r0, [r2, #12]
    304e:	str	r0, [r4, #12]
    3050:	str	r2, [r4, #8]
    3052:	str	r4, [r0, #8]
    3054:	str	r4, [r2, #12]
    3056:	mov	r0, r8
    3058:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    305c:	b.w	28b8 <__malloc_unlock>
    3060:	ldr	r5, [r2, #8]
    3062:	ldr	r7, [pc, #232]	; (314c <_free_r+0x1c4>)
    3064:	cmp	r5, r7
    3066:	add	r3, r0
    3068:	beq.n	30ea <_free_r+0x162>
    306a:	ldr	r0, [r2, #12]
    306c:	str	r0, [r5, #12]
    306e:	orr.w	r2, r3, #1
    3072:	str	r5, [r0, #8]
    3074:	str	r2, [r4, #4]
    3076:	str	r3, [r4, r3]
    3078:	b.n	2fe2 <_free_r+0x5a>
    307a:	lsls	r7, r7, #31
    307c:	add	r3, r0
    307e:	bmi.n	3090 <_free_r+0x108>
    3080:	ldr.w	r2, [r5, #-8]
    3084:	subs	r4, r4, r2
    3086:	add	r3, r2
    3088:	ldr	r0, [r4, #8]
    308a:	ldr	r2, [r4, #12]
    308c:	str	r2, [r0, #12]
    308e:	str	r0, [r2, #8]
    3090:	ldr	r2, [pc, #188]	; (3150 <_free_r+0x1c8>)
    3092:	ldr	r2, [r2, #0]
    3094:	orr.w	r0, r3, #1
    3098:	cmp	r3, r2
    309a:	str	r0, [r4, #4]
    309c:	str	r4, [r1, #8]
    309e:	bcc.n	300e <_free_r+0x86>
    30a0:	ldr	r3, [pc, #176]	; (3154 <_free_r+0x1cc>)
    30a2:	mov	r0, r8
    30a4:	ldr	r1, [r3, #0]
    30a6:	bl	2eec <_malloc_trim_r>
    30aa:	b.n	300e <_free_r+0x86>
    30ac:	adds	r1, r2, r0
    30ae:	ldr	r1, [r1, #4]
    30b0:	lsls	r1, r1, #31
    30b2:	bmi.n	313e <_free_r+0x1b6>
    30b4:	ldr	r1, [r2, #8]
    30b6:	ldr	r2, [r2, #12]
    30b8:	str	r2, [r1, #12]
    30ba:	add	r3, r0
    30bc:	orr.w	r0, r3, #1
    30c0:	str	r1, [r2, #8]
    30c2:	str	r0, [r4, #4]
    30c4:	str	r3, [r4, r3]
    30c6:	b.n	300e <_free_r+0x86>
    30c8:	cmp	r2, #20
    30ca:	bhi.n	30fc <_free_r+0x174>
    30cc:	add.w	r7, r2, #92	; 0x5c
    30d0:	lsls	r7, r7, #1
    30d2:	add.w	r5, r2, #91	; 0x5b
    30d6:	b.n	302c <_free_r+0xa4>
    30d8:	asrs	r2, r5, #2
    30da:	ldr	r3, [r1, #4]
    30dc:	movs	r5, #1
    30de:	lsl.w	r2, r5, r2
    30e2:	orrs	r3, r2
    30e4:	str	r3, [r1, #4]
    30e6:	mov	r2, r0
    30e8:	b.n	304e <_free_r+0xc6>
    30ea:	orr.w	r2, r3, #1
    30ee:	str	r4, [r1, #20]
    30f0:	str	r4, [r1, #16]
    30f2:	str	r5, [r4, #12]
    30f4:	str	r5, [r4, #8]
    30f6:	str	r2, [r4, #4]
    30f8:	str	r3, [r4, r3]
    30fa:	b.n	300e <_free_r+0x86>
    30fc:	cmp	r2, #84	; 0x54
    30fe:	bhi.n	310e <_free_r+0x186>
    3100:	lsrs	r2, r3, #12
    3102:	add.w	r7, r2, #111	; 0x6f
    3106:	lsls	r7, r7, #1
    3108:	add.w	r5, r2, #110	; 0x6e
    310c:	b.n	302c <_free_r+0xa4>
    310e:	cmp.w	r2, #340	; 0x154
    3112:	bhi.n	3122 <_free_r+0x19a>
    3114:	lsrs	r2, r3, #15
    3116:	add.w	r7, r2, #120	; 0x78
    311a:	lsls	r7, r7, #1
    311c:	add.w	r5, r2, #119	; 0x77
    3120:	b.n	302c <_free_r+0xa4>
    3122:	movw	r0, #1364	; 0x554
    3126:	cmp	r2, r0
    3128:	bhi.n	3138 <_free_r+0x1b0>
    312a:	lsrs	r2, r3, #18
    312c:	add.w	r7, r2, #125	; 0x7d
    3130:	lsls	r7, r7, #1
    3132:	add.w	r5, r2, #124	; 0x7c
    3136:	b.n	302c <_free_r+0xa4>
    3138:	movs	r7, #254	; 0xfe
    313a:	movs	r5, #126	; 0x7e
    313c:	b.n	302c <_free_r+0xa4>
    313e:	orr.w	r2, r3, #1
    3142:	str	r2, [r4, #4]
    3144:	str	r3, [r4, r3]
    3146:	b.n	300e <_free_r+0x86>
    3148:	.word	0x20000b98
    314c:	.word	0x20000ba0
    3150:	.word	0x20000fa0
    3154:	.word	0x20001274

00003158 <_localeconv_r>:
    3158:	ldr	r2, [pc, #16]	; (316c <_localeconv_r+0x14>)
    315a:	ldr	r3, [pc, #20]	; (3170 <_localeconv_r+0x18>)
    315c:	ldr	r2, [r2, #0]
    315e:	ldr	r0, [r2, #52]	; 0x34
    3160:	cmp	r0, #0
    3162:	it	eq
    3164:	moveq	r0, r3
    3166:	adds	r0, #240	; 0xf0
    3168:	bx	lr
    316a:	nop
    316c:	.word	0x20000a28
    3170:	.word	0x20000a2c
	...

00003180 <memchr>:
    3180:	and.w	r1, r1, #255	; 0xff
    3184:	cmp	r2, #16
    3186:	blt.n	31e0 <memchr+0x60>
    3188:	tst.w	r0, #7
    318c:	beq.n	31a0 <memchr+0x20>
    318e:	ldrb.w	r3, [r0], #1
    3192:	subs	r2, #1
    3194:	cmp	r3, r1
    3196:	beq.n	31f4 <memchr+0x74>
    3198:	tst.w	r0, #7
    319c:	cbz	r2, 31f0 <memchr+0x70>
    319e:	bne.n	318e <memchr+0xe>
    31a0:	push	{r4, r5, r6, r7}
    31a2:	orr.w	r1, r1, r1, lsl #8
    31a6:	orr.w	r1, r1, r1, lsl #16
    31aa:	bic.w	r4, r2, #7
    31ae:	mvns.w	r7, #0
    31b2:	movs	r3, #0
    31b4:	ldrd	r5, r6, [r0], #8
    31b8:	subs	r4, #8
    31ba:	eor.w	r5, r5, r1
    31be:	eor.w	r6, r6, r1
    31c2:	uadd8	r5, r5, r7
    31c6:	sel	r5, r3, r7
    31ca:	uadd8	r6, r6, r7
    31ce:	sel	r6, r5, r7
    31d2:	cbnz	r6, 31f8 <memchr+0x78>
    31d4:	bne.n	31b4 <memchr+0x34>
    31d6:	pop	{r4, r5, r6, r7}
    31d8:	and.w	r1, r1, #255	; 0xff
    31dc:	and.w	r2, r2, #7
    31e0:	cbz	r2, 31f0 <memchr+0x70>
    31e2:	ldrb.w	r3, [r0], #1
    31e6:	subs	r2, #1
    31e8:	eor.w	r3, r3, r1
    31ec:	cbz	r3, 31f4 <memchr+0x74>
    31ee:	bne.n	31e2 <memchr+0x62>
    31f0:	movs	r0, #0
    31f2:	bx	lr
    31f4:	subs	r0, #1
    31f6:	bx	lr
    31f8:	cmp	r5, #0
    31fa:	itte	eq
    31fc:	moveq	r5, r6
    31fe:	subeq	r0, #3
    3200:	subne	r0, #7
    3202:	tst.w	r5, #1
    3206:	bne.n	3218 <memchr+0x98>
    3208:	adds	r0, #1
    320a:	tst.w	r5, #256	; 0x100
    320e:	ittt	eq
    3210:	addeq	r0, #1
    3212:	tsteq.w	r5, #98304	; 0x18000
    3216:	addeq	r0, #1
    3218:	pop	{r4, r5, r6, r7}
    321a:	subs	r0, #1
    321c:	bx	lr
    321e:	nop

00003220 <_Balloc>:
    3220:	ldr	r3, [r0, #76]	; 0x4c
    3222:	push	{r4, r5, r6, lr}
    3224:	mov	r5, r0
    3226:	mov	r4, r1
    3228:	cbz	r3, 323e <_Balloc+0x1e>
    322a:	ldr.w	r0, [r3, r4, lsl #2]
    322e:	cbz	r0, 3252 <_Balloc+0x32>
    3230:	ldr	r2, [r0, #0]
    3232:	str.w	r2, [r3, r4, lsl #2]
    3236:	movs	r3, #0
    3238:	str	r3, [r0, #16]
    323a:	str	r3, [r0, #12]
    323c:	pop	{r4, r5, r6, pc}
    323e:	movs	r2, #33	; 0x21
    3240:	movs	r1, #4
    3242:	bl	38a4 <_calloc_r>
    3246:	str	r0, [r5, #76]	; 0x4c
    3248:	mov	r3, r0
    324a:	cmp	r0, #0
    324c:	bne.n	322a <_Balloc+0xa>
    324e:	movs	r0, #0
    3250:	pop	{r4, r5, r6, pc}
    3252:	movs	r1, #1
    3254:	lsl.w	r6, r1, r4
    3258:	adds	r2, r6, #5
    325a:	mov	r0, r5
    325c:	lsls	r2, r2, #2
    325e:	bl	38a4 <_calloc_r>
    3262:	cmp	r0, #0
    3264:	beq.n	324e <_Balloc+0x2e>
    3266:	str	r4, [r0, #4]
    3268:	str	r6, [r0, #8]
    326a:	b.n	3236 <_Balloc+0x16>

0000326c <_Bfree>:
    326c:	cbz	r1, 327c <_Bfree+0x10>
    326e:	ldr	r3, [r0, #76]	; 0x4c
    3270:	ldr	r2, [r1, #4]
    3272:	ldr.w	r0, [r3, r2, lsl #2]
    3276:	str	r0, [r1, #0]
    3278:	str.w	r1, [r3, r2, lsl #2]
    327c:	bx	lr
    327e:	nop

00003280 <__multadd>:
    3280:	push	{r4, r5, r6, r7, lr}
    3282:	ldr	r4, [r1, #16]
    3284:	sub	sp, #12
    3286:	mov	r5, r1
    3288:	mov	r6, r0
    328a:	add.w	lr, r1, #20
    328e:	movs	r7, #0
    3290:	ldr.w	r0, [lr]
    3294:	uxth	r1, r0
    3296:	mla	r1, r2, r1, r3
    329a:	lsrs	r3, r1, #16
    329c:	lsrs	r0, r0, #16
    329e:	mla	r3, r2, r0, r3
    32a2:	uxth	r1, r1
    32a4:	adds	r7, #1
    32a6:	add.w	r1, r1, r3, lsl #16
    32aa:	cmp	r4, r7
    32ac:	str.w	r1, [lr], #4
    32b0:	mov.w	r3, r3, lsr #16
    32b4:	bgt.n	3290 <__multadd+0x10>
    32b6:	cbz	r3, 32c8 <__multadd+0x48>
    32b8:	ldr	r2, [r5, #8]
    32ba:	cmp	r4, r2
    32bc:	bge.n	32ce <__multadd+0x4e>
    32be:	add.w	r2, r5, r4, lsl #2
    32c2:	adds	r4, #1
    32c4:	str	r3, [r2, #20]
    32c6:	str	r4, [r5, #16]
    32c8:	mov	r0, r5
    32ca:	add	sp, #12
    32cc:	pop	{r4, r5, r6, r7, pc}
    32ce:	ldr	r1, [r5, #4]
    32d0:	str	r3, [sp, #4]
    32d2:	adds	r1, #1
    32d4:	mov	r0, r6
    32d6:	bl	3220 <_Balloc>
    32da:	ldr	r2, [r5, #16]
    32dc:	adds	r2, #2
    32de:	add.w	r1, r5, #12
    32e2:	mov	r7, r0
    32e4:	lsls	r2, r2, #2
    32e6:	adds	r0, #12
    32e8:	bl	1fac <memcpy>
    32ec:	ldr	r2, [r6, #76]	; 0x4c
    32ee:	ldr	r1, [r5, #4]
    32f0:	ldr	r3, [sp, #4]
    32f2:	ldr.w	r0, [r2, r1, lsl #2]
    32f6:	str	r0, [r5, #0]
    32f8:	str.w	r5, [r2, r1, lsl #2]
    32fc:	mov	r5, r7
    32fe:	b.n	32be <__multadd+0x3e>

00003300 <__hi0bits>:
    3300:	lsrs	r3, r0, #16
    3302:	lsls	r3, r3, #16
    3304:	cbnz	r3, 3334 <__hi0bits+0x34>
    3306:	lsls	r0, r0, #16
    3308:	movs	r3, #16
    330a:	tst.w	r0, #4278190080	; 0xff000000
    330e:	itt	eq
    3310:	lsleq	r0, r0, #8
    3312:	addeq	r3, #8
    3314:	tst.w	r0, #4026531840	; 0xf0000000
    3318:	itt	eq
    331a:	lsleq	r0, r0, #4
    331c:	addeq	r3, #4
    331e:	tst.w	r0, #3221225472	; 0xc0000000
    3322:	itt	eq
    3324:	lsleq	r0, r0, #2
    3326:	addeq	r3, #2
    3328:	cmp	r0, #0
    332a:	blt.n	333c <__hi0bits+0x3c>
    332c:	lsls	r2, r0, #1
    332e:	bmi.n	3338 <__hi0bits+0x38>
    3330:	movs	r0, #32
    3332:	bx	lr
    3334:	movs	r3, #0
    3336:	b.n	330a <__hi0bits+0xa>
    3338:	adds	r0, r3, #1
    333a:	bx	lr
    333c:	mov	r0, r3
    333e:	bx	lr

00003340 <__lo0bits>:
    3340:	ldr	r3, [r0, #0]
    3342:	ands.w	r2, r3, #7
    3346:	beq.n	3358 <__lo0bits+0x18>
    3348:	lsls	r1, r3, #31
    334a:	bmi.n	338e <__lo0bits+0x4e>
    334c:	lsls	r2, r3, #30
    334e:	bmi.n	3392 <__lo0bits+0x52>
    3350:	lsrs	r3, r3, #2
    3352:	str	r3, [r0, #0]
    3354:	movs	r0, #2
    3356:	bx	lr
    3358:	uxth	r1, r3
    335a:	cbnz	r1, 3360 <__lo0bits+0x20>
    335c:	lsrs	r3, r3, #16
    335e:	movs	r2, #16
    3360:	tst.w	r3, #255	; 0xff
    3364:	itt	eq
    3366:	lsreq	r3, r3, #8
    3368:	addeq	r2, #8
    336a:	lsls	r1, r3, #28
    336c:	itt	eq
    336e:	lsreq	r3, r3, #4
    3370:	addeq	r2, #4
    3372:	lsls	r1, r3, #30
    3374:	itt	eq
    3376:	lsreq	r3, r3, #2
    3378:	addeq	r2, #2
    337a:	lsls	r1, r3, #31
    337c:	bmi.n	3388 <__lo0bits+0x48>
    337e:	lsrs	r3, r3, #1
    3380:	bne.n	3386 <__lo0bits+0x46>
    3382:	movs	r0, #32
    3384:	bx	lr
    3386:	adds	r2, #1
    3388:	str	r3, [r0, #0]
    338a:	mov	r0, r2
    338c:	bx	lr
    338e:	movs	r0, #0
    3390:	bx	lr
    3392:	lsrs	r3, r3, #1
    3394:	str	r3, [r0, #0]
    3396:	movs	r0, #1
    3398:	bx	lr
    339a:	nop

0000339c <__i2b>:
    339c:	push	{r4, lr}
    339e:	mov	r4, r1
    33a0:	movs	r1, #1
    33a2:	bl	3220 <_Balloc>
    33a6:	movs	r2, #1
    33a8:	str	r4, [r0, #20]
    33aa:	str	r2, [r0, #16]
    33ac:	pop	{r4, pc}
    33ae:	nop

000033b0 <__multiply>:
    33b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33b4:	ldr	r5, [r1, #16]
    33b6:	ldr	r7, [r2, #16]
    33b8:	cmp	r5, r7
    33ba:	sub	sp, #12
    33bc:	mov	r4, r1
    33be:	mov	r6, r2
    33c0:	bge.n	33cc <__multiply+0x1c>
    33c2:	mov	r2, r5
    33c4:	mov	r4, r6
    33c6:	mov	r5, r7
    33c8:	mov	r6, r1
    33ca:	mov	r7, r2
    33cc:	ldr	r3, [r4, #8]
    33ce:	ldr	r1, [r4, #4]
    33d0:	add.w	r8, r5, r7
    33d4:	cmp	r8, r3
    33d6:	it	gt
    33d8:	addgt	r1, #1
    33da:	bl	3220 <_Balloc>
    33de:	add.w	ip, r0, #20
    33e2:	add.w	r9, ip, r8, lsl #2
    33e6:	cmp	ip, r9
    33e8:	str	r0, [sp, #0]
    33ea:	bcs.n	33f8 <__multiply+0x48>
    33ec:	mov	r3, ip
    33ee:	movs	r1, #0
    33f0:	str.w	r1, [r3], #4
    33f4:	cmp	r9, r3
    33f6:	bhi.n	33f0 <__multiply+0x40>
    33f8:	add.w	r2, r6, #20
    33fc:	add.w	sl, r2, r7, lsl #2
    3400:	add.w	r3, r4, #20
    3404:	cmp	r2, sl
    3406:	add.w	lr, r3, r5, lsl #2
    340a:	bcs.n	34b6 <__multiply+0x106>
    340c:	str.w	r9, [sp, #4]
    3410:	mov	r9, r3
    3412:	ldr.w	r3, [r2], #4
    3416:	uxth.w	fp, r3
    341a:	cmp.w	fp, #0
    341e:	beq.n	3462 <__multiply+0xb2>
    3420:	movs	r0, #0
    3422:	mov	r7, r9
    3424:	mov	r6, ip
    3426:	mov	r5, r0
    3428:	b.n	342c <__multiply+0x7c>
    342a:	mov	r6, r3
    342c:	ldr.w	r4, [r7], #4
    3430:	ldr	r0, [r6, #0]
    3432:	uxth	r1, r4
    3434:	uxth	r3, r0
    3436:	mla	r1, fp, r1, r3
    343a:	lsrs	r4, r4, #16
    343c:	lsrs	r0, r0, #16
    343e:	adds	r3, r1, r5
    3440:	mla	r0, fp, r4, r0
    3444:	add.w	r0, r0, r3, lsr #16
    3448:	uxth	r1, r3
    344a:	mov	r3, r6
    344c:	orr.w	r1, r1, r0, lsl #16
    3450:	cmp	lr, r7
    3452:	mov.w	r5, r0, lsr #16
    3456:	str.w	r1, [r3], #4
    345a:	bhi.n	342a <__multiply+0x7a>
    345c:	str	r5, [r6, #4]
    345e:	ldr.w	r3, [r2, #-4]
    3462:	movs.w	fp, r3, lsr #16
    3466:	beq.n	34aa <__multiply+0xfa>
    3468:	ldr.w	r3, [ip]
    346c:	mov	r7, ip
    346e:	mov	r0, r3
    3470:	mov	r5, r9
    3472:	movs	r1, #0
    3474:	b.n	3478 <__multiply+0xc8>
    3476:	mov	r7, r6
    3478:	ldrh	r4, [r5, #0]
    347a:	lsrs	r0, r0, #16
    347c:	mla	r0, fp, r4, r0
    3480:	add	r1, r0
    3482:	uxth	r4, r3
    3484:	mov	r6, r7
    3486:	orr.w	r3, r4, r1, lsl #16
    348a:	str.w	r3, [r6], #4
    348e:	ldr	r0, [r7, #4]
    3490:	ldr.w	r4, [r5], #4
    3494:	uxth	r3, r0
    3496:	lsrs	r4, r4, #16
    3498:	mla	r4, fp, r4, r3
    349c:	add.w	r3, r4, r1, lsr #16
    34a0:	cmp	lr, r5
    34a2:	mov.w	r1, r3, lsr #16
    34a6:	bhi.n	3476 <__multiply+0xc6>
    34a8:	str	r3, [r7, #4]
    34aa:	cmp	sl, r2
    34ac:	add.w	ip, ip, #4
    34b0:	bhi.n	3412 <__multiply+0x62>
    34b2:	ldr.w	r9, [sp, #4]
    34b6:	cmp.w	r8, #0
    34ba:	ble.n	34d4 <__multiply+0x124>
    34bc:	ldr.w	r3, [r9, #-4]
    34c0:	sub.w	r9, r9, #4
    34c4:	cbz	r3, 34ce <__multiply+0x11e>
    34c6:	b.n	34d4 <__multiply+0x124>
    34c8:	ldr.w	r3, [r9, #-4]!
    34cc:	cbnz	r3, 34d4 <__multiply+0x124>
    34ce:	subs.w	r8, r8, #1
    34d2:	bne.n	34c8 <__multiply+0x118>
    34d4:	ldr	r0, [sp, #0]
    34d6:	str.w	r8, [r0, #16]
    34da:	add	sp, #12
    34dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000034e0 <__pow5mult>:
    34e0:	ands.w	r3, r2, #3
    34e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34e8:	mov	r4, r2
    34ea:	mov	r7, r0
    34ec:	bne.n	354c <__pow5mult+0x6c>
    34ee:	mov	r6, r1
    34f0:	asrs	r4, r4, #2
    34f2:	beq.n	352e <__pow5mult+0x4e>
    34f4:	ldr	r5, [r7, #72]	; 0x48
    34f6:	cbz	r5, 355e <__pow5mult+0x7e>
    34f8:	lsls	r3, r4, #31
    34fa:	mov.w	r8, #0
    34fe:	bmi.n	350e <__pow5mult+0x2e>
    3500:	asrs	r4, r4, #1
    3502:	beq.n	352e <__pow5mult+0x4e>
    3504:	ldr	r0, [r5, #0]
    3506:	cbz	r0, 3534 <__pow5mult+0x54>
    3508:	mov	r5, r0
    350a:	lsls	r3, r4, #31
    350c:	bpl.n	3500 <__pow5mult+0x20>
    350e:	mov	r2, r5
    3510:	mov	r1, r6
    3512:	mov	r0, r7
    3514:	bl	33b0 <__multiply>
    3518:	cbz	r6, 3548 <__pow5mult+0x68>
    351a:	ldr	r2, [r6, #4]
    351c:	ldr	r3, [r7, #76]	; 0x4c
    351e:	asrs	r4, r4, #1
    3520:	ldr.w	r1, [r3, r2, lsl #2]
    3524:	str	r1, [r6, #0]
    3526:	str.w	r6, [r3, r2, lsl #2]
    352a:	mov	r6, r0
    352c:	bne.n	3504 <__pow5mult+0x24>
    352e:	mov	r0, r6
    3530:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3534:	mov	r2, r5
    3536:	mov	r1, r5
    3538:	mov	r0, r7
    353a:	bl	33b0 <__multiply>
    353e:	str	r0, [r5, #0]
    3540:	str.w	r8, [r0]
    3544:	mov	r5, r0
    3546:	b.n	350a <__pow5mult+0x2a>
    3548:	mov	r6, r0
    354a:	b.n	3500 <__pow5mult+0x20>
    354c:	subs	r2, r3, #1
    354e:	ldr	r5, [pc, #44]	; (357c <__pow5mult+0x9c>)
    3550:	movs	r3, #0
    3552:	ldr.w	r2, [r5, r2, lsl #2]
    3556:	bl	3280 <__multadd>
    355a:	mov	r6, r0
    355c:	b.n	34f0 <__pow5mult+0x10>
    355e:	movs	r1, #1
    3560:	mov	r0, r7
    3562:	bl	3220 <_Balloc>
    3566:	movw	r1, #625	; 0x271
    356a:	movs	r2, #1
    356c:	movs	r3, #0
    356e:	str	r1, [r0, #20]
    3570:	str	r2, [r0, #16]
    3572:	mov	r5, r0
    3574:	str	r0, [r7, #72]	; 0x48
    3576:	str	r3, [r0, #0]
    3578:	b.n	34f8 <__pow5mult+0x18>
    357a:	nop
    357c:	.word	0x20000530

00003580 <__lshift>:
    3580:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3584:	mov	r9, r2
    3586:	ldr	r2, [r1, #16]
    3588:	ldr	r3, [r1, #8]
    358a:	mov.w	r4, r9, asr #5
    358e:	add.w	r8, r4, r2
    3592:	add.w	r5, r8, #1
    3596:	cmp	r5, r3
    3598:	mov	r6, r1
    359a:	mov	sl, r0
    359c:	ldr	r1, [r1, #4]
    359e:	ble.n	35aa <__lshift+0x2a>
    35a0:	lsls	r3, r3, #1
    35a2:	cmp	r5, r3
    35a4:	add.w	r1, r1, #1
    35a8:	bgt.n	35a0 <__lshift+0x20>
    35aa:	mov	r0, sl
    35ac:	bl	3220 <_Balloc>
    35b0:	cmp	r4, #0
    35b2:	add.w	r2, r0, #20
    35b6:	ble.n	362a <__lshift+0xaa>
    35b8:	add.w	r3, r2, r4, lsl #2
    35bc:	movs	r1, #0
    35be:	str.w	r1, [r2], #4
    35c2:	cmp	r3, r2
    35c4:	bne.n	35be <__lshift+0x3e>
    35c6:	ldr	r4, [r6, #16]
    35c8:	add.w	r1, r6, #20
    35cc:	ands.w	r9, r9, #31
    35d0:	add.w	lr, r1, r4, lsl #2
    35d4:	beq.n	361a <__lshift+0x9a>
    35d6:	rsb	r2, r9, #32
    35da:	movs	r4, #0
    35dc:	ldr	r7, [r1, #0]
    35de:	lsl.w	ip, r7, r9
    35e2:	orr.w	r4, ip, r4
    35e6:	mov	ip, r3
    35e8:	str.w	r4, [r3], #4
    35ec:	ldr.w	r4, [r1], #4
    35f0:	cmp	lr, r1
    35f2:	lsr.w	r4, r4, r2
    35f6:	bhi.n	35dc <__lshift+0x5c>
    35f8:	str.w	r4, [ip, #4]
    35fc:	cbz	r4, 3602 <__lshift+0x82>
    35fe:	add.w	r5, r8, #2
    3602:	ldr.w	r3, [sl, #76]	; 0x4c
    3606:	ldr	r2, [r6, #4]
    3608:	subs	r5, #1
    360a:	ldr.w	r1, [r3, r2, lsl #2]
    360e:	str	r5, [r0, #16]
    3610:	str	r1, [r6, #0]
    3612:	str.w	r6, [r3, r2, lsl #2]
    3616:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    361a:	subs	r3, #4
    361c:	ldr.w	r2, [r1], #4
    3620:	str.w	r2, [r3, #4]!
    3624:	cmp	lr, r1
    3626:	bhi.n	361c <__lshift+0x9c>
    3628:	b.n	3602 <__lshift+0x82>
    362a:	mov	r3, r2
    362c:	b.n	35c6 <__lshift+0x46>
    362e:	nop

00003630 <__mcmp>:
    3630:	ldr	r2, [r0, #16]
    3632:	ldr	r3, [r1, #16]
    3634:	subs	r2, r2, r3
    3636:	bne.n	3660 <__mcmp+0x30>
    3638:	lsls	r3, r3, #2
    363a:	adds	r0, #20
    363c:	adds	r1, #20
    363e:	add	r1, r3
    3640:	push	{r4}
    3642:	add	r3, r0
    3644:	b.n	364a <__mcmp+0x1a>
    3646:	cmp	r0, r3
    3648:	bcs.n	3664 <__mcmp+0x34>
    364a:	ldr.w	r4, [r3, #-4]!
    364e:	ldr.w	r2, [r1, #-4]!
    3652:	cmp	r4, r2
    3654:	beq.n	3646 <__mcmp+0x16>
    3656:	bcc.n	366c <__mcmp+0x3c>
    3658:	movs	r0, #1
    365a:	ldr.w	r4, [sp], #4
    365e:	bx	lr
    3660:	mov	r0, r2
    3662:	bx	lr
    3664:	movs	r0, #0
    3666:	ldr.w	r4, [sp], #4
    366a:	bx	lr
    366c:	mov.w	r0, #4294967295
    3670:	b.n	365a <__mcmp+0x2a>
    3672:	nop

00003674 <__mdiff>:
    3674:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3678:	ldr	r3, [r1, #16]
    367a:	mov	r7, r1
    367c:	ldr	r1, [r2, #16]
    367e:	subs	r3, r3, r1
    3680:	cmp	r3, #0
    3682:	mov	r8, r2
    3684:	bne.n	36b6 <__mdiff+0x42>
    3686:	lsls	r1, r1, #2
    3688:	add.w	r2, r7, #20
    368c:	add.w	r5, r8, #20
    3690:	adds	r3, r2, r1
    3692:	add	r1, r5
    3694:	b.n	369a <__mdiff+0x26>
    3696:	cmp	r2, r3
    3698:	bcs.n	3758 <__mdiff+0xe4>
    369a:	ldr.w	r6, [r3, #-4]!
    369e:	ldr.w	r4, [r1, #-4]!
    36a2:	cmp	r6, r4
    36a4:	beq.n	3696 <__mdiff+0x22>
    36a6:	bcs.n	376a <__mdiff+0xf6>
    36a8:	mov	r3, r7
    36aa:	mov	r4, r2
    36ac:	mov	r7, r8
    36ae:	mov.w	r9, #1
    36b2:	mov	r8, r3
    36b4:	b.n	36c4 <__mdiff+0x50>
    36b6:	blt.n	3774 <__mdiff+0x100>
    36b8:	add.w	r5, r7, #20
    36bc:	add.w	r4, r2, #20
    36c0:	mov.w	r9, #0
    36c4:	ldr	r1, [r7, #4]
    36c6:	bl	3220 <_Balloc>
    36ca:	ldr.w	r3, [r8, #16]
    36ce:	ldr	r6, [r7, #16]
    36d0:	str.w	r9, [r0, #12]
    36d4:	add.w	ip, r4, r3, lsl #2
    36d8:	mov	lr, r4
    36da:	add.w	r7, r5, r6, lsl #2
    36de:	add.w	r4, r0, #20
    36e2:	movs	r3, #0
    36e4:	ldr.w	r1, [lr], #4
    36e8:	ldr.w	r8, [r5], #4
    36ec:	uxth	r2, r1
    36ee:	uxtah	r3, r3, r8
    36f2:	lsrs	r1, r1, #16
    36f4:	subs	r2, r3, r2
    36f6:	rsb	r3, r1, r8, lsr #16
    36fa:	add.w	r3, r3, r2, asr #16
    36fe:	uxth	r2, r2
    3700:	orr.w	r2, r2, r3, lsl #16
    3704:	cmp	ip, lr
    3706:	str.w	r2, [r4], #4
    370a:	mov.w	r3, r3, asr #16
    370e:	bhi.n	36e4 <__mdiff+0x70>
    3710:	cmp	r7, r5
    3712:	bls.n	3744 <__mdiff+0xd0>
    3714:	mov	ip, r4
    3716:	mov	r1, r5
    3718:	ldr.w	lr, [r1], #4
    371c:	uxtah	r2, r3, lr
    3720:	asrs	r3, r2, #16
    3722:	add.w	r3, r3, lr, lsr #16
    3726:	uxth	r2, r2
    3728:	orr.w	r2, r2, r3, lsl #16
    372c:	cmp	r7, r1
    372e:	str.w	r2, [ip], #4
    3732:	mov.w	r3, r3, asr #16
    3736:	bhi.n	3718 <__mdiff+0xa4>
    3738:	mvns	r5, r5
    373a:	add	r5, r7
    373c:	bic.w	r5, r5, #3
    3740:	adds	r5, #4
    3742:	add	r4, r5
    3744:	subs	r4, #4
    3746:	cbnz	r2, 3752 <__mdiff+0xde>
    3748:	ldr.w	r3, [r4, #-4]!
    374c:	subs	r6, #1
    374e:	cmp	r3, #0
    3750:	beq.n	3748 <__mdiff+0xd4>
    3752:	str	r6, [r0, #16]
    3754:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3758:	movs	r1, #0
    375a:	bl	3220 <_Balloc>
    375e:	movs	r2, #1
    3760:	movs	r3, #0
    3762:	str	r2, [r0, #16]
    3764:	str	r3, [r0, #20]
    3766:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    376a:	mov	r4, r5
    376c:	mov.w	r9, #0
    3770:	mov	r5, r2
    3772:	b.n	36c4 <__mdiff+0x50>
    3774:	mov	r3, r7
    3776:	add.w	r4, r7, #20
    377a:	add.w	r5, r8, #20
    377e:	mov	r7, r8
    3780:	mov.w	r9, #1
    3784:	mov	r8, r3
    3786:	b.n	36c4 <__mdiff+0x50>

00003788 <__d2b>:
    3788:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    378c:	vmov	r6, r7, d0
    3790:	sub	sp, #12
    3792:	mov	r8, r1
    3794:	movs	r1, #1
    3796:	mov	r4, r7
    3798:	ubfx	r5, r7, #20, #11
    379c:	mov	r7, r2
    379e:	bl	3220 <_Balloc>
    37a2:	ubfx	r4, r4, #0, #20
    37a6:	mov	r9, r0
    37a8:	cbz	r5, 37ae <__d2b+0x26>
    37aa:	orr.w	r4, r4, #1048576	; 0x100000
    37ae:	str	r4, [sp, #4]
    37b0:	cbz	r6, 37fa <__d2b+0x72>
    37b2:	add	r0, sp, #8
    37b4:	str.w	r6, [r0, #-8]!
    37b8:	bl	3340 <__lo0bits>
    37bc:	cmp	r0, #0
    37be:	bne.n	382a <__d2b+0xa2>
    37c0:	ldmia.w	sp, {r2, r3}
    37c4:	str.w	r2, [r9, #20]
    37c8:	cmp	r3, #0
    37ca:	ite	eq
    37cc:	moveq	r1, #1
    37ce:	movne	r1, #2
    37d0:	str.w	r3, [r9, #24]
    37d4:	str.w	r1, [r9, #16]
    37d8:	cbnz	r5, 3812 <__d2b+0x8a>
    37da:	add.w	r3, r9, r1, lsl #2
    37de:	subw	r0, r0, #1074	; 0x432
    37e2:	str.w	r0, [r8]
    37e6:	ldr	r0, [r3, #16]
    37e8:	bl	3300 <__hi0bits>
    37ec:	rsb	r0, r0, r1, lsl #5
    37f0:	str	r0, [r7, #0]
    37f2:	mov	r0, r9
    37f4:	add	sp, #12
    37f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    37fa:	add	r0, sp, #4
    37fc:	bl	3340 <__lo0bits>
    3800:	ldr	r3, [sp, #4]
    3802:	str.w	r3, [r9, #20]
    3806:	movs	r1, #1
    3808:	adds	r0, #32
    380a:	str.w	r1, [r9, #16]
    380e:	cmp	r5, #0
    3810:	beq.n	37da <__d2b+0x52>
    3812:	subw	r5, r5, #1075	; 0x433
    3816:	add	r5, r0
    3818:	rsb	r0, r0, #53	; 0x35
    381c:	str.w	r5, [r8]
    3820:	str	r0, [r7, #0]
    3822:	mov	r0, r9
    3824:	add	sp, #12
    3826:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    382a:	ldmia.w	sp, {r2, r3}
    382e:	rsb	r1, r0, #32
    3832:	lsl.w	r1, r3, r1
    3836:	orrs	r2, r1
    3838:	lsrs	r3, r0
    383a:	str	r3, [sp, #4]
    383c:	str.w	r2, [r9, #20]
    3840:	b.n	37c8 <__d2b+0x40>
    3842:	nop

00003844 <_vasnprintf_r>:
    3844:	push	{r4, r5, r6, lr}
    3846:	mov	r5, r2
    3848:	sub	sp, #104	; 0x68
    384a:	ldr	r4, [r2, #0]
    384c:	cbz	r1, 3852 <_vasnprintf_r+0xe>
    384e:	cmp	r4, #0
    3850:	bne.n	3888 <_vasnprintf_r+0x44>
    3852:	movs	r4, #0
    3854:	mov.w	r2, #648	; 0x288
    3858:	strh.w	r2, [sp, #12]
    385c:	str	r4, [sp, #0]
    385e:	str	r4, [sp, #16]
    3860:	mov	r2, r3
    3862:	movw	r6, #65535	; 0xffff
    3866:	ldr	r3, [sp, #120]	; 0x78
    3868:	str	r4, [sp, #8]
    386a:	mov	r1, sp
    386c:	str	r4, [sp, #20]
    386e:	strh.w	r6, [sp, #14]
    3872:	bl	46b8 <_svfprintf_r>
    3876:	cmp	r0, #0
    3878:	blt.n	389e <_vasnprintf_r+0x5a>
    387a:	ldr	r3, [sp, #0]
    387c:	str	r0, [r5, #0]
    387e:	movs	r2, #0
    3880:	strb	r2, [r3, #0]
    3882:	ldr	r0, [sp, #16]
    3884:	add	sp, #104	; 0x68
    3886:	pop	{r4, r5, r6, pc}
    3888:	mov.w	r2, #1544	; 0x608
    388c:	str	r1, [sp, #0]
    388e:	str	r1, [sp, #16]
    3890:	strh.w	r2, [sp, #12]
    3894:	bge.n	3860 <_vasnprintf_r+0x1c>
    3896:	movs	r3, #139	; 0x8b
    3898:	str	r3, [r0, #0]
    389a:	movs	r0, #0
    389c:	b.n	3884 <_vasnprintf_r+0x40>
    389e:	movs	r0, #0
    38a0:	b.n	3884 <_vasnprintf_r+0x40>
    38a2:	nop

000038a4 <_calloc_r>:
    38a4:	push	{r4, lr}
    38a6:	mul.w	r1, r2, r1
    38aa:	bl	21b4 <_malloc_r>
    38ae:	mov	r4, r0
    38b0:	cbz	r0, 38ea <_calloc_r+0x46>
    38b2:	ldr.w	r2, [r0, #-4]
    38b6:	bic.w	r2, r2, #3
    38ba:	subs	r2, #4
    38bc:	cmp	r2, #36	; 0x24
    38be:	bhi.n	38f2 <_calloc_r+0x4e>
    38c0:	cmp	r2, #19
    38c2:	bls.n	38ee <_calloc_r+0x4a>
    38c4:	movs	r3, #0
    38c6:	cmp	r2, #27
    38c8:	str	r3, [r0, #0]
    38ca:	str	r3, [r0, #4]
    38cc:	bls.n	38fc <_calloc_r+0x58>
    38ce:	cmp	r2, #36	; 0x24
    38d0:	str	r3, [r0, #8]
    38d2:	str	r3, [r0, #12]
    38d4:	iteee	ne
    38d6:	addne.w	r2, r0, #16
    38da:	streq	r3, [r0, #16]
    38dc:	streq	r3, [r0, #20]
    38de:	addeq.w	r2, r0, #24
    38e2:	movs	r3, #0
    38e4:	str	r3, [r2, #0]
    38e6:	str	r3, [r2, #4]
    38e8:	str	r3, [r2, #8]
    38ea:	mov	r0, r4
    38ec:	pop	{r4, pc}
    38ee:	mov	r2, r0
    38f0:	b.n	38e2 <_calloc_r+0x3e>
    38f2:	movs	r1, #0
    38f4:	bl	2818 <memset>
    38f8:	mov	r0, r4
    38fa:	pop	{r4, pc}
    38fc:	add.w	r2, r0, #8
    3900:	b.n	38e2 <_calloc_r+0x3e>
    3902:	nop

00003904 <quorem>:
    3904:	ldr	r2, [r0, #16]
    3906:	ldr	r3, [r1, #16]
    3908:	cmp	r3, r2
    390a:	bgt.w	3a28 <quorem+0x124>
    390e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3912:	add.w	r8, r3, #4294967295
    3916:	add.w	r7, r1, #20
    391a:	add.w	fp, r0, #20
    391e:	ldr.w	r2, [r7, r8, lsl #2]
    3922:	ldr.w	r3, [fp, r8, lsl #2]
    3926:	mov.w	r4, r8, lsl #2
    392a:	sub	sp, #12
    392c:	adds	r2, #1
    392e:	udiv	r9, r3, r2
    3932:	add.w	r3, fp, r4
    3936:	str	r4, [sp, #0]
    3938:	add.w	sl, r7, r4
    393c:	str	r3, [sp, #4]
    393e:	cmp.w	r9, #0
    3942:	beq.n	39b8 <quorem+0xb4>
    3944:	movs	r5, #0
    3946:	mov	ip, r7
    3948:	mov	lr, fp
    394a:	mov	r3, r5
    394c:	ldr.w	r6, [ip], #4
    3950:	ldr.w	r2, [lr]
    3954:	uxth	r4, r6
    3956:	mla	r5, r9, r4, r5
    395a:	lsrs	r6, r6, #16
    395c:	lsrs	r4, r5, #16
    395e:	mla	r4, r9, r6, r4
    3962:	uxth	r5, r5
    3964:	subs	r3, r3, r5
    3966:	uxth	r6, r4
    3968:	uxtah	r3, r3, r2
    396c:	rsb	r6, r6, r2, lsr #16
    3970:	add.w	r6, r6, r3, asr #16
    3974:	uxth	r3, r3
    3976:	orr.w	r3, r3, r6, lsl #16
    397a:	cmp	sl, ip
    397c:	str.w	r3, [lr], #4
    3980:	mov.w	r5, r4, lsr #16
    3984:	mov.w	r3, r6, asr #16
    3988:	bcs.n	394c <quorem+0x48>
    398a:	ldr	r3, [sp, #0]
    398c:	ldr.w	r3, [fp, r3]
    3990:	cbnz	r3, 39b8 <quorem+0xb4>
    3992:	ldr	r4, [sp, #4]
    3994:	subs	r3, r4, #4
    3996:	cmp	fp, r3
    3998:	bcs.n	39b4 <quorem+0xb0>
    399a:	ldr.w	r3, [r4, #-4]
    399e:	cbnz	r3, 39b4 <quorem+0xb0>
    39a0:	sub.w	r3, r4, #8
    39a4:	b.n	39ac <quorem+0xa8>
    39a6:	ldr	r2, [r3, #0]
    39a8:	subs	r3, #4
    39aa:	cbnz	r2, 39b4 <quorem+0xb0>
    39ac:	cmp	fp, r3
    39ae:	add.w	r8, r8, #4294967295
    39b2:	bcc.n	39a6 <quorem+0xa2>
    39b4:	str.w	r8, [r0, #16]
    39b8:	mov	r4, r0
    39ba:	bl	3630 <__mcmp>
    39be:	cmp	r0, #0
    39c0:	blt.n	3a20 <quorem+0x11c>
    39c2:	add.w	r9, r9, #1
    39c6:	mov	r5, fp
    39c8:	movs	r3, #0
    39ca:	ldr.w	r1, [r7], #4
    39ce:	ldr	r0, [r5, #0]
    39d0:	uxth	r2, r1
    39d2:	subs	r2, r3, r2
    39d4:	lsrs	r1, r1, #16
    39d6:	uxtah	r2, r2, r0
    39da:	rsb	r3, r1, r0, lsr #16
    39de:	add.w	r3, r3, r2, asr #16
    39e2:	uxth	r1, r2
    39e4:	orr.w	r1, r1, r3, lsl #16
    39e8:	cmp	sl, r7
    39ea:	str.w	r1, [r5], #4
    39ee:	mov.w	r3, r3, asr #16
    39f2:	bcs.n	39ca <quorem+0xc6>
    39f4:	ldr.w	r2, [fp, r8, lsl #2]
    39f8:	add.w	r3, fp, r8, lsl #2
    39fc:	cbnz	r2, 3a20 <quorem+0x11c>
    39fe:	subs	r2, r3, #4
    3a00:	cmp	fp, r2
    3a02:	bcs.n	3a1c <quorem+0x118>
    3a04:	ldr.w	r2, [r3, #-4]
    3a08:	cbnz	r2, 3a1c <quorem+0x118>
    3a0a:	subs	r3, #8
    3a0c:	b.n	3a14 <quorem+0x110>
    3a0e:	ldr	r2, [r3, #0]
    3a10:	subs	r3, #4
    3a12:	cbnz	r2, 3a1c <quorem+0x118>
    3a14:	cmp	fp, r3
    3a16:	add.w	r8, r8, #4294967295
    3a1a:	bcc.n	3a0e <quorem+0x10a>
    3a1c:	str.w	r8, [r4, #16]
    3a20:	mov	r0, r9
    3a22:	add	sp, #12
    3a24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a28:	movs	r0, #0
    3a2a:	bx	lr
    3a2c:	movs	r0, r0
	...

00003a30 <_dtoa_r>:
    3a30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a34:	vmov	r6, r7, d0
    3a38:	sub	sp, #76	; 0x4c
    3a3a:	ldr	r5, [r0, #64]	; 0x40
    3a3c:	str	r1, [sp, #4]
    3a3e:	mov	r4, r0
    3a40:	mov	r8, r2
    3a42:	str	r3, [sp, #16]
    3a44:	vmov	sl, s0
    3a48:	mov	fp, r7
    3a4a:	cbz	r5, 3a60 <_dtoa_r+0x30>
    3a4c:	ldr	r2, [r0, #68]	; 0x44
    3a4e:	str	r2, [r5, #4]
    3a50:	movs	r3, #1
    3a52:	lsls	r3, r2
    3a54:	str	r3, [r5, #8]
    3a56:	mov	r1, r5
    3a58:	bl	326c <_Bfree>
    3a5c:	movs	r3, #0
    3a5e:	str	r3, [r4, #64]	; 0x40
    3a60:	cmp.w	fp, #0
    3a64:	mov	r6, fp
    3a66:	blt.n	3ad2 <_dtoa_r+0xa2>
    3a68:	ldr	r2, [sp, #112]	; 0x70
    3a6a:	movs	r3, #0
    3a6c:	str	r3, [r2, #0]
    3a6e:	ldr	r3, [pc, #784]	; (3d80 <_dtoa_r+0x350>)
    3a70:	mov	r2, r3
    3a72:	ands	r3, r6
    3a74:	cmp	r3, r2
    3a76:	beq.n	3aa4 <_dtoa_r+0x74>
    3a78:	vmov	d7, sl, fp
    3a7c:	vcmp.f64	d7, #0.0
    3a80:	vmrs	APSR_nzcv, fpscr
    3a84:	strd	sl, fp, [sp, #8]
    3a88:	bne.n	3ae0 <_dtoa_r+0xb0>
    3a8a:	ldr	r2, [sp, #16]
    3a8c:	movs	r3, #1
    3a8e:	str	r3, [r2, #0]
    3a90:	ldr	r3, [sp, #116]	; 0x74
    3a92:	cmp	r3, #0
    3a94:	beq.w	3c06 <_dtoa_r+0x1d6>
    3a98:	ldr	r0, [pc, #744]	; (3d84 <_dtoa_r+0x354>)
    3a9a:	str	r0, [r3, #0]
    3a9c:	subs	r0, #1
    3a9e:	add	sp, #76	; 0x4c
    3aa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3aa4:	ldr	r2, [sp, #16]
    3aa6:	movw	r3, #9999	; 0x270f
    3aaa:	str	r3, [r2, #0]
    3aac:	cmp.w	sl, #0
    3ab0:	beq.w	3bd8 <_dtoa_r+0x1a8>
    3ab4:	ldr	r0, [pc, #720]	; (3d88 <_dtoa_r+0x358>)
    3ab6:	ldr	r3, [sp, #116]	; 0x74
    3ab8:	cmp	r3, #0
    3aba:	beq.n	3a9e <_dtoa_r+0x6e>
    3abc:	ldrb	r3, [r0, #3]
    3abe:	cmp	r3, #0
    3ac0:	beq.w	3c0a <_dtoa_r+0x1da>
    3ac4:	add.w	r3, r0, #8
    3ac8:	ldr	r2, [sp, #116]	; 0x74
    3aca:	str	r3, [r2, #0]
    3acc:	add	sp, #76	; 0x4c
    3ace:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ad2:	ldr	r2, [sp, #112]	; 0x70
    3ad4:	movs	r3, #1
    3ad6:	bic.w	r6, fp, #2147483648	; 0x80000000
    3ada:	str	r3, [r2, #0]
    3adc:	mov	fp, r6
    3ade:	b.n	3a6e <_dtoa_r+0x3e>
    3ae0:	add	r1, sp, #68	; 0x44
    3ae2:	add	r2, sp, #64	; 0x40
    3ae4:	vldr	d0, [sp, #8]
    3ae8:	mov	r0, r4
    3aea:	bl	3788 <__d2b>
    3aee:	lsrs	r1, r6, #20
    3af0:	str	r0, [sp, #28]
    3af2:	bne.n	3bea <_dtoa_r+0x1ba>
    3af4:	ldr	r0, [sp, #64]	; 0x40
    3af6:	ldr	r1, [sp, #68]	; 0x44
    3af8:	add	r1, r0
    3afa:	addw	r3, r1, #1074	; 0x432
    3afe:	cmp	r3, #32
    3b00:	ble.w	3f86 <_dtoa_r+0x556>
    3b04:	rsb	r3, r3, #64	; 0x40
    3b08:	addw	r2, r1, #1042	; 0x412
    3b0c:	lsls	r6, r3
    3b0e:	lsr.w	r3, sl, r2
    3b12:	orrs	r3, r6
    3b14:	vmov	s15, r3
    3b18:	vcvt.f64.u32	d7, s15
    3b1c:	movs	r5, #1
    3b1e:	vmov	r2, r3, d7
    3b22:	subs	r1, #1
    3b24:	sub.w	r3, r3, #32505856	; 0x1f00000
    3b28:	str	r5, [sp, #40]	; 0x28
    3b2a:	vmov	d7, r2, r3
    3b2e:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    3b32:	vldr	d4, [pc, #564]	; 3d68 <_dtoa_r+0x338>
    3b36:	vsub.f64	d6, d7, d6
    3b3a:	vldr	d7, [pc, #564]	; 3d70 <_dtoa_r+0x340>
    3b3e:	vldr	d5, [pc, #568]	; 3d78 <_dtoa_r+0x348>
    3b42:	vfma.f64	d7, d6, d4
    3b46:	vmov	s13, r1
    3b4a:	vcvt.f64.s32	d6, s13
    3b4e:	vfma.f64	d7, d6, d5
    3b52:	vcvt.s32.f64	s13, d7
    3b56:	vcmpe.f64	d7, #0.0
    3b5a:	vmrs	APSR_nzcv, fpscr
    3b5e:	vstr	s13, [sp, #8]
    3b62:	bmi.w	3d9e <_dtoa_r+0x36e>
    3b66:	ldr	r5, [sp, #8]
    3b68:	cmp	r5, #22
    3b6a:	bhi.w	3d98 <_dtoa_r+0x368>
    3b6e:	ldr	r3, [pc, #540]	; (3d8c <_dtoa_r+0x35c>)
    3b70:	add.w	r3, r3, r5, lsl #3
    3b74:	vldr	d7, [r3]
    3b78:	vmov	d6, sl, fp
    3b7c:	vcmpe.f64	d7, d6
    3b80:	vmrs	APSR_nzcv, fpscr
    3b84:	ble.w	3f94 <_dtoa_r+0x564>
    3b88:	subs	r3, r5, #1
    3b8a:	str	r3, [sp, #8]
    3b8c:	movs	r3, #0
    3b8e:	str	r3, [sp, #48]	; 0x30
    3b90:	subs	r1, r0, r1
    3b92:	subs.w	r9, r1, #1
    3b96:	bmi.w	3dc8 <_dtoa_r+0x398>
    3b9a:	movs	r3, #0
    3b9c:	str	r3, [sp, #24]
    3b9e:	ldr	r3, [sp, #8]
    3ba0:	cmp	r3, #0
    3ba2:	blt.w	3db6 <_dtoa_r+0x386>
    3ba6:	add	r9, r3
    3ba8:	str	r3, [sp, #44]	; 0x2c
    3baa:	movs	r3, #0
    3bac:	str	r3, [sp, #20]
    3bae:	ldr	r3, [sp, #4]
    3bb0:	cmp	r3, #9
    3bb2:	bhi.n	3c0e <_dtoa_r+0x1de>
    3bb4:	cmp	r3, #5
    3bb6:	ble.w	4678 <_dtoa_r+0xc48>
    3bba:	subs	r3, #4
    3bbc:	str	r3, [sp, #4]
    3bbe:	movs	r3, #0
    3bc0:	str	r3, [sp, #56]	; 0x38
    3bc2:	ldr	r3, [sp, #4]
    3bc4:	subs	r3, #2
    3bc6:	cmp	r3, #3
    3bc8:	bhi.w	468a <_dtoa_r+0xc5a>
    3bcc:	tbh	[pc, r3, lsl #1]
    3bd0:	.word	0x01e502a9
    3bd4:	.word	0x03c802b5
    3bd8:	ldr	r3, [pc, #428]	; (3d88 <_dtoa_r+0x358>)
    3bda:	ldr	r2, [pc, #436]	; (3d90 <_dtoa_r+0x360>)
    3bdc:	ubfx	r0, r6, #0, #20
    3be0:	cmp	r0, #0
    3be2:	ite	ne
    3be4:	movne	r0, r3
    3be6:	moveq	r0, r2
    3be8:	b.n	3ab6 <_dtoa_r+0x86>
    3bea:	ldrd	r2, r3, [sp, #8]
    3bee:	ubfx	r0, r3, #0, #20
    3bf2:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    3bf6:	movs	r5, #0
    3bf8:	subw	r1, r1, #1023	; 0x3ff
    3bfc:	orr.w	r3, r3, #3145728	; 0x300000
    3c00:	ldr	r0, [sp, #64]	; 0x40
    3c02:	str	r5, [sp, #40]	; 0x28
    3c04:	b.n	3b2a <_dtoa_r+0xfa>
    3c06:	ldr	r0, [pc, #396]	; (3d94 <_dtoa_r+0x364>)
    3c08:	b.n	3a9e <_dtoa_r+0x6e>
    3c0a:	adds	r3, r0, #3
    3c0c:	b.n	3ac8 <_dtoa_r+0x98>
    3c0e:	movs	r1, #0
    3c10:	str	r1, [r4, #68]	; 0x44
    3c12:	mov	r0, r4
    3c14:	mov	r8, r1
    3c16:	str	r1, [sp, #4]
    3c18:	bl	3220 <_Balloc>
    3c1c:	mov.w	r7, #4294967295
    3c20:	movs	r3, #1
    3c22:	str	r0, [sp, #32]
    3c24:	str	r0, [r4, #64]	; 0x40
    3c26:	str	r7, [sp, #52]	; 0x34
    3c28:	str	r3, [sp, #36]	; 0x24
    3c2a:	ldr	r3, [sp, #68]	; 0x44
    3c2c:	cmp	r3, #0
    3c2e:	blt.n	3d26 <_dtoa_r+0x2f6>
    3c30:	ldr	r2, [sp, #8]
    3c32:	cmp	r2, #14
    3c34:	bgt.n	3d26 <_dtoa_r+0x2f6>
    3c36:	ldr	r3, [pc, #340]	; (3d8c <_dtoa_r+0x35c>)
    3c38:	cmp.w	r8, #0
    3c3c:	add.w	r3, r3, r2, lsl #3
    3c40:	vldr	d4, [r3]
    3c44:	blt.w	4150 <_dtoa_r+0x720>
    3c48:	vneg.f64	d2, d4
    3c4c:	vmov	d7, sl, fp
    3c50:	vdiv.f64	d6, d7, d4
    3c54:	vcvt.s32.f64	s12, d6
    3c58:	ldr	r2, [sp, #32]
    3c5a:	vmov	r3, s12
    3c5e:	cmp	r7, #1
    3c60:	add.w	r3, r3, #48	; 0x30
    3c64:	vcvt.f64.s32	d5, s12
    3c68:	add.w	fp, r2, #1
    3c6c:	strb	r3, [r2, #0]
    3c6e:	vfma.f64	d7, d2, d5
    3c72:	beq.n	3cba <_dtoa_r+0x28a>
    3c74:	vmov.f64	d3, #36	; 0x41200000  10.0
    3c78:	vmul.f64	d7, d7, d3
    3c7c:	vcmp.f64	d7, #0.0
    3c80:	vmrs	APSR_nzcv, fpscr
    3c84:	beq.n	3cfc <_dtoa_r+0x2cc>
    3c86:	ldr	r2, [sp, #32]
    3c88:	b.n	3c98 <_dtoa_r+0x268>
    3c8a:	vmul.f64	d7, d7, d3
    3c8e:	vcmp.f64	d7, #0.0
    3c92:	vmrs	APSR_nzcv, fpscr
    3c96:	beq.n	3cfc <_dtoa_r+0x2cc>
    3c98:	vdiv.f64	d6, d7, d4
    3c9c:	vcvt.s32.f64	s12, d6
    3ca0:	vmov	r3, s12
    3ca4:	adds	r3, #48	; 0x30
    3ca6:	strb.w	r3, [fp], #1
    3caa:	rsb	r3, r2, fp
    3cae:	cmp	r3, r7
    3cb0:	vcvt.f64.s32	d5, s12
    3cb4:	vfma.f64	d7, d2, d5
    3cb8:	bne.n	3c8a <_dtoa_r+0x25a>
    3cba:	vadd.f64	d7, d7, d7
    3cbe:	vcmpe.f64	d4, d7
    3cc2:	vmrs	APSR_nzcv, fpscr
    3cc6:	bmi.n	3cda <_dtoa_r+0x2aa>
    3cc8:	vcmp.f64	d4, d7
    3ccc:	vmrs	APSR_nzcv, fpscr
    3cd0:	bne.n	3cfc <_dtoa_r+0x2cc>
    3cd2:	vmov	r3, s12
    3cd6:	lsls	r3, r3, #31
    3cd8:	bpl.n	3cfc <_dtoa_r+0x2cc>
    3cda:	ldrb.w	r0, [fp, #-1]
    3cde:	ldr	r2, [sp, #32]
    3ce0:	add.w	r3, fp, #4294967295
    3ce4:	b.n	3cf0 <_dtoa_r+0x2c0>
    3ce6:	cmp	r2, r3
    3ce8:	beq.w	44b6 <_dtoa_r+0xa86>
    3cec:	ldrb.w	r0, [r3, #-1]!
    3cf0:	cmp	r0, #57	; 0x39
    3cf2:	add.w	fp, r3, #1
    3cf6:	beq.n	3ce6 <_dtoa_r+0x2b6>
    3cf8:	adds	r0, #1
    3cfa:	strb	r0, [r3, #0]
    3cfc:	ldr	r1, [sp, #28]
    3cfe:	mov	r0, r4
    3d00:	bl	326c <_Bfree>
    3d04:	movs	r2, #0
    3d06:	ldr	r3, [sp, #8]
    3d08:	strb.w	r2, [fp]
    3d0c:	ldr	r2, [sp, #16]
    3d0e:	adds	r3, #1
    3d10:	str	r3, [r2, #0]
    3d12:	ldr	r3, [sp, #116]	; 0x74
    3d14:	cmp	r3, #0
    3d16:	beq.w	43e6 <_dtoa_r+0x9b6>
    3d1a:	ldr	r0, [sp, #32]
    3d1c:	str.w	fp, [r3]
    3d20:	add	sp, #76	; 0x4c
    3d22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d26:	ldr	r2, [sp, #36]	; 0x24
    3d28:	cmp	r2, #0
    3d2a:	beq.n	3dd4 <_dtoa_r+0x3a4>
    3d2c:	ldr	r2, [sp, #4]
    3d2e:	cmp	r2, #1
    3d30:	ble.w	4190 <_dtoa_r+0x760>
    3d34:	ldr	r1, [sp, #20]
    3d36:	subs	r2, r7, #1
    3d38:	cmp	r1, r2
    3d3a:	blt.w	43ec <_dtoa_r+0x9bc>
    3d3e:	subs	r3, r1, r2
    3d40:	str	r3, [sp, #56]	; 0x38
    3d42:	cmp	r7, #0
    3d44:	ldr	r3, [sp, #24]
    3d46:	blt.w	4592 <_dtoa_r+0xb62>
    3d4a:	str	r3, [sp, #40]	; 0x28
    3d4c:	mov	r3, r7
    3d4e:	ldr	r2, [sp, #24]
    3d50:	movs	r1, #1
    3d52:	add	r2, r3
    3d54:	mov	r0, r4
    3d56:	str	r2, [sp, #24]
    3d58:	add	r9, r3
    3d5a:	bl	339c <__i2b>
    3d5e:	mov	r6, r0
    3d60:	b.n	3dde <_dtoa_r+0x3ae>
    3d62:	nop
    3d64:	nop.w
    3d68:	.word	0x636f4361
    3d6c:	.word	0x3fd287a7
    3d70:	.word	0x8b60c8b3
    3d74:	.word	0x3fc68a28
    3d78:	.word	0x509f79fb
    3d7c:	.word	0x3fd34413
    3d80:	.word	0x7ff00000
    3d84:	.word	0x2000054d
    3d88:	.word	0x20000548
    3d8c:	.word	0x20000440
    3d90:	.word	0x2000053c
    3d94:	.word	0x2000054c
    3d98:	movs	r3, #1
    3d9a:	str	r3, [sp, #48]	; 0x30
    3d9c:	b.n	3b90 <_dtoa_r+0x160>
    3d9e:	vcvt.f64.s32	d6, s13
    3da2:	vcmp.f64	d7, d6
    3da6:	vmrs	APSR_nzcv, fpscr
    3daa:	beq.w	3b66 <_dtoa_r+0x136>
    3dae:	ldr	r3, [sp, #8]
    3db0:	subs	r3, #1
    3db2:	str	r3, [sp, #8]
    3db4:	b.n	3b66 <_dtoa_r+0x136>
    3db6:	ldr	r2, [sp, #24]
    3db8:	ldr	r3, [sp, #8]
    3dba:	subs	r2, r2, r3
    3dbc:	negs	r3, r3
    3dbe:	str	r3, [sp, #20]
    3dc0:	movs	r3, #0
    3dc2:	str	r2, [sp, #24]
    3dc4:	str	r3, [sp, #44]	; 0x2c
    3dc6:	b.n	3bae <_dtoa_r+0x17e>
    3dc8:	rsb	r3, r9, #0
    3dcc:	str	r3, [sp, #24]
    3dce:	mov.w	r9, #0
    3dd2:	b.n	3b9e <_dtoa_r+0x16e>
    3dd4:	ldr	r3, [sp, #20]
    3dd6:	str	r3, [sp, #56]	; 0x38
    3dd8:	ldr	r6, [sp, #36]	; 0x24
    3dda:	ldr	r3, [sp, #24]
    3ddc:	str	r3, [sp, #40]	; 0x28
    3dde:	ldr	r1, [sp, #40]	; 0x28
    3de0:	mov	r3, r1
    3de2:	cbz	r1, 3dfe <_dtoa_r+0x3ce>
    3de4:	cmp.w	r9, #0
    3de8:	ble.n	3dfe <_dtoa_r+0x3ce>
    3dea:	cmp	r1, r9
    3dec:	ldr	r2, [sp, #24]
    3dee:	it	ge
    3df0:	movge	r3, r9
    3df2:	subs	r2, r2, r3
    3df4:	str	r2, [sp, #24]
    3df6:	subs	r2, r1, r3
    3df8:	str	r2, [sp, #40]	; 0x28
    3dfa:	rsb	r9, r3, r9
    3dfe:	ldr	r3, [sp, #20]
    3e00:	cmp	r3, #0
    3e02:	ble.w	4306 <_dtoa_r+0x8d6>
    3e06:	ldr	r2, [sp, #36]	; 0x24
    3e08:	cmp	r2, #0
    3e0a:	beq.w	4142 <_dtoa_r+0x712>
    3e0e:	ldr	r2, [sp, #56]	; 0x38
    3e10:	cmp	r2, #0
    3e12:	beq.w	4142 <_dtoa_r+0x712>
    3e16:	mov	r1, r6
    3e18:	mov	r0, r4
    3e1a:	bl	34e0 <__pow5mult>
    3e1e:	ldr	r2, [sp, #28]
    3e20:	mov	r1, r0
    3e22:	mov	r6, r0
    3e24:	mov	r0, r4
    3e26:	bl	33b0 <__multiply>
    3e2a:	ldr	r1, [sp, #28]
    3e2c:	mov	r5, r0
    3e2e:	mov	r0, r4
    3e30:	bl	326c <_Bfree>
    3e34:	ldr	r3, [sp, #20]
    3e36:	ldr	r2, [sp, #56]	; 0x38
    3e38:	subs	r3, r3, r2
    3e3a:	str	r3, [sp, #20]
    3e3c:	bne.w	4140 <_dtoa_r+0x710>
    3e40:	movs	r1, #1
    3e42:	mov	r0, r4
    3e44:	bl	339c <__i2b>
    3e48:	ldr	r3, [sp, #44]	; 0x2c
    3e4a:	str	r0, [sp, #20]
    3e4c:	cmp	r3, #0
    3e4e:	beq.w	41aa <_dtoa_r+0x77a>
    3e52:	mov	r1, r0
    3e54:	mov	r2, r3
    3e56:	mov	r0, r4
    3e58:	bl	34e0 <__pow5mult>
    3e5c:	ldr	r3, [sp, #4]
    3e5e:	str	r0, [sp, #20]
    3e60:	cmp	r3, #1
    3e62:	ble.w	4366 <_dtoa_r+0x936>
    3e66:	movs	r3, #0
    3e68:	str	r3, [sp, #28]
    3e6a:	ldr	r2, [sp, #20]
    3e6c:	ldr	r3, [r2, #16]
    3e6e:	add.w	r3, r2, r3, lsl #2
    3e72:	ldr	r0, [r3, #16]
    3e74:	bl	3300 <__hi0bits>
    3e78:	rsb	r0, r0, #32
    3e7c:	add	r0, r9
    3e7e:	ands.w	r0, r0, #31
    3e82:	beq.w	41a6 <_dtoa_r+0x776>
    3e86:	rsb	r3, r0, #32
    3e8a:	cmp	r3, #4
    3e8c:	ble.w	4680 <_dtoa_r+0xc50>
    3e90:	rsb	r0, r0, #28
    3e94:	ldr	r3, [sp, #24]
    3e96:	add	r3, r0
    3e98:	str	r3, [sp, #24]
    3e9a:	ldr	r3, [sp, #40]	; 0x28
    3e9c:	add	r3, r0
    3e9e:	str	r3, [sp, #40]	; 0x28
    3ea0:	add	r9, r0
    3ea2:	ldr	r3, [sp, #24]
    3ea4:	cmp	r3, #0
    3ea6:	ble.n	3eb4 <_dtoa_r+0x484>
    3ea8:	mov	r1, r5
    3eaa:	mov	r2, r3
    3eac:	mov	r0, r4
    3eae:	bl	3580 <__lshift>
    3eb2:	mov	r5, r0
    3eb4:	cmp.w	r9, #0
    3eb8:	ble.n	3ec6 <_dtoa_r+0x496>
    3eba:	mov	r2, r9
    3ebc:	ldr	r1, [sp, #20]
    3ebe:	mov	r0, r4
    3ec0:	bl	3580 <__lshift>
    3ec4:	str	r0, [sp, #20]
    3ec6:	ldr	r3, [sp, #48]	; 0x30
    3ec8:	cmp	r3, #0
    3eca:	bne.w	42d0 <_dtoa_r+0x8a0>
    3ece:	cmp	r7, #0
    3ed0:	ble.w	4314 <_dtoa_r+0x8e4>
    3ed4:	ldr	r3, [sp, #36]	; 0x24
    3ed6:	cmp	r3, #0
    3ed8:	bne.w	41d2 <_dtoa_r+0x7a2>
    3edc:	ldr.w	fp, [sp, #32]
    3ee0:	ldr.w	sl, [sp, #20]
    3ee4:	mov	r8, fp
    3ee6:	b.n	3eee <_dtoa_r+0x4be>
    3ee8:	bl	3280 <__multadd>
    3eec:	mov	r5, r0
    3eee:	mov	r1, sl
    3ef0:	mov	r0, r5
    3ef2:	bl	3904 <quorem>
    3ef6:	add.w	r9, r0, #48	; 0x30
    3efa:	strb.w	r9, [r8], #1
    3efe:	rsb	r3, fp, r8
    3f02:	cmp	r3, r7
    3f04:	mov.w	r2, #10
    3f08:	mov.w	r3, #0
    3f0c:	mov	r1, r5
    3f0e:	mov	r0, r4
    3f10:	blt.n	3ee8 <_dtoa_r+0x4b8>
    3f12:	ldr	r3, [sp, #32]
    3f14:	cmp	r7, #1
    3f16:	ite	ge
    3f18:	addge	r3, r3, r7
    3f1a:	addlt	r3, #1
    3f1c:	mov	fp, r3
    3f1e:	mov.w	sl, #0
    3f22:	mov	r1, r5
    3f24:	movs	r2, #1
    3f26:	mov	r0, r4
    3f28:	bl	3580 <__lshift>
    3f2c:	ldr	r1, [sp, #20]
    3f2e:	str	r0, [sp, #28]
    3f30:	bl	3630 <__mcmp>
    3f34:	cmp	r0, #0
    3f36:	ble.w	4452 <_dtoa_r+0xa22>
    3f3a:	ldrb.w	r2, [fp, #-1]
    3f3e:	ldr	r1, [sp, #32]
    3f40:	add.w	r3, fp, #4294967295
    3f44:	b.n	3f50 <_dtoa_r+0x520>
    3f46:	cmp	r3, r1
    3f48:	beq.w	4352 <_dtoa_r+0x922>
    3f4c:	ldrb.w	r2, [r3, #-1]!
    3f50:	cmp	r2, #57	; 0x39
    3f52:	add.w	fp, r3, #1
    3f56:	beq.n	3f46 <_dtoa_r+0x516>
    3f58:	adds	r2, #1
    3f5a:	strb	r2, [r3, #0]
    3f5c:	ldr	r1, [sp, #20]
    3f5e:	mov	r0, r4
    3f60:	bl	326c <_Bfree>
    3f64:	cmp	r6, #0
    3f66:	beq.w	3cfc <_dtoa_r+0x2cc>
    3f6a:	cmp.w	sl, #0
    3f6e:	beq.n	3f7c <_dtoa_r+0x54c>
    3f70:	cmp	sl, r6
    3f72:	beq.n	3f7c <_dtoa_r+0x54c>
    3f74:	mov	r1, sl
    3f76:	mov	r0, r4
    3f78:	bl	326c <_Bfree>
    3f7c:	mov	r1, r6
    3f7e:	mov	r0, r4
    3f80:	bl	326c <_Bfree>
    3f84:	b.n	3cfc <_dtoa_r+0x2cc>
    3f86:	rsb	r3, r3, #32
    3f8a:	lsl.w	r3, sl, r3
    3f8e:	vmov	s15, r3
    3f92:	b.n	3b18 <_dtoa_r+0xe8>
    3f94:	movs	r3, #0
    3f96:	str	r3, [sp, #48]	; 0x30
    3f98:	b.n	3b90 <_dtoa_r+0x160>
    3f9a:	movs	r3, #0
    3f9c:	str	r3, [sp, #36]	; 0x24
    3f9e:	ldr	r3, [sp, #8]
    3fa0:	add	r3, r8
    3fa2:	adds	r7, r3, #1
    3fa4:	cmp	r7, #0
    3fa6:	str	r3, [sp, #52]	; 0x34
    3fa8:	ble.w	4406 <_dtoa_r+0x9d6>
    3fac:	mov	r6, r7
    3fae:	mov	r5, r7
    3fb0:	movs	r1, #0
    3fb2:	cmp	r6, #23
    3fb4:	str	r1, [r4, #68]	; 0x44
    3fb6:	bls.n	3fce <_dtoa_r+0x59e>
    3fb8:	movs	r2, #1
    3fba:	movs	r3, #4
    3fbc:	lsls	r3, r3, #1
    3fbe:	add.w	r0, r3, #20
    3fc2:	cmp	r0, r6
    3fc4:	mov	r1, r2
    3fc6:	add.w	r2, r2, #1
    3fca:	bls.n	3fbc <_dtoa_r+0x58c>
    3fcc:	str	r1, [r4, #68]	; 0x44
    3fce:	mov	r0, r4
    3fd0:	bl	3220 <_Balloc>
    3fd4:	cmp	r5, #14
    3fd6:	str	r0, [sp, #32]
    3fd8:	str	r0, [r4, #64]	; 0x40
    3fda:	bhi.w	3c2a <_dtoa_r+0x1fa>
    3fde:	ldr	r3, [sp, #56]	; 0x38
    3fe0:	cmp	r3, #0
    3fe2:	beq.w	3c2a <_dtoa_r+0x1fa>
    3fe6:	ldr	r1, [sp, #8]
    3fe8:	cmp	r1, #0
    3fea:	strd	sl, fp, [sp, #56]	; 0x38
    3fee:	ble.w	4474 <_dtoa_r+0xa44>
    3ff2:	ldr	r3, [pc, #792]	; (430c <_dtoa_r+0x8dc>)
    3ff4:	and.w	r2, r1, #15
    3ff8:	add.w	r2, r3, r2, lsl #3
    3ffc:	asrs	r3, r1, #4
    3ffe:	lsls	r6, r3, #27
    4000:	vldr	d6, [r2]
    4004:	bpl.w	43fe <_dtoa_r+0x9ce>
    4008:	ldr	r2, [pc, #772]	; (4310 <_dtoa_r+0x8e0>)
    400a:	vldr	d7, [r2, #32]
    400e:	vmov	d4, sl, fp
    4012:	and.w	r3, r3, #15
    4016:	movs	r1, #3
    4018:	vdiv.f64	d5, d4, d7
    401c:	cbz	r3, 4036 <_dtoa_r+0x606>
    401e:	ldr	r2, [pc, #752]	; (4310 <_dtoa_r+0x8e0>)
    4020:	lsls	r5, r3, #31
    4022:	bpl.n	402e <_dtoa_r+0x5fe>
    4024:	vldr	d7, [r2]
    4028:	adds	r1, #1
    402a:	vmul.f64	d6, d6, d7
    402e:	asrs	r3, r3, #1
    4030:	add.w	r2, r2, #8
    4034:	bne.n	4020 <_dtoa_r+0x5f0>
    4036:	vdiv.f64	d4, d5, d6
    403a:	ldr	r3, [sp, #48]	; 0x30
    403c:	cbz	r3, 404e <_dtoa_r+0x61e>
    403e:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4042:	vcmpe.f64	d4, d7
    4046:	vmrs	APSR_nzcv, fpscr
    404a:	bmi.w	45bc <_dtoa_r+0xb8c>
    404e:	vmov	s15, r1
    4052:	vcvt.f64.s32	d6, s15
    4056:	vmov.f64	d7, #28	; 0x40e00000  7.0
    405a:	vfma.f64	d7, d6, d4
    405e:	vmov	r2, r3, d7
    4062:	sub.w	r3, r3, #54525952	; 0x3400000
    4066:	cmp	r7, #0
    4068:	beq.w	43b8 <_dtoa_r+0x988>
    406c:	ldr	r6, [sp, #8]
    406e:	mov	r1, r7
    4070:	ldr	r0, [sp, #36]	; 0x24
    4072:	cmp	r0, #0
    4074:	beq.w	4512 <_dtoa_r+0xae2>
    4078:	vmov.f64	d3, #96	; 0x3f000000  0.5
    407c:	ldr	r0, [pc, #652]	; (430c <_dtoa_r+0x8dc>)
    407e:	ldr	r5, [sp, #32]
    4080:	add.w	r0, r0, r1, lsl #3
    4084:	vldr	d6, [r0, #-8]
    4088:	vcvt.s32.f64	s14, d4
    408c:	vdiv.f64	d5, d3, d6
    4090:	vmov	r0, s14
    4094:	vmov	d6, r2, r3
    4098:	adds	r0, #48	; 0x30
    409a:	uxtb	r0, r0
    409c:	vsub.f64	d5, d5, d6
    40a0:	vcvt.f64.s32	d7, s14
    40a4:	vsub.f64	d7, d4, d7
    40a8:	vcmpe.f64	d5, d7
    40ac:	vmrs	APSR_nzcv, fpscr
    40b0:	strb	r0, [r5, #0]
    40b2:	add.w	fp, r5, #1
    40b6:	bgt.n	411e <_dtoa_r+0x6ee>
    40b8:	vmov.f64	d3, #112	; 0x3f800000  1.0
    40bc:	vsub.f64	d6, d3, d7
    40c0:	vcmpe.f64	d5, d6
    40c4:	vmrs	APSR_nzcv, fpscr
    40c8:	bgt.w	4628 <_dtoa_r+0xbf8>
    40cc:	cmp	r1, #1
    40ce:	ble.w	446c <_dtoa_r+0xa3c>
    40d2:	vmov.f64	d4, #36	; 0x41200000  10.0
    40d6:	ldr	r3, [sp, #32]
    40d8:	add	r1, r3
    40da:	b.n	40f2 <_dtoa_r+0x6c2>
    40dc:	vsub.f64	d6, d3, d7
    40e0:	vcmpe.f64	d6, d5
    40e4:	vmrs	APSR_nzcv, fpscr
    40e8:	bmi.w	4628 <_dtoa_r+0xbf8>
    40ec:	cmp	fp, r1
    40ee:	beq.w	446c <_dtoa_r+0xa3c>
    40f2:	vmul.f64	d7, d7, d4
    40f6:	vmul.f64	d5, d5, d4
    40fa:	vcvt.s32.f64	s12, d7
    40fe:	vmov	r3, s12
    4102:	add.w	r0, r3, #48	; 0x30
    4106:	uxtb	r0, r0
    4108:	vcvt.f64.s32	d6, s12
    410c:	vsub.f64	d7, d7, d6
    4110:	vcmpe.f64	d7, d5
    4114:	vmrs	APSR_nzcv, fpscr
    4118:	strb.w	r0, [fp], #1
    411c:	bpl.n	40dc <_dtoa_r+0x6ac>
    411e:	str	r6, [sp, #8]
    4120:	b.n	3cfc <_dtoa_r+0x2cc>
    4122:	movs	r3, #0
    4124:	str	r3, [sp, #36]	; 0x24
    4126:	cmp.w	r8, #0
    412a:	ble.w	440e <_dtoa_r+0x9de>
    412e:	mov	r6, r8
    4130:	mov	r5, r8
    4132:	str.w	r8, [sp, #52]	; 0x34
    4136:	mov	r7, r8
    4138:	b.n	3fb0 <_dtoa_r+0x580>
    413a:	movs	r3, #1
    413c:	str	r3, [sp, #36]	; 0x24
    413e:	b.n	4126 <_dtoa_r+0x6f6>
    4140:	str	r5, [sp, #28]
    4142:	ldr	r2, [sp, #20]
    4144:	ldr	r1, [sp, #28]
    4146:	mov	r0, r4
    4148:	bl	34e0 <__pow5mult>
    414c:	mov	r5, r0
    414e:	b.n	3e40 <_dtoa_r+0x410>
    4150:	cmp	r7, #0
    4152:	bgt.w	3c48 <_dtoa_r+0x218>
    4156:	bne.w	43de <_dtoa_r+0x9ae>
    415a:	vmov.f64	d7, #20	; 0x40a00000  5.0
    415e:	vmul.f64	d4, d4, d7
    4162:	vmov	d7, sl, fp
    4166:	vcmpe.f64	d4, d7
    416a:	vmrs	APSR_nzcv, fpscr
    416e:	mov	r6, r7
    4170:	str	r7, [sp, #20]
    4172:	blt.w	4340 <_dtoa_r+0x910>
    4176:	mvn.w	r3, r8
    417a:	ldr.w	fp, [sp, #32]
    417e:	str	r3, [sp, #8]
    4180:	ldr	r1, [sp, #20]
    4182:	mov	r0, r4
    4184:	bl	326c <_Bfree>
    4188:	cmp	r6, #0
    418a:	beq.w	3cfc <_dtoa_r+0x2cc>
    418e:	b.n	3f7c <_dtoa_r+0x54c>
    4190:	ldr	r2, [sp, #40]	; 0x28
    4192:	cmp	r2, #0
    4194:	beq.w	459c <_dtoa_r+0xb6c>
    4198:	ldr	r2, [sp, #20]
    419a:	str	r2, [sp, #56]	; 0x38
    419c:	ldr	r2, [sp, #24]
    419e:	str	r2, [sp, #40]	; 0x28
    41a0:	addw	r3, r3, #1075	; 0x433
    41a4:	b.n	3d4e <_dtoa_r+0x31e>
    41a6:	movs	r0, #28
    41a8:	b.n	3e94 <_dtoa_r+0x464>
    41aa:	ldr	r3, [sp, #4]
    41ac:	cmp	r3, #1
    41ae:	ble.w	4632 <_dtoa_r+0xc02>
    41b2:	ldr	r3, [sp, #44]	; 0x2c
    41b4:	str	r3, [sp, #28]
    41b6:	movs	r0, #1
    41b8:	b.n	3e7c <_dtoa_r+0x44c>
    41ba:	mov	r1, r6
    41bc:	movs	r3, #0
    41be:	movs	r2, #10
    41c0:	mov	r0, r4
    41c2:	bl	3280 <__multadd>
    41c6:	ldr	r3, [sp, #52]	; 0x34
    41c8:	cmp	r3, #0
    41ca:	mov	r6, r0
    41cc:	ble.w	466a <_dtoa_r+0xc3a>
    41d0:	mov	r7, r3
    41d2:	ldr	r3, [sp, #40]	; 0x28
    41d4:	cmp	r3, #0
    41d6:	ble.n	41e4 <_dtoa_r+0x7b4>
    41d8:	mov	r1, r6
    41da:	mov	r2, r3
    41dc:	mov	r0, r4
    41de:	bl	3580 <__lshift>
    41e2:	mov	r6, r0
    41e4:	ldr	r3, [sp, #28]
    41e6:	cmp	r3, #0
    41e8:	bne.w	44c8 <_dtoa_r+0xa98>
    41ec:	mov	r8, r6
    41ee:	ldr	r3, [sp, #32]
    41f0:	subs	r7, #1
    41f2:	adds	r2, r3, r7
    41f4:	str	r2, [sp, #36]	; 0x24
    41f6:	and.w	r2, sl, #1
    41fa:	str	r2, [sp, #40]	; 0x28
    41fc:	mov	r7, r3
    41fe:	ldr.w	fp, [sp, #20]
    4202:	mov	r0, r5
    4204:	mov	r1, fp
    4206:	bl	3904 <quorem>
    420a:	mov	r1, r6
    420c:	mov	sl, r0
    420e:	mov	r0, r5
    4210:	bl	3630 <__mcmp>
    4214:	mov	r2, r8
    4216:	mov	r1, fp
    4218:	mov	r9, r0
    421a:	mov	r0, r4
    421c:	bl	3674 <__mdiff>
    4220:	ldr	r3, [r0, #12]
    4222:	mov	fp, r0
    4224:	add.w	r2, sl, #48	; 0x30
    4228:	cmp	r3, #0
    422a:	bne.n	42c0 <_dtoa_r+0x890>
    422c:	mov	r1, r0
    422e:	mov	r0, r5
    4230:	str	r2, [sp, #28]
    4232:	bl	3630 <__mcmp>
    4236:	mov	r1, fp
    4238:	str	r0, [sp, #24]
    423a:	mov	r0, r4
    423c:	bl	326c <_Bfree>
    4240:	ldr	r3, [sp, #24]
    4242:	ldr	r2, [sp, #28]
    4244:	cbnz	r3, 4252 <_dtoa_r+0x822>
    4246:	ldr	r1, [sp, #4]
    4248:	cbnz	r1, 4252 <_dtoa_r+0x822>
    424a:	ldr	r1, [sp, #40]	; 0x28
    424c:	cmp	r1, #0
    424e:	beq.w	463c <_dtoa_r+0xc0c>
    4252:	cmp.w	r9, #0
    4256:	blt.w	4418 <_dtoa_r+0x9e8>
    425a:	bne.n	4268 <_dtoa_r+0x838>
    425c:	ldr	r1, [sp, #4]
    425e:	cbnz	r1, 4268 <_dtoa_r+0x838>
    4260:	ldr	r1, [sp, #40]	; 0x28
    4262:	cmp	r1, #0
    4264:	beq.w	4418 <_dtoa_r+0x9e8>
    4268:	cmp	r3, #0
    426a:	bgt.w	44f0 <_dtoa_r+0xac0>
    426e:	ldr	r3, [sp, #36]	; 0x24
    4270:	strb	r2, [r7, #0]
    4272:	add.w	r9, r7, #1
    4276:	cmp	r7, r3
    4278:	mov	fp, r9
    427a:	beq.w	450a <_dtoa_r+0xada>
    427e:	mov	r1, r5
    4280:	movs	r3, #0
    4282:	movs	r2, #10
    4284:	mov	r0, r4
    4286:	bl	3280 <__multadd>
    428a:	cmp	r6, r8
    428c:	mov	r5, r0
    428e:	mov	r1, r6
    4290:	mov.w	r3, #0
    4294:	mov.w	r2, #10
    4298:	mov	r0, r4
    429a:	beq.n	42b4 <_dtoa_r+0x884>
    429c:	bl	3280 <__multadd>
    42a0:	mov	r1, r8
    42a2:	mov	r6, r0
    42a4:	movs	r3, #0
    42a6:	movs	r2, #10
    42a8:	mov	r0, r4
    42aa:	bl	3280 <__multadd>
    42ae:	mov	r7, r9
    42b0:	mov	r8, r0
    42b2:	b.n	41fe <_dtoa_r+0x7ce>
    42b4:	bl	3280 <__multadd>
    42b8:	mov	r7, r9
    42ba:	mov	r6, r0
    42bc:	mov	r8, r0
    42be:	b.n	41fe <_dtoa_r+0x7ce>
    42c0:	mov	r1, r0
    42c2:	mov	r0, r4
    42c4:	str	r2, [sp, #24]
    42c6:	bl	326c <_Bfree>
    42ca:	movs	r3, #1
    42cc:	ldr	r2, [sp, #24]
    42ce:	b.n	4252 <_dtoa_r+0x822>
    42d0:	ldr	r1, [sp, #20]
    42d2:	mov	r0, r5
    42d4:	bl	3630 <__mcmp>
    42d8:	cmp	r0, #0
    42da:	bge.w	3ece <_dtoa_r+0x49e>
    42de:	mov	r1, r5
    42e0:	ldr	r5, [sp, #8]
    42e2:	movs	r3, #0
    42e4:	subs	r5, #1
    42e6:	movs	r2, #10
    42e8:	mov	r0, r4
    42ea:	str	r5, [sp, #8]
    42ec:	bl	3280 <__multadd>
    42f0:	ldr	r3, [sp, #36]	; 0x24
    42f2:	mov	r5, r0
    42f4:	cmp	r3, #0
    42f6:	bne.w	41ba <_dtoa_r+0x78a>
    42fa:	ldr	r3, [sp, #52]	; 0x34
    42fc:	cmp	r3, #0
    42fe:	ble.w	465c <_dtoa_r+0xc2c>
    4302:	mov	r7, r3
    4304:	b.n	3edc <_dtoa_r+0x4ac>
    4306:	ldr	r5, [sp, #28]
    4308:	b.n	3e40 <_dtoa_r+0x410>
    430a:	nop
    430c:	.word	0x20000440
    4310:	.word	0x20000508
    4314:	ldr	r3, [sp, #4]
    4316:	cmp	r3, #2
    4318:	ble.w	3ed4 <_dtoa_r+0x4a4>
    431c:	cmp	r7, #0
    431e:	bne.w	45f4 <_dtoa_r+0xbc4>
    4322:	mov	r3, r7
    4324:	ldr	r1, [sp, #20]
    4326:	movs	r2, #5
    4328:	mov	r0, r4
    432a:	bl	3280 <__multadd>
    432e:	mov	r1, r0
    4330:	str	r0, [sp, #20]
    4332:	mov	r0, r5
    4334:	bl	3630 <__mcmp>
    4338:	cmp	r0, #0
    433a:	str	r5, [sp, #28]
    433c:	ble.w	4176 <_dtoa_r+0x746>
    4340:	ldr	r2, [sp, #8]
    4342:	ldr	r1, [sp, #32]
    4344:	movs	r3, #49	; 0x31
    4346:	adds	r2, #1
    4348:	str	r2, [sp, #8]
    434a:	strb	r3, [r1, #0]
    434c:	add.w	fp, r1, #1
    4350:	b.n	4180 <_dtoa_r+0x750>
    4352:	ldr	r2, [sp, #8]
    4354:	adds	r2, #1
    4356:	str	r2, [sp, #8]
    4358:	ldr	r2, [sp, #32]
    435a:	movs	r3, #49	; 0x31
    435c:	strb	r3, [r2, #0]
    435e:	b.n	3f5c <_dtoa_r+0x52c>
    4360:	movs	r3, #1
    4362:	str	r3, [sp, #36]	; 0x24
    4364:	b.n	3f9e <_dtoa_r+0x56e>
    4366:	cmp.w	sl, #0
    436a:	bne.w	3e66 <_dtoa_r+0x436>
    436e:	ubfx	r3, fp, #0, #20
    4372:	cmp	r3, #0
    4374:	bne.w	45ae <_dtoa_r+0xb7e>
    4378:	bic.w	r3, fp, #2147483648	; 0x80000000
    437c:	lsrs	r3, r3, #20
    437e:	lsls	r3, r3, #20
    4380:	cmp	r3, #0
    4382:	beq.w	462e <_dtoa_r+0xbfe>
    4386:	ldr	r3, [sp, #24]
    4388:	adds	r3, #1
    438a:	str	r3, [sp, #24]
    438c:	movs	r3, #1
    438e:	add.w	r9, r9, #1
    4392:	str	r3, [sp, #28]
    4394:	ldr	r3, [sp, #44]	; 0x2c
    4396:	movs	r0, #1
    4398:	cmp	r3, #0
    439a:	beq.w	3e7c <_dtoa_r+0x44c>
    439e:	b.n	3e6a <_dtoa_r+0x43a>
    43a0:	vmov	s15, r1
    43a4:	vcvt.f64.s32	d6, s15
    43a8:	vmov.f64	d7, #28	; 0x40e00000  7.0
    43ac:	vfma.f64	d7, d4, d6
    43b0:	vmov	r2, r3, d7
    43b4:	sub.w	r3, r3, #54525952	; 0x3400000
    43b8:	vmov	d6, r2, r3
    43bc:	vmov.f64	d7, #20	; 0x40a00000  5.0
    43c0:	vsub.f64	d7, d4, d7
    43c4:	vcmpe.f64	d7, d6
    43c8:	vmrs	APSR_nzcv, fpscr
    43cc:	bgt.w	458a <_dtoa_r+0xb5a>
    43d0:	vneg.f64	d6, d6
    43d4:	vcmpe.f64	d7, d6
    43d8:	vmrs	APSR_nzcv, fpscr
    43dc:	bpl.n	446c <_dtoa_r+0xa3c>
    43de:	movs	r3, #0
    43e0:	str	r3, [sp, #20]
    43e2:	mov	r6, r3
    43e4:	b.n	4176 <_dtoa_r+0x746>
    43e6:	ldr	r0, [sp, #32]
    43e8:	b.w	3a9e <_dtoa_r+0x6e>
    43ec:	ldr	r3, [sp, #20]
    43ee:	ldr	r1, [sp, #44]	; 0x2c
    43f0:	str	r2, [sp, #20]
    43f2:	subs	r3, r2, r3
    43f4:	add	r1, r3
    43f6:	movs	r3, #0
    43f8:	str	r1, [sp, #44]	; 0x2c
    43fa:	str	r3, [sp, #56]	; 0x38
    43fc:	b.n	3d42 <_dtoa_r+0x312>
    43fe:	vldr	d5, [sp, #56]	; 0x38
    4402:	movs	r1, #2
    4404:	b.n	401c <_dtoa_r+0x5ec>
    4406:	mov	r5, r7
    4408:	movs	r1, #0
    440a:	str	r1, [r4, #68]	; 0x44
    440c:	b.n	3fce <_dtoa_r+0x59e>
    440e:	movs	r5, #1
    4410:	str	r5, [sp, #52]	; 0x34
    4412:	mov	r7, r5
    4414:	mov	r8, r5
    4416:	b.n	4408 <_dtoa_r+0x9d8>
    4418:	cmp	r3, #0
    441a:	mov	r9, r2
    441c:	ble.n	4442 <_dtoa_r+0xa12>
    441e:	mov	r1, r5
    4420:	movs	r2, #1
    4422:	mov	r0, r4
    4424:	bl	3580 <__lshift>
    4428:	ldr	r1, [sp, #20]
    442a:	mov	r5, r0
    442c:	bl	3630 <__mcmp>
    4430:	cmp	r0, #0
    4432:	ble.w	464e <_dtoa_r+0xc1e>
    4436:	cmp.w	r9, #57	; 0x39
    443a:	beq.w	45f8 <_dtoa_r+0xbc8>
    443e:	add.w	r9, sl, #49	; 0x31
    4442:	mov	sl, r6
    4444:	strb.w	r9, [r7]
    4448:	add.w	fp, r7, #1
    444c:	mov	r6, r8
    444e:	str	r5, [sp, #28]
    4450:	b.n	3f5c <_dtoa_r+0x52c>
    4452:	bne.n	445e <_dtoa_r+0xa2e>
    4454:	tst.w	r9, #1
    4458:	beq.n	445e <_dtoa_r+0xa2e>
    445a:	b.n	3f3a <_dtoa_r+0x50a>
    445c:	mov	fp, r2
    445e:	ldrb.w	r3, [fp, #-1]
    4462:	cmp	r3, #48	; 0x30
    4464:	add.w	r2, fp, #4294967295
    4468:	beq.n	445c <_dtoa_r+0xa2c>
    446a:	b.n	3f5c <_dtoa_r+0x52c>
    446c:	ldrd	sl, fp, [sp, #56]	; 0x38
    4470:	b.w	3c2a <_dtoa_r+0x1fa>
    4474:	ldr	r3, [sp, #8]
    4476:	negs	r3, r3
    4478:	cmp	r3, #0
    447a:	beq.w	45b4 <_dtoa_r+0xb84>
    447e:	ldr	r2, [pc, #556]	; (46ac <_dtoa_r+0xc7c>)
    4480:	and.w	r1, r3, #15
    4484:	add.w	r2, r2, r1, lsl #3
    4488:	vldr	d7, [r2]
    448c:	vldr	d6, [sp, #56]	; 0x38
    4490:	asrs	r3, r3, #4
    4492:	vmul.f64	d4, d6, d7
    4496:	beq.w	4666 <_dtoa_r+0xc36>
    449a:	ldr	r2, [pc, #532]	; (46b0 <_dtoa_r+0xc80>)
    449c:	movs	r1, #2
    449e:	lsls	r0, r3, #31
    44a0:	bpl.n	44ac <_dtoa_r+0xa7c>
    44a2:	vldr	d7, [r2]
    44a6:	adds	r1, #1
    44a8:	vmul.f64	d4, d4, d7
    44ac:	asrs	r3, r3, #1
    44ae:	add.w	r2, r2, #8
    44b2:	bne.n	449e <_dtoa_r+0xa6e>
    44b4:	b.n	403a <_dtoa_r+0x60a>
    44b6:	ldr	r1, [sp, #32]
    44b8:	movs	r2, #48	; 0x30
    44ba:	strb	r2, [r1, #0]
    44bc:	ldr	r2, [sp, #8]
    44be:	ldrb.w	r0, [fp, #-1]
    44c2:	adds	r2, #1
    44c4:	str	r2, [sp, #8]
    44c6:	b.n	3cf8 <_dtoa_r+0x2c8>
    44c8:	ldr	r1, [r6, #4]
    44ca:	mov	r0, r4
    44cc:	bl	3220 <_Balloc>
    44d0:	ldr	r3, [r6, #16]
    44d2:	adds	r2, r3, #2
    44d4:	mov	r8, r0
    44d6:	lsls	r2, r2, #2
    44d8:	add.w	r1, r6, #12
    44dc:	adds	r0, #12
    44de:	bl	1fac <memcpy>
    44e2:	mov	r1, r8
    44e4:	movs	r2, #1
    44e6:	mov	r0, r4
    44e8:	bl	3580 <__lshift>
    44ec:	mov	r8, r0
    44ee:	b.n	41ee <_dtoa_r+0x7be>
    44f0:	cmp	r2, #57	; 0x39
    44f2:	beq.w	45f8 <_dtoa_r+0xbc8>
    44f6:	add.w	r9, r2, #1
    44fa:	mov	sl, r6
    44fc:	strb.w	r9, [r7]
    4500:	add.w	fp, r7, #1
    4504:	mov	r6, r8
    4506:	str	r5, [sp, #28]
    4508:	b.n	3f5c <_dtoa_r+0x52c>
    450a:	mov	sl, r6
    450c:	mov	r9, r2
    450e:	mov	r6, r8
    4510:	b.n	3f22 <_dtoa_r+0x4f2>
    4512:	ldr	r0, [pc, #408]	; (46ac <_dtoa_r+0xc7c>)
    4514:	vcvt.s32.f64	s12, d4
    4518:	subs	r5, r1, #1
    451a:	add.w	r0, r0, r5, lsl #3
    451e:	vmov	d7, r2, r3
    4522:	vldr	d3, [r0]
    4526:	vmov	r3, s12
    452a:	vmul.f64	d3, d3, d7
    452e:	ldr	r0, [sp, #32]
    4530:	adds	r3, #48	; 0x30
    4532:	cmp	r1, #1
    4534:	vcvt.f64.s32	d6, s12
    4538:	strb	r3, [r0, #0]
    453a:	add.w	fp, r0, #1
    453e:	vsub.f64	d7, d4, d6
    4542:	beq.n	456e <_dtoa_r+0xb3e>
    4544:	vmov.f64	d5, #36	; 0x41200000  10.0
    4548:	ldr	r3, [sp, #32]
    454a:	add	r1, r3
    454c:	mov	r3, fp
    454e:	vmul.f64	d7, d7, d5
    4552:	vcvt.s32.f64	s12, d7
    4556:	vmov	r2, s12
    455a:	adds	r2, #48	; 0x30
    455c:	strb.w	r2, [r3], #1
    4560:	cmp	r1, r3
    4562:	vcvt.f64.s32	d6, s12
    4566:	vsub.f64	d7, d7, d6
    456a:	bne.n	454e <_dtoa_r+0xb1e>
    456c:	add	fp, r5
    456e:	vmov.f64	d6, #96	; 0x3f000000  0.5
    4572:	vadd.f64	d5, d3, d6
    4576:	vcmpe.f64	d5, d7
    457a:	vmrs	APSR_nzcv, fpscr
    457e:	bpl.n	4608 <_dtoa_r+0xbd8>
    4580:	str	r6, [sp, #8]
    4582:	ldrb.w	r0, [fp, #-1]
    4586:	b.w	3cde <_dtoa_r+0x2ae>
    458a:	movs	r3, #0
    458c:	str	r3, [sp, #20]
    458e:	mov	r6, r3
    4590:	b.n	4340 <_dtoa_r+0x910>
    4592:	subs	r3, r3, r7
    4594:	str	r3, [sp, #40]	; 0x28
    4596:	movs	r3, #0
    4598:	b.w	3d4e <_dtoa_r+0x31e>
    459c:	ldr	r2, [sp, #20]
    459e:	ldr	r3, [sp, #64]	; 0x40
    45a0:	str	r2, [sp, #56]	; 0x38
    45a2:	ldr	r2, [sp, #24]
    45a4:	str	r2, [sp, #40]	; 0x28
    45a6:	rsb	r3, r3, #54	; 0x36
    45aa:	b.w	3d4e <_dtoa_r+0x31e>
    45ae:	movs	r3, #0
    45b0:	str	r3, [sp, #28]
    45b2:	b.n	4394 <_dtoa_r+0x964>
    45b4:	vldr	d4, [sp, #56]	; 0x38
    45b8:	movs	r1, #2
    45ba:	b.n	403a <_dtoa_r+0x60a>
    45bc:	cmp	r7, #0
    45be:	beq.w	43a0 <_dtoa_r+0x970>
    45c2:	ldr	r0, [sp, #52]	; 0x34
    45c4:	cmp	r0, #0
    45c6:	ble.w	446c <_dtoa_r+0xa3c>
    45ca:	vmov.f64	d5, #36	; 0x41200000  10.0
    45ce:	vmov.f64	d7, #28	; 0x40e00000  7.0
    45d2:	adds	r1, #1
    45d4:	vmov	s13, r1
    45d8:	vmul.f64	d4, d4, d5
    45dc:	ldr	r3, [sp, #8]
    45de:	vcvt.f64.s32	d6, s13
    45e2:	subs	r6, r3, #1
    45e4:	vfma.f64	d7, d4, d6
    45e8:	vmov	r2, r3, d7
    45ec:	mov	r1, r0
    45ee:	sub.w	r3, r3, #54525952	; 0x3400000
    45f2:	b.n	4070 <_dtoa_r+0x640>
    45f4:	str	r5, [sp, #28]
    45f6:	b.n	4176 <_dtoa_r+0x746>
    45f8:	movs	r2, #57	; 0x39
    45fa:	mov	sl, r6
    45fc:	str	r5, [sp, #28]
    45fe:	mov	r6, r8
    4600:	strb	r2, [r7, #0]
    4602:	add.w	fp, r7, #1
    4606:	b.n	3f3e <_dtoa_r+0x50e>
    4608:	vsub.f64	d6, d6, d3
    460c:	vcmpe.f64	d6, d7
    4610:	vmrs	APSR_nzcv, fpscr
    4614:	bgt.n	461a <_dtoa_r+0xbea>
    4616:	b.n	446c <_dtoa_r+0xa3c>
    4618:	mov	fp, r2
    461a:	ldrb.w	r3, [fp, #-1]
    461e:	cmp	r3, #48	; 0x30
    4620:	add.w	r2, fp, #4294967295
    4624:	beq.n	4618 <_dtoa_r+0xbe8>
    4626:	b.n	411e <_dtoa_r+0x6ee>
    4628:	str	r6, [sp, #8]
    462a:	b.w	3cde <_dtoa_r+0x2ae>
    462e:	str	r3, [sp, #28]
    4630:	b.n	4394 <_dtoa_r+0x964>
    4632:	cmp.w	sl, #0
    4636:	bne.w	41b2 <_dtoa_r+0x782>
    463a:	b.n	436e <_dtoa_r+0x93e>
    463c:	cmp	r2, #57	; 0x39
    463e:	mov	fp, r9
    4640:	mov	r9, r2
    4642:	beq.n	45f8 <_dtoa_r+0xbc8>
    4644:	cmp.w	fp, #0
    4648:	bgt.w	443e <_dtoa_r+0xa0e>
    464c:	b.n	4442 <_dtoa_r+0xa12>
    464e:	bne.w	4442 <_dtoa_r+0xa12>
    4652:	tst.w	r9, #1
    4656:	beq.w	4442 <_dtoa_r+0xa12>
    465a:	b.n	4436 <_dtoa_r+0xa06>
    465c:	ldr	r3, [sp, #4]
    465e:	cmp	r3, #2
    4660:	bgt.n	4674 <_dtoa_r+0xc44>
    4662:	ldr	r7, [sp, #52]	; 0x34
    4664:	b.n	3edc <_dtoa_r+0x4ac>
    4666:	movs	r1, #2
    4668:	b.n	403a <_dtoa_r+0x60a>
    466a:	ldr	r3, [sp, #4]
    466c:	cmp	r3, #2
    466e:	bgt.n	4674 <_dtoa_r+0xc44>
    4670:	ldr	r7, [sp, #52]	; 0x34
    4672:	b.n	41d2 <_dtoa_r+0x7a2>
    4674:	ldr	r7, [sp, #52]	; 0x34
    4676:	b.n	431c <_dtoa_r+0x8ec>
    4678:	movs	r3, #1
    467a:	str	r3, [sp, #56]	; 0x38
    467c:	b.w	3bc2 <_dtoa_r+0x192>
    4680:	beq.w	3ea2 <_dtoa_r+0x472>
    4684:	rsb	r0, r0, #60	; 0x3c
    4688:	b.n	3e94 <_dtoa_r+0x464>
    468a:	movs	r5, #0
    468c:	str	r5, [r4, #68]	; 0x44
    468e:	mov	r1, r5
    4690:	mov	r0, r4
    4692:	bl	3220 <_Balloc>
    4696:	mov.w	r7, #4294967295
    469a:	movs	r3, #1
    469c:	str	r0, [sp, #32]
    469e:	mov	r8, r5
    46a0:	str	r0, [r4, #64]	; 0x40
    46a2:	str	r7, [sp, #52]	; 0x34
    46a4:	str	r3, [sp, #36]	; 0x24
    46a6:	b.w	3c2a <_dtoa_r+0x1fa>
    46aa:	nop
    46ac:	.word	0x20000440
    46b0:	.word	0x20000508
    46b4:	.word	0x00000000

000046b8 <_svfprintf_r>:
    46b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46bc:	vpush	{d8-d10}
    46c0:	sub	sp, #228	; 0xe4
    46c2:	mov	r4, r1
    46c4:	str	r1, [sp, #12]
    46c6:	mov	sl, r2
    46c8:	str	r3, [sp, #36]	; 0x24
    46ca:	str	r0, [sp, #20]
    46cc:	bl	3158 <_localeconv_r>
    46d0:	ldr	r3, [r0, #0]
    46d2:	str	r3, [sp, #64]	; 0x40
    46d4:	mov	r0, r3
    46d6:	bl	2cc0 <strlen>
    46da:	ldrh	r3, [r4, #12]
    46dc:	str	r0, [sp, #60]	; 0x3c
    46de:	lsls	r1, r3, #24
    46e0:	bpl.n	46ea <_svfprintf_r+0x32>
    46e2:	ldr	r3, [r4, #16]
    46e4:	cmp	r3, #0
    46e6:	beq.w	57e4 <_svfprintf_r+0x112c>
    46ea:	movs	r3, #0
    46ec:	vldr	d8, [pc, #656]	; 4980 <_svfprintf_r+0x2c8>
    46f0:	vldr	d9, [pc, #660]	; 4988 <_svfprintf_r+0x2d0>
    46f4:	str	r3, [sp, #52]	; 0x34
    46f6:	str	r3, [sp, #116]	; 0x74
    46f8:	str	r3, [sp, #112]	; 0x70
    46fa:	str	r3, [sp, #68]	; 0x44
    46fc:	str	r3, [sp, #24]
    46fe:	add	r3, sp, #160	; 0xa0
    4700:	str	r3, [sp, #108]	; 0x6c
    4702:	mov	r9, r3
    4704:	ldrb.w	r3, [sl]
    4708:	mov	r4, sl
    470a:	cbz	r3, 4748 <_svfprintf_r+0x90>
    470c:	cmp	r3, #37	; 0x25
    470e:	bne.n	4716 <_svfprintf_r+0x5e>
    4710:	b.n	4748 <_svfprintf_r+0x90>
    4712:	cmp	r3, #37	; 0x25
    4714:	beq.n	471e <_svfprintf_r+0x66>
    4716:	ldrb.w	r3, [r4, #1]!
    471a:	cmp	r3, #0
    471c:	bne.n	4712 <_svfprintf_r+0x5a>
    471e:	rsb	r5, sl, r4
    4722:	cbz	r5, 4748 <_svfprintf_r+0x90>
    4724:	ldr	r3, [sp, #112]	; 0x70
    4726:	ldr	r2, [sp, #116]	; 0x74
    4728:	str.w	sl, [r9]
    472c:	adds	r3, #1
    472e:	add	r2, r5
    4730:	cmp	r3, #7
    4732:	str.w	r5, [r9, #4]
    4736:	str	r2, [sp, #116]	; 0x74
    4738:	str	r3, [sp, #112]	; 0x70
    473a:	bgt.w	4884 <_svfprintf_r+0x1cc>
    473e:	add.w	r9, r9, #8
    4742:	ldr	r3, [sp, #24]
    4744:	add	r3, r5
    4746:	str	r3, [sp, #24]
    4748:	ldrb	r3, [r4, #0]
    474a:	cmp	r3, #0
    474c:	beq.w	4896 <_svfprintf_r+0x1de>
    4750:	movs	r3, #0
    4752:	mov	r2, r3
    4754:	strb.w	r3, [sp, #79]	; 0x4f
    4758:	mov	r1, r3
    475a:	str	r3, [sp, #28]
    475c:	mov	fp, r3
    475e:	mov.w	r8, #4294967295
    4762:	ldrb	r3, [r4, #1]
    4764:	add.w	sl, r4, #1
    4768:	mov	r5, r8
    476a:	add.w	sl, sl, #1
    476e:	sub.w	r0, r3, #32
    4772:	cmp	r0, #88	; 0x58
    4774:	bhi.w	4f68 <_svfprintf_r+0x8b0>
    4778:	tbh	[pc, r0, lsl #1]
    477c:	.word	0x03f60363
    4780:	.word	0x036b03f6
    4784:	.word	0x03f603f6
    4788:	.word	0x03f603f6
    478c:	.word	0x03f603f6
    4790:	.word	0x037e0370
    4794:	.word	0x005d03f6
    4798:	.word	0x03f600df
    479c:	.word	0x010c00fb
    47a0:	.word	0x010c010c
    47a4:	.word	0x010c010c
    47a8:	.word	0x010c010c
    47ac:	.word	0x010c010c
    47b0:	.word	0x03f603f6
    47b4:	.word	0x03f603f6
    47b8:	.word	0x03f603f6
    47bc:	.word	0x03f603f6
    47c0:	.word	0x03f603f6
    47c4:	.word	0x015e011c
    47c8:	.word	0x015e03f6
    47cc:	.word	0x03f603f6
    47d0:	.word	0x03f603f6
    47d4:	.word	0x03f602a1
    47d8:	.word	0x02a603f6
    47dc:	.word	0x03f603f6
    47e0:	.word	0x03f603f6
    47e4:	.word	0x02d803f6
    47e8:	.word	0x03f603f6
    47ec:	.word	0x03f60305
    47f0:	.word	0x03f603f6
    47f4:	.word	0x03f603f6
    47f8:	.word	0x03f603f6
    47fc:	.word	0x03f603f6
    4800:	.word	0x034303f6
    4804:	.word	0x015e0356
    4808:	.word	0x015e015e
    480c:	.word	0x0356035e
    4810:	.word	0x03f603f6
    4814:	.word	0x03f603a4
    4818:	.word	0x00a203b1
    481c:	.word	0x03c30062
    4820:	.word	0x03c803f6
    4824:	.word	0x038303f6
    4828:	.word	0x03f603f6
    482c:	.short	0x038b
    482e:	ldr	r0, [sp, #28]
    4830:	str	r3, [sp, #36]	; 0x24
    4832:	negs	r0, r0
    4834:	str	r0, [sp, #28]
    4836:	orr.w	fp, fp, #4
    483a:	ldrb.w	r3, [sl]
    483e:	b.n	476a <_svfprintf_r+0xb2>
    4840:	mov	r8, r5
    4842:	ldr	r0, [sp, #36]	; 0x24
    4844:	movs	r1, #0
    4846:	movs	r3, #48	; 0x30
    4848:	movs	r2, #120	; 0x78
    484a:	cmp	r8, r1
    484c:	strb.w	r3, [sp, #80]	; 0x50
    4850:	ldr	r4, [r0, #0]
    4852:	strb.w	r2, [sp, #81]	; 0x51
    4856:	add.w	r7, r0, #4
    485a:	mov.w	r5, #0
    485e:	strb.w	r1, [sp, #79]	; 0x4f
    4862:	orr.w	r3, fp, #2
    4866:	blt.w	4fa2 <_svfprintf_r+0x8ea>
    486a:	bic.w	r3, fp, #128	; 0x80
    486e:	orr.w	fp, r3, #2
    4872:	orrs.w	r3, r4, r5
    4876:	str	r7, [sp, #36]	; 0x24
    4878:	beq.w	4f4e <_svfprintf_r+0x896>
    487c:	mov	r7, r1
    487e:	str	r2, [sp, #48]	; 0x30
    4880:	ldr	r0, [pc, #268]	; (4990 <_svfprintf_r+0x2d8>)
    4882:	b.n	4de2 <_svfprintf_r+0x72a>
    4884:	add	r2, sp, #108	; 0x6c
    4886:	ldr	r1, [sp, #12]
    4888:	ldr	r0, [sp, #20]
    488a:	bl	5c28 <__ssprint_r>
    488e:	cbnz	r0, 48a4 <_svfprintf_r+0x1ec>
    4890:	add.w	r9, sp, #160	; 0xa0
    4894:	b.n	4742 <_svfprintf_r+0x8a>
    4896:	ldr	r3, [sp, #116]	; 0x74
    4898:	cbz	r3, 48a4 <_svfprintf_r+0x1ec>
    489a:	ldr	r0, [sp, #20]
    489c:	ldr	r1, [sp, #12]
    489e:	add	r2, sp, #108	; 0x6c
    48a0:	bl	5c28 <__ssprint_r>
    48a4:	ldr	r3, [sp, #12]
    48a6:	ldrh	r3, [r3, #12]
    48a8:	tst.w	r3, #64	; 0x40
    48ac:	ldr	r3, [sp, #24]
    48ae:	it	ne
    48b0:	movne.w	r3, #4294967295
    48b4:	mov	r0, r3
    48b6:	add	sp, #228	; 0xe4
    48b8:	vpop	{d8-d10}
    48bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48c0:	str	r3, [sp, #48]	; 0x30
    48c2:	mov	r8, r5
    48c4:	cmp	r2, #0
    48c6:	bne.w	5bfe <_svfprintf_r+0x1546>
    48ca:	ands.w	r3, fp, #32
    48ce:	beq.w	4cde <_svfprintf_r+0x626>
    48d2:	ldr	r7, [sp, #36]	; 0x24
    48d4:	adds	r7, #7
    48d6:	bic.w	r3, r7, #7
    48da:	movs	r7, #0
    48dc:	add.w	r2, r3, #8
    48e0:	cmp	r8, r7
    48e2:	str	r2, [sp, #36]	; 0x24
    48e4:	ldrd	r4, r5, [r3]
    48e8:	strb.w	r7, [sp, #79]	; 0x4f
    48ec:	blt.w	55ac <_svfprintf_r+0xef4>
    48f0:	orrs.w	r3, r4, r5
    48f4:	bic.w	fp, fp, #128	; 0x80
    48f8:	beq.w	4f92 <_svfprintf_r+0x8da>
    48fc:	add	r6, sp, #160	; 0xa0
    48fe:	lsrs	r2, r4, #3
    4900:	orr.w	r2, r2, r5, lsl #29
    4904:	lsrs	r1, r5, #3
    4906:	and.w	r3, r4, #7
    490a:	mov	r5, r1
    490c:	mov	r4, r2
    490e:	adds	r3, #48	; 0x30
    4910:	orrs.w	r2, r4, r5
    4914:	strb.w	r3, [r6, #-1]!
    4918:	bne.n	48fe <_svfprintf_r+0x246>
    491a:	tst.w	fp, #1
    491e:	beq.w	4d70 <_svfprintf_r+0x6b8>
    4922:	cmp	r3, #48	; 0x30
    4924:	beq.w	4d70 <_svfprintf_r+0x6b8>
    4928:	movs	r2, #48	; 0x30
    492a:	subs	r3, r6, #1
    492c:	strb.w	r2, [r6, #-1]
    4930:	add	r2, sp, #160	; 0xa0
    4932:	subs	r2, r2, r3
    4934:	str	r2, [sp, #32]
    4936:	mov	r6, r3
    4938:	b.n	4d76 <_svfprintf_r+0x6be>
    493a:	ldrb.w	r3, [sl]
    493e:	cmp	r3, #42	; 0x2a
    4940:	add.w	r4, sl, #1
    4944:	beq.w	5ba6 <_svfprintf_r+0x14ee>
    4948:	sub.w	r0, r3, #48	; 0x30
    494c:	cmp	r0, #9
    494e:	it	ls
    4950:	movls	r5, #0
    4952:	bhi.w	5b00 <_svfprintf_r+0x1448>
    4956:	ldrb.w	r3, [r4], #1
    495a:	add.w	r5, r5, r5, lsl #2
    495e:	add.w	r5, r0, r5, lsl #1
    4962:	sub.w	r0, r3, #48	; 0x30
    4966:	cmp	r0, #9
    4968:	bls.n	4956 <_svfprintf_r+0x29e>
    496a:	orr.w	r5, r5, r5, asr #31
    496e:	mov	sl, r4
    4970:	b.n	476e <_svfprintf_r+0xb6>
    4972:	orr.w	fp, fp, #128	; 0x80
    4976:	ldrb.w	r3, [sl]
    497a:	b.n	476a <_svfprintf_r+0xb2>
    497c:	nop.w
	...
    4988:	.word	0xffffffff
    498c:	.word	0x7fefffff
    4990:	.word	0x20000584
    4994:	sub.w	r0, r3, #48	; 0x30
    4998:	movs	r3, #0
    499a:	mov	r4, r3
    499c:	ldrb.w	r3, [sl], #1
    49a0:	add.w	r4, r4, r4, lsl #2
    49a4:	add.w	r4, r0, r4, lsl #1
    49a8:	sub.w	r0, r3, #48	; 0x30
    49ac:	cmp	r0, #9
    49ae:	bls.n	499c <_svfprintf_r+0x2e4>
    49b0:	str	r4, [sp, #28]
    49b2:	b.n	476e <_svfprintf_r+0xb6>
    49b4:	str	r3, [sp, #48]	; 0x30
    49b6:	mov	r8, r5
    49b8:	cmp	r2, #0
    49ba:	bne.w	5c16 <_svfprintf_r+0x155e>
    49be:	orr.w	fp, fp, #16
    49c2:	tst.w	fp, #32
    49c6:	beq.w	53d0 <_svfprintf_r+0xd18>
    49ca:	ldr	r7, [sp, #36]	; 0x24
    49cc:	adds	r7, #7
    49ce:	bic.w	r7, r7, #7
    49d2:	ldrd	r2, r3, [r7]
    49d6:	add.w	r1, r7, #8
    49da:	str	r1, [sp, #36]	; 0x24
    49dc:	mov	r4, r2
    49de:	mov	r5, r3
    49e0:	cmp	r2, #0
    49e2:	sbcs.w	r3, r3, #0
    49e6:	blt.w	5458 <_svfprintf_r+0xda0>
    49ea:	cmp.w	r8, #0
    49ee:	ldrb.w	r7, [sp, #79]	; 0x4f
    49f2:	blt.w	4d60 <_svfprintf_r+0x6a8>
    49f6:	orrs.w	r3, r4, r5
    49fa:	bic.w	fp, fp, #128	; 0x80
    49fe:	beq.w	51ee <_svfprintf_r+0xb36>
    4a02:	cmp	r5, #0
    4a04:	it	eq
    4a06:	cmpeq	r4, #10
    4a08:	bcc.w	4d68 <_svfprintf_r+0x6b0>
    4a0c:	add	r6, sp, #160	; 0xa0
    4a0e:	mov	r0, r4
    4a10:	mov	r1, r5
    4a12:	movs	r2, #10
    4a14:	movs	r3, #0
    4a16:	bl	5d28 <__aeabi_uldivmod>
    4a1a:	adds	r2, #48	; 0x30
    4a1c:	strb.w	r2, [r6, #-1]!
    4a20:	mov	r0, r4
    4a22:	mov	r1, r5
    4a24:	movs	r3, #0
    4a26:	movs	r2, #10
    4a28:	bl	5d28 <__aeabi_uldivmod>
    4a2c:	mov	r4, r0
    4a2e:	mov	r5, r1
    4a30:	orrs.w	r3, r4, r5
    4a34:	bne.n	4a0e <_svfprintf_r+0x356>
    4a36:	b.n	4d70 <_svfprintf_r+0x6b8>
    4a38:	str	r3, [sp, #48]	; 0x30
    4a3a:	mov	r8, r5
    4a3c:	cmp	r2, #0
    4a3e:	bne.w	5c0e <_svfprintf_r+0x1556>
    4a42:	ldr	r7, [sp, #36]	; 0x24
    4a44:	tst.w	fp, #8
    4a48:	add.w	r7, r7, #7
    4a4c:	beq.w	56d0 <_svfprintf_r+0x1018>
    4a50:	bic.w	r3, r7, #7
    4a54:	vldr	d8, [r3]
    4a58:	add.w	r2, r3, #8
    4a5c:	str	r2, [sp, #36]	; 0x24
    4a5e:	vabs.f64	d7, d8
    4a62:	vcmp.f64	d7, d9
    4a66:	vmrs	APSR_nzcv, fpscr
    4a6a:	ble.w	55e6 <_svfprintf_r+0xf2e>
    4a6e:	vcmpe.f64	d8, #0.0
    4a72:	vmrs	APSR_nzcv, fpscr
    4a76:	bmi.w	5a0e <_svfprintf_r+0x1356>
    4a7a:	ldrb.w	r7, [sp, #79]	; 0x4f
    4a7e:	ldr	r6, [pc, #668]	; (4d1c <_svfprintf_r+0x664>)
    4a80:	ldr	r3, [pc, #668]	; (4d20 <_svfprintf_r+0x668>)
    4a82:	ldr	r1, [sp, #48]	; 0x30
    4a84:	movs	r2, #3
    4a86:	mov.w	r8, #0
    4a8a:	str	r2, [sp, #16]
    4a8c:	bic.w	fp, fp, #128	; 0x80
    4a90:	cmp	r1, #71	; 0x47
    4a92:	it	le
    4a94:	movle	r6, r3
    4a96:	str	r2, [sp, #32]
    4a98:	str.w	r8, [sp, #56]	; 0x38
    4a9c:	cbz	r7, 4aa4 <_svfprintf_r+0x3ec>
    4a9e:	ldr	r3, [sp, #16]
    4aa0:	adds	r3, #1
    4aa2:	str	r3, [sp, #16]
    4aa4:	ands.w	r3, fp, #2
    4aa8:	str	r3, [sp, #40]	; 0x28
    4aaa:	beq.n	4ab2 <_svfprintf_r+0x3fa>
    4aac:	ldr	r3, [sp, #16]
    4aae:	adds	r3, #2
    4ab0:	str	r3, [sp, #16]
    4ab2:	ands.w	r3, fp, #132	; 0x84
    4ab6:	str	r3, [sp, #44]	; 0x2c
    4ab8:	bne.w	4fbc <_svfprintf_r+0x904>
    4abc:	ldr	r3, [sp, #28]
    4abe:	ldr	r2, [sp, #16]
    4ac0:	subs	r4, r3, r2
    4ac2:	cmp	r4, #0
    4ac4:	ble.w	4fbc <_svfprintf_r+0x904>
    4ac8:	cmp	r4, #16
    4aca:	ldr	r1, [sp, #116]	; 0x74
    4acc:	ldr	r2, [sp, #112]	; 0x70
    4ace:	ldr	r7, [pc, #596]	; (4d24 <_svfprintf_r+0x66c>)
    4ad0:	ble.n	4b1a <_svfprintf_r+0x462>
    4ad2:	mov	r0, r9
    4ad4:	movs	r5, #16
    4ad6:	mov	r9, r8
    4ad8:	mov	r8, r6
    4ada:	ldr	r6, [sp, #20]
    4adc:	b.n	4ae8 <_svfprintf_r+0x430>
    4ade:	subs	r4, #16
    4ae0:	cmp	r4, #16
    4ae2:	add.w	r0, r0, #8
    4ae6:	ble.n	4b14 <_svfprintf_r+0x45c>
    4ae8:	adds	r2, #1
    4aea:	adds	r1, #16
    4aec:	cmp	r2, #7
    4aee:	str	r1, [sp, #116]	; 0x74
    4af0:	str	r2, [sp, #112]	; 0x70
    4af2:	str	r7, [r0, #0]
    4af4:	str	r5, [r0, #4]
    4af6:	ble.n	4ade <_svfprintf_r+0x426>
    4af8:	add	r2, sp, #108	; 0x6c
    4afa:	ldr	r1, [sp, #12]
    4afc:	mov	r0, r6
    4afe:	bl	5c28 <__ssprint_r>
    4b02:	cmp	r0, #0
    4b04:	bne.w	48a4 <_svfprintf_r+0x1ec>
    4b08:	subs	r4, #16
    4b0a:	cmp	r4, #16
    4b0c:	ldr	r1, [sp, #116]	; 0x74
    4b0e:	ldr	r2, [sp, #112]	; 0x70
    4b10:	add	r0, sp, #160	; 0xa0
    4b12:	bgt.n	4ae8 <_svfprintf_r+0x430>
    4b14:	mov	r6, r8
    4b16:	mov	r8, r9
    4b18:	mov	r9, r0
    4b1a:	adds	r2, #1
    4b1c:	adds	r3, r4, r1
    4b1e:	cmp	r2, #7
    4b20:	str	r3, [sp, #116]	; 0x74
    4b22:	str	r2, [sp, #112]	; 0x70
    4b24:	str.w	r7, [r9]
    4b28:	str.w	r4, [r9, #4]
    4b2c:	bgt.w	52f4 <_svfprintf_r+0xc3c>
    4b30:	ldrb.w	r7, [sp, #79]	; 0x4f
    4b34:	add.w	r9, r9, #8
    4b38:	cbz	r7, 4b58 <_svfprintf_r+0x4a0>
    4b3a:	ldr	r2, [sp, #112]	; 0x70
    4b3c:	adds	r2, #1
    4b3e:	adds	r3, #1
    4b40:	add.w	r0, sp, #79	; 0x4f
    4b44:	movs	r1, #1
    4b46:	cmp	r2, #7
    4b48:	str	r3, [sp, #116]	; 0x74
    4b4a:	str	r2, [sp, #112]	; 0x70
    4b4c:	stmia.w	r9, {r0, r1}
    4b50:	bgt.w	5212 <_svfprintf_r+0xb5a>
    4b54:	add.w	r9, r9, #8
    4b58:	ldr	r2, [sp, #40]	; 0x28
    4b5a:	cbz	r2, 4b78 <_svfprintf_r+0x4c0>
    4b5c:	ldr	r2, [sp, #112]	; 0x70
    4b5e:	adds	r2, #1
    4b60:	adds	r3, #2
    4b62:	add	r0, sp, #80	; 0x50
    4b64:	movs	r1, #2
    4b66:	cmp	r2, #7
    4b68:	str	r3, [sp, #116]	; 0x74
    4b6a:	str	r2, [sp, #112]	; 0x70
    4b6c:	stmia.w	r9, {r0, r1}
    4b70:	bgt.w	522a <_svfprintf_r+0xb72>
    4b74:	add.w	r9, r9, #8
    4b78:	ldr	r2, [sp, #44]	; 0x2c
    4b7a:	cmp	r2, #128	; 0x80
    4b7c:	beq.w	507c <_svfprintf_r+0x9c4>
    4b80:	ldr	r2, [sp, #32]
    4b82:	rsb	r4, r2, r8
    4b86:	cmp	r4, #0
    4b88:	ble.n	4bf4 <_svfprintf_r+0x53c>
    4b8a:	cmp	r4, #16
    4b8c:	ldr	r2, [sp, #112]	; 0x70
    4b8e:	ldr	r7, [pc, #408]	; (4d28 <_svfprintf_r+0x670>)
    4b90:	ble.n	4bda <_svfprintf_r+0x522>
    4b92:	mov	r1, r9
    4b94:	mov.w	r8, #16
    4b98:	mov	r9, r6
    4b9a:	ldr	r5, [sp, #20]
    4b9c:	ldr	r6, [sp, #12]
    4b9e:	b.n	4baa <_svfprintf_r+0x4f2>
    4ba0:	subs	r4, #16
    4ba2:	cmp	r4, #16
    4ba4:	add.w	r1, r1, #8
    4ba8:	ble.n	4bd6 <_svfprintf_r+0x51e>
    4baa:	adds	r2, #1
    4bac:	adds	r3, #16
    4bae:	cmp	r2, #7
    4bb0:	str	r3, [sp, #116]	; 0x74
    4bb2:	str	r2, [sp, #112]	; 0x70
    4bb4:	stmia.w	r1, {r7, r8}
    4bb8:	ble.n	4ba0 <_svfprintf_r+0x4e8>
    4bba:	add	r2, sp, #108	; 0x6c
    4bbc:	mov	r1, r6
    4bbe:	mov	r0, r5
    4bc0:	bl	5c28 <__ssprint_r>
    4bc4:	cmp	r0, #0
    4bc6:	bne.w	48a4 <_svfprintf_r+0x1ec>
    4bca:	subs	r4, #16
    4bcc:	cmp	r4, #16
    4bce:	ldr	r3, [sp, #116]	; 0x74
    4bd0:	ldr	r2, [sp, #112]	; 0x70
    4bd2:	add	r1, sp, #160	; 0xa0
    4bd4:	bgt.n	4baa <_svfprintf_r+0x4f2>
    4bd6:	mov	r6, r9
    4bd8:	mov	r9, r1
    4bda:	adds	r2, #1
    4bdc:	add	r3, r4
    4bde:	cmp	r2, #7
    4be0:	str	r3, [sp, #116]	; 0x74
    4be2:	str	r2, [sp, #112]	; 0x70
    4be4:	str.w	r7, [r9]
    4be8:	str.w	r4, [r9, #4]
    4bec:	bgt.w	51fa <_svfprintf_r+0xb42>
    4bf0:	add.w	r9, r9, #8
    4bf4:	tst.w	fp, #256	; 0x100
    4bf8:	bne.w	4fc0 <_svfprintf_r+0x908>
    4bfc:	ldr	r2, [sp, #112]	; 0x70
    4bfe:	ldr	r0, [sp, #32]
    4c00:	str.w	r6, [r9]
    4c04:	adds	r2, #1
    4c06:	add	r3, r0
    4c08:	cmp	r2, #7
    4c0a:	str	r3, [sp, #116]	; 0x74
    4c0c:	str.w	r0, [r9, #4]
    4c10:	str	r2, [sp, #112]	; 0x70
    4c12:	bgt.w	519a <_svfprintf_r+0xae2>
    4c16:	add.w	r9, r9, #8
    4c1a:	tst.w	fp, #4
    4c1e:	beq.n	4c9e <_svfprintf_r+0x5e6>
    4c20:	ldr	r2, [sp, #28]
    4c22:	ldr	r1, [sp, #16]
    4c24:	subs	r4, r2, r1
    4c26:	cmp	r4, #0
    4c28:	ble.n	4c9e <_svfprintf_r+0x5e6>
    4c2a:	cmp	r4, #16
    4c2c:	ldr	r2, [sp, #112]	; 0x70
    4c2e:	ldr	r7, [pc, #244]	; (4d24 <_svfprintf_r+0x66c>)
    4c30:	ble.n	4c78 <_svfprintf_r+0x5c0>
    4c32:	movs	r5, #16
    4c34:	ldr	r6, [sp, #20]
    4c36:	ldr.w	r8, [sp, #12]
    4c3a:	b.n	4c46 <_svfprintf_r+0x58e>
    4c3c:	subs	r4, #16
    4c3e:	cmp	r4, #16
    4c40:	add.w	r9, r9, #8
    4c44:	ble.n	4c78 <_svfprintf_r+0x5c0>
    4c46:	adds	r2, #1
    4c48:	adds	r3, #16
    4c4a:	cmp	r2, #7
    4c4c:	str	r3, [sp, #116]	; 0x74
    4c4e:	str	r2, [sp, #112]	; 0x70
    4c50:	str.w	r7, [r9]
    4c54:	str.w	r5, [r9, #4]
    4c58:	ble.n	4c3c <_svfprintf_r+0x584>
    4c5a:	add	r2, sp, #108	; 0x6c
    4c5c:	mov	r1, r8
    4c5e:	mov	r0, r6
    4c60:	bl	5c28 <__ssprint_r>
    4c64:	cmp	r0, #0
    4c66:	bne.w	48a4 <_svfprintf_r+0x1ec>
    4c6a:	subs	r4, #16
    4c6c:	cmp	r4, #16
    4c6e:	ldr	r3, [sp, #116]	; 0x74
    4c70:	ldr	r2, [sp, #112]	; 0x70
    4c72:	add.w	r9, sp, #160	; 0xa0
    4c76:	bgt.n	4c46 <_svfprintf_r+0x58e>
    4c78:	adds	r2, #1
    4c7a:	add	r3, r4
    4c7c:	cmp	r2, #7
    4c7e:	str	r3, [sp, #116]	; 0x74
    4c80:	str	r2, [sp, #112]	; 0x70
    4c82:	str.w	r7, [r9]
    4c86:	str.w	r4, [r9, #4]
    4c8a:	ble.n	4c9e <_svfprintf_r+0x5e6>
    4c8c:	add	r2, sp, #108	; 0x6c
    4c8e:	ldr	r1, [sp, #12]
    4c90:	ldr	r0, [sp, #20]
    4c92:	bl	5c28 <__ssprint_r>
    4c96:	cmp	r0, #0
    4c98:	bne.w	48a4 <_svfprintf_r+0x1ec>
    4c9c:	ldr	r3, [sp, #116]	; 0x74
    4c9e:	ldr	r2, [sp, #24]
    4ca0:	ldr	r1, [sp, #28]
    4ca2:	ldr	r0, [sp, #16]
    4ca4:	cmp	r1, r0
    4ca6:	ite	ge
    4ca8:	addge	r2, r2, r1
    4caa:	addlt	r2, r2, r0
    4cac:	str	r2, [sp, #24]
    4cae:	cmp	r3, #0
    4cb0:	bne.w	51b2 <_svfprintf_r+0xafa>
    4cb4:	movs	r3, #0
    4cb6:	str	r3, [sp, #112]	; 0x70
    4cb8:	add.w	r9, sp, #160	; 0xa0
    4cbc:	b.n	4704 <_svfprintf_r+0x4c>
    4cbe:	orr.w	fp, fp, #8
    4cc2:	ldrb.w	r3, [sl]
    4cc6:	b.n	476a <_svfprintf_r+0xb2>
    4cc8:	str	r3, [sp, #48]	; 0x30
    4cca:	mov	r8, r5
    4ccc:	cmp	r2, #0
    4cce:	bne.w	5c06 <_svfprintf_r+0x154e>
    4cd2:	orr.w	fp, fp, #16
    4cd6:	ands.w	r3, fp, #32
    4cda:	bne.w	48d2 <_svfprintf_r+0x21a>
    4cde:	ands.w	r2, fp, #16
    4ce2:	bne.w	5408 <_svfprintf_r+0xd50>
    4ce6:	ands.w	r3, fp, #64	; 0x40
    4cea:	beq.w	5408 <_svfprintf_r+0xd50>
    4cee:	ldr	r1, [sp, #36]	; 0x24
    4cf0:	strb.w	r2, [sp, #79]	; 0x4f
    4cf4:	mov	r3, r1
    4cf6:	cmp.w	r8, #0
    4cfa:	add.w	r3, r3, #4
    4cfe:	ldrh	r4, [r1, #0]
    4d00:	mov.w	r5, #0
    4d04:	blt.w	585e <_svfprintf_r+0x11a6>
    4d08:	orrs.w	r1, r4, r5
    4d0c:	bic.w	fp, fp, #128	; 0x80
    4d10:	str	r3, [sp, #36]	; 0x24
    4d12:	beq.w	4f92 <_svfprintf_r+0x8da>
    4d16:	mov	r7, r2
    4d18:	b.n	48fc <_svfprintf_r+0x244>
    4d1a:	nop
    4d1c:	.word	0x20000564
    4d20:	.word	0x20000560
    4d24:	.word	0x200005a0
    4d28:	.word	0x20000550
    4d2c:	str	r3, [sp, #48]	; 0x30
    4d2e:	mov	r8, r5
    4d30:	cmp	r2, #0
    4d32:	bne.w	5be8 <_svfprintf_r+0x1530>
    4d36:	orr.w	fp, fp, #16
    4d3a:	ands.w	r3, fp, #32
    4d3e:	beq.w	5310 <_svfprintf_r+0xc58>
    4d42:	ldr	r7, [sp, #36]	; 0x24
    4d44:	adds	r7, #7
    4d46:	bic.w	r3, r7, #7
    4d4a:	movs	r7, #0
    4d4c:	add.w	r2, r3, #8
    4d50:	cmp	r8, r7
    4d52:	str	r2, [sp, #36]	; 0x24
    4d54:	ldrd	r4, r5, [r3]
    4d58:	strb.w	r7, [sp, #79]	; 0x4f
    4d5c:	bge.w	49f6 <_svfprintf_r+0x33e>
    4d60:	orrs.w	r3, r4, r5
    4d64:	bne.w	4a02 <_svfprintf_r+0x34a>
    4d68:	add	r6, sp, #224	; 0xe0
    4d6a:	adds	r4, #48	; 0x30
    4d6c:	strb.w	r4, [r6, #-65]!
    4d70:	add	r3, sp, #160	; 0xa0
    4d72:	subs	r3, r3, r6
    4d74:	str	r3, [sp, #32]
    4d76:	ldr	r3, [sp, #32]
    4d78:	cmp	r3, r8
    4d7a:	it	lt
    4d7c:	movlt	r3, r8
    4d7e:	str	r3, [sp, #16]
    4d80:	movs	r3, #0
    4d82:	str	r3, [sp, #56]	; 0x38
    4d84:	b.n	4a9c <_svfprintf_r+0x3e4>
    4d86:	str	r3, [sp, #48]	; 0x30
    4d88:	mov	r8, r5
    4d8a:	cmp	r2, #0
    4d8c:	bne.w	5be0 <_svfprintf_r+0x1528>
    4d90:	tst.w	fp, #32
    4d94:	ldr	r0, [pc, #776]	; (50a0 <_svfprintf_r+0x9e8>)
    4d96:	beq.w	4ea6 <_svfprintf_r+0x7ee>
    4d9a:	ldr	r7, [sp, #36]	; 0x24
    4d9c:	adds	r7, #7
    4d9e:	bic.w	r3, r7, #7
    4da2:	ldrd	r4, r5, [r3]
    4da6:	add.w	r2, r3, #8
    4daa:	str	r2, [sp, #36]	; 0x24
    4dac:	ands.w	r7, fp, #1
    4db0:	beq.w	5242 <_svfprintf_r+0xb8a>
    4db4:	orrs.w	r3, r4, r5
    4db8:	beq.w	5702 <_svfprintf_r+0x104a>
    4dbc:	movs	r7, #0
    4dbe:	movs	r3, #48	; 0x30
    4dc0:	ldrb.w	r2, [sp, #48]	; 0x30
    4dc4:	strb.w	r3, [sp, #80]	; 0x50
    4dc8:	cmp	r8, r7
    4dca:	strb.w	r2, [sp, #81]	; 0x51
    4dce:	strb.w	r7, [sp, #79]	; 0x4f
    4dd2:	orr.w	r3, fp, #2
    4dd6:	blt.w	5a08 <_svfprintf_r+0x1350>
    4dda:	bic.w	r3, fp, #128	; 0x80
    4dde:	orr.w	fp, r3, #2
    4de2:	add	r6, sp, #160	; 0xa0
    4de4:	lsrs	r3, r4, #4
    4de6:	and.w	r1, r4, #15
    4dea:	orr.w	r3, r3, r5, lsl #28
    4dee:	lsrs	r2, r5, #4
    4df0:	mov	r4, r3
    4df2:	mov	r5, r2
    4df4:	ldrb	r3, [r0, r1]
    4df6:	strb.w	r3, [r6, #-1]!
    4dfa:	orrs.w	r3, r4, r5
    4dfe:	bne.n	4de4 <_svfprintf_r+0x72c>
    4e00:	b.n	4d70 <_svfprintf_r+0x6b8>
    4e02:	ldr	r1, [sp, #36]	; 0x24
    4e04:	str	r3, [sp, #48]	; 0x30
    4e06:	ldr	r2, [r1, #0]
    4e08:	strb.w	r2, [sp, #120]	; 0x78
    4e0c:	movs	r3, #0
    4e0e:	mov	r2, r1
    4e10:	mov	r7, r3
    4e12:	strb.w	r3, [sp, #79]	; 0x4f
    4e16:	adds	r2, #4
    4e18:	movs	r3, #1
    4e1a:	str	r3, [sp, #16]
    4e1c:	mov	r8, r7
    4e1e:	str	r7, [sp, #56]	; 0x38
    4e20:	str	r2, [sp, #36]	; 0x24
    4e22:	str	r3, [sp, #32]
    4e24:	add	r6, sp, #120	; 0x78
    4e26:	b.n	4aa4 <_svfprintf_r+0x3ec>
    4e28:	str	r3, [sp, #48]	; 0x30
    4e2a:	mov	r8, r5
    4e2c:	cmp	r2, #0
    4e2e:	beq.w	49c2 <_svfprintf_r+0x30a>
    4e32:	strb.w	r1, [sp, #79]	; 0x4f
    4e36:	b.n	49c2 <_svfprintf_r+0x30a>
    4e38:	orr.w	fp, fp, #64	; 0x40
    4e3c:	ldrb.w	r3, [sl]
    4e40:	b.n	476a <_svfprintf_r+0xb2>
    4e42:	ldrb.w	r3, [sl]
    4e46:	cmp	r1, #0
    4e48:	bne.w	476a <_svfprintf_r+0xb2>
    4e4c:	movs	r2, #1
    4e4e:	movs	r1, #32
    4e50:	b.n	476a <_svfprintf_r+0xb2>
    4e52:	orr.w	fp, fp, #1
    4e56:	ldrb.w	r3, [sl]
    4e5a:	b.n	476a <_svfprintf_r+0xb2>
    4e5c:	ldr	r4, [sp, #36]	; 0x24
    4e5e:	ldr	r3, [r4, #0]
    4e60:	str	r3, [sp, #28]
    4e62:	mov	r0, r3
    4e64:	cmp	r0, #0
    4e66:	mov	r3, r4
    4e68:	add.w	r3, r3, #4
    4e6c:	blt.w	482e <_svfprintf_r+0x176>
    4e70:	str	r3, [sp, #36]	; 0x24
    4e72:	ldrb.w	r3, [sl]
    4e76:	b.n	476a <_svfprintf_r+0xb2>
    4e78:	ldrb.w	r3, [sl]
    4e7c:	movs	r2, #1
    4e7e:	movs	r1, #43	; 0x2b
    4e80:	b.n	476a <_svfprintf_r+0xb2>
    4e82:	str	r3, [sp, #48]	; 0x30
    4e84:	mov	r8, r5
    4e86:	cmp	r2, #0
    4e88:	beq.w	4d3a <_svfprintf_r+0x682>
    4e8c:	strb.w	r1, [sp, #79]	; 0x4f
    4e90:	b.n	4d3a <_svfprintf_r+0x682>
    4e92:	str	r3, [sp, #48]	; 0x30
    4e94:	mov	r8, r5
    4e96:	cmp	r2, #0
    4e98:	bne.w	5bf0 <_svfprintf_r+0x1538>
    4e9c:	tst.w	fp, #32
    4ea0:	ldr	r0, [pc, #512]	; (50a4 <_svfprintf_r+0x9ec>)
    4ea2:	bne.w	4d9a <_svfprintf_r+0x6e2>
    4ea6:	ldr	r2, [sp, #36]	; 0x24
    4ea8:	tst.w	fp, #16
    4eac:	mov	r3, r2
    4eae:	bne.w	5434 <_svfprintf_r+0xd7c>
    4eb2:	tst.w	fp, #64	; 0x40
    4eb6:	beq.w	5434 <_svfprintf_r+0xd7c>
    4eba:	adds	r3, #4
    4ebc:	ldrh	r4, [r2, #0]
    4ebe:	str	r3, [sp, #36]	; 0x24
    4ec0:	movs	r5, #0
    4ec2:	b.n	4dac <_svfprintf_r+0x6f4>
    4ec4:	ldrb.w	r3, [sl]
    4ec8:	cmp	r3, #108	; 0x6c
    4eca:	ittte	eq
    4ecc:	ldrbeq.w	r3, [sl, #1]
    4ed0:	orreq.w	fp, fp, #32
    4ed4:	addeq.w	sl, sl, #1
    4ed8:	orrne.w	fp, fp, #16
    4edc:	b.n	476a <_svfprintf_r+0xb2>
    4ede:	cmp	r2, #0
    4ee0:	bne.w	5bc2 <_svfprintf_r+0x150a>
    4ee4:	tst.w	fp, #32
    4ee8:	beq.w	55b8 <_svfprintf_r+0xf00>
    4eec:	ldr	r2, [sp, #36]	; 0x24
    4eee:	ldr	r1, [sp, #24]
    4ef0:	ldr	r3, [r2, #0]
    4ef2:	asrs	r5, r1, #31
    4ef4:	mov	r0, r1
    4ef6:	adds	r2, #4
    4ef8:	mov	r1, r5
    4efa:	str	r2, [sp, #36]	; 0x24
    4efc:	strd	r0, r1, [r3]
    4f00:	b.n	4704 <_svfprintf_r+0x4c>
    4f02:	orr.w	fp, fp, #32
    4f06:	ldrb.w	r3, [sl]
    4f0a:	b.n	476a <_svfprintf_r+0xb2>
    4f0c:	ldr	r2, [sp, #36]	; 0x24
    4f0e:	str	r3, [sp, #48]	; 0x30
    4f10:	ldr	r6, [r2, #0]
    4f12:	movs	r4, #0
    4f14:	strb.w	r4, [sp, #79]	; 0x4f
    4f18:	adds	r7, r2, #4
    4f1a:	cmp	r6, #0
    4f1c:	beq.w	59ea <_svfprintf_r+0x1332>
    4f20:	cmp	r5, #0
    4f22:	blt.w	586a <_svfprintf_r+0x11b2>
    4f26:	mov	r2, r5
    4f28:	mov	r1, r4
    4f2a:	mov	r0, r6
    4f2c:	bl	3180 <memchr>
    4f30:	cmp	r0, #0
    4f32:	beq.w	5ace <_svfprintf_r+0x1416>
    4f36:	subs	r3, r0, r6
    4f38:	str	r3, [sp, #32]
    4f3a:	mov	r8, r4
    4f3c:	bic.w	r3, r3, r3, asr #31
    4f40:	str	r7, [sp, #36]	; 0x24
    4f42:	str	r3, [sp, #16]
    4f44:	str.w	r8, [sp, #56]	; 0x38
    4f48:	ldrb.w	r7, [sp, #79]	; 0x4f
    4f4c:	b.n	4a9c <_svfprintf_r+0x3e4>
    4f4e:	ldr	r0, [pc, #340]	; (50a4 <_svfprintf_r+0x9ec>)
    4f50:	str	r2, [sp, #48]	; 0x30
    4f52:	cmp.w	r8, #0
    4f56:	bne.w	5262 <_svfprintf_r+0xbaa>
    4f5a:	mov	r7, r8
    4f5c:	mov.w	r8, #0
    4f60:	str.w	r8, [sp, #32]
    4f64:	add	r6, sp, #160	; 0xa0
    4f66:	b.n	4d76 <_svfprintf_r+0x6be>
    4f68:	str	r3, [sp, #48]	; 0x30
    4f6a:	cmp	r2, #0
    4f6c:	bne.w	5bca <_svfprintf_r+0x1512>
    4f70:	ldr	r2, [sp, #48]	; 0x30
    4f72:	cmp	r2, #0
    4f74:	beq.w	4896 <_svfprintf_r+0x1de>
    4f78:	movs	r3, #0
    4f7a:	movs	r1, #1
    4f7c:	mov	r7, r3
    4f7e:	str	r1, [sp, #16]
    4f80:	strb.w	r2, [sp, #120]	; 0x78
    4f84:	strb.w	r3, [sp, #79]	; 0x4f
    4f88:	mov	r8, r3
    4f8a:	str	r3, [sp, #56]	; 0x38
    4f8c:	str	r1, [sp, #32]
    4f8e:	add	r6, sp, #120	; 0x78
    4f90:	b.n	4aa4 <_svfprintf_r+0x3ec>
    4f92:	cmp.w	r8, #0
    4f96:	beq.w	5ab0 <_svfprintf_r+0x13f8>
    4f9a:	movs	r7, #0
    4f9c:	movs	r4, #0
    4f9e:	movs	r5, #0
    4fa0:	b.n	48fc <_svfprintf_r+0x244>
    4fa2:	ldr	r0, [pc, #256]	; (50a4 <_svfprintf_r+0x9ec>)
    4fa4:	str	r2, [sp, #48]	; 0x30
    4fa6:	mov	fp, r3
    4fa8:	orrs.w	r3, r4, r5
    4fac:	str	r7, [sp, #36]	; 0x24
    4fae:	mov.w	r7, #0
    4fb2:	bne.w	4de2 <_svfprintf_r+0x72a>
    4fb6:	movs	r4, #0
    4fb8:	movs	r5, #0
    4fba:	b.n	4de2 <_svfprintf_r+0x72a>
    4fbc:	ldr	r3, [sp, #116]	; 0x74
    4fbe:	b.n	4b38 <_svfprintf_r+0x480>
    4fc0:	ldr	r2, [sp, #48]	; 0x30
    4fc2:	cmp	r2, #101	; 0x65
    4fc4:	ble.w	510a <_svfprintf_r+0xa52>
    4fc8:	vcmp.f64	d8, #0.0
    4fcc:	vmrs	APSR_nzcv, fpscr
    4fd0:	bne.w	5266 <_svfprintf_r+0xbae>
    4fd4:	ldr	r2, [sp, #112]	; 0x70
    4fd6:	ldr	r1, [pc, #208]	; (50a8 <_svfprintf_r+0x9f0>)
    4fd8:	str.w	r1, [r9]
    4fdc:	adds	r2, #1
    4fde:	adds	r3, #1
    4fe0:	movs	r1, #1
    4fe2:	cmp	r2, #7
    4fe4:	str	r3, [sp, #116]	; 0x74
    4fe6:	str	r2, [sp, #112]	; 0x70
    4fe8:	str.w	r1, [r9, #4]
    4fec:	bgt.w	5714 <_svfprintf_r+0x105c>
    4ff0:	add.w	r9, r9, #8
    4ff4:	ldr	r2, [sp, #84]	; 0x54
    4ff6:	ldr	r1, [sp, #52]	; 0x34
    4ff8:	cmp	r2, r1
    4ffa:	blt.n	5004 <_svfprintf_r+0x94c>
    4ffc:	tst.w	fp, #1
    5000:	beq.w	4c1a <_svfprintf_r+0x562>
    5004:	ldr	r2, [sp, #112]	; 0x70
    5006:	ldr	r0, [sp, #60]	; 0x3c
    5008:	ldr	r1, [sp, #64]	; 0x40
    500a:	str.w	r1, [r9]
    500e:	adds	r2, #1
    5010:	add	r3, r0
    5012:	cmp	r2, #7
    5014:	str	r3, [sp, #116]	; 0x74
    5016:	str.w	r0, [r9, #4]
    501a:	str	r2, [sp, #112]	; 0x70
    501c:	bgt.w	57cc <_svfprintf_r+0x1114>
    5020:	add.w	r9, r9, #8
    5024:	ldr	r2, [sp, #52]	; 0x34
    5026:	subs	r4, r2, #1
    5028:	cmp	r4, #0
    502a:	ble.w	4c1a <_svfprintf_r+0x562>
    502e:	cmp	r4, #16
    5030:	ldr	r2, [sp, #112]	; 0x70
    5032:	ldr	r7, [pc, #120]	; (50ac <_svfprintf_r+0x9f4>)
    5034:	ble.w	53f0 <_svfprintf_r+0xd38>
    5038:	movs	r5, #16
    503a:	ldr	r6, [sp, #20]
    503c:	ldr.w	r8, [sp, #12]
    5040:	b.n	504e <_svfprintf_r+0x996>
    5042:	add.w	r9, r9, #8
    5046:	subs	r4, #16
    5048:	cmp	r4, #16
    504a:	ble.w	53f0 <_svfprintf_r+0xd38>
    504e:	adds	r2, #1
    5050:	adds	r3, #16
    5052:	cmp	r2, #7
    5054:	str	r3, [sp, #116]	; 0x74
    5056:	str	r2, [sp, #112]	; 0x70
    5058:	str.w	r7, [r9]
    505c:	str.w	r5, [r9, #4]
    5060:	ble.n	5042 <_svfprintf_r+0x98a>
    5062:	add	r2, sp, #108	; 0x6c
    5064:	mov	r1, r8
    5066:	mov	r0, r6
    5068:	bl	5c28 <__ssprint_r>
    506c:	cmp	r0, #0
    506e:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5072:	ldr	r3, [sp, #116]	; 0x74
    5074:	ldr	r2, [sp, #112]	; 0x70
    5076:	add.w	r9, sp, #160	; 0xa0
    507a:	b.n	5046 <_svfprintf_r+0x98e>
    507c:	ldr	r2, [sp, #28]
    507e:	ldr	r1, [sp, #16]
    5080:	subs	r4, r2, r1
    5082:	cmp	r4, #0
    5084:	ble.w	4b80 <_svfprintf_r+0x4c8>
    5088:	cmp	r4, #16
    508a:	ldr	r2, [sp, #112]	; 0x70
    508c:	ldr	r7, [pc, #28]	; (50ac <_svfprintf_r+0x9f4>)
    508e:	ble.n	50ee <_svfprintf_r+0xa36>
    5090:	mov	r1, r9
    5092:	movs	r5, #16
    5094:	mov	r9, r8
    5096:	mov	r0, r3
    5098:	mov	r8, r6
    509a:	ldr	r6, [sp, #20]
    509c:	b.n	50ba <_svfprintf_r+0xa02>
    509e:	nop
    50a0:	.word	0x20000570
    50a4:	.word	0x20000584
    50a8:	.word	0x2000054c
    50ac:	.word	0x20000550
    50b0:	subs	r4, #16
    50b2:	cmp	r4, #16
    50b4:	add.w	r1, r1, #8
    50b8:	ble.n	50e6 <_svfprintf_r+0xa2e>
    50ba:	adds	r2, #1
    50bc:	adds	r0, #16
    50be:	cmp	r2, #7
    50c0:	str	r0, [sp, #116]	; 0x74
    50c2:	str	r2, [sp, #112]	; 0x70
    50c4:	str	r7, [r1, #0]
    50c6:	str	r5, [r1, #4]
    50c8:	ble.n	50b0 <_svfprintf_r+0x9f8>
    50ca:	add	r2, sp, #108	; 0x6c
    50cc:	ldr	r1, [sp, #12]
    50ce:	mov	r0, r6
    50d0:	bl	5c28 <__ssprint_r>
    50d4:	cmp	r0, #0
    50d6:	bne.w	48a4 <_svfprintf_r+0x1ec>
    50da:	subs	r4, #16
    50dc:	cmp	r4, #16
    50de:	ldr	r0, [sp, #116]	; 0x74
    50e0:	ldr	r2, [sp, #112]	; 0x70
    50e2:	add	r1, sp, #160	; 0xa0
    50e4:	bgt.n	50ba <_svfprintf_r+0xa02>
    50e6:	mov	r6, r8
    50e8:	mov	r3, r0
    50ea:	mov	r8, r9
    50ec:	mov	r9, r1
    50ee:	adds	r2, #1
    50f0:	add	r3, r4
    50f2:	cmp	r2, #7
    50f4:	str	r3, [sp, #116]	; 0x74
    50f6:	str	r2, [sp, #112]	; 0x70
    50f8:	str.w	r7, [r9]
    50fc:	str.w	r4, [r9, #4]
    5100:	bgt.w	5590 <_svfprintf_r+0xed8>
    5104:	add.w	r9, r9, #8
    5108:	b.n	4b80 <_svfprintf_r+0x4c8>
    510a:	ldr	r2, [sp, #52]	; 0x34
    510c:	str.w	r6, [r9]
    5110:	cmp	r2, #1
    5112:	ldr	r2, [sp, #112]	; 0x70
    5114:	add.w	r3, r3, #1
    5118:	add.w	r2, r2, #1
    511c:	mov.w	r1, #1
    5120:	str	r3, [sp, #116]	; 0x74
    5122:	str	r2, [sp, #112]	; 0x70
    5124:	str.w	r1, [r9, #4]
    5128:	ble.w	554c <_svfprintf_r+0xe94>
    512c:	cmp	r2, #7
    512e:	bgt.w	555c <_svfprintf_r+0xea4>
    5132:	add.w	r9, r9, #8
    5136:	ldr	r0, [sp, #60]	; 0x3c
    5138:	ldr	r1, [sp, #64]	; 0x40
    513a:	str.w	r1, [r9]
    513e:	adds	r2, #1
    5140:	add	r3, r0
    5142:	cmp	r2, #7
    5144:	str	r3, [sp, #116]	; 0x74
    5146:	str	r2, [sp, #112]	; 0x70
    5148:	str.w	r0, [r9, #4]
    514c:	bgt.w	5576 <_svfprintf_r+0xebe>
    5150:	add.w	r9, r9, #8
    5154:	vcmp.f64	d8, #0.0
    5158:	vmrs	APSR_nzcv, fpscr
    515c:	ldr	r1, [sp, #52]	; 0x34
    515e:	beq.w	534c <_svfprintf_r+0xc94>
    5162:	subs	r1, #1
    5164:	adds	r2, #1
    5166:	adds	r6, #1
    5168:	add	r3, r1
    516a:	cmp	r2, #7
    516c:	str.w	r6, [r9]
    5170:	str	r2, [sp, #112]	; 0x70
    5172:	str	r3, [sp, #116]	; 0x74
    5174:	str.w	r1, [r9, #4]
    5178:	bgt.w	53b6 <_svfprintf_r+0xcfe>
    517c:	add.w	r9, r9, #8
    5180:	ldr	r0, [sp, #68]	; 0x44
    5182:	str.w	r0, [r9, #4]
    5186:	adds	r2, #1
    5188:	add	r3, r0
    518a:	add	r1, sp, #92	; 0x5c
    518c:	cmp	r2, #7
    518e:	str	r3, [sp, #116]	; 0x74
    5190:	str	r2, [sp, #112]	; 0x70
    5192:	str.w	r1, [r9]
    5196:	ble.w	4c16 <_svfprintf_r+0x55e>
    519a:	add	r2, sp, #108	; 0x6c
    519c:	ldr	r1, [sp, #12]
    519e:	ldr	r0, [sp, #20]
    51a0:	bl	5c28 <__ssprint_r>
    51a4:	cmp	r0, #0
    51a6:	bne.w	48a4 <_svfprintf_r+0x1ec>
    51aa:	ldr	r3, [sp, #116]	; 0x74
    51ac:	add.w	r9, sp, #160	; 0xa0
    51b0:	b.n	4c1a <_svfprintf_r+0x562>
    51b2:	add	r2, sp, #108	; 0x6c
    51b4:	ldr	r1, [sp, #12]
    51b6:	ldr	r0, [sp, #20]
    51b8:	bl	5c28 <__ssprint_r>
    51bc:	cmp	r0, #0
    51be:	beq.w	4cb4 <_svfprintf_r+0x5fc>
    51c2:	b.w	48a4 <_svfprintf_r+0x1ec>
    51c6:	ldr	r1, [sp, #36]	; 0x24
    51c8:	cmp.w	r8, #0
    51cc:	ldr	r4, [r1, #0]
    51ce:	strb.w	r3, [sp, #79]	; 0x4f
    51d2:	add.w	r7, r1, #4
    51d6:	mov.w	r5, #0
    51da:	blt.w	58c0 <_svfprintf_r+0x1208>
    51de:	orrs.w	r2, r4, r5
    51e2:	str	r7, [sp, #36]	; 0x24
    51e4:	bic.w	fp, fp, #128	; 0x80
    51e8:	mov	r7, r3
    51ea:	bne.w	4a02 <_svfprintf_r+0x34a>
    51ee:	cmp.w	r8, #0
    51f2:	beq.w	4f5c <_svfprintf_r+0x8a4>
    51f6:	movs	r4, #0
    51f8:	b.n	4d68 <_svfprintf_r+0x6b0>
    51fa:	add	r2, sp, #108	; 0x6c
    51fc:	ldr	r1, [sp, #12]
    51fe:	ldr	r0, [sp, #20]
    5200:	bl	5c28 <__ssprint_r>
    5204:	cmp	r0, #0
    5206:	bne.w	48a4 <_svfprintf_r+0x1ec>
    520a:	ldr	r3, [sp, #116]	; 0x74
    520c:	add.w	r9, sp, #160	; 0xa0
    5210:	b.n	4bf4 <_svfprintf_r+0x53c>
    5212:	add	r2, sp, #108	; 0x6c
    5214:	ldr	r1, [sp, #12]
    5216:	ldr	r0, [sp, #20]
    5218:	bl	5c28 <__ssprint_r>
    521c:	cmp	r0, #0
    521e:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5222:	ldr	r3, [sp, #116]	; 0x74
    5224:	add.w	r9, sp, #160	; 0xa0
    5228:	b.n	4b58 <_svfprintf_r+0x4a0>
    522a:	add	r2, sp, #108	; 0x6c
    522c:	ldr	r1, [sp, #12]
    522e:	ldr	r0, [sp, #20]
    5230:	bl	5c28 <__ssprint_r>
    5234:	cmp	r0, #0
    5236:	bne.w	48a4 <_svfprintf_r+0x1ec>
    523a:	ldr	r3, [sp, #116]	; 0x74
    523c:	add.w	r9, sp, #160	; 0xa0
    5240:	b.n	4b78 <_svfprintf_r+0x4c0>
    5242:	cmp.w	r8, #0
    5246:	strb.w	r7, [sp, #79]	; 0x4f
    524a:	blt.w	572c <_svfprintf_r+0x1074>
    524e:	orrs.w	r3, r4, r5
    5252:	bic.w	fp, fp, #128	; 0x80
    5256:	bne.w	4de2 <_svfprintf_r+0x72a>
    525a:	cmp.w	r8, #0
    525e:	beq.w	4f5a <_svfprintf_r+0x8a2>
    5262:	movs	r7, #0
    5264:	b.n	4fb6 <_svfprintf_r+0x8fe>
    5266:	ldr	r4, [sp, #84]	; 0x54
    5268:	cmp	r4, #0
    526a:	ble.w	5730 <_svfprintf_r+0x1078>
    526e:	ldr	r2, [sp, #56]	; 0x38
    5270:	ldr	r1, [sp, #52]	; 0x34
    5272:	cmp	r2, r1
    5274:	it	ge
    5276:	movge	r2, r1
    5278:	cmp	r2, #0
    527a:	mov	r4, r2
    527c:	ble.n	529a <_svfprintf_r+0xbe2>
    527e:	ldr	r2, [sp, #112]	; 0x70
    5280:	str.w	r6, [r9]
    5284:	adds	r2, #1
    5286:	add	r3, r4
    5288:	cmp	r2, #7
    528a:	str	r3, [sp, #116]	; 0x74
    528c:	str.w	r4, [r9, #4]
    5290:	str	r2, [sp, #112]	; 0x70
    5292:	bgt.w	597a <_svfprintf_r+0x12c2>
    5296:	add.w	r9, r9, #8
    529a:	ldr	r2, [sp, #56]	; 0x38
    529c:	cmp	r4, #0
    529e:	it	ge
    52a0:	subge	r2, r2, r4
    52a2:	cmp	r2, #0
    52a4:	mov	r4, r2
    52a6:	ble.w	548c <_svfprintf_r+0xdd4>
    52aa:	cmp	r4, #16
    52ac:	ldr	r2, [sp, #112]	; 0x70
    52ae:	ldr	r7, [pc, #772]	; (55b4 <_svfprintf_r+0xefc>)
    52b0:	ble.w	56e6 <_svfprintf_r+0x102e>
    52b4:	mov	r1, r9
    52b6:	movs	r5, #16
    52b8:	mov	r9, r6
    52ba:	ldr.w	r8, [sp, #20]
    52be:	ldr	r6, [sp, #12]
    52c0:	b.n	52cc <_svfprintf_r+0xc14>
    52c2:	adds	r1, #8
    52c4:	subs	r4, #16
    52c6:	cmp	r4, #16
    52c8:	ble.w	56e2 <_svfprintf_r+0x102a>
    52cc:	adds	r2, #1
    52ce:	adds	r3, #16
    52d0:	cmp	r2, #7
    52d2:	str	r3, [sp, #116]	; 0x74
    52d4:	str	r2, [sp, #112]	; 0x70
    52d6:	str	r7, [r1, #0]
    52d8:	str	r5, [r1, #4]
    52da:	ble.n	52c2 <_svfprintf_r+0xc0a>
    52dc:	add	r2, sp, #108	; 0x6c
    52de:	mov	r1, r6
    52e0:	mov	r0, r8
    52e2:	bl	5c28 <__ssprint_r>
    52e6:	cmp	r0, #0
    52e8:	bne.w	48a4 <_svfprintf_r+0x1ec>
    52ec:	ldr	r3, [sp, #116]	; 0x74
    52ee:	ldr	r2, [sp, #112]	; 0x70
    52f0:	add	r1, sp, #160	; 0xa0
    52f2:	b.n	52c4 <_svfprintf_r+0xc0c>
    52f4:	add	r2, sp, #108	; 0x6c
    52f6:	ldr	r1, [sp, #12]
    52f8:	ldr	r0, [sp, #20]
    52fa:	bl	5c28 <__ssprint_r>
    52fe:	cmp	r0, #0
    5300:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5304:	ldrb.w	r7, [sp, #79]	; 0x4f
    5308:	ldr	r3, [sp, #116]	; 0x74
    530a:	add.w	r9, sp, #160	; 0xa0
    530e:	b.n	4b38 <_svfprintf_r+0x480>
    5310:	ands.w	r2, fp, #16
    5314:	bne.w	51c6 <_svfprintf_r+0xb0e>
    5318:	ands.w	r3, fp, #64	; 0x40
    531c:	beq.w	51c6 <_svfprintf_r+0xb0e>
    5320:	ldr	r1, [sp, #36]	; 0x24
    5322:	strb.w	r2, [sp, #79]	; 0x4f
    5326:	mov	r3, r1
    5328:	cmp.w	r8, #0
    532c:	add.w	r3, r3, #4
    5330:	ldrh	r4, [r1, #0]
    5332:	mov.w	r5, #0
    5336:	blt.w	5862 <_svfprintf_r+0x11aa>
    533a:	orrs.w	r1, r4, r5
    533e:	bic.w	fp, fp, #128	; 0x80
    5342:	str	r3, [sp, #36]	; 0x24
    5344:	mov	r7, r2
    5346:	bne.w	4a02 <_svfprintf_r+0x34a>
    534a:	b.n	51ee <_svfprintf_r+0xb36>
    534c:	subs	r4, r1, #1
    534e:	cmp	r4, #0
    5350:	ble.w	5180 <_svfprintf_r+0xac8>
    5354:	cmp	r4, #16
    5356:	ldr	r7, [pc, #604]	; (55b4 <_svfprintf_r+0xefc>)
    5358:	ble.n	53a0 <_svfprintf_r+0xce8>
    535a:	movs	r5, #16
    535c:	ldr	r6, [sp, #20]
    535e:	ldr.w	r8, [sp, #12]
    5362:	b.n	536e <_svfprintf_r+0xcb6>
    5364:	subs	r4, #16
    5366:	cmp	r4, #16
    5368:	add.w	r9, r9, #8
    536c:	ble.n	53a0 <_svfprintf_r+0xce8>
    536e:	adds	r2, #1
    5370:	adds	r3, #16
    5372:	cmp	r2, #7
    5374:	str	r3, [sp, #116]	; 0x74
    5376:	str	r2, [sp, #112]	; 0x70
    5378:	str.w	r7, [r9]
    537c:	str.w	r5, [r9, #4]
    5380:	ble.n	5364 <_svfprintf_r+0xcac>
    5382:	add	r2, sp, #108	; 0x6c
    5384:	mov	r1, r8
    5386:	mov	r0, r6
    5388:	bl	5c28 <__ssprint_r>
    538c:	cmp	r0, #0
    538e:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5392:	subs	r4, #16
    5394:	cmp	r4, #16
    5396:	ldr	r3, [sp, #116]	; 0x74
    5398:	ldr	r2, [sp, #112]	; 0x70
    539a:	add.w	r9, sp, #160	; 0xa0
    539e:	bgt.n	536e <_svfprintf_r+0xcb6>
    53a0:	adds	r2, #1
    53a2:	add	r3, r4
    53a4:	cmp	r2, #7
    53a6:	str	r3, [sp, #116]	; 0x74
    53a8:	str	r2, [sp, #112]	; 0x70
    53aa:	str.w	r7, [r9]
    53ae:	str.w	r4, [r9, #4]
    53b2:	ble.w	517c <_svfprintf_r+0xac4>
    53b6:	add	r2, sp, #108	; 0x6c
    53b8:	ldr	r1, [sp, #12]
    53ba:	ldr	r0, [sp, #20]
    53bc:	bl	5c28 <__ssprint_r>
    53c0:	cmp	r0, #0
    53c2:	bne.w	48a4 <_svfprintf_r+0x1ec>
    53c6:	ldr	r3, [sp, #116]	; 0x74
    53c8:	ldr	r2, [sp, #112]	; 0x70
    53ca:	add.w	r9, sp, #160	; 0xa0
    53ce:	b.n	5180 <_svfprintf_r+0xac8>
    53d0:	tst.w	fp, #16
    53d4:	bne.n	543e <_svfprintf_r+0xd86>
    53d6:	tst.w	fp, #64	; 0x40
    53da:	beq.n	543e <_svfprintf_r+0xd86>
    53dc:	ldr	r1, [sp, #36]	; 0x24
    53de:	ldrsh.w	r4, [r1]
    53e2:	adds	r1, #4
    53e4:	asrs	r5, r4, #31
    53e6:	mov	r2, r4
    53e8:	mov	r3, r5
    53ea:	str	r1, [sp, #36]	; 0x24
    53ec:	b.w	49e0 <_svfprintf_r+0x328>
    53f0:	adds	r2, #1
    53f2:	add	r3, r4
    53f4:	cmp	r2, #7
    53f6:	str	r3, [sp, #116]	; 0x74
    53f8:	str	r2, [sp, #112]	; 0x70
    53fa:	str.w	r7, [r9]
    53fe:	str.w	r4, [r9, #4]
    5402:	ble.w	4c16 <_svfprintf_r+0x55e>
    5406:	b.n	519a <_svfprintf_r+0xae2>
    5408:	ldr	r1, [sp, #36]	; 0x24
    540a:	cmp.w	r8, #0
    540e:	ldr	r4, [r1, #0]
    5410:	strb.w	r3, [sp, #79]	; 0x4f
    5414:	add.w	r7, r1, #4
    5418:	mov.w	r5, #0
    541c:	blt.w	55aa <_svfprintf_r+0xef2>
    5420:	orrs.w	r2, r4, r5
    5424:	bic.w	fp, fp, #128	; 0x80
    5428:	str	r7, [sp, #36]	; 0x24
    542a:	beq.w	4f92 <_svfprintf_r+0x8da>
    542e:	mov	r7, r3
    5430:	b.w	48fc <_svfprintf_r+0x244>
    5434:	ldr	r4, [r3, #0]
    5436:	adds	r3, #4
    5438:	str	r3, [sp, #36]	; 0x24
    543a:	movs	r5, #0
    543c:	b.n	4dac <_svfprintf_r+0x6f4>
    543e:	ldr	r2, [sp, #36]	; 0x24
    5440:	ldr	r4, [r2, #0]
    5442:	mov	r3, r2
    5444:	adds	r3, #4
    5446:	asrs	r5, r4, #31
    5448:	mov	r2, r4
    544a:	str	r3, [sp, #36]	; 0x24
    544c:	cmp	r2, #0
    544e:	mov	r3, r5
    5450:	sbcs.w	r3, r3, #0
    5454:	bge.w	49ea <_svfprintf_r+0x332>
    5458:	negs	r4, r4
    545a:	mov.w	r7, #45	; 0x2d
    545e:	sbc.w	r5, r5, r5, lsl #1
    5462:	cmp.w	r8, #0
    5466:	strb.w	r7, [sp, #79]	; 0x4f
    546a:	blt.w	4a02 <_svfprintf_r+0x34a>
    546e:	bic.w	fp, fp, #128	; 0x80
    5472:	b.w	4a02 <_svfprintf_r+0x34a>
    5476:	add	r2, sp, #108	; 0x6c
    5478:	ldr	r1, [sp, #12]
    547a:	ldr	r0, [sp, #20]
    547c:	bl	5c28 <__ssprint_r>
    5480:	cmp	r0, #0
    5482:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5486:	ldr	r3, [sp, #116]	; 0x74
    5488:	add.w	r9, sp, #160	; 0xa0
    548c:	ldr	r1, [sp, #56]	; 0x38
    548e:	ldr	r2, [sp, #84]	; 0x54
    5490:	add	r1, r6
    5492:	mov	r5, r1
    5494:	ldr	r1, [sp, #52]	; 0x34
    5496:	cmp	r2, r1
    5498:	blt.n	552a <_svfprintf_r+0xe72>
    549a:	tst.w	fp, #1
    549e:	bne.n	552a <_svfprintf_r+0xe72>
    54a0:	ldr	r0, [sp, #52]	; 0x34
    54a2:	add	r6, r0
    54a4:	subs	r4, r6, r5
    54a6:	subs	r2, r0, r2
    54a8:	cmp	r4, r2
    54aa:	it	ge
    54ac:	movge	r4, r2
    54ae:	cmp	r4, #0
    54b0:	mov	r6, r4
    54b2:	ble.n	54d0 <_svfprintf_r+0xe18>
    54b4:	ldr	r1, [sp, #112]	; 0x70
    54b6:	str.w	r5, [r9]
    54ba:	adds	r1, #1
    54bc:	add	r3, r4
    54be:	cmp	r1, #7
    54c0:	str	r3, [sp, #116]	; 0x74
    54c2:	str.w	r4, [r9, #4]
    54c6:	str	r1, [sp, #112]	; 0x70
    54c8:	bgt.w	59cc <_svfprintf_r+0x1314>
    54cc:	add.w	r9, r9, #8
    54d0:	cmp	r6, #0
    54d2:	ite	ge
    54d4:	subge	r4, r2, r6
    54d6:	movlt	r4, r2
    54d8:	cmp	r4, #0
    54da:	ble.w	4c1a <_svfprintf_r+0x562>
    54de:	cmp	r4, #16
    54e0:	ldr	r2, [sp, #112]	; 0x70
    54e2:	ldr	r7, [pc, #208]	; (55b4 <_svfprintf_r+0xefc>)
    54e4:	ble.n	53f0 <_svfprintf_r+0xd38>
    54e6:	movs	r5, #16
    54e8:	ldr	r6, [sp, #20]
    54ea:	ldr.w	r8, [sp, #12]
    54ee:	b.n	54fc <_svfprintf_r+0xe44>
    54f0:	add.w	r9, r9, #8
    54f4:	subs	r4, #16
    54f6:	cmp	r4, #16
    54f8:	ble.w	53f0 <_svfprintf_r+0xd38>
    54fc:	adds	r2, #1
    54fe:	adds	r3, #16
    5500:	cmp	r2, #7
    5502:	str	r3, [sp, #116]	; 0x74
    5504:	str	r2, [sp, #112]	; 0x70
    5506:	str.w	r7, [r9]
    550a:	str.w	r5, [r9, #4]
    550e:	ble.n	54f0 <_svfprintf_r+0xe38>
    5510:	add	r2, sp, #108	; 0x6c
    5512:	mov	r1, r8
    5514:	mov	r0, r6
    5516:	bl	5c28 <__ssprint_r>
    551a:	cmp	r0, #0
    551c:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5520:	ldr	r3, [sp, #116]	; 0x74
    5522:	ldr	r2, [sp, #112]	; 0x70
    5524:	add.w	r9, sp, #160	; 0xa0
    5528:	b.n	54f4 <_svfprintf_r+0xe3c>
    552a:	ldr	r1, [sp, #112]	; 0x70
    552c:	ldr	r4, [sp, #60]	; 0x3c
    552e:	ldr	r0, [sp, #64]	; 0x40
    5530:	str.w	r0, [r9]
    5534:	adds	r1, #1
    5536:	add	r3, r4
    5538:	cmp	r1, #7
    553a:	str	r3, [sp, #116]	; 0x74
    553c:	str.w	r4, [r9, #4]
    5540:	str	r1, [sp, #112]	; 0x70
    5542:	bgt.w	5992 <_svfprintf_r+0x12da>
    5546:	add.w	r9, r9, #8
    554a:	b.n	54a0 <_svfprintf_r+0xde8>
    554c:	tst.w	fp, #1
    5550:	bne.w	512c <_svfprintf_r+0xa74>
    5554:	cmp	r2, #7
    5556:	ble.w	517c <_svfprintf_r+0xac4>
    555a:	b.n	53b6 <_svfprintf_r+0xcfe>
    555c:	add	r2, sp, #108	; 0x6c
    555e:	ldr	r1, [sp, #12]
    5560:	ldr	r0, [sp, #20]
    5562:	bl	5c28 <__ssprint_r>
    5566:	cmp	r0, #0
    5568:	bne.w	48a4 <_svfprintf_r+0x1ec>
    556c:	ldr	r3, [sp, #116]	; 0x74
    556e:	ldr	r2, [sp, #112]	; 0x70
    5570:	add.w	r9, sp, #160	; 0xa0
    5574:	b.n	5136 <_svfprintf_r+0xa7e>
    5576:	add	r2, sp, #108	; 0x6c
    5578:	ldr	r1, [sp, #12]
    557a:	ldr	r0, [sp, #20]
    557c:	bl	5c28 <__ssprint_r>
    5580:	cmp	r0, #0
    5582:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5586:	ldr	r3, [sp, #116]	; 0x74
    5588:	ldr	r2, [sp, #112]	; 0x70
    558a:	add.w	r9, sp, #160	; 0xa0
    558e:	b.n	5154 <_svfprintf_r+0xa9c>
    5590:	add	r2, sp, #108	; 0x6c
    5592:	ldr	r1, [sp, #12]
    5594:	ldr	r0, [sp, #20]
    5596:	bl	5c28 <__ssprint_r>
    559a:	cmp	r0, #0
    559c:	bne.w	48a4 <_svfprintf_r+0x1ec>
    55a0:	ldr	r3, [sp, #116]	; 0x74
    55a2:	add.w	r9, sp, #160	; 0xa0
    55a6:	b.w	4b80 <_svfprintf_r+0x4c8>
    55aa:	str	r7, [sp, #36]	; 0x24
    55ac:	movs	r7, #0
    55ae:	b.w	48fc <_svfprintf_r+0x244>
    55b2:	nop
    55b4:	.word	0x20000550
    55b8:	tst.w	fp, #16
    55bc:	bne.n	55d6 <_svfprintf_r+0xf1e>
    55be:	tst.w	fp, #64	; 0x40
    55c2:	beq.n	55d6 <_svfprintf_r+0xf1e>
    55c4:	ldr	r2, [sp, #36]	; 0x24
    55c6:	ldr	r3, [r2, #0]
    55c8:	adds	r2, #4
    55ca:	str	r2, [sp, #36]	; 0x24
    55cc:	ldrh.w	r2, [sp, #24]
    55d0:	strh	r2, [r3, #0]
    55d2:	b.w	4704 <_svfprintf_r+0x4c>
    55d6:	ldr	r2, [sp, #36]	; 0x24
    55d8:	ldr	r3, [r2, #0]
    55da:	adds	r2, #4
    55dc:	str	r2, [sp, #36]	; 0x24
    55de:	ldr	r2, [sp, #24]
    55e0:	str	r2, [r3, #0]
    55e2:	b.w	4704 <_svfprintf_r+0x4c>
    55e6:	vcmp.f64	d8, d8
    55ea:	vmrs	APSR_nzcv, fpscr
    55ee:	bvs.w	5b2e <_svfprintf_r+0x1476>
    55f2:	ldr	r3, [sp, #48]	; 0x30
    55f4:	cmp.w	r8, #4294967295
    55f8:	bic.w	r5, r3, #32
    55fc:	beq.w	5a4a <_svfprintf_r+0x1392>
    5600:	cmp	r5, #71	; 0x47
    5602:	beq.w	5852 <_svfprintf_r+0x119a>
    5606:	orr.w	r3, fp, #256	; 0x100
    560a:	str	r3, [sp, #40]	; 0x28
    560c:	vmov	r3, s17
    5610:	cmp	r3, #0
    5612:	blt.w	5a50 <_svfprintf_r+0x1398>
    5616:	vmov.f64	d10, d8
    561a:	movs	r7, #0
    561c:	ldr	r3, [sp, #48]	; 0x30
    561e:	cmp	r3, #102	; 0x66
    5620:	beq.w	5a28 <_svfprintf_r+0x1370>
    5624:	cmp	r3, #70	; 0x46
    5626:	beq.w	5802 <_svfprintf_r+0x114a>
    562a:	vmov.f64	d0, d10
    562e:	cmp	r5, #69	; 0x45
    5630:	ite	eq
    5632:	addeq.w	r4, r8, #1
    5636:	movne	r4, r8
    5638:	add	r2, sp, #100	; 0x64
    563a:	add	r3, sp, #88	; 0x58
    563c:	str	r2, [sp, #4]
    563e:	str	r3, [sp, #0]
    5640:	mov	r2, r4
    5642:	add	r3, sp, #84	; 0x54
    5644:	movs	r1, #2
    5646:	ldr	r0, [sp, #20]
    5648:	bl	3a30 <_dtoa_r>
    564c:	ldr	r3, [sp, #48]	; 0x30
    564e:	cmp	r3, #103	; 0x67
    5650:	mov	r6, r0
    5652:	bne.w	5a72 <_svfprintf_r+0x13ba>
    5656:	tst.w	fp, #1
    565a:	beq.w	5b2a <_svfprintf_r+0x1472>
    565e:	adds	r1, r6, r4
    5660:	vcmp.f64	d10, #0.0
    5664:	vmrs	APSR_nzcv, fpscr
    5668:	beq.w	5976 <_svfprintf_r+0x12be>
    566c:	ldr	r3, [sp, #100]	; 0x64
    566e:	cmp	r1, r3
    5670:	bls.n	5680 <_svfprintf_r+0xfc8>
    5672:	movs	r0, #48	; 0x30
    5674:	adds	r2, r3, #1
    5676:	str	r2, [sp, #100]	; 0x64
    5678:	strb	r0, [r3, #0]
    567a:	ldr	r3, [sp, #100]	; 0x64
    567c:	cmp	r1, r3
    567e:	bhi.n	5674 <_svfprintf_r+0xfbc>
    5680:	subs	r3, r3, r6
    5682:	cmp	r5, #71	; 0x47
    5684:	str	r3, [sp, #52]	; 0x34
    5686:	beq.w	58c8 <_svfprintf_r+0x1210>
    568a:	ldr	r3, [sp, #48]	; 0x30
    568c:	cmp	r3, #101	; 0x65
    568e:	ble.w	5a90 <_svfprintf_r+0x13d8>
    5692:	ldr	r3, [sp, #48]	; 0x30
    5694:	cmp	r3, #102	; 0x66
    5696:	ldr	r3, [sp, #84]	; 0x54
    5698:	beq.w	5a94 <_svfprintf_r+0x13dc>
    569c:	str	r3, [sp, #56]	; 0x38
    569e:	ldr	r2, [sp, #56]	; 0x38
    56a0:	ldr	r1, [sp, #52]	; 0x34
    56a2:	cmp	r2, r1
    56a4:	blt.w	5a58 <_svfprintf_r+0x13a0>
    56a8:	tst.w	fp, #1
    56ac:	bne.w	5b18 <_svfprintf_r+0x1460>
    56b0:	bic.w	r3, r2, r2, asr #31
    56b4:	str	r2, [sp, #32]
    56b6:	movs	r2, #103	; 0x67
    56b8:	str	r2, [sp, #48]	; 0x30
    56ba:	cmp	r7, #0
    56bc:	bne.w	58ac <_svfprintf_r+0x11f4>
    56c0:	mov	r8, r7
    56c2:	str	r3, [sp, #16]
    56c4:	ldr.w	fp, [sp, #40]	; 0x28
    56c8:	ldrb.w	r7, [sp, #79]	; 0x4f
    56cc:	b.w	4a9c <_svfprintf_r+0x3e4>
    56d0:	bic.w	r7, r7, #7
    56d4:	add.w	r3, r7, #8
    56d8:	vldr	d8, [r7]
    56dc:	str	r3, [sp, #36]	; 0x24
    56de:	b.w	4a5e <_svfprintf_r+0x3a6>
    56e2:	mov	r6, r9
    56e4:	mov	r9, r1
    56e6:	adds	r2, #1
    56e8:	add	r3, r4
    56ea:	cmp	r2, #7
    56ec:	str	r3, [sp, #116]	; 0x74
    56ee:	str	r2, [sp, #112]	; 0x70
    56f0:	str.w	r7, [r9]
    56f4:	str.w	r4, [r9, #4]
    56f8:	bgt.w	5476 <_svfprintf_r+0xdbe>
    56fc:	add.w	r9, r9, #8
    5700:	b.n	548c <_svfprintf_r+0xdd4>
    5702:	movs	r7, #0
    5704:	cmp	r8, r7
    5706:	strb.w	r7, [sp, #79]	; 0x4f
    570a:	blt.w	4fb6 <_svfprintf_r+0x8fe>
    570e:	bic.w	fp, fp, #128	; 0x80
    5712:	b.n	4f52 <_svfprintf_r+0x89a>
    5714:	add	r2, sp, #108	; 0x6c
    5716:	ldr	r1, [sp, #12]
    5718:	ldr	r0, [sp, #20]
    571a:	bl	5c28 <__ssprint_r>
    571e:	cmp	r0, #0
    5720:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5724:	ldr	r3, [sp, #116]	; 0x74
    5726:	add.w	r9, sp, #160	; 0xa0
    572a:	b.n	4ff4 <_svfprintf_r+0x93c>
    572c:	ldr	r7, [sp, #36]	; 0x24
    572e:	b.n	4fa8 <_svfprintf_r+0x8f0>
    5730:	ldr	r2, [sp, #112]	; 0x70
    5732:	ldr	r1, [pc, #740]	; (5a18 <_svfprintf_r+0x1360>)
    5734:	str.w	r1, [r9]
    5738:	adds	r2, #1
    573a:	adds	r3, #1
    573c:	movs	r1, #1
    573e:	cmp	r2, #7
    5740:	str	r3, [sp, #116]	; 0x74
    5742:	str	r2, [sp, #112]	; 0x70
    5744:	str.w	r1, [r9, #4]
    5748:	bgt.n	5838 <_svfprintf_r+0x1180>
    574a:	add.w	r9, r9, #8
    574e:	cbnz	r4, 575c <_svfprintf_r+0x10a4>
    5750:	ldr	r2, [sp, #52]	; 0x34
    5752:	cbnz	r2, 575c <_svfprintf_r+0x10a4>
    5754:	tst.w	fp, #1
    5758:	beq.w	4c1a <_svfprintf_r+0x562>
    575c:	ldr	r2, [sp, #112]	; 0x70
    575e:	ldr	r0, [sp, #60]	; 0x3c
    5760:	ldr	r1, [sp, #64]	; 0x40
    5762:	str.w	r1, [r9]
    5766:	adds	r2, #1
    5768:	add	r3, r0
    576a:	cmp	r2, #7
    576c:	str	r3, [sp, #116]	; 0x74
    576e:	str.w	r0, [r9, #4]
    5772:	str	r2, [sp, #112]	; 0x70
    5774:	bgt.w	5ae4 <_svfprintf_r+0x142c>
    5778:	add.w	r9, r9, #8
    577c:	negs	r4, r4
    577e:	cmp	r4, #0
    5780:	ble.w	5892 <_svfprintf_r+0x11da>
    5784:	cmp	r4, #16
    5786:	ldr	r7, [pc, #660]	; (5a1c <_svfprintf_r+0x1364>)
    5788:	ble.w	59b0 <_svfprintf_r+0x12f8>
    578c:	mov	r1, r9
    578e:	movs	r5, #16
    5790:	mov	r9, r6
    5792:	ldr.w	r8, [sp, #20]
    5796:	ldr	r6, [sp, #12]
    5798:	b.n	57a4 <_svfprintf_r+0x10ec>
    579a:	adds	r1, #8
    579c:	subs	r4, #16
    579e:	cmp	r4, #16
    57a0:	ble.w	59ac <_svfprintf_r+0x12f4>
    57a4:	adds	r2, #1
    57a6:	adds	r3, #16
    57a8:	cmp	r2, #7
    57aa:	str	r3, [sp, #116]	; 0x74
    57ac:	str	r2, [sp, #112]	; 0x70
    57ae:	str	r7, [r1, #0]
    57b0:	str	r5, [r1, #4]
    57b2:	ble.n	579a <_svfprintf_r+0x10e2>
    57b4:	add	r2, sp, #108	; 0x6c
    57b6:	mov	r1, r6
    57b8:	mov	r0, r8
    57ba:	bl	5c28 <__ssprint_r>
    57be:	cmp	r0, #0
    57c0:	bne.w	48a4 <_svfprintf_r+0x1ec>
    57c4:	ldr	r3, [sp, #116]	; 0x74
    57c6:	ldr	r2, [sp, #112]	; 0x70
    57c8:	add	r1, sp, #160	; 0xa0
    57ca:	b.n	579c <_svfprintf_r+0x10e4>
    57cc:	add	r2, sp, #108	; 0x6c
    57ce:	ldr	r1, [sp, #12]
    57d0:	ldr	r0, [sp, #20]
    57d2:	bl	5c28 <__ssprint_r>
    57d6:	cmp	r0, #0
    57d8:	bne.w	48a4 <_svfprintf_r+0x1ec>
    57dc:	ldr	r3, [sp, #116]	; 0x74
    57de:	add.w	r9, sp, #160	; 0xa0
    57e2:	b.n	5024 <_svfprintf_r+0x96c>
    57e4:	movs	r1, #64	; 0x40
    57e6:	ldr	r0, [sp, #20]
    57e8:	bl	21b4 <_malloc_r>
    57ec:	ldr	r2, [sp, #12]
    57ee:	str	r0, [r2, #0]
    57f0:	str	r0, [r2, #16]
    57f2:	cmp	r0, #0
    57f4:	beq.w	5bd2 <_svfprintf_r+0x151a>
    57f8:	ldr	r2, [sp, #12]
    57fa:	movs	r3, #64	; 0x40
    57fc:	str	r3, [r2, #20]
    57fe:	b.w	46ea <_svfprintf_r+0x32>
    5802:	add	r2, sp, #100	; 0x64
    5804:	add	r3, sp, #88	; 0x58
    5806:	str	r2, [sp, #4]
    5808:	str	r3, [sp, #0]
    580a:	mov	r2, r8
    580c:	add	r3, sp, #84	; 0x54
    580e:	movs	r1, #3
    5810:	vmov.f64	d0, d10
    5814:	ldr	r0, [sp, #20]
    5816:	bl	3a30 <_dtoa_r>
    581a:	mov	r4, r8
    581c:	mov	r6, r0
    581e:	ldr	r3, [sp, #48]	; 0x30
    5820:	cmp	r3, #70	; 0x46
    5822:	add.w	r1, r6, r4
    5826:	bne.w	5660 <_svfprintf_r+0xfa8>
    582a:	ldrb	r3, [r6, #0]
    582c:	cmp	r3, #48	; 0x30
    582e:	beq.w	5b4c <_svfprintf_r+0x1494>
    5832:	ldr	r4, [sp, #84]	; 0x54
    5834:	add	r1, r4
    5836:	b.n	5660 <_svfprintf_r+0xfa8>
    5838:	add	r2, sp, #108	; 0x6c
    583a:	ldr	r1, [sp, #12]
    583c:	ldr	r0, [sp, #20]
    583e:	bl	5c28 <__ssprint_r>
    5842:	cmp	r0, #0
    5844:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5848:	ldr	r4, [sp, #84]	; 0x54
    584a:	ldr	r3, [sp, #116]	; 0x74
    584c:	add.w	r9, sp, #160	; 0xa0
    5850:	b.n	574e <_svfprintf_r+0x1096>
    5852:	cmp.w	r8, #0
    5856:	it	eq
    5858:	moveq.w	r8, #1
    585c:	b.n	5606 <_svfprintf_r+0xf4e>
    585e:	str	r3, [sp, #36]	; 0x24
    5860:	b.n	55ac <_svfprintf_r+0xef4>
    5862:	str	r3, [sp, #36]	; 0x24
    5864:	mov	r7, r2
    5866:	b.w	4d60 <_svfprintf_r+0x6a8>
    586a:	mov	r0, r6
    586c:	bl	2cc0 <strlen>
    5870:	mov	r8, r4
    5872:	mov	r3, r0
    5874:	str	r0, [sp, #32]
    5876:	b.w	4f3c <_svfprintf_r+0x884>
    587a:	add	r2, sp, #108	; 0x6c
    587c:	ldr	r1, [sp, #12]
    587e:	ldr	r0, [sp, #20]
    5880:	bl	5c28 <__ssprint_r>
    5884:	cmp	r0, #0
    5886:	bne.w	48a4 <_svfprintf_r+0x1ec>
    588a:	ldr	r3, [sp, #116]	; 0x74
    588c:	ldr	r2, [sp, #112]	; 0x70
    588e:	add.w	r9, sp, #160	; 0xa0
    5892:	ldr	r0, [sp, #52]	; 0x34
    5894:	str.w	r6, [r9]
    5898:	adds	r2, #1
    589a:	add	r3, r0
    589c:	cmp	r2, #7
    589e:	str	r3, [sp, #116]	; 0x74
    58a0:	str	r2, [sp, #112]	; 0x70
    58a2:	str.w	r0, [r9, #4]
    58a6:	ble.w	4c16 <_svfprintf_r+0x55e>
    58aa:	b.n	519a <_svfprintf_r+0xae2>
    58ac:	movs	r7, #45	; 0x2d
    58ae:	str	r3, [sp, #16]
    58b0:	ldr.w	fp, [sp, #40]	; 0x28
    58b4:	strb.w	r7, [sp, #79]	; 0x4f
    58b8:	mov.w	r8, #0
    58bc:	b.w	4a9e <_svfprintf_r+0x3e6>
    58c0:	str	r7, [sp, #36]	; 0x24
    58c2:	mov	r7, r3
    58c4:	b.w	4d60 <_svfprintf_r+0x6a8>
    58c8:	ldr	r3, [sp, #84]	; 0x54
    58ca:	adds	r2, r3, #3
    58cc:	blt.n	58d4 <_svfprintf_r+0x121c>
    58ce:	cmp	r8, r3
    58d0:	bge.w	569c <_svfprintf_r+0xfe4>
    58d4:	ldr	r2, [sp, #48]	; 0x30
    58d6:	subs	r2, #2
    58d8:	str	r2, [sp, #48]	; 0x30
    58da:	subs	r3, #1
    58dc:	cmp	r3, #0
    58de:	ldrb.w	r2, [sp, #48]	; 0x30
    58e2:	str	r3, [sp, #84]	; 0x54
    58e4:	it	lt
    58e6:	neglt	r3, r3
    58e8:	strb.w	r2, [sp, #92]	; 0x5c
    58ec:	ite	lt
    58ee:	movlt	r2, #45	; 0x2d
    58f0:	movge	r2, #43	; 0x2b
    58f2:	cmp	r3, #9
    58f4:	strb.w	r2, [sp, #93]	; 0x5d
    58f8:	ble.w	5b08 <_svfprintf_r+0x1450>
    58fc:	add.w	r0, sp, #107	; 0x6b
    5900:	mov	r4, r0
    5902:	ldr	r2, [pc, #284]	; (5a20 <_svfprintf_r+0x1368>)
    5904:	smull	r2, r1, r2, r3
    5908:	asrs	r2, r3, #31
    590a:	rsb	r2, r2, r1, asr #2
    590e:	add.w	r1, r2, r2, lsl #2
    5912:	sub.w	r3, r3, r1, lsl #1
    5916:	add.w	r1, r3, #48	; 0x30
    591a:	cmp	r2, #9
    591c:	mov	r3, r2
    591e:	strb.w	r1, [r4, #-1]!
    5922:	bgt.n	5902 <_svfprintf_r+0x124a>
    5924:	mov	r1, r4
    5926:	adds	r3, #48	; 0x30
    5928:	uxtb	r2, r3
    592a:	strb.w	r2, [r1, #-1]!
    592e:	cmp	r0, r1
    5930:	bls.w	5bf8 <_svfprintf_r+0x1540>
    5934:	add.w	r1, sp, #94	; 0x5e
    5938:	mov	r3, r4
    593a:	b.n	5940 <_svfprintf_r+0x1288>
    593c:	ldrb.w	r2, [r3], #1
    5940:	strb.w	r2, [r1], #1
    5944:	cmp	r0, r3
    5946:	bne.n	593c <_svfprintf_r+0x1284>
    5948:	adds	r3, r0, #1
    594a:	subs	r3, r3, r4
    594c:	add.w	r2, sp, #94	; 0x5e
    5950:	add	r3, r2
    5952:	add	r2, sp, #92	; 0x5c
    5954:	subs	r3, r3, r2
    5956:	ldr	r2, [sp, #52]	; 0x34
    5958:	str	r3, [sp, #68]	; 0x44
    595a:	cmp	r2, #1
    595c:	add	r3, r2
    595e:	str	r3, [sp, #32]
    5960:	ble.w	5b62 <_svfprintf_r+0x14aa>
    5964:	ldr	r3, [sp, #32]
    5966:	ldr	r2, [sp, #60]	; 0x3c
    5968:	add	r3, r2
    596a:	movs	r2, #0
    596c:	str	r3, [sp, #32]
    596e:	str	r2, [sp, #56]	; 0x38
    5970:	bic.w	r3, r3, r3, asr #31
    5974:	b.n	56ba <_svfprintf_r+0x1002>
    5976:	mov	r3, r1
    5978:	b.n	5680 <_svfprintf_r+0xfc8>
    597a:	add	r2, sp, #108	; 0x6c
    597c:	ldr	r1, [sp, #12]
    597e:	ldr	r0, [sp, #20]
    5980:	bl	5c28 <__ssprint_r>
    5984:	cmp	r0, #0
    5986:	bne.w	48a4 <_svfprintf_r+0x1ec>
    598a:	ldr	r3, [sp, #116]	; 0x74
    598c:	add.w	r9, sp, #160	; 0xa0
    5990:	b.n	529a <_svfprintf_r+0xbe2>
    5992:	add	r2, sp, #108	; 0x6c
    5994:	ldr	r1, [sp, #12]
    5996:	ldr	r0, [sp, #20]
    5998:	bl	5c28 <__ssprint_r>
    599c:	cmp	r0, #0
    599e:	bne.w	48a4 <_svfprintf_r+0x1ec>
    59a2:	ldr	r2, [sp, #84]	; 0x54
    59a4:	ldr	r3, [sp, #116]	; 0x74
    59a6:	add.w	r9, sp, #160	; 0xa0
    59aa:	b.n	54a0 <_svfprintf_r+0xde8>
    59ac:	mov	r6, r9
    59ae:	mov	r9, r1
    59b0:	adds	r2, #1
    59b2:	add	r3, r4
    59b4:	cmp	r2, #7
    59b6:	str	r3, [sp, #116]	; 0x74
    59b8:	str	r2, [sp, #112]	; 0x70
    59ba:	str.w	r7, [r9]
    59be:	str.w	r4, [r9, #4]
    59c2:	bgt.w	587a <_svfprintf_r+0x11c2>
    59c6:	add.w	r9, r9, #8
    59ca:	b.n	5892 <_svfprintf_r+0x11da>
    59cc:	add	r2, sp, #108	; 0x6c
    59ce:	ldr	r1, [sp, #12]
    59d0:	ldr	r0, [sp, #20]
    59d2:	bl	5c28 <__ssprint_r>
    59d6:	cmp	r0, #0
    59d8:	bne.w	48a4 <_svfprintf_r+0x1ec>
    59dc:	ldr	r2, [sp, #84]	; 0x54
    59de:	ldr	r1, [sp, #52]	; 0x34
    59e0:	ldr	r3, [sp, #116]	; 0x74
    59e2:	subs	r2, r1, r2
    59e4:	add.w	r9, sp, #160	; 0xa0
    59e8:	b.n	54d0 <_svfprintf_r+0xe18>
    59ea:	cmp	r5, #6
    59ec:	mov	r3, r5
    59ee:	it	cs
    59f0:	movcs	r3, #6
    59f2:	str	r3, [sp, #32]
    59f4:	bic.w	r3, r3, r3, asr #31
    59f8:	mov	r8, r6
    59fa:	str	r7, [sp, #36]	; 0x24
    59fc:	str	r6, [sp, #56]	; 0x38
    59fe:	mov	r7, r6
    5a00:	str	r3, [sp, #16]
    5a02:	ldr	r6, [pc, #32]	; (5a24 <_svfprintf_r+0x136c>)
    5a04:	b.w	4a9c <_svfprintf_r+0x3e4>
    5a08:	mov	fp, r3
    5a0a:	b.w	4de2 <_svfprintf_r+0x72a>
    5a0e:	movs	r7, #45	; 0x2d
    5a10:	strb.w	r7, [sp, #79]	; 0x4f
    5a14:	b.w	4a7e <_svfprintf_r+0x3c6>
    5a18:	.word	0x2000054c
    5a1c:	.word	0x20000550
    5a20:	.word	0x66666667
    5a24:	.word	0x20000598
    5a28:	add	r2, sp, #100	; 0x64
    5a2a:	add	r3, sp, #88	; 0x58
    5a2c:	str	r2, [sp, #4]
    5a2e:	str	r3, [sp, #0]
    5a30:	movs	r1, #3
    5a32:	add	r3, sp, #84	; 0x54
    5a34:	mov	r2, r8
    5a36:	vmov.f64	d0, d10
    5a3a:	ldr	r0, [sp, #20]
    5a3c:	bl	3a30 <_dtoa_r>
    5a40:	mov	r4, r8
    5a42:	mov	r6, r0
    5a44:	add.w	r1, r0, r8
    5a48:	b.n	582a <_svfprintf_r+0x1172>
    5a4a:	mov.w	r8, #6
    5a4e:	b.n	5606 <_svfprintf_r+0xf4e>
    5a50:	vneg.f64	d10, d8
    5a54:	movs	r7, #45	; 0x2d
    5a56:	b.n	561c <_svfprintf_r+0xf64>
    5a58:	ldr	r2, [sp, #60]	; 0x3c
    5a5a:	ldr	r3, [sp, #52]	; 0x34
    5a5c:	add	r3, r2
    5a5e:	ldr	r2, [sp, #56]	; 0x38
    5a60:	str	r3, [sp, #32]
    5a62:	cmp	r2, #0
    5a64:	ble.w	5b74 <_svfprintf_r+0x14bc>
    5a68:	movs	r2, #103	; 0x67
    5a6a:	bic.w	r3, r3, r3, asr #31
    5a6e:	str	r2, [sp, #48]	; 0x30
    5a70:	b.n	56ba <_svfprintf_r+0x1002>
    5a72:	ldr	r3, [sp, #48]	; 0x30
    5a74:	cmp	r3, #71	; 0x47
    5a76:	bne.w	565e <_svfprintf_r+0xfa6>
    5a7a:	tst.w	fp, #1
    5a7e:	bne.w	581e <_svfprintf_r+0x1166>
    5a82:	ldr	r3, [sp, #100]	; 0x64
    5a84:	cmp	r5, #71	; 0x47
    5a86:	sub.w	r3, r3, r6
    5a8a:	str	r3, [sp, #52]	; 0x34
    5a8c:	beq.w	58c8 <_svfprintf_r+0x1210>
    5a90:	ldr	r3, [sp, #84]	; 0x54
    5a92:	b.n	58da <_svfprintf_r+0x1222>
    5a94:	cmp	r3, #0
    5a96:	mov	r2, r3
    5a98:	str	r3, [sp, #56]	; 0x38
    5a9a:	ble.n	5b84 <_svfprintf_r+0x14cc>
    5a9c:	cmp.w	r8, #0
    5aa0:	bne.n	5b3a <_svfprintf_r+0x1482>
    5aa2:	tst.w	fp, #1
    5aa6:	bne.n	5b3a <_svfprintf_r+0x1482>
    5aa8:	bic.w	r3, r3, r3, asr #31
    5aac:	str	r2, [sp, #32]
    5aae:	b.n	56ba <_svfprintf_r+0x1002>
    5ab0:	tst.w	fp, #1
    5ab4:	mov	r7, r8
    5ab6:	beq.n	5ac4 <_svfprintf_r+0x140c>
    5ab8:	add	r6, sp, #224	; 0xe0
    5aba:	movs	r3, #48	; 0x30
    5abc:	strb.w	r3, [r6, #-65]!
    5ac0:	b.w	4d70 <_svfprintf_r+0x6b8>
    5ac4:	str.w	r8, [sp, #32]
    5ac8:	add	r6, sp, #160	; 0xa0
    5aca:	b.w	4d76 <_svfprintf_r+0x6be>
    5ace:	bic.w	r3, r5, r5, asr #31
    5ad2:	str	r7, [sp, #36]	; 0x24
    5ad4:	str	r3, [sp, #16]
    5ad6:	str	r5, [sp, #32]
    5ad8:	mov	r8, r0
    5ada:	str	r0, [sp, #56]	; 0x38
    5adc:	ldrb.w	r7, [sp, #79]	; 0x4f
    5ae0:	b.w	4a9c <_svfprintf_r+0x3e4>
    5ae4:	add	r2, sp, #108	; 0x6c
    5ae6:	ldr	r1, [sp, #12]
    5ae8:	ldr	r0, [sp, #20]
    5aea:	bl	5c28 <__ssprint_r>
    5aee:	cmp	r0, #0
    5af0:	bne.w	48a4 <_svfprintf_r+0x1ec>
    5af4:	ldr	r4, [sp, #84]	; 0x54
    5af6:	ldr	r3, [sp, #116]	; 0x74
    5af8:	ldr	r2, [sp, #112]	; 0x70
    5afa:	add.w	r9, sp, #160	; 0xa0
    5afe:	b.n	577c <_svfprintf_r+0x10c4>
    5b00:	mov	sl, r4
    5b02:	movs	r5, #0
    5b04:	b.w	476e <_svfprintf_r+0xb6>
    5b08:	adds	r3, #48	; 0x30
    5b0a:	movs	r2, #48	; 0x30
    5b0c:	strb.w	r3, [sp, #95]	; 0x5f
    5b10:	strb.w	r2, [sp, #94]	; 0x5e
    5b14:	add	r3, sp, #96	; 0x60
    5b16:	b.n	5952 <_svfprintf_r+0x129a>
    5b18:	ldr	r2, [sp, #60]	; 0x3c
    5b1a:	ldr	r3, [sp, #56]	; 0x38
    5b1c:	add	r3, r2
    5b1e:	movs	r2, #103	; 0x67
    5b20:	str	r3, [sp, #32]
    5b22:	str	r2, [sp, #48]	; 0x30
    5b24:	bic.w	r3, r3, r3, asr #31
    5b28:	b.n	56ba <_svfprintf_r+0x1002>
    5b2a:	ldr	r3, [sp, #100]	; 0x64
    5b2c:	b.n	5680 <_svfprintf_r+0xfc8>
    5b2e:	ldr	r6, [pc, #240]	; (5c20 <_svfprintf_r+0x1568>)
    5b30:	ldr	r3, [pc, #240]	; (5c24 <_svfprintf_r+0x156c>)
    5b32:	ldrb.w	r7, [sp, #79]	; 0x4f
    5b36:	b.w	4a82 <_svfprintf_r+0x3ca>
    5b3a:	ldr	r3, [sp, #56]	; 0x38
    5b3c:	ldr	r2, [sp, #60]	; 0x3c
    5b3e:	adds	r5, r3, r2
    5b40:	add.w	r3, r5, r8
    5b44:	str	r3, [sp, #32]
    5b46:	bic.w	r3, r3, r3, asr #31
    5b4a:	b.n	56ba <_svfprintf_r+0x1002>
    5b4c:	vcmp.f64	d10, #0.0
    5b50:	vmrs	APSR_nzcv, fpscr
    5b54:	beq.w	5832 <_svfprintf_r+0x117a>
    5b58:	rsb	r4, r4, #1
    5b5c:	str	r4, [sp, #84]	; 0x54
    5b5e:	add	r1, r4
    5b60:	b.n	5660 <_svfprintf_r+0xfa8>
    5b62:	ands.w	r3, fp, #1
    5b66:	bne.w	5964 <_svfprintf_r+0x12ac>
    5b6a:	str	r3, [sp, #56]	; 0x38
    5b6c:	ldr	r3, [sp, #32]
    5b6e:	bic.w	r3, r3, r3, asr #31
    5b72:	b.n	56ba <_svfprintf_r+0x1002>
    5b74:	ldr	r3, [sp, #56]	; 0x38
    5b76:	ldr	r2, [sp, #32]
    5b78:	rsb	r3, r3, #1
    5b7c:	add	r2, r3
    5b7e:	mov	r3, r2
    5b80:	str	r2, [sp, #32]
    5b82:	b.n	5a68 <_svfprintf_r+0x13b0>
    5b84:	cmp.w	r8, #0
    5b88:	bne.n	5b90 <_svfprintf_r+0x14d8>
    5b8a:	tst.w	fp, #1
    5b8e:	beq.n	5ba0 <_svfprintf_r+0x14e8>
    5b90:	ldr	r3, [sp, #60]	; 0x3c
    5b92:	adds	r5, r3, #1
    5b94:	add.w	r3, r5, r8
    5b98:	str	r3, [sp, #32]
    5b9a:	bic.w	r3, r3, r3, asr #31
    5b9e:	b.n	56ba <_svfprintf_r+0x1002>
    5ba0:	movs	r3, #1
    5ba2:	str	r3, [sp, #32]
    5ba4:	b.n	56ba <_svfprintf_r+0x1002>
    5ba6:	ldr	r0, [sp, #36]	; 0x24
    5ba8:	ldrb.w	r3, [sl, #1]
    5bac:	ldr	r5, [r0, #0]
    5bae:	adds	r0, #4
    5bb0:	cmp	r5, #0
    5bb2:	str	r0, [sp, #36]	; 0x24
    5bb4:	mov	sl, r4
    5bb6:	bge.w	476a <_svfprintf_r+0xb2>
    5bba:	mov.w	r5, #4294967295
    5bbe:	b.w	476a <_svfprintf_r+0xb2>
    5bc2:	strb.w	r1, [sp, #79]	; 0x4f
    5bc6:	b.w	4ee4 <_svfprintf_r+0x82c>
    5bca:	strb.w	r1, [sp, #79]	; 0x4f
    5bce:	b.w	4f70 <_svfprintf_r+0x8b8>
    5bd2:	ldr	r2, [sp, #20]
    5bd4:	movs	r3, #12
    5bd6:	str	r3, [r2, #0]
    5bd8:	mov.w	r0, #4294967295
    5bdc:	b.w	48b6 <_svfprintf_r+0x1fe>
    5be0:	strb.w	r1, [sp, #79]	; 0x4f
    5be4:	b.w	4d90 <_svfprintf_r+0x6d8>
    5be8:	strb.w	r1, [sp, #79]	; 0x4f
    5bec:	b.w	4d36 <_svfprintf_r+0x67e>
    5bf0:	strb.w	r1, [sp, #79]	; 0x4f
    5bf4:	b.w	4e9c <_svfprintf_r+0x7e4>
    5bf8:	add.w	r3, sp, #94	; 0x5e
    5bfc:	b.n	5952 <_svfprintf_r+0x129a>
    5bfe:	strb.w	r1, [sp, #79]	; 0x4f
    5c02:	b.w	48ca <_svfprintf_r+0x212>
    5c06:	strb.w	r1, [sp, #79]	; 0x4f
    5c0a:	b.w	4cd2 <_svfprintf_r+0x61a>
    5c0e:	strb.w	r1, [sp, #79]	; 0x4f
    5c12:	b.w	4a42 <_svfprintf_r+0x38a>
    5c16:	strb.w	r1, [sp, #79]	; 0x4f
    5c1a:	b.w	49be <_svfprintf_r+0x306>
    5c1e:	nop
    5c20:	.word	0x2000056c
    5c24:	.word	0x20000568

00005c28 <__ssprint_r>:
    5c28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c2c:	ldr	r3, [r2, #8]
    5c2e:	sub	sp, #12
    5c30:	mov	r8, r2
    5c32:	cmp	r3, #0
    5c34:	beq.n	5d1c <__ssprint_r+0xf4>
    5c36:	mov	fp, r0
    5c38:	mov.w	r9, #0
    5c3c:	ldr	r6, [r2, #0]
    5c3e:	ldr	r0, [r1, #0]
    5c40:	ldr	r3, [r1, #8]
    5c42:	mov	r5, r1
    5c44:	mov	r4, r9
    5c46:	cmp	r4, #0
    5c48:	beq.n	5cd6 <__ssprint_r+0xae>
    5c4a:	cmp	r4, r3
    5c4c:	mov	r7, r3
    5c4e:	mov	sl, r3
    5c50:	bcc.n	5ce0 <__ssprint_r+0xb8>
    5c52:	ldrh	r3, [r5, #12]
    5c54:	tst.w	r3, #1152	; 0x480
    5c58:	beq.n	5cb6 <__ssprint_r+0x8e>
    5c5a:	ldr	r7, [r5, #20]
    5c5c:	ldr	r1, [r5, #16]
    5c5e:	add.w	r7, r7, r7, lsl #1
    5c62:	rsb	sl, r1, r0
    5c66:	add.w	r7, r7, r7, lsr #31
    5c6a:	adds	r0, r4, #1
    5c6c:	asrs	r7, r7, #1
    5c6e:	add	r0, sl
    5c70:	cmp	r0, r7
    5c72:	mov	r2, r7
    5c74:	itt	hi
    5c76:	movhi	r7, r0
    5c78:	movhi	r2, r7
    5c7a:	lsls	r3, r3, #21
    5c7c:	bpl.n	5ce6 <__ssprint_r+0xbe>
    5c7e:	mov	r1, r2
    5c80:	mov	r0, fp
    5c82:	bl	21b4 <_malloc_r>
    5c86:	cmp	r0, #0
    5c88:	beq.n	5cfa <__ssprint_r+0xd2>
    5c8a:	mov	r2, sl
    5c8c:	ldr	r1, [r5, #16]
    5c8e:	str	r0, [sp, #4]
    5c90:	bl	1fac <memcpy>
    5c94:	ldrh	r2, [r5, #12]
    5c96:	ldr	r3, [sp, #4]
    5c98:	bic.w	r2, r2, #1152	; 0x480
    5c9c:	orr.w	r2, r2, #128	; 0x80
    5ca0:	strh	r2, [r5, #12]
    5ca2:	rsb	r2, sl, r7
    5ca6:	add.w	r0, r3, sl
    5caa:	str	r7, [r5, #20]
    5cac:	str	r3, [r5, #16]
    5cae:	str	r0, [r5, #0]
    5cb0:	str	r2, [r5, #8]
    5cb2:	mov	r7, r4
    5cb4:	mov	sl, r4
    5cb6:	mov	r2, sl
    5cb8:	mov	r1, r9
    5cba:	bl	2750 <memmove>
    5cbe:	ldr.w	r2, [r8, #8]
    5cc2:	ldr	r3, [r5, #8]
    5cc4:	ldr	r0, [r5, #0]
    5cc6:	subs	r3, r3, r7
    5cc8:	add	r0, sl
    5cca:	subs	r4, r2, r4
    5ccc:	str	r3, [r5, #8]
    5cce:	str	r0, [r5, #0]
    5cd0:	str.w	r4, [r8, #8]
    5cd4:	cbz	r4, 5d1c <__ssprint_r+0xf4>
    5cd6:	ldr.w	r9, [r6]
    5cda:	ldr	r4, [r6, #4]
    5cdc:	adds	r6, #8
    5cde:	b.n	5c46 <__ssprint_r+0x1e>
    5ce0:	mov	r7, r4
    5ce2:	mov	sl, r4
    5ce4:	b.n	5cb6 <__ssprint_r+0x8e>
    5ce6:	mov	r0, fp
    5ce8:	bl	28bc <_realloc_r>
    5cec:	mov	r3, r0
    5cee:	cmp	r0, #0
    5cf0:	bne.n	5ca2 <__ssprint_r+0x7a>
    5cf2:	ldr	r1, [r5, #16]
    5cf4:	mov	r0, fp
    5cf6:	bl	2f88 <_free_r>
    5cfa:	movs	r3, #12
    5cfc:	str.w	r3, [fp]
    5d00:	ldrh	r3, [r5, #12]
    5d02:	movs	r2, #0
    5d04:	orr.w	r3, r3, #64	; 0x40
    5d08:	mov.w	r0, #4294967295
    5d0c:	strh	r3, [r5, #12]
    5d0e:	str.w	r2, [r8, #8]
    5d12:	str.w	r2, [r8, #4]
    5d16:	add	sp, #12
    5d18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d1c:	movs	r0, #0
    5d1e:	str.w	r0, [r8, #4]
    5d22:	add	sp, #12
    5d24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005d28 <__aeabi_uldivmod>:
    5d28:	cbnz	r3, 5d40 <__aeabi_uldivmod+0x18>
    5d2a:	cbnz	r2, 5d40 <__aeabi_uldivmod+0x18>
    5d2c:	cmp	r1, #0
    5d2e:	it	eq
    5d30:	cmpeq	r0, #0
    5d32:	itt	ne
    5d34:	movne.w	r1, #4294967295
    5d38:	movne.w	r0, #4294967295
    5d3c:	b.w	603c <__aeabi_idiv0>
    5d40:	sub.w	ip, sp, #8
    5d44:	strd	ip, lr, [sp, #-16]!
    5d48:	bl	5d58 <__udivmoddi4>
    5d4c:	ldr.w	lr, [sp, #4]
    5d50:	ldrd	r2, r3, [sp, #8]
    5d54:	add	sp, #16
    5d56:	bx	lr

00005d58 <__udivmoddi4>:
    5d58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d5c:	mov	ip, r1
    5d5e:	mov	r6, r1
    5d60:	mov	r4, r0
    5d62:	ldr	r5, [sp, #32]
    5d64:	cmp	r3, #0
    5d66:	bne.n	5e0a <__udivmoddi4+0xb2>
    5d68:	cmp	r2, r1
    5d6a:	mov	r7, r2
    5d6c:	bls.n	5e48 <__udivmoddi4+0xf0>
    5d6e:	clz	lr, r2
    5d72:	cmp.w	lr, #0
    5d76:	beq.n	5d90 <__udivmoddi4+0x38>
    5d78:	rsb	r4, lr, #32
    5d7c:	lsr.w	r4, r0, r4
    5d80:	lsl.w	r6, r1, lr
    5d84:	orr.w	ip, r4, r6
    5d88:	lsl.w	r7, r2, lr
    5d8c:	lsl.w	r4, r0, lr
    5d90:	mov.w	r9, r7, lsr #16
    5d94:	lsrs	r2, r4, #16
    5d96:	udiv	r0, ip, r9
    5d9a:	uxth.w	r8, r7
    5d9e:	mls	r6, r9, r0, ip
    5da2:	orr.w	r6, r2, r6, lsl #16
    5da6:	mul.w	r3, r0, r8
    5daa:	cmp	r3, r6
    5dac:	bls.n	5dc2 <__udivmoddi4+0x6a>
    5dae:	adds	r6, r6, r7
    5db0:	add.w	r2, r0, #4294967295
    5db4:	bcs.w	5ffc <__udivmoddi4+0x2a4>
    5db8:	cmp	r3, r6
    5dba:	bls.w	5ffc <__udivmoddi4+0x2a4>
    5dbe:	subs	r0, #2
    5dc0:	add	r6, r7
    5dc2:	subs	r6, r6, r3
    5dc4:	uxth	r2, r4
    5dc6:	udiv	r3, r6, r9
    5dca:	mls	r6, r9, r3, r6
    5dce:	orr.w	r4, r2, r6, lsl #16
    5dd2:	mul.w	r8, r3, r8
    5dd6:	cmp	r8, r4
    5dd8:	bls.n	5dee <__udivmoddi4+0x96>
    5dda:	adds	r4, r4, r7
    5ddc:	add.w	r2, r3, #4294967295
    5de0:	bcs.w	5ff8 <__udivmoddi4+0x2a0>
    5de4:	cmp	r8, r4
    5de6:	bls.w	5ff8 <__udivmoddi4+0x2a0>
    5dea:	subs	r3, #2
    5dec:	add	r4, r7
    5dee:	rsb	r4, r8, r4
    5df2:	orr.w	r0, r3, r0, lsl #16
    5df6:	movs	r1, #0
    5df8:	cmp	r5, #0
    5dfa:	beq.n	5ec2 <__udivmoddi4+0x16a>
    5dfc:	lsr.w	r4, r4, lr
    5e00:	movs	r3, #0
    5e02:	str	r4, [r5, #0]
    5e04:	str	r3, [r5, #4]
    5e06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e0a:	cmp	r3, r1
    5e0c:	bls.n	5e1e <__udivmoddi4+0xc6>
    5e0e:	cmp	r5, #0
    5e10:	beq.n	5ebe <__udivmoddi4+0x166>
    5e12:	movs	r1, #0
    5e14:	stmia.w	r5, {r0, r6}
    5e18:	mov	r0, r1
    5e1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e1e:	clz	r1, r3
    5e22:	cmp	r1, #0
    5e24:	bne.w	5f48 <__udivmoddi4+0x1f0>
    5e28:	cmp	r3, r6
    5e2a:	bcc.n	5e32 <__udivmoddi4+0xda>
    5e2c:	cmp	r2, r0
    5e2e:	bhi.w	6022 <__udivmoddi4+0x2ca>
    5e32:	subs	r4, r0, r2
    5e34:	sbc.w	r6, r6, r3
    5e38:	movs	r0, #1
    5e3a:	mov	ip, r6
    5e3c:	cmp	r5, #0
    5e3e:	beq.n	5ec2 <__udivmoddi4+0x16a>
    5e40:	stmia.w	r5, {r4, ip}
    5e44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e48:	cbnz	r2, 5e50 <__udivmoddi4+0xf8>
    5e4a:	movs	r7, #1
    5e4c:	udiv	r7, r7, r2
    5e50:	clz	lr, r7
    5e54:	cmp.w	lr, #0
    5e58:	bne.n	5ec6 <__udivmoddi4+0x16e>
    5e5a:	subs	r3, r6, r7
    5e5c:	mov.w	r8, r7, lsr #16
    5e60:	uxth.w	ip, r7
    5e64:	movs	r1, #1
    5e66:	udiv	r0, r3, r8
    5e6a:	lsrs	r2, r4, #16
    5e6c:	mls	r6, r8, r0, r3
    5e70:	orr.w	r6, r2, r6, lsl #16
    5e74:	mul.w	r3, ip, r0
    5e78:	cmp	r3, r6
    5e7a:	bls.n	5e8c <__udivmoddi4+0x134>
    5e7c:	adds	r6, r6, r7
    5e7e:	add.w	r2, r0, #4294967295
    5e82:	bcs.n	5e8a <__udivmoddi4+0x132>
    5e84:	cmp	r3, r6
    5e86:	bhi.w	6026 <__udivmoddi4+0x2ce>
    5e8a:	mov	r0, r2
    5e8c:	subs	r6, r6, r3
    5e8e:	uxth	r2, r4
    5e90:	udiv	r3, r6, r8
    5e94:	mls	r6, r8, r3, r6
    5e98:	orr.w	r4, r2, r6, lsl #16
    5e9c:	mul.w	ip, ip, r3
    5ea0:	cmp	ip, r4
    5ea2:	bls.n	5eb4 <__udivmoddi4+0x15c>
    5ea4:	adds	r4, r4, r7
    5ea6:	add.w	r2, r3, #4294967295
    5eaa:	bcs.n	5eb2 <__udivmoddi4+0x15a>
    5eac:	cmp	ip, r4
    5eae:	bhi.w	601c <__udivmoddi4+0x2c4>
    5eb2:	mov	r3, r2
    5eb4:	rsb	r4, ip, r4
    5eb8:	orr.w	r0, r3, r0, lsl #16
    5ebc:	b.n	5df8 <__udivmoddi4+0xa0>
    5ebe:	mov	r1, r5
    5ec0:	mov	r0, r5
    5ec2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ec6:	rsb	r1, lr, #32
    5eca:	lsl.w	r3, r6, lr
    5ece:	lsl.w	r7, r7, lr
    5ed2:	lsr.w	r9, r0, r1
    5ed6:	mov.w	r8, r7, lsr #16
    5eda:	lsrs	r6, r1
    5edc:	orr.w	r9, r9, r3
    5ee0:	udiv	sl, r6, r8
    5ee4:	mov.w	r4, r9, lsr #16
    5ee8:	mls	r6, r8, sl, r6
    5eec:	uxth.w	ip, r7
    5ef0:	orr.w	r3, r4, r6, lsl #16
    5ef4:	mul.w	r2, sl, ip
    5ef8:	cmp	r2, r3
    5efa:	lsl.w	r4, r0, lr
    5efe:	bls.n	5f16 <__udivmoddi4+0x1be>
    5f00:	adds	r3, r3, r7
    5f02:	add.w	r1, sl, #4294967295
    5f06:	bcs.w	6018 <__udivmoddi4+0x2c0>
    5f0a:	cmp	r2, r3
    5f0c:	bls.w	6018 <__udivmoddi4+0x2c0>
    5f10:	sub.w	sl, sl, #2
    5f14:	add	r3, r7
    5f16:	subs	r3, r3, r2
    5f18:	uxth.w	r9, r9
    5f1c:	udiv	r1, r3, r8
    5f20:	mls	r3, r8, r1, r3
    5f24:	orr.w	r3, r9, r3, lsl #16
    5f28:	mul.w	r6, r1, ip
    5f2c:	cmp	r6, r3
    5f2e:	bls.n	5f40 <__udivmoddi4+0x1e8>
    5f30:	adds	r3, r3, r7
    5f32:	add.w	r2, r1, #4294967295
    5f36:	bcs.n	6010 <__udivmoddi4+0x2b8>
    5f38:	cmp	r6, r3
    5f3a:	bls.n	6010 <__udivmoddi4+0x2b8>
    5f3c:	subs	r1, #2
    5f3e:	add	r3, r7
    5f40:	subs	r3, r3, r6
    5f42:	orr.w	r1, r1, sl, lsl #16
    5f46:	b.n	5e66 <__udivmoddi4+0x10e>
    5f48:	rsb	lr, r1, #32
    5f4c:	lsr.w	r4, r2, lr
    5f50:	lsls	r3, r1
    5f52:	orrs	r3, r4
    5f54:	lsr.w	r7, r0, lr
    5f58:	lsl.w	r4, r6, r1
    5f5c:	mov.w	ip, r3, lsr #16
    5f60:	lsr.w	r6, r6, lr
    5f64:	orrs	r4, r7
    5f66:	udiv	r9, r6, ip
    5f6a:	lsrs	r7, r4, #16
    5f6c:	mls	r6, ip, r9, r6
    5f70:	uxth.w	r8, r3
    5f74:	orr.w	r6, r7, r6, lsl #16
    5f78:	mul.w	r7, r9, r8
    5f7c:	cmp	r7, r6
    5f7e:	lsl.w	r2, r2, r1
    5f82:	lsl.w	sl, r0, r1
    5f86:	bls.n	5f9a <__udivmoddi4+0x242>
    5f88:	adds	r6, r6, r3
    5f8a:	add.w	r0, r9, #4294967295
    5f8e:	bcs.n	6014 <__udivmoddi4+0x2bc>
    5f90:	cmp	r7, r6
    5f92:	bls.n	6014 <__udivmoddi4+0x2bc>
    5f94:	sub.w	r9, r9, #2
    5f98:	add	r6, r3
    5f9a:	subs	r6, r6, r7
    5f9c:	uxth	r0, r4
    5f9e:	udiv	r4, r6, ip
    5fa2:	mls	r6, ip, r4, r6
    5fa6:	orr.w	r7, r0, r6, lsl #16
    5faa:	mul.w	r8, r4, r8
    5fae:	cmp	r8, r7
    5fb0:	bls.n	5fc2 <__udivmoddi4+0x26a>
    5fb2:	adds	r7, r7, r3
    5fb4:	add.w	r0, r4, #4294967295
    5fb8:	bcs.n	600c <__udivmoddi4+0x2b4>
    5fba:	cmp	r8, r7
    5fbc:	bls.n	600c <__udivmoddi4+0x2b4>
    5fbe:	subs	r4, #2
    5fc0:	add	r7, r3
    5fc2:	orr.w	r0, r4, r9, lsl #16
    5fc6:	rsb	r7, r8, r7
    5fca:	umull	r8, r9, r0, r2
    5fce:	cmp	r7, r9
    5fd0:	mov	r4, r8
    5fd2:	mov	r6, r9
    5fd4:	bcc.n	6000 <__udivmoddi4+0x2a8>
    5fd6:	beq.n	602c <__udivmoddi4+0x2d4>
    5fd8:	cbz	r5, 6034 <__udivmoddi4+0x2dc>
    5fda:	subs.w	r3, sl, r4
    5fde:	sbc.w	r7, r7, r6
    5fe2:	lsl.w	lr, r7, lr
    5fe6:	lsrs	r3, r1
    5fe8:	lsrs	r7, r1
    5fea:	orr.w	r3, lr, r3
    5fee:	stmia.w	r5, {r3, r7}
    5ff2:	movs	r1, #0
    5ff4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ff8:	mov	r3, r2
    5ffa:	b.n	5dee <__udivmoddi4+0x96>
    5ffc:	mov	r0, r2
    5ffe:	b.n	5dc2 <__udivmoddi4+0x6a>
    6000:	subs.w	r4, r8, r2
    6004:	sbc.w	r6, r9, r3
    6008:	subs	r0, #1
    600a:	b.n	5fd8 <__udivmoddi4+0x280>
    600c:	mov	r4, r0
    600e:	b.n	5fc2 <__udivmoddi4+0x26a>
    6010:	mov	r1, r2
    6012:	b.n	5f40 <__udivmoddi4+0x1e8>
    6014:	mov	r9, r0
    6016:	b.n	5f9a <__udivmoddi4+0x242>
    6018:	mov	sl, r1
    601a:	b.n	5f16 <__udivmoddi4+0x1be>
    601c:	subs	r3, #2
    601e:	add	r4, r7
    6020:	b.n	5eb4 <__udivmoddi4+0x15c>
    6022:	mov	r0, r1
    6024:	b.n	5e3c <__udivmoddi4+0xe4>
    6026:	subs	r0, #2
    6028:	add	r6, r7
    602a:	b.n	5e8c <__udivmoddi4+0x134>
    602c:	cmp	sl, r8
    602e:	bcc.n	6000 <__udivmoddi4+0x2a8>
    6030:	mov	r6, r7
    6032:	b.n	5fd8 <__udivmoddi4+0x280>
    6034:	mov	r1, r5
    6036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    603a:	nop

0000603c <__aeabi_idiv0>:
    603c:	bx	lr
    603e:	nop

00006040 <___init_veneer>:
    6040:	ldr.w	pc, [pc]	; 6044 <___init_veneer+0x4>
    6044:	.word	0x600016a5
	...

Disassembly of section .fini:

00006050 <_fini>:
    6050:	push	{r3, r4, r5, r6, r7, lr}
    6052:	nop
