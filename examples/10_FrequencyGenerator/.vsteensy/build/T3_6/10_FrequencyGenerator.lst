
.vsteensy/build/T3_6/10_FrequencyGenerator.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ....5.......
      10:	................
      20:	............5...
      30:	5.......a&..e'..
      40:	5...5...5...5...
      50:	5...5...5...5...
      60:	5...5...5...5...
      70:	5...5...5...5...
      80:	5...5...5...5...
      90:	5...5...5...5...
      a0:	5...5...5...5...
      b0:	5...5...5...y...
      c0:	5...U,..5...y1..
      d0:	5....-..5...5...
      e0:	5...5...5...5...
      f0:	5...5...5...5...
     100:	5...5...5...5...
     110:	5.......5...5...
     120:	5...5...5...5...
     130:	5...5...5...5...
     140:	5...5....*..5...
     150:	5...5...5...5...
     160:	5...5...5...5...
     170:	5...5...5...5...
     180:	5...5...5...5...
     190:	5...5..../..5...
     1a0:	5...5...5...5...
     1b0:	5...5...5...5...
     1c0:	5...5...5...5...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	f3c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #332]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #332]	; (368 <ResetHandler+0x198>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #332]	; (36c <ResetHandler+0x19c>)
     220:	ldr	r3, [pc, #332]	; (370 <ResetHandler+0x1a0>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #320]	; (374 <ResetHandler+0x1a4>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #324]	; (378 <ResetHandler+0x1a8>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #312]	; (37c <ResetHandler+0x1ac>)
     242:	ldr	r2, [pc, #316]	; (380 <ResetHandler+0x1b0>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #300]	; (384 <ResetHandler+0x1b4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #296]	; (38c <ResetHandler+0x1bc>)
     264:	ldr	r2, [pc, #276]	; (37c <ResetHandler+0x1ac>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #268]	; (394 <ResetHandler+0x1c4>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	bne.n	288 <ResetHandler+0xb8>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     292:	ldr	r3, [pc, #260]	; (398 <ResetHandler+0x1c8>)
     294:	movs	r2, #96	; 0x60
     296:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     298:	adds	r3, #2
     29a:	ldrb	r2, [r3, #0]
     29c:	cmp	r2, #128	; 0x80
     29e:	bne.n	29a <ResetHandler+0xca>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2a0:	ldr	r3, [pc, #240]	; (394 <ResetHandler+0x1c4>)
     2a2:	movs	r2, #1
     2a4:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2a6:	movs	r2, #93	; 0x5d
     2a8:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2aa:	ldrb	r2, [r3, #6]
     2ac:	lsls	r0, r2, #26
     2ae:	bpl.n	2aa <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b0:	ldrb	r1, [r3, #6]
     2b2:	ldr	r2, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b4:	lsls	r1, r1, #25
     2b6:	bpl.n	2b0 <ResetHandler+0xe0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2b8:	ldr	r3, [pc, #224]	; (39c <ResetHandler+0x1cc>)
     2ba:	ldr	r1, [pc, #228]	; (3a0 <ResetHandler+0x1d0>)
     2bc:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2be:	movs	r1, #0
     2c0:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c2:	movs	r3, #32
     2c4:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2c6:	ldrb	r3, [r2, #6]
     2c8:	and.w	r3, r3, #12
     2cc:	cmp	r3, #12
     2ce:	bne.n	2c6 <ResetHandler+0xf6>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d0:	ldr	r3, [pc, #208]	; (3a4 <ResetHandler+0x1d4>)
     2d2:	ldr	r2, [pc, #212]	; (3a8 <ResetHandler+0x1d8>)
     2d4:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2d6:	ldr	r2, [pc, #212]	; (3ac <ResetHandler+0x1dc>)
     2d8:	ldr	r4, [pc, #212]	; (3b0 <ResetHandler+0x1e0>)
     2da:	ldr	r3, [r2, #0]
     2dc:	ands.w	r3, r3, #256	; 0x100
     2e0:	bne.n	2ea <ResetHandler+0x11a>
		RTC_SR = 0;
     2e2:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2e4:	mov.w	r3, #5376	; 0x1500
     2e8:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	1604 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [r4, #0]
     308:	lsls	r2, r3, #31
     30a:	bpl.n	318 <ResetHandler+0x148>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30c:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     30e:	bl	10a4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     312:	ldr	r3, [pc, #176]	; (3c4 <ResetHandler+0x1f4>)
     314:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     316:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     318:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31a:	ldrb	r3, [r3, #0]
     31c:	lsls	r3, r3, #25
     31e:	bpl.n	334 <ResetHandler+0x164>
     320:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     322:	ldr	r3, [pc, #164]	; (3c8 <ResetHandler+0x1f8>)
     324:	ldr	r2, [r4, #0]
     326:	cmp	r2, r3
     328:	bne.n	334 <ResetHandler+0x164>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32a:	ldr	r0, [pc, #148]	; (3c0 <ResetHandler+0x1f0>)
     32c:	bl	10a4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     330:	movs	r3, #0
     332:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     334:	bl	3b4c <__libc_init_array>

	startup_late_hook();
     338:	bl	f48 <startup_late_hook>
	main();
     33c:	bl	289c <main>
     340:	b.n	340 <ResetHandler+0x170>
     342:	nop
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4007d002
     364:	.word	0x4007e000
     368:	.word	0x1fff1208
     36c:	.word	0x000083b8
     370:	.word	0x1fff0730
     374:	.word	0x1fff1208
     378:	.word	0x1fff172c
     37c:	.word	0x1fff0200
     380:	.word	0x00000000
     384:	.word	0xe000e400
     388:	.word	0xe000e464
     38c:	.word	0xe000ed08
     390:	.word	0x40065000
     394:	.word	0x40064000
     398:	.word	0x4007e001
     39c:	.word	0x40048044
     3a0:	.word	0x02060000
     3a4:	.word	0x40048004
     3a8:	.word	0x000710c0
     3ac:	.word	0x4003d010
     3b0:	.word	0x4003d014
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1208
     42c:	.word	0x00000000
     430:	.word	0x000083b4

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff120c
     460:	.word	0x000083b4
     464:	.word	0x1fff1208
     468:	.word	0x00000000

0000046c <std::_Function_handler<void (long, long), void (*)(int, int)>::_M_invoke(std::_Any_data const&, long&&, long&&)>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
     46c:	push	{r4}
      {
	(*_Base::_M_get_pointer(__functor))(
     46e:	ldr	r4, [r1, #0]
     470:	ldr	r3, [r0, #0]
     472:	ldr	r1, [r2, #0]
     474:	mov	r0, r4
	    std::forward<_ArgTypes>(__args)...);
      }
     476:	ldr.w	r4, [sp], #4

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
     47a:	bx	r3

0000047c <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
     47c:	cmp	r2, #1
     47e:	beq.n	48e <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x12>
     480:	cmp	r2, #2
     482:	bne.n	48a <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xe>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
     484:	ldr	r3, [r1, #0]
     486:	cbz	r0, 48a <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xe>
     488:	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
     48a:	movs	r0, #0
     48c:	bx	lr
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
     48e:	str	r1, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
     490:	movs	r0, #0
     492:	bx	lr

00000494 <EncPlex::Encoder::~Encoder()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     494:	ldr	r3, [r0, #32]
#include "core_pins.h"

namespace EncPlex
{
    // Simple encoder implementation which reads phase A and B from two digital pins
    class Encoder : public EncoderBase
     496:	push	{r4, lr}
     498:	mov	r4, r0
     49a:	cbz	r3, 4a6 <EncPlex::Encoder::~Encoder()+0x12>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     49c:	add.w	r1, r0, #24
     4a0:	mov	r0, r1
     4a2:	movs	r2, #3
     4a4:	blx	r3
     4a6:	mov	r0, r4
     4a8:	pop	{r4, pc}
     4aa:	nop

000004ac <FreqGen_t::panic()>:
  protected:
    Channel channel[nrOfChannels];

    unsigned usedChannels = 0;

    void panic()
     4ac:	push	{r3, lr}
    {
      pinMode(LED_BUILTIN, OUTPUT);
     4ae:	movs	r1, #1
     4b0:	movs	r0, #13
     4b2:	bl	1554 <pinMode>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     4b6:	ldr	r4, [pc, #32]	; (4d8 <FreqGen_t::panic()+0x2c>)
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     4b8:	ldr	r6, [pc, #32]	; (4dc <FreqGen_t::panic()+0x30>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     4ba:	ldr	r5, [pc, #36]	; (4e0 <FreqGen_t::panic()+0x34>)
     4bc:	b.n	4c6 <FreqGen_t::panic()+0x1a>
     4be:	str	r3, [r5, #0]
      while (true)
      {
        digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
        delay(50);
     4c0:	movs	r0, #50	; 0x32
     4c2:	bl	1560 <delay>
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     4c6:	ldr	r3, [r4, #0]
     4c8:	tst.w	r3, #32
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     4cc:	mov.w	r3, #32
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     4d0:	bne.n	4be <FreqGen_t::panic()+0x12>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     4d2:	movs	r3, #32
     4d4:	str	r3, [r6, #0]
     4d6:	b.n	4c0 <FreqGen_t::panic()+0x14>
     4d8:	.word	0x400ff090
     4dc:	.word	0x400ff084
     4e0:	.word	0x400ff088

000004e4 <loop>:

    // Inline implementation ===============================================

    void Encoder::tick()
    {
        update(digitalReadFast(pinA), digitalReadFast(pinB));
     4e4:	ldr	r0, [pc, #96]	; (548 <loop+0x64>)

  onChannelChanged(0, 0); // print some info at startup
}

void loop()
{
     4e6:	push	{r4, lr}
		  else {
			return 0;
		}
	} else {
		#if defined(KINETISK)
		return *portInputRegister(pin);
     4e8:	ldrb.w	r2, [r0, #44]	; 0x2c
     4ec:	ldr	r4, [pc, #92]	; (54c <loop+0x68>)
     4ee:	ldrb.w	r3, [r0, #48]	; 0x30
     4f2:	ldr.w	r2, [r4, r2, lsl #3]
     4f6:	ldr.w	r3, [r4, r3, lsl #3]
     4fa:	ldrb.w	r1, [r2, #512]	; 0x200
     4fe:	ldrb.w	r2, [r3, #512]	; 0x200
     502:	bl	b3c <EncPlex::EncoderBase::update(unsigned long, unsigned long)>
     506:	ldr	r0, [pc, #72]	; (550 <loop+0x6c>)
     508:	ldrb.w	r2, [r0, #44]	; 0x2c
     50c:	ldrb.w	r3, [r0, #48]	; 0x30
     510:	ldr.w	r2, [r4, r2, lsl #3]
     514:	ldr.w	r3, [r4, r3, lsl #3]
     518:	ldrb.w	r1, [r2, #512]	; 0x200
     51c:	ldrb.w	r2, [r3, #512]	; 0x200
     520:	bl	b3c <EncPlex::EncoderBase::update(unsigned long, unsigned long)>
     524:	ldr	r0, [pc, #44]	; (554 <loop+0x70>)
     526:	ldrb.w	r2, [r0, #44]	; 0x2c
     52a:	ldrb.w	r3, [r0, #48]	; 0x30
     52e:	ldr.w	r2, [r4, r2, lsl #3]
     532:	ldr.w	r3, [r4, r3, lsl #3]
     536:	ldrb.w	r1, [r2, #512]	; 0x200
     53a:	ldrb.w	r2, [r3, #512]	; 0x200
  frequencyEncoder.tick();
  chnSelectEncoder.tick();
  dutyCycleEncoder.tick();
}
     53e:	ldmia.w	sp!, {r4, lr}
     542:	b.w	b3c <EncPlex::EncoderBase::update(unsigned long, unsigned long)>
     546:	nop
     548:	.word	0x1fff1258
     54c:	.word	0x00007e8c
     550:	.word	0x1fff1224
     554:	.word	0x1fff128c

00000558 <printChannelInfo(unsigned int)>:

// Helpers ===================================================
void printChannelInfo(unsigned ch)
{
     558:	push	{lr}
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     55a:	ldr	r3, [pc, #44]	; (588 <printChannelInfo(unsigned int)+0x30>)
     55c:	ldr	r2, [r3, #96]	; 0x60
     55e:	cmp	r0, r2
     560:	sub	sp, #12
     562:	bcs.n	582 <printChannelInfo(unsigned int)+0x2a>
      return channel[ch].getPin();
     564:	add.w	r0, r0, r0, lsl #1
     568:	lsls	r0, r0, #2
     56a:	adds	r1, r3, r0
  int pin = generator.getPin(ch);
  int frq = generator.getFrequency(ch);
  int dty = generator.getDutyCycle(ch);

  Serial.printf("Pin: %u -> f=%u Hz d=%u %%\n", pin, frq, dty);
     56c:	ldrb	r2, [r3, r0]
     56e:	ldr	r3, [r1, #8]
     570:	ldr	r1, [r1, #4]
     572:	str	r1, [sp, #0]
     574:	ldr	r0, [pc, #20]	; (58c <printChannelInfo(unsigned int)+0x34>)
     576:	ldr	r1, [pc, #24]	; (590 <printChannelInfo(unsigned int)+0x38>)
     578:	bl	2878 <Print::printf(char const*, ...)>
}
     57c:	add	sp, #12
     57e:	ldr.w	pc, [sp], #4
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     582:	mov	r0, r3
     584:	bl	4ac <FreqGen_t::panic()>
     588:	.word	0x1fff0734
     58c:	.word	0x1fff07a4
     590:	.word	0x00007e0c

00000594 <onFrequencyChanged(int, int)>:

void onFrequencyChanged(int encVal, int encDelta)
{
     594:	push	{r3, r4, r5, r6, r7, lr}
     596:	ldr	r3, [pc, #120]	; (610 <onFrequencyChanged(int, int)+0x7c>)
      channel[ch].setDutyCycle(d);
    }

    unsigned getFrequency(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     598:	ldr	r5, [pc, #120]	; (614 <onFrequencyChanged(int, int)+0x80>)
  unsigned ch = chnSelectEncoder.getValue();
     59a:	ldr	r6, [r3, #0]
     59c:	ldr	r3, [r5, #96]	; 0x60
     59e:	cmp	r6, r3
     5a0:	bcs.n	608 <onFrequencyChanged(int, int)+0x74>
      return channel[ch].getFrequency();
     5a2:	add.w	r4, r6, r6, lsl #1
     5a6:	lsls	r4, r4, #2
     5a8:	adds	r7, r5, r4
     5aa:	mov.w	r2, #1000	; 0x3e8
     5ae:	ldr	r3, [r7, #8]
     5b0:	ldrb	r0, [r5, r4]
     5b2:	mla	r1, r2, r1, r3
     5b6:	bic.w	r1, r1, r1, asr #31
}

void Channel::setFrequency(int f)
{
    frequency = max(0, f);
    analogWriteFrequency(pin, frequency);
     5ba:	vmov	s15, r1
        analogWrite(pin, 0); // switch off output
}

void Channel::setFrequency(int f)
{
    frequency = max(0, f);
     5be:	str	r1, [r7, #8]
    analogWriteFrequency(pin, frequency);
     5c0:	vcvt.f32.s32	s0, s15
     5c4:	bl	1408 <analogWriteFrequency>
}

void Channel::enable(bool on)
{
    if (on)
        setDutyCycle(dutyCycle); // set last stored duty cycle
     5c8:	ldr	r3, [r7, #4]
     5ca:	ldrb	r0, [r5, r4]
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     5cc:	cmp	r3, #0
     5ce:	ble.n	602 <onFrequencyChanged(int, int)+0x6e>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     5d0:	cmp	r3, #99	; 0x63
     5d2:	ble.n	5e8 <onFrequencyChanged(int, int)+0x54>
     5d4:	movs	r1, #253	; 0xfd
     5d6:	movs	r3, #99	; 0x63
    analogWriteFrequency(pin, frequency);
}

void Channel::setDutyCycle(int d) // percent
{
    dutyCycle = min(99, max(0, d)); // limit to [0, 100[
     5d8:	str	r3, [r7, #4]
    analogWrite(pin, dutyCycle * 2.56f);
     5da:	bl	10c8 <analogWrite>
  unsigned f = generator.getFrequency(ch) + encDelta * 1000;
  generator.setFrequency(ch, f);

  printChannelInfo(ch);
     5de:	mov	r0, r6
}
     5e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
{
  unsigned ch = chnSelectEncoder.getValue();
  unsigned f = generator.getFrequency(ch) + encDelta * 1000;
  generator.setFrequency(ch, f);

  printChannelInfo(ch);
     5e4:	b.w	558 <printChannelInfo(unsigned int)>
     5e8:	vmov	s15, r3
     5ec:	vldr	s14, [pc, #40]	; 618 <onFrequencyChanged(int, int)+0x84>
     5f0:	vcvt.f32.s32	s15, s15
     5f4:	vmul.f32	s15, s15, s14
     5f8:	vcvt.s32.f32	s15, s15
     5fc:	vmov	r1, s15
     600:	b.n	5d8 <onFrequencyChanged(int, int)+0x44>
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     602:	movs	r1, #0
     604:	mov	r3, r1
     606:	b.n	5d8 <onFrequencyChanged(int, int)+0x44>
      channel[ch].setDutyCycle(d);
    }

    unsigned getFrequency(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     608:	mov	r0, r5
     60a:	bl	4ac <FreqGen_t::panic()>
     60e:	nop
     610:	.word	0x1fff1224
     614:	.word	0x1fff0734
     618:	.word	0x4023d70a

0000061c <onDutyCycleChanged(int, int)>:
}

void onDutyCycleChanged(int encVal, int encDelta)
{
     61c:	push	{r3, r4, r5, lr}
      return channel[ch].getFrequency();
    }

    unsigned getDutyCycle(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     61e:	ldr	r0, [pc, #96]	; (680 <onDutyCycleChanged(int, int)+0x64>)
     620:	ldr	r3, [pc, #96]	; (684 <onDutyCycleChanged(int, int)+0x68>)
  unsigned ch = chnSelectEncoder.getValue(); // get the currently active channel
     622:	ldr	r4, [r3, #0]
     624:	ldr	r3, [r0, #96]	; 0x60
     626:	cmp	r4, r3
     628:	bcs.n	67a <onDutyCycleChanged(int, int)+0x5e>
      return channel[ch].getDutyCycle();
     62a:	add.w	r2, r4, r4, lsl #1
     62e:	lsls	r2, r2, #2
     630:	adds	r5, r0, r2
  unsigned d = generator.getDutyCycle(ch) + encDelta * 5;
     632:	add.w	r1, r1, r1, lsl #2
     636:	ldr	r3, [r5, #4]
     638:	ldrb	r0, [r0, r2]
     63a:	add	r1, r3
     63c:	cmp	r1, #0
     63e:	ble.n	674 <onDutyCycleChanged(int, int)+0x58>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     640:	cmp	r1, #99	; 0x63
     642:	ble.n	658 <onDutyCycleChanged(int, int)+0x3c>
     644:	movs	r1, #253	; 0xfd
     646:	movs	r3, #99	; 0x63
    analogWriteFrequency(pin, frequency);
}

void Channel::setDutyCycle(int d) // percent
{
    dutyCycle = min(99, max(0, d)); // limit to [0, 100[
     648:	str	r3, [r5, #4]
    analogWrite(pin, dutyCycle * 2.56f);
     64a:	bl	10c8 <analogWrite>
  generator.setDutyCycle(ch, d);

  printChannelInfo(ch);
     64e:	mov	r0, r4
}
     650:	ldmia.w	sp!, {r3, r4, r5, lr}
{
  unsigned ch = chnSelectEncoder.getValue(); // get the currently active channel
  unsigned d = generator.getDutyCycle(ch) + encDelta * 5;
  generator.setDutyCycle(ch, d);

  printChannelInfo(ch);
     654:	b.w	558 <printChannelInfo(unsigned int)>
     658:	vmov	s15, r1
     65c:	vldr	s14, [pc, #40]	; 688 <onDutyCycleChanged(int, int)+0x6c>
     660:	vcvt.f32.s32	s15, s15
     664:	mov	r3, r1
     666:	vmul.f32	s15, s15, s14
     66a:	vcvt.s32.f32	s15, s15
     66e:	vmov	r1, s15
     672:	b.n	648 <onDutyCycleChanged(int, int)+0x2c>
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     674:	movs	r1, #0
     676:	mov	r3, r1
     678:	b.n	648 <onDutyCycleChanged(int, int)+0x2c>
      return channel[ch].getFrequency();
    }

    unsigned getDutyCycle(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     67a:	bl	4ac <FreqGen_t::panic()>
     67e:	nop
     680:	.word	0x1fff0734
     684:	.word	0x1fff1224
     688:	.word	0x4023d70a

0000068c <onChannelChanged(int, int)>:
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     68c:	ldr	r3, [pc, #40]	; (6b8 <onChannelChanged(int, int)+0x2c>)
     68e:	ldr	r2, [r3, #96]	; 0x60
     690:	cmp	r0, r2
}

void onChannelChanged(int encVal, int encDelta)
{
     692:	push	{r4, lr}
     694:	bcs.n	6b2 <onChannelChanged(int, int)+0x26>
      return channel[ch].getPin();
     696:	add.w	r2, r0, r0, lsl #1
     69a:	mov	r4, r0
  Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
     69c:	ldr	r1, [pc, #28]	; (6bc <onChannelChanged(int, int)+0x30>)
     69e:	ldrb.w	r2, [r3, r2, lsl #2]
     6a2:	ldr	r0, [pc, #28]	; (6c0 <onChannelChanged(int, int)+0x34>)
     6a4:	bl	2878 <Print::printf(char const*, ...)>
  printChannelInfo(encVal);
     6a8:	mov	r0, r4
}
     6aa:	ldmia.w	sp!, {r4, lr}
}

void onChannelChanged(int encVal, int encDelta)
{
  Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
  printChannelInfo(encVal);
     6ae:	b.w	558 <printChannelInfo(unsigned int)>
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     6b2:	mov	r0, r3
     6b4:	bl	4ac <FreqGen_t::panic()>
     6b8:	.word	0x1fff0734
     6bc:	.word	0x00007e28
     6c0:	.word	0x1fff07a4

000006c4 <setup>:
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
  
void setup()
{
     6c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6c8:	ldr	r1, [pc, #52]	; (700 <setup+0x3c>)
     6ca:	ldr	r2, [pc, #56]	; (704 <setup+0x40>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     6cc:	ldr	r0, [pc, #56]	; (708 <setup+0x44>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     6ce:	ldr	r5, [pc, #60]	; (70c <setup+0x48>)
     6d0:	sub	sp, #68	; 0x44
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     6d2:	ldrb	r3, [r1, #0]
     6d4:	cmp	r3, #0
     6d6:	beq.w	9e0 <setup+0x31c>
     6da:	ldrb	r3, [r0, #0]
     6dc:	lsls	r3, r3, #31
     6de:	bpl.w	9e0 <setup+0x31c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     6e2:	ldr	r3, [r2, #0]
     6e4:	ldr	r4, [r5, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     6e6:	subs	r3, r3, r4
     6e8:	cmp	r3, #14
     6ea:	bls.w	9e0 <setup+0x31c>
     6ee:	ldr	r4, [pc, #32]	; (710 <setup+0x4c>)
     6f0:	ldr	r5, [pc, #32]	; (714 <setup+0x50>)
     6f2:	ldr	r3, [r4, #96]	; 0x60
     6f4:	add.w	r8, r5, #20
     6f8:	movs	r0, #9
};

void Channel::setPin(uint8_t p)
{
    pin = p;
    analogWrite(pin, 0); // switch off
     6fa:	movs	r7, #0
    frequency = 0;
    dutyCycle = 50;
     6fc:	movs	r6, #50	; 0x32
     6fe:	b.n	71c <setup+0x58>
     700:	.word	0x1fff13b8
     704:	.word	0x1fff12d4
     708:	.word	0x1fff12d0
     70c:	.word	0x1fff171c
     710:	.word	0x1fff0734
     714:	.word	0x00007df4
     718:	ldr.w	r0, [r5, #4]!
      }
    }

    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();
     71c:	cmp	r3, #7
     71e:	bhi.w	a0a <setup+0x346>
     722:	cmp	r0, #64	; 0x40
     724:	bgt.w	a0a <setup+0x346>
    unsigned frequency = 50;
};

void Channel::setPin(uint8_t p)
{
    pin = p;
     728:	add.w	r3, r3, r3, lsl #1

      channel[usedChannels].setPin(pin);
     72c:	uxtb	r2, r0
     72e:	strb.w	r2, [r4, r3, lsl #2]
    analogWrite(pin, 0); // switch off
     732:	mov	r0, r2
     734:	movs	r1, #0
    unsigned frequency = 50;
};

void Channel::setPin(uint8_t p)
{
    pin = p;
     736:	add.w	r9, r4, r3, lsl #2
    analogWrite(pin, 0); // switch off
     73a:	bl	10c8 <analogWrite>
      usedChannels++;
     73e:	ldr	r2, [r4, #96]	; 0x60
    frequency = 0;
     740:	str.w	r7, [r9, #8]
     744:	adds	r3, r2, #1
  public:
    static constexpr unsigned nrOfChannels = 8;

    void addOutputPins(std::initializer_list<int> pins)
    {
      for (auto pin : pins) {
     746:	cmp	r5, r8
    dutyCycle = 50;
     748:	str.w	r6, [r9, #4]
    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();

      channel[usedChannels].setPin(pin);
      usedChannels++;
     74c:	str	r3, [r4, #96]	; 0x60

void Channel::setPin(uint8_t p)
{
    pin = p;
    analogWrite(pin, 0); // switch off
    frequency = 0;
     74e:	mov.w	r9, #0
  public:
    static constexpr unsigned nrOfChannels = 8;

    void addOutputPins(std::initializer_list<int> pins)
    {
      for (auto pin : pins) {
     752:	bne.n	718 <setup+0x54>
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     754:	ldr	r7, [pc, #696]	; (a10 <setup+0x34c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     756:	ldr	r3, [pc, #700]	; (a14 <setup+0x350>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     758:	ldr.w	sl, [pc, #744]	; a44 <setup+0x380>
	    _M_manager = &_My_handler::_M_manager;
     75c:	ldr.w	r8, [pc, #744]	; a48 <setup+0x384>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     760:	str	r3, [sp, #16]
        pinMode(pinA, inputMode);
     762:	movs	r1, #2
     764:	mov	r0, r9
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     766:	str.w	r9, [r7, #44]	; 0x2c
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     76a:	str.w	sl, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
     76e:	str.w	r8, [sp, #24]
        pinMode(pinA, inputMode);
     772:	bl	1554 <pinMode>

        this->pinB = pinB;
     776:	movs	r3, #1
        pinMode(pinB, inputMode);
     778:	mov	r0, r3
     77a:	movs	r1, #2
    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     77c:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     77e:	bl	1554 <pinMode>

        setCountMode(countMode);
     782:	mov	r1, r9
     784:	mov	r0, r7
     786:	bl	ad4 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)>
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
     78a:	ldr	r3, [pc, #652]	; (a18 <setup+0x354>)
     78c:	ldr	r1, [r3, #0]
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
     78e:	ldr	r2, [r3, #0]
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     790:	ubfx	r1, r1, #16, #1
     794:	ubfx	r2, r2, #17, #1
     798:	mov	r0, r7
     79a:	bl	b30 <EncPlex::EncoderBase::begin(unsigned long, unsigned long)>
     79e:	ldr	r3, [sp, #24]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     7a0:	str.w	r9, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     7a4:	cmp	r3, #0
     7a6:	beq.w	9f0 <setup+0x32c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     7aa:	movs	r2, #2
     7ac:	add	r0, sp, #32
     7ae:	add	r1, sp, #16
     7b0:	blx	r3
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
     7b2:	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     7b4:	ldr	r2, [sp, #28]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     7b6:	str.w	r9, [sp, #56]	; 0x38
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
     7ba:	str	r3, [sp, #40]	; 0x28
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     7bc:	str	r2, [sp, #44]	; 0x2c
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     7be:	cmp	r3, #0
     7c0:	beq.w	9f0 <setup+0x32c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     7c4:	add	r5, sp, #48	; 0x30
     7c6:	add	r1, sp, #32
     7c8:	mov	r0, r5
     7ca:	movs	r2, #2
     7cc:	blx	r3
	  _M_invoker = __x._M_invoker;
     7ce:	ldr.w	lr, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
     7d2:	ldr	r3, [sp, #40]	; 0x28
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     7d4:	ldr	r2, [pc, #580]	; (a1c <setup+0x358>)
     7d6:	ldr.w	r9, [r7, #32]
      __b = _GLIBCXX_MOVE(__tmp);
     7da:	str	r3, [r7, #32]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     7dc:	ldmia.w	r5, {r0, r1}
     7e0:	add	r6, sp, #8
     7e2:	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     7e6:	ldmia.w	r2, {r0, r1}
     7ea:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     7ee:	ldmia.w	r6, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     7f2:	ldr	r3, [r7, #36]	; 0x24
     7f4:	str.w	r9, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
     7f8:	stmia.w	r2, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     7fc:	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
     7fe:	str.w	lr, [r7, #36]	; 0x24

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     802:	cmp.w	r9, #0
     806:	beq.n	810 <setup+0x14c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     808:	movs	r2, #3
     80a:	mov	r1, r5
     80c:	mov	r0, r5
     80e:	blx	r9

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     810:	ldr	r3, [sp, #40]	; 0x28
     812:	cbz	r3, 81c <setup+0x158>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     814:	add	r1, sp, #32
     816:	mov	r0, r1
     818:	movs	r2, #3
     81a:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     81c:	ldr	r3, [sp, #24]
     81e:	cbz	r3, 828 <setup+0x164>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     820:	add	r1, sp, #16
     822:	mov	r0, r1
     824:	movs	r2, #3
     826:	blx	r3
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     828:	ldr	r7, [pc, #500]	; (a20 <setup+0x35c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     82a:	ldr	r3, [pc, #504]	; (a24 <setup+0x360>)
     82c:	str	r3, [sp, #16]
     82e:	mov.w	r9, #2
        pinMode(pinA, inputMode);
     832:	mov	r1, r9
     834:	mov	r0, r9
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     836:	str.w	sl, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
     83a:	str.w	r8, [sp, #24]
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     83e:	str.w	r9, [r7, #44]	; 0x2c
        pinMode(pinA, inputMode);
     842:	bl	1554 <pinMode>

        this->pinB = pinB;
     846:	movs	r3, #3
        pinMode(pinB, inputMode);
     848:	mov	r0, r3
     84a:	mov	r1, r9
    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     84c:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     84e:	bl	1554 <pinMode>

        setCountMode(countMode);
     852:	mov	r0, r7
     854:	movs	r1, #0
     856:	bl	ad4 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)>
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
     85a:	ldr	r3, [pc, #460]	; (a28 <setup+0x364>)
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
     85c:	ldr	r2, [pc, #460]	; (a2c <setup+0x368>)
     85e:	ldr	r1, [r2, #0]
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
     860:	ldr	r2, [r3, #0]
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     862:	and.w	r1, r1, #1
     866:	ubfx	r2, r2, #12, #1
     86a:	mov	r0, r7
     86c:	bl	b30 <EncPlex::EncoderBase::begin(unsigned long, unsigned long)>
     870:	ldr	r3, [sp, #24]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     872:	mov.w	fp, #0
     876:	str.w	fp, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     87a:	cmp	r3, #0
     87c:	beq.w	a02 <setup+0x33e>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     880:	mov	r2, r9
     882:	add	r0, sp, #32
     884:	add	r1, sp, #16
     886:	blx	r3
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
     888:	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     88a:	ldr	r2, [sp, #28]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     88c:	str.w	fp, [sp, #56]	; 0x38
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
     890:	str	r3, [sp, #40]	; 0x28
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     892:	str	r2, [sp, #44]	; 0x2c
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     894:	cmp	r3, #0
     896:	beq.w	a02 <setup+0x33e>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     89a:	mov	r2, r9
     89c:	add	r1, sp, #32
     89e:	mov	r0, r5
     8a0:	blx	r3
	  _M_invoker = __x._M_invoker;
     8a2:	ldr.w	lr, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
     8a6:	ldr	r3, [sp, #40]	; 0x28
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     8a8:	ldr	r2, [pc, #388]	; (a30 <setup+0x36c>)
     8aa:	ldr.w	r9, [r7, #32]
      __b = _GLIBCXX_MOVE(__tmp);
     8ae:	str	r3, [r7, #32]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     8b0:	ldmia.w	r5, {r0, r1}
     8b4:	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     8b8:	ldmia.w	r2, {r0, r1}
     8bc:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     8c0:	ldmia.w	r6, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     8c4:	ldr	r3, [r7, #36]	; 0x24
     8c6:	str.w	r9, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
     8ca:	stmia.w	r2, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     8ce:	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
     8d0:	str.w	lr, [r7, #36]	; 0x24

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     8d4:	cmp.w	r9, #0
     8d8:	beq.n	8e2 <setup+0x21e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     8da:	movs	r2, #3
     8dc:	mov	r1, r5
     8de:	mov	r0, r5
     8e0:	blx	r9

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     8e2:	ldr	r3, [sp, #40]	; 0x28
     8e4:	cbz	r3, 8ee <setup+0x22a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     8e6:	add	r1, sp, #32
     8e8:	mov	r0, r1
     8ea:	movs	r2, #3
     8ec:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     8ee:	ldr	r3, [sp, #24]
     8f0:	cbz	r3, 8fa <setup+0x236>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     8f2:	add	r1, sp, #16
     8f4:	mov	r0, r1
     8f6:	movs	r2, #3
     8f8:	blx	r3
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     8fa:	ldr	r7, [pc, #312]	; (a34 <setup+0x370>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     8fc:	ldr	r2, [pc, #312]	; (a38 <setup+0x374>)
     8fe:	str	r2, [sp, #16]
     900:	movs	r3, #4
        pinMode(pinA, inputMode);
     902:	mov	r0, r3
     904:	movs	r1, #2

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
     906:	str.w	r8, [sp, #24]
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     90a:	str	r3, [r7, #44]	; 0x2c
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     90c:	str.w	sl, [sp, #28]
        pinMode(pinA, inputMode);
     910:	bl	1554 <pinMode>

        this->pinB = pinB;
     914:	movs	r3, #5
        pinMode(pinB, inputMode);
     916:	mov	r0, r3
     918:	movs	r1, #2
    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     91a:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     91c:	bl	1554 <pinMode>

        setCountMode(countMode);
     920:	mov	r0, r7
     922:	movs	r1, #0
     924:	bl	ad4 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)>
		} else if (pin == 4) {
			return (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) ? 1 : 0;
		} else if (pin == 5) {
			return (CORE_PIN5_PINREG & CORE_PIN5_BITMASK) ? 1 : 0;
     928:	ldr	r3, [pc, #256]	; (a2c <setup+0x368>)
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
		} else if (pin == 4) {
			return (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) ? 1 : 0;
     92a:	ldr	r2, [pc, #252]	; (a28 <setup+0x364>)
     92c:	ldr	r1, [r2, #0]
		} else if (pin == 5) {
			return (CORE_PIN5_PINREG & CORE_PIN5_BITMASK) ? 1 : 0;
     92e:	ldr	r2, [r3, #0]
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     930:	ubfx	r1, r1, #13, #1
     934:	ubfx	r2, r2, #7, #1
     938:	mov	r0, r7
     93a:	bl	b30 <EncPlex::EncoderBase::begin(unsigned long, unsigned long)>
     93e:	ldr	r3, [sp, #24]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     940:	mov.w	r8, #0
     944:	str.w	r8, [sp, #40]	; 0x28
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     948:	cmp	r3, #0
     94a:	beq.n	9fa <setup+0x336>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     94c:	movs	r2, #2
     94e:	add	r0, sp, #32
     950:	add	r1, sp, #16
     952:	blx	r3
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
     954:	ldr	r3, [sp, #24]
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     956:	ldr	r2, [sp, #28]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     958:	str.w	r8, [sp, #56]	; 0x38
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
     95c:	str	r3, [sp, #40]	; 0x28
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     95e:	str	r2, [sp, #44]	; 0x2c
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     960:	cmp	r3, #0
     962:	beq.n	9fa <setup+0x336>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     964:	movs	r2, #2
     966:	add	r1, sp, #32
     968:	mov	r0, r5
     96a:	blx	r3
	  _M_invoker = __x._M_invoker;
     96c:	ldr.w	lr, [sp, #44]	; 0x2c
	  _M_manager = __x._M_manager;
     970:	ldr	r2, [sp, #40]	; 0x28
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     972:	ldr	r3, [pc, #200]	; (a3c <setup+0x378>)
     974:	ldr.w	r8, [r7, #32]
      __b = _GLIBCXX_MOVE(__tmp);
     978:	str	r2, [r7, #32]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     97a:	ldmia.w	r5, {r0, r1}
     97e:	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     982:	ldmia.w	r3, {r0, r1}
     986:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     98a:	ldmia.w	r6, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     98e:	ldr	r2, [r7, #36]	; 0x24
     990:	str.w	r8, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
     994:	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     998:	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
     99a:	str.w	lr, [r7, #36]	; 0x24

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     99e:	cmp.w	r8, #0
     9a2:	beq.n	9ac <setup+0x2e8>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     9a4:	movs	r2, #3
     9a6:	mov	r1, r5
     9a8:	mov	r0, r5
     9aa:	blx	r8

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     9ac:	ldr	r3, [sp, #40]	; 0x28
     9ae:	cbz	r3, 9b8 <setup+0x2f4>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     9b0:	add	r1, sp, #32
     9b2:	mov	r0, r1
     9b4:	movs	r2, #3
     9b6:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     9b8:	ldr	r3, [sp, #24]
     9ba:	cbz	r3, 9c4 <setup+0x300>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     9bc:	add	r1, sp, #16
     9be:	mov	r0, r1
     9c0:	movs	r2, #3
     9c2:	blx	r3
  generator.addOutputPins({9, 10, 11, 12, 14, 15}); // define up to 8 output pins (here for a T4.0)

  chnSelectEncoder.begin(0, 1, onChannelChanged);                 // encoder to select current channel on pin 0/1 using onChannelChanged callback
  frequencyEncoder.begin(2, 3, onFrequencyChanged);               // encoder to select freqency
  dutyCycleEncoder.begin(4, 5, onDutyCycleChanged);               // encoder to select duty cylce
  chnSelectEncoder.setLimits(0, generator.getNrOfChannels() - 1); // limit channel encoder range to actual number of defined channels
     9c4:	ldr	r2, [r4, #96]	; 0x60
     9c6:	ldr	r0, [pc, #72]	; (a10 <setup+0x34c>)
     9c8:	movs	r3, #0
     9ca:	mov	r1, r3
     9cc:	subs	r2, #1
     9ce:	bl	b14 <EncPlex::EncoderBase::setLimits(long, long, bool)>

  onChannelChanged(0, 0); // print some info at startup
     9d2:	movs	r1, #0
     9d4:	mov	r0, r1
     9d6:	bl	68c <onChannelChanged(int, int)>
}
     9da:	add	sp, #68	; 0x44
     9dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9e0:	ldr	r3, [r2, #0]
     9e2:	str	r3, [sp, #4]
	return ret;
     9e4:	ldr	r3, [sp, #4]
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
  
void setup()
{
  while (!Serial && millis() < 1000)
     9e6:	cmp.w	r3, #1000	; 0x3e8
     9ea:	bcc.w	6d2 <setup+0xe>
     9ee:	b.n	6ee <setup+0x2a>
     9f0:	ldr.w	lr, [sp, #60]	; 0x3c
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
  
void setup()
{
     9f4:	movs	r3, #0
     9f6:	add	r5, sp, #48	; 0x30
     9f8:	b.n	7d4 <setup+0x110>
     9fa:	ldr.w	lr, [sp, #60]	; 0x3c
     9fe:	movs	r2, #0
     a00:	b.n	972 <setup+0x2ae>
     a02:	ldr.w	lr, [sp, #60]	; 0x3c
     a06:	movs	r3, #0
     a08:	b.n	8a8 <setup+0x1e4>
      }
    }

    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();
     a0a:	ldr	r0, [pc, #52]	; (a40 <setup+0x37c>)
     a0c:	bl	4ac <FreqGen_t::panic()>
     a10:	.word	0x1fff1224
     a14:	.word	0x0000068d
     a18:	.word	0x400ff050
     a1c:	.word	0x1fff123c
     a20:	.word	0x1fff1258
     a24:	.word	0x00000595
     a28:	.word	0x400ff010
     a2c:	.word	0x400ff0d0
     a30:	.word	0x1fff1270
     a34:	.word	0x1fff128c
     a38:	.word	0x0000061d
     a3c:	.word	0x1fff12a4
     a40:	.word	0x1fff0734
     a44:	.word	0x0000046d
     a48:	.word	0x0000047d

00000a4c <_GLOBAL__sub_I_generator>:

void onChannelChanged(int encVal, int encDelta)
{
  Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
  printChannelInfo(encVal);
}
     a4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    };

    class EncoderBase
    {
     public:
        EncoderBase() = default;
     a50:	ldr	r3, [pc, #104]	; (abc <_GLOBAL__sub_I_generator+0x70>)
void onFrequencyChanged(int encVal, int encDelta);
void onChannelChanged(int encVal, int encDelta);
void onDutyCycleChanged(int encVal, int encDelta);

FreqGen_t generator;
Encoder frequencyEncoder;
     a52:	ldr.w	r9, [pc, #120]	; acc <_GLOBAL__sub_I_generator+0x80>
     a56:	ldr.w	r8, [pc, #120]	; ad0 <_GLOBAL__sub_I_generator+0x84>
     a5a:	ldr	r5, [pc, #100]	; (ac0 <_GLOBAL__sub_I_generator+0x74>)
     a5c:	str	r5, [r3, #40]	; 0x28
     a5e:	movs	r4, #0
     a60:	mov.w	r7, #2147483648	; 0x80000000
     a64:	mvn.w	r6, #2147483648	; 0x80000000
     a68:	mov	r2, r9
     a6a:	mov	r1, r8
     a6c:	str	r4, [r3, #0]
     a6e:	strb	r4, [r3, #12]
     a70:	str	r4, [r3, #16]
     a72:	strb	r4, [r3, #20]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     a74:	str	r4, [r3, #32]
     a76:	str	r7, [r3, #4]
     a78:	str	r6, [r3, #8]
     a7a:	mov	r0, r3
     a7c:	bl	3b28 <__aeabi_atexit>
     a80:	ldr	r3, [pc, #64]	; (ac4 <_GLOBAL__sub_I_generator+0x78>)
Encoder dutyCycleEncoder;
     a82:	mov	r2, r9
     a84:	mov	r1, r8
     a86:	stmia.w	r3, {r4, r7}
     a8a:	str	r6, [r3, #8]
     a8c:	strb	r4, [r3, #12]
     a8e:	str	r4, [r3, #16]
     a90:	strb	r4, [r3, #20]
     a92:	str	r4, [r3, #32]
     a94:	str	r5, [r3, #40]	; 0x28
     a96:	mov	r0, r3
     a98:	bl	3b28 <__aeabi_atexit>
     a9c:	ldr	r3, [pc, #40]	; (ac8 <_GLOBAL__sub_I_generator+0x7c>)
     a9e:	strb	r4, [r3, #20]
Encoder chnSelectEncoder;
     aa0:	mov	r2, r9
     aa2:	mov	r1, r8
     aa4:	mov	r0, r3
     aa6:	stmia.w	r3, {r4, r7}
     aaa:	str	r6, [r3, #8]
     aac:	strb	r4, [r3, #12]
     aae:	str	r4, [r3, #16]
     ab0:	str	r4, [r3, #32]
     ab2:	str	r5, [r3, #40]	; 0x28

void onChannelChanged(int encVal, int encDelta)
{
  Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
  printChannelInfo(encVal);
}
     ab4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void onDutyCycleChanged(int encVal, int encDelta);

FreqGen_t generator;
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
     ab8:	b.w	3b28 <__aeabi_atexit>
     abc:	.word	0x1fff1258
     ac0:	.word	0x00007e38
     ac4:	.word	0x1fff128c
     ac8:	.word	0x1fff1224
     acc:	.word	0x1fff0730
     ad0:	.word	0x00000495

00000ad4 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)>:

namespace EncPlex
{
    void EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
     ad4:	cmp	r1, #1
     ad6:	beq.n	afc <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x28>
     ad8:	cmp	r1, #2
     ada:	beq.n	af2 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x1e>
     adc:	cbz	r1, ae8 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x14>
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            default:
                stateMachine = &stateMachineFull;
     ade:	ldr	r3, [pc, #40]	; (b08 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x34>)
     ae0:	str	r3, [r0, #40]	; 0x28
                invert = 0b00;
     ae2:	movs	r3, #0
     ae4:	str	r3, [r0, #16]
     ae6:	bx	lr
    void EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     ae8:	ldr	r3, [pc, #32]	; (b0c <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x38>)
     aea:	str	r3, [r0, #40]	; 0x28
                invert = 0b11;
     aec:	movs	r3, #3
     aee:	str	r3, [r0, #16]
                break;
     af0:	bx	lr
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     af2:	ldr	r3, [pc, #28]	; (b10 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x3c>)
     af4:	str	r3, [r0, #40]	; 0x28
                invert = 0b00;
     af6:	movs	r3, #0
     af8:	str	r3, [r0, #16]
                break;
     afa:	bx	lr
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     afc:	ldr	r3, [pc, #12]	; (b0c <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x38>)
     afe:	str	r3, [r0, #40]	; 0x28
                invert = 0b00;
     b00:	movs	r3, #0
     b02:	str	r3, [r0, #16]
                break;
     b04:	bx	lr
     b06:	nop
     b08:	.word	0x00007e38
     b0c:	.word	0x00007e70
     b10:	.word	0x00007e54

00000b14 <EncPlex::EncoderBase::setLimits(long, long, bool)>:
        }
    }

    void EncoderBase::setLimits(int32_t min, int32_t max, bool periodic)
    {
        if(min < max)
     b14:	cmp	r1, r2
     b16:	blt.n	b26 <EncPlex::EncoderBase::setLimits(long, long, bool)+0x12>
            this->maxVal = max;
            this->periodic = periodic;
        }
        else
        {
            this->minVal = INT32_MIN;
     b18:	mov.w	r2, #2147483648	; 0x80000000
            this->maxVal = INT32_MAX;
     b1c:	mvn.w	r3, #2147483648	; 0x80000000
            this->maxVal = max;
            this->periodic = periodic;
        }
        else
        {
            this->minVal = INT32_MIN;
     b20:	str	r2, [r0, #4]
            this->maxVal = INT32_MAX;
     b22:	str	r3, [r0, #8]
     b24:	bx	lr

    void EncoderBase::setLimits(int32_t min, int32_t max, bool periodic)
    {
        if(min < max)
        {
            this->minVal = min;
     b26:	str	r1, [r0, #4]
            this->maxVal = max;
     b28:	str	r2, [r0, #8]
            this->periodic = periodic;
     b2a:	strb	r3, [r0, #12]
     b2c:	bx	lr
     b2e:	nop

00000b30 <EncPlex::EncoderBase::begin(unsigned long, unsigned long)>:
    };


    void EncoderBase::begin(uint32_t phaseA, uint32_t phaseB)
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
     b30:	ldr	r3, [r0, #16]
     b32:	orr.w	r1, r2, r1, lsl #1
     b36:	eors	r3, r1
     b38:	strb	r3, [r0, #20]
     b3a:	bx	lr

00000b3c <EncPlex::EncoderBase::update(unsigned long, unsigned long)>:
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     b3c:	push	{r4, r5, lr}
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     b3e:	ldr	r3, [r0, #16]
     b40:	ldrb	r5, [r0, #20]
     b42:	ldr	r4, [r0, #40]	; 0x28
     b44:	orr.w	r2, r2, r1, lsl #1
     b48:	eors	r3, r2
     b4a:	add.w	r4, r4, r5, lsl #2
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     b4e:	sub	sp, #36	; 0x24
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     b50:	ldrb	r3, [r4, r3]
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     b52:	and.w	r2, r3, #15
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
     b56:	and.w	r3, r3, #240	; 0xf0
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
     b5a:	cmp	r3, #16
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     b5c:	strb	r2, [r0, #20]

        if(direction == UP)
     b5e:	beq.n	b98 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x5c>
            }
            value = maxVal;
            return false;
        }

        if (direction == DOWN)
     b60:	cmp	r3, #32
     b62:	beq.n	b6c <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x30>
        if (direction == ERR)
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
     b64:	movs	r4, #0
    }
     b66:	mov	r0, r4
     b68:	add	sp, #36	; 0x24
     b6a:	pop	{r4, r5, pc}
            return false;
        }

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
     b6c:	ldr	r3, [r0, #0]
     b6e:	ldr	r2, [r0, #4]
     b70:	cmp	r3, r2
     b72:	ble.n	bea <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xae>
            {
                value--;
                if (callback != nullptr) callback(value, -1);
     b74:	ldr	r2, [r0, #32]

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
            {
                value--;
     b76:	subs	r3, #1
     b78:	str	r3, [r0, #0]
                if (callback != nullptr) callback(value, -1);
     b7a:	cbz	r2, b90 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x54>
     b7c:	add	r2, sp, #32
     b7e:	mov.w	r1, #4294967295
     b82:	str.w	r1, [r2, #-12]!
     b86:	str	r3, [sp, #16]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     b88:	adds	r0, #24
     b8a:	ldr	r3, [r0, #12]
     b8c:	add	r1, sp, #16
     b8e:	blx	r3
                return true;
     b90:	movs	r4, #1
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     b92:	mov	r0, r4
     b94:	add	sp, #36	; 0x24
     b96:	pop	{r4, r5, pc}
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
     b98:	ldr	r3, [r0, #0]
     b9a:	ldr	r2, [r0, #8]
     b9c:	cmp	r3, r2
     b9e:	blt.n	bc8 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x8c>
            {
                value++;
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
     ba0:	ldrb	r4, [r0, #12]
     ba2:	cmp	r4, #0
     ba4:	beq.n	c0e <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xd2>
            {
                value = minVal;
                if (callback != nullptr) callback(value, +1);
     ba6:	ldr	r2, [r0, #32]
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
            {
                value = minVal;
     ba8:	ldr	r3, [r0, #4]
     baa:	str	r3, [r0, #0]
                if (callback != nullptr) callback(value, +1);
     bac:	cmp	r2, #0
     bae:	beq.n	b90 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x54>
     bb0:	add	r2, sp, #32
     bb2:	movs	r1, #1
     bb4:	str.w	r1, [r2, #-20]!
     bb8:	str	r3, [sp, #8]
     bba:	adds	r0, #24
     bbc:	ldr	r3, [r0, #12]
     bbe:	add	r1, sp, #8
     bc0:	blx	r3
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     bc2:	mov	r0, r4
     bc4:	add	sp, #36	; 0x24
     bc6:	pop	{r4, r5, pc}
        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
                if (callback != nullptr) callback(value, +1);
     bc8:	ldr	r2, [r0, #32]

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     bca:	adds	r3, #1
     bcc:	str	r3, [r0, #0]
                if (callback != nullptr) callback(value, +1);
     bce:	cmp	r2, #0
     bd0:	beq.n	b90 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x54>
     bd2:	add	r2, sp, #32
     bd4:	movs	r4, #1
     bd6:	str	r3, [sp, #0]
     bd8:	str.w	r4, [r2, #-28]!
     bdc:	ldr	r3, [r0, #36]	; 0x24
     bde:	mov	r1, sp
     be0:	adds	r0, #24
     be2:	blx	r3
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     be4:	mov	r0, r4
     be6:	add	sp, #36	; 0x24
     be8:	pop	{r4, r5, pc}
            {
                value--;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
     bea:	ldrb	r4, [r0, #12]
     bec:	cbz	r4, c0e <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xd2>
            {
                value = maxVal;
                if (callback != nullptr) callback(value, -1);
     bee:	ldr	r2, [r0, #32]
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
            {
                value = maxVal;
     bf0:	ldr	r3, [r0, #8]
     bf2:	str	r3, [r0, #0]
                if (callback != nullptr) callback(value, -1);
     bf4:	cmp	r2, #0
     bf6:	beq.n	b90 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x54>
     bf8:	add	r2, sp, #32
     bfa:	mov.w	r1, #4294967295
     bfe:	str.w	r1, [r2, #-4]!
     c02:	str	r3, [sp, #24]
     c04:	adds	r0, #24
     c06:	ldr	r3, [r0, #12]
     c08:	add	r1, sp, #24
     c0a:	blx	r3
     c0c:	b.n	b66 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x2a>
                return true;
            }
            value = minVal;
     c0e:	str	r2, [r0, #0]
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     c10:	mov	r0, r4
     c12:	add	sp, #36	; 0x24
     c14:	pop	{r4, r5, pc}
     c16:	nop

00000c18 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     c18:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
     c1a:	ldr	r5, [pc, #60]	; (c58 <usb_serial_getchar+0x40>)
     c1c:	ldr	r0, [r5, #0]
     c1e:	cbz	r0, c40 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
     c20:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
     c22:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     c24:	adds	r1, r0, r3
     c26:	adds	r3, #1
	if (i >= rx_packet->len) {
     c28:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     c2a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
     c2c:	bcs.n	c34 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
     c2e:	strh	r3, [r0, #2]
	}
	return c;
     c30:	mov	r0, r4
}
     c32:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
     c34:	bl	17b0 <usb_free>
		rx_packet = NULL;
     c38:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
     c3a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
     c3c:	str	r3, [r5, #0]
     c3e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     c40:	ldr	r3, [pc, #24]	; (c5c <usb_serial_getchar+0x44>)
     c42:	ldrb	r3, [r3, #0]
     c44:	cbz	r3, c52 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     c46:	movs	r0, #3
     c48:	bl	17fc <usb_rx>
     c4c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
     c4e:	cmp	r0, #0
     c50:	bne.n	c20 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     c52:	mov.w	r0, #4294967295
     c56:	pop	{r3, r4, r5, pc}
     c58:	.word	0x1fff12cc
     c5c:	.word	0x1fff13b8

00000c60 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
     c60:	push	{r4, lr}
	if (!rx_packet) {
     c62:	ldr	r4, [pc, #36]	; (c88 <usb_serial_peekchar+0x28>)
     c64:	ldr	r0, [r4, #0]
     c66:	cbz	r0, c70 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
     c68:	ldrh	r3, [r0, #2]
     c6a:	add	r0, r3
     c6c:	ldrb	r0, [r0, #8]
}
     c6e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     c70:	ldr	r3, [pc, #24]	; (c8c <usb_serial_peekchar+0x2c>)
     c72:	ldrb	r3, [r3, #0]
     c74:	cbz	r3, c82 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     c76:	movs	r0, #3
     c78:	bl	17fc <usb_rx>
     c7c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
     c7e:	cmp	r0, #0
     c80:	bne.n	c68 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     c82:	mov.w	r0, #4294967295
     c86:	pop	{r4, pc}
     c88:	.word	0x1fff12cc
     c8c:	.word	0x1fff13b8

00000c90 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     c90:	ldr	r3, [pc, #16]	; (ca4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
     c92:	ldr	r2, [pc, #20]	; (ca8 <usb_serial_available+0x18>)
     c94:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
     c96:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     c98:	cbz	r3, ca2 <usb_serial_available+0x12>
     c9a:	ldrh	r2, [r3, #0]
     c9c:	ldrh	r3, [r3, #2]
     c9e:	subs	r3, r2, r3
     ca0:	add	r0, r3
	return count;
}
     ca2:	bx	lr
     ca4:	.word	0x1fff12cc
     ca8:	.word	0x1fff1720

00000cac <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
     cac:	ldr	r3, [pc, #44]	; (cdc <usb_serial_flush_input+0x30>)
     cae:	ldrb	r3, [r3, #0]
     cb0:	cbz	r3, cda <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
     cb2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
     cb4:	ldr	r4, [pc, #40]	; (ce0 <usb_serial_flush_input+0x34>)
     cb6:	ldr	r0, [r4, #0]
     cb8:	cbz	r0, cce <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
     cba:	bl	17b0 <usb_free>
		rx_packet = NULL;
     cbe:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     cc0:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
     cc2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     cc4:	bl	17fc <usb_rx>
		if (!rx) break;
     cc8:	cbz	r0, cd8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
     cca:	bl	17b0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     cce:	movs	r0, #3
     cd0:	bl	17fc <usb_rx>
		if (!rx) break;
     cd4:	cmp	r0, #0
     cd6:	bne.n	cca <usb_serial_flush_input+0x1e>
     cd8:	pop	{r4, pc}
     cda:	bx	lr
     cdc:	.word	0x1fff13b8
     ce0:	.word	0x1fff12cc

00000ce4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     ce4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     ce8:	ldr.w	r9, [pc, #248]	; de4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     cec:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     cee:	movs	r2, #1
     cf0:	strb.w	r2, [r9]
	while (size > 0) {
     cf4:	str	r1, [sp, #4]
     cf6:	cbz	r1, d54 <usb_serial_write+0x70>
     cf8:	ldr.w	r8, [pc, #236]	; de8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     cfc:	ldr	r7, [pc, #212]	; (dd4 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     cfe:	ldr	r6, [sp, #4]
     d00:	mov	fp, r0
		if (!tx_packet) {
     d02:	ldr.w	r0, [r8]
     d06:	cbz	r0, d76 <usb_serial_write+0x92>
     d08:	ldr	r5, [pc, #204]	; (dd8 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
     d0a:	ldrh	r4, [r0, #2]
     d0c:	rsb	r1, r4, #64	; 0x40
     d10:	cmp	r1, r6
     d12:	it	cs
     d14:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     d16:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
     d1a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     d1c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
     d20:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
     d22:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     d24:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
     d28:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
     d2c:	cbz	r1, d44 <usb_serial_write+0x60>
     d2e:	subs	r4, #1
     d30:	add	r2, r4
     d32:	add	r1, fp
     d34:	ldrb.w	r4, [fp], #1
     d38:	strb.w	r4, [r2, #1]!
     d3c:	cmp	fp, r1
     d3e:	bne.n	d34 <usb_serial_write+0x50>
     d40:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
     d44:	cmp.w	lr, #63	; 0x3f
     d48:	bhi.n	d62 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     d4a:	ldr	r2, [pc, #144]	; (ddc <usb_serial_write+0xf8>)
     d4c:	movs	r1, #5
     d4e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     d50:	cmp	r6, #0
     d52:	bne.n	d02 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
     d54:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
     d56:	movs	r3, #0
     d58:	strb.w	r3, [r9]
	return ret;
}
     d5c:	add	sp, #12
     d5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
     d62:	movs	r2, #64	; 0x40
     d64:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
     d66:	mov	r1, r0
     d68:	movs	r0, #4
     d6a:	bl	192c <usb_tx>
			tx_packet = NULL;
     d6e:	movs	r2, #0
     d70:	str.w	r2, [r8]
     d74:	b.n	d4a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     d76:	ldrb	r2, [r7, #0]
     d78:	cbz	r2, dc4 <usb_serial_write+0xe0>
     d7a:	ldr	r4, [pc, #100]	; (de0 <usb_serial_write+0xfc>)
     d7c:	ldr	r5, [pc, #88]	; (dd8 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
     d7e:	mov.w	sl, #1
     d82:	b.n	d94 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     d84:	subs	r4, #1
     d86:	beq.n	db6 <usb_serial_write+0xd2>
     d88:	ldrb	r2, [r5, #0]
     d8a:	cbnz	r2, db6 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
     d8c:	bl	2774 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     d90:	ldrb	r2, [r7, #0]
     d92:	cbz	r2, dc4 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
     d94:	movs	r0, #4
     d96:	bl	1838 <usb_tx_packet_count>
     d9a:	cmp	r0, #7
     d9c:	bhi.n	d84 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
     d9e:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
     da2:	bl	1770 <usb_malloc>
     da6:	str.w	r0, [r8]
					if (tx_packet) break;
     daa:	cmp	r0, #0
     dac:	bne.n	d0a <usb_serial_write+0x26>
					tx_noautoflush = 0;
     dae:	ldr	r3, [pc, #52]	; (de4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     db0:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
     db2:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     db4:	bne.n	d88 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
     db6:	movs	r3, #1
					return -1;
     db8:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
     dbc:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
     dbe:	add	sp, #12
     dc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
     dc4:	movs	r3, #0
					return -1;
     dc6:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
     dca:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
     dce:	add	sp, #12
     dd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dd4:	.word	0x1fff13b8
     dd8:	.word	0x1fff12c8
     ddc:	.word	0x1fff12c0
     de0:	.word	0x00014821
     de4:	.word	0x1fff12c1
     de8:	.word	0x1fff12c4

00000dec <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     dec:	push	{lr}
     dee:	sub	sp, #12
     df0:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
     df2:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     df4:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
     df8:	mov	r0, r3
     dfa:	bl	ce4 <usb_serial_write>
}
     dfe:	add	sp, #12
     e00:	ldr.w	pc, [sp], #4

00000e04 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
     e04:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
     e06:	ldr	r5, [pc, #56]	; (e40 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
     e08:	ldr	r4, [pc, #56]	; (e44 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
     e0a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
     e0c:	movs	r3, #1
     e0e:	strb	r3, [r4, #0]
	if (!tx_packet) {
     e10:	cbz	r0, e1e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
     e12:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
     e14:	movs	r3, #0
     e16:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
     e18:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
     e1c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
     e1e:	ldr	r3, [pc, #40]	; (e48 <usb_serial_write_buffer_free+0x44>)
     e20:	ldrb	r3, [r3, #0]
     e22:	cbnz	r3, e2a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
     e24:	movs	r0, #0
     e26:	strb	r0, [r4, #0]
			return 0;
     e28:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
     e2a:	movs	r0, #4
     e2c:	bl	1838 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
     e30:	cmp	r0, #7
     e32:	bhi.n	e24 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
     e34:	bl	1770 <usb_malloc>
     e38:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
     e3a:	cmp	r0, #0
     e3c:	bne.n	e12 <usb_serial_write_buffer_free+0xe>
     e3e:	b.n	e24 <usb_serial_write_buffer_free+0x20>
     e40:	.word	0x1fff12c4
     e44:	.word	0x1fff12c1
     e48:	.word	0x1fff13b8

00000e4c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
     e4c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
     e4e:	ldr	r3, [pc, #68]	; (e94 <usb_serial_flush_output+0x48>)
     e50:	ldrb	r3, [r3, #0]
     e52:	cbz	r3, e78 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
     e54:	ldr	r6, [pc, #64]	; (e98 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
     e56:	ldr	r5, [pc, #68]	; (e9c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
     e58:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
     e5a:	movs	r7, #1
     e5c:	strb	r7, [r5, #0]
	if (tx_packet) {
     e5e:	cbz	r4, e7a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
     e60:	ldr	r2, [pc, #60]	; (ea0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
     e62:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
     e64:	movs	r7, #0
     e66:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
     e68:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
     e6a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
     e6c:	movs	r0, #4
     e6e:	bl	192c <usb_tx>
		tx_packet = NULL;
     e72:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
     e74:	movs	r3, #0
     e76:	strb	r3, [r5, #0]
     e78:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
     e7a:	bl	1770 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
     e7e:	ldr	r3, [pc, #32]	; (ea0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
     e80:	cbz	r0, e8e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
     e82:	mov	r1, r0
     e84:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
     e86:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
     e88:	bl	192c <usb_tx>
     e8c:	b.n	e74 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
     e8e:	strb	r7, [r3, #0]
     e90:	b.n	e74 <usb_serial_flush_output+0x28>
     e92:	nop
     e94:	.word	0x1fff13b8
     e98:	.word	0x1fff12c4
     e9c:	.word	0x1fff12c1
     ea0:	.word	0x1fff12c0

00000ea4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
     ea4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
     ea6:	ldr	r3, [pc, #56]	; (ee0 <usb_serial_flush_callback+0x3c>)
     ea8:	ldrb	r3, [r3, #0]
     eaa:	cbnz	r3, eca <usb_serial_flush_callback+0x26>
	if (tx_packet) {
     eac:	ldr	r4, [pc, #52]	; (ee4 <usb_serial_flush_callback+0x40>)
     eae:	ldr	r1, [r4, #0]
     eb0:	cbz	r1, ecc <usb_serial_flush_callback+0x28>
     eb2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
     eb6:	ldrh	r3, [r1, #2]
     eb8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
     eba:	movs	r0, #4
     ebc:	bl	192c <usb_tx>
		tx_packet = NULL;
     ec0:	str	r5, [r4, #0]
     ec2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
     ec4:	ldr	r3, [pc, #32]	; (ee8 <usb_serial_flush_callback+0x44>)
     ec6:	movs	r2, #1
     ec8:	strb	r2, [r3, #0]
     eca:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
     ecc:	bl	1770 <usb_malloc>
		if (tx) {
     ed0:	cmp	r0, #0
     ed2:	beq.n	ec4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
     ed4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
     ed6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
     eda:	movs	r0, #4
     edc:	b.w	192c <usb_tx>
     ee0:	.word	0x1fff12c1
     ee4:	.word	0x1fff12c4
     ee8:	.word	0x1fff12c0

00000eec <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
     eec:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
     eee:	ldr	r4, [pc, #64]	; (f30 <fault_isr+0x44>)
     ef0:	b.n	f04 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     ef2:	ldr	r3, [r4, #0]
     ef4:	lsls	r1, r3, #21
     ef6:	bmi.n	f14 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     ef8:	ldr	r3, [r4, #0]
     efa:	lsls	r2, r3, #20
     efc:	bmi.n	f1e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
     efe:	ldr	r3, [r4, #0]
     f00:	lsls	r3, r3, #19
     f02:	bmi.n	f28 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
     f04:	ldr	r3, [r4, #0]
     f06:	lsls	r0, r3, #13
     f08:	bpl.n	ef2 <fault_isr+0x6>
     f0a:	bl	19b0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     f0e:	ldr	r3, [r4, #0]
     f10:	lsls	r1, r3, #21
     f12:	bpl.n	ef8 <fault_isr+0xc>
     f14:	bl	2e78 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     f18:	ldr	r3, [r4, #0]
     f1a:	lsls	r2, r3, #20
     f1c:	bpl.n	efe <fault_isr+0x12>
     f1e:	bl	2c54 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
     f22:	ldr	r3, [r4, #0]
     f24:	lsls	r3, r3, #19
     f26:	bpl.n	f04 <fault_isr+0x18>
     f28:	bl	3178 <uart2_status_isr>
     f2c:	b.n	f04 <fault_isr+0x18>
     f2e:	nop
     f30:	.word	0x40048034

00000f34 <unused_isr>:
	}
}

void unused_isr(void)
{
     f34:	push	{r3, lr}
	fault_isr();
     f36:	bl	eec <fault_isr>
     f3a:	nop

00000f3c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
     f3c:	ldr	r3, [pc, #4]	; (f44 <startup_early_hook+0x8>)
     f3e:	movs	r2, #16
     f40:	strh	r2, [r3, #0]
     f42:	bx	lr
     f44:	.word	0x40052000

00000f48 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
     f48:	bx	lr
     f4a:	nop

00000f4c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
     f4c:	ldr	r1, [pc, #36]	; (f74 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
     f4e:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
     f50:	ldr	r3, [r1, #0]
	if (incr != 0) {
     f52:	cbz	r0, f62 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
     f54:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
     f56:	add	r0, r3
     f58:	sub.w	r2, r2, #8192	; 0x2000
     f5c:	cmp	r0, r2
     f5e:	bcs.n	f66 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
     f60:	str	r0, [r1, #0]
	}
	return prev;
     f62:	mov	r0, r3
}
     f64:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
     f66:	bl	3b40 <__errno>
     f6a:	movs	r3, #12
     f6c:	str	r3, [r0, #0]
			return (void *)-1;
     f6e:	mov.w	r0, #4294967295
     f72:	pop	{r3, pc}
     f74:	.word	0x1fff0798

00000f78 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
     f78:	ldr	r2, [pc, #32]	; (f9c <kinetis_hsrun_disable+0x24>)
     f7a:	ldrb	r3, [r2, #0]
     f7c:	cmp	r3, #128	; 0x80
     f7e:	beq.n	f84 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
     f80:	movs	r0, #0
}
     f82:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
     f84:	ldr	r1, [pc, #24]	; (fa0 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
     f86:	ldr	r3, [pc, #28]	; (fa4 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
     f88:	ldr	r0, [pc, #28]	; (fa8 <kinetis_hsrun_disable+0x30>)
     f8a:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
     f8c:	movs	r1, #0
     f8e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
     f90:	ldrb	r3, [r2, #0]
     f92:	cmp	r3, #128	; 0x80
     f94:	beq.n	f90 <kinetis_hsrun_disable+0x18>
		return 1;
     f96:	movs	r0, #1
     f98:	bx	lr
     f9a:	nop
     f9c:	.word	0x4007e003
     fa0:	.word	0x40048044
     fa4:	.word	0x4007e001
     fa8:	.word	0x22280000

00000fac <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
     fac:	ldr	r2, [pc, #36]	; (fd4 <kinetis_hsrun_enable+0x28>)
     fae:	ldrb	r3, [r2, #0]
     fb0:	cmp	r3, #1
     fb2:	beq.n	fb8 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
     fb4:	movs	r0, #0
}
     fb6:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
     fb8:	add.w	r3, r3, #1073741824	; 0x40000000
     fbc:	add.w	r3, r3, #516096	; 0x7e000
     fc0:	movs	r1, #96	; 0x60
     fc2:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
     fc4:	ldrb	r3, [r2, #0]
     fc6:	cmp	r3, #128	; 0x80
     fc8:	bne.n	fc4 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
     fca:	ldr	r3, [pc, #12]	; (fd8 <kinetis_hsrun_enable+0x2c>)
     fcc:	ldr	r2, [pc, #12]	; (fdc <kinetis_hsrun_enable+0x30>)
     fce:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
     fd0:	movs	r0, #1
     fd2:	bx	lr
     fd4:	.word	0x4007e003
     fd8:	.word	0x40048044
     fdc:	.word	0x02060000

00000fe0 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
     fe0:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
     fe2:	ldr	r3, [pc, #68]	; (1028 <digitalWrite.part.1+0x48>)
     fe4:	ldr.w	r2, [r3, r0, lsl #3]
     fe8:	ldrb.w	r4, [r2, #640]	; 0x280
     fec:	cbz	r4, ffc <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
     fee:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
     ff0:	cbz	r1, 1012 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
     ff2:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
     ff6:	ldr.w	r4, [sp], #4
     ffa:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
     ffc:	add.w	r3, r3, r0, lsl #3
    1000:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1002:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1004:	cbnz	r1, 101c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1006:	bic.w	r2, r2, #2
    100a:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    100c:	ldr.w	r4, [sp], #4
    1010:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1012:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1016:	ldr.w	r4, [sp], #4
    101a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    101c:	orr.w	r2, r2, #3
    1020:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1022:	ldr.w	r4, [sp], #4
    1026:	bx	lr
    1028:	.word	0x00007e8c

0000102c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    102c:	ldr	r2, [pc, #112]	; (10a0 <pinMode.part.2+0x74>)
    102e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1032:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1034:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1036:	beq.n	105c <pinMode.part.2+0x30>
    1038:	cmp	r1, #4
    103a:	beq.n	1074 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    103c:	ldr.w	r0, [r2, r0, lsl #3]
    1040:	movs	r2, #0
    1042:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1046:	cbz	r1, 1054 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1048:	cmp	r1, #2
    104a:	beq.n	108e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    104c:	cmp	r1, #3
    104e:	beq.n	1096 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1050:	str	r2, [r3, #0]
    1052:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1054:	mov.w	r2, #256	; 0x100
    1058:	str	r2, [r3, #0]
    105a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    105c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1060:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1064:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1068:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    106a:	ldr	r2, [r3, #0]
    106c:	bic.w	r2, r2, #32
    1070:	str	r2, [r3, #0]
    1072:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1074:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1078:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    107c:	movs	r0, #1
    107e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1082:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1084:	ldr	r2, [r3, #0]
    1086:	orr.w	r2, r2, #32
    108a:	str	r2, [r3, #0]
    108c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    108e:	movw	r2, #259	; 0x103
    1092:	str	r2, [r3, #0]
    1094:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    1096:	mov.w	r2, #258	; 0x102
    109a:	str	r2, [r3, #0]
    109c:	bx	lr
    109e:	nop
    10a0:	.word	0x00007e8c

000010a4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    10a4:	push	{r4, r5}
	RTC_SR = 0;
    10a6:	ldr	r3, [pc, #20]	; (10bc <rtc_set+0x18>)
	RTC_TPR = 0;
    10a8:	ldr	r5, [pc, #20]	; (10c0 <rtc_set+0x1c>)
	RTC_TSR = t;
    10aa:	ldr	r4, [pc, #24]	; (10c4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    10ac:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    10ae:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    10b0:	str	r2, [r3, #0]
	RTC_TPR = 0;
    10b2:	str	r2, [r5, #0]
	RTC_TSR = t;
    10b4:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    10b6:	str	r1, [r3, #0]
}
    10b8:	pop	{r4, r5}
    10ba:	bx	lr
    10bc:	.word	0x4003d014
    10c0:	.word	0x4003d004
    10c4:	.word	0x4003d000

000010c8 <analogWrite>:
// FTM is clocked by the bus clock, either 24 or 48 MHz
// input capture can be FTM1_CH0, CMP0 or CMP1 or USB start of frame
// 24 MHz with reload 49152 to match Arduino's speed = 488.28125 Hz

void analogWrite(uint8_t pin, int val)
{
    10c8:	push	{r3, r4, r5, lr}
		}
		analogWriteDAC0(val);
		return;
	}
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (pin == A21 || pin == A22) {
    10ca:	sub.w	r3, r0, #66	; 0x42
    10ce:	cmp	r3, #1
// FTM is clocked by the bus clock, either 24 or 48 MHz
// input capture can be FTM1_CH0, CMP0 or CMP1 or USB start of frame
// 24 MHz with reload 49152 to match Arduino's speed = 488.28125 Hz

void analogWrite(uint8_t pin, int val)
{
    10d0:	mov	r4, r0
		}
		analogWriteDAC0(val);
		return;
	}
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (pin == A21 || pin == A22) {
    10d2:	bls.n	111e <analogWrite+0x56>
		return;
	}
#endif

	max = 1 << analog_write_res;
	if (val <= 0) {
    10d4:	cmp	r1, #0
    10d6:	ble.n	11ce <analogWrite+0x106>
		else analogWriteDAC1(val);
		return;
	}
#endif

	max = 1 << analog_write_res;
    10d8:	ldr	r3, [pc, #612]	; (1340 <analogWrite+0x278>)
    10da:	ldrb	r3, [r3, #0]
	if (val <= 0) {
		digitalWrite(pin, LOW);
		pinMode(pin, OUTPUT);	// TODO: implement OUTPUT_LOW
		return;
	} else if (val >= max) {
    10dc:	movs	r5, #1
    10de:	lsl.w	r2, r5, r3
    10e2:	cmp	r2, r1
    10e4:	bhi.n	10ec <analogWrite+0x24>

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    10e6:	cmp	r0, #63	; 0x3f
    10e8:	bls.n	1144 <analogWrite+0x7c>
    10ea:	pop	{r3, r4, r5, pc}
	//serial_phex32(val);
	//serial_print("\n");
	//serial_print("analog_write_res = ");
	//serial_phex(analog_write_res);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    10ec:	subs	r2, r0, #3
    10ee:	cmp	r2, #1
    10f0:	bls.n	1154 <analogWrite+0x8c>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
#if defined(FTM2_CH0_PIN)
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    10f2:	sub.w	r2, r0, #29
    10f6:	cmp	r2, #1
    10f8:	bls.n	11ec <analogWrite+0x124>
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
#endif
#if defined(FTM3_CH0_PIN)
	} else if (pin == FTM3_CH0_PIN || pin == FTM3_CH1_PIN || pin == FTM3_CH2_PIN
    10fa:	cmp	r0, #14
    10fc:	bls.n	11b6 <analogWrite+0xee>
	  || pin == FTM3_CH3_PIN || pin == FTM3_CH4_PIN || pin == FTM3_CH5_PIN
    10fe:	sub.w	r2, r4, #35	; 0x23
    1102:	cmp	r2, #3
    1104:	bls.n	11c0 <analogWrite+0xf8>
	  || pin == FTM3_CH6_PIN || pin == FTM3_CH7_PIN) {
		cval = ((uint32_t)val * (uint32_t)(FTM3_MOD + 1)) >> analog_write_res;
#endif
#if defined(TPM1_CH0_PIN)
	} else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
    1106:	sub.w	r2, r4, #16
    110a:	cmp	r2, #1
		cval = ((uint32_t)val * (uint32_t)(TPM1_MOD + 1)) >> analog_write_res;
    110c:	ite	ls
    110e:	ldrls	r2, [pc, #564]	; (1344 <analogWrite+0x27c>)
#endif
	} else {
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    1110:	ldrhi	r2, [pc, #564]	; (1348 <analogWrite+0x280>)
    1112:	ldr	r2, [r2, #0]
    1114:	mla	r2, r2, r1, r1
    1118:	lsr.w	r3, r2, r3
    111c:	b.n	1160 <analogWrite+0x98>
		analogWriteDAC0(val);
		return;
	}
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (pin == A21 || pin == A22) {
		uint8_t res = analog_write_res;
    111e:	ldr	r3, [pc, #544]	; (1340 <analogWrite+0x278>)
    1120:	ldrb	r3, [r3, #0]
		if (res < 12) {
    1122:	cmp	r3, #11
    1124:	bls.n	113c <analogWrite+0x74>
			val <<= 12 - res;
		} else if (res > 12) {
    1126:	cmp	r3, #12
			val >>= res - 12;
    1128:	itt	ne
    112a:	subne	r3, #12
    112c:	asrne	r1, r3
		}
		if (pin == A21) analogWriteDAC0(val);
    112e:	cmp	r4, #66	; 0x42
    1130:	mov	r0, r1
    1132:	beq.n	11e4 <analogWrite+0x11c>
#endif
	  default:
		digitalWrite(pin, (val > 127) ? HIGH : LOW);
		pinMode(pin, OUTPUT);
	}
}
    1134:	ldmia.w	sp!, {r3, r4, r5, lr}
			val <<= 12 - res;
		} else if (res > 12) {
			val >>= res - 12;
		}
		if (pin == A21) analogWriteDAC0(val);
		else analogWriteDAC1(val);
    1138:	b.w	2bf8 <analogWriteDAC1>
	}
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (pin == A21 || pin == A22) {
		uint8_t res = analog_write_res;
		if (res < 12) {
			val <<= 12 - res;
    113c:	rsb	r3, r3, #12
    1140:	lsls	r1, r3
    1142:	b.n	112e <analogWrite+0x66>
    1144:	mov	r1, r5
    1146:	bl	fe0 <digitalWrite.part.1>
    114a:	mov	r1, r5
#endif
	  default:
		digitalWrite(pin, (val > 127) ? HIGH : LOW);
		pinMode(pin, OUTPUT);
	}
}
    114c:	ldmia.w	sp!, {r3, r4, r5, lr}
    1150:	b.w	102c <pinMode.part.2>
	//serial_print("\n");
	//serial_print("analog_write_res = ");
	//serial_phex(analog_write_res);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    1154:	ldr	r2, [pc, #500]	; (134c <analogWrite+0x284>)
    1156:	ldr	r2, [r2, #0]
    1158:	mla	r2, r2, r1, r1
    115c:	lsr.w	r3, r2, r3
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
	}
	//serial_print("cval = ");
	//serial_phex32(cval);
	//serial_print("\n");
	switch (pin) {
    1160:	subs	r2, r4, #2
    1162:	cmp	r2, #36	; 0x24
    1164:	bhi.w	132e <analogWrite+0x266>
    1168:	tbh	[pc, r2, lsl #1]
    116c:	.word	0x00d300da
    1170:	.word	0x00c500cc
    1174:	.word	0x00b700be
    1178:	.word	0x00a900b0
    117c:	.word	0x00e100a2
    1180:	.word	0x00e100e1
    1184:	.word	0x00e1009b
    1188:	.word	0x008d0094
    118c:	.word	0x00e100e1
    1190:	.word	0x007f0086
    1194:	.word	0x00710078
    1198:	.word	0x00e100e1
    119c:	.word	0x00e100e1
    11a0:	.word	0x006a00e1
    11a4:	.word	0x00e10063
    11a8:	.word	0x00e100e1
    11ac:	.word	0x005c00e1
    11b0:	.word	0x004e0055
    11b4:	.short	0x0047
#if defined(FTM2_CH0_PIN)
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
#endif
#if defined(FTM3_CH0_PIN)
	} else if (pin == FTM3_CH0_PIN || pin == FTM3_CH1_PIN || pin == FTM3_CH2_PIN
    11b6:	movw	r2, #16772	; 0x4184
    11ba:	lsrs	r2, r0
    11bc:	lsls	r2, r2, #31
    11be:	bpl.n	10fe <analogWrite+0x36>
	  || pin == FTM3_CH3_PIN || pin == FTM3_CH4_PIN || pin == FTM3_CH5_PIN
	  || pin == FTM3_CH6_PIN || pin == FTM3_CH7_PIN) {
		cval = ((uint32_t)val * (uint32_t)(FTM3_MOD + 1)) >> analog_write_res;
    11c0:	ldr	r2, [pc, #396]	; (1350 <analogWrite+0x288>)
    11c2:	ldr	r2, [r2, #0]
    11c4:	mla	r2, r2, r1, r1
    11c8:	lsr.w	r3, r2, r3
    11cc:	b.n	1160 <analogWrite+0x98>

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    11ce:	cmp	r0, #63	; 0x3f
    11d0:	bhi.n	10ea <analogWrite+0x22>
    11d2:	movs	r1, #0
    11d4:	bl	fe0 <digitalWrite.part.1>
    11d8:	mov	r0, r4
    11da:	movs	r1, #1
#endif
	  default:
		digitalWrite(pin, (val > 127) ? HIGH : LOW);
		pinMode(pin, OUTPUT);
	}
}
    11dc:	ldmia.w	sp!, {r3, r4, r5, lr}
    11e0:	b.w	102c <pinMode.part.2>
    11e4:	ldmia.w	sp!, {r3, r4, r5, lr}
		if (res < 12) {
			val <<= 12 - res;
		} else if (res > 12) {
			val >>= res - 12;
		}
		if (pin == A21) analogWriteDAC0(val);
    11e8:	b.w	2bbc <analogWriteDAC0>
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
#if defined(FTM2_CH0_PIN)
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    11ec:	ldr	r2, [pc, #356]	; (1354 <analogWrite+0x28c>)
    11ee:	ldr	r2, [r2, #0]
    11f0:	mla	r2, r2, r1, r1
    11f4:	lsr.w	r3, r2, r3
    11f8:	b.n	1160 <analogWrite+0x98>
		FTM_PINCFG(FTM3_CH6_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH7_PIN
	  case FTM3_CH7_PIN:
		FTM3_C7V = cval;
    11fa:	ldr	r1, [pc, #348]	; (1358 <analogWrite+0x290>)
		FTM_PINCFG(FTM3_CH7_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    11fc:	ldr	r2, [pc, #348]	; (135c <analogWrite+0x294>)
		FTM_PINCFG(FTM3_CH6_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH7_PIN
	  case FTM3_CH7_PIN:
		FTM3_C7V = cval;
    11fe:	str	r3, [r1, #0]
		FTM_PINCFG(FTM3_CH7_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1200:	mov.w	r3, #836	; 0x344
    1204:	str	r3, [r2, #0]
		break;
    1206:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM3_CH5_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH6_PIN
	  case FTM3_CH6_PIN:
		FTM3_C6V = cval;
    1208:	ldr	r1, [pc, #340]	; (1360 <analogWrite+0x298>)
		FTM_PINCFG(FTM3_CH6_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    120a:	ldr	r2, [pc, #344]	; (1364 <analogWrite+0x29c>)
		FTM_PINCFG(FTM3_CH5_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH6_PIN
	  case FTM3_CH6_PIN:
		FTM3_C6V = cval;
    120c:	str	r3, [r1, #0]
		FTM_PINCFG(FTM3_CH6_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    120e:	mov.w	r3, #836	; 0x344
    1212:	str	r3, [r2, #0]
		break;
    1214:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM3_CH4_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH5_PIN
	  case FTM3_CH5_PIN:
		FTM3_C5V = cval;
    1216:	ldr	r1, [pc, #336]	; (1368 <analogWrite+0x2a0>)
		FTM_PINCFG(FTM3_CH5_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1218:	ldr	r2, [pc, #336]	; (136c <analogWrite+0x2a4>)
		FTM_PINCFG(FTM3_CH4_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH5_PIN
	  case FTM3_CH5_PIN:
		FTM3_C5V = cval;
    121a:	str	r3, [r1, #0]
		FTM_PINCFG(FTM3_CH5_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    121c:	mov.w	r3, #836	; 0x344
    1220:	str	r3, [r2, #0]
		break;
    1222:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM3_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH4_PIN
	  case FTM3_CH4_PIN:
		FTM3_C4V = cval;
    1224:	ldr	r1, [pc, #328]	; (1370 <analogWrite+0x2a8>)
		FTM_PINCFG(FTM3_CH4_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1226:	ldr	r2, [pc, #332]	; (1374 <analogWrite+0x2ac>)
		FTM_PINCFG(FTM3_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH4_PIN
	  case FTM3_CH4_PIN:
		FTM3_C4V = cval;
    1228:	str	r3, [r1, #0]
		FTM_PINCFG(FTM3_CH4_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    122a:	mov.w	r3, #836	; 0x344
    122e:	str	r3, [r2, #0]
		break;
    1230:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM2_CH1_PIN
	  case FTM2_CH1_PIN: // PTB19, FTM1_CH1
		FTM2_C1V = cval;
    1232:	ldr	r1, [pc, #324]	; (1378 <analogWrite+0x2b0>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1234:	ldr	r2, [pc, #324]	; (137c <analogWrite+0x2b4>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM2_CH1_PIN
	  case FTM2_CH1_PIN: // PTB19, FTM1_CH1
		FTM2_C1V = cval;
    1236:	str	r3, [r1, #0]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1238:	mov.w	r3, #836	; 0x344
    123c:	str	r3, [r2, #0]
		break;
    123e:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM2_CH0_PIN
	  case FTM2_CH0_PIN: // PTB18, FTM2_CH0
		FTM2_C0V = cval;
    1240:	ldr	r1, [pc, #316]	; (1380 <analogWrite+0x2b8>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1242:	ldr	r2, [pc, #320]	; (1384 <analogWrite+0x2bc>)
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM2_CH0_PIN
	  case FTM2_CH0_PIN: // PTB18, FTM2_CH0
		FTM2_C0V = cval;
    1244:	str	r3, [r1, #0]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1246:	mov.w	r3, #836	; 0x344
    124a:	str	r3, [r2, #0]
		break;
    124c:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH1_PIN
	  case FTM0_CH1_PIN: // PTC2, FTM0_CH1
		FTM0_C1V = cval;
    124e:	ldr	r1, [pc, #312]	; (1388 <analogWrite+0x2c0>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1250:	ldr	r2, [pc, #312]	; (138c <analogWrite+0x2c4>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH1_PIN
	  case FTM0_CH1_PIN: // PTC2, FTM0_CH1
		FTM0_C1V = cval;
    1252:	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1254:	movw	r3, #1092	; 0x444
    1258:	str	r3, [r2, #0]
		break;
    125a:	pop	{r3, r4, r5, pc}
	//serial_phex32(cval);
	//serial_print("\n");
	switch (pin) {
#ifdef FTM0_CH0_PIN
	  case FTM0_CH0_PIN: // PTC1, FTM0_CH0
		FTM0_C0V = cval;
    125c:	ldr	r1, [pc, #304]	; (1390 <analogWrite+0x2c8>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    125e:	ldr	r2, [pc, #308]	; (1394 <analogWrite+0x2cc>)
	//serial_phex32(cval);
	//serial_print("\n");
	switch (pin) {
#ifdef FTM0_CH0_PIN
	  case FTM0_CH0_PIN: // PTC1, FTM0_CH0
		FTM0_C0V = cval;
    1260:	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1262:	movw	r3, #1092	; 0x444
    1266:	str	r3, [r2, #0]
		break;
    1268:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH6_PIN
	  case FTM0_CH6_PIN: // PTD6, FTM0_CH6
		FTM0_C6V = cval;
    126a:	ldr	r1, [pc, #300]	; (1398 <analogWrite+0x2d0>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    126c:	ldr	r2, [pc, #300]	; (139c <analogWrite+0x2d4>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH6_PIN
	  case FTM0_CH6_PIN: // PTD6, FTM0_CH6
		FTM0_C6V = cval;
    126e:	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1270:	movw	r3, #1092	; 0x444
    1274:	str	r3, [r2, #0]
		break;
    1276:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH5_PIN
	  case FTM0_CH5_PIN: // PTD5, FTM0_CH5
		FTM0_C5V = cval;
    1278:	ldr	r1, [pc, #292]	; (13a0 <analogWrite+0x2d8>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    127a:	ldr	r2, [pc, #296]	; (13a4 <analogWrite+0x2dc>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH5_PIN
	  case FTM0_CH5_PIN: // PTD5, FTM0_CH5
		FTM0_C5V = cval;
    127c:	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    127e:	movw	r3, #1092	; 0x444
    1282:	str	r3, [r2, #0]
		break;
    1284:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(TPM1_CH0_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef TPM1_CH1_PIN
	  case TPM1_CH1_PIN:
		TPM1_C1V = cval;
    1286:	ldr	r1, [pc, #288]	; (13a8 <analogWrite+0x2e0>)
		FTM_PINCFG(TPM1_CH1_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
    1288:	ldr	r2, [pc, #288]	; (13ac <analogWrite+0x2e4>)
		FTM_PINCFG(TPM1_CH0_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef TPM1_CH1_PIN
	  case TPM1_CH1_PIN:
		TPM1_C1V = cval;
    128a:	str	r3, [r1, #0]
		FTM_PINCFG(TPM1_CH1_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
    128c:	movw	r3, #1604	; 0x644
    1290:	str	r3, [r2, #0]
		break;
    1292:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM3_CH7_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef TPM1_CH0_PIN
	  case TPM1_CH0_PIN:
		TPM1_C0V = cval;
    1294:	ldr	r1, [pc, #280]	; (13b0 <analogWrite+0x2e8>)
		FTM_PINCFG(TPM1_CH0_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
    1296:	ldr	r2, [pc, #284]	; (13b4 <analogWrite+0x2ec>)
		FTM_PINCFG(FTM3_CH7_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef TPM1_CH0_PIN
	  case TPM1_CH0_PIN:
		TPM1_C0V = cval;
    1298:	str	r3, [r1, #0]
		FTM_PINCFG(TPM1_CH0_PIN) = PORT_PCR_MUX(6) | PORT_PCR_DSE | PORT_PCR_SRE;
    129a:	movw	r3, #1604	; 0x644
    129e:	str	r3, [r2, #0]
		break;
    12a0:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM3_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH1_PIN
	  case FTM3_CH1_PIN:
		FTM3_C1V = cval;
    12a2:	ldr	r1, [pc, #276]	; (13b8 <analogWrite+0x2f0>)
		FTM_PINCFG(FTM3_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12a4:	ldr	r2, [pc, #276]	; (13bc <analogWrite+0x2f4>)
		FTM_PINCFG(FTM3_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH1_PIN
	  case FTM3_CH1_PIN:
		FTM3_C1V = cval;
    12a6:	str	r3, [r1, #0]
		FTM_PINCFG(FTM3_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12a8:	movw	r3, #1092	; 0x444
    12ac:	str	r3, [r2, #0]
		break;
    12ae:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH3_PIN
	  case FTM0_CH3_PIN: // PTC4, FTM0_CH3
		FTM0_C3V = cval;
    12b0:	ldr	r1, [pc, #268]	; (13c0 <analogWrite+0x2f8>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12b2:	ldr	r2, [pc, #272]	; (13c4 <analogWrite+0x2fc>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH3_PIN
	  case FTM0_CH3_PIN: // PTC4, FTM0_CH3
		FTM0_C3V = cval;
    12b4:	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12b6:	movw	r3, #1092	; 0x444
    12ba:	str	r3, [r2, #0]
		break;
    12bc:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH2_PIN
	  case FTM0_CH2_PIN: // PTC3, FTM0_CH2
		FTM0_C2V = cval;
    12be:	ldr	r1, [pc, #264]	; (13c8 <analogWrite+0x300>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12c0:	ldr	r2, [pc, #264]	; (13cc <analogWrite+0x304>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH2_PIN
	  case FTM0_CH2_PIN: // PTC3, FTM0_CH2
		FTM0_C2V = cval;
    12c2:	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12c4:	movw	r3, #1092	; 0x444
    12c8:	str	r3, [r2, #0]
		break;
    12ca:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM3_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH3_PIN
	  case FTM3_CH3_PIN:
		FTM3_C3V = cval;
    12cc:	ldr	r1, [pc, #256]	; (13d0 <analogWrite+0x308>)
		FTM_PINCFG(FTM3_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12ce:	ldr	r2, [pc, #260]	; (13d4 <analogWrite+0x30c>)
		FTM_PINCFG(FTM3_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH3_PIN
	  case FTM3_CH3_PIN:
		FTM3_C3V = cval;
    12d0:	str	r3, [r1, #0]
		FTM_PINCFG(FTM3_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12d2:	movw	r3, #1092	; 0x444
    12d6:	str	r3, [r2, #0]
		break;
    12d8:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM3_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH2_PIN
	  case FTM3_CH2_PIN:
		FTM3_C2V = cval;
    12da:	ldr	r1, [pc, #252]	; (13d8 <analogWrite+0x310>)
		FTM_PINCFG(FTM3_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12dc:	ldr	r2, [pc, #252]	; (13dc <analogWrite+0x314>)
		FTM_PINCFG(FTM3_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH2_PIN
	  case FTM3_CH2_PIN:
		FTM3_C2V = cval;
    12de:	str	r3, [r1, #0]
		FTM_PINCFG(FTM3_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12e0:	movw	r3, #1092	; 0x444
    12e4:	str	r3, [r2, #0]
		break;
    12e6:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH4_PIN
	  case FTM0_CH4_PIN: // PTD4, FTM0_CH4
		FTM0_C4V = cval;
    12e8:	ldr	r1, [pc, #244]	; (13e0 <analogWrite+0x318>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12ea:	ldr	r2, [pc, #248]	; (13e4 <analogWrite+0x31c>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH4_PIN
	  case FTM0_CH4_PIN: // PTD4, FTM0_CH4
		FTM0_C4V = cval;
    12ec:	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12ee:	movw	r3, #1092	; 0x444
    12f2:	str	r3, [r2, #0]
		break;
    12f4:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH7_PIN
	  case FTM0_CH7_PIN: // PTD7, FTM0_CH7
		FTM0_C7V = cval;
    12f6:	ldr	r1, [pc, #240]	; (13e8 <analogWrite+0x320>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12f8:	ldr	r2, [pc, #240]	; (13ec <analogWrite+0x324>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM0_CH7_PIN
	  case FTM0_CH7_PIN: // PTD7, FTM0_CH7
		FTM0_C7V = cval;
    12fa:	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    12fc:	movw	r3, #1092	; 0x444
    1300:	str	r3, [r2, #0]
		break;
    1302:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM1_CH1_PIN
	  case FTM1_CH1_PIN: // PTA13, FTM1_CH1
		FTM1_C1V = cval;
    1304:	ldr	r1, [pc, #232]	; (13f0 <analogWrite+0x328>)
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1306:	ldr	r2, [pc, #236]	; (13f4 <analogWrite+0x32c>)
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM1_CH1_PIN
	  case FTM1_CH1_PIN: // PTA13, FTM1_CH1
		FTM1_C1V = cval;
    1308:	str	r3, [r1, #0]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    130a:	mov.w	r3, #836	; 0x344
    130e:	str	r3, [r2, #0]
		break;
    1310:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM1_CH0_PIN
	  case FTM1_CH0_PIN: // PTA12, FTM1_CH0
		FTM1_C0V = cval;
    1312:	ldr	r1, [pc, #228]	; (13f8 <analogWrite+0x330>)
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1314:	ldr	r2, [pc, #228]	; (13fc <analogWrite+0x334>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM1_CH0_PIN
	  case FTM1_CH0_PIN: // PTA12, FTM1_CH0
		FTM1_C0V = cval;
    1316:	str	r3, [r1, #0]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    1318:	mov.w	r3, #836	; 0x344
    131c:	str	r3, [r2, #0]
		break;
    131e:	pop	{r3, r4, r5, pc}
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH0_PIN
	  case FTM3_CH0_PIN:
		FTM3_C0V = cval;
    1320:	ldr	r1, [pc, #220]	; (1400 <analogWrite+0x338>)
		FTM_PINCFG(FTM3_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1322:	ldr	r2, [pc, #224]	; (1404 <analogWrite+0x33c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
		break;
#endif
#ifdef FTM3_CH0_PIN
	  case FTM3_CH0_PIN:
		FTM3_C0V = cval;
    1324:	str	r3, [r1, #0]
		FTM_PINCFG(FTM3_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    1326:	movw	r3, #1092	; 0x444
    132a:	str	r3, [r2, #0]
		break;
    132c:	pop	{r3, r4, r5, pc}

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    132e:	cmp	r4, #63	; 0x3f
    1330:	bhi.w	10ea <analogWrite+0x22>
    1334:	cmp	r1, #127	; 0x7f
    1336:	ite	le
    1338:	movle	r1, #0
    133a:	movgt	r1, #1
    133c:	mov	r0, r4
    133e:	b.n	11d4 <analogWrite+0x10c>
    1340:	.word	0x1fff079c
    1344:	.word	0x400c9008
    1348:	.word	0x40038008
    134c:	.word	0x40039008
    1350:	.word	0x400b9008
    1354:	.word	0x400b8008
    1358:	.word	0x400b9048
    135c:	.word	0x4004b02c
    1360:	.word	0x400b9040
    1364:	.word	0x4004b028
    1368:	.word	0x400b9038
    136c:	.word	0x4004b024
    1370:	.word	0x400b9030
    1374:	.word	0x4004b020
    1378:	.word	0x400b8018
    137c:	.word	0x4004a04c
    1380:	.word	0x400b8010
    1384:	.word	0x4004a048
    1388:	.word	0x40038018
    138c:	.word	0x4004b008
    1390:	.word	0x40038010
    1394:	.word	0x4004b004
    1398:	.word	0x40038040
    139c:	.word	0x4004c018
    13a0:	.word	0x40038038
    13a4:	.word	0x4004c014
    13a8:	.word	0x400c9018
    13ac:	.word	0x4004a004
    13b0:	.word	0x400c9010
    13b4:	.word	0x4004a000
    13b8:	.word	0x400b9018
    13bc:	.word	0x4004c004
    13c0:	.word	0x40038028
    13c4:	.word	0x4004b010
    13c8:	.word	0x40038020
    13cc:	.word	0x4004b00c
    13d0:	.word	0x400b9028
    13d4:	.word	0x4004c00c
    13d8:	.word	0x400b9020
    13dc:	.word	0x4004c008
    13e0:	.word	0x40038030
    13e4:	.word	0x4004c010
    13e8:	.word	0x40038048
    13ec:	.word	0x4004c01c
    13f0:	.word	0x40039018
    13f4:	.word	0x40049034
    13f8:	.word	0x40039010
    13fc:	.word	0x40049030
    1400:	.word	0x400b9010
    1404:	.word	0x4004c000

00001408 <analogWriteFrequency>:
	//serial_print(", freq = ");
	//serial_phex32((uint32_t)frequency);
	//serial_print("\n");

#ifdef TPM1_CH0_PIN
	if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
    1408:	sub.w	r1, r0, #16
    140c:	uxtb	r1, r1
    140e:	cmp	r1, #1
	return prior_res;
}


void analogWriteFrequency(uint8_t pin, float frequency)
{
    1410:	push	{r4, r5, r6}
	//serial_print(", freq = ");
	//serial_phex32((uint32_t)frequency);
	//serial_print("\n");

#ifdef TPM1_CH0_PIN
	if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
    1412:	bls.n	14cc <analogWriteFrequency+0xc4>
#if defined(__MKL26Z64__)
	// Teensy LC does not support slow clock source (ftmClockSource = 2)
	ftmClockSource = 1; 	// Use default F_TIMER clock source
	ftmClock = F_TIMER;	// Set variable for the actual timer clock frequency
#else
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    1414:	vldr	s15, [pc, #236]	; 1504 <analogWriteFrequency+0xfc>
		// frequency is too low for working with F_TIMER:
		ftmClockSource = 2; 	// Use alternative 31250Hz clock source
		ftmClock = 31250;   	// Set variable for the actual timer clock frequency
	} else {
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    1418:	ldr	r2, [pc, #236]	; (1508 <analogWriteFrequency+0x100>)
    141a:	vcmpe.f32	s0, s15
    141e:	vmrs	APSR_nzcv, fpscr
    1422:	movw	r3, #31250	; 0x7a12
    1426:	itte	mi
    1428:	movmi	r2, r3
    142a:	movmi	r5, #2
    142c:	movpl	r5, #1
#endif

	
	for (prescale = 0; prescale < 7; prescale++) {
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
		if (frequency >= minfreq) break;
    142e:	vldr	s13, [pc, #220]	; 150c <analogWriteFrequency+0x104>
		ftmClock = F_TIMER;	// Set variable for the actual timer clock frequency
	}
#endif

	
	for (prescale = 0; prescale < 7; prescale++) {
    1432:	movs	r3, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    1434:	lsr.w	r4, r2, r3
    1438:	vmov	s15, r4
    143c:	vcvt.f32.s32	s15, s15
		if (frequency >= minfreq) break;
    1440:	vmul.f32	s14, s15, s13
    1444:	vcmpe.f32	s0, s14
    1448:	vmrs	APSR_nzcv, fpscr
    144c:	bge.n	145e <analogWriteFrequency+0x56>
		ftmClock = F_TIMER;	// Set variable for the actual timer clock frequency
	}
#endif

	
	for (prescale = 0; prescale < 7; prescale++) {
    144e:	adds	r3, #1
    1450:	cmp	r3, #7
    1452:	bne.n	1434 <analogWriteFrequency+0x2c>
    1454:	lsrs	r2, r2, #7
    1456:	vmov	s15, r2
    145a:	vcvt.f32.s32	s15, s15
	//serial_phex32(ftmClock >> prescale);
	//serial_print("\n");
	//serial_print("prescale = ");
	//serial_phex(prescale);
	//serial_print("\n");
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    145e:	vdiv.f32	s14, s15, s0
    1462:	movw	r4, #65535	; 0xffff
	if (mod > 65535) mod = 65535;
	//serial_print("mod = ");
	//serial_phex32(mod);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    1466:	subs	r2, r0, #3
	//serial_phex32(ftmClock >> prescale);
	//serial_print("\n");
	//serial_print("prescale = ");
	//serial_phex(prescale);
	//serial_print("\n");
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    1468:	vmov.f32	s15, #96	; 0x3f000000  0.5
    146c:	vsub.f32	s15, s14, s15
    1470:	vcvt.u32.f32	s15, s15
    1474:	vmov	r6, s15
    1478:	cmp	r6, r4
    147a:	it	cs
    147c:	movcs	r6, r4
	if (mod > 65535) mod = 65535;
	//serial_print("mod = ");
	//serial_phex32(mod);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    147e:	cmp	r2, #1
    1480:	mov	r4, r6
    1482:	bls.n	14f4 <analogWriteFrequency+0xec>
		FTM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
	  || pin == FTM0_CH2_PIN || pin == FTM0_CH3_PIN
	  || pin == FTM0_CH4_PIN || pin == FTM0_CH5_PIN
#ifdef FTM0_CH6_PIN
	  || pin == FTM0_CH6_PIN || pin == FTM0_CH7_PIN
    1484:	cmp	r0, #23
    1486:	bls.n	14a6 <analogWriteFrequency+0x9e>
		FTM0_CNT = 0;
		FTM0_MOD = mod;
		FTM0_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	}
#ifdef FTM2_CH0_PIN
	  else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    1488:	sub.w	r2, r0, #29
    148c:	cmp	r2, #1
    148e:	bls.n	14fc <analogWriteFrequency+0xf4>
		FTM2_MOD = mod;
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	}
#endif
#ifdef FTM3_CH0_PIN
	  else if (pin == FTM3_CH0_PIN || pin == FTM3_CH1_PIN
    1490:	cmp	r0, #14
    1492:	bls.n	14d2 <analogWriteFrequency+0xca>
	  || pin == FTM3_CH2_PIN || pin == FTM3_CH3_PIN
	  || pin == FTM3_CH4_PIN || pin == FTM3_CH5_PIN
    1494:	subs	r0, #35	; 0x23
    1496:	cmp	r0, #3
    1498:	bls.n	14dc <analogWriteFrequency+0xd4>
		FTM3_MOD = mod;
		FTM3_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use the new ftmClockSource instead of 1
	}
#endif
#ifdef TPM1_CH0_PIN
	  else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
    149a:	cmp	r1, #1
    149c:	bhi.n	14c8 <analogWriteFrequency+0xc0>
		TPM1_SC = 0;
    149e:	ldr	r2, [pc, #112]	; (1510 <analogWriteFrequency+0x108>)
		TPM1_CNT = 0;
    14a0:	ldr	r6, [pc, #112]	; (1514 <analogWriteFrequency+0x10c>)
		TPM1_MOD = mod;
    14a2:	ldr	r0, [pc, #116]	; (1518 <analogWriteFrequency+0x110>)
    14a4:	b.n	14e2 <analogWriteFrequency+0xda>
		FTM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
	  || pin == FTM0_CH2_PIN || pin == FTM0_CH3_PIN
	  || pin == FTM0_CH4_PIN || pin == FTM0_CH5_PIN
#ifdef FTM0_CH6_PIN
	  || pin == FTM0_CH6_PIN || pin == FTM0_CH7_PIN
    14a6:	ldr	r2, [pc, #116]	; (151c <analogWriteFrequency+0x114>)
    14a8:	lsrs	r2, r0
    14aa:	and.w	r2, r2, #1
    14ae:	eor.w	r6, r2, #1
    14b2:	cmp	r2, #0
    14b4:	beq.n	1488 <analogWriteFrequency+0x80>
#endif
	  ) {
		FTM0_SC = 0;
    14b6:	ldr	r2, [pc, #104]	; (1520 <analogWriteFrequency+0x118>)
		FTM0_CNT = 0;
    14b8:	ldr	r0, [pc, #104]	; (1524 <analogWriteFrequency+0x11c>)
		FTM0_MOD = mod;
    14ba:	ldr	r1, [pc, #108]	; (1528 <analogWriteFrequency+0x120>)
	  || pin == FTM0_CH4_PIN || pin == FTM0_CH5_PIN
#ifdef FTM0_CH6_PIN
	  || pin == FTM0_CH6_PIN || pin == FTM0_CH7_PIN
#endif
	  ) {
		FTM0_SC = 0;
    14bc:	str	r6, [r2, #0]
		FTM0_CNT = 0;
		FTM0_MOD = mod;
		FTM0_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    14be:	orr.w	r3, r3, r5, lsl #3
#ifdef FTM0_CH6_PIN
	  || pin == FTM0_CH6_PIN || pin == FTM0_CH7_PIN
#endif
	  ) {
		FTM0_SC = 0;
		FTM0_CNT = 0;
    14c2:	str	r6, [r0, #0]
		FTM0_MOD = mod;
    14c4:	str	r4, [r1, #0]
		FTM0_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    14c6:	str	r3, [r2, #0]
		TPM1_CNT = 0;
		TPM1_MOD = mod;
		TPM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);
	}
#endif
}
    14c8:	pop	{r4, r5, r6}
    14ca:	bx	lr
	//serial_print("\n");

#ifdef TPM1_CH0_PIN
	if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		ftmClockSource = 1;
		ftmClock = 16000000;
    14cc:	ldr	r2, [pc, #92]	; (152c <analogWriteFrequency+0x124>)
	//serial_phex32((uint32_t)frequency);
	//serial_print("\n");

#ifdef TPM1_CH0_PIN
	if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		ftmClockSource = 1;
    14ce:	movs	r5, #1
    14d0:	b.n	142e <analogWriteFrequency+0x26>
		FTM2_MOD = mod;
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	}
#endif
#ifdef FTM3_CH0_PIN
	  else if (pin == FTM3_CH0_PIN || pin == FTM3_CH1_PIN
    14d2:	movw	r2, #16772	; 0x4184
    14d6:	lsrs	r2, r0
    14d8:	lsls	r2, r2, #31
    14da:	bpl.n	1494 <analogWriteFrequency+0x8c>
	  || pin == FTM3_CH2_PIN || pin == FTM3_CH3_PIN
	  || pin == FTM3_CH4_PIN || pin == FTM3_CH5_PIN
	  || pin == FTM3_CH6_PIN || pin == FTM3_CH7_PIN) {
		FTM3_SC = 0;
    14dc:	ldr	r2, [pc, #80]	; (1530 <analogWriteFrequency+0x128>)
		FTM3_CNT = 0;
    14de:	ldr	r6, [pc, #84]	; (1534 <analogWriteFrequency+0x12c>)
		FTM3_MOD = mod;
    14e0:	ldr	r0, [pc, #84]	; (1538 <analogWriteFrequency+0x130>)
#ifdef TPM1_CH0_PIN
	  else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		TPM1_SC = 0;
		TPM1_CNT = 0;
		TPM1_MOD = mod;
		TPM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);
    14e2:	orr.w	r3, r3, r5, lsl #3
		FTM3_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use the new ftmClockSource instead of 1
	}
#endif
#ifdef TPM1_CH0_PIN
	  else if (pin == TPM1_CH0_PIN || pin == TPM1_CH1_PIN) {
		TPM1_SC = 0;
    14e6:	movs	r1, #0
    14e8:	str	r1, [r2, #0]
		TPM1_CNT = 0;
    14ea:	str	r1, [r6, #0]
		TPM1_MOD = mod;
    14ec:	str	r4, [r0, #0]
		TPM1_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);
    14ee:	str	r3, [r2, #0]
	}
#endif
}
    14f0:	pop	{r4, r5, r6}
    14f2:	bx	lr
	if (mod > 65535) mod = 65535;
	//serial_print("mod = ");
	//serial_phex32(mod);
	//serial_print("\n");
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
		FTM1_SC = 0;
    14f4:	ldr	r2, [pc, #68]	; (153c <analogWriteFrequency+0x134>)
		FTM1_CNT = 0;
    14f6:	ldr	r6, [pc, #72]	; (1540 <analogWriteFrequency+0x138>)
		FTM1_MOD = mod;
    14f8:	ldr	r0, [pc, #72]	; (1544 <analogWriteFrequency+0x13c>)
    14fa:	b.n	14e2 <analogWriteFrequency+0xda>
		FTM0_MOD = mod;
		FTM0_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
	}
#ifdef FTM2_CH0_PIN
	  else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
		FTM2_SC = 0;
    14fc:	ldr	r2, [pc, #72]	; (1548 <analogWriteFrequency+0x140>)
		FTM2_CNT = 0;
    14fe:	ldr	r6, [pc, #76]	; (154c <analogWriteFrequency+0x144>)
		FTM2_MOD = mod;
    1500:	ldr	r0, [pc, #76]	; (1550 <analogWriteFrequency+0x148>)
    1502:	b.n	14e2 <analogWriteFrequency+0xda>
    1504:	.word	0x40e4e1c0
    1508:	.word	0x03938700
    150c:	.word	0x37800000
    1510:	.word	0x400c9000
    1514:	.word	0x400c9004
    1518:	.word	0x400c9008
    151c:	.word	0x00f00660
    1520:	.word	0x40038000
    1524:	.word	0x40038004
    1528:	.word	0x40038008
    152c:	.word	0x00f42400
    1530:	.word	0x400b9000
    1534:	.word	0x400b9004
    1538:	.word	0x400b9008
    153c:	.word	0x40039000
    1540:	.word	0x40039004
    1544:	.word	0x40039008
    1548:	.word	0x400b8000
    154c:	.word	0x400b8004
    1550:	.word	0x400b8008

00001554 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1554:	cmp	r0, #63	; 0x3f
    1556:	bhi.n	155c <pinMode+0x8>
    1558:	b.w	102c <pinMode.part.2>
    155c:	bx	lr
    155e:	nop

00001560 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1560:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1564:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1566:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1568:	ldr	r7, [pc, #136]	; (15f4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    156a:	ldr	r3, [pc, #140]	; (15f8 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    156c:	ldr	r2, [pc, #140]	; (15fc <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    156e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1570:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1572:	ldr	r2, [r2, #0]
	__enable_irq();
    1574:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1576:	lsls	r2, r2, #5
    1578:	bpl.n	1580 <delay+0x20>
    157a:	cmp	r3, #50	; 0x32
    157c:	it	hi
    157e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1580:	cbz	r5, 15f0 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1582:	rsb	r3, r3, #179200	; 0x2bc00
    1586:	addw	r3, r3, #799	; 0x31f
    158a:	ldr	r6, [pc, #116]	; (1600 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    158c:	ldr.w	r9, [pc, #104]	; 15f8 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1590:	ldr.w	r8, [pc, #104]	; 15fc <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1594:	lsrs	r3, r3, #2
    1596:	mov.w	r2, #1000	; 0x3e8
    159a:	umull	r1, r3, r6, r3
    159e:	mul.w	r4, r2, r4
    15a2:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    15a6:	cpsid	i
	current = SYST_CVR;
    15a8:	ldr.w	r1, [r9]
	count = systick_millis_count;
    15ac:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    15ae:	ldr.w	lr, [r8]
	__enable_irq();
    15b2:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    15b4:	rsb	r3, r1, #179200	; 0x2bc00
    15b8:	addw	r3, r3, #799	; 0x31f
    15bc:	lsrs	r3, r3, #2
    15be:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    15c2:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    15c6:	rsb	r3, r4, r3, lsr #2
    15ca:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    15ce:	beq.n	15d6 <delay+0x76>
    15d0:	cmp	r1, #50	; 0x32
    15d2:	it	hi
    15d4:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    15d6:	mla	r3, r0, r2, r3
    15da:	cmp.w	r3, #1000	; 0x3e8
    15de:	bcc.n	15ea <delay+0x8a>
				ms--;
				if (ms == 0) return;
    15e0:	subs	r5, #1
    15e2:	beq.n	15f0 <delay+0x90>
				start += 1000;
    15e4:	add.w	r4, r4, #1000	; 0x3e8
    15e8:	b.n	15a6 <delay+0x46>
			}
			yield();
    15ea:	bl	2774 <yield>
		}
    15ee:	b.n	15a6 <delay+0x46>
    15f0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    15f4:	.word	0x1fff12d4
    15f8:	.word	0xe000e018
    15fc:	.word	0xe000ed04
    1600:	.word	0x16c16c17

00001604 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1604:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1606:	ldr	r3, [pc, #312]	; (1740 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1608:	ldr	r0, [pc, #312]	; (1744 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    160a:	ldr.w	ip, [pc, #348]	; 1768 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    160e:	ldr	r4, [pc, #312]	; (1748 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    1610:	ldr	r1, [pc, #312]	; (174c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1612:	ldr.w	lr, [pc, #344]	; 176c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1616:	ldr	r6, [pc, #312]	; (1750 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    1618:	ldr	r5, [pc, #312]	; (1754 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    161a:	ldr	r7, [pc, #316]	; (1758 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    161c:	mov.w	r2, #134217728	; 0x8000000
    1620:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1622:	mov.w	r2, #268435456	; 0x10000000
    1626:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1628:	mov.w	r2, #536870912	; 0x20000000
    162c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    162e:	mov.w	r2, #1073741824	; 0x40000000
    1632:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1634:	mov.w	r2, #2147483648	; 0x80000000
    1638:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    163a:	movs	r2, #0
    163c:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    163e:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1640:	movw	r0, #61439	; 0xefff
    1644:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1648:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    164c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    164e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1652:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1654:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1656:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1658:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    165c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    165e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1662:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1664:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1668:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    166a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    166e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1672:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1676:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    167a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    167e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1680:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1684:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1686:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1688:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    168a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    168e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    1690:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    1692:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1694:	ldr	r4, [pc, #196]	; (175c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    1696:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1698:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    169a:	movs	r1, #9
    169c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    169e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    16a2:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    16a6:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    16a8:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    16aa:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    16ac:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    16ae:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    16b0:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    16b2:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    16b6:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    16ba:	add.w	r7, r7, #520192	; 0x7f000
    16be:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    16c0:	addw	r4, r4, #2044	; 0x7fc
    16c4:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    16c6:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    16c8:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    16ca:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    16cc:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    16d0:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    16d2:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    16d6:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    16da:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    16dc:	sub.w	r4, r4, #460800	; 0x70800
    16e0:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    16e4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    16e6:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    16e8:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    16ec:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    16ee:	ldr	r0, [pc, #112]	; (1760 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    16f0:	orr.w	r1, r1, #512	; 0x200
    16f4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    16f6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    16f8:	ldr	r4, [pc, #104]	; (1764 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    16fa:	add.w	lr, lr, #65280	; 0xff00
    16fe:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    1702:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    1706:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    170a:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    170e:	orr.w	r1, r1, #33554432	; 0x2000000
    1712:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    1714:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    1718:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    171c:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    171e:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    1720:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    1722:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1724:	str	r2, [r4, #0]
#endif
	analog_init();
    1726:	bl	2adc <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    172a:	movs	r0, #25
    172c:	bl	1560 <delay>
	usb_init();
    1730:	bl	2480 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    1734:	movw	r0, #275	; 0x113
}
    1738:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    173c:	b.w	1560 <delay>
    1740:	.word	0xe000e104
    1744:	.word	0x40038004
    1748:	.word	0x40038014
    174c:	.word	0x4003801c
    1750:	.word	0x40038024
    1754:	.word	0x4003802c
    1758:	.word	0x40038034
    175c:	.word	0x40038000
    1760:	.word	0x40048004
    1764:	.word	0x400c9000
    1768:	.word	0x40038008
    176c:	.word	0x4003800c

00001770 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1770:	cpsid	i
	avail = usb_buffer_available;
    1772:	ldr	r0, [pc, #52]	; (17a8 <usb_malloc+0x38>)
    1774:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1776:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    177a:	cmp	r3, #11
    177c:	bgt.n	17a0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    177e:	mov.w	r1, #2147483648	; 0x80000000
    1782:	lsrs	r1, r3
    1784:	bic.w	r2, r2, r1
    1788:	str	r2, [r0, #0]
	__enable_irq();
    178a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    178c:	ldr	r0, [pc, #28]	; (17ac <usb_malloc+0x3c>)
    178e:	add.w	r3, r3, r3, lsl #3
    1792:	lsls	r3, r3, #3
    1794:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1796:	movs	r1, #0
    1798:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    179a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    179c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    179e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    17a0:	cpsie	i
		return NULL;
    17a2:	movs	r0, #0
    17a4:	bx	lr
    17a6:	nop
    17a8:	.word	0x1fff07a0
    17ac:	.word	0x1fff03d0

000017b0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    17b0:	ldr	r3, [pc, #52]	; (17e8 <usb_free+0x38>)
    17b2:	ldr	r2, [pc, #56]	; (17ec <usb_free+0x3c>)
    17b4:	subs	r3, r0, r3
    17b6:	umull	r2, r3, r2, r3
    17ba:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    17bc:	cmp	r3, #11
    17be:	bhi.n	17da <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    17c0:	ldr	r2, [pc, #44]	; (17f0 <usb_free+0x40>)
    17c2:	ldrb	r2, [r2, #0]
    17c4:	cbnz	r2, 17dc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    17c6:	cpsid	i
	usb_buffer_available |= mask;
    17c8:	ldr	r0, [pc, #40]	; (17f4 <usb_free+0x44>)
    17ca:	mov.w	r1, #2147483648	; 0x80000000
    17ce:	ldr	r2, [r0, #0]
    17d0:	lsr.w	r3, r1, r3
    17d4:	orrs	r2, r3
    17d6:	str	r2, [r0, #0]
	__enable_irq();
    17d8:	cpsie	i
    17da:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    17dc:	ldr	r2, [pc, #24]	; (17f8 <usb_free+0x48>)
    17de:	ldrb	r2, [r2, #0]
    17e0:	cmp	r2, #0
    17e2:	beq.n	17c6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    17e4:	b.w	1864 <usb_rx_memory>
    17e8:	.word	0x1fff03d0
    17ec:	.word	0x38e38e39
    17f0:	.word	0x1fff13ad
    17f4:	.word	0x1fff07a0
    17f8:	.word	0x1fff13b8

000017fc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    17fc:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    17fe:	cmp	r3, #3
    1800:	bhi.n	182c <usb_rx+0x30>
	__disable_irq();
    1802:	cpsid	i
	ret = rx_first[endpoint];
    1804:	ldr	r1, [pc, #40]	; (1830 <usb_rx+0x34>)
    1806:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    180a:	cbz	r0, 1828 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    180c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    180e:	ldr	r4, [pc, #36]	; (1834 <usb_rx+0x38>)
    1810:	ldrh	r5, [r0, #0]
    1812:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1816:	ldr	r6, [r0, #4]
    1818:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    181c:	subs	r2, r2, r5
    181e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1822:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1824:	pop	{r4, r5, r6}
    1826:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1828:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    182a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    182c:	movs	r0, #0
    182e:	bx	lr
    1830:	.word	0x1fff1330
    1834:	.word	0x1fff1720

00001838 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1838:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    183a:	cmp	r0, #3
    183c:	bhi.n	1856 <usb_tx_packet_count+0x1e>
	__disable_irq();
    183e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1840:	ldr	r3, [pc, #28]	; (1860 <usb_tx_packet_count+0x28>)
    1842:	ldr.w	r3, [r3, r0, lsl #2]
    1846:	cbz	r3, 185a <usb_tx_packet_count+0x22>
    1848:	movs	r0, #0
    184a:	ldr	r3, [r3, #4]
    184c:	adds	r0, #1
    184e:	cmp	r3, #0
    1850:	bne.n	184a <usb_tx_packet_count+0x12>
	__enable_irq();
    1852:	cpsie	i
	return count;
    1854:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1856:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1858:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    185a:	mov	r0, r3
    185c:	b.n	1852 <usb_tx_packet_count+0x1a>
    185e:	nop
    1860:	.word	0x1fff1384

00001864 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1864:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1866:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1868:	ldr	r2, [pc, #172]	; (1918 <usb_rx_memory+0xb4>)
    186a:	ldrb	r3, [r2, #0]
    186c:	lsls	r5, r3, #28
    186e:	bpl.n	187e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1870:	ldr	r3, [pc, #168]	; (191c <usb_rx_memory+0xb8>)
    1872:	ldr	r1, [r3, #32]
    1874:	cmp	r1, #0
    1876:	beq.n	18e6 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1878:	ldr	r1, [r3, #40]	; 0x28
    187a:	cmp	r1, #0
    187c:	beq.n	1902 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    187e:	ldrb	r3, [r2, #1]
    1880:	lsls	r4, r3, #28
    1882:	bpl.n	1892 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1884:	ldr	r3, [pc, #148]	; (191c <usb_rx_memory+0xb8>)
    1886:	ldr	r1, [r3, #64]	; 0x40
    1888:	cmp	r1, #0
    188a:	beq.n	190a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    188c:	ldr	r1, [r3, #72]	; 0x48
    188e:	cmp	r1, #0
    1890:	beq.n	1906 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1892:	ldrb	r3, [r2, #2]
    1894:	lsls	r1, r3, #28
    1896:	bpl.n	18a4 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1898:	ldr	r3, [pc, #128]	; (191c <usb_rx_memory+0xb8>)
    189a:	ldr	r1, [r3, #96]	; 0x60
    189c:	cmp	r1, #0
    189e:	beq.n	190e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    18a0:	ldr	r1, [r3, #104]	; 0x68
    18a2:	cbz	r1, 18c8 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    18a4:	ldrb	r3, [r2, #3]
    18a6:	lsls	r3, r3, #28
    18a8:	bpl.n	18ba <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    18aa:	ldr	r3, [pc, #112]	; (191c <usb_rx_memory+0xb8>)
    18ac:	ldr.w	r2, [r3, #128]	; 0x80
    18b0:	cbz	r2, 1912 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    18b2:	ldr.w	r2, [r3, #136]	; 0x88
    18b6:	movs	r1, #17
    18b8:	cbz	r2, 18ca <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    18ba:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    18bc:	ldr	r3, [pc, #96]	; (1920 <usb_rx_memory+0xbc>)
    18be:	movs	r2, #0
    18c0:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    18c2:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    18c4:	b.w	17b0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    18c8:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    18ca:	ldr	r4, [pc, #84]	; (1920 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    18cc:	ldr	r5, [pc, #84]	; (1924 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    18ce:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    18d0:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    18d4:	add.w	r3, r3, r1, lsl #3
    18d8:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    18da:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    18dc:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    18de:	strb	r2, [r4, #0]
				__enable_irq();
    18e0:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    18e2:	pop	{r4, r5}
    18e4:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    18e6:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    18e8:	ldr	r4, [pc, #52]	; (1920 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    18ea:	ldr	r5, [pc, #60]	; (1928 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    18ec:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    18ee:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    18f2:	add.w	r3, r3, r2, lsl #3
    18f6:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    18f8:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    18fa:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    18fc:	strb	r2, [r4, #0]
				__enable_irq();
    18fe:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    1900:	b.n	18e2 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1902:	movs	r1, #5
    1904:	b.n	18ca <usb_rx_memory+0x66>
    1906:	movs	r1, #9
    1908:	b.n	18ca <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    190a:	movs	r2, #8
    190c:	b.n	18e8 <usb_rx_memory+0x84>
    190e:	movs	r2, #12
    1910:	b.n	18e8 <usb_rx_memory+0x84>
    1912:	movs	r2, #16
    1914:	b.n	18e8 <usb_rx_memory+0x84>
    1916:	nop
    1918:	.word	0x000080b4
    191c:	.word	0x1fff0000
    1920:	.word	0x1fff13ad
    1924:	.word	0x004000c8
    1928:	.word	0x00400088

0000192c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    192c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    192e:	cmp	r3, #3
    1930:	bhi.n	196e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1932:	ldr	r2, [pc, #108]	; (19a0 <usb_tx+0x74>)
    1934:	lsls	r0, r0, #5
    1936:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    193a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    193c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    193e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    1940:	ldr	r4, [pc, #96]	; (19a4 <usb_tx+0x78>)
    1942:	ldrb	r2, [r4, r3]
    1944:	cmp	r2, #3
    1946:	bhi.n	1980 <usb_tx+0x54>
    1948:	tbb	[pc, r2]
    194c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    1950:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1952:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    1954:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1956:	tst.w	r0, #8
    195a:	ite	ne
    195c:	movne	r3, #200	; 0xc8
    195e:	moveq	r3, #136	; 0x88
    1960:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1964:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1966:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1968:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    196a:	cpsie	i
}
    196c:	pop	{r4, r5}
    196e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    1970:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    1972:	movs	r2, #2
		break;
    1974:	b.n	1952 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    1976:	movs	r2, #5
    1978:	b.n	1952 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    197a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    197c:	movs	r2, #4
		break;
    197e:	b.n	1952 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    1980:	ldr	r2, [pc, #36]	; (19a8 <usb_tx+0x7c>)
    1982:	ldr.w	r0, [r2, r3, lsl #2]
    1986:	cbz	r0, 1998 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    1988:	ldr	r2, [pc, #32]	; (19ac <usb_tx+0x80>)
    198a:	ldr.w	r0, [r2, r3, lsl #2]
    198e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    1990:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    1994:	cpsie	i
		return;
    1996:	b.n	196c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    1998:	str.w	r1, [r2, r3, lsl #2]
    199c:	ldr	r2, [pc, #12]	; (19ac <usb_tx+0x80>)
    199e:	b.n	1990 <usb_tx+0x64>
    19a0:	.word	0x1fff0000
    19a4:	.word	0x1fff13bc
    19a8:	.word	0x1fff1384
    19ac:	.word	0x1fff1394

000019b0 <usb_isr>:
}



void usb_isr(void)
{
    19b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    19b4:	ldr.w	fp, [pc, #780]	; 1cc4 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    19b8:	ldr.w	sl, [pc, #780]	; 1cc8 <usb_isr+0x318>
}



void usb_isr(void)
{
    19bc:	sub	sp, #28
    19be:	b.n	1a4a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    19c0:	ldr	r7, [pc, #684]	; (1c70 <usb_isr+0x2c0>)
    19c2:	mov.w	r8, r3, lsr #2
    19c6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    19ca:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    19cc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    19d0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    19d4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    19d6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    19da:	and.w	r4, r3, #255	; 0xff
    19de:	cmp	r3, #0
    19e0:	bne.w	1be8 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    19e4:	ldr.w	r3, [r7, r8, lsl #3]
    19e8:	lsrs	r3, r3, #16
    19ea:	uxth	r1, r3
    19ec:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    19f0:	cmp	r3, #0
    19f2:	beq.w	1bd6 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    19f6:	ldr	r3, [pc, #636]	; (1c74 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    19f8:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    19fc:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    1a00:	ldr.w	r2, [r3, r6, lsl #2]
    1a04:	cmp	r2, #0
    1a06:	beq.w	1f94 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    1a0a:	ldr	r5, [pc, #620]	; (1c78 <usb_isr+0x2c8>)
    1a0c:	ldr.w	r3, [r5, r6, lsl #2]
    1a10:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    1a12:	ldr	r4, [pc, #616]	; (1c7c <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    1a14:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    1a18:	ldrh.w	r3, [r4, r6, lsl #1]
    1a1c:	add	r1, r3
    1a1e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    1a22:	bl	1770 <usb_malloc>
					if (packet) {
    1a26:	cmp	r0, #0
    1a28:	beq.w	1f86 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    1a2c:	ldr	r2, [pc, #592]	; (1c80 <usb_isr+0x2d0>)
    1a2e:	ldr	r3, [pc, #596]	; (1c84 <usb_isr+0x2d4>)
    1a30:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    1a34:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    1a38:	it	ne
    1a3a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    1a3c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    1a40:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    1a44:	movs	r3, #8
    1a46:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1a4a:	ldrb.w	r4, [fp]
    1a4e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    1a50:	lsls	r1, r4, #29
    1a52:	bpl.n	1a8a <usb_isr+0xda>
		if (usb_configuration) {
    1a54:	ldr	r3, [pc, #560]	; (1c88 <usb_isr+0x2d8>)
    1a56:	ldrb	r3, [r3, #0]
    1a58:	cbz	r3, 1a84 <usb_isr+0xd4>
			t = usb_reboot_timer;
    1a5a:	ldr	r1, [pc, #560]	; (1c8c <usb_isr+0x2dc>)
    1a5c:	ldrb	r2, [r1, #0]
			if (t) {
    1a5e:	and.w	r3, r2, #255	; 0xff
    1a62:	cbz	r2, 1a6e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    1a64:	subs	r3, #1
    1a66:	uxtb	r3, r3
    1a68:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    1a6a:	cbnz	r3, 1a6e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    1a6c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    1a6e:	ldr	r1, [pc, #544]	; (1c90 <usb_isr+0x2e0>)
    1a70:	ldrb	r2, [r1, #0]
			if (t) {
    1a72:	and.w	r3, r2, #255	; 0xff
    1a76:	cbz	r2, 1a84 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    1a78:	subs	r3, #1
    1a7a:	uxtb	r3, r3
    1a7c:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    1a7e:	cmp	r3, #0
    1a80:	beq.w	1f32 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    1a84:	movs	r3, #4
    1a86:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    1a8a:	and.w	r3, r4, #8
    1a8e:	and.w	r2, r3, #255	; 0xff
    1a92:	cmp	r3, #0
    1a94:	beq.w	1c30 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    1a98:	ldrb.w	r3, [sl]
    1a9c:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    1a9e:	lsrs	r6, r3, #4
    1aa0:	bne.n	19c0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    1aa2:	lsrs	r4, r3, #2
    1aa4:	ldr.w	r9, [pc, #456]	; 1c70 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1aa8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    1aac:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1ab0:	ubfx	r2, r2, #2, #4
    1ab4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    1ab6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1ab8:	cmp	r2, #12
    1aba:	bhi.w	1bce <usb_isr+0x21e>
    1abe:	tbb	[pc, r2]
    1ac2:	.short	0x7c7c
    1ac4:	.word	0x86868686
    1ac8:	.word	0x86478686
    1acc:	.short	0x8686
    1ace:	.byte	0x07
    1acf:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    1ad0:	ldr	r0, [r1, #0]
    1ad2:	ldr	r5, [pc, #448]	; (1c94 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    1ad4:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    1ad6:	ldr	r7, [pc, #448]	; (1c98 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    1ad8:	ldr	r6, [pc, #448]	; (1c9c <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    1ada:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1adc:	uxth	r1, r0
    1ade:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    1ae2:	ldr	r3, [pc, #412]	; (1c80 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    1ae4:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    1ae6:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    1aea:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1aec:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    1aee:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    1af2:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    1af4:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    1af8:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    1afc:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    1b00:	ldr	r4, [pc, #364]	; (1c70 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1b02:	bhi.w	1ccc <usb_isr+0x31c>
    1b06:	cmp.w	r1, #1664	; 0x680
    1b0a:	bcs.w	219a <usb_isr+0x7ea>
    1b0e:	cmp.w	r1, #258	; 0x102
    1b12:	beq.w	210e <usb_isr+0x75e>
    1b16:	bhi.w	2034 <usb_isr+0x684>
    1b1a:	cmp	r1, #128	; 0x80
    1b1c:	beq.w	220e <usb_isr+0x85e>
    1b20:	cmp	r1, #130	; 0x82
    1b22:	bne.w	211a <usb_isr+0x76a>
    1b26:	ldrh	r1, [r5, #4]
    1b28:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    1b2c:	cmp	r1, #4
    1b2e:	bhi.w	211a <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    1b32:	ldr	r0, [pc, #364]	; (1ca0 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    1b34:	ldr	r4, [pc, #364]	; (1ca4 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    1b36:	lsls	r1, r1, #2
    1b38:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    1b3a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    1b3c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    1b3e:	ldrb	r2, [r0, #0]
    1b40:	lsls	r3, r2, #30
    1b42:	bpl.w	23f6 <usb_isr+0xa46>
    1b46:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    1b4a:	mov.w	lr, #2
    1b4e:	b.n	21d6 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    1b50:	ldr	r7, [pc, #324]	; (1c98 <usb_isr+0x2e8>)
    1b52:	ldr	r2, [r7, #0]
		if (data) {
    1b54:	cbz	r2, 1ba4 <usb_isr+0x1f4>
			size = ep0_tx_len;
    1b56:	ldr	r3, [pc, #336]	; (1ca8 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b58:	ldr	r6, [pc, #320]	; (1c9c <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1b5a:	ldr	r1, [pc, #336]	; (1cac <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    1b5c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b5e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1b60:	ldrb	r5, [r1, #0]
    1b62:	cmp	r0, #64	; 0x40
    1b64:	mov	lr, r0
    1b66:	orr.w	r8, r5, #2
    1b6a:	it	cs
    1b6c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b70:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    1b72:	eor.w	r4, r4, #1
    1b76:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    1b78:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b7c:	ite	eq
    1b7e:	moveq	r4, #136	; 0x88
    1b80:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1b82:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    1b86:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1b88:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b8c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1b90:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    1b92:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1b94:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    1b98:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1b9a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    1b9c:	cmp	r0, #0
    1b9e:	beq.w	1e2c <usb_isr+0x47c>
    1ba2:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    1ba4:	ldr	r3, [pc, #236]	; (1c94 <usb_isr+0x2e4>)
    1ba6:	ldrh	r2, [r3, #0]
    1ba8:	cmp.w	r2, #1280	; 0x500
    1bac:	bne.n	1bce <usb_isr+0x21e>
			setup.bRequest = 0;
    1bae:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    1bb0:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    1bb2:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    1bb4:	ldr	r3, [pc, #248]	; (1cb0 <usb_isr+0x300>)
    1bb6:	strb	r2, [r3, #0]
    1bb8:	b.n	1bce <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1bba:	ldr	r2, [pc, #216]	; (1c94 <usb_isr+0x2e4>)
    1bbc:	ldrh	r0, [r2, #0]
    1bbe:	movw	r2, #8225	; 0x2021
    1bc2:	cmp	r0, r2
    1bc4:	beq.w	1e36 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    1bc8:	ldr	r2, [pc, #180]	; (1c80 <usb_isr+0x2d0>)
    1bca:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    1bce:	ldr	r2, [pc, #228]	; (1cb4 <usb_isr+0x304>)
    1bd0:	movs	r3, #1
    1bd2:	strb	r3, [r2, #0]
    1bd4:	b.n	1a44 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1bd6:	ldr	r2, [pc, #168]	; (1c80 <usb_isr+0x2d0>)
    1bd8:	ldr	r3, [pc, #168]	; (1c84 <usb_isr+0x2d4>)
    1bda:	tst.w	r9, #8
    1bde:	it	ne
    1be0:	movne	r3, r2
    1be2:	str.w	r3, [r7, r8, lsl #3]
    1be6:	b.n	1a44 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    1be8:	bl	17b0 <usb_free>
				packet = tx_first[endpoint];
    1bec:	ldr	r2, [pc, #200]	; (1cb8 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    1bee:	ldr	r1, [pc, #204]	; (1cbc <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    1bf0:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    1bf4:	cmp	r3, #0
    1bf6:	beq.w	1f9c <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    1bfa:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    1bfc:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    1bfe:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    1c02:	add.w	r2, r3, #8
    1c06:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    1c0a:	cmp	r4, #3
    1c0c:	bhi.n	1c1a <usb_isr+0x26a>
    1c0e:	tbb	[pc, r4]
    1c12:	.short	0x022c
    1c14:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    1c16:	movs	r2, #2
    1c18:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    1c1a:	ldrh	r2, [r3, #0]
    1c1c:	tst.w	r9, #8
    1c20:	ite	eq
    1c22:	moveq	r3, #136	; 0x88
    1c24:	movne	r3, #200	; 0xc8
    1c26:	orr.w	r3, r3, r2, lsl #16
    1c2a:	str.w	r3, [r7, r8, lsl #3]
    1c2e:	b.n	1a44 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    1c30:	lsls	r0, r4, #31
    1c32:	bmi.w	1f38 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    1c36:	lsls	r1, r4, #24
    1c38:	bmi.w	2020 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    1c3c:	lsls	r2, r4, #30
    1c3e:	bpl.n	1c4e <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    1c40:	ldr	r2, [pc, #124]	; (1cc0 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    1c42:	ldr	r1, [pc, #128]	; (1cc4 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    1c44:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    1c46:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    1c48:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    1c4a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    1c4c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    1c4e:	lsls	r3, r4, #27
    1c50:	bpl.n	1c58 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    1c52:	ldr	r3, [pc, #112]	; (1cc4 <usb_isr+0x314>)
    1c54:	movs	r2, #16
    1c56:	strb	r2, [r3, #0]
	}

}
    1c58:	add	sp, #28
    1c5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    1c5e:	movs	r2, #4
    1c60:	strb	r2, [r1, r6]
						break;
    1c62:	b.n	1c1a <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    1c64:	movs	r2, #5
    1c66:	strb	r2, [r1, r6]
						break;
    1c68:	b.n	1c1a <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    1c6a:	movs	r2, #3
    1c6c:	strb	r2, [r1, r6]
						break;
    1c6e:	b.n	1c1a <usb_isr+0x26a>
    1c70:	.word	0x1fff0000
    1c74:	.word	0x1fff1330
    1c78:	.word	0x1fff12dc
    1c7c:	.word	0x1fff1720
    1c80:	.word	0x004000c8
    1c84:	.word	0x00400088
    1c88:	.word	0x1fff13b8
    1c8c:	.word	0x1fff1341
    1c90:	.word	0x1fff12c0
    1c94:	.word	0x1fff13a4
    1c98:	.word	0x1fff12d8
    1c9c:	.word	0x1fff1340
    1ca0:	.word	0x400720c0
    1ca4:	.word	0x1fff13b0
    1ca8:	.word	0x1fff12ec
    1cac:	.word	0x1fff13ac
    1cb0:	.word	0x40072098
    1cb4:	.word	0x40072094
    1cb8:	.word	0x1fff1384
    1cbc:	.word	0x1fff13bc
    1cc0:	.word	0x40072088
    1cc4:	.word	0x40072080
    1cc8:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1ccc:	movw	r0, #8225	; 0x2021
    1cd0:	cmp	r1, r0
    1cd2:	beq.w	1f2a <usb_isr+0x57a>
    1cd6:	bhi.w	1e8a <usb_isr+0x4da>
    1cda:	cmp.w	r1, #2176	; 0x880
    1cde:	beq.w	21ce <usb_isr+0x81e>
    1ce2:	cmp.w	r1, #2304	; 0x900
    1ce6:	bne.w	211a <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    1cea:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    1cec:	ldr	r1, [pc, #716]	; (1fbc <usb_isr+0x60c>)
    1cee:	ldrb	r0, [r5, #2]
    1cf0:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    1cf2:	lsls	r2, r2, #24
    1cf4:	bmi.w	236c <usb_isr+0x9bc>
    1cf8:	ldr.w	r2, [r9, #40]	; 0x28
    1cfc:	ldr	r1, [pc, #704]	; (1fc0 <usb_isr+0x610>)
    1cfe:	lsls	r3, r2, #24
    1d00:	bmi.w	231c <usb_isr+0x96c>
    1d04:	ldr.w	r2, [r9, #48]	; 0x30
    1d08:	ldr	r1, [pc, #692]	; (1fc0 <usb_isr+0x610>)
    1d0a:	lsls	r5, r2, #24
    1d0c:	bmi.w	2312 <usb_isr+0x962>
    1d10:	ldr.w	r2, [r9, #56]	; 0x38
    1d14:	ldr	r1, [pc, #680]	; (1fc0 <usb_isr+0x610>)
    1d16:	lsls	r4, r2, #24
    1d18:	bmi.w	2308 <usb_isr+0x958>
    1d1c:	ldr.w	r2, [r9, #64]	; 0x40
    1d20:	ldr	r1, [pc, #668]	; (1fc0 <usb_isr+0x610>)
    1d22:	lsls	r0, r2, #24
    1d24:	bmi.w	23bc <usb_isr+0xa0c>
    1d28:	ldr.w	r2, [r9, #72]	; 0x48
    1d2c:	ldr	r1, [pc, #656]	; (1fc0 <usb_isr+0x610>)
    1d2e:	lsls	r2, r2, #24
    1d30:	bmi.w	23b2 <usb_isr+0xa02>
    1d34:	ldr.w	r2, [r9, #80]	; 0x50
    1d38:	ldr	r1, [pc, #644]	; (1fc0 <usb_isr+0x610>)
    1d3a:	lsls	r3, r2, #24
    1d3c:	bmi.w	23a8 <usb_isr+0x9f8>
    1d40:	ldr.w	r2, [r9, #88]	; 0x58
    1d44:	ldr	r1, [pc, #632]	; (1fc0 <usb_isr+0x610>)
    1d46:	lsls	r5, r2, #24
    1d48:	bmi.w	239e <usb_isr+0x9ee>
    1d4c:	ldr.w	r2, [r9, #96]	; 0x60
    1d50:	ldr	r1, [pc, #620]	; (1fc0 <usb_isr+0x610>)
    1d52:	lsls	r4, r2, #24
    1d54:	bmi.w	2394 <usb_isr+0x9e4>
    1d58:	ldr.w	r2, [r9, #104]	; 0x68
    1d5c:	ldr	r1, [pc, #608]	; (1fc0 <usb_isr+0x610>)
    1d5e:	lsls	r0, r2, #24
    1d60:	bmi.w	238a <usb_isr+0x9da>
    1d64:	ldr.w	r2, [r9, #112]	; 0x70
    1d68:	ldr	r1, [pc, #596]	; (1fc0 <usb_isr+0x610>)
    1d6a:	lsls	r2, r2, #24
    1d6c:	bmi.w	2380 <usb_isr+0x9d0>
    1d70:	ldr.w	r2, [r9, #120]	; 0x78
    1d74:	ldr	r1, [pc, #584]	; (1fc0 <usb_isr+0x610>)
    1d76:	lsls	r3, r2, #24
    1d78:	bmi.w	2376 <usb_isr+0x9c6>
    1d7c:	ldr.w	r2, [r9, #128]	; 0x80
    1d80:	ldr	r1, [pc, #572]	; (1fc0 <usb_isr+0x610>)
    1d82:	lsls	r5, r2, #24
    1d84:	bmi.w	23ea <usb_isr+0xa3a>
    1d88:	ldr.w	r2, [r9, #136]	; 0x88
    1d8c:	ldr	r1, [pc, #560]	; (1fc0 <usb_isr+0x610>)
    1d8e:	lsls	r4, r2, #24
    1d90:	bmi.w	23de <usb_isr+0xa2e>
    1d94:	ldr.w	r2, [r9, #144]	; 0x90
    1d98:	ldr	r1, [pc, #548]	; (1fc0 <usb_isr+0x610>)
    1d9a:	lsls	r0, r2, #24
    1d9c:	bmi.w	23d2 <usb_isr+0xa22>
    1da0:	ldr.w	r2, [r9, #152]	; 0x98
    1da4:	ldr	r1, [pc, #536]	; (1fc0 <usb_isr+0x610>)
    1da6:	lsls	r2, r2, #24
    1da8:	bmi.w	23c6 <usb_isr+0xa16>
    1dac:	ldr	r0, [pc, #532]	; (1fc4 <usb_isr+0x614>)
    1dae:	ldr	r2, [pc, #536]	; (1fc8 <usb_isr+0x618>)
    1db0:	ldr	r1, [pc, #536]	; (1fcc <usb_isr+0x61c>)
    1db2:	str	r0, [sp, #4]
    1db4:	ldr	r0, [pc, #536]	; (1fd0 <usb_isr+0x620>)
    1db6:	ldr	r5, [pc, #540]	; (1fd4 <usb_isr+0x624>)
    1db8:	ldr	r4, [pc, #540]	; (1fd8 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    1dba:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    1dbc:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    1dbe:	str	r6, [sp, #20]
    1dc0:	str	r5, [sp, #8]
    1dc2:	mov	r8, r0
    1dc4:	mov	r7, r1
    1dc6:	mov	r6, r2
    1dc8:	mov	r5, r3
    1dca:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    1dcc:	ldr	r0, [r6, #0]
			while (p) {
    1dce:	cbz	r0, 1ddc <usb_isr+0x42c>
				n = p->next;
    1dd0:	ldr	r4, [r0, #4]
				usb_free(p);
    1dd2:	bl	17b0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    1dd6:	mov	r0, r4
    1dd8:	cmp	r4, #0
    1dda:	bne.n	1dd0 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    1ddc:	movs	r3, #0
    1dde:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    1de0:	ldr	r3, [sp, #8]
			p = tx_first[i];
    1de2:	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    1de4:	mov	r2, r3
    1de6:	movs	r3, #0
    1de8:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    1dec:	cbz	r0, 1dfa <usb_isr+0x44a>
				n = p->next;
    1dee:	ldr	r4, [r0, #4]
				usb_free(p);
    1df0:	bl	17b0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    1df4:	mov	r0, r4
    1df6:	cmp	r4, #0
    1df8:	bne.n	1dee <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    1dfa:	movs	r2, #0
    1dfc:	str	r2, [r7, #0]
			tx_last[i] = NULL;
    1dfe:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    1e00:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    1e04:	mov	r1, r2
    1e06:	movs	r2, #0
    1e08:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    1e0c:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    1e0e:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    1e10:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    1e12:	mov.w	r1, #0
    1e16:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    1e1a:	cmp	r3, #3
    1e1c:	bhi.w	2076 <usb_isr+0x6c6>
    1e20:	tbh	[pc, r3, lsl #1]
    1e24:	.word	0x01250170
    1e28:	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    1e2c:	cmp.w	lr, #64	; 0x40
    1e30:	it	ne
    1e32:	movne	r2, #0
    1e34:	b.n	1ba2 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    1e36:	ldr	r2, [pc, #420]	; (1fdc <usb_isr+0x62c>)
    1e38:	ldrb	r5, [r1, #0]
    1e3a:	ldrb	r0, [r1, #1]
    1e3c:	strb	r5, [r2, #0]
    1e3e:	strb	r0, [r2, #1]
    1e40:	ldrb	r5, [r1, #2]
    1e42:	ldrb	r0, [r1, #3]
    1e44:	strb	r5, [r2, #2]
    1e46:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    1e48:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    1e4a:	ldrb	r5, [r1, #4]
    1e4c:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    1e4e:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    1e50:	ldrb	r5, [r1, #5]
    1e52:	ldrb	r1, [r1, #6]
    1e54:	strb	r5, [r2, #5]
    1e56:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    1e58:	beq.w	2192 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1e5c:	ldr	r1, [pc, #384]	; (1fe0 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1e5e:	ldr	r6, [pc, #388]	; (1fe4 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1e60:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1e62:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1e64:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1e68:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1e6a:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1e6e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1e70:	ite	eq
    1e72:	moveq	r1, #136	; 0x88
    1e74:	movne	r1, #200	; 0xc8
    1e76:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1e7a:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    1e7e:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1e82:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    1e84:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1e86:	str	r1, [r2, #4]
    1e88:	b.n	1bc8 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1e8a:	movw	r0, #8737	; 0x2221
    1e8e:	cmp	r1, r0
    1e90:	bne.w	222a <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1e94:	ldr	r3, [pc, #336]	; (1fe8 <usb_isr+0x638>)
    1e96:	ldr	r4, [pc, #340]	; (1fec <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    1e98:	ldr	r1, [pc, #340]	; (1ff0 <usb_isr+0x640>)
    1e9a:	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1e9c:	ldr	r5, [r3, #0]
    1e9e:	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    1ea0:	str.w	lr, [sp, #4]
    1ea4:	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    1ea6:	movs	r0, #0
    1ea8:	str	r0, [sp, #8]
    1eaa:	mov	r8, r0
    1eac:	mov	ip, r0
    1eae:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1eb0:	ldr	r1, [pc, #300]	; (1fe0 <usb_isr+0x630>)
    1eb2:	ldrb	r5, [r1, #0]
    1eb4:	orr.w	lr, r5, #2
    1eb8:	add.w	r3, r9, lr, lsl #3
    1ebc:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1ebe:	ldr	r3, [sp, #4]
    1ec0:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1ec2:	ldr	r3, [sp, #12]
    1ec4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1ec6:	ite	eq
    1ec8:	moveq	r4, #136	; 0x88
    1eca:	movne	r4, #200	; 0xc8
    1ecc:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1ed0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1ed4:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    1ed8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    1eda:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1edc:	ldr.w	lr, [pc, #224]	; 1fc0 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    1ee0:	ldr	r3, [pc, #256]	; (1fe4 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    1ee2:	ldr.w	r8, [pc, #252]	; 1fe0 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    1ee6:	cmp	r0, #0
    1ee8:	bne.w	2128 <usb_isr+0x778>
    1eec:	cmp.w	ip, #64	; 0x40
    1ef0:	bne.n	1f2a <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1ef2:	orr.w	ip, r4, #2
    1ef6:	add.w	r3, r9, ip, lsl #3
    1efa:	ldr	r4, [sp, #8]
    1efc:	ldr.w	lr, [pc, #192]	; 1fc0 <usb_isr+0x610>
    1f00:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1f02:	cmp	r2, #0
    1f04:	bne.w	2154 <usb_isr+0x7a4>
    1f08:	lsls	r2, r0, #16
    1f0a:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    1f0e:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1f12:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1f16:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    1f18:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    1f1a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1f1c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    1f1e:	cmp	r0, #64	; 0x40
    1f20:	bne.n	1f2a <usb_isr+0x57a>
    1f22:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    1f24:	ldr	r2, [pc, #204]	; (1ff4 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    1f26:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    1f28:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    1f2a:	ldr	r2, [pc, #204]	; (1ff8 <usb_isr+0x648>)
    1f2c:	movs	r3, #1
    1f2e:	strb	r3, [r2, #0]
    1f30:	b.n	1bce <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    1f32:	bl	ea4 <usb_serial_flush_callback>
    1f36:	b.n	1a84 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    1f38:	ldr	r3, [pc, #132]	; (1fc0 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    1f3a:	ldr	r0, [pc, #188]	; (1ff8 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    1f3c:	ldr	r1, [pc, #160]	; (1fe0 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    1f3e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    1f40:	mov.w	lr, #2
    1f44:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    1f48:	ldr	r7, [pc, #176]	; (1ffc <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    1f4a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    1f4c:	ldr	r1, [pc, #176]	; (2000 <usb_isr+0x650>)
    1f4e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    1f50:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    1f52:	ldr	r6, [pc, #176]	; (2004 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    1f54:	ldr	r5, [pc, #176]	; (2008 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    1f56:	ldr	r4, [pc, #180]	; (200c <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    1f58:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    1f5a:	movs	r1, #13
    1f5c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    1f5e:	movs	r1, #255	; 0xff
    1f60:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    1f62:	ldr.w	lr, [pc, #184]	; 201c <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    1f66:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    1f68:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    1f6a:	ldr	r5, [pc, #164]	; (2010 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    1f6c:	ldr	r2, [pc, #164]	; (2014 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    1f6e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    1f72:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    1f74:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    1f76:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    1f7a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    1f7c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    1f7e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    1f80:	add	sp, #28
    1f82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    1f86:	ldr	r2, [pc, #144]	; (2018 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    1f88:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    1f8c:	ldrb	r3, [r2, #0]
    1f8e:	adds	r3, #1
    1f90:	strb	r3, [r2, #0]
    1f92:	b.n	1a44 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    1f94:	str.w	r0, [r3, r6, lsl #2]
    1f98:	ldr	r5, [pc, #56]	; (1fd4 <usb_isr+0x624>)
    1f9a:	b.n	1a12 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    1f9c:	ldrb	r3, [r1, r6]
    1f9e:	cmp	r3, #3
    1fa0:	bhi.w	2184 <usb_isr+0x7d4>
    1fa4:	add	r2, pc, #4	; (adr r2, 1fac <usb_isr+0x5fc>)
    1fa6:	ldr.w	pc, [r2, r3, lsl #2]
    1faa:	nop
    1fac:	.word	0x00001a45
    1fb0:	.word	0x00001a45
    1fb4:	.word	0x00002069
    1fb8:	.word	0x00002063
    1fbc:	.word	0x1fff13b8
    1fc0:	.word	0x1fff0000
    1fc4:	.word	0x1fff1394
    1fc8:	.word	0x1fff1330
    1fcc:	.word	0x1fff1384
    1fd0:	.word	0x1fff13bc
    1fd4:	.word	0x1fff12dc
    1fd8:	.word	0x1fff1720
    1fdc:	.word	0x1fff1714
    1fe0:	.word	0x1fff13ac
    1fe4:	.word	0x1fff1340
    1fe8:	.word	0x1fff12d4
    1fec:	.word	0x1fff171c
    1ff0:	.word	0x1fff12d0
    1ff4:	.word	0x1fff12ec
    1ff8:	.word	0x40072094
    1ffc:	.word	0x400720c0
    2000:	.word	0x00400088
    2004:	.word	0x40072088
    2008:	.word	0x40072080
    200c:	.word	0x40072098
    2010:	.word	0x1fff12f0
    2014:	.word	0x1fff1344
    2018:	.word	0x1fff13ad
    201c:	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2020:	ldr	r1, [pc, #772]	; (2328 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2022:	ldr	r3, [pc, #776]	; (232c <usb_isr+0x97c>)
    2024:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2026:	movs	r0, #13
    2028:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    202a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    202c:	lsls	r2, r4, #30
    202e:	bpl.w	1c4e <usb_isr+0x29e>
    2032:	b.n	1c40 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2034:	movw	r2, #770	; 0x302
    2038:	cmp	r1, r2
    203a:	bne.w	221a <usb_isr+0x86a>
    203e:	ldrh	r1, [r5, #4]
    2040:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2044:	cmp	r1, #4
    2046:	bhi.n	211a <usb_isr+0x76a>
    2048:	ldrh	r2, [r5, #2]
    204a:	cmp	r2, #0
    204c:	bne.n	211a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    204e:	ldr	r0, [pc, #728]	; (2328 <usb_isr+0x978>)
    2050:	str.w	lr, [sp, #4]
    2054:	lsls	r1, r1, #2
    2056:	add	r0, r1
    2058:	ldrb	r1, [r0, #0]
    205a:	orr.w	r1, r1, #2
    205e:	strb	r1, [r0, #0]
    2060:	b.n	1ea6 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2062:	movs	r3, #1
    2064:	strb	r3, [r1, r6]
						break;
    2066:	b.n	1a44 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2068:	movs	r3, #0
    206a:	strb	r3, [r1, r6]
						break;
    206c:	b.n	1a44 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    206e:	mov.w	r3, #1
    2072:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    2076:	adds	r5, #1
    2078:	cmp	r5, #4
    207a:	add.w	r6, r6, #4
    207e:	add.w	r7, r7, #4
    2082:	add.w	r8, r8, #1
    2086:	bne.w	1dcc <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    208a:	ldr	r4, [pc, #676]	; (2330 <usb_isr+0x980>)
			*reg = epconf;
    208c:	ldr	r3, [pc, #676]	; (2334 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    208e:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2090:	ldr	r5, [pc, #676]	; (2338 <usb_isr+0x988>)
    2092:	ldr	r7, [sp, #16]
    2094:	ldr	r6, [sp, #20]
    2096:	movs	r1, #0
    2098:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    209a:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    209c:	lsls	r3, r2, #28
    209e:	bmi.w	22ac <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    20a2:	ldrb	r2, [r4, #1]
			*reg = epconf;
    20a4:	ldr	r1, [pc, #660]	; (233c <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    20a6:	ldr.w	r8, [pc, #672]	; 2348 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    20aa:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    20ac:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    20ae:	mov.w	r1, #0
    20b2:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    20b6:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    20ba:	bmi.w	227e <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    20be:	ldr	r1, [pc, #640]	; (2340 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    20c0:	ldrb	r2, [r4, #2]
			*reg = epconf;
    20c2:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    20c4:	movs	r1, #0
    20c6:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    20ca:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    20ce:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    20d0:	ldr.w	r8, [pc, #628]	; 2348 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    20d4:	bmi.w	22da <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    20d8:	ldrb	r2, [r4, #3]
			*reg = epconf;
    20da:	ldr	r1, [pc, #616]	; (2344 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    20dc:	ldr	r4, [pc, #616]	; (2348 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    20de:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    20e0:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    20e2:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    20e4:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    20e8:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    20ec:	bmi.w	2250 <usb_isr+0x8a0>
    20f0:	ldrb	r3, [r6, #0]
    20f2:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    20f4:	movs	r1, #0
    20f6:	eor.w	r2, r3, #1
    20fa:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    20fe:	str.w	r1, [r9, #152]	; 0x98
    2102:	b.n	1ea6 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2104:	mov.w	r3, #0
    2108:	strb.w	r3, [r8]
    210c:	b.n	2076 <usb_isr+0x6c6>
    210e:	ldrh	r1, [r5, #4]
    2110:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2114:	cmp	r1, #4
    2116:	bls.w	2234 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    211a:	ldr	r2, [pc, #524]	; (2328 <usb_isr+0x978>)
    211c:	movs	r3, #15
    211e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2120:	ldr	r2, [pc, #552]	; (234c <usb_isr+0x99c>)
    2122:	movs	r3, #1
    2124:	strb	r3, [r2, #0]
    2126:	b.n	1bce <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2128:	cmp	r0, #64	; 0x40
    212a:	bls.w	1ef2 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    212e:	orr.w	r4, r4, #2
    2132:	add.w	r1, lr, r4, lsl #3
    2136:	ldr	r6, [sp, #8]
    2138:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    213a:	cbz	r2, 216c <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    213c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2140:	ldr	r2, [pc, #524]	; (2350 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    2142:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2144:	mov	r3, r6
    2146:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2148:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    214c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    214e:	str.w	r2, [lr, r4, lsl #3]
    2152:	b.n	1f24 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    2154:	ldrb.w	r3, [sp, #4]
    2158:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    215a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    215c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    215e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2160:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2164:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2166:	str.w	r2, [lr, ip, lsl #3]
    216a:	b.n	1f1e <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    216c:	ldrb.w	r1, [sp, #4]
    2170:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2172:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2174:	ldr	r2, [pc, #476]	; (2354 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2176:	strb.w	r5, [r8]
    217a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    217c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    217e:	str.w	r2, [lr, r4, lsl #3]
    2182:	b.n	1f24 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2184:	tst.w	r9, #8
    2188:	ite	eq
    218a:	moveq	r3, #2
    218c:	movne	r3, #3
    218e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2190:	b.n	1a44 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2192:	ldr	r2, [pc, #452]	; (2358 <usb_isr+0x9a8>)
    2194:	movs	r1, #15
    2196:	strb	r1, [r2, #0]
    2198:	b.n	1e5c <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    219a:	ldr	r2, [pc, #448]	; (235c <usb_isr+0x9ac>)
    219c:	ldr	r4, [r2, #4]
    219e:	cmp	r4, #0
    21a0:	beq.n	211a <usb_isr+0x76a>
    21a2:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    21a4:	ldrh.w	lr, [r5, #4]
    21a8:	b.n	21b2 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    21aa:	adds	r2, #12
			if (list->addr == NULL) break;
    21ac:	ldr	r4, [r2, #4]
    21ae:	cmp	r4, #0
    21b0:	beq.n	211a <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    21b2:	ldrh	r3, [r2, #0]
    21b4:	cmp	r3, r0
    21b6:	bne.n	21aa <usb_isr+0x7fa>
    21b8:	ldrh	r3, [r2, #2]
    21ba:	cmp	r3, lr
    21bc:	bne.n	21aa <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    21be:	lsrs	r0, r0, #8
    21c0:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    21c2:	ite	eq
    21c4:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    21c8:	ldrhne.w	lr, [r2, #8]
    21cc:	b.n	21d6 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    21ce:	ldr	r2, [pc, #400]	; (2360 <usb_isr+0x9b0>)
    21d0:	ldr	r4, [pc, #400]	; (2364 <usb_isr+0x9b4>)
    21d2:	ldrb	r2, [r2, #0]
    21d4:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    21d6:	ldrh	r0, [r5, #6]
    21d8:	cmp	r0, lr
    21da:	bcs.w	245c <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21de:	ldr	r1, [pc, #392]	; (2368 <usb_isr+0x9b8>)
    21e0:	ldrb	r5, [r1, #0]
    21e2:	cmp	r0, #64	; 0x40
    21e4:	mov	ip, r0
    21e6:	orr.w	lr, r5, #2
    21ea:	it	cs
    21ec:	movcs.w	ip, #64	; 0x40
    21f0:	add.w	r3, r4, ip
    21f4:	add.w	r2, r9, lr, lsl #3
    21f8:	str	r3, [sp, #8]
    21fa:	movs	r3, #1
    21fc:	str	r4, [r2, #4]
    21fe:	rsb	r0, ip, r0
    2202:	mov.w	r8, ip, lsl #16
    2206:	movs	r2, #0
    2208:	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    220a:	movs	r4, #200	; 0xc8
    220c:	b.n	1ecc <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    220e:	ldr	r4, [pc, #340]	; (2364 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    2210:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2214:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2216:	strb	r2, [r4, #1]
    2218:	b.n	21d6 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    221a:	cmp.w	r1, #1280	; 0x500
    221e:	bne.w	211a <usb_isr+0x76a>
    2222:	movs	r3, #1
    2224:	movs	r2, #0
    2226:	str	r3, [sp, #4]
    2228:	b.n	1ea6 <usb_isr+0x4f6>
    222a:	movw	r2, #8993	; 0x2321
    222e:	cmp	r1, r2
    2230:	beq.n	2222 <usb_isr+0x872>
    2232:	b.n	211a <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2234:	ldrh	r2, [r5, #2]
    2236:	cmp	r2, #0
    2238:	bne.w	211a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    223c:	ldr	r0, [pc, #232]	; (2328 <usb_isr+0x978>)
    223e:	str.w	lr, [sp, #4]
    2242:	lsls	r1, r1, #2
    2244:	add	r0, r1
    2246:	ldrb	r1, [r0, #0]
    2248:	bic.w	r1, r1, #2
    224c:	strb	r1, [r0, #0]
    224e:	b.n	1ea6 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2250:	bl	1770 <usb_malloc>
				if (p) {
    2254:	cmp	r0, #0
    2256:	beq.w	2438 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    225a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    225c:	ldr	r2, [pc, #244]	; (2354 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    225e:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2262:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2266:	bl	1770 <usb_malloc>
				if (p) {
    226a:	cmp	r0, #0
    226c:	beq.w	242c <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    2270:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2272:	ldr	r2, [pc, #220]	; (2350 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2274:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2278:	str.w	r2, [r9, #136]	; 0x88
    227c:	b.n	20f0 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    227e:	bl	1770 <usb_malloc>
				if (p) {
    2282:	cmp	r0, #0
    2284:	beq.w	2408 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    2288:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    228a:	ldr	r2, [pc, #200]	; (2354 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    228c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2290:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2294:	bl	1770 <usb_malloc>
				if (p) {
    2298:	cmp	r0, #0
    229a:	beq.w	23fc <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    229e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    22a0:	ldr	r2, [pc, #172]	; (2350 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    22a2:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    22a6:	str.w	r2, [r9, #72]	; 0x48
    22aa:	b.n	20be <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    22ac:	bl	1770 <usb_malloc>
				if (p) {
    22b0:	cmp	r0, #0
    22b2:	beq.w	2450 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    22b6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    22b8:	ldr	r2, [pc, #152]	; (2354 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    22ba:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    22be:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    22c2:	bl	1770 <usb_malloc>
				if (p) {
    22c6:	cmp	r0, #0
    22c8:	beq.w	2444 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    22cc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    22ce:	ldr	r2, [pc, #128]	; (2350 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    22d0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    22d4:	str.w	r2, [r9, #40]	; 0x28
    22d8:	b.n	20a2 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    22da:	bl	1770 <usb_malloc>
				if (p) {
    22de:	cmp	r0, #0
    22e0:	beq.w	2420 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    22e4:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    22e6:	ldr	r2, [pc, #108]	; (2354 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    22e8:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    22ec:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    22f0:	bl	1770 <usb_malloc>
				if (p) {
    22f4:	cmp	r0, #0
    22f6:	beq.w	2414 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    22fa:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    22fc:	ldr	r2, [pc, #80]	; (2350 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    22fe:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2302:	str.w	r2, [r9, #104]	; 0x68
    2306:	b.n	20d8 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2308:	ldr	r0, [r1, #60]	; 0x3c
    230a:	subs	r0, #8
    230c:	bl	17b0 <usb_free>
    2310:	b.n	1d1c <usb_isr+0x36c>
    2312:	ldr	r0, [r1, #52]	; 0x34
    2314:	subs	r0, #8
    2316:	bl	17b0 <usb_free>
    231a:	b.n	1d10 <usb_isr+0x360>
    231c:	ldr	r0, [r1, #44]	; 0x2c
    231e:	subs	r0, #8
    2320:	bl	17b0 <usb_free>
    2324:	b.n	1d04 <usb_isr+0x354>
    2326:	nop
    2328:	.word	0x400720c0
    232c:	.word	0x40072080
    2330:	.word	0x000080b4
    2334:	.word	0x400720c4
    2338:	.word	0x1fff13ad
    233c:	.word	0x400720c8
    2340:	.word	0x400720cc
    2344:	.word	0x400720d0
    2348:	.word	0x1fff0000
    234c:	.word	0x40072094
    2350:	.word	0x004000c8
    2354:	.word	0x00400088
    2358:	.word	0x1fff1341
    235c:	.word	0x000080b8
    2360:	.word	0x1fff13b8
    2364:	.word	0x1fff13b0
    2368:	.word	0x1fff13ac
    236c:	ldr	r0, [r4, #36]	; 0x24
    236e:	subs	r0, #8
    2370:	bl	17b0 <usb_free>
    2374:	b.n	1cf8 <usb_isr+0x348>
    2376:	ldr	r0, [r1, #124]	; 0x7c
    2378:	subs	r0, #8
    237a:	bl	17b0 <usb_free>
    237e:	b.n	1d7c <usb_isr+0x3cc>
    2380:	ldr	r0, [r1, #116]	; 0x74
    2382:	subs	r0, #8
    2384:	bl	17b0 <usb_free>
    2388:	b.n	1d70 <usb_isr+0x3c0>
    238a:	ldr	r0, [r1, #108]	; 0x6c
    238c:	subs	r0, #8
    238e:	bl	17b0 <usb_free>
    2392:	b.n	1d64 <usb_isr+0x3b4>
    2394:	ldr	r0, [r1, #100]	; 0x64
    2396:	subs	r0, #8
    2398:	bl	17b0 <usb_free>
    239c:	b.n	1d58 <usb_isr+0x3a8>
    239e:	ldr	r0, [r1, #92]	; 0x5c
    23a0:	subs	r0, #8
    23a2:	bl	17b0 <usb_free>
    23a6:	b.n	1d4c <usb_isr+0x39c>
    23a8:	ldr	r0, [r1, #84]	; 0x54
    23aa:	subs	r0, #8
    23ac:	bl	17b0 <usb_free>
    23b0:	b.n	1d40 <usb_isr+0x390>
    23b2:	ldr	r0, [r1, #76]	; 0x4c
    23b4:	subs	r0, #8
    23b6:	bl	17b0 <usb_free>
    23ba:	b.n	1d34 <usb_isr+0x384>
    23bc:	ldr	r0, [r1, #68]	; 0x44
    23be:	subs	r0, #8
    23c0:	bl	17b0 <usb_free>
    23c4:	b.n	1d28 <usb_isr+0x378>
    23c6:	ldr.w	r0, [r1, #156]	; 0x9c
    23ca:	subs	r0, #8
    23cc:	bl	17b0 <usb_free>
    23d0:	b.n	1dac <usb_isr+0x3fc>
    23d2:	ldr.w	r0, [r1, #148]	; 0x94
    23d6:	subs	r0, #8
    23d8:	bl	17b0 <usb_free>
    23dc:	b.n	1da0 <usb_isr+0x3f0>
    23de:	ldr.w	r0, [r1, #140]	; 0x8c
    23e2:	subs	r0, #8
    23e4:	bl	17b0 <usb_free>
    23e8:	b.n	1d94 <usb_isr+0x3e4>
    23ea:	ldr.w	r0, [r1, #132]	; 0x84
    23ee:	subs	r0, #8
    23f0:	bl	17b0 <usb_free>
    23f4:	b.n	1d88 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    23f6:	mov.w	lr, #2
    23fa:	b.n	21d6 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    23fc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    23fe:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    2402:	adds	r2, #1
    2404:	strb	r2, [r5, #0]
    2406:	b.n	20be <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2408:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    240a:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    240e:	adds	r2, #1
    2410:	strb	r2, [r5, #0]
    2412:	b.n	2294 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2414:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2416:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    241a:	adds	r2, #1
    241c:	strb	r2, [r5, #0]
    241e:	b.n	20d8 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2420:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2422:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2426:	adds	r2, #1
    2428:	strb	r2, [r5, #0]
    242a:	b.n	22f0 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    242c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    242e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2432:	adds	r2, #1
    2434:	strb	r2, [r5, #0]
    2436:	b.n	20f0 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2438:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    243a:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    243e:	adds	r2, #1
    2440:	strb	r2, [r5, #0]
    2442:	b.n	2266 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2444:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2446:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    244a:	adds	r2, #1
    244c:	strb	r2, [r5, #0]
    244e:	b.n	20a2 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2450:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2452:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2456:	adds	r2, #1
    2458:	strb	r2, [r5, #0]
    245a:	b.n	22c2 <usb_isr+0x912>
    245c:	cmp.w	lr, #64	; 0x40
    2460:	mov	ip, lr
    2462:	it	cs
    2464:	movcs.w	ip, #64	; 0x40
    2468:	add.w	r3, r4, ip
    246c:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    246e:	movs	r3, #1
    2470:	rsb	r0, ip, lr
    2474:	mov.w	r8, ip, lsl #16
    2478:	movs	r2, #0
    247a:	str	r3, [sp, #4]
    247c:	b.n	1eb0 <usb_isr+0x500>
    247e:	nop

00002480 <usb_init>:
}



void usb_init(void)
{
    2480:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2484:	bl	3088 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2488:	ldr	r4, [pc, #196]	; (2550 <usb_init+0xd0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    248a:	ldr	r3, [pc, #200]	; (2554 <usb_init+0xd4>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    248c:	ldr	r0, [pc, #200]	; (2558 <usb_init+0xd8>)
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    248e:	ldr.w	r8, [pc, #228]	; 2574 <usb_init+0xf4>
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2492:	ldr	r6, [pc, #200]	; (255c <usb_init+0xdc>)
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2494:	ldr.w	ip, [pc, #224]	; 2578 <usb_init+0xf8>
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2498:	ldr	r7, [pc, #196]	; (2560 <usb_init+0xe0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    249a:	ldr	r5, [pc, #200]	; (2564 <usb_init+0xe4>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    249c:	ldr.w	lr, [pc, #220]	; 257c <usb_init+0xfc>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24a0:	movs	r2, #0
    24a2:	str	r2, [r3, #0]
		table[i].addr = 0;
    24a4:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24a6:	str	r2, [r3, #8]
		table[i].addr = 0;
    24a8:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24aa:	str	r2, [r3, #16]
		table[i].addr = 0;
    24ac:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24ae:	str	r2, [r3, #24]
		table[i].addr = 0;
    24b0:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24b2:	str	r2, [r3, #32]
		table[i].addr = 0;
    24b4:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24b6:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    24b8:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24ba:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    24bc:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24be:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    24c0:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24c2:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    24c4:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24c6:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    24c8:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24ca:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    24cc:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24ce:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    24d0:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24d2:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    24d4:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24d6:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    24d8:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24da:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    24dc:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24de:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    24e0:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    24e2:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    24e6:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    24e8:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    24ec:	orr.w	r1, r1, #262144	; 0x40000
    24f0:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    24f2:	ldr	r1, [r0, #0]
    24f4:	orr.w	r1, r1, #50331648	; 0x3000000
    24f8:	str	r1, [r0, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    24fa:	movs	r1, #3
    24fc:	strb.w	r1, [r8]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2500:	movs	r0, #160	; 0xa0
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2502:	ubfx	r1, r3, #8, #8
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2506:	strb.w	r0, [ip]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    250a:	add.w	r4, r4, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    250e:	strb	r1, [r6, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2510:	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2514:	ldr	r1, [pc, #80]	; (2568 <usb_init+0xe8>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2516:	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2518:	lsrs	r3, r3, #24
    251a:	strb	r3, [r5, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    251c:	adds	r4, #204	; 0xcc
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    251e:	movs	r3, #255	; 0xff
    2520:	strb.w	r3, [lr]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2524:	ldr	r5, [pc, #68]	; (256c <usb_init+0xec>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2526:	strb.w	r3, [ip, #-184]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    252a:	ldr	r0, [pc, #68]	; (2570 <usb_init+0xf0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    252c:	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    252e:	movs	r3, #1
    2530:	strb.w	r3, [r6, #-8]
	USB0_USBCTRL = 0;
    2534:	strb	r2, [r4, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2536:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2538:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    253c:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    253e:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2542:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2544:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2546:	strb.w	r2, [r1, #248]	; 0xf8
    254a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    254e:	nop
    2550:	.word	0x40048034
    2554:	.word	0x1fff0000
    2558:	.word	0x4000d800
    255c:	.word	0x4007209c
    2560:	.word	0x400720b0
    2564:	.word	0x400720b4
    2568:	.word	0x40072010
    256c:	.word	0xe000e435
    2570:	.word	0xe000e104
    2574:	.word	0x40072144
    2578:	.word	0x40072140
    257c:	.word	0x40072080

00002580 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    2580:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2582:	mrs	r2, PRIMASK
		__disable_irq();
    2586:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    2588:	ldrb	r3, [r0, #29]
    258a:	cbnz	r3, 259a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    258c:	ldrb	r1, [r0, #28]
    258e:	cmp	r1, #1
    2590:	beq.n	25a4 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    2592:	cmp	r1, #3
    2594:	beq.n	25b8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    2596:	movs	r3, #1
    2598:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    259a:	cbnz	r2, 259e <EventResponder::triggerEventNotImmediate()+0x1e>
    259c:	cpsie	i
	}
	enableInterrupts(irq);
}
    259e:	ldr.w	r4, [sp], #4
    25a2:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    25a4:	ldr	r4, [pc, #68]	; (25ec <EventResponder::triggerEventNotImmediate()+0x6c>)
    25a6:	ldr	r1, [r4, #0]
    25a8:	cbz	r1, 25d4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    25aa:	ldr	r1, [pc, #68]	; (25f0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    25ac:	str	r3, [r0, #20]
				_prev = lastYield;
    25ae:	ldr	r3, [r1, #0]
    25b0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    25b2:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    25b4:	str	r0, [r3, #20]
    25b6:	b.n	2596 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    25b8:	ldr	r4, [pc, #56]	; (25f4 <EventResponder::triggerEventNotImmediate()+0x74>)
    25ba:	ldr	r1, [r4, #0]
    25bc:	cbz	r1, 25e0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    25be:	ldr	r1, [pc, #56]	; (25f8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    25c0:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    25c2:	ldr	r3, [r1, #0]
    25c4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    25c6:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    25c8:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    25ca:	ldr	r3, [pc, #48]	; (25fc <EventResponder::triggerEventNotImmediate()+0x7c>)
    25cc:	mov.w	r1, #268435456	; 0x10000000
    25d0:	str	r1, [r3, #0]
    25d2:	b.n	2596 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    25d4:	ldr	r3, [pc, #24]	; (25f0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    25d6:	str	r1, [r0, #20]
				_prev = nullptr;
    25d8:	str	r1, [r0, #24]
				firstYield = this;
    25da:	str	r0, [r4, #0]
				lastYield = this;
    25dc:	str	r0, [r3, #0]
    25de:	b.n	2596 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    25e0:	ldr	r3, [pc, #20]	; (25f8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    25e2:	str	r1, [r0, #20]
				_prev = nullptr;
    25e4:	str	r1, [r0, #24]
				firstInterrupt = this;
    25e6:	str	r0, [r4, #0]
				lastInterrupt = this;
    25e8:	str	r0, [r3, #0]
    25ea:	b.n	25ca <EventResponder::triggerEventNotImmediate()+0x4a>
    25ec:	.word	0x1fff13d0
    25f0:	.word	0x1fff13cc
    25f4:	.word	0x1fff13c0
    25f8:	.word	0x1fff13c4
    25fc:	.word	0xe000ed04

00002600 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2600:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2602:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2604:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2606:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2608:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    260a:	beq.n	2614 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    260c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2610:	b.w	2580 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2614:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2616:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    261a:	bx	r3

0000261c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    261c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    261e:	mrs	r2, PRIMASK
		__disable_irq();
    2622:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2624:	ldr	r4, [pc, #48]	; (2658 <EventResponder::runFromInterrupt()+0x3c>)
    2626:	ldr	r0, [r4, #0]
		if (first) {
    2628:	cbz	r0, 264c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    262a:	ldr	r6, [pc, #48]	; (265c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    262c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    262e:	ldr	r3, [r0, #20]
    2630:	str	r3, [r4, #0]
			if (firstInterrupt) {
    2632:	cbz	r3, 2652 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2634:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2636:	cbnz	r2, 263a <EventResponder::runFromInterrupt()+0x1e>
    2638:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    263a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    263c:	ldr	r3, [r0, #8]
    263e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2640:	mrs	r2, PRIMASK
		__disable_irq();
    2644:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2646:	ldr	r0, [r4, #0]
		if (first) {
    2648:	cmp	r0, #0
    264a:	bne.n	262e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    264c:	cbnz	r2, 2650 <EventResponder::runFromInterrupt()+0x34>
    264e:	cpsie	i
    2650:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2652:	str	r3, [r6, #0]
    2654:	b.n	2636 <EventResponder::runFromInterrupt()+0x1a>
    2656:	nop
    2658:	.word	0x1fff13c0
    265c:	.word	0x1fff13c4

00002660 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    2660:	b.w	261c <EventResponder::runFromInterrupt()>

00002664 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    2664:	ldr	r2, [pc, #96]	; (26c8 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    2666:	push	{r4, r5}
	if (listActive == nullptr) {
    2668:	ldr	r4, [r2, #0]
    266a:	cmp	r4, #0
    266c:	beq.n	26be <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    266e:	ldr	r3, [r0, #0]
    2670:	ldr	r1, [r4, #0]
    2672:	cmp	r3, r1
    2674:	bcs.n	2694 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    2676:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    2678:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    267a:	str	r4, [r0, #8]
		_prev = nullptr;
    267c:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    267e:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    2680:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    2682:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    2684:	movs	r3, #2
    2686:	strb	r3, [r0, #20]
}
    2688:	pop	{r4, r5}
    268a:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    268c:	ldr	r1, [r2, #0]
    268e:	cmp	r3, r1
    2690:	mov	r4, r2
    2692:	bcc.n	26a6 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    2694:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    2696:	subs	r3, r3, r1
    2698:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    269a:	cmp	r2, #0
    269c:	bne.n	268c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    269e:	str	r2, [r0, #8]
		_prev = timer;
    26a0:	str	r4, [r0, #12]
		timer->_next = this;
    26a2:	str	r0, [r4, #8]
    26a4:	b.n	2684 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    26a6:	ldr	r2, [r2, #12]
    26a8:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    26aa:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    26ac:	str	r0, [r4, #12]
				_prev->_next = this;
    26ae:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    26b0:	subs	r3, r1, r3
				_state = TimerActive;
    26b2:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    26b4:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    26b6:	str	r3, [r4, #0]
				_state = TimerActive;
    26b8:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    26ba:	pop	{r4, r5}
    26bc:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    26be:	str	r4, [r0, #8]
		_prev = nullptr;
    26c0:	str	r4, [r0, #12]
		listActive = this;
    26c2:	str	r0, [r2, #0]
    26c4:	b.n	2684 <MillisTimer::addToActiveList()+0x20>
    26c6:	nop
    26c8:	.word	0x1fff13c8

000026cc <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    26cc:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    26ce:	ldr	r6, [pc, #136]	; (2758 <MillisTimer::runFromTimer()+0x8c>)
    26d0:	ldr	r4, [r6, #0]
	while (timer) {
    26d2:	cbz	r4, 2720 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    26d4:	ldr	r3, [r4, #0]
    26d6:	cmp	r3, #0
    26d8:	bne.n	2750 <MillisTimer::runFromTimer()+0x84>
    26da:	ldr	r7, [pc, #128]	; (275c <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    26dc:	mov	r5, r3
    26de:	b.n	26ea <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    26e0:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    26e2:	cbz	r4, 2720 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    26e4:	ldr	r3, [r4, #0]
    26e6:	cmp	r3, #0
    26e8:	bne.n	2750 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    26ea:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    26ec:	cbz	r3, 26f0 <MillisTimer::runFromTimer()+0x24>
    26ee:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    26f0:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    26f2:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    26f4:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    26f6:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    26f8:	ldr	r3, [r3, #0]
    26fa:	cmp	r3, r7
    26fc:	bne.n	2742 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    26fe:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2700:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2702:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2704:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    2706:	beq.n	274a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2708:	bl	2580 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    270c:	ldr	r3, [r4, #4]
    270e:	cmp	r3, #0
    2710:	beq.n	26e0 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    2712:	str	r3, [r4, #0]
				timer->addToActiveList();
    2714:	mov	r0, r4
    2716:	bl	2664 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    271a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    271c:	cmp	r4, #0
    271e:	bne.n	26e4 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2720:	mrs	r3, PRIMASK
		__disable_irq();
    2724:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    2726:	ldr	r2, [pc, #56]	; (2760 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    2728:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    272a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    272c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    272e:	cbnz	r3, 2732 <MillisTimer::runFromTimer()+0x66>
    2730:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    2732:	cbz	r0, 2740 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    2734:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    2736:	bl	2664 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    273a:	mov	r0, r4
    273c:	cmp	r0, #0
    273e:	bne.n	2734 <MillisTimer::runFromTimer()+0x68>
    2740:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    2742:	mov	r2, r4
    2744:	movs	r1, #0
    2746:	blx	r3
    2748:	b.n	270c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    274a:	ldr	r3, [r0, #8]
    274c:	blx	r3
    274e:	b.n	270c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    2750:	subs	r3, #1
    2752:	str	r3, [r4, #0]
			break;
    2754:	b.n	2720 <MillisTimer::runFromTimer()+0x54>
    2756:	nop
    2758:	.word	0x1fff13c8
    275c:	.word	0x00002601
    2760:	.word	0x1fff13d8

00002764 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    2764:	ldr	r2, [pc, #8]	; (2770 <systick_isr+0xc>)
    2766:	ldr	r3, [r2, #0]
    2768:	adds	r3, #1
    276a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    276c:	b.w	26cc <MillisTimer::runFromTimer()>
    2770:	.word	0x1fff12d4

00002774 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2774:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2776:	ldr	r4, [pc, #176]	; (2828 <yield+0xb4>)
    2778:	ldrb	r3, [r4, #0]
    277a:	cbz	r3, 277e <yield+0xa>
    277c:	pop	{r3, r4, r5, pc}
	running = 1;
    277e:	movs	r3, #1
    2780:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2782:	bl	c90 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2786:	cmp	r0, #0
    2788:	bne.n	2810 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    278a:	bl	2e58 <serial_available>
	if (Serial1.available()) serialEvent1();
    278e:	cmp	r0, #0
    2790:	bne.n	280a <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2792:	bl	2c34 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2796:	cmp	r0, #0
    2798:	bne.n	2804 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    279a:	bl	3158 <serial3_available>
	if (Serial3.available()) serialEvent3();
    279e:	cbnz	r0, 27fe <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    27a0:	bl	2d60 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    27a4:	cbnz	r0, 27f8 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    27a6:	bl	29e4 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    27aa:	cbnz	r0, 27f2 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    27ac:	bl	2f84 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    27b0:	cbnz	r0, 27ec <yield+0x78>
#endif
	running = 0;
    27b2:	movs	r3, #0
    27b4:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    27b6:	mrs	r3, IPSR
		if (ipsr != 0) return;
    27ba:	cmp	r3, #0
    27bc:	bne.n	277c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    27be:	mrs	r1, PRIMASK
		__disable_irq();
    27c2:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    27c4:	ldr	r3, [pc, #100]	; (282c <yield+0xb8>)
    27c6:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    27c8:	cbz	r0, 2816 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    27ca:	ldr	r4, [pc, #100]	; (2830 <yield+0xbc>)
    27cc:	ldrb	r2, [r4, #0]
    27ce:	cbnz	r2, 2816 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    27d0:	ldr	r5, [r0, #20]
    27d2:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    27d4:	movs	r3, #1
    27d6:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    27d8:	cbz	r5, 281e <yield+0xaa>
			firstYield->_prev = nullptr;
    27da:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    27dc:	cbnz	r1, 27e0 <yield+0x6c>
    27de:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    27e0:	movs	r5, #0
    27e2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    27e4:	ldr	r3, [r0, #8]
    27e6:	blx	r3
		runningFromYield = false;
    27e8:	strb	r5, [r4, #0]
    27ea:	b.n	277c <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    27ec:	bl	28ac <serialEvent6()>
    27f0:	b.n	27b2 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    27f2:	bl	2838 <serialEvent5()>
    27f6:	b.n	27ac <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    27f8:	bl	2898 <serialEvent4()>
    27fc:	b.n	27a6 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    27fe:	bl	3254 <serialEvent3()>
    2802:	b.n	27a0 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2804:	bl	2894 <serialEvent2()>
    2808:	b.n	279a <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    280a:	bl	3250 <serialEvent1()>
    280e:	b.n	2792 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2810:	bl	2864 <serialEvent()>
    2814:	b.n	278a <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2816:	cmp	r1, #0
    2818:	bne.n	277c <yield+0x8>
    281a:	cpsie	i
    281c:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    281e:	ldr	r3, [pc, #20]	; (2834 <yield+0xc0>)
    2820:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2822:	cmp	r1, #0
    2824:	bne.n	27e0 <yield+0x6c>
    2826:	b.n	27de <yield+0x6a>
    2828:	.word	0x1fff13dc
    282c:	.word	0x1fff13d0
    2830:	.word	0x1fff13d4
    2834:	.word	0x1fff13cc

00002838 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2838:	bx	lr
    283a:	nop

0000283c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    283c:	b.w	cac <usb_serial_flush_input>

00002840 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2840:	b.w	c60 <usb_serial_peekchar>

00002844 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2844:	b.w	c18 <usb_serial_getchar>

00002848 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2848:	b.w	c90 <usb_serial_available>

0000284c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    284c:	b.w	e4c <usb_serial_flush_output>

00002850 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2850:	b.w	e04 <usb_serial_write_buffer_free>

00002854 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2854:	mov	r0, r1
    2856:	mov	r1, r2
    2858:	b.w	ce4 <usb_serial_write>

0000285c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    285c:	mov	r0, r1
    285e:	b.w	dec <usb_serial_putchar>
    2862:	nop

00002864 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2864:	bx	lr
    2866:	nop

00002868 <_write>:
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    2868:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    286a:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    286c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    286e:	ldr	r3, [r3, #4]
    2870:	blx	r3
	return len;
}
    2872:	mov	r0, r4
    2874:	pop	{r4, pc}
    2876:	nop

00002878 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    2878:	push	{r1, r2, r3}
    287a:	push	{lr}
    287c:	sub	sp, #8
    287e:	add	r2, sp, #12
    2880:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    2884:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    2886:	bl	47e8 <vdprintf>
#endif
}
    288a:	add	sp, #8
    288c:	ldr.w	lr, [sp], #4
    2890:	add	sp, #12
    2892:	bx	lr

00002894 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2894:	bx	lr
    2896:	nop

00002898 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2898:	bx	lr
    289a:	nop

0000289c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    289c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    289e:	bl	6c4 <setup>
	while (1) {
		loop();
    28a2:	bl	4e4 <loop>
		yield();
    28a6:	bl	2774 <yield>
    28aa:	b.n	28a2 <main+0x6>

000028ac <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    28ac:	bx	lr
    28ae:	nop

000028b0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    28b0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    28b2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    28b6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    28ba:	bne.n	2998 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    28bc:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    28be:	bcc.n	2944 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    28c0:	ldr.w	r3, [r1], #4
    28c4:	str.w	r3, [r0], #4
    28c8:	ldr.w	r3, [r1], #4
    28cc:	str.w	r3, [r0], #4
    28d0:	ldr.w	r3, [r1], #4
    28d4:	str.w	r3, [r0], #4
    28d8:	ldr.w	r3, [r1], #4
    28dc:	str.w	r3, [r0], #4
    28e0:	ldr.w	r3, [r1], #4
    28e4:	str.w	r3, [r0], #4
    28e8:	ldr.w	r3, [r1], #4
    28ec:	str.w	r3, [r0], #4
    28f0:	ldr.w	r3, [r1], #4
    28f4:	str.w	r3, [r0], #4
    28f8:	ldr.w	r3, [r1], #4
    28fc:	str.w	r3, [r0], #4
    2900:	ldr.w	r3, [r1], #4
    2904:	str.w	r3, [r0], #4
    2908:	ldr.w	r3, [r1], #4
    290c:	str.w	r3, [r0], #4
    2910:	ldr.w	r3, [r1], #4
    2914:	str.w	r3, [r0], #4
    2918:	ldr.w	r3, [r1], #4
    291c:	str.w	r3, [r0], #4
    2920:	ldr.w	r3, [r1], #4
    2924:	str.w	r3, [r0], #4
    2928:	ldr.w	r3, [r1], #4
    292c:	str.w	r3, [r0], #4
    2930:	ldr.w	r3, [r1], #4
    2934:	str.w	r3, [r0], #4
    2938:	ldr.w	r3, [r1], #4
    293c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2940:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2942:	bcs.n	28c0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2944:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2946:	bcc.n	296c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2948:	ldr.w	r3, [r1], #4
    294c:	str.w	r3, [r0], #4
    2950:	ldr.w	r3, [r1], #4
    2954:	str.w	r3, [r0], #4
    2958:	ldr.w	r3, [r1], #4
    295c:	str.w	r3, [r0], #4
    2960:	ldr.w	r3, [r1], #4
    2964:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2968:	subs	r2, #16
	bhs	.Lmid_block_loop
    296a:	bcs.n	2948 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    296c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    296e:	bcc.n	297c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2970:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2974:	str.w	r3, [r0], #4
	subs	r2, #4
    2978:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    297a:	bcs.n	2970 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    297c:	adds	r2, #4
	beq	.Ldone
    297e:	beq.n	2992 <memcpy+0xe2>

	lsls	r2, r2, #31
    2980:	lsls	r2, r2, #31
	itt ne
    2982:	itt	ne
	ldrbne  r3, [r1], #1
    2984:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2988:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    298c:	bcc.n	2992 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    298e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2990:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2992:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2994:	bx	lr
    2996:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2998:	cmp	r2, #8
	blo	.Lbyte_copy
    299a:	bcc.n	29c4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    299c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    299e:	beq.n	28bc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    29a0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    29a4:	beq.n	28bc <memcpy+0xc>

	rsb	r3, #4
    29a6:	rsb	r3, r3, #4
	subs	r2, r3
    29aa:	subs	r2, r2, r3

	lsls    r3, r3, #31
    29ac:	lsls	r3, r3, #31
	itt ne
    29ae:	itt	ne
	ldrbne  r3, [r1], #1
    29b0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    29b4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    29b8:	bcc.n	28bc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    29ba:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    29be:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    29c2:	b.n	28bc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    29c4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    29c6:	bcc.n	297c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    29c8:	subs	r2, #1
	ldrb    r3, [r1], #1
    29ca:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    29ce:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    29d2:	bcs.n	29c8 <memcpy+0x118>

	ldrb	r3, [r1]
    29d4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    29d6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    29d8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    29da:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    29dc:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    29de:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    29e0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    29e2:	bx	lr

000029e4 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    29e4:	ldr	r2, [pc, #20]	; (29fc <serial5_available+0x18>)
	tail = rx_buffer_tail;
    29e6:	ldr	r3, [pc, #24]	; (2a00 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    29e8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    29ea:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    29ec:	uxtb	r0, r0
	tail = rx_buffer_tail;
    29ee:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    29f0:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    29f2:	it	cc
    29f4:	addcc	r0, #64	; 0x40
    29f6:	subs	r0, r0, r3
}
    29f8:	bx	lr
    29fa:	nop
    29fc:	.word	0x1fff13e4
    2a00:	.word	0x1fff13e5

00002a04 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2a04:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2a06:	ldr	r3, [pc, #172]	; (2ab4 <uart4_status_isr+0xb0>)
    2a08:	ldrb	r2, [r3, #4]
    2a0a:	lsls	r4, r2, #26
    2a0c:	bpl.n	2a4e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2a0e:	ldr	r0, [pc, #168]	; (2ab8 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2a10:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2a12:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a14:	ldr	r1, [pc, #164]	; (2abc <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2a16:	adds	r3, #1
    2a18:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a1a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2a1c:	it	gt
    2a1e:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a20:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2a22:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a24:	beq.n	2a2e <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2a26:	ldr	r4, [pc, #152]	; (2ac0 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2a28:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2a2a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2a2c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2a2e:	ldr	r2, [pc, #148]	; (2ac4 <uart4_status_isr+0xc0>)
    2a30:	ldr	r1, [r2, #0]
    2a32:	cbz	r1, 2a4e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2a34:	ldr	r2, [pc, #144]	; (2ac8 <uart4_status_isr+0xc4>)
    2a36:	ldrb	r2, [r2, #0]
    2a38:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2a3a:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2a3c:	itet	cc
    2a3e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2a42:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2a44:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2a46:	cmp	r3, #39	; 0x27
    2a48:	itt	gt
    2a4a:	movgt	r3, #1
    2a4c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2a4e:	ldr	r2, [pc, #100]	; (2ab4 <uart4_status_isr+0xb0>)
    2a50:	ldrb	r3, [r2, #3]
    2a52:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2a54:	lsls	r0, r3, #24
    2a56:	bmi.n	2a7c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2a58:	lsls	r2, r3, #25
    2a5a:	bpl.n	2a78 <uart4_status_isr+0x74>
    2a5c:	ldr	r3, [pc, #84]	; (2ab4 <uart4_status_isr+0xb0>)
    2a5e:	ldrb	r3, [r3, #4]
    2a60:	lsls	r3, r3, #25
    2a62:	bpl.n	2a78 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2a64:	ldr	r3, [pc, #100]	; (2acc <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2a66:	ldr	r1, [pc, #104]	; (2ad0 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2a68:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2a6a:	movs	r2, #0
    2a6c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2a6e:	cbz	r3, 2a72 <uart4_status_isr+0x6e>
    2a70:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2a72:	ldr	r3, [pc, #64]	; (2ab4 <uart4_status_isr+0xb0>)
    2a74:	movs	r2, #44	; 0x2c
    2a76:	strb	r2, [r3, #3]
	}
}
    2a78:	pop	{r4, r5}
    2a7a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2a7c:	ldrb	r1, [r2, #4]
    2a7e:	lsls	r1, r1, #24
    2a80:	bpl.n	2a58 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2a82:	ldr	r1, [pc, #80]	; (2ad4 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2a84:	ldr	r0, [pc, #64]	; (2ac8 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2a86:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2a88:	ldrb	r1, [r0, #0]
    2a8a:	uxtb	r1, r1
		if (head == tail) {
    2a8c:	cmp	r4, r1
    2a8e:	beq.n	2aac <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2a90:	adds	r2, r1, #1
    2a92:	cmp	r2, #39	; 0x27
    2a94:	itt	hi
    2a96:	movhi	r1, #0
    2a98:	movhi	r2, r1
			n = tx_buffer[tail];
    2a9a:	ldr	r5, [pc, #60]	; (2ad8 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2a9c:	ldr	r4, [pc, #20]	; (2ab4 <uart4_status_isr+0xb0>)
    2a9e:	it	ls
    2aa0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2aa2:	ldrb	r2, [r5, r2]
    2aa4:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2aa6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2aa8:	strb	r1, [r0, #0]
    2aaa:	b.n	2a58 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2aac:	movs	r1, #108	; 0x6c
    2aae:	strb	r1, [r2, #3]
    2ab0:	b.n	2a58 <uart4_status_isr+0x54>
    2ab2:	nop
    2ab4:	.word	0x400ea000
    2ab8:	.word	0x1fff13e4
    2abc:	.word	0x1fff13e5
    2ac0:	.word	0x1fff1410
    2ac4:	.word	0x1fff13e0
    2ac8:	.word	0x1fff1451
    2acc:	.word	0x1fff1454
    2ad0:	.word	0x1fff1450
    2ad4:	.word	0x1fff1458
    2ad8:	.word	0x1fff13e8

00002adc <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2adc:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2ade:	ldr	r0, [pc, #164]	; (2b84 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2ae0:	ldr	r2, [pc, #164]	; (2b88 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2ae2:	ldr	r3, [pc, #168]	; (2b8c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2ae4:	ldr	r5, [pc, #168]	; (2b90 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2ae6:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2ae8:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2aea:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2aec:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2aee:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2af0:	ldr	r4, [pc, #160]	; (2b94 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2af2:	cmp	r3, #8
    2af4:	beq.n	2b58 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2af6:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2af8:	ldr	r0, [pc, #156]	; (2b98 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2afa:	ldr	r1, [pc, #160]	; (2b9c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2afc:	beq.n	2b6e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2afe:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2b00:	ite	eq
    2b02:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2b04:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2b06:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2b08:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2b0a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2b0c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2b0e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2b10:	ldr	r3, [pc, #140]	; (2ba0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2b12:	ldr	r1, [pc, #144]	; (2ba4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2b14:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2b16:	ldr	r2, [pc, #144]	; (2ba8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2b18:	cbz	r3, 2b4a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2b1a:	movs	r3, #1
    2b1c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2b1e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2b20:	ldr	r3, [pc, #136]	; (2bac <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2b22:	ldr	r1, [pc, #140]	; (2bb0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2b24:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2b26:	ldr	r2, [pc, #140]	; (2bb4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2b28:	cmp	r3, #1
    2b2a:	bls.n	2b7a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2b2c:	cmp	r3, #4
    2b2e:	bls.n	2b50 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2b30:	cmp	r3, #8
    2b32:	bls.n	2b72 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2b34:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2b36:	ite	ls
    2b38:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2b3a:	movhi	r3, #135	; 0x87
    2b3c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2b3e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2b40:	ldr	r3, [pc, #116]	; (2bb8 <analog_init+0xdc>)
    2b42:	movs	r2, #1
    2b44:	strb	r2, [r3, #0]
}
    2b46:	pop	{r4, r5}
    2b48:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2b4a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2b4c:	str	r3, [r2, #0]
    2b4e:	b.n	2b20 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2b50:	movs	r3, #132	; 0x84
    2b52:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2b54:	str	r3, [r2, #0]
    2b56:	b.n	2b40 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b58:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b5c:	ldr	r1, [pc, #60]	; (2b9c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b5e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b60:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b62:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b64:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b66:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b68:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b6a:	str	r3, [r1, #0]
    2b6c:	b.n	2b10 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b6e:	movs	r2, #57	; 0x39
    2b70:	b.n	2b62 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2b72:	movs	r3, #133	; 0x85
    2b74:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2b76:	str	r3, [r2, #0]
    2b78:	b.n	2b40 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2b7a:	movs	r3, #128	; 0x80
    2b7c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2b7e:	str	r3, [r2, #0]
    2b80:	b.n	2b40 <analog_init+0x64>
    2b82:	nop
    2b84:	.word	0x40074000
    2b88:	.word	0x40074001
    2b8c:	.word	0x1fff07b4
    2b90:	.word	0x4003b008
    2b94:	.word	0x4003b00c
    2b98:	.word	0x400bb008
    2b9c:	.word	0x400bb00c
    2ba0:	.word	0x1fff145a
    2ba4:	.word	0x4003b020
    2ba8:	.word	0x400bb020
    2bac:	.word	0x1fff07b5
    2bb0:	.word	0x4003b024
    2bb4:	.word	0x400bb024
    2bb8:	.word	0x1fff1459

00002bbc <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    2bbc:	ldr	r2, [pc, #40]	; (2be8 <analogWriteDAC0+0x2c>)
	if (analog_reference_internal) {
    2bbe:	ldr	r1, [pc, #44]	; (2bec <analogWriteDAC0+0x30>)
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    2bc0:	ldr	r3, [r2, #0]
    2bc2:	orr.w	r3, r3, #4096	; 0x1000
    2bc6:	str	r3, [r2, #0]
	if (analog_reference_internal) {
    2bc8:	ldrb	r3, [r1, #0]
    2bca:	cbnz	r3, 2bde <analogWriteDAC0+0x22>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    2bcc:	ldr	r3, [pc, #32]	; (2bf0 <analogWriteDAC0+0x34>)
    2bce:	movs	r2, #192	; 0xc0
    2bd0:	strb	r2, [r3, #0]
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    2bd2:	ldr	r3, [pc, #32]	; (2bf4 <analogWriteDAC0+0x38>)
	if (analog_reference_internal) {
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    2bd4:	usat	r0, #12, r0

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    2bd8:	sxth	r0, r0
    2bda:	strh	r0, [r3, #0]
    2bdc:	bx	lr
void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
	if (analog_reference_internal) {
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    2bde:	ldr	r3, [pc, #16]	; (2bf0 <analogWriteDAC0+0x34>)
    2be0:	movs	r2, #128	; 0x80
    2be2:	strb	r2, [r3, #0]
    2be4:	b.n	2bd2 <analogWriteDAC0+0x16>
    2be6:	nop
    2be8:	.word	0x4004802c
    2bec:	.word	0x1fff145a
    2bf0:	.word	0x400cc021
    2bf4:	.word	0x400cc000

00002bf8 <analogWriteDAC1>:


#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
void analogWriteDAC1(int val)
{
	SIM_SCGC2 |= SIM_SCGC2_DAC1;
    2bf8:	ldr	r2, [pc, #40]	; (2c24 <analogWriteDAC1+0x2c>)
	if (analog_reference_internal) {
    2bfa:	ldr	r1, [pc, #44]	; (2c28 <analogWriteDAC1+0x30>)


#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
void analogWriteDAC1(int val)
{
	SIM_SCGC2 |= SIM_SCGC2_DAC1;
    2bfc:	ldr	r3, [r2, #0]
    2bfe:	orr.w	r3, r3, #8192	; 0x2000
    2c02:	str	r3, [r2, #0]
	if (analog_reference_internal) {
    2c04:	ldrb	r3, [r1, #0]
    2c06:	cbnz	r3, 2c1a <analogWriteDAC1+0x22>
		DAC1_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
	} else {
		DAC1_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    2c08:	ldr	r3, [pc, #32]	; (2c2c <analogWriteDAC1+0x34>)
    2c0a:	movs	r2, #192	; 0xc0
    2c0c:	strb	r2, [r3, #0]
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC1_DAT0L) = val;
    2c0e:	ldr	r3, [pc, #32]	; (2c30 <analogWriteDAC1+0x38>)
	if (analog_reference_internal) {
		DAC1_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
	} else {
		DAC1_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    2c10:	usat	r0, #12, r0

	*(volatile aliased_int16_t *)&(DAC1_DAT0L) = val;
    2c14:	sxth	r0, r0
    2c16:	strh	r0, [r3, #0]
    2c18:	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
void analogWriteDAC1(int val)
{
	SIM_SCGC2 |= SIM_SCGC2_DAC1;
	if (analog_reference_internal) {
		DAC1_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    2c1a:	ldr	r3, [pc, #16]	; (2c2c <analogWriteDAC1+0x34>)
    2c1c:	movs	r2, #128	; 0x80
    2c1e:	strb	r2, [r3, #0]
    2c20:	b.n	2c0e <analogWriteDAC1+0x16>
    2c22:	nop
    2c24:	.word	0x4004802c
    2c28:	.word	0x1fff145a
    2c2c:	.word	0x400cd021
    2c30:	.word	0x400cd000

00002c34 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c34:	ldr	r2, [pc, #20]	; (2c4c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2c36:	ldr	r3, [pc, #24]	; (2c50 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c38:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2c3a:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c3c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2c3e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2c40:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2c42:	it	cc
    2c44:	addcc	r0, #64	; 0x40
    2c46:	subs	r0, r0, r3
}
    2c48:	bx	lr
    2c4a:	nop
    2c4c:	.word	0x1fff14cc
    2c50:	.word	0x1fff1461

00002c54 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2c54:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2c56:	ldr	r3, [pc, #224]	; (2d38 <uart1_status_isr+0xe4>)
    2c58:	ldrb	r2, [r3, #4]
    2c5a:	tst.w	r2, #48	; 0x30
    2c5e:	beq.n	2cba <uart1_status_isr+0x66>
		__disable_irq();
    2c60:	cpsid	i
		avail = UART1_RCFIFO;
    2c62:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2c64:	and.w	r2, r1, #255	; 0xff
    2c68:	cmp	r1, #0
    2c6a:	beq.n	2ce8 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2c6c:	cpsie	i
			head = rx_buffer_head;
    2c6e:	ldr	r7, [pc, #204]	; (2d3c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2c70:	ldr	r1, [pc, #204]	; (2d40 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2c72:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2c74:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2c76:	ldr	r6, [pc, #204]	; (2d44 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2c78:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2c7a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2c7c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2c7e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2c80:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2c82:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2c84:	it	cs
    2c86:	movcs	r3, #0
				if (newhead != tail) {
    2c88:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2c8a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2c8e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2c90:	itt	ne
    2c92:	strbne	r1, [r6, r3]
    2c94:	movne	r0, r3
				}
			} while (--avail > 0);
    2c96:	ands.w	r2, r2, #255	; 0xff
    2c9a:	bne.n	2c7e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2c9c:	ldr	r3, [pc, #168]	; (2d48 <uart1_status_isr+0xf4>)
    2c9e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2ca0:	uxtb	r2, r0
    2ca2:	strb	r2, [r7, #0]
			if (rts_pin) {
    2ca4:	cbz	r3, 2cba <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2ca6:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2ca8:	itet	cc
    2caa:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2cae:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2cb0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2cb2:	cmp	r0, #39	; 0x27
    2cb4:	itt	gt
    2cb6:	movgt	r2, #1
    2cb8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2cba:	ldr	r1, [pc, #124]	; (2d38 <uart1_status_isr+0xe4>)
    2cbc:	ldrb	r2, [r1, #3]
    2cbe:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2cc0:	lsls	r5, r2, #24
    2cc2:	bmi.n	2cf2 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2cc4:	lsls	r2, r2, #25
    2cc6:	bpl.n	2ce4 <uart1_status_isr+0x90>
    2cc8:	ldr	r3, [pc, #108]	; (2d38 <uart1_status_isr+0xe4>)
    2cca:	ldrb	r3, [r3, #4]
    2ccc:	lsls	r3, r3, #25
    2cce:	bpl.n	2ce4 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2cd0:	ldr	r3, [pc, #120]	; (2d4c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2cd2:	ldr	r1, [pc, #124]	; (2d50 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2cd4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2cd6:	movs	r2, #0
    2cd8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2cda:	cbz	r3, 2cde <uart1_status_isr+0x8a>
    2cdc:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2cde:	ldr	r3, [pc, #88]	; (2d38 <uart1_status_isr+0xe4>)
    2ce0:	movs	r2, #60	; 0x3c
    2ce2:	strb	r2, [r3, #3]
	}
}
    2ce4:	pop	{r4, r5, r6, r7}
    2ce6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2ce8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2cea:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2cec:	strb	r2, [r3, #17]
			__enable_irq();
    2cee:	cpsie	i
    2cf0:	b.n	2cba <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2cf2:	ldrb	r3, [r1, #4]
    2cf4:	lsls	r4, r3, #24
    2cf6:	bpl.n	2cc4 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2cf8:	ldr	r3, [pc, #88]	; (2d54 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2cfa:	ldr	r6, [pc, #92]	; (2d58 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2cfc:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2cfe:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2d00:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2d02:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2d04:	cmp	r4, r3
    2d06:	beq.n	2d26 <uart1_status_isr+0xd2>
    2d08:	ldr	r5, [pc, #80]	; (2d5c <uart1_status_isr+0x108>)
    2d0a:	b.n	2d10 <uart1_status_isr+0xbc>
    2d0c:	cmp	r3, r4
    2d0e:	beq.n	2d26 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2d10:	adds	r3, #1
    2d12:	cmp	r3, #40	; 0x28
    2d14:	it	cs
    2d16:	movcs	r3, #0
			avail = UART1_S1;
    2d18:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2d1a:	ldrb	r0, [r5, r3]
    2d1c:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2d1e:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2d20:	ldrb	r0, [r1, #20]
    2d22:	cmp	r0, #7
    2d24:	bls.n	2d0c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2d26:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2d28:	ldr	r1, [pc, #12]	; (2d38 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2d2a:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2d2c:	ldrb	r3, [r1, #4]
    2d2e:	lsls	r0, r3, #24
    2d30:	itt	mi
    2d32:	movmi	r3, #124	; 0x7c
    2d34:	strbmi	r3, [r1, #3]
    2d36:	b.n	2cc4 <uart1_status_isr+0x70>
    2d38:	.word	0x4006b000
    2d3c:	.word	0x1fff14cc
    2d40:	.word	0x1fff1461
    2d44:	.word	0x1fff148c
    2d48:	.word	0x1fff145c
    2d4c:	.word	0x1fff14d0
    2d50:	.word	0x1fff1460
    2d54:	.word	0x1fff14d4
    2d58:	.word	0x1fff14cd
    2d5c:	.word	0x1fff1464

00002d60 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d60:	ldr	r2, [pc, #20]	; (2d78 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    2d62:	ldr	r3, [pc, #24]	; (2d7c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d64:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2d66:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d68:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2d6a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2d6c:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    2d6e:	it	cc
    2d70:	addcc	r0, #64	; 0x40
    2d72:	subs	r0, r0, r3
}
    2d74:	bx	lr
    2d76:	nop
    2d78:	.word	0x1fff14dc
    2d7c:	.word	0x1fff14dd

00002d80 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2d80:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2d82:	ldr	r3, [pc, #172]	; (2e30 <uart3_status_isr+0xb0>)
    2d84:	ldrb	r2, [r3, #4]
    2d86:	lsls	r4, r2, #26
    2d88:	bpl.n	2dca <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2d8a:	ldr	r0, [pc, #168]	; (2e34 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2d8c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2d8e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d90:	ldr	r1, [pc, #164]	; (2e38 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2d92:	adds	r3, #1
    2d94:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d96:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2d98:	it	gt
    2d9a:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d9c:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2d9e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2da0:	beq.n	2daa <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    2da2:	ldr	r4, [pc, #152]	; (2e3c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    2da4:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2da6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2da8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2daa:	ldr	r2, [pc, #148]	; (2e40 <uart3_status_isr+0xc0>)
    2dac:	ldr	r1, [r2, #0]
    2dae:	cbz	r1, 2dca <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2db0:	ldr	r2, [pc, #144]	; (2e44 <uart3_status_isr+0xc4>)
    2db2:	ldrb	r2, [r2, #0]
    2db4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2db6:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2db8:	itet	cc
    2dba:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2dbe:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2dc0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2dc2:	cmp	r3, #39	; 0x27
    2dc4:	itt	gt
    2dc6:	movgt	r3, #1
    2dc8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    2dca:	ldr	r2, [pc, #100]	; (2e30 <uart3_status_isr+0xb0>)
    2dcc:	ldrb	r3, [r2, #3]
    2dce:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2dd0:	lsls	r0, r3, #24
    2dd2:	bmi.n	2df8 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2dd4:	lsls	r2, r3, #25
    2dd6:	bpl.n	2df4 <uart3_status_isr+0x74>
    2dd8:	ldr	r3, [pc, #84]	; (2e30 <uart3_status_isr+0xb0>)
    2dda:	ldrb	r3, [r3, #4]
    2ddc:	lsls	r3, r3, #25
    2dde:	bpl.n	2df4 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2de0:	ldr	r3, [pc, #100]	; (2e48 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2de2:	ldr	r1, [pc, #104]	; (2e4c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2de4:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2de6:	movs	r2, #0
    2de8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2dea:	cbz	r3, 2dee <uart3_status_isr+0x6e>
    2dec:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    2dee:	ldr	r3, [pc, #64]	; (2e30 <uart3_status_isr+0xb0>)
    2df0:	movs	r2, #44	; 0x2c
    2df2:	strb	r2, [r3, #3]
	}
}
    2df4:	pop	{r4, r5}
    2df6:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2df8:	ldrb	r1, [r2, #4]
    2dfa:	lsls	r1, r1, #24
    2dfc:	bpl.n	2dd4 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    2dfe:	ldr	r1, [pc, #80]	; (2e50 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2e00:	ldr	r0, [pc, #64]	; (2e44 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e02:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2e04:	ldrb	r1, [r0, #0]
    2e06:	uxtb	r1, r1
		if (head == tail) {
    2e08:	cmp	r4, r1
    2e0a:	beq.n	2e28 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    2e0c:	adds	r2, r1, #1
    2e0e:	cmp	r2, #39	; 0x27
    2e10:	itt	hi
    2e12:	movhi	r1, #0
    2e14:	movhi	r2, r1
			n = tx_buffer[tail];
    2e16:	ldr	r5, [pc, #60]	; (2e54 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2e18:	ldr	r4, [pc, #20]	; (2e30 <uart3_status_isr+0xb0>)
    2e1a:	it	ls
    2e1c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2e1e:	ldrb	r2, [r5, r2]
    2e20:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2e22:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2e24:	strb	r1, [r0, #0]
    2e26:	b.n	2dd4 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    2e28:	movs	r1, #108	; 0x6c
    2e2a:	strb	r1, [r2, #3]
    2e2c:	b.n	2dd4 <uart3_status_isr+0x54>
    2e2e:	nop
    2e30:	.word	0x4006d000
    2e34:	.word	0x1fff14dc
    2e38:	.word	0x1fff14dd
    2e3c:	.word	0x1fff1508
    2e40:	.word	0x1fff14d8
    2e44:	.word	0x1fff1549
    2e48:	.word	0x1fff154c
    2e4c:	.word	0x1fff1548
    2e50:	.word	0x1fff1550
    2e54:	.word	0x1fff14e0

00002e58 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e58:	ldr	r2, [pc, #20]	; (2e70 <serial_available+0x18>)
	tail = rx_buffer_tail;
    2e5a:	ldr	r3, [pc, #24]	; (2e74 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e5c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2e5e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2e60:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2e62:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2e64:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    2e66:	it	cc
    2e68:	addcc	r0, #64	; 0x40
    2e6a:	subs	r0, r0, r3
}
    2e6c:	bx	lr
    2e6e:	nop
    2e70:	.word	0x1fff1558
    2e74:	.word	0x1fff1559

00002e78 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    2e78:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2e7a:	ldr	r3, [pc, #224]	; (2f5c <uart0_status_isr+0xe4>)
    2e7c:	ldrb	r2, [r3, #4]
    2e7e:	tst.w	r2, #48	; 0x30
    2e82:	beq.n	2ede <uart0_status_isr+0x66>
		__disable_irq();
    2e84:	cpsid	i
		avail = UART0_RCFIFO;
    2e86:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2e88:	and.w	r2, r1, #255	; 0xff
    2e8c:	cmp	r1, #0
    2e8e:	beq.n	2f0c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2e90:	cpsie	i
			head = rx_buffer_head;
    2e92:	ldr	r7, [pc, #204]	; (2f60 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2e94:	ldr	r1, [pc, #204]	; (2f64 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2e96:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2e98:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2e9a:	ldr	r6, [pc, #204]	; (2f68 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2e9c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2e9e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2ea0:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    2ea2:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2ea4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2ea6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2ea8:	it	cs
    2eaa:	movcs	r3, #0
				if (newhead != tail) {
    2eac:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2eae:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2eb2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2eb4:	itt	ne
    2eb6:	strbne	r1, [r6, r3]
    2eb8:	movne	r0, r3
				}
			} while (--avail > 0);
    2eba:	ands.w	r2, r2, #255	; 0xff
    2ebe:	bne.n	2ea2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2ec0:	ldr	r3, [pc, #168]	; (2f6c <uart0_status_isr+0xf4>)
    2ec2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2ec4:	uxtb	r2, r0
    2ec6:	strb	r2, [r7, #0]
			if (rts_pin) {
    2ec8:	cbz	r3, 2ede <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2eca:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2ecc:	itet	cc
    2ece:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2ed2:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2ed4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2ed6:	cmp	r0, #39	; 0x27
    2ed8:	itt	gt
    2eda:	movgt	r2, #1
    2edc:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    2ede:	ldr	r1, [pc, #124]	; (2f5c <uart0_status_isr+0xe4>)
    2ee0:	ldrb	r2, [r1, #3]
    2ee2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    2ee4:	lsls	r5, r2, #24
    2ee6:	bmi.n	2f16 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    2ee8:	lsls	r2, r2, #25
    2eea:	bpl.n	2f08 <uart0_status_isr+0x90>
    2eec:	ldr	r3, [pc, #108]	; (2f5c <uart0_status_isr+0xe4>)
    2eee:	ldrb	r3, [r3, #4]
    2ef0:	lsls	r3, r3, #25
    2ef2:	bpl.n	2f08 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2ef4:	ldr	r3, [pc, #120]	; (2f70 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    2ef6:	ldr	r1, [pc, #124]	; (2f74 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2ef8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    2efa:	movs	r2, #0
    2efc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2efe:	cbz	r3, 2f02 <uart0_status_isr+0x8a>
    2f00:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    2f02:	ldr	r3, [pc, #88]	; (2f5c <uart0_status_isr+0xe4>)
    2f04:	movs	r2, #60	; 0x3c
    2f06:	strb	r2, [r3, #3]
	}
}
    2f08:	pop	{r4, r5, r6, r7}
    2f0a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2f0c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    2f0e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2f10:	strb	r2, [r3, #17]
			__enable_irq();
    2f12:	cpsie	i
    2f14:	b.n	2ede <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    2f16:	ldrb	r3, [r1, #4]
    2f18:	lsls	r4, r3, #24
    2f1a:	bpl.n	2ee8 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    2f1c:	ldr	r3, [pc, #88]	; (2f78 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    2f1e:	ldr	r6, [pc, #92]	; (2f7c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2f20:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2f22:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2f24:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2f26:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2f28:	cmp	r4, r3
    2f2a:	beq.n	2f4a <uart0_status_isr+0xd2>
    2f2c:	ldr	r5, [pc, #80]	; (2f80 <uart0_status_isr+0x108>)
    2f2e:	b.n	2f34 <uart0_status_isr+0xbc>
    2f30:	cmp	r3, r4
    2f32:	beq.n	2f4a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    2f34:	adds	r3, #1
    2f36:	cmp	r3, #64	; 0x40
    2f38:	it	cs
    2f3a:	movcs	r3, #0
			avail = UART0_S1;
    2f3c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2f3e:	ldrb	r0, [r5, r3]
    2f40:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    2f42:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    2f44:	ldrb	r0, [r1, #20]
    2f46:	cmp	r0, #7
    2f48:	bls.n	2f30 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    2f4a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    2f4c:	ldr	r1, [pc, #12]	; (2f5c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    2f4e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    2f50:	ldrb	r3, [r1, #4]
    2f52:	lsls	r0, r3, #24
    2f54:	itt	mi
    2f56:	movmi	r3, #124	; 0x7c
    2f58:	strbmi	r3, [r1, #3]
    2f5a:	b.n	2ee8 <uart0_status_isr+0x70>
    2f5c:	.word	0x4006a000
    2f60:	.word	0x1fff1558
    2f64:	.word	0x1fff1559
    2f68:	.word	0x1fff159c
    2f6c:	.word	0x1fff1554
    2f70:	.word	0x1fff15e0
    2f74:	.word	0x1fff15dc
    2f78:	.word	0x1fff15e4
    2f7c:	.word	0x1fff15dd
    2f80:	.word	0x1fff155c

00002f84 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f84:	ldr	r2, [pc, #20]	; (2f9c <serial6_available+0x18>)
	tail = rx_buffer_tail;
    2f86:	ldr	r3, [pc, #24]	; (2fa0 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f88:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2f8a:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f8c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2f8e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2f90:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    2f92:	it	cc
    2f94:	addcc	r0, #64	; 0x40
    2f96:	subs	r0, r0, r3
}
    2f98:	bx	lr
    2f9a:	nop
    2f9c:	.word	0x1fff15ec
    2fa0:	.word	0x1fff15ed

00002fa4 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    2fa4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    2fa6:	ldr	r3, [pc, #176]	; (3058 <lpuart0_status_isr+0xb4>)
    2fa8:	ldr	r2, [r3, #4]
    2faa:	lsls	r4, r2, #10
    2fac:	bpl.n	2fee <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    2fae:	ldr	r0, [pc, #172]	; (305c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    2fb0:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    2fb2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2fb4:	ldr	r1, [pc, #168]	; (3060 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    2fb6:	adds	r3, #1
    2fb8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2fba:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    2fbc:	it	gt
    2fbe:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2fc0:	cmp	r3, r1
    2fc2:	beq.n	2fce <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    2fc4:	ldr	r4, [pc, #156]	; (3064 <lpuart0_status_isr+0xc0>)
    2fc6:	uxtb	r2, r2
			rx_buffer_head = head;
    2fc8:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2fca:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2fcc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2fce:	ldr	r2, [pc, #152]	; (3068 <lpuart0_status_isr+0xc4>)
    2fd0:	ldr	r1, [r2, #0]
    2fd2:	cbz	r1, 2fee <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2fd4:	ldr	r2, [pc, #148]	; (306c <lpuart0_status_isr+0xc8>)
    2fd6:	ldrb	r2, [r2, #0]
    2fd8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2fda:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    2fdc:	itet	cc
    2fde:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2fe2:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    2fe4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2fe6:	cmp	r3, #39	; 0x27
    2fe8:	itt	gt
    2fea:	movgt	r3, #1
    2fec:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    2fee:	ldr	r2, [pc, #104]	; (3058 <lpuart0_status_isr+0xb4>)
    2ff0:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    2ff2:	lsls	r0, r3, #8
    2ff4:	bpl.n	2ffc <lpuart0_status_isr+0x58>
    2ff6:	ldr	r2, [r2, #4]
    2ff8:	lsls	r1, r2, #8
    2ffa:	bmi.n	3020 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    2ffc:	lsls	r2, r3, #9
    2ffe:	bpl.n	301c <lpuart0_status_isr+0x78>
    3000:	ldr	r3, [pc, #84]	; (3058 <lpuart0_status_isr+0xb4>)
    3002:	ldr	r3, [r3, #4]
    3004:	lsls	r3, r3, #9
    3006:	bpl.n	301c <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3008:	ldr	r3, [pc, #100]	; (3070 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    300a:	ldr	r1, [pc, #104]	; (3074 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    300c:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    300e:	movs	r2, #0
    3010:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3012:	cbz	r3, 3016 <lpuart0_status_isr+0x72>
    3014:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3016:	ldr	r3, [pc, #96]	; (3078 <lpuart0_status_isr+0xd4>)
    3018:	movs	r2, #0
    301a:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    301c:	pop	{r4, r5}
    301e:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3020:	ldr	r2, [pc, #88]	; (307c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3022:	ldr	r1, [pc, #72]	; (306c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3024:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3026:	ldrb	r2, [r1, #0]
    3028:	uxtb	r2, r2
		if (head == tail) {
    302a:	cmp	r0, r2
    302c:	beq.n	304a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    302e:	adds	r2, #1
    3030:	cmp	r2, #39	; 0x27
    3032:	itt	hi
    3034:	movhi	r0, #0
    3036:	movhi	r2, r0
			n = tx_buffer[tail];
    3038:	ldr	r5, [pc, #68]	; (3080 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    303a:	ldr	r4, [pc, #28]	; (3058 <lpuart0_status_isr+0xb4>)
    303c:	it	ls
    303e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3040:	ldrb	r2, [r5, r2]
    3042:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3044:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3046:	strb	r0, [r1, #0]
    3048:	b.n	2ffc <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    304a:	ldr	r0, [pc, #56]	; (3084 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    304c:	ldr	r2, [pc, #40]	; (3078 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    304e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3050:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3052:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3054:	str	r1, [r2, #0]
    3056:	b.n	2ffc <lpuart0_status_isr+0x58>
    3058:	.word	0x400c4000
    305c:	.word	0x1fff15ec
    3060:	.word	0x1fff15ed
    3064:	.word	0x1fff1618
    3068:	.word	0x1fff15e8
    306c:	.word	0x1fff1659
    3070:	.word	0x1fff165c
    3074:	.word	0x1fff1658
    3078:	.word	0x43880158
    307c:	.word	0x1fff1660
    3080:	.word	0x1fff15f0
    3084:	.word	0x4388015c

00003088 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3088:	push	{r4, lr}
    308a:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    308c:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    308e:	bl	f78 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3092:	ldr	r2, [pc, #96]	; (30f4 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3094:	ldr	r3, [pc, #96]	; (30f8 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3096:	ldr	r1, [pc, #100]	; (30fc <usb_init_serialnumber+0x74>)
    3098:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    309a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    309c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    309e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    30a0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    30a2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    30a4:	ldrb	r3, [r2, #0]
    30a6:	lsls	r3, r3, #24
    30a8:	bpl.n	30a4 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    30aa:	ldr	r3, [pc, #84]	; (3100 <usb_init_serialnumber+0x78>)
    30ac:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    30ae:	bl	fac <kinetis_hsrun_enable>
#endif
	__enable_irq();
    30b2:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    30b4:	ldr	r3, [pc, #76]	; (3104 <usb_init_serialnumber+0x7c>)
    30b6:	cmp	r4, r3
    30b8:	itt	ls
    30ba:	addls.w	r4, r4, r4, lsl #2
    30be:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    30c0:	mov	r0, r4
    30c2:	ldr	r4, [pc, #68]	; (3108 <usb_init_serialnumber+0x80>)
    30c4:	add	r1, sp, #4
    30c6:	movs	r2, #10
    30c8:	bl	310c <ultoa>
    30cc:	add	r1, sp, #4
    30ce:	mov	r0, r4
	for (i=0; i<10; i++) {
    30d0:	movs	r3, #0
		char c = buf[i];
    30d2:	ldrb.w	r2, [r1], #1
    30d6:	adds	r3, #1
		if (!c) break;
    30d8:	cbz	r2, 30ea <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    30da:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    30dc:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    30e0:	bne.n	30d2 <usb_init_serialnumber+0x4a>
    30e2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    30e4:	strb	r3, [r4, #0]
}
    30e6:	add	sp, #16
    30e8:	pop	{r4, pc}
    30ea:	lsls	r3, r3, #1
    30ec:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    30ee:	strb	r3, [r4, #0]
}
    30f0:	add	sp, #16
    30f2:	pop	{r4, pc}
    30f4:	.word	0x40020004
    30f8:	.word	0x40020000
    30fc:	.word	0x41070000
    3100:	.word	0x4002000c
    3104:	.word	0x0098967f
    3108:	.word	0x1fff0844

0000310c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    310c:	push	{r4, r5, r6, r7}
    310e:	subs	r5, r1, #1
    3110:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3112:	movs	r4, #0
    3114:	b.n	3118 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3116:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3118:	udiv	r3, r0, r2
    311c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3120:	cmp	r0, #9
    3122:	add.w	r7, r0, #48	; 0x30
    3126:	itet	hi
    3128:	addhi	r0, #55	; 0x37
    312a:	uxtbls	r0, r7
    312c:	uxtbhi	r0, r0
    312e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3132:	mov	r0, r3
    3134:	cmp	r3, #0
    3136:	bne.n	3116 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3138:	adds	r2, r1, r4
    313a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    313c:	cbz	r4, 3152 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    313e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3140:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3144:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3146:	adds	r3, #1
    3148:	subs	r0, r4, r3
    314a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    314c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3150:	blt.n	313e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3152:	mov	r0, r1
    3154:	pop	{r4, r5, r6, r7}
    3156:	bx	lr

00003158 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3158:	ldr	r2, [pc, #20]	; (3170 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    315a:	ldr	r3, [pc, #24]	; (3174 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    315c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    315e:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3160:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3162:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3164:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3166:	it	cc
    3168:	addcc	r0, #64	; 0x40
    316a:	subs	r0, r0, r3
}
    316c:	bx	lr
    316e:	nop
    3170:	.word	0x1fff1668
    3174:	.word	0x1fff1669

00003178 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3178:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    317a:	ldr	r3, [pc, #172]	; (3228 <uart2_status_isr+0xb0>)
    317c:	ldrb	r2, [r3, #4]
    317e:	lsls	r4, r2, #26
    3180:	bpl.n	31c2 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3182:	ldr	r0, [pc, #168]	; (322c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3184:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3186:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3188:	ldr	r1, [pc, #164]	; (3230 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    318a:	adds	r3, #1
    318c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    318e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3190:	it	gt
    3192:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3194:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3196:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3198:	beq.n	31a2 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    319a:	ldr	r4, [pc, #152]	; (3234 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    319c:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    319e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    31a0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    31a2:	ldr	r2, [pc, #148]	; (3238 <uart2_status_isr+0xc0>)
    31a4:	ldr	r1, [r2, #0]
    31a6:	cbz	r1, 31c2 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    31a8:	ldr	r2, [pc, #144]	; (323c <uart2_status_isr+0xc4>)
    31aa:	ldrb	r2, [r2, #0]
    31ac:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    31ae:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    31b0:	itet	cc
    31b2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    31b6:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    31b8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    31ba:	cmp	r3, #39	; 0x27
    31bc:	itt	gt
    31be:	movgt	r3, #1
    31c0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    31c2:	ldr	r2, [pc, #100]	; (3228 <uart2_status_isr+0xb0>)
    31c4:	ldrb	r3, [r2, #3]
    31c6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    31c8:	lsls	r0, r3, #24
    31ca:	bmi.n	31f0 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    31cc:	lsls	r2, r3, #25
    31ce:	bpl.n	31ec <uart2_status_isr+0x74>
    31d0:	ldr	r3, [pc, #84]	; (3228 <uart2_status_isr+0xb0>)
    31d2:	ldrb	r3, [r3, #4]
    31d4:	lsls	r3, r3, #25
    31d6:	bpl.n	31ec <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    31d8:	ldr	r3, [pc, #100]	; (3240 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    31da:	ldr	r1, [pc, #104]	; (3244 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    31dc:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    31de:	movs	r2, #0
    31e0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    31e2:	cbz	r3, 31e6 <uart2_status_isr+0x6e>
    31e4:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    31e6:	ldr	r3, [pc, #64]	; (3228 <uart2_status_isr+0xb0>)
    31e8:	movs	r2, #44	; 0x2c
    31ea:	strb	r2, [r3, #3]
	}
}
    31ec:	pop	{r4, r5}
    31ee:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    31f0:	ldrb	r1, [r2, #4]
    31f2:	lsls	r1, r1, #24
    31f4:	bpl.n	31cc <uart2_status_isr+0x54>
		head = tx_buffer_head;
    31f6:	ldr	r1, [pc, #80]	; (3248 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    31f8:	ldr	r0, [pc, #64]	; (323c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    31fa:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    31fc:	ldrb	r1, [r0, #0]
    31fe:	uxtb	r1, r1
		if (head == tail) {
    3200:	cmp	r4, r1
    3202:	beq.n	3220 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3204:	adds	r2, r1, #1
    3206:	cmp	r2, #39	; 0x27
    3208:	itt	hi
    320a:	movhi	r1, #0
    320c:	movhi	r2, r1
			n = tx_buffer[tail];
    320e:	ldr	r5, [pc, #60]	; (324c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3210:	ldr	r4, [pc, #20]	; (3228 <uart2_status_isr+0xb0>)
    3212:	it	ls
    3214:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3216:	ldrb	r2, [r5, r2]
    3218:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    321a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    321c:	strb	r1, [r0, #0]
    321e:	b.n	31cc <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3220:	movs	r1, #108	; 0x6c
    3222:	strb	r1, [r2, #3]
    3224:	b.n	31cc <uart2_status_isr+0x54>
    3226:	nop
    3228:	.word	0x4006c000
    322c:	.word	0x1fff1668
    3230:	.word	0x1fff1669
    3234:	.word	0x1fff1694
    3238:	.word	0x1fff1664
    323c:	.word	0x1fff16d5
    3240:	.word	0x1fff16d8
    3244:	.word	0x1fff16d4
    3248:	.word	0x1fff16dc
    324c:	.word	0x1fff166c

00003250 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3250:	bx	lr
    3252:	nop

00003254 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3254:	bx	lr
    3256:	nop

00003258 <__aeabi_drsub>:
    3258:	eor.w	r1, r1, #2147483648	; 0x80000000
    325c:	b.n	3264 <__adddf3>
    325e:	nop

00003260 <__aeabi_dsub>:
    3260:	eor.w	r3, r3, #2147483648	; 0x80000000

00003264 <__adddf3>:
    3264:	push	{r4, r5, lr}
    3266:	mov.w	r4, r1, lsl #1
    326a:	mov.w	r5, r3, lsl #1
    326e:	teq	r4, r5
    3272:	it	eq
    3274:	teqeq	r0, r2
    3278:	itttt	ne
    327a:	orrsne.w	ip, r4, r0
    327e:	orrsne.w	ip, r5, r2
    3282:	mvnsne.w	ip, r4, asr #21
    3286:	mvnsne.w	ip, r5, asr #21
    328a:	beq.w	3452 <__adddf3+0x1ee>
    328e:	mov.w	r4, r4, lsr #21
    3292:	rsbs	r5, r4, r5, lsr #21
    3296:	it	lt
    3298:	neglt	r5, r5
    329a:	ble.n	32b6 <__adddf3+0x52>
    329c:	add	r4, r5
    329e:	eor.w	r2, r0, r2
    32a2:	eor.w	r3, r1, r3
    32a6:	eor.w	r0, r2, r0
    32aa:	eor.w	r1, r3, r1
    32ae:	eor.w	r2, r0, r2
    32b2:	eor.w	r3, r1, r3
    32b6:	cmp	r5, #54	; 0x36
    32b8:	it	hi
    32ba:	pophi	{r4, r5, pc}
    32bc:	tst.w	r1, #2147483648	; 0x80000000
    32c0:	mov.w	r1, r1, lsl #12
    32c4:	mov.w	ip, #1048576	; 0x100000
    32c8:	orr.w	r1, ip, r1, lsr #12
    32cc:	beq.n	32d4 <__adddf3+0x70>
    32ce:	negs	r0, r0
    32d0:	sbc.w	r1, r1, r1, lsl #1
    32d4:	tst.w	r3, #2147483648	; 0x80000000
    32d8:	mov.w	r3, r3, lsl #12
    32dc:	orr.w	r3, ip, r3, lsr #12
    32e0:	beq.n	32e8 <__adddf3+0x84>
    32e2:	negs	r2, r2
    32e4:	sbc.w	r3, r3, r3, lsl #1
    32e8:	teq	r4, r5
    32ec:	beq.w	343e <__adddf3+0x1da>
    32f0:	sub.w	r4, r4, #1
    32f4:	rsbs	lr, r5, #32
    32f8:	blt.n	3316 <__adddf3+0xb2>
    32fa:	lsl.w	ip, r2, lr
    32fe:	lsr.w	r2, r2, r5
    3302:	adds	r0, r0, r2
    3304:	adc.w	r1, r1, #0
    3308:	lsl.w	r2, r3, lr
    330c:	adds	r0, r0, r2
    330e:	asr.w	r3, r3, r5
    3312:	adcs	r1, r3
    3314:	b.n	3334 <__adddf3+0xd0>
    3316:	sub.w	r5, r5, #32
    331a:	add.w	lr, lr, #32
    331e:	cmp	r2, #1
    3320:	lsl.w	ip, r3, lr
    3324:	it	cs
    3326:	orrcs.w	ip, ip, #2
    332a:	asr.w	r3, r3, r5
    332e:	adds	r0, r0, r3
    3330:	adcs.w	r1, r1, r3, asr #31
    3334:	and.w	r5, r1, #2147483648	; 0x80000000
    3338:	bpl.n	334a <__adddf3+0xe6>
    333a:	mov.w	lr, #0
    333e:	rsbs	ip, ip, #0
    3342:	sbcs.w	r0, lr, r0
    3346:	sbc.w	r1, lr, r1
    334a:	cmp.w	r1, #1048576	; 0x100000
    334e:	bcc.n	3388 <__adddf3+0x124>
    3350:	cmp.w	r1, #2097152	; 0x200000
    3354:	bcc.n	3370 <__adddf3+0x10c>
    3356:	lsrs	r1, r1, #1
    3358:	movs.w	r0, r0, rrx
    335c:	mov.w	ip, ip, rrx
    3360:	add.w	r4, r4, #1
    3364:	mov.w	r2, r4, lsl #21
    3368:	cmn.w	r2, #4194304	; 0x400000
    336c:	bcs.w	34a4 <__adddf3+0x240>
    3370:	cmp.w	ip, #2147483648	; 0x80000000
    3374:	it	eq
    3376:	movseq.w	ip, r0, lsr #1
    337a:	adcs.w	r0, r0, #0
    337e:	adc.w	r1, r1, r4, lsl #20
    3382:	orr.w	r1, r1, r5
    3386:	pop	{r4, r5, pc}
    3388:	movs.w	ip, ip, lsl #1
    338c:	adcs	r0, r0
    338e:	adc.w	r1, r1, r1
    3392:	tst.w	r1, #1048576	; 0x100000
    3396:	sub.w	r4, r4, #1
    339a:	bne.n	3370 <__adddf3+0x10c>
    339c:	teq	r1, #0
    33a0:	itt	eq
    33a2:	moveq	r1, r0
    33a4:	moveq	r0, #0
    33a6:	clz	r3, r1
    33aa:	it	eq
    33ac:	addeq	r3, #32
    33ae:	sub.w	r3, r3, #11
    33b2:	subs.w	r2, r3, #32
    33b6:	bge.n	33d2 <__adddf3+0x16e>
    33b8:	adds	r2, #12
    33ba:	ble.n	33ce <__adddf3+0x16a>
    33bc:	add.w	ip, r2, #20
    33c0:	rsb	r2, r2, #12
    33c4:	lsl.w	r0, r1, ip
    33c8:	lsr.w	r1, r1, r2
    33cc:	b.n	33e8 <__adddf3+0x184>
    33ce:	add.w	r2, r2, #20
    33d2:	it	le
    33d4:	rsble	ip, r2, #32
    33d8:	lsl.w	r1, r1, r2
    33dc:	lsr.w	ip, r0, ip
    33e0:	itt	le
    33e2:	orrle.w	r1, r1, ip
    33e6:	lslle	r0, r2
    33e8:	subs	r4, r4, r3
    33ea:	ittt	ge
    33ec:	addge.w	r1, r1, r4, lsl #20
    33f0:	orrge	r1, r5
    33f2:	popge	{r4, r5, pc}
    33f4:	mvn.w	r4, r4
    33f8:	subs	r4, #31
    33fa:	bge.n	3436 <__adddf3+0x1d2>
    33fc:	adds	r4, #12
    33fe:	bgt.n	341e <__adddf3+0x1ba>
    3400:	add.w	r4, r4, #20
    3404:	rsb	r2, r4, #32
    3408:	lsr.w	r0, r0, r4
    340c:	lsl.w	r3, r1, r2
    3410:	orr.w	r0, r0, r3
    3414:	lsr.w	r3, r1, r4
    3418:	orr.w	r1, r5, r3
    341c:	pop	{r4, r5, pc}
    341e:	rsb	r4, r4, #12
    3422:	rsb	r2, r4, #32
    3426:	lsr.w	r0, r0, r2
    342a:	lsl.w	r3, r1, r4
    342e:	orr.w	r0, r0, r3
    3432:	mov	r1, r5
    3434:	pop	{r4, r5, pc}
    3436:	lsr.w	r0, r1, r4
    343a:	mov	r1, r5
    343c:	pop	{r4, r5, pc}
    343e:	teq	r4, #0
    3442:	eor.w	r3, r3, #1048576	; 0x100000
    3446:	itte	eq
    3448:	eoreq.w	r1, r1, #1048576	; 0x100000
    344c:	addeq	r4, #1
    344e:	subne	r5, #1
    3450:	b.n	32f0 <__adddf3+0x8c>
    3452:	mvns.w	ip, r4, asr #21
    3456:	it	ne
    3458:	mvnsne.w	ip, r5, asr #21
    345c:	beq.n	34b2 <__adddf3+0x24e>
    345e:	teq	r4, r5
    3462:	it	eq
    3464:	teqeq	r0, r2
    3468:	beq.n	3476 <__adddf3+0x212>
    346a:	orrs.w	ip, r4, r0
    346e:	itt	eq
    3470:	moveq	r1, r3
    3472:	moveq	r0, r2
    3474:	pop	{r4, r5, pc}
    3476:	teq	r1, r3
    347a:	ittt	ne
    347c:	movne	r1, #0
    347e:	movne	r0, #0
    3480:	popne	{r4, r5, pc}
    3482:	movs.w	ip, r4, lsr #21
    3486:	bne.n	3494 <__adddf3+0x230>
    3488:	lsls	r0, r0, #1
    348a:	adcs	r1, r1
    348c:	it	cs
    348e:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3492:	pop	{r4, r5, pc}
    3494:	adds.w	r4, r4, #4194304	; 0x400000
    3498:	itt	cc
    349a:	addcc.w	r1, r1, #1048576	; 0x100000
    349e:	popcc	{r4, r5, pc}
    34a0:	and.w	r5, r1, #2147483648	; 0x80000000
    34a4:	orr.w	r1, r5, #2130706432	; 0x7f000000
    34a8:	orr.w	r1, r1, #15728640	; 0xf00000
    34ac:	mov.w	r0, #0
    34b0:	pop	{r4, r5, pc}
    34b2:	mvns.w	ip, r4, asr #21
    34b6:	itte	ne
    34b8:	movne	r1, r3
    34ba:	movne	r0, r2
    34bc:	mvnseq.w	ip, r5, asr #21
    34c0:	itt	ne
    34c2:	movne	r3, r1
    34c4:	movne	r2, r0
    34c6:	orrs.w	r4, r0, r1, lsl #12
    34ca:	itte	eq
    34cc:	orrseq.w	r5, r2, r3, lsl #12
    34d0:	teqeq	r1, r3
    34d4:	orrne.w	r1, r1, #524288	; 0x80000
    34d8:	pop	{r4, r5, pc}
    34da:	nop

000034dc <__aeabi_ui2d>:
    34dc:	teq	r0, #0
    34e0:	itt	eq
    34e2:	moveq	r1, #0
    34e4:	bxeq	lr
    34e6:	push	{r4, r5, lr}
    34e8:	mov.w	r4, #1024	; 0x400
    34ec:	add.w	r4, r4, #50	; 0x32
    34f0:	mov.w	r5, #0
    34f4:	mov.w	r1, #0
    34f8:	b.n	339c <__adddf3+0x138>
    34fa:	nop

000034fc <__aeabi_i2d>:
    34fc:	teq	r0, #0
    3500:	itt	eq
    3502:	moveq	r1, #0
    3504:	bxeq	lr
    3506:	push	{r4, r5, lr}
    3508:	mov.w	r4, #1024	; 0x400
    350c:	add.w	r4, r4, #50	; 0x32
    3510:	ands.w	r5, r0, #2147483648	; 0x80000000
    3514:	it	mi
    3516:	negmi	r0, r0
    3518:	mov.w	r1, #0
    351c:	b.n	339c <__adddf3+0x138>
    351e:	nop

00003520 <__aeabi_f2d>:
    3520:	lsls	r2, r0, #1
    3522:	mov.w	r1, r2, asr #3
    3526:	mov.w	r1, r1, rrx
    352a:	mov.w	r0, r2, lsl #28
    352e:	itttt	ne
    3530:	andsne.w	r3, r2, #4278190080	; 0xff000000
    3534:	teqne	r3, #4278190080	; 0xff000000
    3538:	eorne.w	r1, r1, #939524096	; 0x38000000
    353c:	bxne	lr
    353e:	teq	r2, #0
    3542:	ite	ne
    3544:	teqne	r3, #4278190080	; 0xff000000
    3548:	bxeq	lr
    354a:	push	{r4, r5, lr}
    354c:	mov.w	r4, #896	; 0x380
    3550:	and.w	r5, r1, #2147483648	; 0x80000000
    3554:	bic.w	r1, r1, #2147483648	; 0x80000000
    3558:	b.n	339c <__adddf3+0x138>
    355a:	nop

0000355c <__aeabi_ul2d>:
    355c:	orrs.w	r2, r0, r1
    3560:	it	eq
    3562:	bxeq	lr
    3564:	push	{r4, r5, lr}
    3566:	mov.w	r5, #0
    356a:	b.n	3582 <__aeabi_l2d+0x16>

0000356c <__aeabi_l2d>:
    356c:	orrs.w	r2, r0, r1
    3570:	it	eq
    3572:	bxeq	lr
    3574:	push	{r4, r5, lr}
    3576:	ands.w	r5, r1, #2147483648	; 0x80000000
    357a:	bpl.n	3582 <__aeabi_l2d+0x16>
    357c:	negs	r0, r0
    357e:	sbc.w	r1, r1, r1, lsl #1
    3582:	mov.w	r4, #1024	; 0x400
    3586:	add.w	r4, r4, #50	; 0x32
    358a:	movs.w	ip, r1, lsr #22
    358e:	beq.w	334a <__adddf3+0xe6>
    3592:	mov.w	r2, #3
    3596:	movs.w	ip, ip, lsr #3
    359a:	it	ne
    359c:	addne	r2, #3
    359e:	movs.w	ip, ip, lsr #3
    35a2:	it	ne
    35a4:	addne	r2, #3
    35a6:	add.w	r2, r2, ip, lsr #3
    35aa:	rsb	r3, r2, #32
    35ae:	lsl.w	ip, r0, r3
    35b2:	lsr.w	r0, r0, r2
    35b6:	lsl.w	lr, r1, r3
    35ba:	orr.w	r0, r0, lr
    35be:	lsr.w	r1, r1, r2
    35c2:	add	r4, r2
    35c4:	b.n	334a <__adddf3+0xe6>
    35c6:	nop

000035c8 <__aeabi_dmul>:
    35c8:	push	{r4, r5, r6, lr}
    35ca:	mov.w	ip, #255	; 0xff
    35ce:	orr.w	ip, ip, #1792	; 0x700
    35d2:	ands.w	r4, ip, r1, lsr #20
    35d6:	ittte	ne
    35d8:	andsne.w	r5, ip, r3, lsr #20
    35dc:	teqne	r4, ip
    35e0:	teqne	r5, ip
    35e4:	bleq	37a4 <__aeabi_dmul+0x1dc>
    35e8:	add	r4, r5
    35ea:	eor.w	r6, r1, r3
    35ee:	bic.w	r1, r1, ip, lsl #21
    35f2:	bic.w	r3, r3, ip, lsl #21
    35f6:	orrs.w	r5, r0, r1, lsl #12
    35fa:	it	ne
    35fc:	orrsne.w	r5, r2, r3, lsl #12
    3600:	orr.w	r1, r1, #1048576	; 0x100000
    3604:	orr.w	r3, r3, #1048576	; 0x100000
    3608:	beq.n	367c <__aeabi_dmul+0xb4>
    360a:	umull	ip, lr, r0, r2
    360e:	mov.w	r5, #0
    3612:	umlal	lr, r5, r1, r2
    3616:	and.w	r2, r6, #2147483648	; 0x80000000
    361a:	umlal	lr, r5, r0, r3
    361e:	mov.w	r6, #0
    3622:	umlal	r5, r6, r1, r3
    3626:	teq	ip, #0
    362a:	it	ne
    362c:	orrne.w	lr, lr, #1
    3630:	sub.w	r4, r4, #255	; 0xff
    3634:	cmp.w	r6, #512	; 0x200
    3638:	sbc.w	r4, r4, #768	; 0x300
    363c:	bcs.n	3648 <__aeabi_dmul+0x80>
    363e:	movs.w	lr, lr, lsl #1
    3642:	adcs	r5, r5
    3644:	adc.w	r6, r6, r6
    3648:	orr.w	r1, r2, r6, lsl #11
    364c:	orr.w	r1, r1, r5, lsr #21
    3650:	mov.w	r0, r5, lsl #11
    3654:	orr.w	r0, r0, lr, lsr #21
    3658:	mov.w	lr, lr, lsl #11
    365c:	subs.w	ip, r4, #253	; 0xfd
    3660:	it	hi
    3662:	cmphi.w	ip, #1792	; 0x700
    3666:	bhi.n	36a6 <__aeabi_dmul+0xde>
    3668:	cmp.w	lr, #2147483648	; 0x80000000
    366c:	it	eq
    366e:	movseq.w	lr, r0, lsr #1
    3672:	adcs.w	r0, r0, #0
    3676:	adc.w	r1, r1, r4, lsl #20
    367a:	pop	{r4, r5, r6, pc}
    367c:	and.w	r6, r6, #2147483648	; 0x80000000
    3680:	orr.w	r1, r6, r1
    3684:	orr.w	r0, r0, r2
    3688:	eor.w	r1, r1, r3
    368c:	subs.w	r4, r4, ip, lsr #1
    3690:	ittt	gt
    3692:	rsbsgt	r5, r4, ip
    3696:	orrgt.w	r1, r1, r4, lsl #20
    369a:	popgt	{r4, r5, r6, pc}
    369c:	orr.w	r1, r1, #1048576	; 0x100000
    36a0:	mov.w	lr, #0
    36a4:	subs	r4, #1
    36a6:	bgt.w	3800 <__aeabi_dmul+0x238>
    36aa:	cmn.w	r4, #54	; 0x36
    36ae:	ittt	le
    36b0:	movle	r0, #0
    36b2:	andle.w	r1, r1, #2147483648	; 0x80000000
    36b6:	pople	{r4, r5, r6, pc}
    36b8:	rsb	r4, r4, #0
    36bc:	subs	r4, #32
    36be:	bge.n	372c <__aeabi_dmul+0x164>
    36c0:	adds	r4, #12
    36c2:	bgt.n	36fc <__aeabi_dmul+0x134>
    36c4:	add.w	r4, r4, #20
    36c8:	rsb	r5, r4, #32
    36cc:	lsl.w	r3, r0, r5
    36d0:	lsr.w	r0, r0, r4
    36d4:	lsl.w	r2, r1, r5
    36d8:	orr.w	r0, r0, r2
    36dc:	and.w	r2, r1, #2147483648	; 0x80000000
    36e0:	bic.w	r1, r1, #2147483648	; 0x80000000
    36e4:	adds.w	r0, r0, r3, lsr #31
    36e8:	lsr.w	r6, r1, r4
    36ec:	adc.w	r1, r2, r6
    36f0:	orrs.w	lr, lr, r3, lsl #1
    36f4:	it	eq
    36f6:	biceq.w	r0, r0, r3, lsr #31
    36fa:	pop	{r4, r5, r6, pc}
    36fc:	rsb	r4, r4, #12
    3700:	rsb	r5, r4, #32
    3704:	lsl.w	r3, r0, r4
    3708:	lsr.w	r0, r0, r5
    370c:	lsl.w	r2, r1, r4
    3710:	orr.w	r0, r0, r2
    3714:	and.w	r1, r1, #2147483648	; 0x80000000
    3718:	adds.w	r0, r0, r3, lsr #31
    371c:	adc.w	r1, r1, #0
    3720:	orrs.w	lr, lr, r3, lsl #1
    3724:	it	eq
    3726:	biceq.w	r0, r0, r3, lsr #31
    372a:	pop	{r4, r5, r6, pc}
    372c:	rsb	r5, r4, #32
    3730:	lsl.w	r2, r0, r5
    3734:	orr.w	lr, lr, r2
    3738:	lsr.w	r3, r0, r4
    373c:	lsl.w	r2, r1, r5
    3740:	orr.w	r3, r3, r2
    3744:	lsr.w	r0, r1, r4
    3748:	and.w	r1, r1, #2147483648	; 0x80000000
    374c:	lsr.w	r2, r1, r4
    3750:	bic.w	r0, r0, r2
    3754:	add.w	r0, r0, r3, lsr #31
    3758:	orrs.w	lr, lr, r3, lsl #1
    375c:	it	eq
    375e:	biceq.w	r0, r0, r3, lsr #31
    3762:	pop	{r4, r5, r6, pc}
    3764:	teq	r4, #0
    3768:	bne.n	378a <__aeabi_dmul+0x1c2>
    376a:	and.w	r6, r1, #2147483648	; 0x80000000
    376e:	lsls	r0, r0, #1
    3770:	adc.w	r1, r1, r1
    3774:	tst.w	r1, #1048576	; 0x100000
    3778:	it	eq
    377a:	subeq	r4, #1
    377c:	beq.n	376e <__aeabi_dmul+0x1a6>
    377e:	orr.w	r1, r1, r6
    3782:	teq	r5, #0
    3786:	it	ne
    3788:	bxne	lr
    378a:	and.w	r6, r3, #2147483648	; 0x80000000
    378e:	lsls	r2, r2, #1
    3790:	adc.w	r3, r3, r3
    3794:	tst.w	r3, #1048576	; 0x100000
    3798:	it	eq
    379a:	subeq	r5, #1
    379c:	beq.n	378e <__aeabi_dmul+0x1c6>
    379e:	orr.w	r3, r3, r6
    37a2:	bx	lr
    37a4:	teq	r4, ip
    37a8:	and.w	r5, ip, r3, lsr #20
    37ac:	it	ne
    37ae:	teqne	r5, ip
    37b2:	beq.n	37ce <__aeabi_dmul+0x206>
    37b4:	orrs.w	r6, r0, r1, lsl #1
    37b8:	it	ne
    37ba:	orrsne.w	r6, r2, r3, lsl #1
    37be:	bne.n	3764 <__aeabi_dmul+0x19c>
    37c0:	eor.w	r1, r1, r3
    37c4:	and.w	r1, r1, #2147483648	; 0x80000000
    37c8:	mov.w	r0, #0
    37cc:	pop	{r4, r5, r6, pc}
    37ce:	orrs.w	r6, r0, r1, lsl #1
    37d2:	itte	eq
    37d4:	moveq	r0, r2
    37d6:	moveq	r1, r3
    37d8:	orrsne.w	r6, r2, r3, lsl #1
    37dc:	beq.n	3812 <__aeabi_dmul+0x24a>
    37de:	teq	r4, ip
    37e2:	bne.n	37ea <__aeabi_dmul+0x222>
    37e4:	orrs.w	r6, r0, r1, lsl #12
    37e8:	bne.n	3812 <__aeabi_dmul+0x24a>
    37ea:	teq	r5, ip
    37ee:	bne.n	37fc <__aeabi_dmul+0x234>
    37f0:	orrs.w	r6, r2, r3, lsl #12
    37f4:	itt	ne
    37f6:	movne	r0, r2
    37f8:	movne	r1, r3
    37fa:	bne.n	3812 <__aeabi_dmul+0x24a>
    37fc:	eor.w	r1, r1, r3
    3800:	and.w	r1, r1, #2147483648	; 0x80000000
    3804:	orr.w	r1, r1, #2130706432	; 0x7f000000
    3808:	orr.w	r1, r1, #15728640	; 0xf00000
    380c:	mov.w	r0, #0
    3810:	pop	{r4, r5, r6, pc}
    3812:	orr.w	r1, r1, #2130706432	; 0x7f000000
    3816:	orr.w	r1, r1, #16252928	; 0xf80000
    381a:	pop	{r4, r5, r6, pc}

0000381c <__aeabi_ddiv>:
    381c:	push	{r4, r5, r6, lr}
    381e:	mov.w	ip, #255	; 0xff
    3822:	orr.w	ip, ip, #1792	; 0x700
    3826:	ands.w	r4, ip, r1, lsr #20
    382a:	ittte	ne
    382c:	andsne.w	r5, ip, r3, lsr #20
    3830:	teqne	r4, ip
    3834:	teqne	r5, ip
    3838:	bleq	398a <__aeabi_ddiv+0x16e>
    383c:	sub.w	r4, r4, r5
    3840:	eor.w	lr, r1, r3
    3844:	orrs.w	r5, r2, r3, lsl #12
    3848:	mov.w	r1, r1, lsl #12
    384c:	beq.w	3960 <__aeabi_ddiv+0x144>
    3850:	mov.w	r3, r3, lsl #12
    3854:	mov.w	r5, #268435456	; 0x10000000
    3858:	orr.w	r3, r5, r3, lsr #4
    385c:	orr.w	r3, r3, r2, lsr #24
    3860:	mov.w	r2, r2, lsl #8
    3864:	orr.w	r5, r5, r1, lsr #4
    3868:	orr.w	r5, r5, r0, lsr #24
    386c:	mov.w	r6, r0, lsl #8
    3870:	and.w	r1, lr, #2147483648	; 0x80000000
    3874:	cmp	r5, r3
    3876:	it	eq
    3878:	cmpeq	r6, r2
    387a:	adc.w	r4, r4, #253	; 0xfd
    387e:	add.w	r4, r4, #768	; 0x300
    3882:	bcs.n	388a <__aeabi_ddiv+0x6e>
    3884:	lsrs	r3, r3, #1
    3886:	mov.w	r2, r2, rrx
    388a:	subs	r6, r6, r2
    388c:	sbc.w	r5, r5, r3
    3890:	lsrs	r3, r3, #1
    3892:	mov.w	r2, r2, rrx
    3896:	mov.w	r0, #1048576	; 0x100000
    389a:	mov.w	ip, #524288	; 0x80000
    389e:	subs.w	lr, r6, r2
    38a2:	sbcs.w	lr, r5, r3
    38a6:	ittt	cs
    38a8:	subcs	r6, r6, r2
    38aa:	movcs	r5, lr
    38ac:	orrcs.w	r0, r0, ip
    38b0:	lsrs	r3, r3, #1
    38b2:	mov.w	r2, r2, rrx
    38b6:	subs.w	lr, r6, r2
    38ba:	sbcs.w	lr, r5, r3
    38be:	ittt	cs
    38c0:	subcs	r6, r6, r2
    38c2:	movcs	r5, lr
    38c4:	orrcs.w	r0, r0, ip, lsr #1
    38c8:	lsrs	r3, r3, #1
    38ca:	mov.w	r2, r2, rrx
    38ce:	subs.w	lr, r6, r2
    38d2:	sbcs.w	lr, r5, r3
    38d6:	ittt	cs
    38d8:	subcs	r6, r6, r2
    38da:	movcs	r5, lr
    38dc:	orrcs.w	r0, r0, ip, lsr #2
    38e0:	lsrs	r3, r3, #1
    38e2:	mov.w	r2, r2, rrx
    38e6:	subs.w	lr, r6, r2
    38ea:	sbcs.w	lr, r5, r3
    38ee:	ittt	cs
    38f0:	subcs	r6, r6, r2
    38f2:	movcs	r5, lr
    38f4:	orrcs.w	r0, r0, ip, lsr #3
    38f8:	orrs.w	lr, r5, r6
    38fc:	beq.n	3930 <__aeabi_ddiv+0x114>
    38fe:	mov.w	r5, r5, lsl #4
    3902:	orr.w	r5, r5, r6, lsr #28
    3906:	mov.w	r6, r6, lsl #4
    390a:	mov.w	r3, r3, lsl #3
    390e:	orr.w	r3, r3, r2, lsr #29
    3912:	mov.w	r2, r2, lsl #3
    3916:	movs.w	ip, ip, lsr #4
    391a:	bne.n	389e <__aeabi_ddiv+0x82>
    391c:	tst.w	r1, #1048576	; 0x100000
    3920:	bne.n	393a <__aeabi_ddiv+0x11e>
    3922:	orr.w	r1, r1, r0
    3926:	mov.w	r0, #0
    392a:	mov.w	ip, #2147483648	; 0x80000000
    392e:	b.n	389e <__aeabi_ddiv+0x82>
    3930:	tst.w	r1, #1048576	; 0x100000
    3934:	itt	eq
    3936:	orreq	r1, r0
    3938:	moveq	r0, #0
    393a:	subs.w	ip, r4, #253	; 0xfd
    393e:	it	hi
    3940:	cmphi.w	ip, #1792	; 0x700
    3944:	bhi.w	36a6 <__aeabi_dmul+0xde>
    3948:	subs.w	ip, r5, r3
    394c:	itt	eq
    394e:	subseq.w	ip, r6, r2
    3952:	movseq.w	ip, r0, lsr #1
    3956:	adcs.w	r0, r0, #0
    395a:	adc.w	r1, r1, r4, lsl #20
    395e:	pop	{r4, r5, r6, pc}
    3960:	and.w	lr, lr, #2147483648	; 0x80000000
    3964:	orr.w	r1, lr, r1, lsr #12
    3968:	adds.w	r4, r4, ip, lsr #1
    396c:	ittt	gt
    396e:	rsbsgt	r5, r4, ip
    3972:	orrgt.w	r1, r1, r4, lsl #20
    3976:	popgt	{r4, r5, r6, pc}
    3978:	orr.w	r1, r1, #1048576	; 0x100000
    397c:	mov.w	lr, #0
    3980:	subs	r4, #1
    3982:	b.n	36a6 <__aeabi_dmul+0xde>
    3984:	orr.w	lr, r5, r6
    3988:	b.n	36a6 <__aeabi_dmul+0xde>
    398a:	and.w	r5, ip, r3, lsr #20
    398e:	teq	r4, ip
    3992:	it	eq
    3994:	teqeq	r5, ip
    3998:	beq.w	3812 <__aeabi_dmul+0x24a>
    399c:	teq	r4, ip
    39a0:	bne.n	39b8 <__aeabi_ddiv+0x19c>
    39a2:	orrs.w	r4, r0, r1, lsl #12
    39a6:	bne.w	3812 <__aeabi_dmul+0x24a>
    39aa:	teq	r5, ip
    39ae:	bne.w	37fc <__aeabi_dmul+0x234>
    39b2:	mov	r0, r2
    39b4:	mov	r1, r3
    39b6:	b.n	3812 <__aeabi_dmul+0x24a>
    39b8:	teq	r5, ip
    39bc:	bne.n	39cc <__aeabi_ddiv+0x1b0>
    39be:	orrs.w	r5, r2, r3, lsl #12
    39c2:	beq.w	37c0 <__aeabi_dmul+0x1f8>
    39c6:	mov	r0, r2
    39c8:	mov	r1, r3
    39ca:	b.n	3812 <__aeabi_dmul+0x24a>
    39cc:	orrs.w	r6, r0, r1, lsl #1
    39d0:	it	ne
    39d2:	orrsne.w	r6, r2, r3, lsl #1
    39d6:	bne.w	3764 <__aeabi_dmul+0x19c>
    39da:	orrs.w	r4, r0, r1, lsl #1
    39de:	bne.w	37fc <__aeabi_dmul+0x234>
    39e2:	orrs.w	r5, r2, r3, lsl #1
    39e6:	bne.w	37c0 <__aeabi_dmul+0x1f8>
    39ea:	b.n	3812 <__aeabi_dmul+0x24a>

000039ec <__gedf2>:
    39ec:	mov.w	ip, #4294967295
    39f0:	b.n	3a00 <__cmpdf2+0x4>
    39f2:	nop

000039f4 <__ledf2>:
    39f4:	mov.w	ip, #1
    39f8:	b.n	3a00 <__cmpdf2+0x4>
    39fa:	nop

000039fc <__cmpdf2>:
    39fc:	mov.w	ip, #1
    3a00:	str.w	ip, [sp, #-4]!
    3a04:	mov.w	ip, r1, lsl #1
    3a08:	mvns.w	ip, ip, asr #21
    3a0c:	mov.w	ip, r3, lsl #1
    3a10:	it	ne
    3a12:	mvnsne.w	ip, ip, asr #21
    3a16:	beq.n	3a50 <__cmpdf2+0x54>
    3a18:	add	sp, #4
    3a1a:	orrs.w	ip, r0, r1, lsl #1
    3a1e:	ite	eq
    3a20:	orrseq.w	ip, r2, r3, lsl #1
    3a24:	teqne	r1, r3
    3a28:	ittt	eq
    3a2a:	teqeq	r0, r2
    3a2e:	moveq	r0, #0
    3a30:	bxeq	lr
    3a32:	cmn.w	r0, #0
    3a36:	teq	r1, r3
    3a3a:	it	pl
    3a3c:	cmppl	r1, r3
    3a3e:	it	eq
    3a40:	cmpeq	r0, r2
    3a42:	ite	cs
    3a44:	asrcs	r0, r3, #31
    3a46:	mvncc.w	r0, r3, asr #31
    3a4a:	orr.w	r0, r0, #1
    3a4e:	bx	lr
    3a50:	mov.w	ip, r1, lsl #1
    3a54:	mvns.w	ip, ip, asr #21
    3a58:	bne.n	3a60 <__cmpdf2+0x64>
    3a5a:	orrs.w	ip, r0, r1, lsl #12
    3a5e:	bne.n	3a70 <__cmpdf2+0x74>
    3a60:	mov.w	ip, r3, lsl #1
    3a64:	mvns.w	ip, ip, asr #21
    3a68:	bne.n	3a18 <__cmpdf2+0x1c>
    3a6a:	orrs.w	ip, r2, r3, lsl #12
    3a6e:	beq.n	3a18 <__cmpdf2+0x1c>
    3a70:	ldr.w	r0, [sp], #4
    3a74:	bx	lr
    3a76:	nop

00003a78 <__aeabi_cdrcmple>:
    3a78:	mov	ip, r0
    3a7a:	mov	r0, r2
    3a7c:	mov	r2, ip
    3a7e:	mov	ip, r1
    3a80:	mov	r1, r3
    3a82:	mov	r3, ip
    3a84:	b.n	3a88 <__aeabi_cdcmpeq>
    3a86:	nop

00003a88 <__aeabi_cdcmpeq>:
    3a88:	push	{r0, lr}
    3a8a:	bl	39fc <__cmpdf2>
    3a8e:	cmp	r0, #0
    3a90:	it	mi
    3a92:	cmnmi.w	r0, #0
    3a96:	pop	{r0, pc}

00003a98 <__aeabi_dcmpeq>:
    3a98:	str.w	lr, [sp, #-8]!
    3a9c:	bl	3a88 <__aeabi_cdcmpeq>
    3aa0:	ite	eq
    3aa2:	moveq	r0, #1
    3aa4:	movne	r0, #0
    3aa6:	ldr.w	pc, [sp], #8
    3aaa:	nop

00003aac <__aeabi_dcmplt>:
    3aac:	str.w	lr, [sp, #-8]!
    3ab0:	bl	3a88 <__aeabi_cdcmpeq>
    3ab4:	ite	cc
    3ab6:	movcc	r0, #1
    3ab8:	movcs	r0, #0
    3aba:	ldr.w	pc, [sp], #8
    3abe:	nop

00003ac0 <__aeabi_dcmple>:
    3ac0:	str.w	lr, [sp, #-8]!
    3ac4:	bl	3a88 <__aeabi_cdcmpeq>
    3ac8:	ite	ls
    3aca:	movls	r0, #1
    3acc:	movhi	r0, #0
    3ace:	ldr.w	pc, [sp], #8
    3ad2:	nop

00003ad4 <__aeabi_dcmpge>:
    3ad4:	str.w	lr, [sp, #-8]!
    3ad8:	bl	3a78 <__aeabi_cdrcmple>
    3adc:	ite	ls
    3ade:	movls	r0, #1
    3ae0:	movhi	r0, #0
    3ae2:	ldr.w	pc, [sp], #8
    3ae6:	nop

00003ae8 <__aeabi_dcmpgt>:
    3ae8:	str.w	lr, [sp, #-8]!
    3aec:	bl	3a78 <__aeabi_cdrcmple>
    3af0:	ite	cc
    3af2:	movcc	r0, #1
    3af4:	movcs	r0, #0
    3af6:	ldr.w	pc, [sp], #8
    3afa:	nop

00003afc <__aeabi_dcmpun>:
    3afc:	mov.w	ip, r1, lsl #1
    3b00:	mvns.w	ip, ip, asr #21
    3b04:	bne.n	3b0c <__aeabi_dcmpun+0x10>
    3b06:	orrs.w	ip, r0, r1, lsl #12
    3b0a:	bne.n	3b22 <__aeabi_dcmpun+0x26>
    3b0c:	mov.w	ip, r3, lsl #1
    3b10:	mvns.w	ip, ip, asr #21
    3b14:	bne.n	3b1c <__aeabi_dcmpun+0x20>
    3b16:	orrs.w	ip, r2, r3, lsl #12
    3b1a:	bne.n	3b22 <__aeabi_dcmpun+0x26>
    3b1c:	mov.w	r0, #0
    3b20:	bx	lr
    3b22:	mov.w	r0, #1
    3b26:	bx	lr

00003b28 <__aeabi_atexit>:
    3b28:	mov	r3, r1
    3b2a:	mov	r1, r0
    3b2c:	mov	r0, r3
    3b2e:	b.w	3b34 <__cxa_atexit>
    3b32:	nop

00003b34 <__cxa_atexit>:
    3b34:	mov	r3, r2
    3b36:	mov	r2, r1
    3b38:	mov	r1, r0
    3b3a:	movs	r0, #2
    3b3c:	b.w	4848 <__register_exitproc>

00003b40 <__errno>:
    3b40:	ldr	r3, [pc, #4]	; (3b48 <__errno+0x8>)
    3b42:	ldr	r0, [r3, #0]
    3b44:	bx	lr
    3b46:	nop
    3b48:	.word	0x1fff0c88

00003b4c <__libc_init_array>:
    3b4c:	push	{r4, r5, r6, lr}
    3b4e:	ldr	r6, [pc, #60]	; (3b8c <__libc_init_array+0x40>)
    3b50:	ldr	r5, [pc, #60]	; (3b90 <__libc_init_array+0x44>)
    3b52:	subs	r6, r6, r5
    3b54:	asrs	r6, r6, #2
    3b56:	it	ne
    3b58:	movne	r4, #0
    3b5a:	beq.n	3b68 <__libc_init_array+0x1c>
    3b5c:	adds	r4, #1
    3b5e:	ldr.w	r3, [r5], #4
    3b62:	blx	r3
    3b64:	cmp	r6, r4
    3b66:	bne.n	3b5c <__libc_init_array+0x10>
    3b68:	ldr	r6, [pc, #40]	; (3b94 <__libc_init_array+0x48>)
    3b6a:	ldr	r5, [pc, #44]	; (3b98 <__libc_init_array+0x4c>)
    3b6c:	subs	r6, r6, r5
    3b6e:	bl	8398 <_init>
    3b72:	asrs	r6, r6, #2
    3b74:	it	ne
    3b76:	movne	r4, #0
    3b78:	beq.n	3b88 <__libc_init_array+0x3c>
    3b7a:	adds	r4, #1
    3b7c:	ldr.w	r3, [r5], #4
    3b80:	blx	r3
    3b82:	cmp	r6, r4
    3b84:	bne.n	3b7a <__libc_init_array+0x2e>
    3b86:	pop	{r4, r5, r6, pc}
    3b88:	pop	{r4, r5, r6, pc}
    3b8a:	nop
    3b8c:	.word	0x000083a4
    3b90:	.word	0x000083a4
    3b94:	.word	0x000083b0
    3b98:	.word	0x000083a4

00003b9c <malloc>:
    3b9c:	ldr	r3, [pc, #8]	; (3ba8 <malloc+0xc>)
    3b9e:	mov	r1, r0
    3ba0:	ldr	r0, [r3, #0]
    3ba2:	b.w	3bac <_malloc_r>
    3ba6:	nop
    3ba8:	.word	0x1fff0c88

00003bac <_malloc_r>:
    3bac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bb0:	add.w	r5, r1, #11
    3bb4:	cmp	r5, #22
    3bb6:	sub	sp, #12
    3bb8:	mov	r6, r0
    3bba:	bls.w	3cfc <_malloc_r+0x150>
    3bbe:	bics.w	r5, r5, #7
    3bc2:	bmi.w	3d44 <_malloc_r+0x198>
    3bc6:	cmp	r1, r5
    3bc8:	bhi.w	3d44 <_malloc_r+0x198>
    3bcc:	bl	42ac <__malloc_lock>
    3bd0:	cmp.w	r5, #504	; 0x1f8
    3bd4:	bcc.w	4110 <_malloc_r+0x564>
    3bd8:	lsrs	r3, r5, #9
    3bda:	beq.w	3d52 <_malloc_r+0x1a6>
    3bde:	cmp	r3, #4
    3be0:	bhi.w	3eea <_malloc_r+0x33e>
    3be4:	lsrs	r0, r5, #6
    3be6:	add.w	lr, r0, #57	; 0x39
    3bea:	mov.w	r3, lr, lsl #1
    3bee:	adds	r0, #56	; 0x38
    3bf0:	ldr	r7, [pc, #784]	; (3f04 <_malloc_r+0x358>)
    3bf2:	add.w	r3, r7, r3, lsl #2
    3bf6:	sub.w	r1, r3, #8
    3bfa:	ldr	r4, [r3, #4]
    3bfc:	cmp	r1, r4
    3bfe:	bne.n	3c10 <_malloc_r+0x64>
    3c00:	b.n	3d5c <_malloc_r+0x1b0>
    3c02:	cmp	r2, #0
    3c04:	bge.w	3d60 <_malloc_r+0x1b4>
    3c08:	ldr	r4, [r4, #12]
    3c0a:	cmp	r1, r4
    3c0c:	beq.w	3d5c <_malloc_r+0x1b0>
    3c10:	ldr	r3, [r4, #4]
    3c12:	bic.w	r3, r3, #3
    3c16:	subs	r2, r3, r5
    3c18:	cmp	r2, #15
    3c1a:	ble.n	3c02 <_malloc_r+0x56>
    3c1c:	ldr	r1, [pc, #740]	; (3f04 <_malloc_r+0x358>)
    3c1e:	ldr	r4, [r7, #16]
    3c20:	add.w	lr, r1, #8
    3c24:	cmp	r4, lr
    3c26:	beq.w	3f90 <_malloc_r+0x3e4>
    3c2a:	ldr	r3, [r4, #4]
    3c2c:	bic.w	r3, r3, #3
    3c30:	subs	r2, r3, r5
    3c32:	cmp	r2, #15
    3c34:	bgt.w	3f6a <_malloc_r+0x3be>
    3c38:	cmp	r2, #0
    3c3a:	str.w	lr, [r1, #20]
    3c3e:	str.w	lr, [r1, #16]
    3c42:	bge.w	3d82 <_malloc_r+0x1d6>
    3c46:	cmp.w	r3, #512	; 0x200
    3c4a:	bcs.w	3f1c <_malloc_r+0x370>
    3c4e:	lsrs	r3, r3, #3
    3c50:	add.w	ip, r3, #1
    3c54:	movs	r2, #1
    3c56:	asrs	r3, r3, #2
    3c58:	lsl.w	r3, r2, r3
    3c5c:	ldr	r2, [r1, #4]
    3c5e:	ldr.w	r8, [r1, ip, lsl #3]
    3c62:	str.w	r8, [r4, #8]
    3c66:	add.w	r9, r1, ip, lsl #3
    3c6a:	orrs	r2, r3
    3c6c:	sub.w	r3, r9, #8
    3c70:	str	r3, [r4, #12]
    3c72:	str	r2, [r1, #4]
    3c74:	str.w	r4, [r1, ip, lsl #3]
    3c78:	str.w	r4, [r8, #12]
    3c7c:	asrs	r3, r0, #2
    3c7e:	movs	r4, #1
    3c80:	lsls	r4, r3
    3c82:	cmp	r4, r2
    3c84:	bhi.w	3d9c <_malloc_r+0x1f0>
    3c88:	tst	r4, r2
    3c8a:	bne.n	3c9a <_malloc_r+0xee>
    3c8c:	bic.w	r0, r0, #3
    3c90:	lsls	r4, r4, #1
    3c92:	tst	r4, r2
    3c94:	add.w	r0, r0, #4
    3c98:	beq.n	3c90 <_malloc_r+0xe4>
    3c9a:	add.w	r9, r7, r0, lsl #3
    3c9e:	mov	ip, r9
    3ca0:	mov	r8, r0
    3ca2:	ldr.w	r1, [ip, #12]
    3ca6:	cmp	ip, r1
    3ca8:	bne.n	3cba <_malloc_r+0x10e>
    3caa:	b.n	3f94 <_malloc_r+0x3e8>
    3cac:	cmp	r2, #0
    3cae:	bge.w	3fb4 <_malloc_r+0x408>
    3cb2:	ldr	r1, [r1, #12]
    3cb4:	cmp	ip, r1
    3cb6:	beq.w	3f94 <_malloc_r+0x3e8>
    3cba:	ldr	r3, [r1, #4]
    3cbc:	bic.w	r3, r3, #3
    3cc0:	subs	r2, r3, r5
    3cc2:	cmp	r2, #15
    3cc4:	ble.n	3cac <_malloc_r+0x100>
    3cc6:	mov	r4, r1
    3cc8:	ldr.w	ip, [r1, #12]
    3ccc:	ldr.w	r8, [r4, #8]!
    3cd0:	adds	r3, r1, r5
    3cd2:	orr.w	r5, r5, #1
    3cd6:	str	r5, [r1, #4]
    3cd8:	orr.w	r1, r2, #1
    3cdc:	str.w	ip, [r8, #12]
    3ce0:	mov	r0, r6
    3ce2:	str.w	r8, [ip, #8]
    3ce6:	str	r3, [r7, #20]
    3ce8:	str	r3, [r7, #16]
    3cea:	str.w	lr, [r3, #12]
    3cee:	str.w	lr, [r3, #8]
    3cf2:	str	r1, [r3, #4]
    3cf4:	str	r2, [r3, r2]
    3cf6:	bl	42b0 <__malloc_unlock>
    3cfa:	b.n	3d3c <_malloc_r+0x190>
    3cfc:	cmp	r1, #16
    3cfe:	bhi.n	3d44 <_malloc_r+0x198>
    3d00:	bl	42ac <__malloc_lock>
    3d04:	movs	r5, #16
    3d06:	movs	r3, #6
    3d08:	movs	r0, #2
    3d0a:	ldr	r7, [pc, #504]	; (3f04 <_malloc_r+0x358>)
    3d0c:	add.w	r3, r7, r3, lsl #2
    3d10:	sub.w	r2, r3, #8
    3d14:	ldr	r4, [r3, #4]
    3d16:	cmp	r4, r2
    3d18:	beq.w	3fa6 <_malloc_r+0x3fa>
    3d1c:	ldr	r3, [r4, #4]
    3d1e:	ldr	r1, [r4, #12]
    3d20:	ldr	r5, [r4, #8]
    3d22:	bic.w	r3, r3, #3
    3d26:	add	r3, r4
    3d28:	mov	r0, r6
    3d2a:	ldr	r2, [r3, #4]
    3d2c:	str	r1, [r5, #12]
    3d2e:	orr.w	r2, r2, #1
    3d32:	str	r5, [r1, #8]
    3d34:	str	r2, [r3, #4]
    3d36:	bl	42b0 <__malloc_unlock>
    3d3a:	adds	r4, #8
    3d3c:	mov	r0, r4
    3d3e:	add	sp, #12
    3d40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d44:	movs	r4, #0
    3d46:	movs	r3, #12
    3d48:	mov	r0, r4
    3d4a:	str	r3, [r6, #0]
    3d4c:	add	sp, #12
    3d4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d52:	movs	r3, #128	; 0x80
    3d54:	mov.w	lr, #64	; 0x40
    3d58:	movs	r0, #63	; 0x3f
    3d5a:	b.n	3bf0 <_malloc_r+0x44>
    3d5c:	mov	r0, lr
    3d5e:	b.n	3c1c <_malloc_r+0x70>
    3d60:	add	r3, r4
    3d62:	ldr	r1, [r4, #12]
    3d64:	ldr	r2, [r3, #4]
    3d66:	ldr	r5, [r4, #8]
    3d68:	orr.w	r2, r2, #1
    3d6c:	str	r1, [r5, #12]
    3d6e:	mov	r0, r6
    3d70:	str	r5, [r1, #8]
    3d72:	str	r2, [r3, #4]
    3d74:	bl	42b0 <__malloc_unlock>
    3d78:	adds	r4, #8
    3d7a:	mov	r0, r4
    3d7c:	add	sp, #12
    3d7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d82:	add	r3, r4
    3d84:	mov	r0, r6
    3d86:	ldr	r2, [r3, #4]
    3d88:	orr.w	r2, r2, #1
    3d8c:	str	r2, [r3, #4]
    3d8e:	bl	42b0 <__malloc_unlock>
    3d92:	adds	r4, #8
    3d94:	mov	r0, r4
    3d96:	add	sp, #12
    3d98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d9c:	ldr	r4, [r7, #8]
    3d9e:	ldr	r3, [r4, #4]
    3da0:	bic.w	r8, r3, #3
    3da4:	cmp	r8, r5
    3da6:	bcc.n	3db2 <_malloc_r+0x206>
    3da8:	rsb	r3, r5, r8
    3dac:	cmp	r3, #15
    3dae:	bgt.w	3eca <_malloc_r+0x31e>
    3db2:	ldr	r3, [pc, #340]	; (3f08 <_malloc_r+0x35c>)
    3db4:	ldr.w	r9, [pc, #352]	; 3f18 <_malloc_r+0x36c>
    3db8:	ldr	r2, [r3, #0]
    3dba:	ldr.w	r3, [r9]
    3dbe:	adds	r3, #1
    3dc0:	add	r2, r5
    3dc2:	add.w	sl, r4, r8
    3dc6:	beq.w	408a <_malloc_r+0x4de>
    3dca:	add.w	r2, r2, #4096	; 0x1000
    3dce:	adds	r2, #15
    3dd0:	bic.w	r2, r2, #4080	; 0xff0
    3dd4:	bic.w	r2, r2, #15
    3dd8:	mov	r1, r2
    3dda:	mov	r0, r6
    3ddc:	str	r2, [sp, #4]
    3dde:	bl	4694 <_sbrk_r>
    3de2:	cmp.w	r0, #4294967295
    3de6:	mov	fp, r0
    3de8:	ldr	r2, [sp, #4]
    3dea:	beq.w	409e <_malloc_r+0x4f2>
    3dee:	cmp	sl, r0
    3df0:	bhi.w	3fec <_malloc_r+0x440>
    3df4:	ldr	r3, [pc, #276]	; (3f0c <_malloc_r+0x360>)
    3df6:	ldr	r1, [r3, #0]
    3df8:	cmp	sl, fp
    3dfa:	add	r1, r2
    3dfc:	str	r1, [r3, #0]
    3dfe:	beq.w	40a8 <_malloc_r+0x4fc>
    3e02:	ldr.w	r0, [r9]
    3e06:	ldr.w	lr, [pc, #272]	; 3f18 <_malloc_r+0x36c>
    3e0a:	adds	r0, #1
    3e0c:	ittet	ne
    3e0e:	rsbne	sl, sl, fp
    3e12:	addne	r1, sl
    3e14:	streq.w	fp, [lr]
    3e18:	strne	r1, [r3, #0]
    3e1a:	ands.w	r1, fp, #7
    3e1e:	beq.w	4050 <_malloc_r+0x4a4>
    3e22:	rsb	r0, r1, #8
    3e26:	rsb	r1, r1, #4096	; 0x1000
    3e2a:	add	fp, r0
    3e2c:	adds	r1, #8
    3e2e:	add	r2, fp
    3e30:	ubfx	r2, r2, #0, #12
    3e34:	rsb	r9, r2, r1
    3e38:	mov	r1, r9
    3e3a:	mov	r0, r6
    3e3c:	str	r3, [sp, #4]
    3e3e:	bl	4694 <_sbrk_r>
    3e42:	adds	r3, r0, #1
    3e44:	ldr	r3, [sp, #4]
    3e46:	beq.w	40c8 <_malloc_r+0x51c>
    3e4a:	rsb	r2, fp, r0
    3e4e:	add	r2, r9
    3e50:	orr.w	r2, r2, #1
    3e54:	ldr	r1, [r3, #0]
    3e56:	str.w	fp, [r7, #8]
    3e5a:	add	r1, r9
    3e5c:	cmp	r4, r7
    3e5e:	str.w	r2, [fp, #4]
    3e62:	str	r1, [r3, #0]
    3e64:	ldr.w	r9, [pc, #164]	; 3f0c <_malloc_r+0x360>
    3e68:	beq.n	3e98 <_malloc_r+0x2ec>
    3e6a:	cmp.w	r8, #15
    3e6e:	bls.w	406c <_malloc_r+0x4c0>
    3e72:	ldr	r2, [r4, #4]
    3e74:	sub.w	r3, r8, #12
    3e78:	bic.w	r3, r3, #7
    3e7c:	adds	r0, r4, r3
    3e7e:	and.w	r2, r2, #1
    3e82:	mov.w	lr, #5
    3e86:	orrs	r2, r3
    3e88:	cmp	r3, #15
    3e8a:	str	r2, [r4, #4]
    3e8c:	str.w	lr, [r0, #4]
    3e90:	str.w	lr, [r0, #8]
    3e94:	bhi.w	40d0 <_malloc_r+0x524>
    3e98:	ldr	r3, [pc, #116]	; (3f10 <_malloc_r+0x364>)
    3e9a:	ldr	r4, [r7, #8]
    3e9c:	ldr	r2, [r3, #0]
    3e9e:	cmp	r1, r2
    3ea0:	it	hi
    3ea2:	strhi	r1, [r3, #0]
    3ea4:	ldr	r3, [pc, #108]	; (3f14 <_malloc_r+0x368>)
    3ea6:	ldr	r2, [r3, #0]
    3ea8:	cmp	r1, r2
    3eaa:	ldr	r2, [r4, #4]
    3eac:	it	hi
    3eae:	strhi	r1, [r3, #0]
    3eb0:	bic.w	r2, r2, #3
    3eb4:	cmp	r5, r2
    3eb6:	sub.w	r3, r2, r5
    3eba:	bhi.n	3ec0 <_malloc_r+0x314>
    3ebc:	cmp	r3, #15
    3ebe:	bgt.n	3eca <_malloc_r+0x31e>
    3ec0:	mov	r0, r6
    3ec2:	bl	42b0 <__malloc_unlock>
    3ec6:	movs	r4, #0
    3ec8:	b.n	3d3c <_malloc_r+0x190>
    3eca:	adds	r2, r4, r5
    3ecc:	orr.w	r3, r3, #1
    3ed0:	orr.w	r5, r5, #1
    3ed4:	str	r5, [r4, #4]
    3ed6:	mov	r0, r6
    3ed8:	str	r2, [r7, #8]
    3eda:	str	r3, [r2, #4]
    3edc:	bl	42b0 <__malloc_unlock>
    3ee0:	adds	r4, #8
    3ee2:	mov	r0, r4
    3ee4:	add	sp, #12
    3ee6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eea:	cmp	r3, #20
    3eec:	bls.n	3fd2 <_malloc_r+0x426>
    3eee:	cmp	r3, #84	; 0x54
    3ef0:	bhi.w	403c <_malloc_r+0x490>
    3ef4:	lsrs	r0, r5, #12
    3ef6:	add.w	lr, r0, #111	; 0x6f
    3efa:	mov.w	r3, lr, lsl #1
    3efe:	adds	r0, #110	; 0x6e
    3f00:	b.n	3bf0 <_malloc_r+0x44>
    3f02:	nop
    3f04:	.word	0x1fff0df8
    3f08:	.word	0x1fff16e8
    3f0c:	.word	0x1fff16ec
    3f10:	.word	0x1fff16e4
    3f14:	.word	0x1fff16e0
    3f18:	.word	0x1fff1204
    3f1c:	lsrs	r2, r3, #9
    3f1e:	cmp	r2, #4
    3f20:	bls.n	3fe0 <_malloc_r+0x434>
    3f22:	cmp	r2, #20
    3f24:	bhi.w	408e <_malloc_r+0x4e2>
    3f28:	add.w	r1, r2, #92	; 0x5c
    3f2c:	lsls	r1, r1, #1
    3f2e:	adds	r2, #91	; 0x5b
    3f30:	add.w	ip, r7, r1, lsl #2
    3f34:	ldr.w	r1, [r7, r1, lsl #2]
    3f38:	ldr.w	r8, [pc, #476]	; 4118 <_malloc_r+0x56c>
    3f3c:	sub.w	ip, ip, #8
    3f40:	cmp	ip, r1
    3f42:	beq.w	4056 <_malloc_r+0x4aa>
    3f46:	ldr	r2, [r1, #4]
    3f48:	bic.w	r2, r2, #3
    3f4c:	cmp	r3, r2
    3f4e:	bcs.n	3f56 <_malloc_r+0x3aa>
    3f50:	ldr	r1, [r1, #8]
    3f52:	cmp	ip, r1
    3f54:	bne.n	3f46 <_malloc_r+0x39a>
    3f56:	ldr.w	ip, [r1, #12]
    3f5a:	ldr	r2, [r7, #4]
    3f5c:	str.w	ip, [r4, #12]
    3f60:	str	r1, [r4, #8]
    3f62:	str.w	r4, [ip, #8]
    3f66:	str	r4, [r1, #12]
    3f68:	b.n	3c7c <_malloc_r+0xd0>
    3f6a:	adds	r3, r4, r5
    3f6c:	orr.w	r7, r2, #1
    3f70:	orr.w	r5, r5, #1
    3f74:	str	r5, [r4, #4]
    3f76:	mov	r0, r6
    3f78:	str	r3, [r1, #20]
    3f7a:	str	r3, [r1, #16]
    3f7c:	str.w	lr, [r3, #12]
    3f80:	str.w	lr, [r3, #8]
    3f84:	str	r7, [r3, #4]
    3f86:	str	r2, [r3, r2]
    3f88:	adds	r4, #8
    3f8a:	bl	42b0 <__malloc_unlock>
    3f8e:	b.n	3d3c <_malloc_r+0x190>
    3f90:	ldr	r2, [r1, #4]
    3f92:	b.n	3c7c <_malloc_r+0xd0>
    3f94:	add.w	r8, r8, #1
    3f98:	tst.w	r8, #3
    3f9c:	add.w	ip, ip, #8
    3fa0:	bne.w	3ca2 <_malloc_r+0xf6>
    3fa4:	b.n	4008 <_malloc_r+0x45c>
    3fa6:	ldr	r4, [r3, #12]
    3fa8:	cmp	r3, r4
    3faa:	it	eq
    3fac:	addeq	r0, #2
    3fae:	beq.w	3c1c <_malloc_r+0x70>
    3fb2:	b.n	3d1c <_malloc_r+0x170>
    3fb4:	add	r3, r1
    3fb6:	mov	r4, r1
    3fb8:	ldr	r2, [r3, #4]
    3fba:	ldr	r1, [r1, #12]
    3fbc:	ldr.w	r5, [r4, #8]!
    3fc0:	orr.w	r2, r2, #1
    3fc4:	str	r2, [r3, #4]
    3fc6:	mov	r0, r6
    3fc8:	str	r1, [r5, #12]
    3fca:	str	r5, [r1, #8]
    3fcc:	bl	42b0 <__malloc_unlock>
    3fd0:	b.n	3d3c <_malloc_r+0x190>
    3fd2:	add.w	lr, r3, #92	; 0x5c
    3fd6:	add.w	r0, r3, #91	; 0x5b
    3fda:	mov.w	r3, lr, lsl #1
    3fde:	b.n	3bf0 <_malloc_r+0x44>
    3fe0:	lsrs	r2, r3, #6
    3fe2:	add.w	r1, r2, #57	; 0x39
    3fe6:	lsls	r1, r1, #1
    3fe8:	adds	r2, #56	; 0x38
    3fea:	b.n	3f30 <_malloc_r+0x384>
    3fec:	cmp	r4, r7
    3fee:	ldr	r3, [pc, #296]	; (4118 <_malloc_r+0x56c>)
    3ff0:	beq.w	3df4 <_malloc_r+0x248>
    3ff4:	ldr	r4, [r3, #8]
    3ff6:	ldr	r2, [r4, #4]
    3ff8:	bic.w	r2, r2, #3
    3ffc:	b.n	3eb4 <_malloc_r+0x308>
    3ffe:	ldr.w	r3, [r9], #-8
    4002:	cmp	r9, r3
    4004:	bne.w	410c <_malloc_r+0x560>
    4008:	tst.w	r0, #3
    400c:	add.w	r0, r0, #4294967295
    4010:	bne.n	3ffe <_malloc_r+0x452>
    4012:	ldr	r3, [r7, #4]
    4014:	bic.w	r3, r3, r4
    4018:	str	r3, [r7, #4]
    401a:	lsls	r4, r4, #1
    401c:	cmp	r4, r3
    401e:	bhi.w	3d9c <_malloc_r+0x1f0>
    4022:	cmp	r4, #0
    4024:	beq.w	3d9c <_malloc_r+0x1f0>
    4028:	tst	r4, r3
    402a:	mov	r0, r8
    402c:	bne.w	3c9a <_malloc_r+0xee>
    4030:	lsls	r4, r4, #1
    4032:	tst	r4, r3
    4034:	add.w	r0, r0, #4
    4038:	beq.n	4030 <_malloc_r+0x484>
    403a:	b.n	3c9a <_malloc_r+0xee>
    403c:	cmp.w	r3, #340	; 0x154
    4040:	bhi.n	4074 <_malloc_r+0x4c8>
    4042:	lsrs	r0, r5, #15
    4044:	add.w	lr, r0, #120	; 0x78
    4048:	mov.w	r3, lr, lsl #1
    404c:	adds	r0, #119	; 0x77
    404e:	b.n	3bf0 <_malloc_r+0x44>
    4050:	mov.w	r1, #4096	; 0x1000
    4054:	b.n	3e2e <_malloc_r+0x282>
    4056:	movs	r1, #1
    4058:	ldr.w	r3, [r8, #4]
    405c:	asrs	r2, r2, #2
    405e:	lsl.w	r2, r1, r2
    4062:	orrs	r2, r3
    4064:	str.w	r2, [r8, #4]
    4068:	mov	r1, ip
    406a:	b.n	3f5c <_malloc_r+0x3b0>
    406c:	movs	r3, #1
    406e:	str.w	r3, [fp, #4]
    4072:	b.n	3ec0 <_malloc_r+0x314>
    4074:	movw	r2, #1364	; 0x554
    4078:	cmp	r3, r2
    407a:	bhi.n	40be <_malloc_r+0x512>
    407c:	lsrs	r0, r5, #18
    407e:	add.w	lr, r0, #125	; 0x7d
    4082:	mov.w	r3, lr, lsl #1
    4086:	adds	r0, #124	; 0x7c
    4088:	b.n	3bf0 <_malloc_r+0x44>
    408a:	adds	r2, #16
    408c:	b.n	3dd8 <_malloc_r+0x22c>
    408e:	cmp	r2, #84	; 0x54
    4090:	bhi.n	40e0 <_malloc_r+0x534>
    4092:	lsrs	r2, r3, #12
    4094:	add.w	r1, r2, #111	; 0x6f
    4098:	lsls	r1, r1, #1
    409a:	adds	r2, #110	; 0x6e
    409c:	b.n	3f30 <_malloc_r+0x384>
    409e:	ldr	r4, [r7, #8]
    40a0:	ldr	r2, [r4, #4]
    40a2:	bic.w	r2, r2, #3
    40a6:	b.n	3eb4 <_malloc_r+0x308>
    40a8:	ubfx	r0, sl, #0, #12
    40ac:	cmp	r0, #0
    40ae:	bne.w	3e02 <_malloc_r+0x256>
    40b2:	add	r2, r8
    40b4:	ldr	r3, [r7, #8]
    40b6:	orr.w	r2, r2, #1
    40ba:	str	r2, [r3, #4]
    40bc:	b.n	3e98 <_malloc_r+0x2ec>
    40be:	movs	r3, #254	; 0xfe
    40c0:	mov.w	lr, #127	; 0x7f
    40c4:	movs	r0, #126	; 0x7e
    40c6:	b.n	3bf0 <_malloc_r+0x44>
    40c8:	movs	r2, #1
    40ca:	mov.w	r9, #0
    40ce:	b.n	3e54 <_malloc_r+0x2a8>
    40d0:	add.w	r1, r4, #8
    40d4:	mov	r0, r6
    40d6:	bl	49d0 <_free_r>
    40da:	ldr.w	r1, [r9]
    40de:	b.n	3e98 <_malloc_r+0x2ec>
    40e0:	cmp.w	r2, #340	; 0x154
    40e4:	bhi.n	40f2 <_malloc_r+0x546>
    40e6:	lsrs	r2, r3, #15
    40e8:	add.w	r1, r2, #120	; 0x78
    40ec:	lsls	r1, r1, #1
    40ee:	adds	r2, #119	; 0x77
    40f0:	b.n	3f30 <_malloc_r+0x384>
    40f2:	movw	r1, #1364	; 0x554
    40f6:	cmp	r2, r1
    40f8:	bhi.n	4106 <_malloc_r+0x55a>
    40fa:	lsrs	r2, r3, #18
    40fc:	add.w	r1, r2, #125	; 0x7d
    4100:	lsls	r1, r1, #1
    4102:	adds	r2, #124	; 0x7c
    4104:	b.n	3f30 <_malloc_r+0x384>
    4106:	movs	r1, #254	; 0xfe
    4108:	movs	r2, #126	; 0x7e
    410a:	b.n	3f30 <_malloc_r+0x384>
    410c:	ldr	r3, [r7, #4]
    410e:	b.n	401a <_malloc_r+0x46e>
    4110:	lsrs	r0, r5, #3
    4112:	adds	r3, r0, #1
    4114:	lsls	r3, r3, #1
    4116:	b.n	3d0a <_malloc_r+0x15e>
    4118:	.word	0x1fff0df8

0000411c <__ascii_mbtowc>:
    411c:	sub	sp, #8
    411e:	cbz	r1, 4134 <__ascii_mbtowc+0x18>
    4120:	cbz	r2, 413a <__ascii_mbtowc+0x1e>
    4122:	cbz	r3, 4140 <__ascii_mbtowc+0x24>
    4124:	ldrb	r3, [r2, #0]
    4126:	str	r3, [r1, #0]
    4128:	ldrb	r2, [r2, #0]
    412a:	adds	r0, r2, #0
    412c:	it	ne
    412e:	movne	r0, #1
    4130:	add	sp, #8
    4132:	bx	lr
    4134:	add	r1, sp, #4
    4136:	cmp	r2, #0
    4138:	bne.n	4122 <__ascii_mbtowc+0x6>
    413a:	mov	r0, r2
    413c:	add	sp, #8
    413e:	bx	lr
    4140:	mvn.w	r0, #1
    4144:	b.n	4130 <__ascii_mbtowc+0x14>
    4146:	nop

00004148 <memmove>:
    4148:	cmp	r0, r1
    414a:	push	{r4, r5, r6, r7, lr}
    414c:	bls.n	416a <memmove+0x22>
    414e:	adds	r3, r1, r2
    4150:	cmp	r0, r3
    4152:	bcs.n	416a <memmove+0x22>
    4154:	adds	r1, r0, r2
    4156:	cmp	r2, #0
    4158:	beq.n	41fe <memmove+0xb6>
    415a:	subs	r2, r3, r2
    415c:	ldrb.w	r4, [r3, #-1]!
    4160:	strb.w	r4, [r1, #-1]!
    4164:	cmp	r3, r2
    4166:	bne.n	415c <memmove+0x14>
    4168:	pop	{r4, r5, r6, r7, pc}
    416a:	cmp	r2, #15
    416c:	bls.n	4200 <memmove+0xb8>
    416e:	orr.w	r3, r1, r0
    4172:	lsls	r3, r3, #30
    4174:	bne.n	4204 <memmove+0xbc>
    4176:	add.w	r4, r0, #16
    417a:	add.w	r3, r1, #16
    417e:	mov	r5, r2
    4180:	ldr.w	r6, [r3, #-16]
    4184:	str.w	r6, [r4, #-16]
    4188:	ldr.w	r6, [r3, #-12]
    418c:	str.w	r6, [r4, #-12]
    4190:	ldr.w	r6, [r3, #-8]
    4194:	str.w	r6, [r4, #-8]
    4198:	subs	r5, #16
    419a:	ldr.w	r6, [r3, #-4]
    419e:	str.w	r6, [r4, #-4]
    41a2:	cmp	r5, #15
    41a4:	add.w	r3, r3, #16
    41a8:	add.w	r4, r4, #16
    41ac:	bhi.n	4180 <memmove+0x38>
    41ae:	sub.w	r3, r2, #16
    41b2:	bic.w	r3, r3, #15
    41b6:	and.w	lr, r2, #15
    41ba:	adds	r3, #16
    41bc:	cmp.w	lr, #3
    41c0:	add	r1, r3
    41c2:	add	r3, r0
    41c4:	bls.n	420a <memmove+0xc2>
    41c6:	subs	r6, r3, #4
    41c8:	mov	r5, r1
    41ca:	mov	r4, lr
    41cc:	subs	r4, #4
    41ce:	ldr.w	r7, [r5], #4
    41d2:	str.w	r7, [r6, #4]!
    41d6:	cmp	r4, #3
    41d8:	bhi.n	41cc <memmove+0x84>
    41da:	sub.w	r4, lr, #4
    41de:	bic.w	r4, r4, #3
    41e2:	adds	r4, #4
    41e4:	add	r3, r4
    41e6:	add	r1, r4
    41e8:	and.w	r2, r2, #3
    41ec:	cbz	r2, 4208 <memmove+0xc0>
    41ee:	subs	r3, #1
    41f0:	add	r2, r1
    41f2:	ldrb.w	r4, [r1], #1
    41f6:	strb.w	r4, [r3, #1]!
    41fa:	cmp	r2, r1
    41fc:	bne.n	41f2 <memmove+0xaa>
    41fe:	pop	{r4, r5, r6, r7, pc}
    4200:	mov	r3, r0
    4202:	b.n	41ec <memmove+0xa4>
    4204:	mov	r3, r0
    4206:	b.n	41ee <memmove+0xa6>
    4208:	pop	{r4, r5, r6, r7, pc}
    420a:	mov	r2, lr
    420c:	b.n	41ec <memmove+0xa4>
    420e:	nop

00004210 <memset>:
    4210:	push	{r4, r5, r6}
    4212:	lsls	r4, r0, #30
    4214:	beq.n	42a4 <memset+0x94>
    4216:	subs	r4, r2, #1
    4218:	cmp	r2, #0
    421a:	beq.n	42a0 <memset+0x90>
    421c:	uxtb	r5, r1
    421e:	mov	r3, r0
    4220:	b.n	4228 <memset+0x18>
    4222:	subs	r2, r4, #1
    4224:	cbz	r4, 42a0 <memset+0x90>
    4226:	mov	r4, r2
    4228:	strb.w	r5, [r3], #1
    422c:	lsls	r2, r3, #30
    422e:	bne.n	4222 <memset+0x12>
    4230:	cmp	r4, #3
    4232:	bls.n	4292 <memset+0x82>
    4234:	uxtb	r5, r1
    4236:	orr.w	r5, r5, r5, lsl #8
    423a:	cmp	r4, #15
    423c:	orr.w	r5, r5, r5, lsl #16
    4240:	bls.n	4276 <memset+0x66>
    4242:	add.w	r2, r3, #16
    4246:	mov	r6, r4
    4248:	subs	r6, #16
    424a:	cmp	r6, #15
    424c:	str.w	r5, [r2, #-16]
    4250:	str.w	r5, [r2, #-12]
    4254:	str.w	r5, [r2, #-8]
    4258:	str.w	r5, [r2, #-4]
    425c:	add.w	r2, r2, #16
    4260:	bhi.n	4248 <memset+0x38>
    4262:	sub.w	r2, r4, #16
    4266:	bic.w	r2, r2, #15
    426a:	and.w	r4, r4, #15
    426e:	adds	r2, #16
    4270:	cmp	r4, #3
    4272:	add	r3, r2
    4274:	bls.n	4292 <memset+0x82>
    4276:	mov	r6, r3
    4278:	mov	r2, r4
    427a:	subs	r2, #4
    427c:	cmp	r2, #3
    427e:	str.w	r5, [r6], #4
    4282:	bhi.n	427a <memset+0x6a>
    4284:	subs	r2, r4, #4
    4286:	bic.w	r2, r2, #3
    428a:	adds	r2, #4
    428c:	add	r3, r2
    428e:	and.w	r4, r4, #3
    4292:	cbz	r4, 42a0 <memset+0x90>
    4294:	uxtb	r1, r1
    4296:	add	r4, r3
    4298:	strb.w	r1, [r3], #1
    429c:	cmp	r3, r4
    429e:	bne.n	4298 <memset+0x88>
    42a0:	pop	{r4, r5, r6}
    42a2:	bx	lr
    42a4:	mov	r4, r2
    42a6:	mov	r3, r0
    42a8:	b.n	4230 <memset+0x20>
    42aa:	nop

000042ac <__malloc_lock>:
    42ac:	bx	lr
    42ae:	nop

000042b0 <__malloc_unlock>:
    42b0:	bx	lr
    42b2:	nop

000042b4 <_realloc_r>:
    42b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42b8:	mov	r7, r2
    42ba:	sub	sp, #12
    42bc:	cmp	r1, #0
    42be:	beq.w	4444 <_realloc_r+0x190>
    42c2:	mov	r6, r1
    42c4:	mov	r9, r0
    42c6:	add.w	r5, r7, #11
    42ca:	bl	42ac <__malloc_lock>
    42ce:	ldr.w	lr, [r6, #-4]
    42d2:	cmp	r5, #22
    42d4:	bic.w	r4, lr, #3
    42d8:	sub.w	r8, r6, #8
    42dc:	bhi.n	4360 <_realloc_r+0xac>
    42de:	movs	r2, #16
    42e0:	mov	r5, r2
    42e2:	cmp	r7, r5
    42e4:	bhi.n	436a <_realloc_r+0xb6>
    42e6:	cmp	r4, r2
    42e8:	bge.n	43d6 <_realloc_r+0x122>
    42ea:	ldr	r3, [pc, #804]	; (4610 <_realloc_r+0x35c>)
    42ec:	ldr	r1, [r3, #8]
    42ee:	add.w	r0, r8, r4
    42f2:	cmp	r0, r1
    42f4:	ldr	r1, [r0, #4]
    42f6:	beq.w	44ac <_realloc_r+0x1f8>
    42fa:	bic.w	r3, r1, #1
    42fe:	add	r3, r0
    4300:	ldr	r3, [r3, #4]
    4302:	lsls	r3, r3, #31
    4304:	bpl.n	4402 <_realloc_r+0x14e>
    4306:	tst.w	lr, #1
    430a:	beq.n	4378 <_realloc_r+0xc4>
    430c:	mov	r1, r7
    430e:	mov	r0, r9
    4310:	bl	3bac <_malloc_r>
    4314:	mov	r7, r0
    4316:	cbz	r0, 4352 <_realloc_r+0x9e>
    4318:	ldr.w	r3, [r6, #-4]
    431c:	bic.w	r3, r3, #1
    4320:	add	r3, r8
    4322:	sub.w	r2, r0, #8
    4326:	cmp	r2, r3
    4328:	beq.w	45b4 <_realloc_r+0x300>
    432c:	subs	r2, r4, #4
    432e:	cmp	r2, #36	; 0x24
    4330:	bhi.w	4596 <_realloc_r+0x2e2>
    4334:	cmp	r2, #19
    4336:	bhi.w	4542 <_realloc_r+0x28e>
    433a:	mov	r3, r0
    433c:	mov	r2, r6
    433e:	ldr	r1, [r2, #0]
    4340:	str	r1, [r3, #0]
    4342:	ldr	r1, [r2, #4]
    4344:	str	r1, [r3, #4]
    4346:	ldr	r2, [r2, #8]
    4348:	str	r2, [r3, #8]
    434a:	mov	r1, r6
    434c:	mov	r0, r9
    434e:	bl	49d0 <_free_r>
    4352:	mov	r0, r9
    4354:	bl	42b0 <__malloc_unlock>
    4358:	mov	r0, r7
    435a:	add	sp, #12
    435c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4360:	bic.w	r5, r5, #7
    4364:	cmp	r5, #0
    4366:	mov	r2, r5
    4368:	bge.n	42e2 <_realloc_r+0x2e>
    436a:	movs	r3, #12
    436c:	movs	r0, #0
    436e:	str.w	r3, [r9]
    4372:	add	sp, #12
    4374:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4378:	ldr.w	r3, [r6, #-8]
    437c:	rsb	sl, r3, r8
    4380:	ldr.w	r3, [sl, #4]
    4384:	bic.w	ip, r3, #3
    4388:	add.w	r3, r4, ip
    438c:	cmp	r3, r2
    438e:	blt.n	430c <_realloc_r+0x58>
    4390:	mov	r7, sl
    4392:	ldr.w	r1, [sl, #12]
    4396:	ldr.w	r0, [r7, #8]!
    439a:	subs	r2, r4, #4
    439c:	cmp	r2, #36	; 0x24
    439e:	str	r1, [r0, #12]
    43a0:	str	r0, [r1, #8]
    43a2:	bhi.w	45d4 <_realloc_r+0x320>
    43a6:	cmp	r2, #19
    43a8:	bls.w	45d0 <_realloc_r+0x31c>
    43ac:	ldr	r1, [r6, #0]
    43ae:	str.w	r1, [sl, #8]
    43b2:	ldr	r1, [r6, #4]
    43b4:	str.w	r1, [sl, #12]
    43b8:	cmp	r2, #27
    43ba:	bhi.w	4614 <_realloc_r+0x360>
    43be:	adds	r6, #8
    43c0:	add.w	r2, sl, #16
    43c4:	ldr	r1, [r6, #0]
    43c6:	str	r1, [r2, #0]
    43c8:	ldr	r1, [r6, #4]
    43ca:	str	r1, [r2, #4]
    43cc:	ldr	r1, [r6, #8]
    43ce:	str	r1, [r2, #8]
    43d0:	mov	r6, r7
    43d2:	mov	r4, r3
    43d4:	mov	r8, sl
    43d6:	subs	r3, r4, r5
    43d8:	cmp	r3, #15
    43da:	bhi.n	4418 <_realloc_r+0x164>
    43dc:	ldr.w	r3, [r8, #4]
    43e0:	and.w	r3, r3, #1
    43e4:	orrs	r3, r4
    43e6:	add	r4, r8
    43e8:	str.w	r3, [r8, #4]
    43ec:	ldr	r3, [r4, #4]
    43ee:	orr.w	r3, r3, #1
    43f2:	str	r3, [r4, #4]
    43f4:	mov	r0, r9
    43f6:	bl	42b0 <__malloc_unlock>
    43fa:	mov	r0, r6
    43fc:	add	sp, #12
    43fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4402:	bic.w	r1, r1, #3
    4406:	add	r1, r4
    4408:	cmp	r1, r2
    440a:	blt.n	4450 <_realloc_r+0x19c>
    440c:	ldr	r3, [r0, #12]
    440e:	ldr	r2, [r0, #8]
    4410:	mov	r4, r1
    4412:	str	r3, [r2, #12]
    4414:	str	r2, [r3, #8]
    4416:	b.n	43d6 <_realloc_r+0x122>
    4418:	ldr.w	r2, [r8, #4]
    441c:	add.w	r1, r8, r5
    4420:	and.w	r2, r2, #1
    4424:	orrs	r5, r2
    4426:	orr.w	r2, r3, #1
    442a:	add	r3, r1
    442c:	str.w	r5, [r8, #4]
    4430:	str	r2, [r1, #4]
    4432:	ldr	r2, [r3, #4]
    4434:	orr.w	r2, r2, #1
    4438:	adds	r1, #8
    443a:	str	r2, [r3, #4]
    443c:	mov	r0, r9
    443e:	bl	49d0 <_free_r>
    4442:	b.n	43f4 <_realloc_r+0x140>
    4444:	mov	r1, r2
    4446:	add	sp, #12
    4448:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    444c:	b.w	3bac <_malloc_r>
    4450:	tst.w	lr, #1
    4454:	bne.w	430c <_realloc_r+0x58>
    4458:	ldr.w	r3, [r6, #-8]
    445c:	rsb	sl, r3, r8
    4460:	ldr.w	r3, [sl, #4]
    4464:	bic.w	ip, r3, #3
    4468:	add.w	lr, r1, ip
    446c:	cmp	lr, r2
    446e:	blt.n	4388 <_realloc_r+0xd4>
    4470:	ldr	r3, [r0, #12]
    4472:	ldr	r2, [r0, #8]
    4474:	mov	r7, sl
    4476:	str	r3, [r2, #12]
    4478:	str	r2, [r3, #8]
    447a:	ldr.w	r1, [r7, #8]!
    447e:	ldr.w	r3, [sl, #12]
    4482:	str	r3, [r1, #12]
    4484:	subs	r2, r4, #4
    4486:	cmp	r2, #36	; 0x24
    4488:	str	r1, [r3, #8]
    448a:	bhi.w	45c0 <_realloc_r+0x30c>
    448e:	cmp	r2, #19
    4490:	bls.n	4558 <_realloc_r+0x2a4>
    4492:	ldr	r3, [r6, #0]
    4494:	str.w	r3, [sl, #8]
    4498:	ldr	r3, [r6, #4]
    449a:	str.w	r3, [sl, #12]
    449e:	cmp	r2, #27
    44a0:	bhi.w	45e4 <_realloc_r+0x330>
    44a4:	adds	r6, #8
    44a6:	add.w	r3, sl, #16
    44aa:	b.n	455a <_realloc_r+0x2a6>
    44ac:	bic.w	fp, r1, #3
    44b0:	add	fp, r4
    44b2:	add.w	r0, r5, #16
    44b6:	cmp	fp, r0
    44b8:	bge.n	456e <_realloc_r+0x2ba>
    44ba:	tst.w	lr, #1
    44be:	bne.w	430c <_realloc_r+0x58>
    44c2:	ldr.w	r1, [r6, #-8]
    44c6:	rsb	sl, r1, r8
    44ca:	ldr.w	r1, [sl, #4]
    44ce:	bic.w	ip, r1, #3
    44d2:	add	fp, ip
    44d4:	cmp	r0, fp
    44d6:	bgt.w	4388 <_realloc_r+0xd4>
    44da:	mov	r7, sl
    44dc:	ldr.w	r1, [sl, #12]
    44e0:	ldr.w	r0, [r7, #8]!
    44e4:	subs	r2, r4, #4
    44e6:	cmp	r2, #36	; 0x24
    44e8:	str	r1, [r0, #12]
    44ea:	str	r0, [r1, #8]
    44ec:	bhi.w	4658 <_realloc_r+0x3a4>
    44f0:	cmp	r2, #19
    44f2:	bls.w	4640 <_realloc_r+0x38c>
    44f6:	ldr	r1, [r6, #0]
    44f8:	str.w	r1, [sl, #8]
    44fc:	ldr	r1, [r6, #4]
    44fe:	str.w	r1, [sl, #12]
    4502:	cmp	r2, #27
    4504:	bhi.w	4666 <_realloc_r+0x3b2>
    4508:	adds	r6, #8
    450a:	add.w	r2, sl, #16
    450e:	ldr	r1, [r6, #0]
    4510:	str	r1, [r2, #0]
    4512:	ldr	r1, [r6, #4]
    4514:	str	r1, [r2, #4]
    4516:	ldr	r1, [r6, #8]
    4518:	str	r1, [r2, #8]
    451a:	add.w	r1, sl, r5
    451e:	rsb	r2, r5, fp
    4522:	orr.w	r2, r2, #1
    4526:	str	r1, [r3, #8]
    4528:	str	r2, [r1, #4]
    452a:	ldr.w	r3, [sl, #4]
    452e:	and.w	r3, r3, #1
    4532:	orrs	r5, r3
    4534:	mov	r0, r9
    4536:	str.w	r5, [sl, #4]
    453a:	bl	42b0 <__malloc_unlock>
    453e:	mov	r0, r7
    4540:	b.n	43fc <_realloc_r+0x148>
    4542:	ldr	r3, [r6, #0]
    4544:	str	r3, [r0, #0]
    4546:	ldr	r3, [r6, #4]
    4548:	str	r3, [r0, #4]
    454a:	cmp	r2, #27
    454c:	bhi.n	459e <_realloc_r+0x2ea>
    454e:	add.w	r3, r0, #8
    4552:	add.w	r2, r6, #8
    4556:	b.n	433e <_realloc_r+0x8a>
    4558:	mov	r3, r7
    455a:	ldr	r2, [r6, #0]
    455c:	str	r2, [r3, #0]
    455e:	ldr	r2, [r6, #4]
    4560:	str	r2, [r3, #4]
    4562:	ldr	r2, [r6, #8]
    4564:	str	r2, [r3, #8]
    4566:	mov	r6, r7
    4568:	mov	r4, lr
    456a:	mov	r8, sl
    456c:	b.n	43d6 <_realloc_r+0x122>
    456e:	add.w	r1, r8, r5
    4572:	rsb	fp, r5, fp
    4576:	orr.w	r2, fp, #1
    457a:	str	r1, [r3, #8]
    457c:	str	r2, [r1, #4]
    457e:	ldr.w	r3, [r6, #-4]
    4582:	and.w	r3, r3, #1
    4586:	orrs	r5, r3
    4588:	mov	r0, r9
    458a:	str.w	r5, [r6, #-4]
    458e:	bl	42b0 <__malloc_unlock>
    4592:	mov	r0, r6
    4594:	b.n	43fc <_realloc_r+0x148>
    4596:	mov	r1, r6
    4598:	bl	4148 <memmove>
    459c:	b.n	434a <_realloc_r+0x96>
    459e:	ldr	r3, [r6, #8]
    45a0:	str	r3, [r0, #8]
    45a2:	ldr	r3, [r6, #12]
    45a4:	str	r3, [r0, #12]
    45a6:	cmp	r2, #36	; 0x24
    45a8:	beq.n	45fc <_realloc_r+0x348>
    45aa:	add.w	r3, r0, #16
    45ae:	add.w	r2, r6, #16
    45b2:	b.n	433e <_realloc_r+0x8a>
    45b4:	ldr.w	r3, [r0, #-4]
    45b8:	bic.w	r3, r3, #3
    45bc:	add	r4, r3
    45be:	b.n	43d6 <_realloc_r+0x122>
    45c0:	mov	r1, r6
    45c2:	mov	r0, r7
    45c4:	mov	r4, lr
    45c6:	mov	r8, sl
    45c8:	bl	4148 <memmove>
    45cc:	mov	r6, r7
    45ce:	b.n	43d6 <_realloc_r+0x122>
    45d0:	mov	r2, r7
    45d2:	b.n	43c4 <_realloc_r+0x110>
    45d4:	mov	r1, r6
    45d6:	mov	r0, r7
    45d8:	mov	r4, r3
    45da:	mov	r8, sl
    45dc:	bl	4148 <memmove>
    45e0:	mov	r6, r7
    45e2:	b.n	43d6 <_realloc_r+0x122>
    45e4:	ldr	r3, [r6, #8]
    45e6:	str.w	r3, [sl, #16]
    45ea:	ldr	r3, [r6, #12]
    45ec:	str.w	r3, [sl, #20]
    45f0:	cmp	r2, #36	; 0x24
    45f2:	beq.n	462c <_realloc_r+0x378>
    45f4:	adds	r6, #16
    45f6:	add.w	r3, sl, #24
    45fa:	b.n	455a <_realloc_r+0x2a6>
    45fc:	ldr	r3, [r6, #16]
    45fe:	str	r3, [r0, #16]
    4600:	ldr	r3, [r6, #20]
    4602:	str	r3, [r0, #20]
    4604:	add.w	r2, r6, #24
    4608:	add.w	r3, r0, #24
    460c:	b.n	433e <_realloc_r+0x8a>
    460e:	nop
    4610:	.word	0x1fff0df8
    4614:	ldr	r1, [r6, #8]
    4616:	str.w	r1, [sl, #16]
    461a:	ldr	r1, [r6, #12]
    461c:	str.w	r1, [sl, #20]
    4620:	cmp	r2, #36	; 0x24
    4622:	beq.n	4644 <_realloc_r+0x390>
    4624:	adds	r6, #16
    4626:	add.w	r2, sl, #24
    462a:	b.n	43c4 <_realloc_r+0x110>
    462c:	ldr	r3, [r6, #16]
    462e:	str.w	r3, [sl, #24]
    4632:	ldr	r3, [r6, #20]
    4634:	str.w	r3, [sl, #28]
    4638:	adds	r6, #24
    463a:	add.w	r3, sl, #32
    463e:	b.n	455a <_realloc_r+0x2a6>
    4640:	mov	r2, r7
    4642:	b.n	450e <_realloc_r+0x25a>
    4644:	ldr	r2, [r6, #16]
    4646:	str.w	r2, [sl, #24]
    464a:	ldr	r2, [r6, #20]
    464c:	str.w	r2, [sl, #28]
    4650:	adds	r6, #24
    4652:	add.w	r2, sl, #32
    4656:	b.n	43c4 <_realloc_r+0x110>
    4658:	mov	r1, r6
    465a:	mov	r0, r7
    465c:	str	r3, [sp, #4]
    465e:	bl	4148 <memmove>
    4662:	ldr	r3, [sp, #4]
    4664:	b.n	451a <_realloc_r+0x266>
    4666:	ldr	r1, [r6, #8]
    4668:	str.w	r1, [sl, #16]
    466c:	ldr	r1, [r6, #12]
    466e:	str.w	r1, [sl, #20]
    4672:	cmp	r2, #36	; 0x24
    4674:	beq.n	467e <_realloc_r+0x3ca>
    4676:	adds	r6, #16
    4678:	add.w	r2, sl, #24
    467c:	b.n	450e <_realloc_r+0x25a>
    467e:	ldr	r2, [r6, #16]
    4680:	str.w	r2, [sl, #24]
    4684:	ldr	r2, [r6, #20]
    4686:	str.w	r2, [sl, #28]
    468a:	adds	r6, #24
    468c:	add.w	r2, sl, #32
    4690:	b.n	450e <_realloc_r+0x25a>
    4692:	nop

00004694 <_sbrk_r>:
    4694:	push	{r3, r4, r5, lr}
    4696:	ldr	r4, [pc, #28]	; (46b4 <_sbrk_r+0x20>)
    4698:	movs	r3, #0
    469a:	mov	r5, r0
    469c:	mov	r0, r1
    469e:	str	r3, [r4, #0]
    46a0:	bl	f4c <_sbrk>
    46a4:	adds	r3, r0, #1
    46a6:	beq.n	46aa <_sbrk_r+0x16>
    46a8:	pop	{r3, r4, r5, pc}
    46aa:	ldr	r3, [r4, #0]
    46ac:	cmp	r3, #0
    46ae:	beq.n	46a8 <_sbrk_r+0x14>
    46b0:	str	r3, [r5, #0]
    46b2:	pop	{r3, r4, r5, pc}
    46b4:	.word	0x1fff1728
    46b8:	.word	0xffffffff
    46bc:	.word	0xffffffff

000046c0 <strlen>:
    46c0:	pld	[r0]
    46c4:	strd	r4, r5, [sp, #-8]!
    46c8:	bic.w	r1, r0, #7
    46cc:	mvn.w	ip, #0
    46d0:	ands.w	r4, r0, #7
    46d4:	pld	[r1, #32]
    46d8:	bne.w	476e <strlen+0xae>
    46dc:	mov.w	r4, #0
    46e0:	mvn.w	r0, #7
    46e4:	ldrd	r2, r3, [r1]
    46e8:	pld	[r1, #64]	; 0x40
    46ec:	add.w	r0, r0, #8
    46f0:	uadd8	r2, r2, ip
    46f4:	sel	r2, r4, ip
    46f8:	uadd8	r3, r3, ip
    46fc:	sel	r3, r2, ip
    4700:	cbnz	r3, 4756 <strlen+0x96>
    4702:	ldrd	r2, r3, [r1, #8]
    4706:	uadd8	r2, r2, ip
    470a:	add.w	r0, r0, #8
    470e:	sel	r2, r4, ip
    4712:	uadd8	r3, r3, ip
    4716:	sel	r3, r2, ip
    471a:	cbnz	r3, 4756 <strlen+0x96>
    471c:	ldrd	r2, r3, [r1, #16]
    4720:	uadd8	r2, r2, ip
    4724:	add.w	r0, r0, #8
    4728:	sel	r2, r4, ip
    472c:	uadd8	r3, r3, ip
    4730:	sel	r3, r2, ip
    4734:	cbnz	r3, 4756 <strlen+0x96>
    4736:	ldrd	r2, r3, [r1, #24]
    473a:	add.w	r1, r1, #32
    473e:	uadd8	r2, r2, ip
    4742:	add.w	r0, r0, #8
    4746:	sel	r2, r4, ip
    474a:	uadd8	r3, r3, ip
    474e:	sel	r3, r2, ip
    4752:	cmp	r3, #0
    4754:	beq.n	46e4 <strlen+0x24>
    4756:	cmp	r2, #0
    4758:	itt	eq
    475a:	addeq	r0, #4
    475c:	moveq	r2, r3
    475e:	rev	r2, r2
    4760:	clz	r2, r2
    4764:	ldrd	r4, r5, [sp], #8
    4768:	add.w	r0, r0, r2, lsr #3
    476c:	bx	lr
    476e:	ldrd	r2, r3, [r1]
    4772:	and.w	r5, r4, #3
    4776:	rsb	r0, r4, #0
    477a:	mov.w	r5, r5, lsl #3
    477e:	tst.w	r4, #4
    4782:	pld	[r1, #64]	; 0x40
    4786:	lsl.w	r5, ip, r5
    478a:	orn	r2, r2, r5
    478e:	itt	ne
    4790:	ornne	r3, r3, r5
    4794:	movne	r2, ip
    4796:	mov.w	r4, #0
    479a:	b.n	46f0 <strlen+0x30>

0000479c <_vdprintf_r>:
    479c:	push	{r4, r5, r6, r7, lr}
    479e:	sub.w	sp, sp, #532	; 0x214
    47a2:	add	r5, sp, #16
    47a4:	str	r3, [sp, #0]
    47a6:	mov	r7, r1
    47a8:	mov	r3, r2
    47aa:	mov.w	r4, #512	; 0x200
    47ae:	add	r2, sp, #12
    47b0:	mov	r1, r5
    47b2:	str	r4, [sp, #12]
    47b4:	mov	r6, r0
    47b6:	bl	5284 <_vasnprintf_r>
    47ba:	cbz	r0, 47e0 <_vdprintf_r+0x44>
    47bc:	mov	r4, r0
    47be:	mov	r2, r0
    47c0:	mov	r1, r7
    47c2:	ldr	r3, [sp, #12]
    47c4:	mov	r0, r6
    47c6:	bl	481c <_write_r>
    47ca:	cmp	r4, r5
    47cc:	str	r0, [sp, #12]
    47ce:	beq.n	47da <_vdprintf_r+0x3e>
    47d0:	mov	r0, r6
    47d2:	mov	r1, r4
    47d4:	bl	49d0 <_free_r>
    47d8:	ldr	r0, [sp, #12]
    47da:	add.w	sp, sp, #532	; 0x214
    47de:	pop	{r4, r5, r6, r7, pc}
    47e0:	mov.w	r0, #4294967295
    47e4:	b.n	47da <_vdprintf_r+0x3e>
    47e6:	nop

000047e8 <vdprintf>:
    47e8:	push	{r4}
    47ea:	ldr	r4, [pc, #16]	; (47fc <vdprintf+0x14>)
    47ec:	mov	r3, r2
    47ee:	mov	r2, r1
    47f0:	mov	r1, r0
    47f2:	ldr	r0, [r4, #0]
    47f4:	ldr.w	r4, [sp], #4
    47f8:	b.w	479c <_vdprintf_r>
    47fc:	.word	0x1fff0c88

00004800 <__ascii_wctomb>:
    4800:	cbz	r1, 480c <__ascii_wctomb+0xc>
    4802:	cmp	r2, #255	; 0xff
    4804:	bhi.n	4810 <__ascii_wctomb+0x10>
    4806:	strb	r2, [r1, #0]
    4808:	movs	r0, #1
    480a:	bx	lr
    480c:	mov	r0, r1
    480e:	bx	lr
    4810:	movs	r3, #138	; 0x8a
    4812:	str	r3, [r0, #0]
    4814:	mov.w	r0, #4294967295
    4818:	bx	lr
    481a:	nop

0000481c <_write_r>:
    481c:	push	{r4, r5, r6, lr}
    481e:	mov	r5, r1
    4820:	ldr	r4, [pc, #32]	; (4844 <_write_r+0x28>)
    4822:	mov	r1, r2
    4824:	mov	r6, r0
    4826:	mov	r2, r3
    4828:	mov	r0, r5
    482a:	movs	r3, #0
    482c:	str	r3, [r4, #0]
    482e:	bl	2868 <_write>
    4832:	adds	r3, r0, #1
    4834:	beq.n	4838 <_write_r+0x1c>
    4836:	pop	{r4, r5, r6, pc}
    4838:	ldr	r3, [r4, #0]
    483a:	cmp	r3, #0
    483c:	beq.n	4836 <_write_r+0x1a>
    483e:	str	r3, [r6, #0]
    4840:	pop	{r4, r5, r6, pc}
    4842:	nop
    4844:	.word	0x1fff1728

00004848 <__register_exitproc>:
    4848:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    484c:	ldr	r4, [pc, #148]	; (48e4 <__register_exitproc+0x9c>)
    484e:	ldr	r5, [r4, #0]
    4850:	ldr.w	r4, [r5, #328]	; 0x148
    4854:	mov	r6, r0
    4856:	mov	r8, r1
    4858:	mov	sl, r2
    485a:	mov	r9, r3
    485c:	cbz	r4, 48d0 <__register_exitproc+0x88>
    485e:	ldr	r0, [r4, #4]
    4860:	cmp	r0, #31
    4862:	bgt.n	4894 <__register_exitproc+0x4c>
    4864:	adds	r3, r0, #1
    4866:	cbz	r6, 4886 <__register_exitproc+0x3e>
    4868:	add.w	r5, r4, r0, lsl #2
    486c:	movs	r2, #1
    486e:	str.w	sl, [r5, #136]	; 0x88
    4872:	ldr.w	r1, [r4, #392]	; 0x188
    4876:	lsls	r2, r0
    4878:	orrs	r1, r2
    487a:	cmp	r6, #2
    487c:	str.w	r1, [r4, #392]	; 0x188
    4880:	str.w	r9, [r5, #264]	; 0x108
    4884:	beq.n	48c4 <__register_exitproc+0x7c>
    4886:	adds	r0, #2
    4888:	str	r3, [r4, #4]
    488a:	str.w	r8, [r4, r0, lsl #2]
    488e:	movs	r0, #0
    4890:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4894:	ldr	r3, [pc, #80]	; (48e8 <__register_exitproc+0xa0>)
    4896:	cbz	r3, 48da <__register_exitproc+0x92>
    4898:	mov.w	r0, #400	; 0x190
    489c:	bl	3b9c <malloc>
    48a0:	mov	r4, r0
    48a2:	cbz	r0, 48da <__register_exitproc+0x92>
    48a4:	ldr.w	r3, [r5, #328]	; 0x148
    48a8:	movs	r7, #0
    48aa:	stmia.w	r0, {r3, r7}
    48ae:	str.w	r4, [r5, #328]	; 0x148
    48b2:	mov	r0, r7
    48b4:	movs	r3, #1
    48b6:	str.w	r7, [r4, #392]	; 0x188
    48ba:	str.w	r7, [r4, #396]	; 0x18c
    48be:	cmp	r6, #0
    48c0:	beq.n	4886 <__register_exitproc+0x3e>
    48c2:	b.n	4868 <__register_exitproc+0x20>
    48c4:	ldr.w	r1, [r4, #396]	; 0x18c
    48c8:	orrs	r2, r1
    48ca:	str.w	r2, [r4, #396]	; 0x18c
    48ce:	b.n	4886 <__register_exitproc+0x3e>
    48d0:	add.w	r4, r5, #332	; 0x14c
    48d4:	str.w	r4, [r5, #328]	; 0x148
    48d8:	b.n	485e <__register_exitproc+0x16>
    48da:	mov.w	r0, #4294967295
    48de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48e2:	nop
    48e4:	.word	0x0000810c
    48e8:	.word	0x00003b9d

000048ec <register_fini>:
    48ec:	ldr	r3, [pc, #8]	; (48f8 <register_fini+0xc>)
    48ee:	cbz	r3, 48f6 <register_fini+0xa>
    48f0:	ldr	r0, [pc, #8]	; (48fc <register_fini+0x10>)
    48f2:	b.w	4900 <atexit>
    48f6:	bx	lr
    48f8:	.word	0x00000000
    48fc:	.word	0x0000490d

00004900 <atexit>:
    4900:	movs	r3, #0
    4902:	mov	r1, r0
    4904:	mov	r2, r3
    4906:	mov	r0, r3
    4908:	b.w	4848 <__register_exitproc>

0000490c <__libc_fini_array>:
    490c:	push	{r3, r4, r5, lr}
    490e:	ldr	r5, [pc, #28]	; (492c <__libc_fini_array+0x20>)
    4910:	ldr	r4, [pc, #28]	; (4930 <__libc_fini_array+0x24>)
    4912:	subs	r4, r5, r4
    4914:	asrs	r4, r4, #2
    4916:	beq.n	4924 <__libc_fini_array+0x18>
    4918:	subs	r4, #1
    491a:	ldr.w	r3, [r5, #-4]!
    491e:	blx	r3
    4920:	cmp	r4, #0
    4922:	bne.n	4918 <__libc_fini_array+0xc>
    4924:	ldmia.w	sp!, {r3, r4, r5, lr}
    4928:	b.w	83b0 <__init_array_end>
	...

00004934 <_malloc_trim_r>:
    4934:	push	{r3, r4, r5, r6, r7, lr}
    4936:	ldr	r7, [pc, #140]	; (49c4 <_malloc_trim_r+0x90>)
    4938:	mov	r4, r1
    493a:	mov	r6, r0
    493c:	bl	42ac <__malloc_lock>
    4940:	ldr	r3, [r7, #8]
    4942:	ldr	r5, [r3, #4]
    4944:	bic.w	r5, r5, #3
    4948:	subs	r1, r5, r4
    494a:	addw	r1, r1, #4079	; 0xfef
    494e:	bic.w	r1, r1, #4080	; 0xff0
    4952:	bic.w	r1, r1, #15
    4956:	sub.w	r4, r1, #4096	; 0x1000
    495a:	cmp.w	r4, #4096	; 0x1000
    495e:	blt.n	4970 <_malloc_trim_r+0x3c>
    4960:	movs	r1, #0
    4962:	mov	r0, r6
    4964:	bl	4694 <_sbrk_r>
    4968:	ldr	r3, [r7, #8]
    496a:	add	r3, r5
    496c:	cmp	r0, r3
    496e:	beq.n	497a <_malloc_trim_r+0x46>
    4970:	mov	r0, r6
    4972:	bl	42b0 <__malloc_unlock>
    4976:	movs	r0, #0
    4978:	pop	{r3, r4, r5, r6, r7, pc}
    497a:	negs	r1, r4
    497c:	mov	r0, r6
    497e:	bl	4694 <_sbrk_r>
    4982:	adds	r0, #1
    4984:	beq.n	49a2 <_malloc_trim_r+0x6e>
    4986:	ldr	r3, [pc, #64]	; (49c8 <_malloc_trim_r+0x94>)
    4988:	ldr	r2, [r7, #8]
    498a:	ldr	r1, [r3, #0]
    498c:	subs	r5, r5, r4
    498e:	orr.w	r5, r5, #1
    4992:	mov	r0, r6
    4994:	subs	r1, r1, r4
    4996:	str	r5, [r2, #4]
    4998:	str	r1, [r3, #0]
    499a:	bl	42b0 <__malloc_unlock>
    499e:	movs	r0, #1
    49a0:	pop	{r3, r4, r5, r6, r7, pc}
    49a2:	movs	r1, #0
    49a4:	mov	r0, r6
    49a6:	bl	4694 <_sbrk_r>
    49aa:	ldr	r2, [r7, #8]
    49ac:	subs	r3, r0, r2
    49ae:	cmp	r3, #15
    49b0:	ble.n	4970 <_malloc_trim_r+0x3c>
    49b2:	ldr	r4, [pc, #24]	; (49cc <_malloc_trim_r+0x98>)
    49b4:	ldr	r1, [pc, #16]	; (49c8 <_malloc_trim_r+0x94>)
    49b6:	ldr	r4, [r4, #0]
    49b8:	orr.w	r3, r3, #1
    49bc:	subs	r0, r0, r4
    49be:	str	r3, [r2, #4]
    49c0:	str	r0, [r1, #0]
    49c2:	b.n	4970 <_malloc_trim_r+0x3c>
    49c4:	.word	0x1fff0df8
    49c8:	.word	0x1fff16ec
    49cc:	.word	0x1fff1204

000049d0 <_free_r>:
    49d0:	cmp	r1, #0
    49d2:	beq.n	4a60 <_free_r+0x90>
    49d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49d8:	mov	r5, r1
    49da:	mov	r8, r0
    49dc:	bl	42ac <__malloc_lock>
    49e0:	ldr.w	r7, [r5, #-4]
    49e4:	ldr	r1, [pc, #424]	; (4b90 <_free_r+0x1c0>)
    49e6:	bic.w	r3, r7, #1
    49ea:	sub.w	r4, r5, #8
    49ee:	adds	r2, r4, r3
    49f0:	ldr	r6, [r1, #8]
    49f2:	ldr	r0, [r2, #4]
    49f4:	cmp	r2, r6
    49f6:	bic.w	r0, r0, #3
    49fa:	beq.n	4ac2 <_free_r+0xf2>
    49fc:	lsls	r6, r7, #31
    49fe:	str	r0, [r2, #4]
    4a00:	bmi.n	4a1a <_free_r+0x4a>
    4a02:	ldr.w	r7, [r5, #-8]
    4a06:	subs	r4, r4, r7
    4a08:	add.w	lr, r1, #8
    4a0c:	ldr	r5, [r4, #8]
    4a0e:	cmp	r5, lr
    4a10:	add	r3, r7
    4a12:	beq.n	4af4 <_free_r+0x124>
    4a14:	ldr	r7, [r4, #12]
    4a16:	str	r7, [r5, #12]
    4a18:	str	r5, [r7, #8]
    4a1a:	adds	r5, r2, r0
    4a1c:	ldr	r5, [r5, #4]
    4a1e:	lsls	r5, r5, #31
    4a20:	bpl.n	4aa8 <_free_r+0xd8>
    4a22:	orr.w	r2, r3, #1
    4a26:	str	r2, [r4, #4]
    4a28:	str	r3, [r4, r3]
    4a2a:	cmp.w	r3, #512	; 0x200
    4a2e:	bcs.n	4a62 <_free_r+0x92>
    4a30:	lsrs	r3, r3, #3
    4a32:	adds	r2, r3, #1
    4a34:	ldr	r5, [r1, #4]
    4a36:	ldr.w	r7, [r1, r2, lsl #3]
    4a3a:	str	r7, [r4, #8]
    4a3c:	movs	r0, #1
    4a3e:	asrs	r3, r3, #2
    4a40:	lsl.w	r3, r0, r3
    4a44:	add.w	r0, r1, r2, lsl #3
    4a48:	orrs	r5, r3
    4a4a:	subs	r0, #8
    4a4c:	str	r0, [r4, #12]
    4a4e:	str	r5, [r1, #4]
    4a50:	str.w	r4, [r1, r2, lsl #3]
    4a54:	str	r4, [r7, #12]
    4a56:	mov	r0, r8
    4a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4a5c:	b.w	42b0 <__malloc_unlock>
    4a60:	bx	lr
    4a62:	lsrs	r2, r3, #9
    4a64:	cmp	r2, #4
    4a66:	bhi.n	4b10 <_free_r+0x140>
    4a68:	lsrs	r2, r3, #6
    4a6a:	add.w	r7, r2, #57	; 0x39
    4a6e:	lsls	r7, r7, #1
    4a70:	add.w	r5, r2, #56	; 0x38
    4a74:	add.w	r0, r1, r7, lsl #2
    4a78:	ldr.w	r2, [r1, r7, lsl #2]
    4a7c:	ldr	r1, [pc, #272]	; (4b90 <_free_r+0x1c0>)
    4a7e:	subs	r0, #8
    4a80:	cmp	r0, r2
    4a82:	beq.n	4b20 <_free_r+0x150>
    4a84:	ldr	r1, [r2, #4]
    4a86:	bic.w	r1, r1, #3
    4a8a:	cmp	r3, r1
    4a8c:	bcs.n	4a94 <_free_r+0xc4>
    4a8e:	ldr	r2, [r2, #8]
    4a90:	cmp	r0, r2
    4a92:	bne.n	4a84 <_free_r+0xb4>
    4a94:	ldr	r0, [r2, #12]
    4a96:	str	r0, [r4, #12]
    4a98:	str	r2, [r4, #8]
    4a9a:	str	r4, [r0, #8]
    4a9c:	str	r4, [r2, #12]
    4a9e:	mov	r0, r8
    4aa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4aa4:	b.w	42b0 <__malloc_unlock>
    4aa8:	ldr	r5, [r2, #8]
    4aaa:	ldr	r7, [pc, #232]	; (4b94 <_free_r+0x1c4>)
    4aac:	cmp	r5, r7
    4aae:	add	r3, r0
    4ab0:	beq.n	4b32 <_free_r+0x162>
    4ab2:	ldr	r0, [r2, #12]
    4ab4:	str	r0, [r5, #12]
    4ab6:	orr.w	r2, r3, #1
    4aba:	str	r5, [r0, #8]
    4abc:	str	r2, [r4, #4]
    4abe:	str	r3, [r4, r3]
    4ac0:	b.n	4a2a <_free_r+0x5a>
    4ac2:	lsls	r7, r7, #31
    4ac4:	add	r3, r0
    4ac6:	bmi.n	4ad8 <_free_r+0x108>
    4ac8:	ldr.w	r2, [r5, #-8]
    4acc:	subs	r4, r4, r2
    4ace:	add	r3, r2
    4ad0:	ldr	r0, [r4, #8]
    4ad2:	ldr	r2, [r4, #12]
    4ad4:	str	r2, [r0, #12]
    4ad6:	str	r0, [r2, #8]
    4ad8:	ldr	r2, [pc, #188]	; (4b98 <_free_r+0x1c8>)
    4ada:	ldr	r2, [r2, #0]
    4adc:	orr.w	r0, r3, #1
    4ae0:	cmp	r3, r2
    4ae2:	str	r0, [r4, #4]
    4ae4:	str	r4, [r1, #8]
    4ae6:	bcc.n	4a56 <_free_r+0x86>
    4ae8:	ldr	r3, [pc, #176]	; (4b9c <_free_r+0x1cc>)
    4aea:	mov	r0, r8
    4aec:	ldr	r1, [r3, #0]
    4aee:	bl	4934 <_malloc_trim_r>
    4af2:	b.n	4a56 <_free_r+0x86>
    4af4:	adds	r1, r2, r0
    4af6:	ldr	r1, [r1, #4]
    4af8:	lsls	r1, r1, #31
    4afa:	bmi.n	4b86 <_free_r+0x1b6>
    4afc:	ldr	r1, [r2, #8]
    4afe:	ldr	r2, [r2, #12]
    4b00:	str	r2, [r1, #12]
    4b02:	add	r3, r0
    4b04:	orr.w	r0, r3, #1
    4b08:	str	r1, [r2, #8]
    4b0a:	str	r0, [r4, #4]
    4b0c:	str	r3, [r4, r3]
    4b0e:	b.n	4a56 <_free_r+0x86>
    4b10:	cmp	r2, #20
    4b12:	bhi.n	4b44 <_free_r+0x174>
    4b14:	add.w	r7, r2, #92	; 0x5c
    4b18:	lsls	r7, r7, #1
    4b1a:	add.w	r5, r2, #91	; 0x5b
    4b1e:	b.n	4a74 <_free_r+0xa4>
    4b20:	asrs	r2, r5, #2
    4b22:	ldr	r3, [r1, #4]
    4b24:	movs	r5, #1
    4b26:	lsl.w	r2, r5, r2
    4b2a:	orrs	r3, r2
    4b2c:	str	r3, [r1, #4]
    4b2e:	mov	r2, r0
    4b30:	b.n	4a96 <_free_r+0xc6>
    4b32:	orr.w	r2, r3, #1
    4b36:	str	r4, [r1, #20]
    4b38:	str	r4, [r1, #16]
    4b3a:	str	r5, [r4, #12]
    4b3c:	str	r5, [r4, #8]
    4b3e:	str	r2, [r4, #4]
    4b40:	str	r3, [r4, r3]
    4b42:	b.n	4a56 <_free_r+0x86>
    4b44:	cmp	r2, #84	; 0x54
    4b46:	bhi.n	4b56 <_free_r+0x186>
    4b48:	lsrs	r2, r3, #12
    4b4a:	add.w	r7, r2, #111	; 0x6f
    4b4e:	lsls	r7, r7, #1
    4b50:	add.w	r5, r2, #110	; 0x6e
    4b54:	b.n	4a74 <_free_r+0xa4>
    4b56:	cmp.w	r2, #340	; 0x154
    4b5a:	bhi.n	4b6a <_free_r+0x19a>
    4b5c:	lsrs	r2, r3, #15
    4b5e:	add.w	r7, r2, #120	; 0x78
    4b62:	lsls	r7, r7, #1
    4b64:	add.w	r5, r2, #119	; 0x77
    4b68:	b.n	4a74 <_free_r+0xa4>
    4b6a:	movw	r0, #1364	; 0x554
    4b6e:	cmp	r2, r0
    4b70:	bhi.n	4b80 <_free_r+0x1b0>
    4b72:	lsrs	r2, r3, #18
    4b74:	add.w	r7, r2, #125	; 0x7d
    4b78:	lsls	r7, r7, #1
    4b7a:	add.w	r5, r2, #124	; 0x7c
    4b7e:	b.n	4a74 <_free_r+0xa4>
    4b80:	movs	r7, #254	; 0xfe
    4b82:	movs	r5, #126	; 0x7e
    4b84:	b.n	4a74 <_free_r+0xa4>
    4b86:	orr.w	r2, r3, #1
    4b8a:	str	r2, [r4, #4]
    4b8c:	str	r3, [r4, r3]
    4b8e:	b.n	4a56 <_free_r+0x86>
    4b90:	.word	0x1fff0df8
    4b94:	.word	0x1fff0e00
    4b98:	.word	0x1fff1200
    4b9c:	.word	0x1fff16e8

00004ba0 <_localeconv_r>:
    4ba0:	ldr	r2, [pc, #16]	; (4bb4 <_localeconv_r+0x14>)
    4ba2:	ldr	r3, [pc, #20]	; (4bb8 <_localeconv_r+0x18>)
    4ba4:	ldr	r2, [r2, #0]
    4ba6:	ldr	r0, [r2, #52]	; 0x34
    4ba8:	cmp	r0, #0
    4baa:	it	eq
    4bac:	moveq	r0, r3
    4bae:	adds	r0, #240	; 0xf0
    4bb0:	bx	lr
    4bb2:	nop
    4bb4:	.word	0x1fff0c88
    4bb8:	.word	0x1fff0c8c
    4bbc:	.word	0xffffffff

00004bc0 <memchr>:
    4bc0:	and.w	r1, r1, #255	; 0xff
    4bc4:	cmp	r2, #16
    4bc6:	blt.n	4c20 <memchr+0x60>
    4bc8:	tst.w	r0, #7
    4bcc:	beq.n	4be0 <memchr+0x20>
    4bce:	ldrb.w	r3, [r0], #1
    4bd2:	subs	r2, #1
    4bd4:	cmp	r3, r1
    4bd6:	beq.n	4c34 <memchr+0x74>
    4bd8:	tst.w	r0, #7
    4bdc:	cbz	r2, 4c30 <memchr+0x70>
    4bde:	bne.n	4bce <memchr+0xe>
    4be0:	push	{r4, r5, r6, r7}
    4be2:	orr.w	r1, r1, r1, lsl #8
    4be6:	orr.w	r1, r1, r1, lsl #16
    4bea:	bic.w	r4, r2, #7
    4bee:	mvns.w	r7, #0
    4bf2:	movs	r3, #0
    4bf4:	ldrd	r5, r6, [r0], #8
    4bf8:	subs	r4, #8
    4bfa:	eor.w	r5, r5, r1
    4bfe:	eor.w	r6, r6, r1
    4c02:	uadd8	r5, r5, r7
    4c06:	sel	r5, r3, r7
    4c0a:	uadd8	r6, r6, r7
    4c0e:	sel	r6, r5, r7
    4c12:	cbnz	r6, 4c38 <memchr+0x78>
    4c14:	bne.n	4bf4 <memchr+0x34>
    4c16:	pop	{r4, r5, r6, r7}
    4c18:	and.w	r1, r1, #255	; 0xff
    4c1c:	and.w	r2, r2, #7
    4c20:	cbz	r2, 4c30 <memchr+0x70>
    4c22:	ldrb.w	r3, [r0], #1
    4c26:	subs	r2, #1
    4c28:	eor.w	r3, r3, r1
    4c2c:	cbz	r3, 4c34 <memchr+0x74>
    4c2e:	bne.n	4c22 <memchr+0x62>
    4c30:	movs	r0, #0
    4c32:	bx	lr
    4c34:	subs	r0, #1
    4c36:	bx	lr
    4c38:	cmp	r5, #0
    4c3a:	itte	eq
    4c3c:	moveq	r5, r6
    4c3e:	subeq	r0, #3
    4c40:	subne	r0, #7
    4c42:	tst.w	r5, #1
    4c46:	bne.n	4c58 <memchr+0x98>
    4c48:	adds	r0, #1
    4c4a:	tst.w	r5, #256	; 0x100
    4c4e:	ittt	eq
    4c50:	addeq	r0, #1
    4c52:	tsteq.w	r5, #98304	; 0x18000
    4c56:	addeq	r0, #1
    4c58:	pop	{r4, r5, r6, r7}
    4c5a:	subs	r0, #1
    4c5c:	bx	lr
    4c5e:	nop

00004c60 <_Balloc>:
    4c60:	ldr	r3, [r0, #76]	; 0x4c
    4c62:	push	{r4, r5, r6, lr}
    4c64:	mov	r5, r0
    4c66:	mov	r4, r1
    4c68:	cbz	r3, 4c7e <_Balloc+0x1e>
    4c6a:	ldr.w	r0, [r3, r4, lsl #2]
    4c6e:	cbz	r0, 4c92 <_Balloc+0x32>
    4c70:	ldr	r2, [r0, #0]
    4c72:	str.w	r2, [r3, r4, lsl #2]
    4c76:	movs	r3, #0
    4c78:	str	r3, [r0, #16]
    4c7a:	str	r3, [r0, #12]
    4c7c:	pop	{r4, r5, r6, pc}
    4c7e:	movs	r2, #33	; 0x21
    4c80:	movs	r1, #4
    4c82:	bl	52e4 <_calloc_r>
    4c86:	str	r0, [r5, #76]	; 0x4c
    4c88:	mov	r3, r0
    4c8a:	cmp	r0, #0
    4c8c:	bne.n	4c6a <_Balloc+0xa>
    4c8e:	movs	r0, #0
    4c90:	pop	{r4, r5, r6, pc}
    4c92:	movs	r1, #1
    4c94:	lsl.w	r6, r1, r4
    4c98:	adds	r2, r6, #5
    4c9a:	mov	r0, r5
    4c9c:	lsls	r2, r2, #2
    4c9e:	bl	52e4 <_calloc_r>
    4ca2:	cmp	r0, #0
    4ca4:	beq.n	4c8e <_Balloc+0x2e>
    4ca6:	str	r4, [r0, #4]
    4ca8:	str	r6, [r0, #8]
    4caa:	b.n	4c76 <_Balloc+0x16>

00004cac <_Bfree>:
    4cac:	cbz	r1, 4cbc <_Bfree+0x10>
    4cae:	ldr	r3, [r0, #76]	; 0x4c
    4cb0:	ldr	r2, [r1, #4]
    4cb2:	ldr.w	r0, [r3, r2, lsl #2]
    4cb6:	str	r0, [r1, #0]
    4cb8:	str.w	r1, [r3, r2, lsl #2]
    4cbc:	bx	lr
    4cbe:	nop

00004cc0 <__multadd>:
    4cc0:	push	{r4, r5, r6, r7, lr}
    4cc2:	ldr	r4, [r1, #16]
    4cc4:	sub	sp, #12
    4cc6:	mov	r5, r1
    4cc8:	mov	r6, r0
    4cca:	add.w	lr, r1, #20
    4cce:	movs	r7, #0
    4cd0:	ldr.w	r0, [lr]
    4cd4:	uxth	r1, r0
    4cd6:	mla	r1, r2, r1, r3
    4cda:	lsrs	r3, r1, #16
    4cdc:	lsrs	r0, r0, #16
    4cde:	mla	r3, r2, r0, r3
    4ce2:	uxth	r1, r1
    4ce4:	adds	r7, #1
    4ce6:	add.w	r1, r1, r3, lsl #16
    4cea:	cmp	r4, r7
    4cec:	str.w	r1, [lr], #4
    4cf0:	mov.w	r3, r3, lsr #16
    4cf4:	bgt.n	4cd0 <__multadd+0x10>
    4cf6:	cbz	r3, 4d08 <__multadd+0x48>
    4cf8:	ldr	r2, [r5, #8]
    4cfa:	cmp	r4, r2
    4cfc:	bge.n	4d0e <__multadd+0x4e>
    4cfe:	add.w	r2, r5, r4, lsl #2
    4d02:	adds	r4, #1
    4d04:	str	r3, [r2, #20]
    4d06:	str	r4, [r5, #16]
    4d08:	mov	r0, r5
    4d0a:	add	sp, #12
    4d0c:	pop	{r4, r5, r6, r7, pc}
    4d0e:	ldr	r1, [r5, #4]
    4d10:	str	r3, [sp, #4]
    4d12:	adds	r1, #1
    4d14:	mov	r0, r6
    4d16:	bl	4c60 <_Balloc>
    4d1a:	ldr	r2, [r5, #16]
    4d1c:	adds	r2, #2
    4d1e:	add.w	r1, r5, #12
    4d22:	mov	r7, r0
    4d24:	lsls	r2, r2, #2
    4d26:	adds	r0, #12
    4d28:	bl	28b0 <memcpy>
    4d2c:	ldr	r2, [r6, #76]	; 0x4c
    4d2e:	ldr	r1, [r5, #4]
    4d30:	ldr	r3, [sp, #4]
    4d32:	ldr.w	r0, [r2, r1, lsl #2]
    4d36:	str	r0, [r5, #0]
    4d38:	str.w	r5, [r2, r1, lsl #2]
    4d3c:	mov	r5, r7
    4d3e:	b.n	4cfe <__multadd+0x3e>

00004d40 <__hi0bits>:
    4d40:	lsrs	r3, r0, #16
    4d42:	lsls	r3, r3, #16
    4d44:	cbnz	r3, 4d74 <__hi0bits+0x34>
    4d46:	lsls	r0, r0, #16
    4d48:	movs	r3, #16
    4d4a:	tst.w	r0, #4278190080	; 0xff000000
    4d4e:	itt	eq
    4d50:	lsleq	r0, r0, #8
    4d52:	addeq	r3, #8
    4d54:	tst.w	r0, #4026531840	; 0xf0000000
    4d58:	itt	eq
    4d5a:	lsleq	r0, r0, #4
    4d5c:	addeq	r3, #4
    4d5e:	tst.w	r0, #3221225472	; 0xc0000000
    4d62:	itt	eq
    4d64:	lsleq	r0, r0, #2
    4d66:	addeq	r3, #2
    4d68:	cmp	r0, #0
    4d6a:	blt.n	4d7c <__hi0bits+0x3c>
    4d6c:	lsls	r2, r0, #1
    4d6e:	bmi.n	4d78 <__hi0bits+0x38>
    4d70:	movs	r0, #32
    4d72:	bx	lr
    4d74:	movs	r3, #0
    4d76:	b.n	4d4a <__hi0bits+0xa>
    4d78:	adds	r0, r3, #1
    4d7a:	bx	lr
    4d7c:	mov	r0, r3
    4d7e:	bx	lr

00004d80 <__lo0bits>:
    4d80:	ldr	r3, [r0, #0]
    4d82:	ands.w	r2, r3, #7
    4d86:	beq.n	4d98 <__lo0bits+0x18>
    4d88:	lsls	r1, r3, #31
    4d8a:	bmi.n	4dce <__lo0bits+0x4e>
    4d8c:	lsls	r2, r3, #30
    4d8e:	bmi.n	4dd2 <__lo0bits+0x52>
    4d90:	lsrs	r3, r3, #2
    4d92:	str	r3, [r0, #0]
    4d94:	movs	r0, #2
    4d96:	bx	lr
    4d98:	uxth	r1, r3
    4d9a:	cbnz	r1, 4da0 <__lo0bits+0x20>
    4d9c:	lsrs	r3, r3, #16
    4d9e:	movs	r2, #16
    4da0:	tst.w	r3, #255	; 0xff
    4da4:	itt	eq
    4da6:	lsreq	r3, r3, #8
    4da8:	addeq	r2, #8
    4daa:	lsls	r1, r3, #28
    4dac:	itt	eq
    4dae:	lsreq	r3, r3, #4
    4db0:	addeq	r2, #4
    4db2:	lsls	r1, r3, #30
    4db4:	itt	eq
    4db6:	lsreq	r3, r3, #2
    4db8:	addeq	r2, #2
    4dba:	lsls	r1, r3, #31
    4dbc:	bmi.n	4dc8 <__lo0bits+0x48>
    4dbe:	lsrs	r3, r3, #1
    4dc0:	bne.n	4dc6 <__lo0bits+0x46>
    4dc2:	movs	r0, #32
    4dc4:	bx	lr
    4dc6:	adds	r2, #1
    4dc8:	str	r3, [r0, #0]
    4dca:	mov	r0, r2
    4dcc:	bx	lr
    4dce:	movs	r0, #0
    4dd0:	bx	lr
    4dd2:	lsrs	r3, r3, #1
    4dd4:	str	r3, [r0, #0]
    4dd6:	movs	r0, #1
    4dd8:	bx	lr
    4dda:	nop

00004ddc <__i2b>:
    4ddc:	push	{r4, lr}
    4dde:	mov	r4, r1
    4de0:	movs	r1, #1
    4de2:	bl	4c60 <_Balloc>
    4de6:	movs	r2, #1
    4de8:	str	r4, [r0, #20]
    4dea:	str	r2, [r0, #16]
    4dec:	pop	{r4, pc}
    4dee:	nop

00004df0 <__multiply>:
    4df0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4df4:	ldr	r5, [r1, #16]
    4df6:	ldr	r7, [r2, #16]
    4df8:	cmp	r5, r7
    4dfa:	sub	sp, #12
    4dfc:	mov	r4, r1
    4dfe:	mov	r6, r2
    4e00:	bge.n	4e0c <__multiply+0x1c>
    4e02:	mov	r2, r5
    4e04:	mov	r4, r6
    4e06:	mov	r5, r7
    4e08:	mov	r6, r1
    4e0a:	mov	r7, r2
    4e0c:	ldr	r3, [r4, #8]
    4e0e:	ldr	r1, [r4, #4]
    4e10:	add.w	r8, r5, r7
    4e14:	cmp	r8, r3
    4e16:	it	gt
    4e18:	addgt	r1, #1
    4e1a:	bl	4c60 <_Balloc>
    4e1e:	add.w	ip, r0, #20
    4e22:	add.w	r9, ip, r8, lsl #2
    4e26:	cmp	ip, r9
    4e28:	str	r0, [sp, #0]
    4e2a:	bcs.n	4e38 <__multiply+0x48>
    4e2c:	mov	r3, ip
    4e2e:	movs	r1, #0
    4e30:	str.w	r1, [r3], #4
    4e34:	cmp	r9, r3
    4e36:	bhi.n	4e30 <__multiply+0x40>
    4e38:	add.w	r2, r6, #20
    4e3c:	add.w	sl, r2, r7, lsl #2
    4e40:	add.w	r3, r4, #20
    4e44:	cmp	r2, sl
    4e46:	add.w	lr, r3, r5, lsl #2
    4e4a:	bcs.n	4ef6 <__multiply+0x106>
    4e4c:	str.w	r9, [sp, #4]
    4e50:	mov	r9, r3
    4e52:	ldr.w	r3, [r2], #4
    4e56:	uxth.w	fp, r3
    4e5a:	cmp.w	fp, #0
    4e5e:	beq.n	4ea2 <__multiply+0xb2>
    4e60:	movs	r0, #0
    4e62:	mov	r7, r9
    4e64:	mov	r6, ip
    4e66:	mov	r5, r0
    4e68:	b.n	4e6c <__multiply+0x7c>
    4e6a:	mov	r6, r3
    4e6c:	ldr.w	r4, [r7], #4
    4e70:	ldr	r0, [r6, #0]
    4e72:	uxth	r1, r4
    4e74:	uxth	r3, r0
    4e76:	mla	r1, fp, r1, r3
    4e7a:	lsrs	r4, r4, #16
    4e7c:	lsrs	r0, r0, #16
    4e7e:	adds	r3, r1, r5
    4e80:	mla	r0, fp, r4, r0
    4e84:	add.w	r0, r0, r3, lsr #16
    4e88:	uxth	r1, r3
    4e8a:	mov	r3, r6
    4e8c:	orr.w	r1, r1, r0, lsl #16
    4e90:	cmp	lr, r7
    4e92:	mov.w	r5, r0, lsr #16
    4e96:	str.w	r1, [r3], #4
    4e9a:	bhi.n	4e6a <__multiply+0x7a>
    4e9c:	str	r5, [r6, #4]
    4e9e:	ldr.w	r3, [r2, #-4]
    4ea2:	movs.w	fp, r3, lsr #16
    4ea6:	beq.n	4eea <__multiply+0xfa>
    4ea8:	ldr.w	r3, [ip]
    4eac:	mov	r7, ip
    4eae:	mov	r0, r3
    4eb0:	mov	r5, r9
    4eb2:	movs	r1, #0
    4eb4:	b.n	4eb8 <__multiply+0xc8>
    4eb6:	mov	r7, r6
    4eb8:	ldrh	r4, [r5, #0]
    4eba:	lsrs	r0, r0, #16
    4ebc:	mla	r0, fp, r4, r0
    4ec0:	add	r1, r0
    4ec2:	uxth	r4, r3
    4ec4:	mov	r6, r7
    4ec6:	orr.w	r3, r4, r1, lsl #16
    4eca:	str.w	r3, [r6], #4
    4ece:	ldr	r0, [r7, #4]
    4ed0:	ldr.w	r4, [r5], #4
    4ed4:	uxth	r3, r0
    4ed6:	lsrs	r4, r4, #16
    4ed8:	mla	r4, fp, r4, r3
    4edc:	add.w	r3, r4, r1, lsr #16
    4ee0:	cmp	lr, r5
    4ee2:	mov.w	r1, r3, lsr #16
    4ee6:	bhi.n	4eb6 <__multiply+0xc6>
    4ee8:	str	r3, [r7, #4]
    4eea:	cmp	sl, r2
    4eec:	add.w	ip, ip, #4
    4ef0:	bhi.n	4e52 <__multiply+0x62>
    4ef2:	ldr.w	r9, [sp, #4]
    4ef6:	cmp.w	r8, #0
    4efa:	ble.n	4f14 <__multiply+0x124>
    4efc:	ldr.w	r3, [r9, #-4]
    4f00:	sub.w	r9, r9, #4
    4f04:	cbz	r3, 4f0e <__multiply+0x11e>
    4f06:	b.n	4f14 <__multiply+0x124>
    4f08:	ldr.w	r3, [r9, #-4]!
    4f0c:	cbnz	r3, 4f14 <__multiply+0x124>
    4f0e:	subs.w	r8, r8, #1
    4f12:	bne.n	4f08 <__multiply+0x118>
    4f14:	ldr	r0, [sp, #0]
    4f16:	str.w	r8, [r0, #16]
    4f1a:	add	sp, #12
    4f1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004f20 <__pow5mult>:
    4f20:	ands.w	r3, r2, #3
    4f24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f28:	mov	r4, r2
    4f2a:	mov	r7, r0
    4f2c:	bne.n	4f8c <__pow5mult+0x6c>
    4f2e:	mov	r6, r1
    4f30:	asrs	r4, r4, #2
    4f32:	beq.n	4f6e <__pow5mult+0x4e>
    4f34:	ldr	r5, [r7, #72]	; 0x48
    4f36:	cbz	r5, 4f9e <__pow5mult+0x7e>
    4f38:	lsls	r3, r4, #31
    4f3a:	mov.w	r8, #0
    4f3e:	bmi.n	4f4e <__pow5mult+0x2e>
    4f40:	asrs	r4, r4, #1
    4f42:	beq.n	4f6e <__pow5mult+0x4e>
    4f44:	ldr	r0, [r5, #0]
    4f46:	cbz	r0, 4f74 <__pow5mult+0x54>
    4f48:	mov	r5, r0
    4f4a:	lsls	r3, r4, #31
    4f4c:	bpl.n	4f40 <__pow5mult+0x20>
    4f4e:	mov	r2, r5
    4f50:	mov	r1, r6
    4f52:	mov	r0, r7
    4f54:	bl	4df0 <__multiply>
    4f58:	cbz	r6, 4f88 <__pow5mult+0x68>
    4f5a:	ldr	r2, [r6, #4]
    4f5c:	ldr	r3, [r7, #76]	; 0x4c
    4f5e:	asrs	r4, r4, #1
    4f60:	ldr.w	r1, [r3, r2, lsl #2]
    4f64:	str	r1, [r6, #0]
    4f66:	str.w	r6, [r3, r2, lsl #2]
    4f6a:	mov	r6, r0
    4f6c:	bne.n	4f44 <__pow5mult+0x24>
    4f6e:	mov	r0, r6
    4f70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f74:	mov	r2, r5
    4f76:	mov	r1, r5
    4f78:	mov	r0, r7
    4f7a:	bl	4df0 <__multiply>
    4f7e:	str	r0, [r5, #0]
    4f80:	str.w	r8, [r0]
    4f84:	mov	r5, r0
    4f86:	b.n	4f4a <__pow5mult+0x2a>
    4f88:	mov	r6, r0
    4f8a:	b.n	4f40 <__pow5mult+0x20>
    4f8c:	subs	r2, r3, #1
    4f8e:	ldr	r5, [pc, #44]	; (4fbc <__pow5mult+0x9c>)
    4f90:	movs	r3, #0
    4f92:	ldr.w	r2, [r5, r2, lsl #2]
    4f96:	bl	4cc0 <__multadd>
    4f9a:	mov	r6, r0
    4f9c:	b.n	4f30 <__pow5mult+0x10>
    4f9e:	movs	r1, #1
    4fa0:	mov	r0, r7
    4fa2:	bl	4c60 <_Balloc>
    4fa6:	movw	r1, #625	; 0x271
    4faa:	movs	r2, #1
    4fac:	movs	r3, #0
    4fae:	str	r1, [r0, #20]
    4fb0:	str	r2, [r0, #16]
    4fb2:	mov	r5, r0
    4fb4:	str	r0, [r7, #72]	; 0x48
    4fb6:	str	r3, [r0, #0]
    4fb8:	b.n	4f38 <__pow5mult+0x18>
    4fba:	nop
    4fbc:	.word	0x00008318

00004fc0 <__lshift>:
    4fc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4fc4:	mov	r9, r2
    4fc6:	ldr	r2, [r1, #16]
    4fc8:	ldr	r3, [r1, #8]
    4fca:	mov.w	r4, r9, asr #5
    4fce:	add.w	r8, r4, r2
    4fd2:	add.w	r5, r8, #1
    4fd6:	cmp	r5, r3
    4fd8:	mov	r6, r1
    4fda:	mov	sl, r0
    4fdc:	ldr	r1, [r1, #4]
    4fde:	ble.n	4fea <__lshift+0x2a>
    4fe0:	lsls	r3, r3, #1
    4fe2:	cmp	r5, r3
    4fe4:	add.w	r1, r1, #1
    4fe8:	bgt.n	4fe0 <__lshift+0x20>
    4fea:	mov	r0, sl
    4fec:	bl	4c60 <_Balloc>
    4ff0:	cmp	r4, #0
    4ff2:	add.w	r2, r0, #20
    4ff6:	ble.n	506a <__lshift+0xaa>
    4ff8:	add.w	r3, r2, r4, lsl #2
    4ffc:	movs	r1, #0
    4ffe:	str.w	r1, [r2], #4
    5002:	cmp	r3, r2
    5004:	bne.n	4ffe <__lshift+0x3e>
    5006:	ldr	r4, [r6, #16]
    5008:	add.w	r1, r6, #20
    500c:	ands.w	r9, r9, #31
    5010:	add.w	lr, r1, r4, lsl #2
    5014:	beq.n	505a <__lshift+0x9a>
    5016:	rsb	r2, r9, #32
    501a:	movs	r4, #0
    501c:	ldr	r7, [r1, #0]
    501e:	lsl.w	ip, r7, r9
    5022:	orr.w	r4, ip, r4
    5026:	mov	ip, r3
    5028:	str.w	r4, [r3], #4
    502c:	ldr.w	r4, [r1], #4
    5030:	cmp	lr, r1
    5032:	lsr.w	r4, r4, r2
    5036:	bhi.n	501c <__lshift+0x5c>
    5038:	str.w	r4, [ip, #4]
    503c:	cbz	r4, 5042 <__lshift+0x82>
    503e:	add.w	r5, r8, #2
    5042:	ldr.w	r3, [sl, #76]	; 0x4c
    5046:	ldr	r2, [r6, #4]
    5048:	subs	r5, #1
    504a:	ldr.w	r1, [r3, r2, lsl #2]
    504e:	str	r5, [r0, #16]
    5050:	str	r1, [r6, #0]
    5052:	str.w	r6, [r3, r2, lsl #2]
    5056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    505a:	subs	r3, #4
    505c:	ldr.w	r2, [r1], #4
    5060:	str.w	r2, [r3, #4]!
    5064:	cmp	lr, r1
    5066:	bhi.n	505c <__lshift+0x9c>
    5068:	b.n	5042 <__lshift+0x82>
    506a:	mov	r3, r2
    506c:	b.n	5006 <__lshift+0x46>
    506e:	nop

00005070 <__mcmp>:
    5070:	ldr	r2, [r0, #16]
    5072:	ldr	r3, [r1, #16]
    5074:	subs	r2, r2, r3
    5076:	bne.n	50a0 <__mcmp+0x30>
    5078:	lsls	r3, r3, #2
    507a:	adds	r0, #20
    507c:	adds	r1, #20
    507e:	add	r1, r3
    5080:	push	{r4}
    5082:	add	r3, r0
    5084:	b.n	508a <__mcmp+0x1a>
    5086:	cmp	r0, r3
    5088:	bcs.n	50a4 <__mcmp+0x34>
    508a:	ldr.w	r4, [r3, #-4]!
    508e:	ldr.w	r2, [r1, #-4]!
    5092:	cmp	r4, r2
    5094:	beq.n	5086 <__mcmp+0x16>
    5096:	bcc.n	50ac <__mcmp+0x3c>
    5098:	movs	r0, #1
    509a:	ldr.w	r4, [sp], #4
    509e:	bx	lr
    50a0:	mov	r0, r2
    50a2:	bx	lr
    50a4:	movs	r0, #0
    50a6:	ldr.w	r4, [sp], #4
    50aa:	bx	lr
    50ac:	mov.w	r0, #4294967295
    50b0:	b.n	509a <__mcmp+0x2a>
    50b2:	nop

000050b4 <__mdiff>:
    50b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50b8:	ldr	r3, [r1, #16]
    50ba:	mov	r7, r1
    50bc:	ldr	r1, [r2, #16]
    50be:	subs	r3, r3, r1
    50c0:	cmp	r3, #0
    50c2:	mov	r8, r2
    50c4:	bne.n	50f6 <__mdiff+0x42>
    50c6:	lsls	r1, r1, #2
    50c8:	add.w	r2, r7, #20
    50cc:	add.w	r5, r8, #20
    50d0:	adds	r3, r2, r1
    50d2:	add	r1, r5
    50d4:	b.n	50da <__mdiff+0x26>
    50d6:	cmp	r2, r3
    50d8:	bcs.n	5198 <__mdiff+0xe4>
    50da:	ldr.w	r6, [r3, #-4]!
    50de:	ldr.w	r4, [r1, #-4]!
    50e2:	cmp	r6, r4
    50e4:	beq.n	50d6 <__mdiff+0x22>
    50e6:	bcs.n	51aa <__mdiff+0xf6>
    50e8:	mov	r3, r7
    50ea:	mov	r4, r2
    50ec:	mov	r7, r8
    50ee:	mov.w	r9, #1
    50f2:	mov	r8, r3
    50f4:	b.n	5104 <__mdiff+0x50>
    50f6:	blt.n	51b4 <__mdiff+0x100>
    50f8:	add.w	r5, r7, #20
    50fc:	add.w	r4, r2, #20
    5100:	mov.w	r9, #0
    5104:	ldr	r1, [r7, #4]
    5106:	bl	4c60 <_Balloc>
    510a:	ldr.w	r3, [r8, #16]
    510e:	ldr	r6, [r7, #16]
    5110:	str.w	r9, [r0, #12]
    5114:	add.w	ip, r4, r3, lsl #2
    5118:	mov	lr, r4
    511a:	add.w	r7, r5, r6, lsl #2
    511e:	add.w	r4, r0, #20
    5122:	movs	r3, #0
    5124:	ldr.w	r1, [lr], #4
    5128:	ldr.w	r8, [r5], #4
    512c:	uxth	r2, r1
    512e:	uxtah	r3, r3, r8
    5132:	lsrs	r1, r1, #16
    5134:	subs	r2, r3, r2
    5136:	rsb	r3, r1, r8, lsr #16
    513a:	add.w	r3, r3, r2, asr #16
    513e:	uxth	r2, r2
    5140:	orr.w	r2, r2, r3, lsl #16
    5144:	cmp	ip, lr
    5146:	str.w	r2, [r4], #4
    514a:	mov.w	r3, r3, asr #16
    514e:	bhi.n	5124 <__mdiff+0x70>
    5150:	cmp	r7, r5
    5152:	bls.n	5184 <__mdiff+0xd0>
    5154:	mov	ip, r4
    5156:	mov	r1, r5
    5158:	ldr.w	lr, [r1], #4
    515c:	uxtah	r2, r3, lr
    5160:	asrs	r3, r2, #16
    5162:	add.w	r3, r3, lr, lsr #16
    5166:	uxth	r2, r2
    5168:	orr.w	r2, r2, r3, lsl #16
    516c:	cmp	r7, r1
    516e:	str.w	r2, [ip], #4
    5172:	mov.w	r3, r3, asr #16
    5176:	bhi.n	5158 <__mdiff+0xa4>
    5178:	mvns	r5, r5
    517a:	add	r5, r7
    517c:	bic.w	r5, r5, #3
    5180:	adds	r5, #4
    5182:	add	r4, r5
    5184:	subs	r4, #4
    5186:	cbnz	r2, 5192 <__mdiff+0xde>
    5188:	ldr.w	r3, [r4, #-4]!
    518c:	subs	r6, #1
    518e:	cmp	r3, #0
    5190:	beq.n	5188 <__mdiff+0xd4>
    5192:	str	r6, [r0, #16]
    5194:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5198:	movs	r1, #0
    519a:	bl	4c60 <_Balloc>
    519e:	movs	r2, #1
    51a0:	movs	r3, #0
    51a2:	str	r2, [r0, #16]
    51a4:	str	r3, [r0, #20]
    51a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    51aa:	mov	r4, r5
    51ac:	mov.w	r9, #0
    51b0:	mov	r5, r2
    51b2:	b.n	5104 <__mdiff+0x50>
    51b4:	mov	r3, r7
    51b6:	add.w	r4, r7, #20
    51ba:	add.w	r5, r8, #20
    51be:	mov	r7, r8
    51c0:	mov.w	r9, #1
    51c4:	mov	r8, r3
    51c6:	b.n	5104 <__mdiff+0x50>

000051c8 <__d2b>:
    51c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51cc:	vmov	r6, r7, d0
    51d0:	sub	sp, #12
    51d2:	mov	r8, r1
    51d4:	movs	r1, #1
    51d6:	mov	r4, r7
    51d8:	ubfx	r5, r7, #20, #11
    51dc:	mov	r7, r2
    51de:	bl	4c60 <_Balloc>
    51e2:	ubfx	r4, r4, #0, #20
    51e6:	mov	r9, r0
    51e8:	cbz	r5, 51ee <__d2b+0x26>
    51ea:	orr.w	r4, r4, #1048576	; 0x100000
    51ee:	str	r4, [sp, #4]
    51f0:	cbz	r6, 523a <__d2b+0x72>
    51f2:	add	r0, sp, #8
    51f4:	str.w	r6, [r0, #-8]!
    51f8:	bl	4d80 <__lo0bits>
    51fc:	cmp	r0, #0
    51fe:	bne.n	526a <__d2b+0xa2>
    5200:	ldmia.w	sp, {r2, r3}
    5204:	str.w	r2, [r9, #20]
    5208:	cmp	r3, #0
    520a:	ite	eq
    520c:	moveq	r1, #1
    520e:	movne	r1, #2
    5210:	str.w	r3, [r9, #24]
    5214:	str.w	r1, [r9, #16]
    5218:	cbnz	r5, 5252 <__d2b+0x8a>
    521a:	add.w	r3, r9, r1, lsl #2
    521e:	subw	r0, r0, #1074	; 0x432
    5222:	str.w	r0, [r8]
    5226:	ldr	r0, [r3, #16]
    5228:	bl	4d40 <__hi0bits>
    522c:	rsb	r0, r0, r1, lsl #5
    5230:	str	r0, [r7, #0]
    5232:	mov	r0, r9
    5234:	add	sp, #12
    5236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    523a:	add	r0, sp, #4
    523c:	bl	4d80 <__lo0bits>
    5240:	ldr	r3, [sp, #4]
    5242:	str.w	r3, [r9, #20]
    5246:	movs	r1, #1
    5248:	adds	r0, #32
    524a:	str.w	r1, [r9, #16]
    524e:	cmp	r5, #0
    5250:	beq.n	521a <__d2b+0x52>
    5252:	subw	r5, r5, #1075	; 0x433
    5256:	add	r5, r0
    5258:	rsb	r0, r0, #53	; 0x35
    525c:	str.w	r5, [r8]
    5260:	str	r0, [r7, #0]
    5262:	mov	r0, r9
    5264:	add	sp, #12
    5266:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    526a:	ldmia.w	sp, {r2, r3}
    526e:	rsb	r1, r0, #32
    5272:	lsl.w	r1, r3, r1
    5276:	orrs	r2, r1
    5278:	lsrs	r3, r0
    527a:	str	r3, [sp, #4]
    527c:	str.w	r2, [r9, #20]
    5280:	b.n	5208 <__d2b+0x40>
    5282:	nop

00005284 <_vasnprintf_r>:
    5284:	push	{r4, r5, r6, lr}
    5286:	mov	r5, r2
    5288:	sub	sp, #104	; 0x68
    528a:	ldr	r4, [r2, #0]
    528c:	cbz	r1, 5292 <_vasnprintf_r+0xe>
    528e:	cmp	r4, #0
    5290:	bne.n	52c8 <_vasnprintf_r+0x44>
    5292:	movs	r4, #0
    5294:	mov.w	r2, #648	; 0x288
    5298:	strh.w	r2, [sp, #12]
    529c:	str	r4, [sp, #0]
    529e:	str	r4, [sp, #16]
    52a0:	mov	r2, r3
    52a2:	movw	r6, #65535	; 0xffff
    52a6:	ldr	r3, [sp, #120]	; 0x78
    52a8:	str	r4, [sp, #8]
    52aa:	mov	r1, sp
    52ac:	str	r4, [sp, #20]
    52ae:	strh.w	r6, [sp, #14]
    52b2:	bl	62a8 <_svfprintf_r>
    52b6:	cmp	r0, #0
    52b8:	blt.n	52de <_vasnprintf_r+0x5a>
    52ba:	ldr	r3, [sp, #0]
    52bc:	str	r0, [r5, #0]
    52be:	movs	r2, #0
    52c0:	strb	r2, [r3, #0]
    52c2:	ldr	r0, [sp, #16]
    52c4:	add	sp, #104	; 0x68
    52c6:	pop	{r4, r5, r6, pc}
    52c8:	mov.w	r2, #1544	; 0x608
    52cc:	str	r1, [sp, #0]
    52ce:	str	r1, [sp, #16]
    52d0:	strh.w	r2, [sp, #12]
    52d4:	bge.n	52a0 <_vasnprintf_r+0x1c>
    52d6:	movs	r3, #139	; 0x8b
    52d8:	str	r3, [r0, #0]
    52da:	movs	r0, #0
    52dc:	b.n	52c4 <_vasnprintf_r+0x40>
    52de:	movs	r0, #0
    52e0:	b.n	52c4 <_vasnprintf_r+0x40>
    52e2:	nop

000052e4 <_calloc_r>:
    52e4:	push	{r4, lr}
    52e6:	mul.w	r1, r2, r1
    52ea:	bl	3bac <_malloc_r>
    52ee:	mov	r4, r0
    52f0:	cbz	r0, 532a <_calloc_r+0x46>
    52f2:	ldr.w	r2, [r0, #-4]
    52f6:	bic.w	r2, r2, #3
    52fa:	subs	r2, #4
    52fc:	cmp	r2, #36	; 0x24
    52fe:	bhi.n	5332 <_calloc_r+0x4e>
    5300:	cmp	r2, #19
    5302:	bls.n	532e <_calloc_r+0x4a>
    5304:	movs	r3, #0
    5306:	cmp	r2, #27
    5308:	str	r3, [r0, #0]
    530a:	str	r3, [r0, #4]
    530c:	bls.n	533c <_calloc_r+0x58>
    530e:	cmp	r2, #36	; 0x24
    5310:	str	r3, [r0, #8]
    5312:	str	r3, [r0, #12]
    5314:	iteee	ne
    5316:	addne.w	r2, r0, #16
    531a:	streq	r3, [r0, #16]
    531c:	streq	r3, [r0, #20]
    531e:	addeq.w	r2, r0, #24
    5322:	movs	r3, #0
    5324:	str	r3, [r2, #0]
    5326:	str	r3, [r2, #4]
    5328:	str	r3, [r2, #8]
    532a:	mov	r0, r4
    532c:	pop	{r4, pc}
    532e:	mov	r2, r0
    5330:	b.n	5322 <_calloc_r+0x3e>
    5332:	movs	r1, #0
    5334:	bl	4210 <memset>
    5338:	mov	r0, r4
    533a:	pop	{r4, pc}
    533c:	add.w	r2, r0, #8
    5340:	b.n	5322 <_calloc_r+0x3e>
    5342:	nop

00005344 <quorem>:
    5344:	ldr	r2, [r0, #16]
    5346:	ldr	r3, [r1, #16]
    5348:	cmp	r3, r2
    534a:	bgt.w	5468 <quorem+0x124>
    534e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5352:	add.w	r8, r3, #4294967295
    5356:	add.w	r7, r1, #20
    535a:	add.w	fp, r0, #20
    535e:	ldr.w	r2, [r7, r8, lsl #2]
    5362:	ldr.w	r3, [fp, r8, lsl #2]
    5366:	mov.w	r4, r8, lsl #2
    536a:	sub	sp, #12
    536c:	adds	r2, #1
    536e:	udiv	r9, r3, r2
    5372:	add.w	r3, fp, r4
    5376:	str	r4, [sp, #0]
    5378:	add.w	sl, r7, r4
    537c:	str	r3, [sp, #4]
    537e:	cmp.w	r9, #0
    5382:	beq.n	53f8 <quorem+0xb4>
    5384:	movs	r5, #0
    5386:	mov	ip, r7
    5388:	mov	lr, fp
    538a:	mov	r3, r5
    538c:	ldr.w	r6, [ip], #4
    5390:	ldr.w	r2, [lr]
    5394:	uxth	r4, r6
    5396:	mla	r5, r9, r4, r5
    539a:	lsrs	r6, r6, #16
    539c:	lsrs	r4, r5, #16
    539e:	mla	r4, r9, r6, r4
    53a2:	uxth	r5, r5
    53a4:	subs	r3, r3, r5
    53a6:	uxth	r6, r4
    53a8:	uxtah	r3, r3, r2
    53ac:	rsb	r6, r6, r2, lsr #16
    53b0:	add.w	r6, r6, r3, asr #16
    53b4:	uxth	r3, r3
    53b6:	orr.w	r3, r3, r6, lsl #16
    53ba:	cmp	sl, ip
    53bc:	str.w	r3, [lr], #4
    53c0:	mov.w	r5, r4, lsr #16
    53c4:	mov.w	r3, r6, asr #16
    53c8:	bcs.n	538c <quorem+0x48>
    53ca:	ldr	r3, [sp, #0]
    53cc:	ldr.w	r3, [fp, r3]
    53d0:	cbnz	r3, 53f8 <quorem+0xb4>
    53d2:	ldr	r4, [sp, #4]
    53d4:	subs	r3, r4, #4
    53d6:	cmp	fp, r3
    53d8:	bcs.n	53f4 <quorem+0xb0>
    53da:	ldr.w	r3, [r4, #-4]
    53de:	cbnz	r3, 53f4 <quorem+0xb0>
    53e0:	sub.w	r3, r4, #8
    53e4:	b.n	53ec <quorem+0xa8>
    53e6:	ldr	r2, [r3, #0]
    53e8:	subs	r3, #4
    53ea:	cbnz	r2, 53f4 <quorem+0xb0>
    53ec:	cmp	fp, r3
    53ee:	add.w	r8, r8, #4294967295
    53f2:	bcc.n	53e6 <quorem+0xa2>
    53f4:	str.w	r8, [r0, #16]
    53f8:	mov	r4, r0
    53fa:	bl	5070 <__mcmp>
    53fe:	cmp	r0, #0
    5400:	blt.n	5460 <quorem+0x11c>
    5402:	add.w	r9, r9, #1
    5406:	mov	r5, fp
    5408:	movs	r3, #0
    540a:	ldr.w	r1, [r7], #4
    540e:	ldr	r0, [r5, #0]
    5410:	uxth	r2, r1
    5412:	subs	r2, r3, r2
    5414:	lsrs	r1, r1, #16
    5416:	uxtah	r2, r2, r0
    541a:	rsb	r3, r1, r0, lsr #16
    541e:	add.w	r3, r3, r2, asr #16
    5422:	uxth	r1, r2
    5424:	orr.w	r1, r1, r3, lsl #16
    5428:	cmp	sl, r7
    542a:	str.w	r1, [r5], #4
    542e:	mov.w	r3, r3, asr #16
    5432:	bcs.n	540a <quorem+0xc6>
    5434:	ldr.w	r2, [fp, r8, lsl #2]
    5438:	add.w	r3, fp, r8, lsl #2
    543c:	cbnz	r2, 5460 <quorem+0x11c>
    543e:	subs	r2, r3, #4
    5440:	cmp	fp, r2
    5442:	bcs.n	545c <quorem+0x118>
    5444:	ldr.w	r2, [r3, #-4]
    5448:	cbnz	r2, 545c <quorem+0x118>
    544a:	subs	r3, #8
    544c:	b.n	5454 <quorem+0x110>
    544e:	ldr	r2, [r3, #0]
    5450:	subs	r3, #4
    5452:	cbnz	r2, 545c <quorem+0x118>
    5454:	cmp	fp, r3
    5456:	add.w	r8, r8, #4294967295
    545a:	bcc.n	544e <quorem+0x10a>
    545c:	str.w	r8, [r4, #16]
    5460:	mov	r0, r9
    5462:	add	sp, #12
    5464:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5468:	movs	r0, #0
    546a:	bx	lr
    546c:			; <UNDEFINED> instruction: 0xffffffff

00005470 <_dtoa_r>:
    5470:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5474:	vmov	r6, r7, d0
    5478:	sub	sp, #108	; 0x6c
    547a:	ldr	r4, [r0, #64]	; 0x40
    547c:	ldr	r5, [sp, #144]	; 0x90
    547e:	str	r1, [sp, #0]
    5480:	mov	r9, r0
    5482:	str	r2, [sp, #20]
    5484:	str	r3, [sp, #12]
    5486:	vmov	sl, s0
    548a:	mov	fp, r7
    548c:	cbz	r4, 54a4 <_dtoa_r+0x34>
    548e:	ldr	r2, [r0, #68]	; 0x44
    5490:	str	r2, [r4, #4]
    5492:	movs	r3, #1
    5494:	lsls	r3, r2
    5496:	str	r3, [r4, #8]
    5498:	mov	r1, r4
    549a:	bl	4cac <_Bfree>
    549e:	movs	r3, #0
    54a0:	str.w	r3, [r9, #64]	; 0x40
    54a4:	cmp.w	fp, #0
    54a8:	mov	r4, fp
    54aa:	blt.n	5516 <_dtoa_r+0xa6>
    54ac:	movs	r3, #0
    54ae:	str	r3, [r5, #0]
    54b0:	ldr	r3, [pc, #644]	; (5738 <_dtoa_r+0x2c8>)
    54b2:	mov	r2, r3
    54b4:	ands	r3, r4
    54b6:	cmp	r3, r2
    54b8:	beq.n	54e8 <_dtoa_r+0x78>
    54ba:	movs	r2, #0
    54bc:	movs	r3, #0
    54be:	mov	r0, sl
    54c0:	mov	r1, fp
    54c2:	bl	3a98 <__aeabi_dcmpeq>
    54c6:	mov	r6, sl
    54c8:	mov	r7, fp
    54ca:	mov	r8, r0
    54cc:	cbz	r0, 5522 <_dtoa_r+0xb2>
    54ce:	ldr	r2, [sp, #12]
    54d0:	movs	r3, #1
    54d2:	str	r3, [r2, #0]
    54d4:	ldr	r3, [sp, #148]	; 0x94
    54d6:	cmp	r3, #0
    54d8:	beq.w	5658 <_dtoa_r+0x1e8>
    54dc:	ldr	r0, [pc, #604]	; (573c <_dtoa_r+0x2cc>)
    54de:	str	r0, [r3, #0]
    54e0:	subs	r0, #1
    54e2:	add	sp, #108	; 0x6c
    54e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54e8:	ldr	r2, [sp, #12]
    54ea:	movw	r3, #9999	; 0x270f
    54ee:	str	r3, [r2, #0]
    54f0:	cmp.w	sl, #0
    54f4:	beq.w	562c <_dtoa_r+0x1bc>
    54f8:	ldr	r0, [pc, #580]	; (5740 <_dtoa_r+0x2d0>)
    54fa:	ldr	r3, [sp, #148]	; 0x94
    54fc:	cmp	r3, #0
    54fe:	beq.n	54e2 <_dtoa_r+0x72>
    5500:	ldrb	r3, [r0, #3]
    5502:	cmp	r3, #0
    5504:	beq.w	565c <_dtoa_r+0x1ec>
    5508:	add.w	r3, r0, #8
    550c:	ldr	r2, [sp, #148]	; 0x94
    550e:	str	r3, [r2, #0]
    5510:	add	sp, #108	; 0x6c
    5512:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5516:	movs	r3, #1
    5518:	bic.w	r4, fp, #2147483648	; 0x80000000
    551c:	str	r3, [r5, #0]
    551e:	mov	fp, r4
    5520:	b.n	54b0 <_dtoa_r+0x40>
    5522:	add	r2, sp, #96	; 0x60
    5524:	add	r1, sp, #100	; 0x64
    5526:	vmov	d0, r6, r7
    552a:	mov	r0, r9
    552c:	bl	51c8 <__d2b>
    5530:	lsrs	r5, r4, #20
    5532:	str	r0, [sp, #40]	; 0x28
    5534:	bne.w	563e <_dtoa_r+0x1ce>
    5538:	ldr	r5, [sp, #96]	; 0x60
    553a:	ldr	r6, [sp, #100]	; 0x64
    553c:	add	r6, r5
    553e:	addw	r3, r6, #1074	; 0x432
    5542:	cmp	r3, #32
    5544:	ble.w	5a58 <_dtoa_r+0x5e8>
    5548:	rsb	r3, r3, #64	; 0x40
    554c:	addw	r0, r6, #1042	; 0x412
    5550:	lsls	r4, r3
    5552:	lsr.w	r0, sl, r0
    5556:	orrs	r0, r4
    5558:	bl	34dc <__aeabi_ui2d>
    555c:	movs	r3, #1
    555e:	subs	r4, r6, #1
    5560:	sub.w	r1, r1, #32505856	; 0x1f00000
    5564:	str	r3, [sp, #60]	; 0x3c
    5566:	movs	r2, #0
    5568:	ldr	r3, [pc, #472]	; (5744 <_dtoa_r+0x2d4>)
    556a:	bl	3260 <__aeabi_dsub>
    556e:	add	r3, pc, #432	; (adr r3, 5720 <_dtoa_r+0x2b0>)
    5570:	ldrd	r2, r3, [r3]
    5574:	bl	35c8 <__aeabi_dmul>
    5578:	add	r3, pc, #428	; (adr r3, 5728 <_dtoa_r+0x2b8>)
    557a:	ldrd	r2, r3, [r3]
    557e:	bl	3264 <__adddf3>
    5582:	mov	r6, r0
    5584:	mov	r0, r4
    5586:	mov	r7, r1
    5588:	bl	34fc <__aeabi_i2d>
    558c:	add	r3, pc, #416	; (adr r3, 5730 <_dtoa_r+0x2c0>)
    558e:	ldrd	r2, r3, [r3]
    5592:	bl	35c8 <__aeabi_dmul>
    5596:	mov	r2, r0
    5598:	mov	r3, r1
    559a:	mov	r0, r6
    559c:	mov	r1, r7
    559e:	bl	3264 <__adddf3>
    55a2:	mov	r6, r0
    55a4:	mov	r7, r1
    55a6:	bl	7a8c <__aeabi_d2iz>
    55aa:	movs	r2, #0
    55ac:	str	r0, [sp, #16]
    55ae:	movs	r3, #0
    55b0:	mov	r0, r6
    55b2:	mov	r1, r7
    55b4:	bl	3aac <__aeabi_dcmplt>
    55b8:	cmp	r0, #0
    55ba:	bne.w	5a0e <_dtoa_r+0x59e>
    55be:	ldr	r6, [sp, #16]
    55c0:	cmp	r6, #22
    55c2:	bhi.w	5a08 <_dtoa_r+0x598>
    55c6:	ldr	r3, [pc, #384]	; (5748 <_dtoa_r+0x2d8>)
    55c8:	add.w	r3, r3, r6, lsl #3
    55cc:	ldrd	r0, r1, [r3]
    55d0:	mov	r2, sl
    55d2:	mov	r3, fp
    55d4:	bl	3ae8 <__aeabi_dcmpgt>
    55d8:	cmp	r0, #0
    55da:	beq.w	5a62 <_dtoa_r+0x5f2>
    55de:	subs	r3, r6, #1
    55e0:	str	r3, [sp, #16]
    55e2:	movs	r3, #0
    55e4:	str	r3, [sp, #52]	; 0x34
    55e6:	subs	r5, r5, r4
    55e8:	subs.w	r8, r5, #1
    55ec:	bmi.w	5a44 <_dtoa_r+0x5d4>
    55f0:	movs	r3, #0
    55f2:	str	r3, [sp, #28]
    55f4:	ldr	r3, [sp, #16]
    55f6:	cmp	r3, #0
    55f8:	blt.w	5a32 <_dtoa_r+0x5c2>
    55fc:	add	r8, r3
    55fe:	str	r3, [sp, #48]	; 0x30
    5600:	movs	r3, #0
    5602:	str	r3, [sp, #24]
    5604:	ldr	r3, [sp, #0]
    5606:	cmp	r3, #9
    5608:	bhi.n	5660 <_dtoa_r+0x1f0>
    560a:	cmp	r3, #5
    560c:	ble.w	6298 <_dtoa_r+0xe28>
    5610:	subs	r3, #4
    5612:	str	r3, [sp, #0]
    5614:	movs	r6, #0
    5616:	ldr	r3, [sp, #0]
    5618:	subs	r3, #2
    561a:	cmp	r3, #3
    561c:	bhi.w	6266 <_dtoa_r+0xdf6>
    5620:	tbh	[pc, r3, lsl #1]
    5624:	.word	0x0224032b
    5628:	.word	0x04500336
    562c:	ldr	r3, [pc, #272]	; (5740 <_dtoa_r+0x2d0>)
    562e:	ldr	r2, [pc, #284]	; (574c <_dtoa_r+0x2dc>)
    5630:	ubfx	r0, r4, #0, #20
    5634:	cmp	r0, #0
    5636:	ite	ne
    5638:	movne	r0, r3
    563a:	moveq	r0, r2
    563c:	b.n	54fa <_dtoa_r+0x8a>
    563e:	ubfx	r3, fp, #0, #20
    5642:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    5646:	subw	r4, r5, #1023	; 0x3ff
    564a:	mov	r0, sl
    564c:	str.w	r8, [sp, #60]	; 0x3c
    5650:	orr.w	r1, r1, #3145728	; 0x300000
    5654:	ldr	r5, [sp, #96]	; 0x60
    5656:	b.n	5566 <_dtoa_r+0xf6>
    5658:	ldr	r0, [pc, #244]	; (5750 <_dtoa_r+0x2e0>)
    565a:	b.n	54e2 <_dtoa_r+0x72>
    565c:	adds	r3, r0, #3
    565e:	b.n	550c <_dtoa_r+0x9c>
    5660:	movs	r1, #0
    5662:	str.w	r1, [r9, #68]	; 0x44
    5666:	mov	r0, r9
    5668:	mov	r4, r1
    566a:	str	r1, [sp, #0]
    566c:	bl	4c60 <_Balloc>
    5670:	mov.w	r3, #4294967295
    5674:	str	r3, [sp, #32]
    5676:	str	r3, [sp, #56]	; 0x38
    5678:	movs	r3, #1
    567a:	str	r0, [sp, #36]	; 0x24
    567c:	str.w	r0, [r9, #64]	; 0x40
    5680:	str	r4, [sp, #20]
    5682:	str	r3, [sp, #44]	; 0x2c
    5684:	ldr	r3, [sp, #100]	; 0x64
    5686:	cmp	r3, #0
    5688:	blt.w	582c <_dtoa_r+0x3bc>
    568c:	ldr	r2, [sp, #16]
    568e:	cmp	r2, #14
    5690:	bgt.w	582c <_dtoa_r+0x3bc>
    5694:	ldr	r3, [pc, #176]	; (5748 <_dtoa_r+0x2d8>)
    5696:	add.w	r3, r3, r2, lsl #3
    569a:	vldr	d7, [r3]
    569e:	ldr	r3, [sp, #20]
    56a0:	cmp	r3, #0
    56a2:	vstr	d7, [sp]
    56a6:	blt.w	5ca6 <_dtoa_r+0x836>
    56aa:	mov	r6, sl
    56ac:	mov	r7, fp
    56ae:	ldrd	sl, fp, [sp]
    56b2:	mov	r0, r6
    56b4:	mov	r2, sl
    56b6:	mov	r3, fp
    56b8:	mov	r1, r7
    56ba:	bl	381c <__aeabi_ddiv>
    56be:	bl	7a8c <__aeabi_d2iz>
    56c2:	mov	r4, r0
    56c4:	bl	34fc <__aeabi_i2d>
    56c8:	mov	r2, sl
    56ca:	mov	r3, fp
    56cc:	bl	35c8 <__aeabi_dmul>
    56d0:	mov	r3, r1
    56d2:	mov	r2, r0
    56d4:	mov	r1, r7
    56d6:	mov	r0, r6
    56d8:	bl	3260 <__aeabi_dsub>
    56dc:	ldr	r5, [sp, #36]	; 0x24
    56de:	add.w	r3, r4, #48	; 0x30
    56e2:	strb	r3, [r5, #0]
    56e4:	ldr	r3, [sp, #32]
    56e6:	cmp	r3, #1
    56e8:	mov	r6, r0
    56ea:	mov	r7, r1
    56ec:	add.w	r5, r5, #1
    56f0:	beq.n	57b6 <_dtoa_r+0x346>
    56f2:	movs	r2, #0
    56f4:	ldr	r3, [pc, #92]	; (5754 <_dtoa_r+0x2e4>)
    56f6:	bl	35c8 <__aeabi_dmul>
    56fa:	movs	r2, #0
    56fc:	movs	r3, #0
    56fe:	mov	r6, r0
    5700:	mov	r7, r1
    5702:	bl	3a98 <__aeabi_dcmpeq>
    5706:	cmp	r0, #0
    5708:	bne.n	5806 <_dtoa_r+0x396>
    570a:	str.w	r9, [sp, #20]
    570e:	ldr.w	sl, [sp, #32]
    5712:	ldr.w	fp, [sp, #36]	; 0x24
    5716:	ldrd	r8, r9, [sp]
    571a:	b.n	576e <_dtoa_r+0x2fe>
    571c:	nop.w
    5720:	.word	0x636f4361
    5724:	.word	0x3fd287a7
    5728:	.word	0x8b60c8b3
    572c:	.word	0x3fc68a28
    5730:	.word	0x509f79fb
    5734:	.word	0x3fd34413
    5738:	.word	0x7ff00000
    573c:	.word	0x00008335
    5740:	.word	0x00008330
    5744:	.word	0x3ff80000
    5748:	.word	0x00008228
    574c:	.word	0x00008324
    5750:	.word	0x00008334
    5754:	.word	0x40240000
    5758:	bl	35c8 <__aeabi_dmul>
    575c:	movs	r2, #0
    575e:	movs	r3, #0
    5760:	mov	r6, r0
    5762:	mov	r7, r1
    5764:	bl	3a98 <__aeabi_dcmpeq>
    5768:	cmp	r0, #0
    576a:	bne.w	5eca <_dtoa_r+0xa5a>
    576e:	mov	r2, r8
    5770:	mov	r3, r9
    5772:	mov	r0, r6
    5774:	mov	r1, r7
    5776:	bl	381c <__aeabi_ddiv>
    577a:	bl	7a8c <__aeabi_d2iz>
    577e:	mov	r4, r0
    5780:	bl	34fc <__aeabi_i2d>
    5784:	mov	r2, r8
    5786:	mov	r3, r9
    5788:	bl	35c8 <__aeabi_dmul>
    578c:	mov	r2, r0
    578e:	mov	r3, r1
    5790:	mov	r0, r6
    5792:	mov	r1, r7
    5794:	bl	3260 <__aeabi_dsub>
    5798:	add.w	lr, r4, #48	; 0x30
    579c:	strb.w	lr, [r5], #1
    57a0:	rsb	lr, fp, r5
    57a4:	cmp	lr, sl
    57a6:	mov	r6, r0
    57a8:	mov	r7, r1
    57aa:	mov.w	r2, #0
    57ae:	ldr	r3, [pc, #696]	; (5a68 <_dtoa_r+0x5f8>)
    57b0:	bne.n	5758 <_dtoa_r+0x2e8>
    57b2:	ldr.w	r9, [sp, #20]
    57b6:	mov	r2, r6
    57b8:	mov	r3, r7
    57ba:	mov	r0, r6
    57bc:	mov	r1, r7
    57be:	bl	3264 <__adddf3>
    57c2:	mov	r6, r0
    57c4:	mov	r7, r1
    57c6:	mov	r2, r0
    57c8:	mov	r3, r1
    57ca:	ldrd	r0, r1, [sp]
    57ce:	bl	3aac <__aeabi_dcmplt>
    57d2:	cbnz	r0, 57e6 <_dtoa_r+0x376>
    57d4:	mov	r2, r6
    57d6:	mov	r3, r7
    57d8:	ldrd	r0, r1, [sp]
    57dc:	bl	3a98 <__aeabi_dcmpeq>
    57e0:	cbz	r0, 5806 <_dtoa_r+0x396>
    57e2:	lsls	r3, r4, #31
    57e4:	bpl.n	5806 <_dtoa_r+0x396>
    57e6:	ldrb.w	r4, [r5, #-1]
    57ea:	ldr	r2, [sp, #36]	; 0x24
    57ec:	subs	r3, r5, #1
    57ee:	b.n	57fa <_dtoa_r+0x38a>
    57f0:	cmp	r2, r3
    57f2:	beq.w	5fee <_dtoa_r+0xb7e>
    57f6:	ldrb.w	r4, [r3, #-1]!
    57fa:	cmp	r4, #57	; 0x39
    57fc:	add.w	r5, r3, #1
    5800:	beq.n	57f0 <_dtoa_r+0x380>
    5802:	adds	r4, #1
    5804:	strb	r4, [r3, #0]
    5806:	ldr	r1, [sp, #40]	; 0x28
    5808:	mov	r0, r9
    580a:	bl	4cac <_Bfree>
    580e:	movs	r2, #0
    5810:	ldr	r3, [sp, #16]
    5812:	strb	r2, [r5, #0]
    5814:	ldr	r2, [sp, #12]
    5816:	adds	r3, #1
    5818:	str	r3, [r2, #0]
    581a:	ldr	r3, [sp, #148]	; 0x94
    581c:	cmp	r3, #0
    581e:	beq.w	5f58 <_dtoa_r+0xae8>
    5822:	ldr	r0, [sp, #36]	; 0x24
    5824:	str	r5, [r3, #0]
    5826:	add	sp, #108	; 0x6c
    5828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    582c:	ldr	r2, [sp, #44]	; 0x2c
    582e:	cmp	r2, #0
    5830:	beq.w	5a50 <_dtoa_r+0x5e0>
    5834:	ldr	r2, [sp, #0]
    5836:	cmp	r2, #1
    5838:	ble.w	5cea <_dtoa_r+0x87a>
    583c:	ldr	r3, [sp, #32]
    583e:	ldr	r2, [sp, #24]
    5840:	subs	r7, r3, #1
    5842:	cmp	r2, r7
    5844:	blt.w	5f5e <_dtoa_r+0xaee>
    5848:	subs	r7, r2, r7
    584a:	ldr	r3, [sp, #32]
    584c:	cmp	r3, #0
    584e:	blt.w	6152 <_dtoa_r+0xce2>
    5852:	ldr	r5, [sp, #28]
    5854:	ldr	r3, [sp, #32]
    5856:	ldr	r2, [sp, #28]
    5858:	movs	r1, #1
    585a:	add	r2, r3
    585c:	mov	r0, r9
    585e:	str	r2, [sp, #28]
    5860:	add	r8, r3
    5862:	bl	4ddc <__i2b>
    5866:	mov	r6, r0
    5868:	cbz	r5, 5884 <_dtoa_r+0x414>
    586a:	cmp.w	r8, #0
    586e:	ble.n	5884 <_dtoa_r+0x414>
    5870:	cmp	r5, r8
    5872:	ldr	r2, [sp, #28]
    5874:	mov	r3, r5
    5876:	it	ge
    5878:	movge	r3, r8
    587a:	subs	r2, r2, r3
    587c:	str	r2, [sp, #28]
    587e:	subs	r5, r5, r3
    5880:	rsb	r8, r3, r8
    5884:	ldr	r3, [sp, #24]
    5886:	cmp	r3, #0
    5888:	ble.w	5e76 <_dtoa_r+0xa06>
    588c:	ldr	r2, [sp, #44]	; 0x2c
    588e:	cmp	r2, #0
    5890:	beq.w	5c98 <_dtoa_r+0x828>
    5894:	cmp	r7, #0
    5896:	beq.w	5c98 <_dtoa_r+0x828>
    589a:	mov	r1, r6
    589c:	mov	r2, r7
    589e:	mov	r0, r9
    58a0:	bl	4f20 <__pow5mult>
    58a4:	ldr	r2, [sp, #40]	; 0x28
    58a6:	mov	r1, r0
    58a8:	mov	r6, r0
    58aa:	mov	r0, r9
    58ac:	bl	4df0 <__multiply>
    58b0:	ldr	r1, [sp, #40]	; 0x28
    58b2:	mov	r4, r0
    58b4:	mov	r0, r9
    58b6:	bl	4cac <_Bfree>
    58ba:	ldr	r3, [sp, #24]
    58bc:	subs	r3, r3, r7
    58be:	str	r3, [sp, #24]
    58c0:	bne.w	5c96 <_dtoa_r+0x826>
    58c4:	movs	r1, #1
    58c6:	mov	r0, r9
    58c8:	bl	4ddc <__i2b>
    58cc:	ldr	r3, [sp, #48]	; 0x30
    58ce:	str	r0, [sp, #24]
    58d0:	cmp	r3, #0
    58d2:	beq.w	5d00 <_dtoa_r+0x890>
    58d6:	mov	r1, r0
    58d8:	mov	r2, r3
    58da:	mov	r0, r9
    58dc:	bl	4f20 <__pow5mult>
    58e0:	ldr	r3, [sp, #0]
    58e2:	str	r0, [sp, #24]
    58e4:	cmp	r3, #1
    58e6:	ble.w	5ed0 <_dtoa_r+0xa60>
    58ea:	movs	r7, #0
    58ec:	ldr	r2, [sp, #24]
    58ee:	ldr	r3, [r2, #16]
    58f0:	add.w	r3, r2, r3, lsl #2
    58f4:	ldr	r0, [r3, #16]
    58f6:	bl	4d40 <__hi0bits>
    58fa:	rsb	r0, r0, #32
    58fe:	add	r0, r8
    5900:	ands.w	r0, r0, #31
    5904:	beq.w	5cfc <_dtoa_r+0x88c>
    5908:	rsb	r3, r0, #32
    590c:	cmp	r3, #4
    590e:	ble.w	628c <_dtoa_r+0xe1c>
    5912:	rsb	r0, r0, #28
    5916:	ldr	r3, [sp, #28]
    5918:	add	r3, r0
    591a:	str	r3, [sp, #28]
    591c:	add	r5, r0
    591e:	add	r8, r0
    5920:	ldr	r3, [sp, #28]
    5922:	cmp	r3, #0
    5924:	ble.n	5932 <_dtoa_r+0x4c2>
    5926:	mov	r1, r4
    5928:	mov	r2, r3
    592a:	mov	r0, r9
    592c:	bl	4fc0 <__lshift>
    5930:	mov	r4, r0
    5932:	cmp.w	r8, #0
    5936:	ble.n	5944 <_dtoa_r+0x4d4>
    5938:	mov	r2, r8
    593a:	ldr	r1, [sp, #24]
    593c:	mov	r0, r9
    593e:	bl	4fc0 <__lshift>
    5942:	str	r0, [sp, #24]
    5944:	ldr	r3, [sp, #52]	; 0x34
    5946:	cmp	r3, #0
    5948:	bne.w	5e40 <_dtoa_r+0x9d0>
    594c:	ldr	r3, [sp, #32]
    594e:	cmp	r3, #0
    5950:	ble.w	5e7a <_dtoa_r+0xa0a>
    5954:	ldr	r3, [sp, #44]	; 0x2c
    5956:	cmp	r3, #0
    5958:	bne.w	5d44 <_dtoa_r+0x8d4>
    595c:	ldr.w	fp, [sp, #36]	; 0x24
    5960:	ldr	r7, [sp, #32]
    5962:	ldr.w	r8, [sp, #24]
    5966:	mov	r5, fp
    5968:	b.n	5970 <_dtoa_r+0x500>
    596a:	bl	4cc0 <__multadd>
    596e:	mov	r4, r0
    5970:	mov	r1, r8
    5972:	mov	r0, r4
    5974:	bl	5344 <quorem>
    5978:	add.w	sl, r0, #48	; 0x30
    597c:	strb.w	sl, [r5], #1
    5980:	rsb	r3, fp, r5
    5984:	cmp	r3, r7
    5986:	mov.w	r2, #10
    598a:	mov.w	r3, #0
    598e:	mov	r1, r4
    5990:	mov	r0, r9
    5992:	blt.n	596a <_dtoa_r+0x4fa>
    5994:	ldr	r3, [sp, #36]	; 0x24
    5996:	ldr	r2, [sp, #32]
    5998:	cmp	r2, #1
    599a:	ite	ge
    599c:	addge	r3, r3, r2
    599e:	addlt	r3, #1
    59a0:	mov	r5, r3
    59a2:	mov.w	fp, #0
    59a6:	mov	r1, r4
    59a8:	movs	r2, #1
    59aa:	mov	r0, r9
    59ac:	bl	4fc0 <__lshift>
    59b0:	ldr	r1, [sp, #24]
    59b2:	str	r0, [sp, #40]	; 0x28
    59b4:	bl	5070 <__mcmp>
    59b8:	cmp	r0, #0
    59ba:	ble.w	5fc8 <_dtoa_r+0xb58>
    59be:	ldrb.w	r2, [r5, #-1]
    59c2:	ldr	r1, [sp, #36]	; 0x24
    59c4:	subs	r3, r5, #1
    59c6:	b.n	59d2 <_dtoa_r+0x562>
    59c8:	cmp	r3, r1
    59ca:	beq.w	5eb6 <_dtoa_r+0xa46>
    59ce:	ldrb.w	r2, [r3, #-1]!
    59d2:	cmp	r2, #57	; 0x39
    59d4:	add.w	r5, r3, #1
    59d8:	beq.n	59c8 <_dtoa_r+0x558>
    59da:	adds	r2, #1
    59dc:	strb	r2, [r3, #0]
    59de:	ldr	r1, [sp, #24]
    59e0:	mov	r0, r9
    59e2:	bl	4cac <_Bfree>
    59e6:	cmp	r6, #0
    59e8:	beq.w	5806 <_dtoa_r+0x396>
    59ec:	cmp.w	fp, #0
    59f0:	beq.n	59fe <_dtoa_r+0x58e>
    59f2:	cmp	fp, r6
    59f4:	beq.n	59fe <_dtoa_r+0x58e>
    59f6:	mov	r1, fp
    59f8:	mov	r0, r9
    59fa:	bl	4cac <_Bfree>
    59fe:	mov	r1, r6
    5a00:	mov	r0, r9
    5a02:	bl	4cac <_Bfree>
    5a06:	b.n	5806 <_dtoa_r+0x396>
    5a08:	movs	r3, #1
    5a0a:	str	r3, [sp, #52]	; 0x34
    5a0c:	b.n	55e6 <_dtoa_r+0x176>
    5a0e:	ldr.w	r8, [sp, #16]
    5a12:	mov	r0, r8
    5a14:	bl	34fc <__aeabi_i2d>
    5a18:	mov	r2, r0
    5a1a:	mov	r3, r1
    5a1c:	mov	r0, r6
    5a1e:	mov	r1, r7
    5a20:	bl	3a98 <__aeabi_dcmpeq>
    5a24:	cmp	r0, #0
    5a26:	bne.w	55be <_dtoa_r+0x14e>
    5a2a:	add.w	r3, r8, #4294967295
    5a2e:	str	r3, [sp, #16]
    5a30:	b.n	55be <_dtoa_r+0x14e>
    5a32:	ldr	r2, [sp, #28]
    5a34:	ldr	r3, [sp, #16]
    5a36:	subs	r2, r2, r3
    5a38:	negs	r3, r3
    5a3a:	str	r3, [sp, #24]
    5a3c:	movs	r3, #0
    5a3e:	str	r2, [sp, #28]
    5a40:	str	r3, [sp, #48]	; 0x30
    5a42:	b.n	5604 <_dtoa_r+0x194>
    5a44:	rsb	r3, r8, #0
    5a48:	str	r3, [sp, #28]
    5a4a:	mov.w	r8, #0
    5a4e:	b.n	55f4 <_dtoa_r+0x184>
    5a50:	ldr	r7, [sp, #24]
    5a52:	ldr	r5, [sp, #28]
    5a54:	ldr	r6, [sp, #44]	; 0x2c
    5a56:	b.n	5868 <_dtoa_r+0x3f8>
    5a58:	rsb	r4, r3, #32
    5a5c:	lsl.w	r0, sl, r4
    5a60:	b.n	5558 <_dtoa_r+0xe8>
    5a62:	str	r0, [sp, #52]	; 0x34
    5a64:	b.n	55e6 <_dtoa_r+0x176>
    5a66:	nop
    5a68:	.word	0x40240000
    5a6c:	movs	r3, #0
    5a6e:	str	r3, [sp, #44]	; 0x2c
    5a70:	ldr	r3, [sp, #16]
    5a72:	ldr	r2, [sp, #20]
    5a74:	add	r3, r2
    5a76:	str	r3, [sp, #56]	; 0x38
    5a78:	adds	r3, #1
    5a7a:	cmp	r3, #0
    5a7c:	str	r3, [sp, #32]
    5a7e:	ble.w	5f7c <_dtoa_r+0xb0c>
    5a82:	ldr	r4, [sp, #32]
    5a84:	mov	r5, r4
    5a86:	movs	r1, #0
    5a88:	cmp	r5, #23
    5a8a:	str.w	r1, [r9, #68]	; 0x44
    5a8e:	bls.n	5aa8 <_dtoa_r+0x638>
    5a90:	movs	r2, #1
    5a92:	movs	r3, #4
    5a94:	lsls	r3, r3, #1
    5a96:	add.w	r0, r3, #20
    5a9a:	cmp	r0, r5
    5a9c:	mov	r1, r2
    5a9e:	add.w	r2, r2, #1
    5aa2:	bls.n	5a94 <_dtoa_r+0x624>
    5aa4:	str.w	r1, [r9, #68]	; 0x44
    5aa8:	mov	r0, r9
    5aaa:	bl	4c60 <_Balloc>
    5aae:	cmp	r4, #14
    5ab0:	str	r0, [sp, #36]	; 0x24
    5ab2:	str.w	r0, [r9, #64]	; 0x40
    5ab6:	bhi.w	5684 <_dtoa_r+0x214>
    5aba:	cmp	r6, #0
    5abc:	beq.w	5684 <_dtoa_r+0x214>
    5ac0:	ldr	r1, [sp, #16]
    5ac2:	cmp	r1, #0
    5ac4:	strd	sl, fp, [sp, #64]	; 0x40
    5ac8:	ble.w	6000 <_dtoa_r+0xb90>
    5acc:	ldr	r3, [pc, #576]	; (5d10 <_dtoa_r+0x8a0>)
    5ace:	and.w	r2, r1, #15
    5ad2:	asrs	r6, r1, #4
    5ad4:	add.w	r3, r3, r2, lsl #3
    5ad8:	lsls	r0, r6, #27
    5ada:	ldrd	r4, r5, [r3]
    5ade:	bpl.w	5f6e <_dtoa_r+0xafe>
    5ae2:	ldr	r3, [pc, #560]	; (5d14 <_dtoa_r+0x8a4>)
    5ae4:	mov	r0, sl
    5ae6:	mov	r1, fp
    5ae8:	ldrd	r2, r3, [r3, #32]
    5aec:	bl	381c <__aeabi_ddiv>
    5af0:	strd	r0, r1, [sp, #72]	; 0x48
    5af4:	and.w	r6, r6, #15
    5af8:	mov.w	sl, #3
    5afc:	cbz	r6, 5b20 <_dtoa_r+0x6b0>
    5afe:	ldr	r7, [pc, #532]	; (5d14 <_dtoa_r+0x8a4>)
    5b00:	lsls	r1, r6, #31
    5b02:	bpl.n	5b18 <_dtoa_r+0x6a8>
    5b04:	mov	r0, r4
    5b06:	mov	r1, r5
    5b08:	ldrd	r2, r3, [r7]
    5b0c:	bl	35c8 <__aeabi_dmul>
    5b10:	add.w	sl, sl, #1
    5b14:	mov	r4, r0
    5b16:	mov	r5, r1
    5b18:	asrs	r6, r6, #1
    5b1a:	add.w	r7, r7, #8
    5b1e:	bne.n	5b00 <_dtoa_r+0x690>
    5b20:	mov	r2, r4
    5b22:	mov	r3, r5
    5b24:	ldrd	r0, r1, [sp, #72]	; 0x48
    5b28:	bl	381c <__aeabi_ddiv>
    5b2c:	mov	r6, r0
    5b2e:	mov	r7, r1
    5b30:	ldr	r3, [sp, #52]	; 0x34
    5b32:	cbz	r3, 5b46 <_dtoa_r+0x6d6>
    5b34:	movs	r2, #0
    5b36:	ldr	r3, [pc, #480]	; (5d18 <_dtoa_r+0x8a8>)
    5b38:	mov	r0, r6
    5b3a:	mov	r1, r7
    5b3c:	bl	3aac <__aeabi_dcmplt>
    5b40:	cmp	r0, #0
    5b42:	bne.w	617a <_dtoa_r+0xd0a>
    5b46:	mov	r0, sl
    5b48:	bl	34fc <__aeabi_i2d>
    5b4c:	mov	r2, r6
    5b4e:	mov	r3, r7
    5b50:	bl	35c8 <__aeabi_dmul>
    5b54:	ldr	r3, [pc, #452]	; (5d1c <_dtoa_r+0x8ac>)
    5b56:	movs	r2, #0
    5b58:	bl	3264 <__adddf3>
    5b5c:	ldr	r3, [sp, #32]
    5b5e:	mov	r4, r0
    5b60:	sub.w	r5, r1, #54525952	; 0x3400000
    5b64:	cmp	r3, #0
    5b66:	beq.w	5f20 <_dtoa_r+0xab0>
    5b6a:	ldr	r3, [sp, #16]
    5b6c:	str	r3, [sp, #88]	; 0x58
    5b6e:	ldr	r3, [sp, #32]
    5b70:	str	r3, [sp, #72]	; 0x48
    5b72:	ldr	r3, [sp, #44]	; 0x2c
    5b74:	cmp	r3, #0
    5b76:	beq.w	60a2 <_dtoa_r+0xc32>
    5b7a:	ldr	r2, [sp, #72]	; 0x48
    5b7c:	ldr	r3, [pc, #400]	; (5d10 <_dtoa_r+0x8a0>)
    5b7e:	ldr	r1, [pc, #416]	; (5d20 <_dtoa_r+0x8b0>)
    5b80:	add.w	r3, r3, r2, lsl #3
    5b84:	ldrd	r2, r3, [r3, #-8]
    5b88:	movs	r0, #0
    5b8a:	bl	381c <__aeabi_ddiv>
    5b8e:	mov	r2, r4
    5b90:	mov	r3, r5
    5b92:	bl	3260 <__aeabi_dsub>
    5b96:	mov	sl, r0
    5b98:	mov	fp, r1
    5b9a:	mov	r0, r6
    5b9c:	mov	r1, r7
    5b9e:	bl	7a8c <__aeabi_d2iz>
    5ba2:	mov	r4, r0
    5ba4:	bl	34fc <__aeabi_i2d>
    5ba8:	mov	r2, r0
    5baa:	mov	r3, r1
    5bac:	mov	r0, r6
    5bae:	mov	r1, r7
    5bb0:	bl	3260 <__aeabi_dsub>
    5bb4:	adds	r4, #48	; 0x30
    5bb6:	ldr	r5, [sp, #36]	; 0x24
    5bb8:	uxtb	r4, r4
    5bba:	mov	r6, r0
    5bbc:	mov	r7, r1
    5bbe:	strb	r4, [r5, #0]
    5bc0:	mov	r2, r0
    5bc2:	mov	r3, r1
    5bc4:	mov	r0, sl
    5bc6:	mov	r1, fp
    5bc8:	adds	r5, #1
    5bca:	bl	3ae8 <__aeabi_dcmpgt>
    5bce:	cmp	r0, #0
    5bd0:	bne.n	5c74 <_dtoa_r+0x804>
    5bd2:	mov	r2, r6
    5bd4:	mov	r3, r7
    5bd6:	movs	r0, #0
    5bd8:	ldr	r1, [pc, #316]	; (5d18 <_dtoa_r+0x8a8>)
    5bda:	bl	3260 <__aeabi_dsub>
    5bde:	mov	r2, r0
    5be0:	mov	r3, r1
    5be2:	mov	r0, sl
    5be4:	mov	r1, fp
    5be6:	bl	3ae8 <__aeabi_dcmpgt>
    5bea:	cmp	r0, #0
    5bec:	bne.w	6200 <_dtoa_r+0xd90>
    5bf0:	ldr	r2, [sp, #72]	; 0x48
    5bf2:	cmp	r2, #1
    5bf4:	ble.w	5fe6 <_dtoa_r+0xb76>
    5bf8:	ldr	r3, [sp, #72]	; 0x48
    5bfa:	ldr	r2, [sp, #36]	; 0x24
    5bfc:	str.w	r8, [sp, #72]	; 0x48
    5c00:	add	r3, r2
    5c02:	mov	r8, r3
    5c04:	b.n	5c22 <_dtoa_r+0x7b2>
    5c06:	movs	r0, #0
    5c08:	ldr	r1, [pc, #268]	; (5d18 <_dtoa_r+0x8a8>)
    5c0a:	bl	3260 <__aeabi_dsub>
    5c0e:	mov	r2, sl
    5c10:	mov	r3, fp
    5c12:	bl	3aac <__aeabi_dcmplt>
    5c16:	cmp	r0, #0
    5c18:	bne.w	6200 <_dtoa_r+0xd90>
    5c1c:	cmp	r5, r8
    5c1e:	beq.w	5fe2 <_dtoa_r+0xb72>
    5c22:	mov	r0, sl
    5c24:	mov	r1, fp
    5c26:	movs	r2, #0
    5c28:	ldr	r3, [pc, #248]	; (5d24 <_dtoa_r+0x8b4>)
    5c2a:	bl	35c8 <__aeabi_dmul>
    5c2e:	movs	r2, #0
    5c30:	ldr	r3, [pc, #240]	; (5d24 <_dtoa_r+0x8b4>)
    5c32:	mov	sl, r0
    5c34:	mov	fp, r1
    5c36:	mov	r0, r6
    5c38:	mov	r1, r7
    5c3a:	bl	35c8 <__aeabi_dmul>
    5c3e:	mov	r7, r1
    5c40:	mov	r6, r0
    5c42:	bl	7a8c <__aeabi_d2iz>
    5c46:	mov	r4, r0
    5c48:	bl	34fc <__aeabi_i2d>
    5c4c:	mov	r2, r0
    5c4e:	mov	r3, r1
    5c50:	mov	r0, r6
    5c52:	mov	r1, r7
    5c54:	bl	3260 <__aeabi_dsub>
    5c58:	adds	r4, #48	; 0x30
    5c5a:	uxtb	r4, r4
    5c5c:	mov	r2, sl
    5c5e:	mov	r3, fp
    5c60:	strb.w	r4, [r5], #1
    5c64:	mov	r6, r0
    5c66:	mov	r7, r1
    5c68:	bl	3aac <__aeabi_dcmplt>
    5c6c:	mov	r2, r6
    5c6e:	mov	r3, r7
    5c70:	cmp	r0, #0
    5c72:	beq.n	5c06 <_dtoa_r+0x796>
    5c74:	ldr	r3, [sp, #88]	; 0x58
    5c76:	str	r3, [sp, #16]
    5c78:	b.n	5806 <_dtoa_r+0x396>
    5c7a:	movs	r3, #0
    5c7c:	str	r3, [sp, #44]	; 0x2c
    5c7e:	ldr	r3, [sp, #20]
    5c80:	cmp	r3, #0
    5c82:	ble.w	5f86 <_dtoa_r+0xb16>
    5c86:	mov	r5, r3
    5c88:	mov	r4, r3
    5c8a:	str	r3, [sp, #56]	; 0x38
    5c8c:	str	r3, [sp, #32]
    5c8e:	b.n	5a86 <_dtoa_r+0x616>
    5c90:	movs	r3, #1
    5c92:	str	r3, [sp, #44]	; 0x2c
    5c94:	b.n	5c7e <_dtoa_r+0x80e>
    5c96:	str	r4, [sp, #40]	; 0x28
    5c98:	ldr	r2, [sp, #24]
    5c9a:	ldr	r1, [sp, #40]	; 0x28
    5c9c:	mov	r0, r9
    5c9e:	bl	4f20 <__pow5mult>
    5ca2:	mov	r4, r0
    5ca4:	b.n	58c4 <_dtoa_r+0x454>
    5ca6:	ldr	r3, [sp, #32]
    5ca8:	cmp	r3, #0
    5caa:	bgt.w	56aa <_dtoa_r+0x23a>
    5cae:	bne.w	5f50 <_dtoa_r+0xae0>
    5cb2:	movs	r2, #0
    5cb4:	ldr	r3, [pc, #112]	; (5d28 <_dtoa_r+0x8b8>)
    5cb6:	ldrd	r0, r1, [sp]
    5cba:	bl	35c8 <__aeabi_dmul>
    5cbe:	mov	r3, fp
    5cc0:	mov	r2, sl
    5cc2:	bl	3ad4 <__aeabi_dcmpge>
    5cc6:	ldr	r3, [sp, #32]
    5cc8:	str	r3, [sp, #24]
    5cca:	mov	r6, r3
    5ccc:	cmp	r0, #0
    5cce:	beq.w	5ea6 <_dtoa_r+0xa36>
    5cd2:	ldr	r3, [sp, #20]
    5cd4:	ldr	r5, [sp, #36]	; 0x24
    5cd6:	mvns	r3, r3
    5cd8:	str	r3, [sp, #16]
    5cda:	ldr	r1, [sp, #24]
    5cdc:	mov	r0, r9
    5cde:	bl	4cac <_Bfree>
    5ce2:	cmp	r6, #0
    5ce4:	beq.w	5806 <_dtoa_r+0x396>
    5ce8:	b.n	59fe <_dtoa_r+0x58e>
    5cea:	ldr	r2, [sp, #60]	; 0x3c
    5cec:	cmp	r2, #0
    5cee:	beq.w	6162 <_dtoa_r+0xcf2>
    5cf2:	addw	r3, r3, #1075	; 0x433
    5cf6:	ldr	r7, [sp, #24]
    5cf8:	ldr	r5, [sp, #28]
    5cfa:	b.n	5856 <_dtoa_r+0x3e6>
    5cfc:	movs	r0, #28
    5cfe:	b.n	5916 <_dtoa_r+0x4a6>
    5d00:	ldr	r3, [sp, #0]
    5d02:	cmp	r3, #1
    5d04:	ble.w	6208 <_dtoa_r+0xd98>
    5d08:	ldr	r7, [sp, #48]	; 0x30
    5d0a:	movs	r0, #1
    5d0c:	b.n	58fe <_dtoa_r+0x48e>
    5d0e:	nop
    5d10:	.word	0x00008228
    5d14:	.word	0x000082f0
    5d18:	.word	0x3ff00000
    5d1c:	.word	0x401c0000
    5d20:	.word	0x3fe00000
    5d24:	.word	0x40240000
    5d28:	.word	0x40140000
    5d2c:	mov	r1, r6
    5d2e:	movs	r3, #0
    5d30:	movs	r2, #10
    5d32:	mov	r0, r9
    5d34:	bl	4cc0 <__multadd>
    5d38:	ldr	r3, [sp, #56]	; 0x38
    5d3a:	cmp	r3, #0
    5d3c:	mov	r6, r0
    5d3e:	ble.w	625c <_dtoa_r+0xdec>
    5d42:	str	r3, [sp, #32]
    5d44:	cmp	r5, #0
    5d46:	ble.n	5d54 <_dtoa_r+0x8e4>
    5d48:	mov	r1, r6
    5d4a:	mov	r2, r5
    5d4c:	mov	r0, r9
    5d4e:	bl	4fc0 <__lshift>
    5d52:	mov	r6, r0
    5d54:	cmp	r7, #0
    5d56:	bne.w	6052 <_dtoa_r+0xbe2>
    5d5a:	mov	r8, r6
    5d5c:	ldr	r3, [sp, #32]
    5d5e:	ldr	r2, [sp, #36]	; 0x24
    5d60:	subs	r3, #1
    5d62:	adds	r3, r2, r3
    5d64:	str	r3, [sp, #32]
    5d66:	and.w	r3, sl, #1
    5d6a:	str	r3, [sp, #40]	; 0x28
    5d6c:	mov	r7, r2
    5d6e:	ldr.w	fp, [sp, #24]
    5d72:	mov	r0, r4
    5d74:	mov	r1, fp
    5d76:	bl	5344 <quorem>
    5d7a:	mov	r1, r6
    5d7c:	mov	r5, r0
    5d7e:	mov	r0, r4
    5d80:	bl	5070 <__mcmp>
    5d84:	mov	r2, r8
    5d86:	mov	r1, fp
    5d88:	mov	sl, r0
    5d8a:	mov	r0, r9
    5d8c:	bl	50b4 <__mdiff>
    5d90:	ldr	r2, [r0, #12]
    5d92:	mov	fp, r0
    5d94:	add.w	r3, r5, #48	; 0x30
    5d98:	cmp	r2, #0
    5d9a:	bne.n	5e30 <_dtoa_r+0x9c0>
    5d9c:	mov	r1, r0
    5d9e:	mov	r0, r4
    5da0:	str	r3, [sp, #28]
    5da2:	bl	5070 <__mcmp>
    5da6:	mov	r1, fp
    5da8:	str	r0, [sp, #20]
    5daa:	mov	r0, r9
    5dac:	bl	4cac <_Bfree>
    5db0:	ldr	r2, [sp, #20]
    5db2:	ldr	r3, [sp, #28]
    5db4:	cbnz	r2, 5dc2 <_dtoa_r+0x952>
    5db6:	ldr	r1, [sp, #0]
    5db8:	cbnz	r1, 5dc2 <_dtoa_r+0x952>
    5dba:	ldr	r1, [sp, #40]	; 0x28
    5dbc:	cmp	r1, #0
    5dbe:	beq.w	622c <_dtoa_r+0xdbc>
    5dc2:	cmp.w	sl, #0
    5dc6:	blt.w	5f90 <_dtoa_r+0xb20>
    5dca:	bne.n	5dd8 <_dtoa_r+0x968>
    5dcc:	ldr	r1, [sp, #0]
    5dce:	cbnz	r1, 5dd8 <_dtoa_r+0x968>
    5dd0:	ldr	r1, [sp, #40]	; 0x28
    5dd2:	cmp	r1, #0
    5dd4:	beq.w	5f90 <_dtoa_r+0xb20>
    5dd8:	cmp	r2, #0
    5dda:	bgt.w	607a <_dtoa_r+0xc0a>
    5dde:	ldr	r2, [sp, #32]
    5de0:	strb	r3, [r7, #0]
    5de2:	add.w	sl, r7, #1
    5de6:	cmp	r7, r2
    5de8:	mov	r5, sl
    5dea:	beq.w	6092 <_dtoa_r+0xc22>
    5dee:	mov	r1, r4
    5df0:	movs	r3, #0
    5df2:	movs	r2, #10
    5df4:	mov	r0, r9
    5df6:	bl	4cc0 <__multadd>
    5dfa:	cmp	r6, r8
    5dfc:	mov	r4, r0
    5dfe:	mov	r1, r6
    5e00:	mov.w	r3, #0
    5e04:	mov.w	r2, #10
    5e08:	mov	r0, r9
    5e0a:	beq.n	5e24 <_dtoa_r+0x9b4>
    5e0c:	bl	4cc0 <__multadd>
    5e10:	mov	r1, r8
    5e12:	mov	r6, r0
    5e14:	movs	r3, #0
    5e16:	movs	r2, #10
    5e18:	mov	r0, r9
    5e1a:	bl	4cc0 <__multadd>
    5e1e:	mov	r7, sl
    5e20:	mov	r8, r0
    5e22:	b.n	5d6e <_dtoa_r+0x8fe>
    5e24:	bl	4cc0 <__multadd>
    5e28:	mov	r7, sl
    5e2a:	mov	r6, r0
    5e2c:	mov	r8, r0
    5e2e:	b.n	5d6e <_dtoa_r+0x8fe>
    5e30:	mov	r1, r0
    5e32:	mov	r0, r9
    5e34:	str	r3, [sp, #20]
    5e36:	bl	4cac <_Bfree>
    5e3a:	movs	r2, #1
    5e3c:	ldr	r3, [sp, #20]
    5e3e:	b.n	5dc2 <_dtoa_r+0x952>
    5e40:	ldr	r1, [sp, #24]
    5e42:	mov	r0, r4
    5e44:	bl	5070 <__mcmp>
    5e48:	cmp	r0, #0
    5e4a:	bge.w	594c <_dtoa_r+0x4dc>
    5e4e:	mov	r1, r4
    5e50:	ldr	r4, [sp, #16]
    5e52:	movs	r3, #0
    5e54:	subs	r4, #1
    5e56:	movs	r2, #10
    5e58:	mov	r0, r9
    5e5a:	str	r4, [sp, #16]
    5e5c:	bl	4cc0 <__multadd>
    5e60:	ldr	r3, [sp, #44]	; 0x2c
    5e62:	mov	r4, r0
    5e64:	cmp	r3, #0
    5e66:	bne.w	5d2c <_dtoa_r+0x8bc>
    5e6a:	ldr	r3, [sp, #56]	; 0x38
    5e6c:	cmp	r3, #0
    5e6e:	ble.w	624c <_dtoa_r+0xddc>
    5e72:	str	r3, [sp, #32]
    5e74:	b.n	595c <_dtoa_r+0x4ec>
    5e76:	ldr	r4, [sp, #40]	; 0x28
    5e78:	b.n	58c4 <_dtoa_r+0x454>
    5e7a:	ldr	r3, [sp, #0]
    5e7c:	cmp	r3, #2
    5e7e:	ble.w	5954 <_dtoa_r+0x4e4>
    5e82:	ldr	r3, [sp, #32]
    5e84:	cmp	r3, #0
    5e86:	bne.w	61c4 <_dtoa_r+0xd54>
    5e8a:	ldr	r1, [sp, #24]
    5e8c:	movs	r2, #5
    5e8e:	mov	r0, r9
    5e90:	bl	4cc0 <__multadd>
    5e94:	mov	r1, r0
    5e96:	str	r0, [sp, #24]
    5e98:	mov	r0, r4
    5e9a:	bl	5070 <__mcmp>
    5e9e:	cmp	r0, #0
    5ea0:	str	r4, [sp, #40]	; 0x28
    5ea2:	ble.w	5cd2 <_dtoa_r+0x862>
    5ea6:	ldr	r2, [sp, #16]
    5ea8:	ldr	r1, [sp, #36]	; 0x24
    5eaa:	movs	r3, #49	; 0x31
    5eac:	adds	r2, #1
    5eae:	str	r2, [sp, #16]
    5eb0:	strb	r3, [r1, #0]
    5eb2:	adds	r5, r1, #1
    5eb4:	b.n	5cda <_dtoa_r+0x86a>
    5eb6:	ldr	r2, [sp, #16]
    5eb8:	adds	r2, #1
    5eba:	str	r2, [sp, #16]
    5ebc:	ldr	r2, [sp, #36]	; 0x24
    5ebe:	movs	r3, #49	; 0x31
    5ec0:	strb	r3, [r2, #0]
    5ec2:	b.n	59de <_dtoa_r+0x56e>
    5ec4:	movs	r3, #1
    5ec6:	str	r3, [sp, #44]	; 0x2c
    5ec8:	b.n	5a70 <_dtoa_r+0x600>
    5eca:	ldr.w	r9, [sp, #20]
    5ece:	b.n	5806 <_dtoa_r+0x396>
    5ed0:	cmp.w	sl, #0
    5ed4:	bne.w	58ea <_dtoa_r+0x47a>
    5ed8:	ubfx	r3, fp, #0, #20
    5edc:	cmp	r3, #0
    5ede:	bne.w	615e <_dtoa_r+0xcee>
    5ee2:	bic.w	r7, fp, #2147483648	; 0x80000000
    5ee6:	lsrs	r7, r7, #20
    5ee8:	lsls	r7, r7, #20
    5eea:	cbz	r7, 5ef8 <_dtoa_r+0xa88>
    5eec:	ldr	r3, [sp, #28]
    5eee:	adds	r3, #1
    5ef0:	str	r3, [sp, #28]
    5ef2:	add.w	r8, r8, #1
    5ef6:	movs	r7, #1
    5ef8:	ldr	r3, [sp, #48]	; 0x30
    5efa:	movs	r0, #1
    5efc:	cmp	r3, #0
    5efe:	beq.w	58fe <_dtoa_r+0x48e>
    5f02:	b.n	58ec <_dtoa_r+0x47c>
    5f04:	mov	r0, sl
    5f06:	bl	34fc <__aeabi_i2d>
    5f0a:	mov	r2, r6
    5f0c:	mov	r3, r7
    5f0e:	bl	35c8 <__aeabi_dmul>
    5f12:	movs	r2, #0
    5f14:	ldr	r3, [pc, #764]	; (6214 <_dtoa_r+0xda4>)
    5f16:	bl	3264 <__adddf3>
    5f1a:	mov	r4, r0
    5f1c:	sub.w	r5, r1, #54525952	; 0x3400000
    5f20:	mov	r0, r6
    5f22:	mov	r1, r7
    5f24:	movs	r2, #0
    5f26:	ldr	r3, [pc, #752]	; (6218 <_dtoa_r+0xda8>)
    5f28:	bl	3260 <__aeabi_dsub>
    5f2c:	mov	r2, r4
    5f2e:	mov	r3, r5
    5f30:	mov	r6, r0
    5f32:	mov	r7, r1
    5f34:	bl	3ae8 <__aeabi_dcmpgt>
    5f38:	cmp	r0, #0
    5f3a:	bne.w	609a <_dtoa_r+0xc2a>
    5f3e:	mov	r2, r4
    5f40:	add.w	r3, r5, #2147483648	; 0x80000000
    5f44:	mov	r0, r6
    5f46:	mov	r1, r7
    5f48:	bl	3aac <__aeabi_dcmplt>
    5f4c:	cmp	r0, #0
    5f4e:	beq.n	5fe6 <_dtoa_r+0xb76>
    5f50:	movs	r3, #0
    5f52:	str	r3, [sp, #24]
    5f54:	mov	r6, r3
    5f56:	b.n	5cd2 <_dtoa_r+0x862>
    5f58:	ldr	r0, [sp, #36]	; 0x24
    5f5a:	b.w	54e2 <_dtoa_r+0x72>
    5f5e:	ldr	r3, [sp, #24]
    5f60:	ldr	r2, [sp, #48]	; 0x30
    5f62:	str	r7, [sp, #24]
    5f64:	subs	r3, r7, r3
    5f66:	add	r2, r3
    5f68:	str	r2, [sp, #48]	; 0x30
    5f6a:	movs	r7, #0
    5f6c:	b.n	584a <_dtoa_r+0x3da>
    5f6e:	vldr	d7, [sp, #64]	; 0x40
    5f72:	mov.w	sl, #2
    5f76:	vstr	d7, [sp, #72]	; 0x48
    5f7a:	b.n	5afc <_dtoa_r+0x68c>
    5f7c:	mov	r4, r3
    5f7e:	movs	r1, #0
    5f80:	str.w	r1, [r9, #68]	; 0x44
    5f84:	b.n	5aa8 <_dtoa_r+0x638>
    5f86:	movs	r4, #1
    5f88:	str	r4, [sp, #56]	; 0x38
    5f8a:	str	r4, [sp, #32]
    5f8c:	str	r4, [sp, #20]
    5f8e:	b.n	5f7e <_dtoa_r+0xb0e>
    5f90:	cmp	r2, #0
    5f92:	mov	sl, r3
    5f94:	ble.n	5fba <_dtoa_r+0xb4a>
    5f96:	mov	r1, r4
    5f98:	movs	r2, #1
    5f9a:	mov	r0, r9
    5f9c:	bl	4fc0 <__lshift>
    5fa0:	ldr	r1, [sp, #24]
    5fa2:	mov	r4, r0
    5fa4:	bl	5070 <__mcmp>
    5fa8:	cmp	r0, #0
    5faa:	ble.w	623e <_dtoa_r+0xdce>
    5fae:	cmp.w	sl, #57	; 0x39
    5fb2:	beq.w	61c8 <_dtoa_r+0xd58>
    5fb6:	add.w	sl, r5, #49	; 0x31
    5fba:	mov	fp, r6
    5fbc:	strb.w	sl, [r7]
    5fc0:	adds	r5, r7, #1
    5fc2:	mov	r6, r8
    5fc4:	str	r4, [sp, #40]	; 0x28
    5fc6:	b.n	59de <_dtoa_r+0x56e>
    5fc8:	bne.n	5fd4 <_dtoa_r+0xb64>
    5fca:	tst.w	sl, #1
    5fce:	beq.n	5fd4 <_dtoa_r+0xb64>
    5fd0:	b.n	59be <_dtoa_r+0x54e>
    5fd2:	mov	r5, r2
    5fd4:	ldrb.w	r3, [r5, #-1]
    5fd8:	cmp	r3, #48	; 0x30
    5fda:	add.w	r2, r5, #4294967295
    5fde:	beq.n	5fd2 <_dtoa_r+0xb62>
    5fe0:	b.n	59de <_dtoa_r+0x56e>
    5fe2:	ldr.w	r8, [sp, #72]	; 0x48
    5fe6:	ldrd	sl, fp, [sp, #64]	; 0x40
    5fea:	b.w	5684 <_dtoa_r+0x214>
    5fee:	ldr	r1, [sp, #36]	; 0x24
    5ff0:	movs	r2, #48	; 0x30
    5ff2:	strb	r2, [r1, #0]
    5ff4:	ldr	r2, [sp, #16]
    5ff6:	ldrb.w	r4, [r5, #-1]
    5ffa:	adds	r2, #1
    5ffc:	str	r2, [sp, #16]
    5ffe:	b.n	5802 <_dtoa_r+0x392>
    6000:	ldr	r3, [sp, #16]
    6002:	negs	r4, r3
    6004:	cmp	r4, #0
    6006:	beq.w	6170 <_dtoa_r+0xd00>
    600a:	ldr	r3, [pc, #528]	; (621c <_dtoa_r+0xdac>)
    600c:	and.w	r2, r4, #15
    6010:	add.w	r3, r3, r2, lsl #3
    6014:	ldrd	r2, r3, [r3]
    6018:	ldrd	r0, r1, [sp, #64]	; 0x40
    601c:	bl	35c8 <__aeabi_dmul>
    6020:	asrs	r4, r4, #4
    6022:	mov	r6, r0
    6024:	mov	r7, r1
    6026:	beq.w	6256 <_dtoa_r+0xde6>
    602a:	ldr	r5, [pc, #500]	; (6220 <_dtoa_r+0xdb0>)
    602c:	mov.w	sl, #2
    6030:	lsls	r2, r4, #31
    6032:	bpl.n	6048 <_dtoa_r+0xbd8>
    6034:	mov	r0, r6
    6036:	mov	r1, r7
    6038:	ldrd	r2, r3, [r5]
    603c:	bl	35c8 <__aeabi_dmul>
    6040:	add.w	sl, sl, #1
    6044:	mov	r6, r0
    6046:	mov	r7, r1
    6048:	asrs	r4, r4, #1
    604a:	add.w	r5, r5, #8
    604e:	bne.n	6030 <_dtoa_r+0xbc0>
    6050:	b.n	5b30 <_dtoa_r+0x6c0>
    6052:	ldr	r1, [r6, #4]
    6054:	mov	r0, r9
    6056:	bl	4c60 <_Balloc>
    605a:	ldr	r3, [r6, #16]
    605c:	adds	r2, r3, #2
    605e:	mov	r5, r0
    6060:	lsls	r2, r2, #2
    6062:	add.w	r1, r6, #12
    6066:	adds	r0, #12
    6068:	bl	28b0 <memcpy>
    606c:	mov	r1, r5
    606e:	movs	r2, #1
    6070:	mov	r0, r9
    6072:	bl	4fc0 <__lshift>
    6076:	mov	r8, r0
    6078:	b.n	5d5c <_dtoa_r+0x8ec>
    607a:	cmp	r3, #57	; 0x39
    607c:	beq.w	61c8 <_dtoa_r+0xd58>
    6080:	add.w	sl, r3, #1
    6084:	mov	fp, r6
    6086:	strb.w	sl, [r7]
    608a:	adds	r5, r7, #1
    608c:	mov	r6, r8
    608e:	str	r4, [sp, #40]	; 0x28
    6090:	b.n	59de <_dtoa_r+0x56e>
    6092:	mov	fp, r6
    6094:	mov	sl, r3
    6096:	mov	r6, r8
    6098:	b.n	59a6 <_dtoa_r+0x536>
    609a:	movs	r3, #0
    609c:	str	r3, [sp, #24]
    609e:	mov	r6, r3
    60a0:	b.n	5ea6 <_dtoa_r+0xa36>
    60a2:	ldr	r3, [sp, #72]	; 0x48
    60a4:	ldr	r1, [pc, #372]	; (621c <_dtoa_r+0xdac>)
    60a6:	subs	r2, r3, #1
    60a8:	add.w	r1, r1, r2, lsl #3
    60ac:	mov	r3, r5
    60ae:	str	r2, [sp, #92]	; 0x5c
    60b0:	ldrd	r0, r1, [r1]
    60b4:	mov	r2, r4
    60b6:	bl	35c8 <__aeabi_dmul>
    60ba:	strd	r0, r1, [sp, #80]	; 0x50
    60be:	mov	r1, r7
    60c0:	mov	r0, r6
    60c2:	bl	7a8c <__aeabi_d2iz>
    60c6:	mov	r4, r0
    60c8:	bl	34fc <__aeabi_i2d>
    60cc:	mov	r3, r1
    60ce:	mov	r2, r0
    60d0:	mov	r1, r7
    60d2:	mov	r0, r6
    60d4:	bl	3260 <__aeabi_dsub>
    60d8:	ldr	r3, [sp, #72]	; 0x48
    60da:	mov	r7, r1
    60dc:	ldr	r1, [sp, #36]	; 0x24
    60de:	adds	r4, #48	; 0x30
    60e0:	cmp	r3, #1
    60e2:	mov	r6, r0
    60e4:	strb	r4, [r1, #0]
    60e6:	add.w	r5, r1, #1
    60ea:	beq.n	612e <_dtoa_r+0xcbe>
    60ec:	ldr	r3, [sp, #72]	; 0x48
    60ee:	ldr	r2, [sp, #36]	; 0x24
    60f0:	add	r3, r2
    60f2:	mov	sl, r3
    60f4:	mov	fp, r5
    60f6:	movs	r2, #0
    60f8:	ldr	r3, [pc, #296]	; (6224 <_dtoa_r+0xdb4>)
    60fa:	mov	r0, r6
    60fc:	mov	r1, r7
    60fe:	bl	35c8 <__aeabi_dmul>
    6102:	mov	r7, r1
    6104:	mov	r6, r0
    6106:	bl	7a8c <__aeabi_d2iz>
    610a:	mov	r4, r0
    610c:	bl	34fc <__aeabi_i2d>
    6110:	adds	r4, #48	; 0x30
    6112:	mov	r2, r0
    6114:	mov	r3, r1
    6116:	mov	r0, r6
    6118:	mov	r1, r7
    611a:	bl	3260 <__aeabi_dsub>
    611e:	strb.w	r4, [fp], #1
    6122:	cmp	sl, fp
    6124:	mov	r6, r0
    6126:	mov	r7, r1
    6128:	bne.n	60f6 <_dtoa_r+0xc86>
    612a:	ldr	r3, [sp, #92]	; 0x5c
    612c:	add	r5, r3
    612e:	movs	r2, #0
    6130:	ldr	r3, [pc, #244]	; (6228 <_dtoa_r+0xdb8>)
    6132:	ldrd	r0, r1, [sp, #80]	; 0x50
    6136:	bl	3264 <__adddf3>
    613a:	mov	r2, r6
    613c:	mov	r3, r7
    613e:	bl	3aac <__aeabi_dcmplt>
    6142:	cmp	r0, #0
    6144:	beq.n	61d8 <_dtoa_r+0xd68>
    6146:	ldr	r3, [sp, #88]	; 0x58
    6148:	str	r3, [sp, #16]
    614a:	ldrb.w	r4, [r5, #-1]
    614e:	b.w	57ea <_dtoa_r+0x37a>
    6152:	ldr	r3, [sp, #28]
    6154:	ldr	r2, [sp, #32]
    6156:	subs	r5, r3, r2
    6158:	movs	r3, #0
    615a:	b.w	5856 <_dtoa_r+0x3e6>
    615e:	movs	r7, #0
    6160:	b.n	5ef8 <_dtoa_r+0xa88>
    6162:	ldr	r3, [sp, #96]	; 0x60
    6164:	ldr	r7, [sp, #24]
    6166:	ldr	r5, [sp, #28]
    6168:	rsb	r3, r3, #54	; 0x36
    616c:	b.w	5856 <_dtoa_r+0x3e6>
    6170:	ldrd	r6, r7, [sp, #64]	; 0x40
    6174:	mov.w	sl, #2
    6178:	b.n	5b30 <_dtoa_r+0x6c0>
    617a:	ldr	r3, [sp, #32]
    617c:	cmp	r3, #0
    617e:	beq.w	5f04 <_dtoa_r+0xa94>
    6182:	ldr	r3, [sp, #56]	; 0x38
    6184:	cmp	r3, #0
    6186:	ble.w	5fe6 <_dtoa_r+0xb76>
    618a:	movs	r2, #0
    618c:	ldr	r3, [pc, #148]	; (6224 <_dtoa_r+0xdb4>)
    618e:	mov	r0, r6
    6190:	mov	r1, r7
    6192:	bl	35c8 <__aeabi_dmul>
    6196:	mov	r6, r0
    6198:	mov	r7, r1
    619a:	add.w	r0, sl, #1
    619e:	bl	34fc <__aeabi_i2d>
    61a2:	mov	r2, r6
    61a4:	mov	r3, r7
    61a6:	bl	35c8 <__aeabi_dmul>
    61aa:	movs	r2, #0
    61ac:	ldr	r3, [pc, #100]	; (6214 <_dtoa_r+0xda4>)
    61ae:	bl	3264 <__adddf3>
    61b2:	ldr	r2, [sp, #16]
    61b4:	ldr	r3, [sp, #56]	; 0x38
    61b6:	str	r3, [sp, #72]	; 0x48
    61b8:	subs	r2, #1
    61ba:	mov	r4, r0
    61bc:	sub.w	r5, r1, #54525952	; 0x3400000
    61c0:	str	r2, [sp, #88]	; 0x58
    61c2:	b.n	5b72 <_dtoa_r+0x702>
    61c4:	str	r4, [sp, #40]	; 0x28
    61c6:	b.n	5cd2 <_dtoa_r+0x862>
    61c8:	movs	r2, #57	; 0x39
    61ca:	mov	fp, r6
    61cc:	str	r4, [sp, #40]	; 0x28
    61ce:	mov	r6, r8
    61d0:	strb	r2, [r7, #0]
    61d2:	adds	r5, r7, #1
    61d4:	b.w	59c2 <_dtoa_r+0x552>
    61d8:	ldrd	r2, r3, [sp, #80]	; 0x50
    61dc:	movs	r0, #0
    61de:	ldr	r1, [pc, #72]	; (6228 <_dtoa_r+0xdb8>)
    61e0:	bl	3260 <__aeabi_dsub>
    61e4:	mov	r2, r6
    61e6:	mov	r3, r7
    61e8:	bl	3ae8 <__aeabi_dcmpgt>
    61ec:	cbnz	r0, 61f2 <_dtoa_r+0xd82>
    61ee:	b.n	5fe6 <_dtoa_r+0xb76>
    61f0:	mov	r5, r2
    61f2:	ldrb.w	r3, [r5, #-1]
    61f6:	cmp	r3, #48	; 0x30
    61f8:	add.w	r2, r5, #4294967295
    61fc:	beq.n	61f0 <_dtoa_r+0xd80>
    61fe:	b.n	5c74 <_dtoa_r+0x804>
    6200:	ldr	r3, [sp, #88]	; 0x58
    6202:	str	r3, [sp, #16]
    6204:	b.w	57ea <_dtoa_r+0x37a>
    6208:	cmp.w	sl, #0
    620c:	bne.w	5d08 <_dtoa_r+0x898>
    6210:	b.n	5ed8 <_dtoa_r+0xa68>
    6212:	nop
    6214:	.word	0x401c0000
    6218:	.word	0x40140000
    621c:	.word	0x00008228
    6220:	.word	0x000082f0
    6224:	.word	0x40240000
    6228:	.word	0x3fe00000
    622c:	cmp	r3, #57	; 0x39
    622e:	mov	fp, sl
    6230:	mov	sl, r3
    6232:	beq.n	61c8 <_dtoa_r+0xd58>
    6234:	cmp.w	fp, #0
    6238:	bgt.w	5fb6 <_dtoa_r+0xb46>
    623c:	b.n	5fba <_dtoa_r+0xb4a>
    623e:	bne.w	5fba <_dtoa_r+0xb4a>
    6242:	tst.w	sl, #1
    6246:	beq.w	5fba <_dtoa_r+0xb4a>
    624a:	b.n	5fae <_dtoa_r+0xb3e>
    624c:	ldr	r3, [sp, #0]
    624e:	cmp	r3, #2
    6250:	bgt.n	629e <_dtoa_r+0xe2e>
    6252:	ldr	r3, [sp, #56]	; 0x38
    6254:	b.n	5e72 <_dtoa_r+0xa02>
    6256:	mov.w	sl, #2
    625a:	b.n	5b30 <_dtoa_r+0x6c0>
    625c:	ldr	r3, [sp, #0]
    625e:	cmp	r3, #2
    6260:	bgt.n	629e <_dtoa_r+0xe2e>
    6262:	ldr	r3, [sp, #56]	; 0x38
    6264:	b.n	5d42 <_dtoa_r+0x8d2>
    6266:	movs	r4, #0
    6268:	str.w	r4, [r9, #68]	; 0x44
    626c:	mov	r1, r4
    626e:	mov	r0, r9
    6270:	bl	4c60 <_Balloc>
    6274:	mov.w	r3, #4294967295
    6278:	str	r3, [sp, #32]
    627a:	str	r3, [sp, #56]	; 0x38
    627c:	movs	r3, #1
    627e:	str	r0, [sp, #36]	; 0x24
    6280:	str	r4, [sp, #20]
    6282:	str.w	r0, [r9, #64]	; 0x40
    6286:	str	r3, [sp, #44]	; 0x2c
    6288:	b.w	5684 <_dtoa_r+0x214>
    628c:	beq.w	5920 <_dtoa_r+0x4b0>
    6290:	rsb	r0, r0, #60	; 0x3c
    6294:	b.w	5916 <_dtoa_r+0x4a6>
    6298:	movs	r6, #1
    629a:	b.w	5616 <_dtoa_r+0x1a6>
    629e:	ldr	r3, [sp, #56]	; 0x38
    62a0:	str	r3, [sp, #32]
    62a2:	b.n	5e82 <_dtoa_r+0xa12>
    62a4:			; <UNDEFINED> instruction: 0xffffffff

000062a8 <_svfprintf_r>:
    62a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62ac:	sub	sp, #260	; 0x104
    62ae:	mov	r4, r1
    62b0:	str	r1, [sp, #20]
    62b2:	mov	r5, r2
    62b4:	str	r3, [sp, #40]	; 0x28
    62b6:	str	r0, [sp, #24]
    62b8:	bl	4ba0 <_localeconv_r>
    62bc:	ldr	r3, [r0, #0]
    62be:	str	r3, [sp, #76]	; 0x4c
    62c0:	mov	r0, r3
    62c2:	bl	46c0 <strlen>
    62c6:	ldrh	r3, [r4, #12]
    62c8:	str	r0, [sp, #72]	; 0x48
    62ca:	lsls	r6, r3, #24
    62cc:	bpl.n	62d6 <_svfprintf_r+0x2e>
    62ce:	ldr	r3, [r4, #16]
    62d0:	cmp	r3, #0
    62d2:	beq.w	7538 <_svfprintf_r+0x1290>
    62d6:	vldr	d7, [pc, #664]	; 6570 <_svfprintf_r+0x2c8>
    62da:	movs	r3, #0
    62dc:	vstr	d7, [sp, #64]	; 0x40
    62e0:	str	r3, [sp, #56]	; 0x38
    62e2:	str	r3, [sp, #148]	; 0x94
    62e4:	str	r3, [sp, #144]	; 0x90
    62e6:	str	r3, [sp, #84]	; 0x54
    62e8:	str	r3, [sp, #28]
    62ea:	ldr.w	sl, [pc, #656]	; 657c <_svfprintf_r+0x2d4>
    62ee:	add	r3, sp, #192	; 0xc0
    62f0:	str	r3, [sp, #140]	; 0x8c
    62f2:	mov	r9, r3
    62f4:	mov	r8, r5
    62f6:	ldrb.w	r3, [r8]
    62fa:	mov	r4, r8
    62fc:	cbz	r3, 633a <_svfprintf_r+0x92>
    62fe:	cmp	r3, #37	; 0x25
    6300:	bne.n	6308 <_svfprintf_r+0x60>
    6302:	b.n	633a <_svfprintf_r+0x92>
    6304:	cmp	r3, #37	; 0x25
    6306:	beq.n	6310 <_svfprintf_r+0x68>
    6308:	ldrb.w	r3, [r4, #1]!
    630c:	cmp	r3, #0
    630e:	bne.n	6304 <_svfprintf_r+0x5c>
    6310:	rsb	r5, r8, r4
    6314:	cbz	r5, 633a <_svfprintf_r+0x92>
    6316:	ldr	r3, [sp, #144]	; 0x90
    6318:	ldr	r2, [sp, #148]	; 0x94
    631a:	str.w	r8, [r9]
    631e:	adds	r3, #1
    6320:	add	r2, r5
    6322:	cmp	r3, #7
    6324:	str.w	r5, [r9, #4]
    6328:	str	r2, [sp, #148]	; 0x94
    632a:	str	r3, [sp, #144]	; 0x90
    632c:	bgt.w	647c <_svfprintf_r+0x1d4>
    6330:	add.w	r9, r9, #8
    6334:	ldr	r3, [sp, #28]
    6336:	add	r3, r5
    6338:	str	r3, [sp, #28]
    633a:	ldrb	r3, [r4, #0]
    633c:	cmp	r3, #0
    633e:	beq.w	648e <_svfprintf_r+0x1e6>
    6342:	movs	r3, #0
    6344:	mov	r2, r3
    6346:	strb.w	r3, [sp, #111]	; 0x6f
    634a:	mov	r1, r3
    634c:	str	r3, [sp, #32]
    634e:	str	r3, [sp, #12]
    6350:	mov.w	fp, #4294967295
    6354:	ldrb	r3, [r4, #1]
    6356:	add.w	r8, r4, #1
    635a:	mov	r5, fp
    635c:	add.w	r8, r8, #1
    6360:	sub.w	r0, r3, #32
    6364:	cmp	r0, #88	; 0x58
    6366:	bhi.w	6bd2 <_svfprintf_r+0x92a>
    636a:	tbh	[pc, r0, lsl #1]
    636e:	.short	0x03a0
    6370:	.word	0x04320432
    6374:	.word	0x043203a8
    6378:	.word	0x04320432
    637c:	.word	0x04320432
    6380:	.word	0x03af0432
    6384:	.word	0x043203bd
    6388:	.word	0x00e2005d
    638c:	.word	0x01090432
    6390:	.word	0x01100110
    6394:	.word	0x01100110
    6398:	.word	0x01100110
    639c:	.word	0x01100110
    63a0:	.word	0x04320110
    63a4:	.word	0x04320432
    63a8:	.word	0x04320432
    63ac:	.word	0x04320432
    63b0:	.word	0x04320432
    63b4:	.word	0x01200432
    63b8:	.word	0x04320286
    63bc:	.word	0x04320286
    63c0:	.word	0x04320432
    63c4:	.word	0x02d40432
    63c8:	.word	0x04320432
    63cc:	.word	0x043202e5
    63d0:	.word	0x04320432
    63d4:	.word	0x04320432
    63d8:	.word	0x0432030f
    63dc:	.word	0x033d0432
    63e0:	.word	0x04320432
    63e4:	.word	0x04320432
    63e8:	.word	0x04320432
    63ec:	.word	0x04320432
    63f0:	.word	0x04320432
    63f4:	.word	0x0391037e
    63f8:	.word	0x02860286
    63fc:	.word	0x03990286
    6400:	.word	0x04320391
    6404:	.word	0x04070432
    6408:	.word	0x04120432
    640c:	.word	0x006400a3
    6410:	.word	0x043203c2
    6414:	.word	0x043203c9
    6418:	.word	0x043203ea
    641c:	.word	0x03f20432
    6420:	ldr	r0, [sp, #32]
    6422:	str	r3, [sp, #40]	; 0x28
    6424:	negs	r0, r0
    6426:	str	r0, [sp, #32]
    6428:	ldr	r3, [sp, #12]
    642a:	orr.w	r3, r3, #4
    642e:	str	r3, [sp, #12]
    6430:	ldrb.w	r3, [r8]
    6434:	b.n	635c <_svfprintf_r+0xb4>
    6436:	ldr	r0, [sp, #40]	; 0x28
    6438:	mov	fp, r5
    643a:	movs	r1, #0
    643c:	ldr	r4, [r0, #0]
    643e:	strb.w	r1, [sp, #111]	; 0x6f
    6442:	adds	r7, r0, #4
    6444:	ldr	r0, [sp, #12]
    6446:	movs	r3, #48	; 0x30
    6448:	movs	r2, #120	; 0x78
    644a:	cmp	fp, r1
    644c:	strb.w	r3, [sp, #112]	; 0x70
    6450:	mov.w	r5, #0
    6454:	strb.w	r2, [sp, #113]	; 0x71
    6458:	orr.w	r3, r0, #2
    645c:	blt.w	6c0c <_svfprintf_r+0x964>
    6460:	bic.w	r3, r0, #128	; 0x80
    6464:	orr.w	r3, r3, #2
    6468:	str	r3, [sp, #12]
    646a:	orrs.w	r3, r4, r5
    646e:	str	r7, [sp, #40]	; 0x28
    6470:	beq.w	6bb8 <_svfprintf_r+0x910>
    6474:	mov	r7, r1
    6476:	str	r2, [sp, #52]	; 0x34
    6478:	ldr	r0, [pc, #252]	; (6578 <_svfprintf_r+0x2d0>)
    647a:	b.n	6a4a <_svfprintf_r+0x7a2>
    647c:	add	r2, sp, #140	; 0x8c
    647e:	ldr	r1, [sp, #20]
    6480:	ldr	r0, [sp, #24]
    6482:	bl	798c <__ssprint_r>
    6486:	cbnz	r0, 649c <_svfprintf_r+0x1f4>
    6488:	add.w	r9, sp, #192	; 0xc0
    648c:	b.n	6334 <_svfprintf_r+0x8c>
    648e:	ldr	r3, [sp, #148]	; 0x94
    6490:	cbz	r3, 649c <_svfprintf_r+0x1f4>
    6492:	ldr	r0, [sp, #24]
    6494:	ldr	r1, [sp, #20]
    6496:	add	r2, sp, #140	; 0x8c
    6498:	bl	798c <__ssprint_r>
    649c:	ldr	r3, [sp, #20]
    649e:	ldrh	r3, [r3, #12]
    64a0:	tst.w	r3, #64	; 0x40
    64a4:	ldr	r3, [sp, #28]
    64a6:	it	ne
    64a8:	movne.w	r3, #4294967295
    64ac:	mov	r0, r3
    64ae:	add	sp, #260	; 0x104
    64b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64b4:	str	r3, [sp, #52]	; 0x34
    64b6:	mov	fp, r5
    64b8:	cmp	r2, #0
    64ba:	bne.w	7924 <_svfprintf_r+0x167c>
    64be:	ldr	r2, [sp, #12]
    64c0:	ands.w	r3, r2, #32
    64c4:	beq.w	6954 <_svfprintf_r+0x6ac>
    64c8:	ldr	r7, [sp, #40]	; 0x28
    64ca:	adds	r7, #7
    64cc:	bic.w	r3, r7, #7
    64d0:	movs	r7, #0
    64d2:	add.w	r1, r3, #8
    64d6:	cmp	fp, r7
    64d8:	str	r1, [sp, #40]	; 0x28
    64da:	ldrd	r4, r5, [r3]
    64de:	strb.w	r7, [sp, #111]	; 0x6f
    64e2:	blt.w	73aa <_svfprintf_r+0x1102>
    64e6:	bic.w	r3, r2, #128	; 0x80
    64ea:	str	r3, [sp, #12]
    64ec:	orrs.w	r3, r4, r5
    64f0:	beq.w	6bfc <_svfprintf_r+0x954>
    64f4:	add	r6, sp, #192	; 0xc0
    64f6:	lsrs	r2, r4, #3
    64f8:	orr.w	r2, r2, r5, lsl #29
    64fc:	lsrs	r1, r5, #3
    64fe:	and.w	r3, r4, #7
    6502:	mov	r5, r1
    6504:	mov	r4, r2
    6506:	adds	r3, #48	; 0x30
    6508:	orrs.w	r2, r4, r5
    650c:	strb.w	r3, [r6, #-1]!
    6510:	bne.n	64f6 <_svfprintf_r+0x24e>
    6512:	ldr	r2, [sp, #12]
    6514:	lsls	r1, r2, #31
    6516:	bpl.w	6638 <_svfprintf_r+0x390>
    651a:	cmp	r3, #48	; 0x30
    651c:	beq.w	6638 <_svfprintf_r+0x390>
    6520:	movs	r2, #48	; 0x30
    6522:	subs	r3, r6, #1
    6524:	strb.w	r2, [r6, #-1]
    6528:	add	r2, sp, #192	; 0xc0
    652a:	subs	r2, r2, r3
    652c:	str	r2, [sp, #36]	; 0x24
    652e:	mov	r6, r3
    6530:	b.n	663e <_svfprintf_r+0x396>
    6532:	ldrb.w	r3, [r8]
    6536:	cmp	r3, #42	; 0x2a
    6538:	add.w	r4, r8, #1
    653c:	beq.w	7908 <_svfprintf_r+0x1660>
    6540:	sub.w	r0, r3, #48	; 0x30
    6544:	cmp	r0, #9
    6546:	it	ls
    6548:	movls	r5, #0
    654a:	bhi.w	785a <_svfprintf_r+0x15b2>
    654e:	ldrb.w	r3, [r4], #1
    6552:	add.w	r5, r5, r5, lsl #2
    6556:	add.w	r5, r0, r5, lsl #1
    655a:	sub.w	r0, r3, #48	; 0x30
    655e:	cmp	r0, #9
    6560:	bls.n	654e <_svfprintf_r+0x2a6>
    6562:	orr.w	r5, r5, r5, asr #31
    6566:	mov	r8, r4
    6568:	b.n	6360 <_svfprintf_r+0xb8>
    656a:	nop
    656c:	nop.w
	...
    6578:	.word	0x0000836c
    657c:	.word	0x00008338
    6580:	ldr	r3, [sp, #12]
    6582:	orr.w	r3, r3, #128	; 0x80
    6586:	str	r3, [sp, #12]
    6588:	ldrb.w	r3, [r8]
    658c:	b.n	635c <_svfprintf_r+0xb4>
    658e:	sub.w	r0, r3, #48	; 0x30
    6592:	movs	r3, #0
    6594:	mov	r4, r3
    6596:	ldrb.w	r3, [r8], #1
    659a:	add.w	r4, r4, r4, lsl #2
    659e:	add.w	r4, r0, r4, lsl #1
    65a2:	sub.w	r0, r3, #48	; 0x30
    65a6:	cmp	r0, #9
    65a8:	bls.n	6596 <_svfprintf_r+0x2ee>
    65aa:	str	r4, [sp, #32]
    65ac:	b.n	6360 <_svfprintf_r+0xb8>
    65ae:	str	r3, [sp, #52]	; 0x34
    65b0:	mov	fp, r5
    65b2:	cmp	r2, #0
    65b4:	bne.w	7940 <_svfprintf_r+0x1698>
    65b8:	ldr	r3, [sp, #12]
    65ba:	orr.w	r3, r3, #16
    65be:	str	r3, [sp, #12]
    65c0:	ldr	r3, [sp, #12]
    65c2:	lsls	r4, r3, #26
    65c4:	bpl.w	7036 <_svfprintf_r+0xd8e>
    65c8:	ldr	r7, [sp, #40]	; 0x28
    65ca:	adds	r7, #7
    65cc:	bic.w	r7, r7, #7
    65d0:	ldrd	r2, r3, [r7]
    65d4:	add.w	r1, r7, #8
    65d8:	str	r1, [sp, #40]	; 0x28
    65da:	mov	r4, r2
    65dc:	mov	r5, r3
    65de:	cmp	r2, #0
    65e0:	sbcs.w	r3, r3, #0
    65e4:	blt.w	70ac <_svfprintf_r+0xe04>
    65e8:	cmp.w	fp, #0
    65ec:	ldrb.w	r7, [sp, #111]	; 0x6f
    65f0:	blt.w	7072 <_svfprintf_r+0xdca>
    65f4:	ldr	r3, [sp, #12]
    65f6:	bic.w	r3, r3, #128	; 0x80
    65fa:	str	r3, [sp, #12]
    65fc:	orrs.w	r3, r4, r5
    6600:	beq.w	69d4 <_svfprintf_r+0x72c>
    6604:	cmp	r5, #0
    6606:	it	eq
    6608:	cmpeq	r4, #10
    660a:	bcc.w	69de <_svfprintf_r+0x736>
    660e:	add	r6, sp, #192	; 0xc0
    6610:	mov	r0, r4
    6612:	mov	r1, r5
    6614:	movs	r2, #10
    6616:	movs	r3, #0
    6618:	bl	7adc <__aeabi_uldivmod>
    661c:	adds	r2, #48	; 0x30
    661e:	strb.w	r2, [r6, #-1]!
    6622:	mov	r0, r4
    6624:	mov	r1, r5
    6626:	movs	r3, #0
    6628:	movs	r2, #10
    662a:	bl	7adc <__aeabi_uldivmod>
    662e:	mov	r4, r0
    6630:	mov	r5, r1
    6632:	orrs.w	r3, r4, r5
    6636:	bne.n	6610 <_svfprintf_r+0x368>
    6638:	add	r3, sp, #192	; 0xc0
    663a:	subs	r3, r3, r6
    663c:	str	r3, [sp, #36]	; 0x24
    663e:	ldr	r3, [sp, #36]	; 0x24
    6640:	cmp	r3, fp
    6642:	it	lt
    6644:	movlt	r3, fp
    6646:	str	r3, [sp, #16]
    6648:	movs	r3, #0
    664a:	str	r3, [sp, #60]	; 0x3c
    664c:	cbz	r7, 6654 <_svfprintf_r+0x3ac>
    664e:	ldr	r3, [sp, #16]
    6650:	adds	r3, #1
    6652:	str	r3, [sp, #16]
    6654:	ldr	r3, [sp, #12]
    6656:	ands.w	r3, r3, #2
    665a:	str	r3, [sp, #44]	; 0x2c
    665c:	beq.n	6664 <_svfprintf_r+0x3bc>
    665e:	ldr	r3, [sp, #16]
    6660:	adds	r3, #2
    6662:	str	r3, [sp, #16]
    6664:	ldr	r3, [sp, #12]
    6666:	ands.w	r3, r3, #132	; 0x84
    666a:	str	r3, [sp, #48]	; 0x30
    666c:	bne.w	6c26 <_svfprintf_r+0x97e>
    6670:	ldr	r3, [sp, #32]
    6672:	ldr	r2, [sp, #16]
    6674:	subs	r5, r3, r2
    6676:	cmp	r5, #0
    6678:	ble.w	6c26 <_svfprintf_r+0x97e>
    667c:	cmp	r5, #16
    667e:	ldr	r1, [sp, #148]	; 0x94
    6680:	ldr	r2, [sp, #144]	; 0x90
    6682:	ldr	r7, [pc, #672]	; (6924 <_svfprintf_r+0x67c>)
    6684:	ble.n	66d6 <_svfprintf_r+0x42e>
    6686:	str	r6, [sp, #80]	; 0x50
    6688:	mov	r0, r9
    668a:	movs	r4, #16
    668c:	mov	r9, r7
    668e:	ldr	r6, [sp, #20]
    6690:	mov	r7, r5
    6692:	ldr	r5, [sp, #24]
    6694:	b.n	66a0 <_svfprintf_r+0x3f8>
    6696:	subs	r7, #16
    6698:	cmp	r7, #16
    669a:	add.w	r0, r0, #8
    669e:	ble.n	66ce <_svfprintf_r+0x426>
    66a0:	adds	r2, #1
    66a2:	ldr	r3, [pc, #640]	; (6924 <_svfprintf_r+0x67c>)
    66a4:	str	r2, [sp, #144]	; 0x90
    66a6:	adds	r1, #16
    66a8:	cmp	r2, #7
    66aa:	str	r1, [sp, #148]	; 0x94
    66ac:	stmia.w	r0, {r3, r4}
    66b0:	ble.n	6696 <_svfprintf_r+0x3ee>
    66b2:	add	r2, sp, #140	; 0x8c
    66b4:	mov	r1, r6
    66b6:	mov	r0, r5
    66b8:	bl	798c <__ssprint_r>
    66bc:	cmp	r0, #0
    66be:	bne.w	649c <_svfprintf_r+0x1f4>
    66c2:	subs	r7, #16
    66c4:	cmp	r7, #16
    66c6:	ldr	r1, [sp, #148]	; 0x94
    66c8:	ldr	r2, [sp, #144]	; 0x90
    66ca:	add	r0, sp, #192	; 0xc0
    66cc:	bgt.n	66a0 <_svfprintf_r+0x3f8>
    66ce:	ldr	r6, [sp, #80]	; 0x50
    66d0:	mov	r5, r7
    66d2:	mov	r7, r9
    66d4:	mov	r9, r0
    66d6:	adds	r2, #1
    66d8:	adds	r4, r5, r1
    66da:	cmp	r2, #7
    66dc:	str	r4, [sp, #148]	; 0x94
    66de:	str	r2, [sp, #144]	; 0x90
    66e0:	str.w	r7, [r9]
    66e4:	str.w	r5, [r9, #4]
    66e8:	bgt.w	6f46 <_svfprintf_r+0xc9e>
    66ec:	ldrb.w	r7, [sp, #111]	; 0x6f
    66f0:	add.w	r9, r9, #8
    66f4:	cbz	r7, 6714 <_svfprintf_r+0x46c>
    66f6:	ldr	r3, [sp, #144]	; 0x90
    66f8:	adds	r3, #1
    66fa:	adds	r4, #1
    66fc:	add.w	r1, sp, #111	; 0x6f
    6700:	movs	r2, #1
    6702:	cmp	r3, #7
    6704:	str	r4, [sp, #148]	; 0x94
    6706:	str	r3, [sp, #144]	; 0x90
    6708:	stmia.w	r9, {r1, r2}
    670c:	bgt.w	6e5a <_svfprintf_r+0xbb2>
    6710:	add.w	r9, r9, #8
    6714:	ldr	r3, [sp, #44]	; 0x2c
    6716:	cbz	r3, 6734 <_svfprintf_r+0x48c>
    6718:	ldr	r3, [sp, #144]	; 0x90
    671a:	adds	r3, #1
    671c:	adds	r4, #2
    671e:	add	r1, sp, #112	; 0x70
    6720:	movs	r2, #2
    6722:	cmp	r3, #7
    6724:	str	r4, [sp, #148]	; 0x94
    6726:	str	r3, [sp, #144]	; 0x90
    6728:	stmia.w	r9, {r1, r2}
    672c:	bgt.w	6e72 <_svfprintf_r+0xbca>
    6730:	add.w	r9, r9, #8
    6734:	ldr	r3, [sp, #48]	; 0x30
    6736:	cmp	r3, #128	; 0x80
    6738:	beq.w	6cfe <_svfprintf_r+0xa56>
    673c:	ldr	r3, [sp, #36]	; 0x24
    673e:	rsb	r7, r3, fp
    6742:	cmp	r7, #0
    6744:	ble.n	67ae <_svfprintf_r+0x506>
    6746:	ldr	r2, [pc, #480]	; (6928 <_svfprintf_r+0x680>)
    6748:	ldr	r3, [sp, #144]	; 0x90
    674a:	str	r2, [sp, #44]	; 0x2c
    674c:	cmp	r7, #16
    674e:	ble.n	6796 <_svfprintf_r+0x4ee>
    6750:	mov	r2, r4
    6752:	mov.w	fp, #16
    6756:	ldr	r5, [sp, #24]
    6758:	ldr	r4, [sp, #20]
    675a:	b.n	6766 <_svfprintf_r+0x4be>
    675c:	subs	r7, #16
    675e:	cmp	r7, #16
    6760:	add.w	r9, r9, #8
    6764:	ble.n	6794 <_svfprintf_r+0x4ec>
    6766:	adds	r3, #1
    6768:	adds	r2, #16
    676a:	cmp	r3, #7
    676c:	str	r2, [sp, #148]	; 0x94
    676e:	str	r3, [sp, #144]	; 0x90
    6770:	stmia.w	r9, {sl, fp}
    6774:	ble.n	675c <_svfprintf_r+0x4b4>
    6776:	add	r2, sp, #140	; 0x8c
    6778:	mov	r1, r4
    677a:	mov	r0, r5
    677c:	bl	798c <__ssprint_r>
    6780:	cmp	r0, #0
    6782:	bne.w	649c <_svfprintf_r+0x1f4>
    6786:	subs	r7, #16
    6788:	cmp	r7, #16
    678a:	ldr	r2, [sp, #148]	; 0x94
    678c:	ldr	r3, [sp, #144]	; 0x90
    678e:	add.w	r9, sp, #192	; 0xc0
    6792:	bgt.n	6766 <_svfprintf_r+0x4be>
    6794:	mov	r4, r2
    6796:	adds	r3, #1
    6798:	ldr	r2, [sp, #44]	; 0x2c
    679a:	str	r3, [sp, #144]	; 0x90
    679c:	add	r4, r7
    679e:	cmp	r3, #7
    67a0:	str	r4, [sp, #148]	; 0x94
    67a2:	stmia.w	r9, {r2, r7}
    67a6:	bgt.w	6e42 <_svfprintf_r+0xb9a>
    67aa:	add.w	r9, r9, #8
    67ae:	ldr	r3, [sp, #12]
    67b0:	lsls	r2, r3, #23
    67b2:	bmi.w	6c2a <_svfprintf_r+0x982>
    67b6:	ldr	r3, [sp, #144]	; 0x90
    67b8:	ldr	r1, [sp, #36]	; 0x24
    67ba:	str.w	r6, [r9]
    67be:	adds	r3, #1
    67c0:	add	r4, r1
    67c2:	cmp	r3, #7
    67c4:	str	r4, [sp, #148]	; 0x94
    67c6:	str.w	r1, [r9, #4]
    67ca:	str	r3, [sp, #144]	; 0x90
    67cc:	bgt.w	6e16 <_svfprintf_r+0xb6e>
    67d0:	add.w	r9, r9, #8
    67d4:	ldr	r3, [sp, #12]
    67d6:	lsls	r1, r3, #29
    67d8:	bpl.n	685a <_svfprintf_r+0x5b2>
    67da:	ldr	r3, [sp, #32]
    67dc:	ldr	r2, [sp, #16]
    67de:	subs	r5, r3, r2
    67e0:	cmp	r5, #0
    67e2:	ble.n	685a <_svfprintf_r+0x5b2>
    67e4:	cmp	r5, #16
    67e6:	ldr	r3, [sp, #144]	; 0x90
    67e8:	ldr	r7, [pc, #312]	; (6924 <_svfprintf_r+0x67c>)
    67ea:	ble.n	6834 <_svfprintf_r+0x58c>
    67ec:	mov	r2, r4
    67ee:	movs	r6, #16
    67f0:	ldr.w	fp, [sp, #24]
    67f4:	ldr	r4, [sp, #20]
    67f6:	b.n	6802 <_svfprintf_r+0x55a>
    67f8:	subs	r5, #16
    67fa:	cmp	r5, #16
    67fc:	add.w	r9, r9, #8
    6800:	ble.n	6832 <_svfprintf_r+0x58a>
    6802:	adds	r3, #1
    6804:	ldr	r1, [pc, #284]	; (6924 <_svfprintf_r+0x67c>)
    6806:	str	r3, [sp, #144]	; 0x90
    6808:	adds	r2, #16
    680a:	cmp	r3, #7
    680c:	str	r2, [sp, #148]	; 0x94
    680e:	stmia.w	r9, {r1, r6}
    6812:	ble.n	67f8 <_svfprintf_r+0x550>
    6814:	add	r2, sp, #140	; 0x8c
    6816:	mov	r1, r4
    6818:	mov	r0, fp
    681a:	bl	798c <__ssprint_r>
    681e:	cmp	r0, #0
    6820:	bne.w	649c <_svfprintf_r+0x1f4>
    6824:	subs	r5, #16
    6826:	cmp	r5, #16
    6828:	ldr	r2, [sp, #148]	; 0x94
    682a:	ldr	r3, [sp, #144]	; 0x90
    682c:	add.w	r9, sp, #192	; 0xc0
    6830:	bgt.n	6802 <_svfprintf_r+0x55a>
    6832:	mov	r4, r2
    6834:	adds	r3, #1
    6836:	add	r4, r5
    6838:	cmp	r3, #7
    683a:	str	r4, [sp, #148]	; 0x94
    683c:	str	r3, [sp, #144]	; 0x90
    683e:	str.w	r7, [r9]
    6842:	str.w	r5, [r9, #4]
    6846:	ble.n	685a <_svfprintf_r+0x5b2>
    6848:	add	r2, sp, #140	; 0x8c
    684a:	ldr	r1, [sp, #20]
    684c:	ldr	r0, [sp, #24]
    684e:	bl	798c <__ssprint_r>
    6852:	cmp	r0, #0
    6854:	bne.w	649c <_svfprintf_r+0x1f4>
    6858:	ldr	r4, [sp, #148]	; 0x94
    685a:	ldr	r3, [sp, #28]
    685c:	ldr	r2, [sp, #32]
    685e:	ldr	r1, [sp, #16]
    6860:	cmp	r2, r1
    6862:	ite	ge
    6864:	addge	r3, r3, r2
    6866:	addlt	r3, r3, r1
    6868:	str	r3, [sp, #28]
    686a:	cmp	r4, #0
    686c:	bne.w	6e2e <_svfprintf_r+0xb86>
    6870:	movs	r3, #0
    6872:	str	r3, [sp, #144]	; 0x90
    6874:	add.w	r9, sp, #192	; 0xc0
    6878:	b.n	62f6 <_svfprintf_r+0x4e>
    687a:	str	r3, [sp, #52]	; 0x34
    687c:	mov	fp, r5
    687e:	cmp	r2, #0
    6880:	bne.w	7948 <_svfprintf_r+0x16a0>
    6884:	ldr	r3, [sp, #12]
    6886:	ldr	r7, [sp, #40]	; 0x28
    6888:	lsls	r2, r3, #28
    688a:	add.w	r7, r7, #7
    688e:	bpl.w	737a <_svfprintf_r+0x10d2>
    6892:	bic.w	r3, r7, #7
    6896:	vldr	d7, [r3]
    689a:	vstr	d7, [sp, #64]	; 0x40
    689e:	add.w	r2, r3, #8
    68a2:	str	r2, [sp, #40]	; 0x28
    68a4:	ldrd	r1, r2, [sp, #64]	; 0x40
    68a8:	bic.w	r3, r2, #2147483648	; 0x80000000
    68ac:	str	r1, [sp, #88]	; 0x58
    68ae:	str	r3, [sp, #92]	; 0x5c
    68b0:	ldrd	r4, r5, [sp, #88]	; 0x58
    68b4:	mov.w	r2, #4294967295
    68b8:	mov	r0, r4
    68ba:	mov	r1, r5
    68bc:	ldr	r3, [pc, #108]	; (692c <_svfprintf_r+0x684>)
    68be:	bl	3afc <__aeabi_dcmpun>
    68c2:	cmp	r0, #0
    68c4:	bne.w	727c <_svfprintf_r+0xfd4>
    68c8:	mov.w	r2, #4294967295
    68cc:	ldr	r3, [pc, #92]	; (692c <_svfprintf_r+0x684>)
    68ce:	mov	r0, r4
    68d0:	mov	r1, r5
    68d2:	bl	3ac0 <__aeabi_dcmple>
    68d6:	cmp	r0, #0
    68d8:	bne.w	727c <_svfprintf_r+0xfd4>
    68dc:	movs	r2, #0
    68de:	movs	r3, #0
    68e0:	ldrd	r0, r1, [sp, #64]	; 0x40
    68e4:	bl	3aac <__aeabi_dcmplt>
    68e8:	cmp	r0, #0
    68ea:	bne.w	7792 <_svfprintf_r+0x14ea>
    68ee:	ldrb.w	r7, [sp, #111]	; 0x6f
    68f2:	ldr	r6, [pc, #60]	; (6930 <_svfprintf_r+0x688>)
    68f4:	ldr	r3, [pc, #60]	; (6934 <_svfprintf_r+0x68c>)
    68f6:	ldr	r1, [sp, #12]
    68f8:	bic.w	r1, r1, #128	; 0x80
    68fc:	str	r1, [sp, #12]
    68fe:	ldr	r1, [sp, #52]	; 0x34
    6900:	movs	r2, #3
    6902:	mov.w	fp, #0
    6906:	str	r2, [sp, #16]
    6908:	cmp	r1, #71	; 0x47
    690a:	it	le
    690c:	movle	r6, r3
    690e:	str	r2, [sp, #36]	; 0x24
    6910:	str.w	fp, [sp, #60]	; 0x3c
    6914:	b.n	664c <_svfprintf_r+0x3a4>
    6916:	ldr	r3, [sp, #12]
    6918:	orr.w	r3, r3, #8
    691c:	str	r3, [sp, #12]
    691e:	ldrb.w	r3, [r8]
    6922:	b.n	635c <_svfprintf_r+0xb4>
    6924:	.word	0x00008388
    6928:	.word	0x00008338
    692c:	.word	0x7fefffff
    6930:	.word	0x0000834c
    6934:	.word	0x00008348
    6938:	str	r3, [sp, #52]	; 0x34
    693a:	mov	fp, r5
    693c:	cmp	r2, #0
    693e:	bne.w	7960 <_svfprintf_r+0x16b8>
    6942:	ldr	r3, [sp, #12]
    6944:	orr.w	r3, r3, #16
    6948:	str	r3, [sp, #12]
    694a:	ldr	r2, [sp, #12]
    694c:	ands.w	r3, r2, #32
    6950:	bne.w	64c8 <_svfprintf_r+0x220>
    6954:	ldr	r1, [sp, #12]
    6956:	ands.w	r2, r1, #16
    695a:	beq.w	7214 <_svfprintf_r+0xf6c>
    695e:	ldr	r0, [sp, #40]	; 0x28
    6960:	strb.w	r3, [sp, #111]	; 0x6f
    6964:	cmp.w	fp, #0
    6968:	ldr	r4, [r0, #0]
    696a:	add.w	r7, r0, #4
    696e:	mov.w	r5, #0
    6972:	blt.w	73a8 <_svfprintf_r+0x1100>
    6976:	mov	r2, r1
    6978:	bic.w	r2, r2, #128	; 0x80
    697c:	str	r2, [sp, #12]
    697e:	orrs.w	r2, r4, r5
    6982:	str	r7, [sp, #40]	; 0x28
    6984:	beq.w	6bfc <_svfprintf_r+0x954>
    6988:	mov	r7, r3
    698a:	b.n	64f4 <_svfprintf_r+0x24c>
    698c:	str	r3, [sp, #52]	; 0x34
    698e:	mov	fp, r5
    6990:	cmp	r2, #0
    6992:	bne.w	7958 <_svfprintf_r+0x16b0>
    6996:	ldr	r3, [sp, #12]
    6998:	orr.w	r3, r3, #16
    699c:	str	r3, [sp, #12]
    699e:	ldr	r2, [sp, #12]
    69a0:	ands.w	r3, r2, #32
    69a4:	beq.w	7000 <_svfprintf_r+0xd58>
    69a8:	ldr	r7, [sp, #40]	; 0x28
    69aa:	adds	r7, #7
    69ac:	bic.w	r3, r7, #7
    69b0:	movs	r7, #0
    69b2:	add.w	r1, r3, #8
    69b6:	cmp	fp, r7
    69b8:	str	r1, [sp, #40]	; 0x28
    69ba:	ldrd	r4, r5, [r3]
    69be:	strb.w	r7, [sp, #111]	; 0x6f
    69c2:	blt.w	7072 <_svfprintf_r+0xdca>
    69c6:	bic.w	r3, r2, #128	; 0x80
    69ca:	str	r3, [sp, #12]
    69cc:	orrs.w	r3, r4, r5
    69d0:	bne.w	6604 <_svfprintf_r+0x35c>
    69d4:	cmp.w	fp, #0
    69d8:	beq.w	6bc6 <_svfprintf_r+0x91e>
    69dc:	movs	r4, #0
    69de:	add	r6, sp, #256	; 0x100
    69e0:	adds	r4, #48	; 0x30
    69e2:	strb.w	r4, [r6, #-65]!
    69e6:	b.n	6638 <_svfprintf_r+0x390>
    69e8:	str	r3, [sp, #52]	; 0x34
    69ea:	mov	fp, r5
    69ec:	cmp	r2, #0
    69ee:	bne.w	7950 <_svfprintf_r+0x16a8>
    69f2:	ldr	r3, [sp, #12]
    69f4:	ldr	r0, [pc, #700]	; (6cb4 <_svfprintf_r+0xa0c>)
    69f6:	lsls	r5, r3, #26
    69f8:	bpl.w	6b66 <_svfprintf_r+0x8be>
    69fc:	ldr	r7, [sp, #40]	; 0x28
    69fe:	adds	r7, #7
    6a00:	bic.w	r3, r7, #7
    6a04:	ldrd	r4, r5, [r3]
    6a08:	add.w	r2, r3, #8
    6a0c:	str	r2, [sp, #40]	; 0x28
    6a0e:	ldr	r2, [sp, #12]
    6a10:	ands.w	r7, r2, #1
    6a14:	beq.w	6e8a <_svfprintf_r+0xbe2>
    6a18:	orrs.w	r3, r4, r5
    6a1c:	beq.w	7424 <_svfprintf_r+0x117c>
    6a20:	ldrb.w	r2, [sp, #52]	; 0x34
    6a24:	strb.w	r2, [sp, #113]	; 0x71
    6a28:	movs	r7, #0
    6a2a:	ldr	r2, [sp, #12]
    6a2c:	strb.w	r7, [sp, #111]	; 0x6f
    6a30:	movs	r3, #48	; 0x30
    6a32:	cmp	fp, r7
    6a34:	strb.w	r3, [sp, #112]	; 0x70
    6a38:	orr.w	r3, r2, #2
    6a3c:	blt.w	779c <_svfprintf_r+0x14f4>
    6a40:	bic.w	r3, r2, #128	; 0x80
    6a44:	orr.w	r3, r3, #2
    6a48:	str	r3, [sp, #12]
    6a4a:	add	r6, sp, #192	; 0xc0
    6a4c:	lsrs	r3, r4, #4
    6a4e:	and.w	r1, r4, #15
    6a52:	orr.w	r3, r3, r5, lsl #28
    6a56:	lsrs	r2, r5, #4
    6a58:	mov	r4, r3
    6a5a:	mov	r5, r2
    6a5c:	ldrb	r3, [r0, r1]
    6a5e:	strb.w	r3, [r6, #-1]!
    6a62:	orrs.w	r3, r4, r5
    6a66:	bne.n	6a4c <_svfprintf_r+0x7a4>
    6a68:	b.n	6638 <_svfprintf_r+0x390>
    6a6a:	ldr	r1, [sp, #40]	; 0x28
    6a6c:	str	r3, [sp, #52]	; 0x34
    6a6e:	ldr	r2, [r1, #0]
    6a70:	strb.w	r2, [sp, #152]	; 0x98
    6a74:	movs	r3, #0
    6a76:	mov	r2, r1
    6a78:	mov	r7, r3
    6a7a:	strb.w	r3, [sp, #111]	; 0x6f
    6a7e:	adds	r2, #4
    6a80:	movs	r3, #1
    6a82:	str	r3, [sp, #16]
    6a84:	mov	fp, r7
    6a86:	str	r7, [sp, #60]	; 0x3c
    6a88:	str	r2, [sp, #40]	; 0x28
    6a8a:	str	r3, [sp, #36]	; 0x24
    6a8c:	add	r6, sp, #152	; 0x98
    6a8e:	b.n	6654 <_svfprintf_r+0x3ac>
    6a90:	str	r3, [sp, #52]	; 0x34
    6a92:	mov	fp, r5
    6a94:	cmp	r2, #0
    6a96:	beq.w	65c0 <_svfprintf_r+0x318>
    6a9a:	strb.w	r1, [sp, #111]	; 0x6f
    6a9e:	b.n	65c0 <_svfprintf_r+0x318>
    6aa0:	ldr	r3, [sp, #12]
    6aa2:	orr.w	r3, r3, #64	; 0x40
    6aa6:	str	r3, [sp, #12]
    6aa8:	ldrb.w	r3, [r8]
    6aac:	b.n	635c <_svfprintf_r+0xb4>
    6aae:	ldrb.w	r3, [r8]
    6ab2:	cmp	r1, #0
    6ab4:	bne.w	635c <_svfprintf_r+0xb4>
    6ab8:	movs	r2, #1
    6aba:	movs	r1, #32
    6abc:	b.n	635c <_svfprintf_r+0xb4>
    6abe:	ldr	r3, [sp, #12]
    6ac0:	orr.w	r3, r3, #1
    6ac4:	str	r3, [sp, #12]
    6ac6:	ldrb.w	r3, [r8]
    6aca:	b.n	635c <_svfprintf_r+0xb4>
    6acc:	ldr	r4, [sp, #40]	; 0x28
    6ace:	ldr	r3, [r4, #0]
    6ad0:	str	r3, [sp, #32]
    6ad2:	mov	r0, r3
    6ad4:	cmp	r0, #0
    6ad6:	mov	r3, r4
    6ad8:	add.w	r3, r3, #4
    6adc:	blt.w	6420 <_svfprintf_r+0x178>
    6ae0:	str	r3, [sp, #40]	; 0x28
    6ae2:	ldrb.w	r3, [r8]
    6ae6:	b.n	635c <_svfprintf_r+0xb4>
    6ae8:	ldrb.w	r3, [r8]
    6aec:	movs	r2, #1
    6aee:	movs	r1, #43	; 0x2b
    6af0:	b.n	635c <_svfprintf_r+0xb4>
    6af2:	ldr	r3, [sp, #12]
    6af4:	orr.w	r3, r3, #32
    6af8:	str	r3, [sp, #12]
    6afa:	ldrb.w	r3, [r8]
    6afe:	b.n	635c <_svfprintf_r+0xb4>
    6b00:	ldr	r2, [sp, #40]	; 0x28
    6b02:	str	r3, [sp, #52]	; 0x34
    6b04:	ldr	r6, [r2, #0]
    6b06:	movs	r4, #0
    6b08:	strb.w	r4, [sp, #111]	; 0x6f
    6b0c:	adds	r7, r2, #4
    6b0e:	cmp	r6, #0
    6b10:	beq.w	774c <_svfprintf_r+0x14a4>
    6b14:	cmp	r5, #0
    6b16:	blt.w	75dc <_svfprintf_r+0x1334>
    6b1a:	mov	r2, r5
    6b1c:	mov	r1, r4
    6b1e:	mov	r0, r6
    6b20:	bl	4bc0 <memchr>
    6b24:	cmp	r0, #0
    6b26:	beq.w	77f0 <_svfprintf_r+0x1548>
    6b2a:	subs	r3, r0, r6
    6b2c:	str	r3, [sp, #36]	; 0x24
    6b2e:	mov	fp, r4
    6b30:	bic.w	r3, r3, r3, asr #31
    6b34:	str	r7, [sp, #40]	; 0x28
    6b36:	str	r3, [sp, #16]
    6b38:	str.w	fp, [sp, #60]	; 0x3c
    6b3c:	ldrb.w	r7, [sp, #111]	; 0x6f
    6b40:	b.n	664c <_svfprintf_r+0x3a4>
    6b42:	str	r3, [sp, #52]	; 0x34
    6b44:	mov	fp, r5
    6b46:	cmp	r2, #0
    6b48:	beq.w	699e <_svfprintf_r+0x6f6>
    6b4c:	strb.w	r1, [sp, #111]	; 0x6f
    6b50:	b.n	699e <_svfprintf_r+0x6f6>
    6b52:	str	r3, [sp, #52]	; 0x34
    6b54:	mov	fp, r5
    6b56:	cmp	r2, #0
    6b58:	bne.w	7978 <_svfprintf_r+0x16d0>
    6b5c:	ldr	r3, [sp, #12]
    6b5e:	ldr	r0, [pc, #344]	; (6cb8 <_svfprintf_r+0xa10>)
    6b60:	lsls	r5, r3, #26
    6b62:	bmi.w	69fc <_svfprintf_r+0x754>
    6b66:	ldr	r3, [sp, #12]
    6b68:	lsls	r4, r3, #27
    6b6a:	bpl.w	73ea <_svfprintf_r+0x1142>
    6b6e:	ldr	r2, [sp, #40]	; 0x28
    6b70:	mov	r3, r2
    6b72:	adds	r3, #4
    6b74:	ldr	r4, [r2, #0]
    6b76:	str	r3, [sp, #40]	; 0x28
    6b78:	movs	r5, #0
    6b7a:	b.n	6a0e <_svfprintf_r+0x766>
    6b7c:	ldrb.w	r3, [r8]
    6b80:	cmp	r3, #108	; 0x6c
    6b82:	beq.w	750a <_svfprintf_r+0x1262>
    6b86:	ldr	r0, [sp, #12]
    6b88:	orr.w	r0, r0, #16
    6b8c:	str	r0, [sp, #12]
    6b8e:	b.w	635c <_svfprintf_r+0xb4>
    6b92:	cmp	r2, #0
    6b94:	bne.w	7970 <_svfprintf_r+0x16c8>
    6b98:	ldr	r3, [sp, #12]
    6b9a:	lsls	r3, r3, #26
    6b9c:	bpl.w	724e <_svfprintf_r+0xfa6>
    6ba0:	ldr	r2, [sp, #40]	; 0x28
    6ba2:	ldr	r1, [sp, #28]
    6ba4:	ldr	r3, [r2, #0]
    6ba6:	asrs	r5, r1, #31
    6ba8:	mov	r0, r1
    6baa:	adds	r2, #4
    6bac:	mov	r1, r5
    6bae:	str	r2, [sp, #40]	; 0x28
    6bb0:	strd	r0, r1, [r3]
    6bb4:	b.w	62f6 <_svfprintf_r+0x4e>
    6bb8:	ldr	r0, [pc, #252]	; (6cb8 <_svfprintf_r+0xa10>)
    6bba:	str	r2, [sp, #52]	; 0x34
    6bbc:	cmp.w	fp, #0
    6bc0:	bne.w	6eac <_svfprintf_r+0xc04>
    6bc4:	mov	r7, fp
    6bc6:	mov.w	fp, #0
    6bca:	str.w	fp, [sp, #36]	; 0x24
    6bce:	add	r6, sp, #192	; 0xc0
    6bd0:	b.n	663e <_svfprintf_r+0x396>
    6bd2:	str	r3, [sp, #52]	; 0x34
    6bd4:	cmp	r2, #0
    6bd6:	bne.w	7968 <_svfprintf_r+0x16c0>
    6bda:	ldr	r2, [sp, #52]	; 0x34
    6bdc:	cmp	r2, #0
    6bde:	beq.w	648e <_svfprintf_r+0x1e6>
    6be2:	movs	r3, #0
    6be4:	movs	r1, #1
    6be6:	mov	r7, r3
    6be8:	str	r1, [sp, #16]
    6bea:	strb.w	r2, [sp, #152]	; 0x98
    6bee:	strb.w	r3, [sp, #111]	; 0x6f
    6bf2:	mov	fp, r3
    6bf4:	str	r3, [sp, #60]	; 0x3c
    6bf6:	str	r1, [sp, #36]	; 0x24
    6bf8:	add	r6, sp, #152	; 0x98
    6bfa:	b.n	6654 <_svfprintf_r+0x3ac>
    6bfc:	cmp.w	fp, #0
    6c00:	beq.w	7820 <_svfprintf_r+0x1578>
    6c04:	movs	r7, #0
    6c06:	movs	r4, #0
    6c08:	movs	r5, #0
    6c0a:	b.n	64f4 <_svfprintf_r+0x24c>
    6c0c:	ldr	r0, [pc, #168]	; (6cb8 <_svfprintf_r+0xa10>)
    6c0e:	str	r3, [sp, #12]
    6c10:	str	r2, [sp, #52]	; 0x34
    6c12:	orrs.w	r3, r4, r5
    6c16:	str	r7, [sp, #40]	; 0x28
    6c18:	mov.w	r7, #0
    6c1c:	bne.w	6a4a <_svfprintf_r+0x7a2>
    6c20:	movs	r4, #0
    6c22:	movs	r5, #0
    6c24:	b.n	6a4a <_svfprintf_r+0x7a2>
    6c26:	ldr	r4, [sp, #148]	; 0x94
    6c28:	b.n	66f4 <_svfprintf_r+0x44c>
    6c2a:	ldr	r3, [sp, #52]	; 0x34
    6c2c:	cmp	r3, #101	; 0x65
    6c2e:	ble.w	6d86 <_svfprintf_r+0xade>
    6c32:	movs	r2, #0
    6c34:	movs	r3, #0
    6c36:	ldrd	r0, r1, [sp, #64]	; 0x40
    6c3a:	bl	3a98 <__aeabi_dcmpeq>
    6c3e:	cmp	r0, #0
    6c40:	beq.w	6eb0 <_svfprintf_r+0xc08>
    6c44:	ldr	r3, [sp, #144]	; 0x90
    6c46:	ldr	r2, [pc, #116]	; (6cbc <_svfprintf_r+0xa14>)
    6c48:	str.w	r2, [r9]
    6c4c:	adds	r3, #1
    6c4e:	adds	r4, #1
    6c50:	movs	r2, #1
    6c52:	cmp	r3, #7
    6c54:	str	r4, [sp, #148]	; 0x94
    6c56:	str	r3, [sp, #144]	; 0x90
    6c58:	str.w	r2, [r9, #4]
    6c5c:	bgt.w	743c <_svfprintf_r+0x1194>
    6c60:	add.w	r9, r9, #8
    6c64:	ldr	r3, [sp, #116]	; 0x74
    6c66:	ldr	r2, [sp, #56]	; 0x38
    6c68:	cmp	r3, r2
    6c6a:	blt.n	6c74 <_svfprintf_r+0x9cc>
    6c6c:	ldr	r3, [sp, #12]
    6c6e:	lsls	r3, r3, #31
    6c70:	bpl.w	67d4 <_svfprintf_r+0x52c>
    6c74:	ldr	r3, [sp, #144]	; 0x90
    6c76:	ldr	r1, [sp, #72]	; 0x48
    6c78:	ldr	r2, [sp, #76]	; 0x4c
    6c7a:	str.w	r2, [r9]
    6c7e:	adds	r3, #1
    6c80:	add	r4, r1
    6c82:	cmp	r3, #7
    6c84:	str	r4, [sp, #148]	; 0x94
    6c86:	str.w	r1, [r9, #4]
    6c8a:	str	r3, [sp, #144]	; 0x90
    6c8c:	bgt.w	751e <_svfprintf_r+0x1276>
    6c90:	add.w	r9, r9, #8
    6c94:	ldr	r3, [sp, #56]	; 0x38
    6c96:	subs	r5, r3, #1
    6c98:	cmp	r5, #0
    6c9a:	ble.w	67d4 <_svfprintf_r+0x52c>
    6c9e:	ldr	r2, [pc, #32]	; (6cc0 <_svfprintf_r+0xa18>)
    6ca0:	ldr	r3, [sp, #144]	; 0x90
    6ca2:	str	r2, [sp, #44]	; 0x2c
    6ca4:	cmp	r5, #16
    6ca6:	ble.w	707c <_svfprintf_r+0xdd4>
    6caa:	movs	r6, #16
    6cac:	ldr	r7, [sp, #24]
    6cae:	ldr.w	fp, [sp, #20]
    6cb2:	b.n	6cd0 <_svfprintf_r+0xa28>
    6cb4:	.word	0x00008358
    6cb8:	.word	0x0000836c
    6cbc:	.word	0x00008334
    6cc0:	.word	0x00008338
    6cc4:	add.w	r9, r9, #8
    6cc8:	subs	r5, #16
    6cca:	cmp	r5, #16
    6ccc:	ble.w	707c <_svfprintf_r+0xdd4>
    6cd0:	adds	r3, #1
    6cd2:	adds	r4, #16
    6cd4:	cmp	r3, #7
    6cd6:	str	r4, [sp, #148]	; 0x94
    6cd8:	str	r3, [sp, #144]	; 0x90
    6cda:	str.w	sl, [r9]
    6cde:	str.w	r6, [r9, #4]
    6ce2:	ble.n	6cc4 <_svfprintf_r+0xa1c>
    6ce4:	add	r2, sp, #140	; 0x8c
    6ce6:	mov	r1, fp
    6ce8:	mov	r0, r7
    6cea:	bl	798c <__ssprint_r>
    6cee:	cmp	r0, #0
    6cf0:	bne.w	649c <_svfprintf_r+0x1f4>
    6cf4:	ldr	r4, [sp, #148]	; 0x94
    6cf6:	ldr	r3, [sp, #144]	; 0x90
    6cf8:	add.w	r9, sp, #192	; 0xc0
    6cfc:	b.n	6cc8 <_svfprintf_r+0xa20>
    6cfe:	ldr	r3, [sp, #32]
    6d00:	ldr	r2, [sp, #16]
    6d02:	subs	r7, r3, r2
    6d04:	cmp	r7, #0
    6d06:	ble.w	673c <_svfprintf_r+0x494>
    6d0a:	ldr	r2, [pc, #752]	; (6ffc <_svfprintf_r+0xd54>)
    6d0c:	ldr	r3, [sp, #144]	; 0x90
    6d0e:	str	r2, [sp, #44]	; 0x2c
    6d10:	cmp	r7, #16
    6d12:	ble.n	6d6c <_svfprintf_r+0xac4>
    6d14:	mov	r2, r9
    6d16:	mov	r1, r4
    6d18:	mov	r9, r7
    6d1a:	movs	r5, #16
    6d1c:	mov	r7, r6
    6d1e:	ldr	r4, [sp, #24]
    6d20:	ldr	r6, [sp, #20]
    6d22:	b.n	6d32 <_svfprintf_r+0xa8a>
    6d24:	sub.w	r9, r9, #16
    6d28:	cmp.w	r9, #16
    6d2c:	add.w	r2, r2, #8
    6d30:	ble.n	6d64 <_svfprintf_r+0xabc>
    6d32:	adds	r3, #1
    6d34:	adds	r1, #16
    6d36:	cmp	r3, #7
    6d38:	str	r1, [sp, #148]	; 0x94
    6d3a:	str	r3, [sp, #144]	; 0x90
    6d3c:	str.w	sl, [r2]
    6d40:	str	r5, [r2, #4]
    6d42:	ble.n	6d24 <_svfprintf_r+0xa7c>
    6d44:	add	r2, sp, #140	; 0x8c
    6d46:	mov	r1, r6
    6d48:	mov	r0, r4
    6d4a:	bl	798c <__ssprint_r>
    6d4e:	cmp	r0, #0
    6d50:	bne.w	649c <_svfprintf_r+0x1f4>
    6d54:	sub.w	r9, r9, #16
    6d58:	cmp.w	r9, #16
    6d5c:	ldr	r1, [sp, #148]	; 0x94
    6d5e:	ldr	r3, [sp, #144]	; 0x90
    6d60:	add	r2, sp, #192	; 0xc0
    6d62:	bgt.n	6d32 <_svfprintf_r+0xa8a>
    6d64:	mov	r6, r7
    6d66:	mov	r4, r1
    6d68:	mov	r7, r9
    6d6a:	mov	r9, r2
    6d6c:	adds	r3, #1
    6d6e:	ldr	r2, [sp, #44]	; 0x2c
    6d70:	str	r3, [sp, #144]	; 0x90
    6d72:	add	r4, r7
    6d74:	cmp	r3, #7
    6d76:	str	r4, [sp, #148]	; 0x94
    6d78:	stmia.w	r9, {r2, r7}
    6d7c:	bgt.w	71fa <_svfprintf_r+0xf52>
    6d80:	add.w	r9, r9, #8
    6d84:	b.n	673c <_svfprintf_r+0x494>
    6d86:	ldr	r3, [sp, #56]	; 0x38
    6d88:	ldr	r5, [sp, #144]	; 0x90
    6d8a:	cmp	r3, #1
    6d8c:	ble.w	71a4 <_svfprintf_r+0xefc>
    6d90:	adds	r5, #1
    6d92:	adds	r4, #1
    6d94:	movs	r3, #1
    6d96:	cmp	r5, #7
    6d98:	str	r4, [sp, #148]	; 0x94
    6d9a:	str	r5, [sp, #144]	; 0x90
    6d9c:	str.w	r6, [r9]
    6da0:	str.w	r3, [r9, #4]
    6da4:	bgt.w	71c6 <_svfprintf_r+0xf1e>
    6da8:	add.w	r9, r9, #8
    6dac:	ldr	r2, [sp, #72]	; 0x48
    6dae:	ldr	r3, [sp, #76]	; 0x4c
    6db0:	str.w	r3, [r9]
    6db4:	adds	r5, #1
    6db6:	add	r4, r2
    6db8:	cmp	r5, #7
    6dba:	str	r4, [sp, #148]	; 0x94
    6dbc:	str	r5, [sp, #144]	; 0x90
    6dbe:	str.w	r2, [r9, #4]
    6dc2:	bgt.w	71e0 <_svfprintf_r+0xf38>
    6dc6:	add.w	r9, r9, #8
    6dca:	movs	r3, #0
    6dcc:	movs	r2, #0
    6dce:	ldrd	r0, r1, [sp, #64]	; 0x40
    6dd2:	bl	3a98 <__aeabi_dcmpeq>
    6dd6:	ldr	r3, [sp, #56]	; 0x38
    6dd8:	cmp	r0, #0
    6dda:	bne.w	6f64 <_svfprintf_r+0xcbc>
    6dde:	subs	r3, #1
    6de0:	adds	r5, #1
    6de2:	adds	r6, #1
    6de4:	add	r4, r3
    6de6:	cmp	r5, #7
    6de8:	str	r5, [sp, #144]	; 0x90
    6dea:	str	r4, [sp, #148]	; 0x94
    6dec:	str.w	r6, [r9]
    6df0:	str.w	r3, [r9, #4]
    6df4:	bgt.w	6fe2 <_svfprintf_r+0xd3a>
    6df8:	add.w	r9, r9, #8
    6dfc:	ldr	r2, [sp, #84]	; 0x54
    6dfe:	str.w	r2, [r9, #4]
    6e02:	adds	r5, #1
    6e04:	add	r4, r2
    6e06:	add	r3, sp, #124	; 0x7c
    6e08:	cmp	r5, #7
    6e0a:	str	r4, [sp, #148]	; 0x94
    6e0c:	str	r5, [sp, #144]	; 0x90
    6e0e:	str.w	r3, [r9]
    6e12:	ble.w	67d0 <_svfprintf_r+0x528>
    6e16:	add	r2, sp, #140	; 0x8c
    6e18:	ldr	r1, [sp, #20]
    6e1a:	ldr	r0, [sp, #24]
    6e1c:	bl	798c <__ssprint_r>
    6e20:	cmp	r0, #0
    6e22:	bne.w	649c <_svfprintf_r+0x1f4>
    6e26:	ldr	r4, [sp, #148]	; 0x94
    6e28:	add.w	r9, sp, #192	; 0xc0
    6e2c:	b.n	67d4 <_svfprintf_r+0x52c>
    6e2e:	add	r2, sp, #140	; 0x8c
    6e30:	ldr	r1, [sp, #20]
    6e32:	ldr	r0, [sp, #24]
    6e34:	bl	798c <__ssprint_r>
    6e38:	cmp	r0, #0
    6e3a:	beq.w	6870 <_svfprintf_r+0x5c8>
    6e3e:	b.w	649c <_svfprintf_r+0x1f4>
    6e42:	add	r2, sp, #140	; 0x8c
    6e44:	ldr	r1, [sp, #20]
    6e46:	ldr	r0, [sp, #24]
    6e48:	bl	798c <__ssprint_r>
    6e4c:	cmp	r0, #0
    6e4e:	bne.w	649c <_svfprintf_r+0x1f4>
    6e52:	ldr	r4, [sp, #148]	; 0x94
    6e54:	add.w	r9, sp, #192	; 0xc0
    6e58:	b.n	67ae <_svfprintf_r+0x506>
    6e5a:	add	r2, sp, #140	; 0x8c
    6e5c:	ldr	r1, [sp, #20]
    6e5e:	ldr	r0, [sp, #24]
    6e60:	bl	798c <__ssprint_r>
    6e64:	cmp	r0, #0
    6e66:	bne.w	649c <_svfprintf_r+0x1f4>
    6e6a:	ldr	r4, [sp, #148]	; 0x94
    6e6c:	add.w	r9, sp, #192	; 0xc0
    6e70:	b.n	6714 <_svfprintf_r+0x46c>
    6e72:	add	r2, sp, #140	; 0x8c
    6e74:	ldr	r1, [sp, #20]
    6e76:	ldr	r0, [sp, #24]
    6e78:	bl	798c <__ssprint_r>
    6e7c:	cmp	r0, #0
    6e7e:	bne.w	649c <_svfprintf_r+0x1f4>
    6e82:	ldr	r4, [sp, #148]	; 0x94
    6e84:	add.w	r9, sp, #192	; 0xc0
    6e88:	b.n	6734 <_svfprintf_r+0x48c>
    6e8a:	cmp.w	fp, #0
    6e8e:	strb.w	r7, [sp, #111]	; 0x6f
    6e92:	blt.w	7454 <_svfprintf_r+0x11ac>
    6e96:	bic.w	r3, r2, #128	; 0x80
    6e9a:	str	r3, [sp, #12]
    6e9c:	orrs.w	r3, r4, r5
    6ea0:	bne.w	6a4a <_svfprintf_r+0x7a2>
    6ea4:	cmp.w	fp, #0
    6ea8:	beq.w	6bc4 <_svfprintf_r+0x91c>
    6eac:	movs	r7, #0
    6eae:	b.n	6c20 <_svfprintf_r+0x978>
    6eb0:	ldr	r5, [sp, #116]	; 0x74
    6eb2:	cmp	r5, #0
    6eb4:	ble.w	745a <_svfprintf_r+0x11b2>
    6eb8:	ldr	r3, [sp, #60]	; 0x3c
    6eba:	ldr	r2, [sp, #56]	; 0x38
    6ebc:	cmp	r3, r2
    6ebe:	it	ge
    6ec0:	movge	r3, r2
    6ec2:	cmp	r3, #0
    6ec4:	mov	r5, r3
    6ec6:	ble.n	6ee4 <_svfprintf_r+0xc3c>
    6ec8:	ldr	r3, [sp, #144]	; 0x90
    6eca:	str.w	r6, [r9]
    6ece:	adds	r3, #1
    6ed0:	add	r4, r5
    6ed2:	cmp	r3, #7
    6ed4:	str	r4, [sp, #148]	; 0x94
    6ed6:	str.w	r5, [r9, #4]
    6eda:	str	r3, [sp, #144]	; 0x90
    6edc:	bgt.w	7632 <_svfprintf_r+0x138a>
    6ee0:	add.w	r9, r9, #8
    6ee4:	ldr	r3, [sp, #60]	; 0x3c
    6ee6:	cmp	r5, #0
    6ee8:	it	ge
    6eea:	subge	r3, r3, r5
    6eec:	cmp	r3, #0
    6eee:	mov	r5, r3
    6ef0:	ble.w	70e4 <_svfprintf_r+0xe3c>
    6ef4:	ldr	r2, [pc, #260]	; (6ffc <_svfprintf_r+0xd54>)
    6ef6:	ldr	r3, [sp, #144]	; 0x90
    6ef8:	str	r2, [sp, #44]	; 0x2c
    6efa:	cmp	r5, #16
    6efc:	ble.w	7406 <_svfprintf_r+0x115e>
    6f00:	mov	r2, r4
    6f02:	movs	r7, #16
    6f04:	ldr.w	fp, [sp, #24]
    6f08:	ldr	r4, [sp, #20]
    6f0a:	b.n	6f18 <_svfprintf_r+0xc70>
    6f0c:	add.w	r9, r9, #8
    6f10:	subs	r5, #16
    6f12:	cmp	r5, #16
    6f14:	ble.w	7404 <_svfprintf_r+0x115c>
    6f18:	adds	r3, #1
    6f1a:	adds	r2, #16
    6f1c:	cmp	r3, #7
    6f1e:	str	r2, [sp, #148]	; 0x94
    6f20:	str	r3, [sp, #144]	; 0x90
    6f22:	str.w	sl, [r9]
    6f26:	str.w	r7, [r9, #4]
    6f2a:	ble.n	6f0c <_svfprintf_r+0xc64>
    6f2c:	add	r2, sp, #140	; 0x8c
    6f2e:	mov	r1, r4
    6f30:	mov	r0, fp
    6f32:	bl	798c <__ssprint_r>
    6f36:	cmp	r0, #0
    6f38:	bne.w	649c <_svfprintf_r+0x1f4>
    6f3c:	ldr	r2, [sp, #148]	; 0x94
    6f3e:	ldr	r3, [sp, #144]	; 0x90
    6f40:	add.w	r9, sp, #192	; 0xc0
    6f44:	b.n	6f10 <_svfprintf_r+0xc68>
    6f46:	add	r2, sp, #140	; 0x8c
    6f48:	ldr	r1, [sp, #20]
    6f4a:	ldr	r0, [sp, #24]
    6f4c:	bl	798c <__ssprint_r>
    6f50:	cmp	r0, #0
    6f52:	bne.w	649c <_svfprintf_r+0x1f4>
    6f56:	ldrb.w	r7, [sp, #111]	; 0x6f
    6f5a:	ldr	r4, [sp, #148]	; 0x94
    6f5c:	add.w	r9, sp, #192	; 0xc0
    6f60:	b.w	66f4 <_svfprintf_r+0x44c>
    6f64:	subs	r6, r3, #1
    6f66:	cmp	r6, #0
    6f68:	ble.w	6dfc <_svfprintf_r+0xb54>
    6f6c:	ldr	r3, [pc, #140]	; (6ffc <_svfprintf_r+0xd54>)
    6f6e:	str	r3, [sp, #44]	; 0x2c
    6f70:	cmp	r6, #16
    6f72:	ble.n	6fce <_svfprintf_r+0xd26>
    6f74:	str.w	r8, [sp, #36]	; 0x24
    6f78:	movs	r7, #16
    6f7a:	mov	r8, r6
    6f7c:	ldr.w	fp, [sp, #24]
    6f80:	ldr	r6, [sp, #20]
    6f82:	b.n	6f92 <_svfprintf_r+0xcea>
    6f84:	sub.w	r8, r8, #16
    6f88:	cmp.w	r8, #16
    6f8c:	add.w	r9, r9, #8
    6f90:	ble.n	6fc8 <_svfprintf_r+0xd20>
    6f92:	adds	r5, #1
    6f94:	adds	r4, #16
    6f96:	cmp	r5, #7
    6f98:	str	r4, [sp, #148]	; 0x94
    6f9a:	str	r5, [sp, #144]	; 0x90
    6f9c:	str.w	sl, [r9]
    6fa0:	str.w	r7, [r9, #4]
    6fa4:	ble.n	6f84 <_svfprintf_r+0xcdc>
    6fa6:	add	r2, sp, #140	; 0x8c
    6fa8:	mov	r1, r6
    6faa:	mov	r0, fp
    6fac:	bl	798c <__ssprint_r>
    6fb0:	cmp	r0, #0
    6fb2:	bne.w	649c <_svfprintf_r+0x1f4>
    6fb6:	sub.w	r8, r8, #16
    6fba:	cmp.w	r8, #16
    6fbe:	ldr	r4, [sp, #148]	; 0x94
    6fc0:	ldr	r5, [sp, #144]	; 0x90
    6fc2:	add.w	r9, sp, #192	; 0xc0
    6fc6:	bgt.n	6f92 <_svfprintf_r+0xcea>
    6fc8:	mov	r6, r8
    6fca:	ldr.w	r8, [sp, #36]	; 0x24
    6fce:	ldr	r3, [sp, #44]	; 0x2c
    6fd0:	adds	r5, #1
    6fd2:	add	r4, r6
    6fd4:	cmp	r5, #7
    6fd6:	str	r4, [sp, #148]	; 0x94
    6fd8:	str	r5, [sp, #144]	; 0x90
    6fda:	stmia.w	r9, {r3, r6}
    6fde:	ble.w	6df8 <_svfprintf_r+0xb50>
    6fe2:	add	r2, sp, #140	; 0x8c
    6fe4:	ldr	r1, [sp, #20]
    6fe6:	ldr	r0, [sp, #24]
    6fe8:	bl	798c <__ssprint_r>
    6fec:	cmp	r0, #0
    6fee:	bne.w	649c <_svfprintf_r+0x1f4>
    6ff2:	ldr	r4, [sp, #148]	; 0x94
    6ff4:	ldr	r5, [sp, #144]	; 0x90
    6ff6:	add.w	r9, sp, #192	; 0xc0
    6ffa:	b.n	6dfc <_svfprintf_r+0xb54>
    6ffc:	.word	0x00008338
    7000:	ldr	r1, [sp, #12]
    7002:	ands.w	r2, r1, #16
    7006:	beq.w	73b0 <_svfprintf_r+0x1108>
    700a:	ldr	r0, [sp, #40]	; 0x28
    700c:	strb.w	r3, [sp, #111]	; 0x6f
    7010:	cmp.w	fp, #0
    7014:	ldr	r4, [r0, #0]
    7016:	add.w	r7, r0, #4
    701a:	mov.w	r5, #0
    701e:	blt.n	706e <_svfprintf_r+0xdc6>
    7020:	mov	r2, r1
    7022:	bic.w	r2, r2, #128	; 0x80
    7026:	str	r2, [sp, #12]
    7028:	orrs.w	r2, r4, r5
    702c:	str	r7, [sp, #40]	; 0x28
    702e:	mov	r7, r3
    7030:	bne.w	6604 <_svfprintf_r+0x35c>
    7034:	b.n	69d4 <_svfprintf_r+0x72c>
    7036:	ldr	r3, [sp, #12]
    7038:	lsls	r0, r3, #27
    703a:	bmi.n	7092 <_svfprintf_r+0xdea>
    703c:	ldr	r3, [sp, #12]
    703e:	lsls	r1, r3, #25
    7040:	bpl.n	7092 <_svfprintf_r+0xdea>
    7042:	ldr	r1, [sp, #40]	; 0x28
    7044:	ldrsh.w	r4, [r1]
    7048:	adds	r1, #4
    704a:	asrs	r5, r4, #31
    704c:	mov	r2, r4
    704e:	mov	r3, r5
    7050:	str	r1, [sp, #40]	; 0x28
    7052:	b.w	65de <_svfprintf_r+0x336>
    7056:	ldr	r1, [sp, #40]	; 0x28
    7058:	strb.w	r3, [sp, #111]	; 0x6f
    705c:	cmp.w	fp, #0
    7060:	ldr	r4, [r1, #0]
    7062:	add.w	r7, r1, #4
    7066:	mov.w	r5, #0
    706a:	bge.w	7506 <_svfprintf_r+0x125e>
    706e:	str	r7, [sp, #40]	; 0x28
    7070:	mov	r7, r3
    7072:	orrs.w	r3, r4, r5
    7076:	bne.w	6604 <_svfprintf_r+0x35c>
    707a:	b.n	69de <_svfprintf_r+0x736>
    707c:	adds	r3, #1
    707e:	ldr	r2, [sp, #44]	; 0x2c
    7080:	str	r3, [sp, #144]	; 0x90
    7082:	add	r4, r5
    7084:	cmp	r3, #7
    7086:	str	r4, [sp, #148]	; 0x94
    7088:	stmia.w	r9, {r2, r5}
    708c:	ble.w	67d0 <_svfprintf_r+0x528>
    7090:	b.n	6e16 <_svfprintf_r+0xb6e>
    7092:	ldr	r2, [sp, #40]	; 0x28
    7094:	ldr	r4, [r2, #0]
    7096:	mov	r3, r2
    7098:	adds	r3, #4
    709a:	asrs	r5, r4, #31
    709c:	mov	r2, r4
    709e:	str	r3, [sp, #40]	; 0x28
    70a0:	cmp	r2, #0
    70a2:	mov	r3, r5
    70a4:	sbcs.w	r3, r3, #0
    70a8:	bge.w	65e8 <_svfprintf_r+0x340>
    70ac:	negs	r4, r4
    70ae:	mov.w	r7, #45	; 0x2d
    70b2:	sbc.w	r5, r5, r5, lsl #1
    70b6:	cmp.w	fp, #0
    70ba:	strb.w	r7, [sp, #111]	; 0x6f
    70be:	blt.w	6604 <_svfprintf_r+0x35c>
    70c2:	ldr	r3, [sp, #12]
    70c4:	bic.w	r3, r3, #128	; 0x80
    70c8:	str	r3, [sp, #12]
    70ca:	b.w	6604 <_svfprintf_r+0x35c>
    70ce:	add	r2, sp, #140	; 0x8c
    70d0:	ldr	r1, [sp, #20]
    70d2:	ldr	r0, [sp, #24]
    70d4:	bl	798c <__ssprint_r>
    70d8:	cmp	r0, #0
    70da:	bne.w	649c <_svfprintf_r+0x1f4>
    70de:	ldr	r4, [sp, #148]	; 0x94
    70e0:	add.w	r9, sp, #192	; 0xc0
    70e4:	ldr	r2, [sp, #60]	; 0x3c
    70e6:	ldr	r3, [sp, #116]	; 0x74
    70e8:	add	r2, r6
    70ea:	mov	r7, r2
    70ec:	ldr	r2, [sp, #56]	; 0x38
    70ee:	cmp	r3, r2
    70f0:	blt.n	7182 <_svfprintf_r+0xeda>
    70f2:	ldr	r2, [sp, #12]
    70f4:	lsls	r5, r2, #31
    70f6:	bmi.n	7182 <_svfprintf_r+0xeda>
    70f8:	ldr	r1, [sp, #56]	; 0x38
    70fa:	add	r6, r1
    70fc:	subs	r5, r6, r7
    70fe:	subs	r3, r1, r3
    7100:	cmp	r5, r3
    7102:	it	ge
    7104:	movge	r5, r3
    7106:	cmp	r5, #0
    7108:	mov	r6, r5
    710a:	ble.n	7128 <_svfprintf_r+0xe80>
    710c:	ldr	r2, [sp, #144]	; 0x90
    710e:	str.w	r7, [r9]
    7112:	adds	r2, #1
    7114:	add	r4, r5
    7116:	cmp	r2, #7
    7118:	str	r4, [sp, #148]	; 0x94
    711a:	str.w	r5, [r9, #4]
    711e:	str	r2, [sp, #144]	; 0x90
    7120:	bgt.w	7720 <_svfprintf_r+0x1478>
    7124:	add.w	r9, r9, #8
    7128:	cmp	r6, #0
    712a:	ite	ge
    712c:	subge	r5, r3, r6
    712e:	movlt	r5, r3
    7130:	cmp	r5, #0
    7132:	ble.w	67d4 <_svfprintf_r+0x52c>
    7136:	ldr	r2, [pc, #744]	; (7420 <_svfprintf_r+0x1178>)
    7138:	ldr	r3, [sp, #144]	; 0x90
    713a:	str	r2, [sp, #44]	; 0x2c
    713c:	cmp	r5, #16
    713e:	ble.n	707c <_svfprintf_r+0xdd4>
    7140:	movs	r6, #16
    7142:	ldr	r7, [sp, #24]
    7144:	ldr.w	fp, [sp, #20]
    7148:	b.n	7154 <_svfprintf_r+0xeac>
    714a:	add.w	r9, r9, #8
    714e:	subs	r5, #16
    7150:	cmp	r5, #16
    7152:	ble.n	707c <_svfprintf_r+0xdd4>
    7154:	adds	r3, #1
    7156:	adds	r4, #16
    7158:	cmp	r3, #7
    715a:	str	r4, [sp, #148]	; 0x94
    715c:	str	r3, [sp, #144]	; 0x90
    715e:	str.w	sl, [r9]
    7162:	str.w	r6, [r9, #4]
    7166:	ble.n	714a <_svfprintf_r+0xea2>
    7168:	add	r2, sp, #140	; 0x8c
    716a:	mov	r1, fp
    716c:	mov	r0, r7
    716e:	bl	798c <__ssprint_r>
    7172:	cmp	r0, #0
    7174:	bne.w	649c <_svfprintf_r+0x1f4>
    7178:	ldr	r4, [sp, #148]	; 0x94
    717a:	ldr	r3, [sp, #144]	; 0x90
    717c:	add.w	r9, sp, #192	; 0xc0
    7180:	b.n	714e <_svfprintf_r+0xea6>
    7182:	ldr	r2, [sp, #144]	; 0x90
    7184:	ldr	r0, [sp, #72]	; 0x48
    7186:	ldr	r1, [sp, #76]	; 0x4c
    7188:	str.w	r1, [r9]
    718c:	adds	r2, #1
    718e:	add	r4, r0
    7190:	cmp	r2, #7
    7192:	str	r4, [sp, #148]	; 0x94
    7194:	str.w	r0, [r9, #4]
    7198:	str	r2, [sp, #144]	; 0x90
    719a:	bgt.w	7706 <_svfprintf_r+0x145e>
    719e:	add.w	r9, r9, #8
    71a2:	b.n	70f8 <_svfprintf_r+0xe50>
    71a4:	ldr	r3, [sp, #12]
    71a6:	lsls	r0, r3, #31
    71a8:	bmi.w	6d90 <_svfprintf_r+0xae8>
    71ac:	adds	r5, #1
    71ae:	adds	r4, #1
    71b0:	movs	r3, #1
    71b2:	cmp	r5, #7
    71b4:	str	r4, [sp, #148]	; 0x94
    71b6:	str	r5, [sp, #144]	; 0x90
    71b8:	str.w	r6, [r9]
    71bc:	str.w	r3, [r9, #4]
    71c0:	ble.w	6df8 <_svfprintf_r+0xb50>
    71c4:	b.n	6fe2 <_svfprintf_r+0xd3a>
    71c6:	add	r2, sp, #140	; 0x8c
    71c8:	ldr	r1, [sp, #20]
    71ca:	ldr	r0, [sp, #24]
    71cc:	bl	798c <__ssprint_r>
    71d0:	cmp	r0, #0
    71d2:	bne.w	649c <_svfprintf_r+0x1f4>
    71d6:	ldr	r4, [sp, #148]	; 0x94
    71d8:	ldr	r5, [sp, #144]	; 0x90
    71da:	add.w	r9, sp, #192	; 0xc0
    71de:	b.n	6dac <_svfprintf_r+0xb04>
    71e0:	add	r2, sp, #140	; 0x8c
    71e2:	ldr	r1, [sp, #20]
    71e4:	ldr	r0, [sp, #24]
    71e6:	bl	798c <__ssprint_r>
    71ea:	cmp	r0, #0
    71ec:	bne.w	649c <_svfprintf_r+0x1f4>
    71f0:	ldr	r4, [sp, #148]	; 0x94
    71f2:	ldr	r5, [sp, #144]	; 0x90
    71f4:	add.w	r9, sp, #192	; 0xc0
    71f8:	b.n	6dca <_svfprintf_r+0xb22>
    71fa:	add	r2, sp, #140	; 0x8c
    71fc:	ldr	r1, [sp, #20]
    71fe:	ldr	r0, [sp, #24]
    7200:	bl	798c <__ssprint_r>
    7204:	cmp	r0, #0
    7206:	bne.w	649c <_svfprintf_r+0x1f4>
    720a:	ldr	r4, [sp, #148]	; 0x94
    720c:	add.w	r9, sp, #192	; 0xc0
    7210:	b.w	673c <_svfprintf_r+0x494>
    7214:	ldr	r1, [sp, #12]
    7216:	ands.w	r3, r1, #64	; 0x40
    721a:	beq.w	7390 <_svfprintf_r+0x10e8>
    721e:	ldr	r0, [sp, #40]	; 0x28
    7220:	strb.w	r2, [sp, #111]	; 0x6f
    7224:	mov	r3, r0
    7226:	cmp.w	fp, #0
    722a:	add.w	r3, r3, #4
    722e:	ldrh	r4, [r0, #0]
    7230:	mov.w	r5, #0
    7234:	blt.w	75b8 <_svfprintf_r+0x1310>
    7238:	bic.w	r1, r1, #128	; 0x80
    723c:	str	r1, [sp, #12]
    723e:	orrs.w	r1, r4, r5
    7242:	str	r3, [sp, #40]	; 0x28
    7244:	beq.w	6bfc <_svfprintf_r+0x954>
    7248:	mov	r7, r2
    724a:	b.w	64f4 <_svfprintf_r+0x24c>
    724e:	ldr	r3, [sp, #12]
    7250:	lsls	r7, r3, #27
    7252:	bmi.n	726c <_svfprintf_r+0xfc4>
    7254:	ldr	r3, [sp, #12]
    7256:	lsls	r6, r3, #25
    7258:	bpl.n	726c <_svfprintf_r+0xfc4>
    725a:	ldr	r2, [sp, #40]	; 0x28
    725c:	ldr	r3, [r2, #0]
    725e:	adds	r2, #4
    7260:	str	r2, [sp, #40]	; 0x28
    7262:	ldrh.w	r2, [sp, #28]
    7266:	strh	r2, [r3, #0]
    7268:	b.w	62f6 <_svfprintf_r+0x4e>
    726c:	ldr	r2, [sp, #40]	; 0x28
    726e:	ldr	r3, [r2, #0]
    7270:	adds	r2, #4
    7272:	str	r2, [sp, #40]	; 0x28
    7274:	ldr	r2, [sp, #28]
    7276:	str	r2, [r3, #0]
    7278:	b.w	62f6 <_svfprintf_r+0x4e>
    727c:	ldrd	r0, r1, [sp, #64]	; 0x40
    7280:	mov	r2, r0
    7282:	mov	r3, r1
    7284:	bl	3afc <__aeabi_dcmpun>
    7288:	cmp	r0, #0
    728a:	bne.w	7888 <_svfprintf_r+0x15e0>
    728e:	ldr	r3, [sp, #52]	; 0x34
    7290:	cmp.w	fp, #4294967295
    7294:	bic.w	r7, r3, #32
    7298:	beq.w	776a <_svfprintf_r+0x14c2>
    729c:	cmp	r7, #71	; 0x47
    729e:	beq.w	75a6 <_svfprintf_r+0x12fe>
    72a2:	ldr	r3, [sp, #68]	; 0x44
    72a4:	ldr	r2, [sp, #12]
    72a6:	cmp	r3, #0
    72a8:	orr.w	r2, r2, #256	; 0x100
    72ac:	str	r2, [sp, #44]	; 0x2c
    72ae:	blt.w	77a2 <_svfprintf_r+0x14fa>
    72b2:	vldr	d7, [sp, #64]	; 0x40
    72b6:	vstr	d7, [sp, #96]	; 0x60
    72ba:	movs	r3, #0
    72bc:	str	r3, [sp, #16]
    72be:	ldr	r3, [sp, #52]	; 0x34
    72c0:	cmp	r3, #102	; 0x66
    72c2:	beq.w	7770 <_svfprintf_r+0x14c8>
    72c6:	cmp	r3, #70	; 0x46
    72c8:	beq.w	7556 <_svfprintf_r+0x12ae>
    72cc:	cmp	r7, #69	; 0x45
    72ce:	ite	eq
    72d0:	addeq.w	r5, fp, #1
    72d4:	movne	r5, fp
    72d6:	add	r2, sp, #132	; 0x84
    72d8:	add	r3, sp, #120	; 0x78
    72da:	str	r2, [sp, #4]
    72dc:	str	r3, [sp, #0]
    72de:	mov	r2, r5
    72e0:	add	r3, sp, #116	; 0x74
    72e2:	movs	r1, #2
    72e4:	vldr	d0, [sp, #96]	; 0x60
    72e8:	ldr	r0, [sp, #24]
    72ea:	bl	5470 <_dtoa_r>
    72ee:	ldr	r3, [sp, #52]	; 0x34
    72f0:	cmp	r3, #103	; 0x67
    72f2:	mov	r6, r0
    72f4:	bne.w	77ce <_svfprintf_r+0x1526>
    72f8:	ldr	r3, [sp, #12]
    72fa:	lsls	r2, r3, #31
    72fc:	bpl.w	7872 <_svfprintf_r+0x15ca>
    7300:	adds	r4, r6, r5
    7302:	movs	r2, #0
    7304:	movs	r3, #0
    7306:	ldrd	r0, r1, [sp, #96]	; 0x60
    730a:	bl	3a98 <__aeabi_dcmpeq>
    730e:	cmp	r0, #0
    7310:	bne.w	762e <_svfprintf_r+0x1386>
    7314:	ldr	r3, [sp, #132]	; 0x84
    7316:	cmp	r4, r3
    7318:	bls.n	7328 <_svfprintf_r+0x1080>
    731a:	movs	r1, #48	; 0x30
    731c:	adds	r2, r3, #1
    731e:	str	r2, [sp, #132]	; 0x84
    7320:	strb	r1, [r3, #0]
    7322:	ldr	r3, [sp, #132]	; 0x84
    7324:	cmp	r4, r3
    7326:	bhi.n	731c <_svfprintf_r+0x1074>
    7328:	subs	r3, r3, r6
    732a:	cmp	r7, #71	; 0x47
    732c:	str	r3, [sp, #56]	; 0x38
    732e:	beq.w	7620 <_svfprintf_r+0x1378>
    7332:	ldr	r3, [sp, #52]	; 0x34
    7334:	cmp	r3, #101	; 0x65
    7336:	ble.w	77ec <_svfprintf_r+0x1544>
    733a:	ldr	r3, [sp, #52]	; 0x34
    733c:	cmp	r3, #102	; 0x66
    733e:	ldr	r3, [sp, #116]	; 0x74
    7340:	str	r3, [sp, #60]	; 0x3c
    7342:	beq.w	7806 <_svfprintf_r+0x155e>
    7346:	ldr	r2, [sp, #60]	; 0x3c
    7348:	ldr	r1, [sp, #56]	; 0x38
    734a:	cmp	r2, r1
    734c:	blt.w	77b4 <_svfprintf_r+0x150c>
    7350:	ldr	r3, [sp, #12]
    7352:	lsls	r1, r3, #31
    7354:	bmi.w	7876 <_svfprintf_r+0x15ce>
    7358:	bic.w	r3, r2, r2, asr #31
    735c:	str	r2, [sp, #36]	; 0x24
    735e:	movs	r2, #103	; 0x67
    7360:	str	r2, [sp, #52]	; 0x34
    7362:	ldr	r2, [sp, #16]
    7364:	cmp	r2, #0
    7366:	bne.w	75c8 <_svfprintf_r+0x1320>
    736a:	str	r3, [sp, #16]
    736c:	ldr	r3, [sp, #44]	; 0x2c
    736e:	str	r3, [sp, #12]
    7370:	mov	fp, r2
    7372:	ldrb.w	r7, [sp, #111]	; 0x6f
    7376:	b.w	664c <_svfprintf_r+0x3a4>
    737a:	bic.w	r7, r7, #7
    737e:	vldr	d7, [r7]
    7382:	add.w	r3, r7, #8
    7386:	vstr	d7, [sp, #64]	; 0x40
    738a:	str	r3, [sp, #40]	; 0x28
    738c:	b.w	68a4 <_svfprintf_r+0x5fc>
    7390:	ldr	r1, [sp, #40]	; 0x28
    7392:	strb.w	r3, [sp, #111]	; 0x6f
    7396:	cmp.w	fp, #0
    739a:	ldr	r4, [r1, #0]
    739c:	add.w	r7, r1, #4
    73a0:	mov.w	r5, #0
    73a4:	bge.w	7500 <_svfprintf_r+0x1258>
    73a8:	str	r7, [sp, #40]	; 0x28
    73aa:	movs	r7, #0
    73ac:	b.w	64f4 <_svfprintf_r+0x24c>
    73b0:	ldr	r1, [sp, #12]
    73b2:	ands.w	r3, r1, #64	; 0x40
    73b6:	beq.w	7056 <_svfprintf_r+0xdae>
    73ba:	ldr	r0, [sp, #40]	; 0x28
    73bc:	strb.w	r2, [sp, #111]	; 0x6f
    73c0:	mov	r3, r0
    73c2:	cmp.w	fp, #0
    73c6:	add.w	r3, r3, #4
    73ca:	ldrh	r4, [r0, #0]
    73cc:	mov.w	r5, #0
    73d0:	blt.w	75b2 <_svfprintf_r+0x130a>
    73d4:	bic.w	r1, r1, #128	; 0x80
    73d8:	str	r1, [sp, #12]
    73da:	orrs.w	r1, r4, r5
    73de:	str	r3, [sp, #40]	; 0x28
    73e0:	mov	r7, r2
    73e2:	bne.w	6604 <_svfprintf_r+0x35c>
    73e6:	b.w	69d4 <_svfprintf_r+0x72c>
    73ea:	ldr	r3, [sp, #12]
    73ec:	ldr	r2, [sp, #40]	; 0x28
    73ee:	tst.w	r3, #64	; 0x40
    73f2:	mov	r3, r2
    73f4:	beq.w	75bc <_svfprintf_r+0x1314>
    73f8:	adds	r3, #4
    73fa:	ldrh	r4, [r2, #0]
    73fc:	str	r3, [sp, #40]	; 0x28
    73fe:	movs	r5, #0
    7400:	b.w	6a0e <_svfprintf_r+0x766>
    7404:	mov	r4, r2
    7406:	adds	r3, #1
    7408:	ldr	r2, [sp, #44]	; 0x2c
    740a:	str	r3, [sp, #144]	; 0x90
    740c:	add	r4, r5
    740e:	cmp	r3, #7
    7410:	str	r4, [sp, #148]	; 0x94
    7412:	stmia.w	r9, {r2, r5}
    7416:	bgt.w	70ce <_svfprintf_r+0xe26>
    741a:	add.w	r9, r9, #8
    741e:	b.n	70e4 <_svfprintf_r+0xe3c>
    7420:	.word	0x00008338
    7424:	movs	r7, #0
    7426:	cmp	fp, r7
    7428:	strb.w	r7, [sp, #111]	; 0x6f
    742c:	blt.w	6c20 <_svfprintf_r+0x978>
    7430:	ldr	r3, [sp, #12]
    7432:	bic.w	r3, r3, #128	; 0x80
    7436:	str	r3, [sp, #12]
    7438:	b.w	6bbc <_svfprintf_r+0x914>
    743c:	add	r2, sp, #140	; 0x8c
    743e:	ldr	r1, [sp, #20]
    7440:	ldr	r0, [sp, #24]
    7442:	bl	798c <__ssprint_r>
    7446:	cmp	r0, #0
    7448:	bne.w	649c <_svfprintf_r+0x1f4>
    744c:	ldr	r4, [sp, #148]	; 0x94
    744e:	add.w	r9, sp, #192	; 0xc0
    7452:	b.n	6c64 <_svfprintf_r+0x9bc>
    7454:	ldr	r7, [sp, #40]	; 0x28
    7456:	b.w	6c12 <_svfprintf_r+0x96a>
    745a:	ldr	r3, [sp, #144]	; 0x90
    745c:	ldr	r2, [pc, #736]	; (7740 <_svfprintf_r+0x1498>)
    745e:	str.w	r2, [r9]
    7462:	adds	r3, #1
    7464:	adds	r4, #1
    7466:	movs	r2, #1
    7468:	cmp	r3, #7
    746a:	str	r4, [sp, #148]	; 0x94
    746c:	str	r3, [sp, #144]	; 0x90
    746e:	str.w	r2, [r9, #4]
    7472:	bgt.w	758c <_svfprintf_r+0x12e4>
    7476:	add.w	r9, r9, #8
    747a:	cbnz	r5, 7488 <_svfprintf_r+0x11e0>
    747c:	ldr	r3, [sp, #56]	; 0x38
    747e:	cbnz	r3, 7488 <_svfprintf_r+0x11e0>
    7480:	ldr	r3, [sp, #12]
    7482:	lsls	r7, r3, #31
    7484:	bpl.w	67d4 <_svfprintf_r+0x52c>
    7488:	ldr	r3, [sp, #144]	; 0x90
    748a:	ldr	r1, [sp, #72]	; 0x48
    748c:	ldr	r2, [sp, #76]	; 0x4c
    748e:	str.w	r2, [r9]
    7492:	adds	r3, #1
    7494:	add	r4, r1
    7496:	cmp	r3, #7
    7498:	str	r4, [sp, #148]	; 0x94
    749a:	str.w	r1, [r9, #4]
    749e:	str	r3, [sp, #144]	; 0x90
    74a0:	bgt.w	783e <_svfprintf_r+0x1596>
    74a4:	add.w	r9, r9, #8
    74a8:	negs	r5, r5
    74aa:	cmp	r5, #0
    74ac:	ble.w	7604 <_svfprintf_r+0x135c>
    74b0:	ldr	r2, [pc, #656]	; (7744 <_svfprintf_r+0x149c>)
    74b2:	str	r2, [sp, #44]	; 0x2c
    74b4:	cmp	r5, #16
    74b6:	ble.w	764c <_svfprintf_r+0x13a4>
    74ba:	mov	r2, r4
    74bc:	movs	r7, #16
    74be:	ldr.w	fp, [sp, #24]
    74c2:	ldr	r4, [sp, #20]
    74c4:	b.n	74d2 <_svfprintf_r+0x122a>
    74c6:	add.w	r9, r9, #8
    74ca:	subs	r5, #16
    74cc:	cmp	r5, #16
    74ce:	ble.w	764a <_svfprintf_r+0x13a2>
    74d2:	adds	r3, #1
    74d4:	adds	r2, #16
    74d6:	cmp	r3, #7
    74d8:	str	r2, [sp, #148]	; 0x94
    74da:	str	r3, [sp, #144]	; 0x90
    74dc:	str.w	sl, [r9]
    74e0:	str.w	r7, [r9, #4]
    74e4:	ble.n	74c6 <_svfprintf_r+0x121e>
    74e6:	add	r2, sp, #140	; 0x8c
    74e8:	mov	r1, r4
    74ea:	mov	r0, fp
    74ec:	bl	798c <__ssprint_r>
    74f0:	cmp	r0, #0
    74f2:	bne.w	649c <_svfprintf_r+0x1f4>
    74f6:	ldr	r2, [sp, #148]	; 0x94
    74f8:	ldr	r3, [sp, #144]	; 0x90
    74fa:	add.w	r9, sp, #192	; 0xc0
    74fe:	b.n	74ca <_svfprintf_r+0x1222>
    7500:	ldr	r2, [sp, #12]
    7502:	b.w	6978 <_svfprintf_r+0x6d0>
    7506:	ldr	r2, [sp, #12]
    7508:	b.n	7022 <_svfprintf_r+0xd7a>
    750a:	ldr	r3, [sp, #12]
    750c:	orr.w	r3, r3, #32
    7510:	str	r3, [sp, #12]
    7512:	add.w	r8, r8, #1
    7516:	ldrb.w	r3, [r8]
    751a:	b.w	635c <_svfprintf_r+0xb4>
    751e:	add	r2, sp, #140	; 0x8c
    7520:	ldr	r1, [sp, #20]
    7522:	ldr	r0, [sp, #24]
    7524:	bl	798c <__ssprint_r>
    7528:	cmp	r0, #0
    752a:	bne.w	649c <_svfprintf_r+0x1f4>
    752e:	ldr	r4, [sp, #148]	; 0x94
    7530:	add.w	r9, sp, #192	; 0xc0
    7534:	b.w	6c94 <_svfprintf_r+0x9ec>
    7538:	movs	r1, #64	; 0x40
    753a:	ldr	r0, [sp, #24]
    753c:	bl	3bac <_malloc_r>
    7540:	ldr	r2, [sp, #20]
    7542:	str	r0, [r2, #0]
    7544:	str	r0, [r2, #16]
    7546:	cmp	r0, #0
    7548:	beq.w	7932 <_svfprintf_r+0x168a>
    754c:	ldr	r2, [sp, #20]
    754e:	movs	r3, #64	; 0x40
    7550:	str	r3, [r2, #20]
    7552:	b.w	62d6 <_svfprintf_r+0x2e>
    7556:	add	r2, sp, #132	; 0x84
    7558:	add	r3, sp, #120	; 0x78
    755a:	str	r2, [sp, #4]
    755c:	str	r3, [sp, #0]
    755e:	mov	r2, fp
    7560:	add	r3, sp, #116	; 0x74
    7562:	movs	r1, #3
    7564:	vldr	d0, [sp, #96]	; 0x60
    7568:	ldr	r0, [sp, #24]
    756a:	bl	5470 <_dtoa_r>
    756e:	mov	r5, fp
    7570:	mov	r6, r0
    7572:	ldr	r3, [sp, #52]	; 0x34
    7574:	cmp	r3, #70	; 0x46
    7576:	add.w	r4, r6, r5
    757a:	bne.w	7302 <_svfprintf_r+0x105a>
    757e:	ldrb	r3, [r6, #0]
    7580:	cmp	r3, #48	; 0x30
    7582:	beq.w	7894 <_svfprintf_r+0x15ec>
    7586:	ldr	r5, [sp, #116]	; 0x74
    7588:	add	r4, r5
    758a:	b.n	7302 <_svfprintf_r+0x105a>
    758c:	add	r2, sp, #140	; 0x8c
    758e:	ldr	r1, [sp, #20]
    7590:	ldr	r0, [sp, #24]
    7592:	bl	798c <__ssprint_r>
    7596:	cmp	r0, #0
    7598:	bne.w	649c <_svfprintf_r+0x1f4>
    759c:	ldr	r5, [sp, #116]	; 0x74
    759e:	ldr	r4, [sp, #148]	; 0x94
    75a0:	add.w	r9, sp, #192	; 0xc0
    75a4:	b.n	747a <_svfprintf_r+0x11d2>
    75a6:	cmp.w	fp, #0
    75aa:	it	eq
    75ac:	moveq.w	fp, #1
    75b0:	b.n	72a2 <_svfprintf_r+0xffa>
    75b2:	str	r3, [sp, #40]	; 0x28
    75b4:	mov	r7, r2
    75b6:	b.n	7072 <_svfprintf_r+0xdca>
    75b8:	str	r3, [sp, #40]	; 0x28
    75ba:	b.n	73aa <_svfprintf_r+0x1102>
    75bc:	adds	r3, #4
    75be:	ldr	r4, [r2, #0]
    75c0:	str	r3, [sp, #40]	; 0x28
    75c2:	movs	r5, #0
    75c4:	b.w	6a0e <_svfprintf_r+0x766>
    75c8:	movs	r7, #45	; 0x2d
    75ca:	str	r3, [sp, #16]
    75cc:	ldr	r3, [sp, #44]	; 0x2c
    75ce:	str	r3, [sp, #12]
    75d0:	strb.w	r7, [sp, #111]	; 0x6f
    75d4:	mov.w	fp, #0
    75d8:	b.w	664e <_svfprintf_r+0x3a6>
    75dc:	mov	r0, r6
    75de:	bl	46c0 <strlen>
    75e2:	mov	fp, r4
    75e4:	mov	r3, r0
    75e6:	str	r0, [sp, #36]	; 0x24
    75e8:	b.w	6b30 <_svfprintf_r+0x888>
    75ec:	add	r2, sp, #140	; 0x8c
    75ee:	ldr	r1, [sp, #20]
    75f0:	ldr	r0, [sp, #24]
    75f2:	bl	798c <__ssprint_r>
    75f6:	cmp	r0, #0
    75f8:	bne.w	649c <_svfprintf_r+0x1f4>
    75fc:	ldr	r4, [sp, #148]	; 0x94
    75fe:	ldr	r3, [sp, #144]	; 0x90
    7600:	add.w	r9, sp, #192	; 0xc0
    7604:	ldr	r1, [sp, #56]	; 0x38
    7606:	str.w	r6, [r9]
    760a:	adds	r3, #1
    760c:	add	r4, r1
    760e:	cmp	r3, #7
    7610:	str	r4, [sp, #148]	; 0x94
    7612:	str	r3, [sp, #144]	; 0x90
    7614:	str.w	r1, [r9, #4]
    7618:	ble.w	67d0 <_svfprintf_r+0x528>
    761c:	b.w	6e16 <_svfprintf_r+0xb6e>
    7620:	ldr	r3, [sp, #116]	; 0x74
    7622:	adds	r5, r3, #3
    7624:	blt.n	7664 <_svfprintf_r+0x13bc>
    7626:	cmp	fp, r3
    7628:	blt.n	7664 <_svfprintf_r+0x13bc>
    762a:	str	r3, [sp, #60]	; 0x3c
    762c:	b.n	7346 <_svfprintf_r+0x109e>
    762e:	mov	r3, r4
    7630:	b.n	7328 <_svfprintf_r+0x1080>
    7632:	add	r2, sp, #140	; 0x8c
    7634:	ldr	r1, [sp, #20]
    7636:	ldr	r0, [sp, #24]
    7638:	bl	798c <__ssprint_r>
    763c:	cmp	r0, #0
    763e:	bne.w	649c <_svfprintf_r+0x1f4>
    7642:	ldr	r4, [sp, #148]	; 0x94
    7644:	add.w	r9, sp, #192	; 0xc0
    7648:	b.n	6ee4 <_svfprintf_r+0xc3c>
    764a:	mov	r4, r2
    764c:	adds	r3, #1
    764e:	ldr	r2, [sp, #44]	; 0x2c
    7650:	str	r3, [sp, #144]	; 0x90
    7652:	add	r4, r5
    7654:	cmp	r3, #7
    7656:	str	r4, [sp, #148]	; 0x94
    7658:	stmia.w	r9, {r2, r5}
    765c:	bgt.n	75ec <_svfprintf_r+0x1344>
    765e:	add.w	r9, r9, #8
    7662:	b.n	7604 <_svfprintf_r+0x135c>
    7664:	ldr	r2, [sp, #52]	; 0x34
    7666:	subs	r2, #2
    7668:	str	r2, [sp, #52]	; 0x34
    766a:	subs	r3, #1
    766c:	cmp	r3, #0
    766e:	ldrb.w	r2, [sp, #52]	; 0x34
    7672:	str	r3, [sp, #116]	; 0x74
    7674:	it	lt
    7676:	neglt	r3, r3
    7678:	strb.w	r2, [sp, #124]	; 0x7c
    767c:	ite	lt
    767e:	movlt	r2, #45	; 0x2d
    7680:	movge	r2, #43	; 0x2b
    7682:	cmp	r3, #9
    7684:	strb.w	r2, [sp, #125]	; 0x7d
    7688:	ble.w	7862 <_svfprintf_r+0x15ba>
    768c:	add.w	r0, sp, #139	; 0x8b
    7690:	mov	r4, r0
    7692:	ldr	r2, [pc, #180]	; (7748 <_svfprintf_r+0x14a0>)
    7694:	smull	r2, r1, r2, r3
    7698:	asrs	r2, r3, #31
    769a:	rsb	r2, r2, r1, asr #2
    769e:	add.w	r1, r2, r2, lsl #2
    76a2:	sub.w	r3, r3, r1, lsl #1
    76a6:	add.w	r1, r3, #48	; 0x30
    76aa:	cmp	r2, #9
    76ac:	mov	r3, r2
    76ae:	strb.w	r1, [r4, #-1]!
    76b2:	bgt.n	7692 <_svfprintf_r+0x13ea>
    76b4:	mov	r1, r4
    76b6:	adds	r3, #48	; 0x30
    76b8:	uxtb	r2, r3
    76ba:	strb.w	r2, [r1, #-1]!
    76be:	cmp	r0, r1
    76c0:	bls.w	792c <_svfprintf_r+0x1684>
    76c4:	add.w	r1, sp, #126	; 0x7e
    76c8:	mov	r3, r4
    76ca:	b.n	76d0 <_svfprintf_r+0x1428>
    76cc:	ldrb.w	r2, [r3], #1
    76d0:	strb.w	r2, [r1], #1
    76d4:	cmp	r0, r3
    76d6:	bne.n	76cc <_svfprintf_r+0x1424>
    76d8:	adds	r3, r0, #1
    76da:	subs	r3, r3, r4
    76dc:	add.w	r2, sp, #126	; 0x7e
    76e0:	add	r3, r2
    76e2:	add	r2, sp, #124	; 0x7c
    76e4:	subs	r3, r3, r2
    76e6:	ldr	r2, [sp, #56]	; 0x38
    76e8:	str	r3, [sp, #84]	; 0x54
    76ea:	cmp	r2, #1
    76ec:	add	r3, r2
    76ee:	str	r3, [sp, #36]	; 0x24
    76f0:	ble.w	78c2 <_svfprintf_r+0x161a>
    76f4:	ldr	r3, [sp, #36]	; 0x24
    76f6:	ldr	r2, [sp, #72]	; 0x48
    76f8:	add	r3, r2
    76fa:	movs	r2, #0
    76fc:	str	r3, [sp, #36]	; 0x24
    76fe:	str	r2, [sp, #60]	; 0x3c
    7700:	bic.w	r3, r3, r3, asr #31
    7704:	b.n	7362 <_svfprintf_r+0x10ba>
    7706:	add	r2, sp, #140	; 0x8c
    7708:	ldr	r1, [sp, #20]
    770a:	ldr	r0, [sp, #24]
    770c:	bl	798c <__ssprint_r>
    7710:	cmp	r0, #0
    7712:	bne.w	649c <_svfprintf_r+0x1f4>
    7716:	ldr	r3, [sp, #116]	; 0x74
    7718:	ldr	r4, [sp, #148]	; 0x94
    771a:	add.w	r9, sp, #192	; 0xc0
    771e:	b.n	70f8 <_svfprintf_r+0xe50>
    7720:	add	r2, sp, #140	; 0x8c
    7722:	ldr	r1, [sp, #20]
    7724:	ldr	r0, [sp, #24]
    7726:	bl	798c <__ssprint_r>
    772a:	cmp	r0, #0
    772c:	bne.w	649c <_svfprintf_r+0x1f4>
    7730:	ldr	r3, [sp, #116]	; 0x74
    7732:	ldr	r2, [sp, #56]	; 0x38
    7734:	ldr	r4, [sp, #148]	; 0x94
    7736:	subs	r3, r2, r3
    7738:	add.w	r9, sp, #192	; 0xc0
    773c:	b.n	7128 <_svfprintf_r+0xe80>
    773e:	nop
    7740:	.word	0x00008334
    7744:	.word	0x00008338
    7748:	.word	0x66666667
    774c:	cmp	r5, #6
    774e:	mov	r3, r5
    7750:	it	cs
    7752:	movcs	r3, #6
    7754:	str	r3, [sp, #36]	; 0x24
    7756:	bic.w	r3, r3, r3, asr #31
    775a:	mov	fp, r6
    775c:	str	r7, [sp, #40]	; 0x28
    775e:	str	r6, [sp, #60]	; 0x3c
    7760:	mov	r7, r6
    7762:	str	r3, [sp, #16]
    7764:	ldr	r6, [pc, #536]	; (7980 <_svfprintf_r+0x16d8>)
    7766:	b.w	664c <_svfprintf_r+0x3a4>
    776a:	mov.w	fp, #6
    776e:	b.n	72a2 <_svfprintf_r+0xffa>
    7770:	add	r2, sp, #132	; 0x84
    7772:	add	r3, sp, #120	; 0x78
    7774:	str	r2, [sp, #4]
    7776:	str	r3, [sp, #0]
    7778:	mov	r2, fp
    777a:	add	r3, sp, #116	; 0x74
    777c:	movs	r1, #3
    777e:	vldr	d0, [sp, #96]	; 0x60
    7782:	ldr	r0, [sp, #24]
    7784:	bl	5470 <_dtoa_r>
    7788:	mov	r5, fp
    778a:	mov	r6, r0
    778c:	add.w	r4, r0, fp
    7790:	b.n	757e <_svfprintf_r+0x12d6>
    7792:	movs	r7, #45	; 0x2d
    7794:	strb.w	r7, [sp, #111]	; 0x6f
    7798:	b.w	68f2 <_svfprintf_r+0x64a>
    779c:	str	r3, [sp, #12]
    779e:	b.w	6a4a <_svfprintf_r+0x7a2>
    77a2:	ldrd	r1, r2, [sp, #64]	; 0x40
    77a6:	add.w	r3, r2, #2147483648	; 0x80000000
    77aa:	str	r3, [sp, #100]	; 0x64
    77ac:	movs	r3, #45	; 0x2d
    77ae:	str	r1, [sp, #96]	; 0x60
    77b0:	str	r3, [sp, #16]
    77b2:	b.n	72be <_svfprintf_r+0x1016>
    77b4:	ldr	r2, [sp, #72]	; 0x48
    77b6:	ldr	r3, [sp, #56]	; 0x38
    77b8:	add	r3, r2
    77ba:	ldr	r2, [sp, #60]	; 0x3c
    77bc:	str	r3, [sp, #36]	; 0x24
    77be:	cmp	r2, #0
    77c0:	ble.w	78d6 <_svfprintf_r+0x162e>
    77c4:	movs	r2, #103	; 0x67
    77c6:	bic.w	r3, r3, r3, asr #31
    77ca:	str	r2, [sp, #52]	; 0x34
    77cc:	b.n	7362 <_svfprintf_r+0x10ba>
    77ce:	ldr	r3, [sp, #52]	; 0x34
    77d0:	cmp	r3, #71	; 0x47
    77d2:	bne.w	7300 <_svfprintf_r+0x1058>
    77d6:	ldr	r3, [sp, #12]
    77d8:	lsls	r3, r3, #31
    77da:	bmi.w	7572 <_svfprintf_r+0x12ca>
    77de:	ldr	r3, [sp, #132]	; 0x84
    77e0:	cmp	r7, #71	; 0x47
    77e2:	sub.w	r3, r3, r6
    77e6:	str	r3, [sp, #56]	; 0x38
    77e8:	beq.w	7620 <_svfprintf_r+0x1378>
    77ec:	ldr	r3, [sp, #116]	; 0x74
    77ee:	b.n	766a <_svfprintf_r+0x13c2>
    77f0:	bic.w	r3, r5, r5, asr #31
    77f4:	str	r7, [sp, #40]	; 0x28
    77f6:	str	r3, [sp, #16]
    77f8:	str	r5, [sp, #36]	; 0x24
    77fa:	mov	fp, r0
    77fc:	str	r0, [sp, #60]	; 0x3c
    77fe:	ldrb.w	r7, [sp, #111]	; 0x6f
    7802:	b.w	664c <_svfprintf_r+0x3a4>
    7806:	cmp	r3, #0
    7808:	ble.n	78e6 <_svfprintf_r+0x163e>
    780a:	cmp.w	fp, #0
    780e:	bne.n	78b0 <_svfprintf_r+0x1608>
    7810:	ldr	r2, [sp, #12]
    7812:	lsls	r4, r2, #31
    7814:	bmi.n	78b0 <_svfprintf_r+0x1608>
    7816:	mov	r2, r3
    7818:	str	r2, [sp, #36]	; 0x24
    781a:	bic.w	r3, r3, r3, asr #31
    781e:	b.n	7362 <_svfprintf_r+0x10ba>
    7820:	ldr	r3, [sp, #12]
    7822:	lsls	r3, r3, #31
    7824:	mov	r7, fp
    7826:	bpl.n	7834 <_svfprintf_r+0x158c>
    7828:	add	r6, sp, #256	; 0x100
    782a:	movs	r3, #48	; 0x30
    782c:	strb.w	r3, [r6, #-65]!
    7830:	b.w	6638 <_svfprintf_r+0x390>
    7834:	str.w	fp, [sp, #36]	; 0x24
    7838:	add	r6, sp, #192	; 0xc0
    783a:	b.w	663e <_svfprintf_r+0x396>
    783e:	add	r2, sp, #140	; 0x8c
    7840:	ldr	r1, [sp, #20]
    7842:	ldr	r0, [sp, #24]
    7844:	bl	798c <__ssprint_r>
    7848:	cmp	r0, #0
    784a:	bne.w	649c <_svfprintf_r+0x1f4>
    784e:	ldr	r5, [sp, #116]	; 0x74
    7850:	ldr	r4, [sp, #148]	; 0x94
    7852:	ldr	r3, [sp, #144]	; 0x90
    7854:	add.w	r9, sp, #192	; 0xc0
    7858:	b.n	74a8 <_svfprintf_r+0x1200>
    785a:	mov	r8, r4
    785c:	movs	r5, #0
    785e:	b.w	6360 <_svfprintf_r+0xb8>
    7862:	adds	r3, #48	; 0x30
    7864:	movs	r2, #48	; 0x30
    7866:	strb.w	r3, [sp, #127]	; 0x7f
    786a:	strb.w	r2, [sp, #126]	; 0x7e
    786e:	add	r3, sp, #128	; 0x80
    7870:	b.n	76e2 <_svfprintf_r+0x143a>
    7872:	ldr	r3, [sp, #132]	; 0x84
    7874:	b.n	7328 <_svfprintf_r+0x1080>
    7876:	ldr	r2, [sp, #72]	; 0x48
    7878:	ldr	r3, [sp, #60]	; 0x3c
    787a:	add	r3, r2
    787c:	movs	r2, #103	; 0x67
    787e:	str	r3, [sp, #36]	; 0x24
    7880:	str	r2, [sp, #52]	; 0x34
    7882:	bic.w	r3, r3, r3, asr #31
    7886:	b.n	7362 <_svfprintf_r+0x10ba>
    7888:	ldr	r6, [pc, #248]	; (7984 <_svfprintf_r+0x16dc>)
    788a:	ldr	r3, [pc, #252]	; (7988 <_svfprintf_r+0x16e0>)
    788c:	ldrb.w	r7, [sp, #111]	; 0x6f
    7890:	b.w	68f6 <_svfprintf_r+0x64e>
    7894:	movs	r2, #0
    7896:	movs	r3, #0
    7898:	ldrd	r0, r1, [sp, #96]	; 0x60
    789c:	bl	3a98 <__aeabi_dcmpeq>
    78a0:	cmp	r0, #0
    78a2:	bne.w	7586 <_svfprintf_r+0x12de>
    78a6:	rsb	r5, r5, #1
    78aa:	str	r5, [sp, #116]	; 0x74
    78ac:	add	r4, r5
    78ae:	b.n	7302 <_svfprintf_r+0x105a>
    78b0:	ldr	r3, [sp, #60]	; 0x3c
    78b2:	ldr	r2, [sp, #72]	; 0x48
    78b4:	adds	r5, r3, r2
    78b6:	add.w	r3, r5, fp
    78ba:	str	r3, [sp, #36]	; 0x24
    78bc:	bic.w	r3, r3, r3, asr #31
    78c0:	b.n	7362 <_svfprintf_r+0x10ba>
    78c2:	ldr	r3, [sp, #12]
    78c4:	ands.w	r3, r3, #1
    78c8:	bne.w	76f4 <_svfprintf_r+0x144c>
    78cc:	str	r3, [sp, #60]	; 0x3c
    78ce:	ldr	r3, [sp, #36]	; 0x24
    78d0:	bic.w	r3, r3, r3, asr #31
    78d4:	b.n	7362 <_svfprintf_r+0x10ba>
    78d6:	ldr	r3, [sp, #60]	; 0x3c
    78d8:	ldr	r2, [sp, #36]	; 0x24
    78da:	rsb	r3, r3, #1
    78de:	add	r2, r3
    78e0:	mov	r3, r2
    78e2:	str	r2, [sp, #36]	; 0x24
    78e4:	b.n	77c4 <_svfprintf_r+0x151c>
    78e6:	cmp.w	fp, #0
    78ea:	bne.n	78f2 <_svfprintf_r+0x164a>
    78ec:	ldr	r3, [sp, #12]
    78ee:	lsls	r0, r3, #31
    78f0:	bpl.n	7902 <_svfprintf_r+0x165a>
    78f2:	ldr	r3, [sp, #72]	; 0x48
    78f4:	adds	r5, r3, #1
    78f6:	add.w	r3, r5, fp
    78fa:	str	r3, [sp, #36]	; 0x24
    78fc:	bic.w	r3, r3, r3, asr #31
    7900:	b.n	7362 <_svfprintf_r+0x10ba>
    7902:	movs	r3, #1
    7904:	str	r3, [sp, #36]	; 0x24
    7906:	b.n	7362 <_svfprintf_r+0x10ba>
    7908:	ldr	r0, [sp, #40]	; 0x28
    790a:	ldrb.w	r3, [r8, #1]
    790e:	ldr	r5, [r0, #0]
    7910:	adds	r0, #4
    7912:	cmp	r5, #0
    7914:	str	r0, [sp, #40]	; 0x28
    7916:	mov	r8, r4
    7918:	bge.w	635c <_svfprintf_r+0xb4>
    791c:	mov.w	r5, #4294967295
    7920:	b.w	635c <_svfprintf_r+0xb4>
    7924:	strb.w	r1, [sp, #111]	; 0x6f
    7928:	b.w	64be <_svfprintf_r+0x216>
    792c:	add.w	r3, sp, #126	; 0x7e
    7930:	b.n	76e2 <_svfprintf_r+0x143a>
    7932:	ldr	r2, [sp, #24]
    7934:	movs	r3, #12
    7936:	str	r3, [r2, #0]
    7938:	mov.w	r0, #4294967295
    793c:	b.w	64ae <_svfprintf_r+0x206>
    7940:	strb.w	r1, [sp, #111]	; 0x6f
    7944:	b.w	65b8 <_svfprintf_r+0x310>
    7948:	strb.w	r1, [sp, #111]	; 0x6f
    794c:	b.w	6884 <_svfprintf_r+0x5dc>
    7950:	strb.w	r1, [sp, #111]	; 0x6f
    7954:	b.w	69f2 <_svfprintf_r+0x74a>
    7958:	strb.w	r1, [sp, #111]	; 0x6f
    795c:	b.w	6996 <_svfprintf_r+0x6ee>
    7960:	strb.w	r1, [sp, #111]	; 0x6f
    7964:	b.w	6942 <_svfprintf_r+0x69a>
    7968:	strb.w	r1, [sp, #111]	; 0x6f
    796c:	b.w	6bda <_svfprintf_r+0x932>
    7970:	strb.w	r1, [sp, #111]	; 0x6f
    7974:	b.w	6b98 <_svfprintf_r+0x8f0>
    7978:	strb.w	r1, [sp, #111]	; 0x6f
    797c:	b.w	6b5c <_svfprintf_r+0x8b4>
    7980:	.word	0x00008380
    7984:	.word	0x00008354
    7988:	.word	0x00008350

0000798c <__ssprint_r>:
    798c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7990:	ldr	r3, [r2, #8]
    7992:	sub	sp, #12
    7994:	mov	r8, r2
    7996:	cmp	r3, #0
    7998:	beq.n	7a80 <__ssprint_r+0xf4>
    799a:	mov	fp, r0
    799c:	mov.w	r9, #0
    79a0:	ldr	r6, [r2, #0]
    79a2:	ldr	r0, [r1, #0]
    79a4:	ldr	r3, [r1, #8]
    79a6:	mov	r5, r1
    79a8:	mov	r4, r9
    79aa:	cmp	r4, #0
    79ac:	beq.n	7a3a <__ssprint_r+0xae>
    79ae:	cmp	r4, r3
    79b0:	mov	r7, r3
    79b2:	mov	sl, r3
    79b4:	bcc.n	7a44 <__ssprint_r+0xb8>
    79b6:	ldrh	r3, [r5, #12]
    79b8:	tst.w	r3, #1152	; 0x480
    79bc:	beq.n	7a1a <__ssprint_r+0x8e>
    79be:	ldr	r7, [r5, #20]
    79c0:	ldr	r1, [r5, #16]
    79c2:	add.w	r7, r7, r7, lsl #1
    79c6:	rsb	sl, r1, r0
    79ca:	add.w	r7, r7, r7, lsr #31
    79ce:	adds	r0, r4, #1
    79d0:	asrs	r7, r7, #1
    79d2:	add	r0, sl
    79d4:	cmp	r0, r7
    79d6:	mov	r2, r7
    79d8:	itt	hi
    79da:	movhi	r7, r0
    79dc:	movhi	r2, r7
    79de:	lsls	r3, r3, #21
    79e0:	bpl.n	7a4a <__ssprint_r+0xbe>
    79e2:	mov	r1, r2
    79e4:	mov	r0, fp
    79e6:	bl	3bac <_malloc_r>
    79ea:	cmp	r0, #0
    79ec:	beq.n	7a5e <__ssprint_r+0xd2>
    79ee:	mov	r2, sl
    79f0:	ldr	r1, [r5, #16]
    79f2:	str	r0, [sp, #4]
    79f4:	bl	28b0 <memcpy>
    79f8:	ldrh	r2, [r5, #12]
    79fa:	ldr	r3, [sp, #4]
    79fc:	bic.w	r2, r2, #1152	; 0x480
    7a00:	orr.w	r2, r2, #128	; 0x80
    7a04:	strh	r2, [r5, #12]
    7a06:	rsb	r2, sl, r7
    7a0a:	add.w	r0, r3, sl
    7a0e:	str	r7, [r5, #20]
    7a10:	str	r3, [r5, #16]
    7a12:	str	r0, [r5, #0]
    7a14:	str	r2, [r5, #8]
    7a16:	mov	r7, r4
    7a18:	mov	sl, r4
    7a1a:	mov	r2, sl
    7a1c:	mov	r1, r9
    7a1e:	bl	4148 <memmove>
    7a22:	ldr.w	r2, [r8, #8]
    7a26:	ldr	r3, [r5, #8]
    7a28:	ldr	r0, [r5, #0]
    7a2a:	subs	r3, r3, r7
    7a2c:	add	r0, sl
    7a2e:	subs	r4, r2, r4
    7a30:	str	r3, [r5, #8]
    7a32:	str	r0, [r5, #0]
    7a34:	str.w	r4, [r8, #8]
    7a38:	cbz	r4, 7a80 <__ssprint_r+0xf4>
    7a3a:	ldr.w	r9, [r6]
    7a3e:	ldr	r4, [r6, #4]
    7a40:	adds	r6, #8
    7a42:	b.n	79aa <__ssprint_r+0x1e>
    7a44:	mov	r7, r4
    7a46:	mov	sl, r4
    7a48:	b.n	7a1a <__ssprint_r+0x8e>
    7a4a:	mov	r0, fp
    7a4c:	bl	42b4 <_realloc_r>
    7a50:	mov	r3, r0
    7a52:	cmp	r0, #0
    7a54:	bne.n	7a06 <__ssprint_r+0x7a>
    7a56:	ldr	r1, [r5, #16]
    7a58:	mov	r0, fp
    7a5a:	bl	49d0 <_free_r>
    7a5e:	movs	r3, #12
    7a60:	str.w	r3, [fp]
    7a64:	ldrh	r3, [r5, #12]
    7a66:	movs	r2, #0
    7a68:	orr.w	r3, r3, #64	; 0x40
    7a6c:	mov.w	r0, #4294967295
    7a70:	strh	r3, [r5, #12]
    7a72:	str.w	r2, [r8, #8]
    7a76:	str.w	r2, [r8, #4]
    7a7a:	add	sp, #12
    7a7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a80:	movs	r0, #0
    7a82:	str.w	r0, [r8, #4]
    7a86:	add	sp, #12
    7a88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007a8c <__aeabi_d2iz>:
    7a8c:	mov.w	r2, r1, lsl #1
    7a90:	adds.w	r2, r2, #2097152	; 0x200000
    7a94:	bcs.n	7ac2 <__aeabi_d2iz+0x36>
    7a96:	bpl.n	7abc <__aeabi_d2iz+0x30>
    7a98:	mvn.w	r3, #992	; 0x3e0
    7a9c:	subs.w	r2, r3, r2, asr #21
    7aa0:	bls.n	7ac8 <__aeabi_d2iz+0x3c>
    7aa2:	mov.w	r3, r1, lsl #11
    7aa6:	orr.w	r3, r3, #2147483648	; 0x80000000
    7aaa:	orr.w	r3, r3, r0, lsr #21
    7aae:	tst.w	r1, #2147483648	; 0x80000000
    7ab2:	lsr.w	r0, r3, r2
    7ab6:	it	ne
    7ab8:	negne	r0, r0
    7aba:	bx	lr
    7abc:	mov.w	r0, #0
    7ac0:	bx	lr
    7ac2:	orrs.w	r0, r0, r1, lsl #12
    7ac6:	bne.n	7ad4 <__aeabi_d2iz+0x48>
    7ac8:	ands.w	r0, r1, #2147483648	; 0x80000000
    7acc:	it	eq
    7ace:	mvneq.w	r0, #2147483648	; 0x80000000
    7ad2:	bx	lr
    7ad4:	mov.w	r0, #0
    7ad8:	bx	lr
    7ada:	nop

00007adc <__aeabi_uldivmod>:
    7adc:	cbnz	r3, 7af4 <__aeabi_uldivmod+0x18>
    7ade:	cbnz	r2, 7af4 <__aeabi_uldivmod+0x18>
    7ae0:	cmp	r1, #0
    7ae2:	it	eq
    7ae4:	cmpeq	r0, #0
    7ae6:	itt	ne
    7ae8:	movne.w	r1, #4294967295
    7aec:	movne.w	r0, #4294967295
    7af0:	b.w	7df0 <__aeabi_idiv0>
    7af4:	sub.w	ip, sp, #8
    7af8:	strd	ip, lr, [sp, #-16]!
    7afc:	bl	7b0c <__udivmoddi4>
    7b00:	ldr.w	lr, [sp, #4]
    7b04:	ldrd	r2, r3, [sp, #8]
    7b08:	add	sp, #16
    7b0a:	bx	lr

00007b0c <__udivmoddi4>:
    7b0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b10:	mov	ip, r1
    7b12:	mov	r6, r1
    7b14:	mov	r4, r0
    7b16:	ldr	r5, [sp, #32]
    7b18:	cmp	r3, #0
    7b1a:	bne.n	7bbe <__udivmoddi4+0xb2>
    7b1c:	cmp	r2, r1
    7b1e:	mov	r7, r2
    7b20:	bls.n	7bfc <__udivmoddi4+0xf0>
    7b22:	clz	lr, r2
    7b26:	cmp.w	lr, #0
    7b2a:	beq.n	7b44 <__udivmoddi4+0x38>
    7b2c:	rsb	r4, lr, #32
    7b30:	lsr.w	r4, r0, r4
    7b34:	lsl.w	r6, r1, lr
    7b38:	orr.w	ip, r4, r6
    7b3c:	lsl.w	r7, r2, lr
    7b40:	lsl.w	r4, r0, lr
    7b44:	mov.w	r9, r7, lsr #16
    7b48:	lsrs	r2, r4, #16
    7b4a:	udiv	r0, ip, r9
    7b4e:	uxth.w	r8, r7
    7b52:	mls	r6, r9, r0, ip
    7b56:	orr.w	r6, r2, r6, lsl #16
    7b5a:	mul.w	r3, r0, r8
    7b5e:	cmp	r3, r6
    7b60:	bls.n	7b76 <__udivmoddi4+0x6a>
    7b62:	adds	r6, r6, r7
    7b64:	add.w	r2, r0, #4294967295
    7b68:	bcs.w	7db0 <__udivmoddi4+0x2a4>
    7b6c:	cmp	r3, r6
    7b6e:	bls.w	7db0 <__udivmoddi4+0x2a4>
    7b72:	subs	r0, #2
    7b74:	add	r6, r7
    7b76:	subs	r6, r6, r3
    7b78:	uxth	r2, r4
    7b7a:	udiv	r3, r6, r9
    7b7e:	mls	r6, r9, r3, r6
    7b82:	orr.w	r4, r2, r6, lsl #16
    7b86:	mul.w	r8, r3, r8
    7b8a:	cmp	r8, r4
    7b8c:	bls.n	7ba2 <__udivmoddi4+0x96>
    7b8e:	adds	r4, r4, r7
    7b90:	add.w	r2, r3, #4294967295
    7b94:	bcs.w	7dac <__udivmoddi4+0x2a0>
    7b98:	cmp	r8, r4
    7b9a:	bls.w	7dac <__udivmoddi4+0x2a0>
    7b9e:	subs	r3, #2
    7ba0:	add	r4, r7
    7ba2:	rsb	r4, r8, r4
    7ba6:	orr.w	r0, r3, r0, lsl #16
    7baa:	movs	r1, #0
    7bac:	cmp	r5, #0
    7bae:	beq.n	7c76 <__udivmoddi4+0x16a>
    7bb0:	lsr.w	r4, r4, lr
    7bb4:	movs	r3, #0
    7bb6:	str	r4, [r5, #0]
    7bb8:	str	r3, [r5, #4]
    7bba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bbe:	cmp	r3, r1
    7bc0:	bls.n	7bd2 <__udivmoddi4+0xc6>
    7bc2:	cmp	r5, #0
    7bc4:	beq.n	7c72 <__udivmoddi4+0x166>
    7bc6:	movs	r1, #0
    7bc8:	stmia.w	r5, {r0, r6}
    7bcc:	mov	r0, r1
    7bce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bd2:	clz	r1, r3
    7bd6:	cmp	r1, #0
    7bd8:	bne.w	7cfc <__udivmoddi4+0x1f0>
    7bdc:	cmp	r3, r6
    7bde:	bcc.n	7be6 <__udivmoddi4+0xda>
    7be0:	cmp	r2, r0
    7be2:	bhi.w	7dd6 <__udivmoddi4+0x2ca>
    7be6:	subs	r4, r0, r2
    7be8:	sbc.w	r6, r6, r3
    7bec:	movs	r0, #1
    7bee:	mov	ip, r6
    7bf0:	cmp	r5, #0
    7bf2:	beq.n	7c76 <__udivmoddi4+0x16a>
    7bf4:	stmia.w	r5, {r4, ip}
    7bf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bfc:	cbnz	r2, 7c04 <__udivmoddi4+0xf8>
    7bfe:	movs	r7, #1
    7c00:	udiv	r7, r7, r2
    7c04:	clz	lr, r7
    7c08:	cmp.w	lr, #0
    7c0c:	bne.n	7c7a <__udivmoddi4+0x16e>
    7c0e:	subs	r3, r6, r7
    7c10:	mov.w	r8, r7, lsr #16
    7c14:	uxth.w	ip, r7
    7c18:	movs	r1, #1
    7c1a:	udiv	r0, r3, r8
    7c1e:	lsrs	r2, r4, #16
    7c20:	mls	r6, r8, r0, r3
    7c24:	orr.w	r6, r2, r6, lsl #16
    7c28:	mul.w	r3, ip, r0
    7c2c:	cmp	r3, r6
    7c2e:	bls.n	7c40 <__udivmoddi4+0x134>
    7c30:	adds	r6, r6, r7
    7c32:	add.w	r2, r0, #4294967295
    7c36:	bcs.n	7c3e <__udivmoddi4+0x132>
    7c38:	cmp	r3, r6
    7c3a:	bhi.w	7dda <__udivmoddi4+0x2ce>
    7c3e:	mov	r0, r2
    7c40:	subs	r6, r6, r3
    7c42:	uxth	r2, r4
    7c44:	udiv	r3, r6, r8
    7c48:	mls	r6, r8, r3, r6
    7c4c:	orr.w	r4, r2, r6, lsl #16
    7c50:	mul.w	ip, ip, r3
    7c54:	cmp	ip, r4
    7c56:	bls.n	7c68 <__udivmoddi4+0x15c>
    7c58:	adds	r4, r4, r7
    7c5a:	add.w	r2, r3, #4294967295
    7c5e:	bcs.n	7c66 <__udivmoddi4+0x15a>
    7c60:	cmp	ip, r4
    7c62:	bhi.w	7dd0 <__udivmoddi4+0x2c4>
    7c66:	mov	r3, r2
    7c68:	rsb	r4, ip, r4
    7c6c:	orr.w	r0, r3, r0, lsl #16
    7c70:	b.n	7bac <__udivmoddi4+0xa0>
    7c72:	mov	r1, r5
    7c74:	mov	r0, r5
    7c76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c7a:	rsb	r1, lr, #32
    7c7e:	lsl.w	r3, r6, lr
    7c82:	lsl.w	r7, r7, lr
    7c86:	lsr.w	r9, r0, r1
    7c8a:	mov.w	r8, r7, lsr #16
    7c8e:	lsrs	r6, r1
    7c90:	orr.w	r9, r9, r3
    7c94:	udiv	sl, r6, r8
    7c98:	mov.w	r4, r9, lsr #16
    7c9c:	mls	r6, r8, sl, r6
    7ca0:	uxth.w	ip, r7
    7ca4:	orr.w	r3, r4, r6, lsl #16
    7ca8:	mul.w	r2, sl, ip
    7cac:	cmp	r2, r3
    7cae:	lsl.w	r4, r0, lr
    7cb2:	bls.n	7cca <__udivmoddi4+0x1be>
    7cb4:	adds	r3, r3, r7
    7cb6:	add.w	r1, sl, #4294967295
    7cba:	bcs.w	7dcc <__udivmoddi4+0x2c0>
    7cbe:	cmp	r2, r3
    7cc0:	bls.w	7dcc <__udivmoddi4+0x2c0>
    7cc4:	sub.w	sl, sl, #2
    7cc8:	add	r3, r7
    7cca:	subs	r3, r3, r2
    7ccc:	uxth.w	r9, r9
    7cd0:	udiv	r1, r3, r8
    7cd4:	mls	r3, r8, r1, r3
    7cd8:	orr.w	r3, r9, r3, lsl #16
    7cdc:	mul.w	r6, r1, ip
    7ce0:	cmp	r6, r3
    7ce2:	bls.n	7cf4 <__udivmoddi4+0x1e8>
    7ce4:	adds	r3, r3, r7
    7ce6:	add.w	r2, r1, #4294967295
    7cea:	bcs.n	7dc4 <__udivmoddi4+0x2b8>
    7cec:	cmp	r6, r3
    7cee:	bls.n	7dc4 <__udivmoddi4+0x2b8>
    7cf0:	subs	r1, #2
    7cf2:	add	r3, r7
    7cf4:	subs	r3, r3, r6
    7cf6:	orr.w	r1, r1, sl, lsl #16
    7cfa:	b.n	7c1a <__udivmoddi4+0x10e>
    7cfc:	rsb	lr, r1, #32
    7d00:	lsr.w	r4, r2, lr
    7d04:	lsls	r3, r1
    7d06:	orrs	r3, r4
    7d08:	lsr.w	r7, r0, lr
    7d0c:	lsl.w	r4, r6, r1
    7d10:	mov.w	ip, r3, lsr #16
    7d14:	lsr.w	r6, r6, lr
    7d18:	orrs	r4, r7
    7d1a:	udiv	r9, r6, ip
    7d1e:	lsrs	r7, r4, #16
    7d20:	mls	r6, ip, r9, r6
    7d24:	uxth.w	r8, r3
    7d28:	orr.w	r6, r7, r6, lsl #16
    7d2c:	mul.w	r7, r9, r8
    7d30:	cmp	r7, r6
    7d32:	lsl.w	r2, r2, r1
    7d36:	lsl.w	sl, r0, r1
    7d3a:	bls.n	7d4e <__udivmoddi4+0x242>
    7d3c:	adds	r6, r6, r3
    7d3e:	add.w	r0, r9, #4294967295
    7d42:	bcs.n	7dc8 <__udivmoddi4+0x2bc>
    7d44:	cmp	r7, r6
    7d46:	bls.n	7dc8 <__udivmoddi4+0x2bc>
    7d48:	sub.w	r9, r9, #2
    7d4c:	add	r6, r3
    7d4e:	subs	r6, r6, r7
    7d50:	uxth	r0, r4
    7d52:	udiv	r4, r6, ip
    7d56:	mls	r6, ip, r4, r6
    7d5a:	orr.w	r7, r0, r6, lsl #16
    7d5e:	mul.w	r8, r4, r8
    7d62:	cmp	r8, r7
    7d64:	bls.n	7d76 <__udivmoddi4+0x26a>
    7d66:	adds	r7, r7, r3
    7d68:	add.w	r0, r4, #4294967295
    7d6c:	bcs.n	7dc0 <__udivmoddi4+0x2b4>
    7d6e:	cmp	r8, r7
    7d70:	bls.n	7dc0 <__udivmoddi4+0x2b4>
    7d72:	subs	r4, #2
    7d74:	add	r7, r3
    7d76:	orr.w	r0, r4, r9, lsl #16
    7d7a:	rsb	r7, r8, r7
    7d7e:	umull	r8, r9, r0, r2
    7d82:	cmp	r7, r9
    7d84:	mov	r4, r8
    7d86:	mov	r6, r9
    7d88:	bcc.n	7db4 <__udivmoddi4+0x2a8>
    7d8a:	beq.n	7de0 <__udivmoddi4+0x2d4>
    7d8c:	cbz	r5, 7de8 <__udivmoddi4+0x2dc>
    7d8e:	subs.w	r3, sl, r4
    7d92:	sbc.w	r7, r7, r6
    7d96:	lsl.w	lr, r7, lr
    7d9a:	lsrs	r3, r1
    7d9c:	lsrs	r7, r1
    7d9e:	orr.w	r3, lr, r3
    7da2:	stmia.w	r5, {r3, r7}
    7da6:	movs	r1, #0
    7da8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dac:	mov	r3, r2
    7dae:	b.n	7ba2 <__udivmoddi4+0x96>
    7db0:	mov	r0, r2
    7db2:	b.n	7b76 <__udivmoddi4+0x6a>
    7db4:	subs.w	r4, r8, r2
    7db8:	sbc.w	r6, r9, r3
    7dbc:	subs	r0, #1
    7dbe:	b.n	7d8c <__udivmoddi4+0x280>
    7dc0:	mov	r4, r0
    7dc2:	b.n	7d76 <__udivmoddi4+0x26a>
    7dc4:	mov	r1, r2
    7dc6:	b.n	7cf4 <__udivmoddi4+0x1e8>
    7dc8:	mov	r9, r0
    7dca:	b.n	7d4e <__udivmoddi4+0x242>
    7dcc:	mov	sl, r1
    7dce:	b.n	7cca <__udivmoddi4+0x1be>
    7dd0:	subs	r3, #2
    7dd2:	add	r4, r7
    7dd4:	b.n	7c68 <__udivmoddi4+0x15c>
    7dd6:	mov	r0, r1
    7dd8:	b.n	7bf0 <__udivmoddi4+0xe4>
    7dda:	subs	r0, #2
    7ddc:	add	r6, r7
    7dde:	b.n	7c40 <__udivmoddi4+0x134>
    7de0:	cmp	sl, r8
    7de2:	bcc.n	7db4 <__udivmoddi4+0x2a8>
    7de4:	mov	r6, r7
    7de6:	b.n	7d8c <__udivmoddi4+0x280>
    7de8:	mov	r1, r5
    7dea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dee:	nop

00007df0 <__aeabi_idiv0>:
    7df0:	bx	lr
    7df2:	nop

00007df4 <._63>:
    7df4:	................
    7e04:	........Pin: %u 
    7e14:	-> f=%u Hz d=%u 
    7e24:	%%...Setup pin %
    7e34:	u...

00007e38 <EncPlex::EncoderBase::stateMachineFull>:
    7e38:	.."0 .1..2.#3!..
	...

00007e54 <EncPlex::EncoderBase::stateMachineHalf>:
    7e54:	...0..1..2..3...
    7e64:	 .4..4.#6666

00007e70 <EncPlex::EncoderBase::stateMachineQtr>:
    7e70:	...0..1..2..3...
    7e80:	 .4..5..6...

00007e8c <digital_pin_to_info_PGM>:
    7e8c:	@..C@..@D..CD..@
    7e9c:	...C...@0..C0..@
    7eac:	4..C4..@...C...@
    7ebc:	...C...@...C...@
    7ecc:	...C...@...C...@
    7edc:	...C...@...C...@
    7eec:	...C...@...C...@
    7efc:	...C...@...C...@
    7f0c:	...C...@...C...@
    7f1c:	...C...@...C...@
    7f2c:	...C...@...C...@
    7f3c:	...C...@...C...@
    7f4c:	h .Ch..@...C...@
    7f5c:	8..C8..@<..C<..@
    7f6c:	@..C@..@H..CH..@
    7f7c:	L..CL..@(..C(..@
    7f8c:	,..C,..@` .C`..@
    7f9c:	d .Cd..@ ..C ..@
    7fac:	$..C$..@(..C(..@
    7fbc:	,..C,..@D..CD..@
    7fcc:	p..Cp..@t..Ct..@
    7fdc:	h..Ch..@P..CP..@
    7fec:	X..CX..@\..C\..@
    7ffc:	T..CT..@ ..C ..@
    800c:	$..C$..@...C...@
    801c:	...C...@8..C8..@
    802c:	4..C4..@0..C0..@
    803c:	<..C<..@,..C,..@
    804c:	( .C(..@, .C,..@
    805c:	. .C...@. .C...@
    806c:	. .C...@. .C...@
    807c:	. .C...@. .C...@

0000808c <vtable for usb_serial_class>:
	...
    8094:	](..U(..Q(..M(..
    80a4:	I(..E(..A(..=(..

000080b4 <usb_endpoint_config_table>:
    80b4:	....

000080b8 <usb_descriptor_list>:
    80b8:	................
    80c8:	....C.......@...
    80d8:	................
    80e8:	....(...........
    80f8:	D...............
    8108:	....

0000810c <_global_impure_ptr>:
    810c:	`...C...POSIX...
    811c:	....

00008120 <_ctype_>:
    8120:	.         ((((( 
    8130:	                
    8140:	 ...............
    8150:	................
    8160:	..AAAAAA........
    8170:	................
    8180:	..BBBBBB........
    8190:	................
    81a0:	 ...............
	...
    8220:	........

00008228 <__mprec_tens>:
    8228:	.......?......$@
    8238:	......Y@.....@.@
    8248:	.......@.....j.@
    8258:	.......A......cA
    8268:	.......A....e..A
    8278:	... _..B....vH7B
    8288:	......mB..@..0.B
    8298:	.......B..4&.k.C
    82a8:	...7y.AC....W4vC
    82b8:	..Ngm..C.=.`.X.C
    82c8:	@..x...DP.....KD
    82d8:	..M....D.J...-.D
    82e8:	...yCx.D

000082f0 <__mprec_bigtens>:
    82f0:	...7y.AC.n.....F
    8300:	..?..O8M2.0.Hw.Z
    8310:	<.s..O.u

00008318 <p05.6087>:
    8318:	........}...Infi
    8328:	nity....NaN.0...

00008338 <zeroes.7258>:
    8338:	0000000000000000
    8348:	INF.inf.NAN.nan.
    8358:	0123456789ABCDEF
    8368:	....0123456789ab
    8378:	cdef....(null)..

00008388 <blanks.7257>:
    8388:	                

00008398 <_init>:
    8398:	push	{r3, r4, r5, r6, r7, lr}
    839a:	nop
    839c:	pop	{r3, r4, r5, r6, r7}
    839e:	pop	{r3}
    83a0:	mov	lr, r3
    83a2:	bx	lr

000083a4 <__init_array_start>:
    83a4:	.word	0x000048ed

000083a8 <__frame_dummy_init_array_entry>:
    83a8:	5...M...

Disassembly of section .fini:

000083b0 <_fini>:
    83b0:	push	{r3, r4, r5, r6, r7, lr}
    83b2:	nop
