
.vsteensy/build/02_Multiplexed_74165.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`0.......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	6000133c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	600016c8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016c0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013a0 <usb_init>
	analog_init();
600011e4:	bl	6000148c <analog_init>
	pwm_init();
600011e8:	bl	600016f0 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e4 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600016b8 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	600016b0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600016e0 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001700
60001220:	.word	0x00006150
60001224:	.word	0x20000000
60001228:	.word	0x6000785c
6000122c:	.word	0x20000fe0
60001230:	.word	0x20000fe0
60001234:	.word	0x200032c0
60001238:	.word	0xe000ed88
6000123c:	.word	0x200013fc
60001240:	.word	0x00000c11
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00000a65
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x00000b69
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x2000102c
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20001034
60001290:	.word	0x20001400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_32M	(SCB_MPU_RASR_SIZE(24) | SCB_MPU_RASR_ENABLE)
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	ldr	r2, [pc, #100]	; (60001304 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	ldr	r3, [pc, #100]	; (60001308 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	ldr	r0, [pc, #96]	; (6000130c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	ldr	r6, [pc, #96]	; (60001310 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	ldr	r5, [pc, #100]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b2:	ldr	r7, [pc, #100]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	ldr	r6, [pc, #92]	; (6000131c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012be:	ldr	r5, [pc, #96]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012c0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c4:	ldr	r7, [pc, #92]	; (60001324 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	ldr	r6, [pc, #92]	; (60001328 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012ca:	ldr	r5, [pc, #96]	; (6000132c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012cc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ce:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d0:	ldr	r7, [pc, #92]	; (60001330 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r6, [pc, #92]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d6:	ldr	r5, [pc, #96]	; (60001338 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012da:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012dc:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012de:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012e0:	dsb	sy
	asm("isb");
600012e4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012e8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012ec:	dsb	sy
	asm("isb");
600012f0:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600012f4:	ldr.w	r3, [r2, #-136]
600012f8:	orr.w	r3, r3, #196608	; 0x30000
600012fc:	str.w	r3, [r2, #-136]
60001300:	pop	{r4, r5, r6, r7, pc}
60001302:	nop
60001304:	.word	0xe000ed9c
60001308:	.word	0xe000eda0
6000130c:	.word	0xe000ed94
60001310:	.word	0x03080025
60001314:	.word	0x00200011
60001318:	.word	0x07020021
6000131c:	.word	0x20000012
60001320:	.word	0x13080025
60001324:	.word	0x20200013
60001328:	.word	0x130b0027
6000132c:	.word	0x40000014
60001330:	.word	0x13100033
60001334:	.word	0x60000015
60001338:	.word	0x070b002f

6000133c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000133c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000133e:	ldr	r2, [pc, #92]	; (6000139c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001340:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001342:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001346:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000134a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000134e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001352:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001356:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001358:	tst.w	r3, #2
6000135c:	beq.n	6000136c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000135e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001360:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001362:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001364:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001366:	tst.w	r3, #2
6000136a:	bne.n	6000135e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000136c:	tst.w	r3, #8192	; 0x2000
60001370:	bne.n	60001376 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001372:	str	r5, [r2, #20]
			continue;
60001374:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001376:	tst.w	r3, #4096	; 0x1000
6000137a:	bne.n	60001380 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000137c:	str	r6, [r2, #20]
			continue;
6000137e:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001380:	cmp	r3, #0
60001382:	bge.n	60001356 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001384:	tst.w	r3, #65536	; 0x10000
60001388:	beq.n	6000138e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000138a:	str	r1, [r2, #24]
			continue;
6000138c:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000138e:	lsls	r3, r3, #25
60001390:	bmi.n	60001396 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001392:	str	r7, [r2, #20]
			continue;
60001394:	b.n	60001356 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001396:	pop	{r4, r5, r6, r7}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400d8000

600013a0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a0:	ldr	r3, [pc, #192]	; (60001464 <usb_init+0xc4>)
600013a2:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600013a6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013ac:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013b0:	bl	600016d0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b4:	ldr	r1, [pc, #176]	; (60001468 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013b6:	ldr	r0, [pc, #180]	; (6000146c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013bc:	ldr	r4, [pc, #176]	; (60001470 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013be:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013c2:	ldr	r3, [pc, #176]	; (60001474 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013c4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013c8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013cc:	ldr	r2, [r4, #0]
600013ce:	ands	r3, r2
600013d0:	cbnz	r3, 600013da <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013d2:	ldr.w	r3, [r0, #424]	; 0x1a8
600013d6:	lsls	r2, r3, #30
600013d8:	beq.n	60001410 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013da:	ldr	r3, [pc, #144]	; (6000146c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013dc:	mov.w	r1, #2147483648	; 0x80000000
600013e0:	ldr	r2, [pc, #140]	; (60001470 <usb_init+0xd0>)
600013e2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013e4:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013e6:	ldr.w	r1, [r3, #320]	; 0x140
600013ea:	orr.w	r1, r1, #2
600013ee:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013f2:	ldr.w	r3, [r2, #320]	; 0x140
600013f6:	lsls	r3, r3, #30
600013f8:	bmi.n	600013f2 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600013fa:	mov.w	r0, #131072	; 0x20000
600013fe:	ldr	r1, [pc, #120]	; (60001478 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001400:	ldr	r3, [pc, #108]	; (60001470 <usb_init+0xd0>)
60001402:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001406:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001408:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000140a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000140c:	bl	600016d8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001410:	ldr	r5, [pc, #104]	; (6000147c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001412:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001414:	ldr	r3, [pc, #88]	; (60001470 <usb_init+0xd0>)
60001416:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000141a:	ldr	r4, [pc, #80]	; (6000146c <usb_init+0xcc>)
6000141c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000141e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001420:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001422:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001424:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001426:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000142a:	mov.w	r2, #640	; 0x280
6000142e:	bl	600016e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001432:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001436:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000143a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000143e:	ldr	r2, [pc, #64]	; (60001480 <usb_init+0xe0>)
60001440:	ldr	r1, [pc, #64]	; (60001484 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001442:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001444:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001446:	str.w	r5, [r4, #344]	; 0x158
6000144a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000144e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001452:	ldr	r2, [pc, #52]	; (60001488 <usb_init+0xe8>)
60001454:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001458:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000145a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000145c:	str.w	r3, [r4, #320]	; 0x140
60001460:	pop	{r4, r5, r6, pc}
60001462:	nop
60001464:	.word	0x400d8000
60001468:	.word	0x400fc000
6000146c:	.word	0x402e0000
60001470:	.word	0x400d9000
60001474:	.word	0x001e1c00
60001478:	.word	0xe000e28c
6000147c:	.word	0x20003000
60001480:	.word	0x20001400
60001484:	.word	0x00001565
60001488:	.word	0xe000e10c

6000148c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000148c:	ldr	r3, [pc, #68]	; (600014d4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148e:	ldr	r1, [pc, #72]	; (600014d8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001490:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001492:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001494:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001498:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000149a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000149c:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014a2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a4:	orr.w	r0, r0, #768	; 0x300
600014a8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014aa:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014ac:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ae:	ldr	r3, [r2, #72]	; 0x48
600014b0:	lsls	r3, r3, #24
600014b2:	bmi.n	600014ae <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014b4:	ldr	r3, [pc, #36]	; (600014dc <analog_init+0x50>)
600014b6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014ba:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014bc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014be:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014c0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014c2:	ldr	r3, [r2, #72]	; 0x48
600014c4:	ands.w	r3, r3, #128	; 0x80
600014c8:	bne.n	600014c2 <analog_init+0x36>
	calibrating = 0;
600014ca:	ldr	r2, [pc, #20]	; (600014e0 <analog_init+0x54>)
600014cc:	strb	r3, [r2, #0]
}
600014ce:	pop	{r4, r5}
600014d0:	bx	lr
600014d2:	nop
600014d4:	.word	0x400fc000
600014d8:	.word	0x400c4000
600014dc:	.word	0x400c8000
600014e0:	.word	0x20001279

600014e4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e4:	ldr	r2, [pc, #216]	; (600015c0 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014e6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014e8:	ldr	r1, [pc, #216]	; (600015c4 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ea:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ee:	ldr	r3, [r2, #0]
600014f0:	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

FLASHMEM void tempmon_init(void)
{
600014f4:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014f8:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014fc:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #212]	; 600015d8 <tempmon_init+0xf4>
60001504:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001506:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150a:	ldr	r7, [pc, #188]	; (600015c8 <tempmon_init+0xe4>)
6000150c:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001514:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	vmov	s15, r0
60001528:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000152c:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000152e:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001532:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001536:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153a:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000153c:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001540:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001544:	ldr	r5, [pc, #132]	; (600015cc <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001546:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001550:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001554:	ldr	r6, [pc, #120]	; (600015d0 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001556:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155a:	ldr	r1, [pc, #120]	; (600015d4 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000155c:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155e:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001560:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001564:	vmov	s15, r3
60001568:	vcvt.f32.u32	s15, s15
6000156c:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001570:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001578:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000157c:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001580:	vmov	r3, s11
60001584:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158c:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001590:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001592:	and.w	r1, r1, r0, lsl #16
60001596:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159e:	orrs	r3, r1
600015a0:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a4:	vmov	r3, s15
600015a8:	ldr.w	r1, [r2, #272]	; 0x110
600015ac:	ubfx	r3, r3, #0, #12
600015b0:	orrs	r3, r1
600015b2:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015b6:	ldr	r3, [r2, #0]
600015b8:	orr.w	r3, r3, #2
600015bc:	str	r3, [r2, #0]
600015be:	pop	{r4, r5, r6, r7, pc}
600015c0:	.word	0x400d8180
600015c4:	.word	0x401f4400
600015c8:	.word	0x20001284
600015cc:	.word	0x20001280
600015d0:	.word	0x20001288
600015d4:	.word	0x0fff0000
600015d8:	.word	0x2000127c

600015dc <usb_string_product_name_default>:
600015dc:	..U.S.B. .S.e.r.
600015ec:	i.a.l...

600015f4 <usb_string_manufacturer_name_default>:
600015f4:	..T.e.e.n.s.y.d.
60001604:	u.i.n.o.

6000160c <string0>:
6000160c:	....

60001610 <usb_config_descriptor_12>:
60001610:	..C.....2.......
60001620:	...$....$....$..
60001630:	.$..............
60001640:	.........@......
60001650:	@...

60001654 <usb_config_descriptor_480>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	................
60001694:	....

60001698 <qualifier_descriptor>:
60001698:	.......@....

600016a4 <_init>:
600016a4:	push	{r3, r4, r5, r6, r7, lr}
600016a6:	nop
600016a8:	pop	{r3, r4, r5, r6, r7}
600016aa:	pop	{r3}
600016ac:	mov	lr, r3
600016ae:	bx	lr

600016b0 <____libc_init_array_veneer>:
600016b0:	ldr.w	pc, [pc]	; 600016b4 <____libc_init_array_veneer+0x4>
600016b4:	.word	0x00002229

600016b8 <__startup_late_hook_veneer>:
600016b8:	ldr.w	pc, [pc]	; 600016bc <__startup_late_hook_veneer+0x4>
600016bc:	.word	0x00000c2d

600016c0 <__startup_early_hook_veneer>:
600016c0:	ldr.w	pc, [pc]	; 600016c4 <__startup_early_hook_veneer+0x4>
600016c4:	.word	0x00000c29

600016c8 <__set_arm_clock_veneer>:
600016c8:	ldr.w	pc, [pc]	; 600016cc <__set_arm_clock_veneer+0x4>
600016cc:	.word	0x000004c5

600016d0 <__usb_init_serialnumber_veneer>:
600016d0:	ldr.w	pc, [pc]	; 600016d4 <__usb_init_serialnumber_veneer+0x4>
600016d4:	.word	0x00002001

600016d8 <__delay_veneer>:
600016d8:	ldr.w	pc, [pc]	; 600016dc <__delay_veneer+0x4>
600016dc:	.word	0x00000789

600016e0 <__main_veneer>:
600016e0:	ldr.w	pc, [pc]	; 600016e4 <__main_veneer+0x4>
600016e4:	.word	0x000008d5

600016e8 <__memset_veneer>:
600016e8:	ldr.w	pc, [pc]	; 600016ec <__memset_veneer+0x4>
600016ec:	.word	0x000028ed

600016f0 <__pwm_init_veneer>:
600016f0:	ldr.w	pc, [pc]	; 600016f4 <__pwm_init_veneer+0x4>
600016f4:	.word	0x00001d49

600016f8 <__init_array_start>:
600016f8:	.word	0x00000045
600016fc:	.word	0x000000ed

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	lsrs	r0, r4, #31
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	str	r4, [r2, #20]
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	nop
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r4, #31
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	str	r4, [r2, #20]
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	lsrs	r0, r4, #31
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <EncPlex74165::~EncPlex74165()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
      7c:	ldr	r3, [r0, #16]
#pragma once

#include "EncPlexBase.h"

class EncPlex74165 : public EncPlex::EncPlexBase
      7e:	push	{r4, lr}
      80:	mov	r4, r0
      82:	cbz	r3, 8e <EncPlex74165::~EncPlex74165()+0x12>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
      84:	.word	0x0108f100
      88:	movs	r2, #3
      8a:	.short	0x4608
      8c:	blx	r3
      8e:	.short	0x4620
      90:	pop	{r4, pc}
      92:	.short	0xbf00

00000094 <setup>:
                               //74165 datasheet: http://www.ti.com/product/SN74HC165

EncPlex74165 encoders(encoderCount, pinLD, pinCLK, QH_A, QH_B,4);

void setup()
{
      94:	bx	lr
      96:	.short	0xbf00

00000098 <loop>:

elapsedMillis stopwatch = 0;


void loop()
{
      98:	push	{r4, r5, r6, lr}
      9a:	ldr	r6, [pc, #60]	; (d8 <loop+0x40>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
      9c:	.word	0x48104d0f
    encoders.tick();
      a0:	bl	2f8 <EncPlex74165::tick()>
      a4:	ldr	r3, [r6, #0]

    if (stopwatch > 200)  // display encoder values every 200 ms
      a6:	ldr	r2, [r5, #0]
      a8:	.word	0x2bc81a9b
      ac:	bls.n	d4 <loop+0x3c>
      ae:	movs	r4, #0
    {
        for (unsigned i = 0; i < encoderCount; i++)
        {
            Serial.printf("E%u:%3d ", i, encoders[i].read());
      b0:	.word	0x480b4621
      b4:	bl	1a4 <EncPlex::EncPlexBase::operator[](unsigned int)>
      b8:	mov	r2, r4
{
    encoders.tick();

    if (stopwatch > 200)  // display encoder values every 200 ms
    {
        for (unsigned i = 0; i < encoderCount; i++)
      ba:	adds	r4, #1
        {
            Serial.printf("E%u:%3d ", i, encoders[i].read());
      bc:	ldr	r3, [r0, #0]
      be:	ldr	r1, [pc, #36]	; (e4 <loop+0x4c>)
      c0:	ldr	r0, [pc, #36]	; (e8 <loop+0x50>)
      c2:	.short	0xf000
      c4:	ldc2	12, cr2, [r3, #32]
{
    encoders.tick();

    if (stopwatch > 200)  // display encoder values every 200 ms
    {
        for (unsigned i = 0; i < encoderCount; i++)
      c8:	.word	0x4807d1f2
        {
            Serial.printf("E%u:%3d ", i, encoders[i].read());
        }
        Serial.println();
      cc:	bl	bbc <Print::println()>
      d0:	.word	0x602b6833
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
      d4:	pop	{r4, r5, r6, pc}
      d6:	.short	0xbf00
      d8:	asrs	r4, r6, #32
      da:	.short	0x2000
      dc:	asrs	r0, r5, #32
      de:	movs	r0, #0
      e0:	lsrs	r4, r7, #31
      e2:	movs	r0, #0
      e4:	movs	r0, r0
      e6:	.short	0x2000
      e8:	lsls	r0, r7, #23
      ea:	.short	0x2000

000000ec <_GLOBAL__sub_I_encoders>:
        stopwatch = 0;
    }
}
      ec:	push	{r4, lr}
constexpr unsigned QH_B   = 1; //output pin QH of shift register A
constexpr unsigned pinLD  = 3; //load pin for all shift registers)
constexpr unsigned pinCLK = 4; //clock pin for all shift registers
                               //74165 datasheet: http://www.ti.com/product/SN74HC165

EncPlex74165 encoders(encoderCount, pinLD, pinCLK, QH_A, QH_B,4);
      ee:	.short	0x2304
            Serial.printf("E%u:%3d ", i, encoders[i].read());
        }
        Serial.println();
        stopwatch = 0;
    }
}
      f0:	sub	sp, #16
constexpr unsigned QH_B   = 1; //output pin QH of shift register A
constexpr unsigned pinLD  = 3; //load pin for all shift registers)
constexpr unsigned pinCLK = 4; //clock pin for all shift registers
                               //74165 datasheet: http://www.ti.com/product/SN74HC165

EncPlex74165 encoders(encoderCount, pinLD, pinCLK, QH_A, QH_B,4);
      f2:	ldr	r4, [pc, #44]	; (120 <_GLOBAL__sub_I_encoders+0x34>)
      f4:	.word	0x22002101
      f8:	str	r3, [sp, #8]
      fa:	.short	0x9101
      fc:	mov	r0, r4
      fe:	str	r2, [sp, #0]
     100:	.word	0x22032108
     104:	bl	2cc <EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
     108:	.word	0x4a064620
     10c:	ldr	r1, [pc, #24]	; (128 <_GLOBAL__sub_I_encoders+0x3c>)
     10e:	bl	2204 <__aeabi_atexit>
     112:	.short	0x4a06
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     114:	ldr	r3, [pc, #24]	; (130 <_GLOBAL__sub_I_encoders+0x44>)
     116:	.short	0x6812
     118:	str	r2, [r3, #0]
            Serial.printf("E%u:%3d ", i, encoders[i].read());
        }
        Serial.println();
        stopwatch = 0;
    }
}
     11a:	.short	0xb004
     11c:	pop	{r4, pc}
     11e:	nop
     120:	.word	0x20000ffc
     124:	lsls	r0, r5, #23
     126:	.short	0x2000
     128:	lsls	r5, r7, #1
     12a:	.short	0x0000
     12c:	asrs	r4, r6, #32
     12e:	.short	0x2000
     130:	asrs	r0, r5, #32
     132:	.short	0x2000

00000134 <EncPlex::EncPlexBase::EncPlexBase(unsigned int, unsigned int)>:
#include "EncPlexBase.h"

namespace EncPlex
{
    EncPlexBase::EncPlexBase(unsigned eCnt, unsigned spd)
     134:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
     138:	cmp.w	r1, #48758784	; 0x2e80000
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     13c:	.word	0x0300f04f
#include "EncPlexBase.h"

namespace EncPlex
{
    EncPlexBase::EncPlexBase(unsigned eCnt, unsigned spd)
     140:	mov	r7, r0
     142:	.short	0x460e
     144:	mov	r8, r2
        : encoderCount(eCnt)
     146:	.short	0x6001
     148:	str	r3, [r0, #16]
    {
        encoders = new EncoderBase[eCnt];
     14a:	.short	0xd828
     14c:	movs	r0, #44	; 0x2c
     14e:	.short	0xfb00
     150:	and.w	r0, r1, #134744072	; 0x8080808
     154:	bl	c0c <operator new[](unsigned int)>
     158:	.word	0x1e74232c
     15c:	str	r6, [r0, #4]
     15e:	.short	0xf100
     160:	lsrs	r0, r1, #4
     162:	.short	0x6003
     164:	cbz	r6, 176 <EncPlex::EncPlexBase::EncPlexBase(unsigned int, unsigned int)+0x42>
     166:	.short	0x464d
     168:	subs	r4, #1
     16a:	.short	0x4628
     16c:	bl	1c4 <EncPlex::EncoderBase::EncoderBase()>
     170:	.word	0x1c63352c
     174:	bne.n	168 <EncPlex::EncPlexBase::EncPlexBase(unsigned int, unsigned int)+0x34>
     176:	str.w	r9, [r7, #4]
        for (unsigned i = 0; i < eCnt; i++)
     17a:	cbz	r6, 198 <EncPlex::EncPlexBase::EncPlexBase(unsigned int, unsigned int)+0x64>
     17c:	movs	r4, #0
     17e:	mov	r5, r4
     180:	b.n	186 <EncPlex::EncPlexBase::EncPlexBase(unsigned int, unsigned int)+0x52>
     182:	ldr.w	r9, [r7, #4]
     186:	.short	0x3501
        {
            encoders[i].setStepsPerDetent(spd);
     188:	add.w	r0, r9, r4
     18c:	.word	0x342c4641
     190:	bl	1e4 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)>
{
    EncPlexBase::EncPlexBase(unsigned eCnt, unsigned spd)
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
        for (unsigned i = 0; i < eCnt; i++)
     194:	cmp	r6, r5
     196:	bne.n	182 <EncPlex::EncPlexBase::EncPlexBase(unsigned int, unsigned int)+0x4e>
        {
            encoders[i].setStepsPerDetent(spd);
        }
    }
     198:	mov	r0, r7
     19a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
namespace EncPlex
{
    EncPlexBase::EncPlexBase(unsigned eCnt, unsigned spd)
        : encoderCount(eCnt)
    {
        encoders = new EncoderBase[eCnt];
     19e:	mov.w	r0, #4294967295
     1a2:	b.n	154 <EncPlex::EncPlexBase::EncPlexBase(unsigned int, unsigned int)+0x20>

000001a4 <EncPlex::EncPlexBase::operator[](unsigned int)>:
        }
    }

    EncoderBase& EncPlexBase::operator[](std::size_t idx)
    {
        return idx < encoderCount ? encoders[idx] : encoders[encoderCount - 1];
     1a4:	ldr	r2, [r0, #0]
     1a6:	cmp	r2, r1
     1a8:	.word	0x232cd806
     1ac:	ldr	r1, [r0, #4]
     1ae:	.short	0xfb03
     1b0:			; <UNDEFINED> instruction: 0xf3023b2c
     1b4:	.word	0x477018c8
     1b8:	ldr	r3, [r0, #4]
     1ba:	movs	r0, #44	; 0x2c
     1bc:	.word	0x3001fb00
     1c0:	bx	lr
     1c2:	nop

000001c4 <EncPlex::EncoderBase::EncoderBase()>:
#include <algorithm>

namespace EncPlex
{

    EncoderBase::EncoderBase()
     1c4:	.word	0xf06f2200
            this->maxVal = max;
        }
        else
        {
            this->minVal = INT32_MIN;
            this->maxVal = INT32_MAX;
     1c8:	asrs	r0, r0
#include <algorithm>

namespace EncPlex
{

    EncoderBase::EncoderBase()
     1ca:	.short	0xb430
     1cc:	movs	r5, #4
            this->minVal = min;
            this->maxVal = max;
        }
        else
        {
            this->minVal = INT32_MIN;
     1ce:	mov.w	r4, #2147483648	; 0x80000000
            this->maxVal = INT32_MAX;
     1d2:	.short	0x6081
#include <algorithm>

namespace EncPlex
{

    EncoderBase::EncoderBase()
     1d4:	str	r5, [r0, #36]	; 0x24
            this->minVal = min;
            this->maxVal = max;
        }
        else
        {
            this->minVal = INT32_MIN;
     1d6:	.short	0x6044
#include <algorithm>

namespace EncPlex
{

    EncoderBase::EncoderBase()
     1d8:	str	r2, [r0, #0]
     1da:	.short	0x7302
     1dc:	str	r2, [r0, #24]
     1de:	.short	0x6202
    {
        setLimits(0, 0);
    }
     1e0:	pop	{r4, r5}
     1e2:	bx	lr

000001e4 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)>:
        value = val;
    }

    void EncoderBase::setStepsPerDetent(unsigned spd)
    {
        if(stepsPerDetent == 4)
     1e4:	.word	0x2b046a43
     1e8:	beq.n	1f6 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)+0x12>
            stateMachine = &stateMachineFull;
        else if (stepsPerDetent == 2)
     1ea:	.short	0x2b02
     1ec:	beq.n	1f0 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)+0xc>
     1ee:	.short	0x4770
            stateMachine = &stateMachineHalf;
     1f0:	ldr	r3, [pc, #8]	; (1fc <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)+0x18>)
     1f2:	str	r3, [r0, #40]	; 0x28
     1f4:	bx	lr
    }

    void EncoderBase::setStepsPerDetent(unsigned spd)
    {
        if(stepsPerDetent == 4)
            stateMachine = &stateMachineFull;
     1f6:	ldr	r3, [pc, #8]	; (200 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)+0x1c>)
     1f8:	str	r3, [r0, #40]	; 0x28
     1fa:	bx	lr
     1fc:	.word	0x20000028
     200:	.word	0x2000000c

00000204 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>:
    };



    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // http://www.buxtronix.net/2011/10/rotary-encoders-done-properly.html
    {
     204:	push	{r4}
        state = (*stateMachine)[state][phaseA << 1|phaseB];    // get next state depending on the inputs
     206:	orr.w	r2, r2, r1, lsl #1
     20a:	ldr	r3, [r0, #40]	; 0x28
     20c:	ldrb	r1, [r0, #12]
    };



    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // http://www.buxtronix.net/2011/10/rotary-encoders-done-properly.html
    {
     20e:	mov	r4, r0
        state = (*stateMachine)[state][phaseA << 1|phaseB];    // get next state depending on the inputs
     210:	add.w	r3, r3, r1, lsl #2
     214:	ldrb	r3, [r3, r2]
        uint8_t direction = state & 0xF0;                      // set if we need to count up / down or got an error
        state &=  0x0F;                                        // remove the direction info from state
     216:	and.w	r2, r3, #15


    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // http://www.buxtronix.net/2011/10/rotary-encoders-done-properly.html
    {
        state = (*stateMachine)[state][phaseA << 1|phaseB];    // get next state depending on the inputs
        uint8_t direction = state & 0xF0;                      // set if we need to count up / down or got an error
     21a:	and.w	r3, r3, #240	; 0xf0
        state &=  0x0F;                                        // remove the direction info from state

        if(direction == UP)
     21e:	cmp	r3, #16

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // http://www.buxtronix.net/2011/10/rotary-encoders-done-properly.html
    {
        state = (*stateMachine)[state][phaseA << 1|phaseB];    // get next state depending on the inputs
        uint8_t direction = state & 0xF0;                      // set if we need to count up / down or got an error
        state &=  0x0F;                                        // remove the direction info from state
     220:	strb	r2, [r0, #12]

        if(direction == UP)
     222:	beq.n	234 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x30>
            }
            value = maxVal;
            return false;
        }

        if (direction == DOWN)
     224:	cmp	r3, #32
     226:	beq.n	248 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x44>
            }
            value = minVal;
            return false;
        }

        if(direction == ERR)
     228:	cmp	r3, #48	; 0x30
     22a:	beq.n	25a <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x56>
        {
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
        }

        return false;
     22c:	movs	r0, #0
    }
     22e:	ldr.w	r4, [sp], #4
     232:	bx	lr
        uint8_t direction = state & 0xF0;                      // set if we need to count up / down or got an error
        state &=  0x0F;                                        // remove the direction info from state

        if(direction == UP)
        {
            if(value < maxVal)
     234:	ldr	r3, [r0, #0]
     236:	ldr	r2, [r0, #8]
     238:	cmp	r3, r2
     23a:	bge.n	250 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x4c>
            {
                value++;
     23c:	adds	r3, #1
                return true;
     23e:	movs	r0, #1

        if(direction == UP)
        {
            if(value < maxVal)
            {
                value++;
     240:	str	r3, [r4, #0]
        {
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
        }

        return false;
    }
     242:	ldr.w	r4, [sp], #4
     246:	bx	lr
            return false;
        }

        if (direction == DOWN)
        {
            if(value > minVal)
     248:	ldr	r3, [r0, #0]
     24a:	ldr	r2, [r0, #4]
     24c:	cmp	r3, r2
     24e:	bgt.n	26c <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x68>
            {
                value--;
                return true;
            }
            value = minVal;
     250:	str	r2, [r4, #0]
            return false;
     252:	movs	r0, #0
        {
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
        }

        return false;
    }
     254:	ldr.w	r4, [sp], #4
     258:	bx	lr
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     25a:	ldr	r3, [pc, #44]	; (288 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x84>)
     25c:	ldr	r0, [r3, #8]
     25e:	ands.w	r0, r0, #8
     262:	bne.n	278 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x74>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     264:	movs	r2, #8
     266:	str.w	r2, [r3, #132]	; 0x84
     26a:	b.n	22e <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x2a>

        if (direction == DOWN)
        {
            if(value > minVal)
            {
                value--;
     26c:	subs	r3, #1
                return true;
     26e:	movs	r0, #1

        if (direction == DOWN)
        {
            if(value > minVal)
            {
                value--;
     270:	str	r3, [r4, #0]
        {
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
        }

        return false;
    }
     272:	ldr.w	r4, [sp], #4
     276:	bx	lr
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     278:	movs	r2, #8
        if(direction == ERR)
        {
            digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
        }

        return false;
     27a:	movs	r0, #0
    }
     27c:	ldr.w	r4, [sp], #4
     280:	str.w	r2, [r3, #136]	; 0x88
     284:	bx	lr
     286:	nop
     288:	.word	0x42004000

0000028c <EncPlex74165::begin()>:
{
    begin();
}

void EncPlex74165::begin()
{
     28c:	push	{r4, lr}
     28e:	mov	r4, r0
    pinMode(A, INPUT);
     290:	movs	r1, #0
     292:	ldrb	r0, [r0, #24]
     294:	bl	854 <pinMode>
    pinMode(B, INPUT);
     298:	ldrb	r0, [r4, #28]
     29a:	movs	r1, #0
     29c:	bl	854 <pinMode>
    pinMode(LD, OUTPUT);
     2a0:	ldrb.w	r0, [r4, #36]	; 0x24
     2a4:	movs	r1, #1
     2a6:	bl	854 <pinMode>
    pinMode(CLK, OUTPUT);
     2aa:	movs	r1, #1
     2ac:	ldrb.w	r0, [r4, #40]	; 0x28
     2b0:	bl	854 <pinMode>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     2b4:	ldrb.w	r3, [r4, #36]	; 0x24
     2b8:	ldr	r2, [pc, #12]	; (2c8 <EncPlex74165::begin()+0x3c>)
     2ba:	lsls	r3, r3, #4
     2bc:	adds	r1, r2, r3
     2be:	ldr	r3, [r2, r3]
     2c0:	ldr	r2, [r1, #12]
     2c2:	str.w	r2, [r3, #132]	; 0x84
     2c6:	pop	{r4, pc}
     2c8:	.word	0x20000044

000002cc <EncPlex74165::EncPlex74165(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
#include "../delay.h"
#include "Arduino.h"

using namespace EncPlex;

EncPlex74165::EncPlex74165(unsigned encoderCount, unsigned pinLD, unsigned pinCLK, unsigned pinA, unsigned pinB, unsigned stepsPerDetent)
     2cc:	push	{r3, r4, r5, r6, r7, lr}
     2ce:	mov	r5, r2
    : EncPlex::EncPlexBase(encoderCount, stepsPerDetent), A(pinA), B(pinB), S(-1), LD(pinLD), CLK(pinCLK)
     2d0:	ldr	r2, [sp, #32]
#include "../delay.h"
#include "Arduino.h"

using namespace EncPlex;

EncPlex74165::EncPlex74165(unsigned encoderCount, unsigned pinLD, unsigned pinCLK, unsigned pinA, unsigned pinB, unsigned stepsPerDetent)
     2d2:	mov	r4, r0
     2d4:	mov	r7, r3
     2d6:	ldr	r6, [sp, #24]
    : EncPlex::EncPlexBase(encoderCount, stepsPerDetent), A(pinA), B(pinB), S(-1), LD(pinLD), CLK(pinCLK)
     2d8:	bl	134 <EncPlex::EncPlexBase::EncPlexBase(unsigned int, unsigned int)>
     2dc:	mov.w	r2, #4294967295
     2e0:	ldr	r3, [sp, #28]
{
    begin();
     2e2:	mov	r0, r4
#include "Arduino.h"

using namespace EncPlex;

EncPlex74165::EncPlex74165(unsigned encoderCount, unsigned pinLD, unsigned pinCLK, unsigned pinA, unsigned pinB, unsigned stepsPerDetent)
    : EncPlex::EncPlexBase(encoderCount, stepsPerDetent), A(pinA), B(pinB), S(-1), LD(pinLD), CLK(pinCLK)
     2e4:	str	r5, [r4, #36]	; 0x24
     2e6:	str	r6, [r4, #24]
     2e8:	str	r3, [r4, #28]
     2ea:	str	r7, [r4, #40]	; 0x28
     2ec:	str	r2, [r4, #32]
{
    begin();
     2ee:	bl	28c <EncPlex74165::begin()>
}
     2f2:	mov	r0, r4
     2f4:	pop	{r3, r4, r5, r6, r7, pc}
     2f6:	nop

000002f8 <EncPlex74165::tick()>:

    digitalWriteFast(LD, HIGH); // active low
}

void EncPlex74165::tick()
{
     2f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2fc:	mov	r6, r0
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     2fe:	ldrb.w	r0, [r0, #36]	; 0x24
     302:	ldr	r5, [pc, #432]	; (4b4 <EncPlex74165::tick()+0x1bc>)

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     304:	movs	r3, #50	; 0x32
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     306:	lsls	r0, r0, #4
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     308:	ldr	r4, [pc, #428]	; (4b8 <EncPlex74165::tick()+0x1c0>)
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     30a:	ldr.w	r8, [pc, #436]	; 4c0 <EncPlex74165::tick()+0x1c8>
     30e:	sub	sp, #16
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     310:	adds	r7, r5, r0
     312:	ldr	r1, [r5, r0]
static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     314:	mov	lr, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     316:	ldr	r2, [pc, #420]	; (4bc <EncPlex74165::tick()+0x1c4>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     318:	ldr	r7, [r7, #12]
     31a:	str.w	r7, [r1, #136]	; 0x88
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     31e:	ldr	r7, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     320:	ldr.w	r4, [r8]
     324:	lsrs	r4, r4, #16
     326:	mul.w	r3, r3, r4
     32a:	lsrs	r3, r3, #1
     32c:	umull	r3, r2, r2, r3
     330:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     332:	ldr.w	r3, [lr]
     336:	ldr	r4, [pc, #384]	; (4b8 <EncPlex74165::tick()+0x1c0>)
     338:	subs	r3, r3, r7
     33a:	cmp	r2, r3
     33c:	bhi.n	332 <EncPlex74165::tick()+0x3a>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     33e:	ldr	r7, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     340:	movs	r3, #50	; 0x32
     342:	ldr.w	lr, [r8]
     346:	ldr	r2, [pc, #372]	; (4bc <EncPlex74165::tick()+0x1c4>)
     348:	mov.w	lr, lr, lsr #16
     34c:	mul.w	r3, r3, lr
     350:	lsrs	r3, r3, #1
     352:	umull	r3, r2, r2, r3
     356:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     358:	ldr	r3, [r4, #0]
     35a:	ldr.w	lr, [pc, #348]	; 4b8 <EncPlex74165::tick()+0x1c0>
     35e:	subs	r3, r3, r7
     360:	cmp	r2, r3
     362:	bhi.n	358 <EncPlex74165::tick()+0x60>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     364:	ldr.w	r4, [lr]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     368:	movs	r3, #50	; 0x32
     36a:	ldr.w	r7, [r8]
     36e:	ldr	r2, [pc, #332]	; (4bc <EncPlex74165::tick()+0x1c4>)
     370:	lsrs	r7, r7, #16
     372:	mul.w	r3, r3, r7
     376:	lsrs	r3, r3, #1
     378:	umull	r3, r2, r2, r3
     37c:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     37e:	ldr.w	r3, [lr]
     382:	subs	r3, r3, r4
     384:	cmp	r2, r3
     386:	bhi.n	37e <EncPlex74165::tick()+0x86>
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     388:	ldrb	r2, [r6, #24]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     38a:	add	r0, r5
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     38c:	ldrb	r3, [r6, #28]
     38e:	lsls	r2, r2, #4
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     390:	ldr	r4, [r0, #12]
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     392:	lsls	r3, r3, #4
    delay50ns();
    delay50ns();
    digitalWriteFast(LD, HIGH);

    // first values are available directly after loading
    if (encoders[0].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
     394:	ldr	r0, [r6, #4]
     396:	adds	r7, r5, r2
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     398:	str.w	r4, [r1, #132]	; 0x84
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     39c:	ldr	r1, [r5, r2]
     39e:	adds	r2, r5, r3
     3a0:	ldr	r3, [r5, r3]
     3a2:	ldr	r1, [r1, #8]
     3a4:	ldr	r2, [r2, #12]
     3a6:	ldr	r4, [r3, #8]
     3a8:	ldr	r3, [r7, #12]
     3aa:	tst	r4, r2
     3ac:	ite	ne
     3ae:	movne	r2, #1
     3b0:	moveq	r2, #0
     3b2:	tst	r1, r3
     3b4:	ite	ne
     3b6:	movne	r1, #1
     3b8:	moveq	r1, #0
     3ba:	bl	204 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>
     3be:	cbz	r0, 3dc <EncPlex74165::tick()+0xe4>
     3c0:	ldr	r3, [r6, #16]
     3c2:	cbz	r3, 3dc <EncPlex74165::tick()+0xe4>
     3c4:	ldr	r1, [r6, #4]
     3c6:	movs	r0, #0
     3c8:	add	r2, sp, #16
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     3ca:	ldr	r3, [r6, #20]
     3cc:	ldr	r4, [r1, #0]
     3ce:	mov	r1, sp
     3d0:	str	r0, [sp, #0]
     3d2:	add.w	r0, r6, #8
     3d6:	str.w	r4, [r2, #-12]!
     3da:	blx	r3
    {
        callback(0, encoders[0].read());
    }
    for (unsigned i = 1; i < encoderCount; i++) // shift in the the rest of the encoders
     3dc:	ldr	r3, [r6, #0]
     3de:	cmp	r3, #1
     3e0:	bls.n	4ac <EncPlex74165::tick()+0x1b4>
     3e2:	mov.w	sl, #44	; 0x2c
     3e6:	movs	r7, #1
     3e8:	ldr	r0, [r6, #40]	; 0x28
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     3ea:	ldr	r4, [pc, #204]	; (4b8 <EncPlex74165::tick()+0x1c0>)
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     3ec:	ldr.w	r9, [pc, #204]	; 4bc <EncPlex74165::tick()+0x1c4>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     3f0:	uxtb	r2, r0

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     3f2:	movs	r3, #50	; 0x32
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     3f4:	lsls	r2, r2, #4
     3f6:	adds	r1, r5, r2
     3f8:	ldr	r2, [r5, r2]
     3fa:	ldr	r1, [r1, #12]
     3fc:	str.w	r1, [r2, #132]	; 0x84
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     400:	ldr	r1, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     402:	ldr.w	r2, [r8]
     406:	lsrs	r2, r2, #16
     408:	mul.w	r2, r3, r2
     40c:	lsrs	r2, r2, #1
     40e:	umull	r3, r2, r9, r2
     412:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     414:	ldr	r3, [r4, #0]
     416:	subs	r3, r3, r1
     418:	cmp	r2, r3
     41a:	bhi.n	414 <EncPlex74165::tick()+0x11c>
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     41c:	ldrb	r2, [r6, #24]
     41e:	ldrb	r3, [r6, #28]
     420:	lsls	r2, r2, #4
    {
        digitalWriteFast(CLK, HIGH);
        delay50ns();
        if (encoders[i].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
     422:	ldr	r0, [r6, #4]
     424:	lsls	r3, r3, #4
     426:	ldr	r1, [r5, r2]
     428:	add	r2, r5
     42a:	add.w	lr, r5, r3
     42e:	ldr	r3, [r5, r3]
     430:	ldr	r1, [r1, #8]
     432:	add	r0, sl
     434:	ldr.w	ip, [r3, #8]
     438:	ldr.w	lr, [lr, #12]
     43c:	ldr	r3, [r2, #12]
     43e:	tst.w	ip, lr
     442:	ite	ne
     444:	movne	r2, #1
     446:	moveq	r2, #0
     448:	tst	r1, r3
     44a:	ite	ne
     44c:	movne	r1, #1
     44e:	moveq	r1, #0
     450:	bl	204 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>
     454:	cbz	r0, 472 <EncPlex74165::tick()+0x17a>
     456:	ldr	r3, [r6, #16]
     458:	cbz	r3, 472 <EncPlex74165::tick()+0x17a>
     45a:	ldr	r0, [r6, #4]
     45c:	add	r2, sp, #16
     45e:	add	r1, sp, #8
     460:	ldr.w	r3, [r0, sl]
     464:	add.w	r0, r6, #8
     468:	str	r7, [sp, #8]
     46a:	str.w	r3, [r2, #-4]!
     46e:	ldr	r3, [r6, #20]
     470:	blx	r3
        {
            callback(i, encoders[i].read());
        }
        digitalWriteFast(CLK, LOW);
     472:	ldr	r0, [r6, #40]	; 0x28

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     474:	movs	r3, #50	; 0x32
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
     476:	uxtb	r2, r0
     478:	lsls	r2, r2, #4
     47a:	adds	r1, r5, r2
     47c:	ldr	r2, [r5, r2]
     47e:	ldr	r1, [r1, #12]
     480:	str.w	r1, [r2, #136]	; 0x88
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     484:	ldr	r1, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     486:	ldr.w	r2, [r8]
     48a:	lsrs	r2, r2, #16
     48c:	mul.w	r2, r3, r2
     490:	lsrs	r2, r2, #1
     492:	umull	r3, r2, r9, r2
     496:	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     498:	ldr	r3, [r4, #0]
     49a:	subs	r3, r3, r1
     49c:	cmp	r2, r3
     49e:	bhi.n	498 <EncPlex74165::tick()+0x1a0>
    // first values are available directly after loading
    if (encoders[0].update(digitalReadFast(A), digitalReadFast(B)) && callback != nullptr)
    {
        callback(0, encoders[0].read());
    }
    for (unsigned i = 1; i < encoderCount; i++) // shift in the the rest of the encoders
     4a0:	adds	r7, #1
     4a2:	ldr	r3, [r6, #0]
     4a4:	add.w	sl, sl, #44	; 0x2c
     4a8:	cmp	r3, r7
     4aa:	bhi.n	3f0 <EncPlex74165::tick()+0xf8>
            callback(i, encoders[i].read());
        }
        digitalWriteFast(CLK, LOW);
        delay50ns();
    }
     4ac:	add	sp, #16
     4ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4b2:	nop
     4b4:	.word	0x20000044
     4b8:	.word	0xe0001004
     4bc:	.word	0x08972311
     4c0:	.word	0x200005f0

000004c4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     4c4:	ldr	r2, [pc, #600]	; (720 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     4c6:	ldr	r3, [pc, #604]	; (724 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     4c8:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     4ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     4ce:	ldr	r4, [pc, #600]	; (728 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     4d0:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     4d4:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     4d6:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     4d8:	bls.n	514 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     4da:	ldr	r3, [pc, #592]	; (72c <set_arm_clock+0x268>)
     4dc:	cmp	r0, r3
     4de:	bls.w	70c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     4e2:	ldr	r3, [pc, #588]	; (730 <set_arm_clock+0x26c>)
     4e4:	movw	r5, #1575	; 0x627
     4e8:	ldr	r7, [pc, #584]	; (734 <set_arm_clock+0x270>)
     4ea:	add	r3, r0
     4ec:	ldr	r4, [pc, #584]	; (738 <set_arm_clock+0x274>)
     4ee:	lsrs	r2, r3, #8
     4f0:	umull	r3, r2, r7, r2
     4f4:	lsrs	r3, r2, #7
     4f6:	add.w	r3, r3, r3, lsl #2
     4fa:	add.w	r2, r3, r3, lsl #2
     4fe:	addw	r3, r2, #1250	; 0x4e2
     502:	cmp	r3, r5
     504:	it	cs
     506:	movcs	r3, r5
     508:	sub.w	r3, r3, #800	; 0x320
     50c:	umull	r3, r5, r4, r3
     510:	lsrs	r5, r5, #3
     512:	b.n	51e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     514:	ldr	r5, [pc, #548]	; (73c <set_arm_clock+0x278>)
     516:	cmp	r0, r5
     518:	ite	ls
     51a:	movls	r5, #6
     51c:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     51e:	ldr	r2, [pc, #516]	; (724 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     520:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     524:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     528:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     52a:	orr.w	r3, r3, #192	; 0xc0
     52e:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     532:	bcs.n	54a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     534:	ldr	r3, [pc, #496]	; (728 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     536:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     53a:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     53c:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     53e:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     540:	ldr	r3, [r2, #0]
     542:	cmp	r3, #0
     544:	bge.n	540 <set_arm_clock+0x7c>
     546:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     54a:	ands.w	r3, lr, #33554432	; 0x2000000
     54e:	bne.n	5b4 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     550:	ldr	r4, [pc, #492]	; (740 <set_arm_clock+0x27c>)
     552:	ldr	r2, [pc, #496]	; (744 <set_arm_clock+0x280>)
     554:	ldr.w	ip, [r4, #16]
     558:	mov	r4, r2
     55a:	and.w	r2, ip, r2
     55e:	cmp	r2, r4
     560:	itet	eq
     562:	moveq.w	r3, #402653184	; 0x18000000
     566:	movne.w	r2, #4096	; 0x1000
     56a:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     56c:	eor.w	r4, lr, r3
     570:	tst.w	r4, #939524096	; 0x38000000
     574:	beq.n	588 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     576:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     57a:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     57e:	ldr	r4, [pc, #420]	; (724 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     580:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     584:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     588:	eor.w	r3, r1, r2
     58c:	tst.w	r3, #12288	; 0x3000
     590:	beq.n	5a4 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     592:	ldr	r3, [pc, #400]	; (724 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     594:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     598:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     59a:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     59c:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     59e:	ldr	r3, [r2, #72]	; 0x48
     5a0:	lsls	r4, r3, #28
     5a2:	bmi.n	59e <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     5a4:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     5a8:	ldr	r2, [pc, #376]	; (724 <set_arm_clock+0x260>)
     5aa:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     5ae:	ldr	r3, [r2, #72]	; 0x48
     5b0:	lsls	r1, r3, #26
     5b2:	bmi.n	5ae <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     5b4:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     5b6:	ldr	r4, [pc, #400]	; (748 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     5b8:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     5ba:	mul.w	r3, r1, r2
     5be:	mul.w	r3, r0, r3
     5c2:	cmp	r3, r4
     5c4:	bhi.n	5da <set_arm_clock+0x116>
		if (div_arm < 8) {
     5c6:	cmp	r2, #7
     5c8:	bhi.w	6f6 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     5cc:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     5ce:	mul.w	r3, r1, r2
     5d2:	mul.w	r3, r0, r3
     5d6:	cmp	r3, r4
     5d8:	bls.n	5c6 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     5da:	ldr	r0, [pc, #368]	; (74c <set_arm_clock+0x288>)
     5dc:	ldr	r4, [pc, #368]	; (750 <set_arm_clock+0x28c>)
     5de:	add	r0, r3
     5e0:	umull	r0, r3, r4, r0
     5e4:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     5e6:	cmp	r3, #108	; 0x6c
     5e8:	bhi.w	702 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     5ec:	cmp	r3, #53	; 0x35
     5ee:	bhi.w	710 <set_arm_clock+0x24c>
     5f2:	ldr.w	r8, [pc, #392]	; 77c <set_arm_clock+0x2b8>
     5f6:	movs	r3, #54	; 0x36
     5f8:	ldr	r0, [pc, #344]	; (754 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     5fa:	ldr.w	ip, [pc, #324]	; 740 <set_arm_clock+0x27c>
     5fe:	ldr	r4, [pc, #344]	; (758 <set_arm_clock+0x294>)
     600:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     604:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     608:	and.w	r4, r9, r4
     60c:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     60e:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     612:	beq.n	62c <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     614:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     618:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     61c:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     61e:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     622:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     626:	ldr	r3, [r4, #0]
     628:	cmp	r3, #0
     62a:	bge.n	626 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     62c:	ldr.w	ip, [pc, #244]	; 724 <set_arm_clock+0x260>
     630:	subs	r2, #1
     632:	ldr.w	r3, [ip, #16]
     636:	and.w	r3, r3, #7
     63a:	cmp	r3, r2
     63c:	beq.n	64e <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     63e:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     642:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     644:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     648:	ldr	r3, [r4, #72]	; 0x48
     64a:	lsls	r3, r3, #15
     64c:	bmi.n	648 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     64e:	subs	r1, #1
     650:	lsls	r1, r1, #10
     652:	eor.w	r3, lr, r1
     656:	tst.w	r3, #7168	; 0x1c00
     65a:	beq.n	676 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     65c:	ldr	r3, [pc, #196]	; (724 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     65e:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     662:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     666:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     668:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     66c:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     670:	ldr	r3, [r2, #72]	; 0x48
     672:	lsls	r1, r3, #30
     674:	bmi.n	670 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     676:	ldr	r3, [pc, #228]	; (75c <set_arm_clock+0x298>)
     678:	ldr	r1, [pc, #228]	; (760 <set_arm_clock+0x29c>)
     67a:	add	r3, r0
     67c:	lsrs	r3, r3, #7
     67e:	umull	r3, r1, r1, r3
     682:	lsrs	r1, r1, #12
     684:	cmp	r1, #4
     686:	it	cs
     688:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     68a:	subs	r3, r1, #1
     68c:	lsls	r3, r3, #8
     68e:	eor.w	r2, lr, r3
     692:	tst.w	r2, #768	; 0x300
     696:	beq.n	6a8 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     698:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     69c:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     6a0:	ldr	r2, [pc, #128]	; (724 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     6a2:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     6a6:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     6a8:	ldr	r3, [pc, #120]	; (724 <set_arm_clock+0x260>)
     6aa:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     6ac:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     6ae:	bic.w	r4, r4, #33554432	; 0x2000000
     6b2:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     6b4:	ldr	r3, [r2, #72]	; 0x48
     6b6:	lsls	r3, r3, #26
     6b8:	bmi.n	6b4 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     6ba:	ldr	r3, [pc, #168]	; (764 <set_arm_clock+0x2a0>)
     6bc:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     6c0:	ldr	r4, [pc, #164]	; (768 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     6c2:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     6c4:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     6c8:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     6ca:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     6ce:	ldr	r4, [pc, #156]	; (76c <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     6d0:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     6d4:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     6d8:	ldr	r2, [pc, #148]	; (770 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     6da:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     6dc:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     6de:	bcs.n	6f2 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     6e0:	ldr	r3, [pc, #68]	; (728 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     6e2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     6e6:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     6e8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     6ea:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     6ec:	ldr	r3, [r2, #0]
     6ee:	cmp	r3, #0
     6f0:	bge.n	6ec <set_arm_clock+0x228>
	}

	return frequency;
}
     6f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     6f6:	cmp	r1, #4
     6f8:	bhi.w	5da <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     6fc:	adds	r1, #1
				div_arm = 1;
     6fe:	movs	r2, #1
     700:	b.n	5ba <set_arm_clock+0xf6>
     702:	ldr.w	r8, [pc, #124]	; 780 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     706:	movs	r3, #108	; 0x6c
     708:	ldr	r0, [pc, #104]	; (774 <set_arm_clock+0x2b0>)
     70a:	b.n	5fa <set_arm_clock+0x136>
     70c:	movs	r5, #18
     70e:	b.n	51e <set_arm_clock+0x5a>
     710:	ldr	r0, [pc, #100]	; (778 <set_arm_clock+0x2b4>)
     712:	ldr.w	r8, [pc, #112]	; 784 <set_arm_clock+0x2c0>
     716:	mul.w	r0, r0, r3
     71a:	orr.w	r8, r3, r8
     71e:	b.n	5fa <set_arm_clock+0x136>
     720:	.word	0x1f78a400
     724:	.word	0x400fc000
     728:	.word	0x40080000
     72c:	.word	0x23c34600
     730:	.word	0xdc3cba00
     734:	.word	0x004cb223
     738:	.word	0x51eb851f
     73c:	.word	0x016e3600
     740:	.word	0x400d8000
     744:	.word	0x80003040
     748:	.word	0x269fb1ff
     74c:	.word	0x005b8d80
     750:	.word	0x165e9f81
     754:	.word	0x269fb200
     758:	.word	0x8001307f
     75c:	.word	0x08f0d17f
     760:	.word	0x00e5109f
     764:	.word	0x431bde83
     768:	.word	0x200005f0
     76c:	.word	0x200005ec
     770:	.word	0x20001030
     774:	.word	0x4d3f6400
     778:	.word	0x00b71b00
     77c:	.word	0x80002036
     780:	.word	0x8000206c
     784:	.word	0x80002000

00000788 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     788:	cmp	r0, #0
     78a:	beq.n	83c <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     78c:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     78e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     792:	sub	sp, #20
     794:	mov	fp, r0
     796:	ldr	r4, [pc, #168]	; (840 <delay+0xb8>)
     798:	ldr	r5, [pc, #168]	; (844 <delay+0xbc>)
     79a:	ldr	r6, [pc, #172]	; (848 <delay+0xc0>)
     79c:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     7a0:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     7a4:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     7a6:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     7a8:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     7ac:	cmp	r1, #0
     7ae:	bne.n	7a0 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     7b0:	ldr	r7, [pc, #152]	; (84c <delay+0xc4>)
     7b2:	strd	r8, r9, [sp, #8]
     7b6:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     7b8:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7ba:	ldr	r2, [pc, #148]	; (850 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     7bc:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     7c0:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7c2:	ldr	r2, [r2, #0]
     7c4:	movs	r7, #1
     7c6:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     7ca:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7ce:	mov	r8, r3
	if (frac > 1000) frac = 1000;
     7d0:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7d2:	cmp	r3, r1
     7d4:	it	eq
     7d6:	cmpeq	r2, r8
     7d8:	ite	cs
     7da:	movcs	sl, r8
     7dc:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     7de:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     7e2:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     7e6:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     7e8:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     7ea:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     7ee:	cmp	r3, #0
     7f0:	bne.n	7e2 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     7f2:	ldr	r0, [sp, #4]
     7f4:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     7f6:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7f8:	ldr	r0, [pc, #84]	; (850 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     7fa:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7fe:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     800:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     804:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     808:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     80c:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     810:	mov	r8, r1
	if (frac > 1000) frac = 1000;
     812:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     814:	cmp	r1, r3
     816:	it	eq
     818:	cmpeq	r0, r8
     81a:	ite	cs
     81c:	movcs	r3, r8
     81e:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     820:	add	r2, r3
     822:	cmp	r2, lr
     824:	bcc.n	836 <delay+0xae>
			if (--msec == 0) return;
     826:	subs.w	fp, fp, #1
			start += 1000;
     82a:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     82e:	bne.n	7e2 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     830:	add	sp, #20
     832:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     836:	bl	8e4 <yield>
	}
     83a:	b.n	7e2 <delay+0x5a>
     83c:	bx	lr
     83e:	nop
     840:	.word	0x200012e0
     844:	.word	0x20001034
     848:	.word	0x2000102c
     84c:	.word	0xe0001004
     850:	.word	0x20001030

00000854 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     854:	cmp	r0, #39	; 0x27
     856:	bhi.n	892 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     858:	lsls	r0, r0, #4
     85a:	ldr	r2, [pc, #104]	; (8c4 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     85c:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     85e:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     862:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     864:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     866:	beq.n	894 <pinMode+0x40>
     868:	cmp	r1, #4
     86a:	beq.n	894 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     86c:	ldr	r4, [r3, #12]
     86e:	ldr	r2, [r0, #4]
     870:	bic.w	r2, r2, r4
     874:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     876:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     878:	cbz	r1, 8b6 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     87a:	cmp	r1, #2
     87c:	beq.n	8bc <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     87e:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     880:	ldr	r3, [r3, #4]
}
     882:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     886:	ite	eq
     888:	ldreq	r1, [pc, #60]	; (8c8 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     88a:	ldrne	r1, [pc, #64]	; (8cc <pinMode+0x78>)
     88c:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     88e:	movs	r2, #21
     890:	str	r2, [r3, #0]
}
     892:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     894:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     896:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     898:	ldr	r4, [r0, #4]
     89a:	orr.w	r2, r2, r4
     89e:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     8a0:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     8a2:	beq.n	8b6 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     8a4:	movw	r1, #2104	; 0x838
     8a8:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     8aa:	ldr	r3, [r3, #4]
     8ac:	movs	r2, #21
}
     8ae:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     8b2:	str	r2, [r3, #0]
}
     8b4:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     8b6:	movs	r1, #56	; 0x38
     8b8:	str	r1, [r2, #0]
     8ba:	b.n	8aa <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     8bc:	ldr	r1, [pc, #16]	; (8d0 <pinMode+0x7c>)
     8be:	str	r1, [r2, #0]
     8c0:	b.n	8aa <pinMode+0x56>
     8c2:	nop
     8c4:	.word	0x20000044
     8c8:	.word	0x00013038
     8cc:	.word	0x00010038
     8d0:	.word	0x0001f038

000008d4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     8d4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     8d6:	bl	94 <setup>
	while (1) {
		loop();
     8da:	bl	98 <loop>
		yield();
     8de:	bl	8e4 <yield>
     8e2:	b.n	8da <main+0x6>

000008e4 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
     8e4:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
     8e6:	ldr	r4, [pc, #132]	; (96c <yield+0x88>)
     8e8:	ldrb	r3, [r4, #0]
     8ea:	cbnz	r3, 90e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     8ec:	ldr	r3, [pc, #128]	; (970 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     8ee:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     8f0:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     8f2:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     8f4:	cbnz	r3, 93e <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     8f6:	ldr	r3, [pc, #124]	; (974 <yield+0x90>)
     8f8:	ldrb	r3, [r3, #0]
     8fa:	cmp	r3, #0
     8fc:	bne.n	952 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
     8fe:	ldr	r3, [pc, #120]	; (978 <yield+0x94>)

	running = 0;
     900:	movs	r1, #0
     902:	ldr	r2, [r3, #0]
     904:	strb	r1, [r4, #0]
     906:	cbz	r2, 90e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     908:	mrs	r2, IPSR
		if (ipsr != 0) return;
     90c:	cbz	r2, 910 <yield+0x2c>
     90e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     910:	mrs	r0, PRIMASK
		__disable_irq();
     914:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
     916:	ldr	r2, [r3, #0]
		if (first == nullptr) {
     918:	cbz	r2, 958 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
     91a:	ldr	r4, [pc, #96]	; (97c <yield+0x98>)
     91c:	ldrb	r1, [r4, #0]
     91e:	cbnz	r1, 958 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     920:	movs	r6, #1
		firstYield = first->_next;
     922:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     924:	strb	r6, [r4, #0]
		firstYield = first->_next;
     926:	str	r5, [r3, #0]
		if (firstYield) {
     928:	cbz	r5, 960 <yield+0x7c>
			firstYield->_prev = nullptr;
     92a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     92c:	cbnz	r0, 930 <yield+0x4c>
     92e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     930:	movs	r5, #0
		(*(first->_function))(*first);
     932:	ldr	r3, [r2, #8]
     934:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     936:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
     938:	blx	r3
		runningFromYield = false;
     93a:	strb	r5, [r4, #0]
     93c:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     93e:	bl	125c <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     942:	cmp	r0, #0
     944:	beq.n	8f6 <yield+0x12>
     946:	bl	bb0 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     94a:	ldr	r3, [pc, #40]	; (974 <yield+0x90>)
     94c:	ldrb	r3, [r3, #0]
     94e:	cmp	r3, #0
     950:	beq.n	8fe <yield+0x1a>
     952:	bl	2058 <HardwareSerial::processSerialEvents()>
     956:	b.n	8fe <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     958:	cmp	r0, #0
     95a:	bne.n	90e <yield+0x2a>
     95c:	cpsie	i
     95e:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
     960:	ldr	r3, [pc, #28]	; (980 <yield+0x9c>)
     962:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     964:	cmp	r0, #0
     966:	bne.n	930 <yield+0x4c>
     968:	b.n	92e <yield+0x4a>
     96a:	nop
     96c:	.word	0x20001038
     970:	.word	0x200005f4
     974:	.word	0x200012a8
     978:	.word	0x2000104c
     97c:	.word	0x20001050
     980:	.word	0x20001048

00000984 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
     984:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     986:	mrs	r2, PRIMASK
		__disable_irq();
     98a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
     98c:	ldrb	r3, [r0, #29]
     98e:	cbnz	r3, 99e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
     990:	ldrb	r1, [r0, #28]
     992:	cmp	r1, #1
     994:	beq.n	9a8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
     996:	cmp	r1, #3
     998:	beq.n	9bc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
     99a:	movs	r3, #1
     99c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     99e:	cbnz	r2, 9a2 <EventResponder::triggerEventNotImmediate()+0x1e>
     9a0:	cpsie	i
	}
	enableInterrupts(irq);
}
     9a2:	ldr.w	r4, [sp], #4
     9a6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
     9a8:	ldr	r4, [pc, #68]	; (9f0 <EventResponder::triggerEventNotImmediate()+0x6c>)
     9aa:	ldr	r1, [r4, #0]
     9ac:	cbz	r1, 9d8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     9ae:	ldr	r1, [pc, #68]	; (9f4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
     9b0:	str	r3, [r0, #20]
				_prev = lastYield;
     9b2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
     9b4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     9b6:	str	r3, [r0, #24]
				_prev->_next = this;
     9b8:	str	r0, [r3, #20]
     9ba:	b.n	99a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
     9bc:	ldr	r4, [pc, #56]	; (9f8 <EventResponder::triggerEventNotImmediate()+0x74>)
     9be:	ldr	r1, [r4, #0]
     9c0:	cbz	r1, 9e4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     9c2:	ldr	r1, [pc, #56]	; (9fc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
     9c4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
     9c6:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
     9c8:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     9ca:	str	r3, [r0, #24]
				_prev->_next = this;
     9cc:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
     9ce:	ldr	r3, [pc, #48]	; (a00 <EventResponder::triggerEventNotImmediate()+0x7c>)
     9d0:	mov.w	r1, #268435456	; 0x10000000
     9d4:	str	r1, [r3, #0]
     9d6:	b.n	99a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
     9d8:	ldr	r3, [pc, #24]	; (9f4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
     9da:	str	r1, [r0, #20]
				_prev = nullptr;
     9dc:	str	r1, [r0, #24]
				firstYield = this;
     9de:	str	r0, [r4, #0]
				lastYield = this;
     9e0:	str	r0, [r3, #0]
     9e2:	b.n	99a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
     9e4:	ldr	r3, [pc, #20]	; (9fc <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
     9e6:	str	r1, [r0, #20]
				_prev = nullptr;
     9e8:	str	r1, [r0, #24]
				firstInterrupt = this;
     9ea:	str	r0, [r4, #0]
				lastInterrupt = this;
     9ec:	str	r0, [r3, #0]
     9ee:	b.n	9ce <EventResponder::triggerEventNotImmediate()+0x4a>
     9f0:	.word	0x2000104c
     9f4:	.word	0x20001048
     9f8:	.word	0x2000103c
     9fc:	.word	0x20001040
     a00:	.word	0xe000ed04

00000a04 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
     a04:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     a06:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     a08:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     a0a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     a0c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     a0e:	beq.n	a18 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
     a10:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     a14:	b.w	984 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     a18:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
     a1a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     a1e:	bx	r3

00000a20 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
     a20:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     a22:	mrs	r1, PRIMASK
		__disable_irq();
     a26:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     a28:	ldr	r4, [pc, #48]	; (a5c <EventResponder::runFromInterrupt()+0x3c>)
     a2a:	ldr	r3, [r4, #0]
		if (first) {
     a2c:	cbz	r3, a52 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     a2e:	ldr	r6, [pc, #48]	; (a60 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
     a30:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
     a32:	ldr	r2, [r3, #20]
     a34:	str	r2, [r4, #0]
			if (firstInterrupt) {
     a36:	cbz	r2, a58 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
     a38:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     a3a:	cbnz	r1, a3e <EventResponder::runFromInterrupt()+0x1e>
     a3c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
     a3e:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
     a40:	mov	r0, r3
     a42:	ldr	r3, [r3, #8]
     a44:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     a46:	mrs	r1, PRIMASK
		__disable_irq();
     a4a:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     a4c:	ldr	r3, [r4, #0]
		if (first) {
     a4e:	cmp	r3, #0
     a50:	bne.n	a32 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     a52:	cbnz	r1, a56 <EventResponder::runFromInterrupt()+0x36>
     a54:	cpsie	i
     a56:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     a58:	str	r2, [r6, #0]
     a5a:	b.n	a3a <EventResponder::runFromInterrupt()+0x1a>
     a5c:	.word	0x2000103c
     a60:	.word	0x20001040

00000a64 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
     a64:	b.w	a20 <EventResponder::runFromInterrupt()>

00000a68 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
     a68:	ldr	r2, [pc, #96]	; (acc <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
     a6a:	push	{r4, r5}
	if (listActive == nullptr) {
     a6c:	ldr	r4, [r2, #0]
     a6e:	cmp	r4, #0
     a70:	beq.n	ac4 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
     a72:	ldr	r3, [r0, #0]
     a74:	ldr	r1, [r4, #0]
     a76:	cmp	r3, r1
     a78:	bcs.n	a9a <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     a7a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
     a7c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
     a7e:	str	r4, [r0, #8]
		_prev = nullptr;
     a80:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     a82:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
     a84:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
     a86:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     a88:	movs	r3, #2
}
     a8a:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     a8c:	strb	r3, [r0, #20]
}
     a8e:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
     a90:	str	r3, [r0, #0]
     a92:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
     a94:	ldr	r1, [r2, #0]
     a96:	cmp	r3, r1
     a98:	bcc.n	aac <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     a9a:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     a9c:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     a9e:	cmp	r2, #0
     aa0:	bne.n	a90 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
     aa2:	str	r2, [r0, #8]
		_prev = timer;
     aa4:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     aa6:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
     aa8:	str	r0, [r4, #8]
     aaa:	b.n	a88 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     aac:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
     aae:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
     ab0:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
     ab2:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     ab4:	str	r5, [r0, #12]
				timer->_prev = this;
     ab6:	str	r0, [r4, #12]
				_prev->_next = this;
     ab8:	ldr	r1, [r0, #12]
     aba:	str	r0, [r1, #8]
				timer->_ms -= _ms;
     abc:	str	r3, [r4, #0]
				_state = TimerActive;
     abe:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
     ac0:	pop	{r4, r5}
     ac2:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
     ac4:	str	r4, [r0, #8]
		_prev = nullptr;
     ac6:	str	r4, [r0, #12]
		listActive = this;
     ac8:	str	r0, [r2, #0]
     aca:	b.n	a88 <MillisTimer::addToActiveList()+0x20>
     acc:	.word	0x20001044

00000ad0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
     ad0:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
     ad2:	ldr	r6, [pc, #136]	; (b5c <MillisTimer::runFromTimer()+0x8c>)
     ad4:	ldr	r4, [r6, #0]
	while (timer) {
     ad6:	cbz	r4, b24 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     ad8:	ldr	r3, [r4, #0]
     ada:	cmp	r3, #0
     adc:	bne.n	b54 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
     ade:	mov	r5, r3
     ae0:	ldr	r7, [pc, #124]	; (b60 <MillisTimer::runFromTimer()+0x90>)
     ae2:	b.n	aee <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
     ae4:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     ae6:	cbz	r4, b24 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     ae8:	ldr	r3, [r4, #0]
     aea:	cmp	r3, #0
     aec:	bne.n	b54 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
     aee:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
     af0:	cbz	r3, af4 <MillisTimer::runFromTimer()+0x24>
     af2:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
     af4:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
     af6:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     af8:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
     afa:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     afc:	ldr	r3, [r3, #0]
     afe:	cmp	r3, r7
     b00:	bne.n	b46 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     b02:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     b04:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     b06:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     b08:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
     b0a:	beq.n	b4e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     b0c:	bl	984 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
     b10:	ldr	r3, [r4, #4]
     b12:	cmp	r3, #0
     b14:	beq.n	ae4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
     b16:	str	r3, [r4, #0]
				timer->addToActiveList();
     b18:	mov	r0, r4
     b1a:	bl	a68 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
     b1e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     b20:	cmp	r4, #0
     b22:	bne.n	ae8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     b24:	mrs	r3, PRIMASK
		__disable_irq();
     b28:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     b2a:	ldr	r2, [pc, #56]	; (b64 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     b2c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     b2e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     b30:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
     b32:	cbnz	r3, b36 <MillisTimer::runFromTimer()+0x66>
     b34:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
     b36:	cbz	r0, b44 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
     b38:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
     b3a:	bl	a68 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
     b3e:	mov	r0, r4
     b40:	cmp	r0, #0
     b42:	bne.n	b38 <MillisTimer::runFromTimer()+0x68>
     b44:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     b46:	mov	r2, r4
     b48:	movs	r1, #0
     b4a:	blx	r3
     b4c:	b.n	b10 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     b4e:	ldr	r3, [r0, #8]
     b50:	blx	r3
     b52:	b.n	b10 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
     b54:	subs	r3, #1
     b56:	str	r3, [r4, #0]
			break;
     b58:	b.n	b24 <MillisTimer::runFromTimer()+0x54>
     b5a:	nop
     b5c:	.word	0x20001044
     b60:	.word	0x00000a05
     b64:	.word	0x20001054

00000b68 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     b68:	ldr	r2, [pc, #16]	; (b7c <systick_isr+0x14>)
     b6a:	ldr	r3, [pc, #20]	; (b80 <systick_isr+0x18>)
     b6c:	ldr	r1, [r2, #0]
	systick_millis_count++;
     b6e:	ldr	r2, [pc, #20]	; (b84 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     b70:	str	r1, [r3, #0]
	systick_millis_count++;
     b72:	ldr	r3, [r2, #0]
     b74:	adds	r3, #1
     b76:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
     b78:	b.w	ad0 <MillisTimer::runFromTimer()>
     b7c:	.word	0xe0001004
     b80:	.word	0x2000102c
     b84:	.word	0x20001034

00000b88 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
     b88:	b.w	1268 <usb_serial_flush_input>

00000b8c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     b8c:	b.w	1218 <usb_serial_peekchar>

00000b90 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     b90:	b.w	12dc <usb_serial_getchar>

00000b94 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     b94:	b.w	125c <usb_serial_available>

00000b98 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     b98:	b.w	138c <usb_serial_flush_output>

00000b9c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
     b9c:	b.w	1340 <usb_serial_write_buffer_free>

00000ba0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     ba0:	mov	r0, r1
     ba2:	mov	r1, r2
     ba4:	b.w	1328 <usb_serial_write>

00000ba8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     ba8:	mov	r0, r1
     baa:	b.w	12fc <usb_serial_putchar>
     bae:	nop

00000bb0 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
     bb0:	ldr	r3, [pc, #4]	; (bb8 <serialEvent()+0x8>)
     bb2:	movs	r2, #0
     bb4:	strb	r2, [r3, #0]
     bb6:	bx	lr
     bb8:	.word	0x200005f4

00000bbc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     bbc:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
     bbe:	ldr	r4, [pc, #24]	; (bd8 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     bc0:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
     bc2:	ldr	r3, [r0, #0]
     bc4:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     bc6:	ldrh	r4, [r4, #0]
	return write(buf, 2);
     bc8:	add	r1, sp, #4
     bca:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     bcc:	strh.w	r4, [sp, #4]
	return write(buf, 2);
     bd0:	blx	r3
}
     bd2:	add	sp, #8
     bd4:	pop	{r4, pc}
     bd6:	nop
     bd8:	.word	0x200002ec

00000bdc <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
     bdc:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
     bde:	push	{r4, lr}
     be0:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
     be2:	ldr	r3, [r3, #4]
     be4:	blx	r3
	return len;
}
     be6:	mov	r0, r4
     be8:	pop	{r4, pc}
     bea:	nop

00000bec <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
     bec:	push	{r1, r2, r3}
     bee:	push	{lr}
     bf0:	sub	sp, #8
     bf2:	add	r3, sp, #12
     bf4:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
     bf8:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
     bfa:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
     bfc:	bl	2ee8 <vdprintf>
#endif
}
     c00:	add	sp, #8
     c02:	ldr.w	lr, [sp], #4
     c06:	add	sp, #12
     c08:	bx	lr
     c0a:	nop

00000c0c <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
     c0c:	b.w	2278 <malloc>

00000c10 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     c10:	movs	r0, #4
     c12:	mov	r1, lr
     c14:	tst	r0, r1
     c16:	beq.n	c20 <_MSP>
     c18:	mrs	r0, PSP
     c1c:	b.w	c30 <HardFault_HandlerC>

00000c20 <_MSP>:
     c20:	mrs	r0, MSP
     c24:	b.w	c30 <HardFault_HandlerC>

00000c28 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     c28:	bx	lr
     c2a:	nop

00000c2c <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     c2c:	bx	lr
     c2e:	nop

00000c30 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     c30:	ldr	r3, [pc, #108]	; (ca0 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     c32:	movs	r1, #5
     c34:	ldr	r2, [pc, #108]	; (ca4 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     c36:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     c38:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     c3a:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     c3e:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     c40:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     c44:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     c46:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     c48:	ldr	r4, [pc, #92]	; (ca8 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     c4a:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     c4c:	ldr	r0, [pc, #92]	; (cac <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     c4e:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     c50:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     c54:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     c58:	ldr	r3, [r4, #0]
     c5a:	cmp	r3, r0
     c5c:	bls.n	c64 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     c5e:	ldr	r0, [pc, #80]	; (cb0 <HardFault_HandlerC+0x80>)
     c60:	bl	4c4 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     c64:	ldr	r5, [pc, #56]	; (ca0 <HardFault_HandlerC+0x70>)
     c66:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     c68:	movs	r0, #0
     c6a:	ldr	r2, [pc, #72]	; (cb4 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     c6c:	ldr	r1, [pc, #72]	; (cb8 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     c6e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     c72:	str	r0, [sp, #4]
     c74:	ldr	r3, [sp, #4]
     c76:	cmp	r3, r2
     c78:	bhi.n	c86 <HardFault_HandlerC+0x56>
     c7a:	ldr	r3, [sp, #4]
     c7c:	adds	r3, #1
     c7e:	str	r3, [sp, #4]
     c80:	ldr	r3, [sp, #4]
     c82:	cmp	r3, r2
     c84:	bls.n	c7a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     c86:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     c8a:	str	r0, [sp, #4]
     c8c:	ldr	r3, [sp, #4]
     c8e:	cmp	r3, r1
     c90:	bhi.n	c6e <HardFault_HandlerC+0x3e>
     c92:	ldr	r3, [sp, #4]
     c94:	adds	r3, #1
     c96:	str	r3, [sp, #4]
     c98:	ldr	r3, [sp, #4]
     c9a:	cmp	r3, r1
     c9c:	bls.n	c92 <HardFault_HandlerC+0x62>
     c9e:	b.n	c6e <HardFault_HandlerC+0x3e>
     ca0:	.word	0x401bc000
     ca4:	.word	0x401f8000
     ca8:	.word	0x200005f0
     cac:	.word	0x23c345ff
     cb0:	.word	0x11e1a300
     cb4:	.word	0x000f423f
     cb8:	.word	0x0089543f

00000cbc <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
     cbc:	ldr	r2, [pc, #36]	; (ce4 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
     cbe:	push	{r3, lr}
        char *prev = __brkval;
     cc0:	ldr	r3, [r2, #0]
        if (incr != 0) {
     cc2:	cbz	r0, cce <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
     cc4:	add	r0, r3
     cc6:	ldr	r1, [pc, #32]	; (ce8 <_sbrk+0x2c>)
     cc8:	cmp	r0, r1
     cca:	bhi.n	cd2 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
     ccc:	str	r0, [r2, #0]
        }
        return prev;
}
     cce:	mov	r0, r3
     cd0:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     cd2:	bl	221c <__errno>
     cd6:	movs	r2, #12
                        return (void *)-1;
     cd8:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     cdc:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
     cde:	mov	r0, r3
     ce0:	pop	{r3, pc}
     ce2:	nop
     ce4:	.word	0x20000608
     ce8:	.word	0x20280000

00000cec <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     cec:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     cee:	ldr	r1, [pc, #80]	; (d40 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     cf0:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     cf4:	ldr	r5, [pc, #76]	; (d44 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     cf6:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     cf8:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     cfc:	ldr	r6, [pc, #72]	; (d48 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     cfe:	ldr	r2, [pc, #76]	; (d4c <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     d00:	add.w	r5, r5, r0, lsl #5
     d04:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     d06:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     d08:	mov	r0, r5
     d0a:	ldrh	r2, [r6, #0]
     d0c:	bl	1cc8 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     d10:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     d12:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     d16:	add	r1, r4
	asm("dsb");
     d18:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     d1c:	ldr	r2, [pc, #48]	; (d50 <rx_queue_transfer+0x64>)
     d1e:	str	r3, [r2, #0]
		location += 32;
     d20:	adds	r3, #32
	} while (location < end_addr);
     d22:	cmp	r1, r3
     d24:	bhi.n	d1e <rx_queue_transfer+0x32>
	asm("dsb");
     d26:	dsb	sy
	asm("isb");
     d2a:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     d2e:	movs	r0, #3
     d30:	mov	r1, r5
     d32:	bl	1d20 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     d36:	ldr	r3, [pc, #28]	; (d54 <rx_queue_transfer+0x68>)
     d38:	mov.w	r2, #131072	; 0x20000
     d3c:	str	r2, [r3, #0]
     d3e:	pop	{r3, r4, r5, r6, r7, pc}
     d40:	.word	0x20200000
     d44:	.word	0x20001080
     d48:	.word	0x2000118e
     d4c:	.word	0xe000e18c
     d50:	.word	0xe000ef5c
     d54:	.word	0xe000e10c

00000d58 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     d58:	ldr	r2, [pc, #144]	; (dec <rx_event+0x94>)
     d5a:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     d5c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     d60:	ubfx	r3, r3, #16, #15
     d64:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     d66:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     d68:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     d6a:	cmp	r4, #0
     d6c:	ble.n	de0 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     d6e:	ldr	r1, [pc, #128]	; (df0 <rx_event+0x98>)
		if (head != rx_tail) {
     d70:	ldr	r2, [pc, #128]	; (df4 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     d72:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     d74:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     d76:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     d78:	ldr	r0, [pc, #124]	; (df8 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     d7a:	ldr	r6, [pc, #128]	; (dfc <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     d7c:	cmp	r3, r2
     d7e:	beq.n	d90 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     d80:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     d84:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     d88:	rsb	r2, r7, #512	; 0x200
     d8c:	cmp	r4, r2
     d8e:	bls.n	db6 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     d90:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     d92:	movs	r2, #0
     d94:	ldr	r7, [pc, #104]	; (e00 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     d96:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     d98:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     d9c:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     da0:	ldr	r6, [pc, #96]	; (e04 <rx_event+0xac>)
     da2:	ite	ls
     da4:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     da6:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     da8:	strb	r2, [r1, #0]
		rx_available += len;
     daa:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     dac:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     dae:	add	r4, r2
     db0:	str	r4, [r6, #0]
     db2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     db6:	ldr	r3, [pc, #80]	; (e08 <rx_event+0xb0>)
     db8:	add.w	r0, r7, r8, lsl #9
     dbc:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     dbe:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     dc0:	add.w	r1, r3, r5, lsl #9
     dc4:	add	r0, r3
     dc6:	bl	2080 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     dca:	ldr	r2, [pc, #56]	; (e04 <rx_event+0xac>)
				rx_queue_transfer(i);
     dcc:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     dce:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     dd2:	ldr	r3, [r2, #0]
     dd4:	add	r4, r3
     dd6:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     dd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     ddc:	b.w	cec <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     de0:	mov	r0, r5
	}
}
     de2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     de6:	b.w	cec <rx_queue_transfer>
     dea:	nop
     dec:	.word	0x2000118e
     df0:	.word	0x200011a4
     df4:	.word	0x20001180
     df8:	.word	0x20001184
     dfc:	.word	0x20001190
     e00:	.word	0x20001058
     e04:	.word	0x200011a0
     e08:	.word	0x20200000

00000e0c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     e0c:	ldr	r3, [pc, #120]	; (e88 <usb_serial_flush_callback+0x7c>)
     e0e:	ldrb	r2, [r3, #0]
     e10:	cbnz	r2, e2a <usb_serial_flush_callback+0x1e>
     e12:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     e16:	ldr	r2, [pc, #116]	; (e8c <usb_serial_flush_callback+0x80>)
     e18:	ldrb	r2, [r2, #0]
     e1a:	cbz	r2, e2a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     e1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     e20:	ldr	r5, [pc, #108]	; (e90 <usb_serial_flush_callback+0x84>)
     e22:	ldrh	r2, [r5, #0]
     e24:	cbnz	r2, e2c <usb_serial_flush_callback+0x20>
     e26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e2a:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     e2c:	ldr	r6, [pc, #100]	; (e94 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     e2e:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     e32:	ldr	r7, [pc, #100]	; (e98 <usb_serial_flush_callback+0x8c>)
     e34:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     e36:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     e38:	ldr	r4, [pc, #96]	; (e9c <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     e3a:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     e3e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     e42:	mov	r0, r7
     e44:	mov	r1, r4
     e46:	bl	1cc8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     e4a:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     e4e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     e52:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     e56:	ldr	r3, [pc, #72]	; (ea0 <usb_serial_flush_callback+0x94>)
     e58:	str	r1, [r3, #0]
		location += 32;
     e5a:	adds	r1, #32
	} while (location < end_addr);
     e5c:	cmp	r2, r1
     e5e:	bhi.n	e58 <usb_serial_flush_callback+0x4c>
	asm("dsb");
     e60:	dsb	sy
	asm("isb");
     e64:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     e68:	movs	r0, #4
     e6a:	mov	r1, r7
     e6c:	bl	1cf8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     e70:	ldrb	r3, [r6, #0]
     e72:	ldr	r2, [pc, #32]	; (e94 <usb_serial_flush_callback+0x88>)
     e74:	adds	r3, #1
     e76:	uxtb	r3, r3
     e78:	cmp	r3, #3
     e7a:	it	hi
     e7c:	movhi	r3, #0
     e7e:	strb	r3, [r2, #0]
	tx_available = 0;
     e80:	movs	r3, #0
     e82:	strh	r3, [r5, #0]
     e84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e88:	.word	0x2000106a
     e8c:	.word	0x20001278
     e90:	.word	0x200011a6
     e94:	.word	0x2000106b
     e98:	.word	0x200011c0
     e9c:	.word	0x20201000
     ea0:	.word	0xe000ef70

00000ea4 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     ea4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ea8:	sub	sp, #20
     eaa:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     eac:	str	r1, [sp, #4]
     eae:	cmp	r1, #0
     eb0:	beq.w	ff8 <usb_serial_write.part.1+0x154>
     eb4:	movs	r3, #0
     eb6:	ldr.w	r8, [pc, #348]	; 1014 <usb_serial_write.part.1+0x170>
     eba:	ldr.w	r9, [pc, #332]	; 1008 <usb_serial_write.part.1+0x164>
     ebe:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     ec0:	ldr	r6, [pc, #312]	; (ffc <usb_serial_write.part.1+0x158>)
     ec2:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     ec6:	ldr.w	sl, [pc, #336]	; 1018 <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     eca:	ldr.w	fp, [pc, #336]	; 101c <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     ece:	ldr	r2, [pc, #304]	; (1000 <usb_serial_write.part.1+0x15c>)
     ed0:	ldrb	r4, [r2, #0]
     ed2:	ldr	r2, [pc, #304]	; (1004 <usb_serial_write.part.1+0x160>)
     ed4:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     ed8:	cmp	r3, #0
     eda:	bne.n	fba <usb_serial_write.part.1+0x116>
     edc:	mov	r5, r3
     ede:	mov	r4, r3
     ee0:	b.n	f0c <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     ee2:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     ee6:	cbnz	r4, eea <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     ee8:	ldr	r5, [r6, #0]
     eea:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     eec:	cmp	r3, #0
     eee:	bne.n	fae <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     ef0:	ldr	r3, [r6, #0]
     ef2:	subs	r3, r3, r5
     ef4:	cmp	r3, #120	; 0x78
     ef6:	bhi.n	fec <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     ef8:	ldrb.w	r3, [sl]
     efc:	cmp	r3, #0
     efe:	beq.n	fae <usb_serial_write.part.1+0x10a>
			yield();
     f00:	bl	8e4 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     f04:	ldrh.w	r3, [r8]
     f08:	cmp	r3, #0
     f0a:	bne.n	fb6 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     f0c:	mov	r0, r7
     f0e:	bl	1d44 <usb_transfer_status>
			if (!(status & 0x80)) {
     f12:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     f16:	ldr	r2, [pc, #240]	; (1008 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     f18:	bne.n	ee2 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     f1a:	mov.w	r3, #2048	; 0x800
     f1e:	ldr	r2, [pc, #224]	; (1000 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     f20:	strb.w	r0, [r9]
     f24:	ldrb	r4, [r2, #0]
     f26:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     f28:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     f2c:	lsls	r4, r4, #11
		if (size >= tx_available) {
     f2e:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     f30:	ldr	r1, [pc, #216]	; (100c <usb_serial_write.part.1+0x168>)
     f32:	add	r0, r4
		if (size >= tx_available) {
     f34:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     f36:	add	r0, r1
		if (size >= tx_available) {
     f38:	bcc.n	fc2 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     f3a:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     f3c:	ldr	r1, [sp, #8]
     f3e:	bl	2080 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     f42:	movs	r3, #0
     f44:	mov	r1, r4
     f46:	mov.w	r2, #2048	; 0x800
     f4a:	mov	r0, r7
     f4c:	bl	1cc8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     f50:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     f54:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     f58:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     f5c:	str.w	r3, [fp]
		location += 32;
     f60:	adds	r3, #32
	} while (location < end_addr);
     f62:	cmp	r4, r3
     f64:	bhi.n	f5c <usb_serial_write.part.1+0xb8>
	asm("dsb");
     f66:	dsb	sy
	asm("isb");
     f6a:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     f6e:	movs	r0, #4
     f70:	mov	r1, r7
     f72:	bl	1cf8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     f76:	ldr	r3, [pc, #136]	; (1000 <usb_serial_write.part.1+0x15c>)
     f78:	ldr	r2, [pc, #132]	; (1000 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     f7a:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     f7c:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     f7e:	ldr	r0, [pc, #144]	; (1010 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     f80:	adds	r3, #1
     f82:	uxtb	r3, r3
     f84:	cmp	r3, #3
     f86:	it	hi
     f88:	movhi	r3, #0
     f8a:	strb	r3, [r2, #0]
			size -= tx_available;
     f8c:	ldrh.w	r2, [r8]
			sent += tx_available;
     f90:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     f92:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     f96:	add	r3, r2
     f98:	str	r3, [sp, #0]
			data += tx_available;
     f9a:	ldr	r3, [sp, #8]
     f9c:	add	r3, r2
     f9e:	str	r3, [sp, #8]
     fa0:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     fa2:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     fa6:	ldr	r1, [sp, #4]
     fa8:	subs	r2, r1, r2
     faa:	str	r2, [sp, #4]
     fac:	bne.n	ece <usb_serial_write.part.1+0x2a>
     fae:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     fb0:	add	sp, #20
     fb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fb6:	ldr	r2, [pc, #72]	; (1000 <usb_serial_write.part.1+0x15c>)
     fb8:	ldrb	r4, [r2, #0]
     fba:	mov	r2, r3
     fbc:	rsb	r0, r3, #2048	; 0x800
     fc0:	b.n	f2c <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     fc2:	ldr	r4, [sp, #4]
     fc4:	ldr	r1, [sp, #8]
     fc6:	mov	r2, r4
     fc8:	str	r3, [sp, #12]
     fca:	bl	2080 <memcpy>
			tx_available -= size;
     fce:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     fd0:	ldr	r2, [pc, #60]	; (1010 <usb_serial_write.part.1+0x16c>)
     fd2:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     fd6:	subs	r3, r3, r4
     fd8:	strh.w	r3, [r8]
     fdc:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     fde:	str.w	r1, [r2, #132]	; 0x84
     fe2:	mov	r0, r3
     fe4:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     fe6:	add	sp, #20
     fe8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     fec:	movs	r3, #1
				return sent;
     fee:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     ff0:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     ff2:	add	sp, #20
     ff4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     ff8:	ldr	r0, [sp, #4]
     ffa:	b.n	fb0 <usb_serial_write.part.1+0x10c>
     ffc:	.word	0x20001034
    1000:	.word	0x2000106b
    1004:	.word	0x200011c0
    1008:	.word	0x200011a5
    100c:	.word	0x20201000
    1010:	.word	0x402e0000
    1014:	.word	0x200011a6
    1018:	.word	0x20001278
    101c:	.word	0xe000ef70

00001020 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    1020:	bx	lr
    1022:	nop

00001024 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1024:	ldr	r3, [pc, #196]	; (10ec <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    1026:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    102a:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    102c:	ldr	r7, [pc, #192]	; (10f0 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    102e:	cmp	r3, #0
    1030:	beq.n	10dc <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    1032:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    1036:	ldr.w	r8, [pc, #236]	; 1124 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    103a:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    103c:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1040:	movs	r1, #0
    1042:	movs	r2, #128	; 0x80
    1044:	ldr	r0, [pc, #172]	; (10f4 <usb_serial_configure+0xd0>)
	tx_head = 0;
    1046:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1048:	ldr	r6, [pc, #172]	; (10f8 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    104a:	bl	28ec <memset>
	tx_head = 0;
    104e:	ldr	r4, [pc, #172]	; (10fc <usb_serial_configure+0xd8>)
	tx_available = 0;
    1050:	ldr	r3, [pc, #172]	; (1100 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1052:	mov	r1, r5
    1054:	mov.w	r2, #256	; 0x100
    1058:	ldr	r0, [pc, #168]	; (1104 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    105a:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    105c:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    105e:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1060:	bl	28ec <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1064:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1066:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1068:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    106a:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    106c:	str	r5, [r6, #8]
    106e:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1070:	ldr	r1, [pc, #148]	; (1108 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1072:	ldr	r6, [pc, #152]	; (110c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    1074:	ldr	r0, [pc, #152]	; (1110 <usb_serial_configure+0xec>)
	rx_available = 0;
    1076:	ldr.w	lr, [pc, #176]	; 1128 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    107a:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    107c:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    107e:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1080:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1082:	str	r5, [r6, #0]
    1084:	str	r5, [r6, #4]
    1086:	str	r5, [r6, #8]
    1088:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    108a:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    108e:	bl	1c60 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1092:	ldrh.w	r1, [r8]
    1096:	mov	r2, r5
    1098:	ldr	r3, [pc, #120]	; (1114 <usb_serial_configure+0xf0>)
    109a:	movs	r0, #3
    109c:	bl	1bfc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    10a0:	mov	r3, r5
    10a2:	ldrh	r1, [r7, #0]
    10a4:	movs	r2, #1
    10a6:	movs	r0, #4
    10a8:	bl	1c60 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    10ac:	mov	r0, r4
    10ae:	adds	r4, #1
    10b0:	bl	cec <rx_queue_transfer>
    10b4:	cmp	r4, #8
    10b6:	bne.n	10ac <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    10b8:	ldr	r3, [pc, #92]	; (1118 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    10ba:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    10bc:	ldr	r0, [pc, #92]	; (111c <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    10be:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    10c0:	ldr	r4, [pc, #92]	; (1120 <usb_serial_configure+0xfc>)
    10c2:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    10c4:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    10c8:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    10cc:	ldr.w	r2, [r3, #328]	; 0x148
    10d0:	orr.w	r2, r2, #16777216	; 0x1000000
    10d4:	str.w	r2, [r3, #328]	; 0x148
    10d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    10dc:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    10de:	ldr.w	r8, [pc, #68]	; 1124 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    10e2:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    10e4:	strh.w	r3, [r8]
    10e8:	b.n	1040 <usb_serial_configure+0x1c>
    10ea:	nop
    10ec:	.word	0x20001250
    10f0:	.word	0x20001068
    10f4:	.word	0x200011c0
    10f8:	.word	0x20001190
    10fc:	.word	0x2000106b
    1100:	.word	0x200011a6
    1104:	.word	0x20001080
    1108:	.word	0x200011a4
    110c:	.word	0x20001058
    1110:	.word	0x20001180
    1114:	.word	0x00000d59
    1118:	.word	0x402e0000
    111c:	.word	0x20001240
    1120:	.word	0x00000e0d
    1124:	.word	0x2000118e
    1128:	.word	0x200011a0

0000112c <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    112c:	ldr	r3, [pc, #196]	; (11f4 <usb_serial_read+0xc8>)
    112e:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1132:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1136:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1138:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    113a:	ldr	r3, [pc, #188]	; (11f8 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    113c:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    113e:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1140:	cmp	r1, #0
    1142:	beq.n	11ec <usb_serial_read+0xc0>
    1144:	ldr	r3, [pc, #180]	; (11fc <usb_serial_read+0xd0>)
    1146:	uxtb	r4, r4
    1148:	ldrb	r3, [r3, #0]
    114a:	cmp	r4, r3
    114c:	beq.n	11f0 <usb_serial_read+0xc4>
    114e:	mov	sl, r0
    1150:	movs	r7, #0
    1152:	ldr.w	fp, [pc, #192]	; 1214 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    1156:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1158:	ldr	r3, [pc, #164]	; (1200 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    115a:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    115e:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1160:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1162:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    1164:	ldr	r3, [pc, #156]	; (1204 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1166:	it	cs
    1168:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    116a:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    116c:	ldr	r3, [pc, #144]	; (1200 <usb_serial_read+0xd4>)
    116e:	ldrh.w	lr, [r3, r5, lsl #1]
    1172:	ldr	r3, [pc, #148]	; (1208 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1174:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1178:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    117c:	ldr	r3, [pc, #140]	; (120c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    117e:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1182:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1184:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1186:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    1188:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    118a:	bcs.n	11c0 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    118c:	add.w	r1, lr, r5, lsl #9
    1190:	mov	r2, r8
    1192:	add	r1, r3
    1194:	bl	2080 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    1198:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    119a:	ldr.w	r1, [fp]
    119e:	mov	r0, r9
			rx_index[i] += len;
    11a0:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    11a4:	rsb	r1, r8, r1
			rx_index[i] += len;
    11a8:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    11aa:	str.w	r1, [fp]
			rx_index[i] += len;
    11ae:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    11b2:	ldr	r3, [pc, #92]	; (1210 <usb_serial_read+0xe4>)
    11b4:	mov.w	r2, #131072	; 0x20000
    11b8:	str	r2, [r3, #0]
	return count;
}
    11ba:	add	sp, #12
    11bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    11c0:	bl	2080 <memcpy>
			p += avail;
			rx_available -= avail;
    11c4:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    11c8:	uxtb	r3, r4
			rx_queue_transfer(i);
    11ca:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    11cc:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    11ce:	add	sl, r6
			rx_available -= avail;
    11d0:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    11d4:	ldr	r2, [pc, #32]	; (11f8 <usb_serial_read+0xcc>)
    11d6:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    11d8:	bl	cec <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    11dc:	cmp	r9, r7
    11de:	bls.n	11e8 <usb_serial_read+0xbc>
    11e0:	ldr	r3, [pc, #24]	; (11fc <usb_serial_read+0xd0>)
    11e2:	ldrb	r3, [r3, #0]
    11e4:	cmp	r4, r3
    11e6:	bne.n	1156 <usb_serial_read+0x2a>
    11e8:	mov	r0, r7
    11ea:	b.n	11b2 <usb_serial_read+0x86>
    11ec:	mov	r0, r1
    11ee:	b.n	11b2 <usb_serial_read+0x86>
    11f0:	movs	r0, #0
    11f2:	b.n	11b2 <usb_serial_read+0x86>
    11f4:	.word	0xe000e18c
    11f8:	.word	0x20001180
    11fc:	.word	0x200011a4
    1200:	.word	0x20001058
    1204:	.word	0x20001184
    1208:	.word	0x20001190
    120c:	.word	0x20200000
    1210:	.word	0xe000e10c
    1214:	.word	0x200011a0

00001218 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1218:	ldr	r3, [pc, #44]	; (1248 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    121a:	ldr	r2, [pc, #48]	; (124c <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    121c:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    121e:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1220:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1222:	cmp	r3, r2
    1224:	beq.n	1242 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1226:	adds	r3, #1
	uint32_t i = rx_list[tail];
    1228:	ldr	r0, [pc, #36]	; (1250 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    122a:	ldr	r2, [pc, #40]	; (1254 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    122c:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    122e:	ldr	r1, [pc, #40]	; (1258 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1230:	it	cs
    1232:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1234:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1236:	ldrh.w	r1, [r1, r3, lsl #1]
    123a:	add.w	r3, r2, r3, lsl #9
    123e:	ldrb	r0, [r3, r1]
    1240:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    1242:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    1246:	bx	lr
    1248:	.word	0x20001180
    124c:	.word	0x200011a4
    1250:	.word	0x20001184
    1254:	.word	0x20200000
    1258:	.word	0x20001058

0000125c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    125c:	ldr	r3, [pc, #4]	; (1264 <usb_serial_available+0x8>)
    125e:	ldr	r0, [r3, #0]
}
    1260:	bx	lr
    1262:	nop
    1264:	.word	0x200011a0

00001268 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    1268:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    126c:	ldr	r6, [pc, #84]	; (12c4 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    126e:	ldr	r5, [pc, #88]	; (12c8 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1270:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    1272:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1274:	uxtb	r4, r4
	while (tail != rx_head) {
    1276:	cmp	r4, r3
    1278:	beq.n	12be <usb_serial_flush_input+0x56>
    127a:	ldr.w	r9, [pc, #84]	; 12d0 <usb_serial_flush_input+0x68>
    127e:	ldr.w	fp, [pc, #84]	; 12d4 <usb_serial_flush_input+0x6c>
    1282:	ldr.w	r8, [pc, #84]	; 12d8 <usb_serial_flush_input+0x70>
    1286:	ldr	r7, [pc, #68]	; (12cc <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    1288:	adds	r4, #1
    128a:	cmp	r4, #8
    128c:	uxtb.w	sl, r4
    1290:	bls.n	1296 <usb_serial_flush_input+0x2e>
    1292:	movs	r4, #0
    1294:	mov	sl, r4
		uint32_t i = rx_list[tail];
    1296:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    129a:	ldr.w	r2, [fp]
    129e:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    12a2:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    12a4:	ldrh.w	r1, [r7, r1, lsl #1]
    12a8:	subs	r3, r3, r1
    12aa:	subs	r3, r2, r3
    12ac:	str.w	r3, [fp]
		rx_queue_transfer(i);
    12b0:	bl	cec <rx_queue_transfer>
		rx_tail = tail;
    12b4:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    12b8:	ldrb	r3, [r5, #0]
    12ba:	cmp	r4, r3
    12bc:	bne.n	1288 <usb_serial_flush_input+0x20>
    12be:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12c2:	nop
    12c4:	.word	0x20001180
    12c8:	.word	0x200011a4
    12cc:	.word	0x20001058
    12d0:	.word	0x20001184
    12d4:	.word	0x200011a0
    12d8:	.word	0x20001190

000012dc <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    12dc:	push	{lr}
    12de:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    12e0:	movs	r1, #1
    12e2:	add.w	r0, sp, #7
    12e6:	bl	112c <usb_serial_read>
    12ea:	cbz	r0, 12f6 <usb_serial_getchar+0x1a>
    12ec:	ldrb.w	r0, [sp, #7]
	return -1;
}
    12f0:	add	sp, #12
    12f2:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    12f6:	mov.w	r0, #4294967295
    12fa:	b.n	12f0 <usb_serial_getchar+0x14>

000012fc <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    12fc:	ldr	r3, [pc, #36]	; (1324 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    12fe:	push	{lr}
    1300:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1302:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1304:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1308:	cbnz	r3, 1314 <usb_serial_putchar+0x18>
    130a:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    130e:	add	sp, #12
    1310:	ldr.w	pc, [sp], #4
    1314:	movs	r1, #1
    1316:	add.w	r0, sp, #7
    131a:	bl	ea4 <usb_serial_write.part.1>
    131e:	add	sp, #12
    1320:	ldr.w	pc, [sp], #4
    1324:	.word	0x20001278

00001328 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1328:	ldr	r3, [pc, #16]	; (133c <usb_serial_write+0x14>)
    132a:	ldrb	r3, [r3, #0]
    132c:	and.w	r2, r3, #255	; 0xff
    1330:	cbz	r3, 1336 <usb_serial_write+0xe>
    1332:	b.w	ea4 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1336:	mov	r0, r2
    1338:	bx	lr
    133a:	nop
    133c:	.word	0x20001278

00001340 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    1340:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1344:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    1346:	ldr.w	r8, [pc, #64]	; 1388 <usb_serial_write_buffer_free+0x48>
    134a:	movs	r3, #1
    134c:	ldr	r5, [pc, #48]	; (1380 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    134e:	mov	r7, r4
    1350:	ldr	r6, [pc, #48]	; (1384 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    1352:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1356:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1358:	mov	r0, r5
    135a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    135c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    135e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1362:	beq.n	1370 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1364:	bl	1d44 <usb_transfer_status>
    1368:	lsls	r3, r0, #24
    136a:	it	pl
    136c:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1370:	cmp	r4, #4
    1372:	bne.n	1356 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1374:	movs	r3, #0
	return sum;
}
    1376:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1378:	strb.w	r3, [r8]
	return sum;
}
    137c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1380:	.word	0x200011c0
    1384:	.word	0x2000106b
    1388:	.word	0x2000106a

0000138c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    138c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    1390:	ldr	r3, [pc, #124]	; (1410 <usb_serial_flush_output+0x84>)
    1392:	ldrb	r3, [r3, #0]
    1394:	cbz	r3, 139c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    1396:	ldr	r5, [pc, #124]	; (1414 <usb_serial_flush_output+0x88>)
    1398:	ldrh	r2, [r5, #0]
    139a:	cbnz	r2, 13a0 <usb_serial_flush_output+0x14>
    139c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    13a0:	ldr.w	r8, [pc, #132]	; 1428 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    13a4:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    13a8:	ldr	r6, [pc, #108]	; (1418 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    13aa:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    13ae:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    13b2:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    13b4:	ldr	r4, [pc, #100]	; (141c <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    13b6:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    13b8:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    13bc:	ldr	r7, [pc, #96]	; (1420 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    13be:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    13c2:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    13c4:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    13c8:	mov	r1, r4
    13ca:	bl	1cc8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    13ce:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    13d2:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    13d6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    13da:	ldr	r3, [pc, #72]	; (1424 <usb_serial_flush_output+0x98>)
    13dc:	str	r1, [r3, #0]
		location += 32;
    13de:	adds	r1, #32
	} while (location < end_addr);
    13e0:	cmp	r2, r1
    13e2:	bhi.n	13dc <usb_serial_flush_output+0x50>
	asm("dsb");
    13e4:	dsb	sy
	asm("isb");
    13e8:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    13ec:	movs	r0, #4
    13ee:	mov	r1, r6
    13f0:	bl	1cf8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    13f4:	ldrb.w	r3, [r8]
    13f8:	ldr	r2, [pc, #44]	; (1428 <usb_serial_flush_output+0x9c>)
    13fa:	adds	r3, #1
    13fc:	uxtb	r3, r3
    13fe:	cmp	r3, #3
    1400:	it	hi
    1402:	movhi	r3, #0
    1404:	strb	r3, [r2, #0]
	tx_available = 0;
    1406:	movs	r3, #0
    1408:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    140a:	strb	r3, [r7, #0]
    140c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1410:	.word	0x20001278
    1414:	.word	0x200011a6
    1418:	.word	0x200011c0
    141c:	.word	0x20201000
    1420:	.word	0x2000106a
    1424:	.word	0xe000ef70
    1428:	.word	0x2000106b

0000142c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    142c:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    142e:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1430:	cbz	r3, 143a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1432:	ldr	r3, [r2, #4]
    1434:	orr.w	r3, r3, #32768	; 0x8000
    1438:	str	r3, [r2, #4]
	}
	__disable_irq();
    143a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    143c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    143e:	cbz	r4, 1468 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1440:	ldr	r3, [pc, #64]	; (1484 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    1442:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1444:	ldr.w	r4, [r3, #432]	; 0x1b0
    1448:	tst	r4, r1
    144a:	bne.n	147c <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    144c:	ldr.w	r4, [r3, #320]	; 0x140
    1450:	orr.w	r4, r4, #16384	; 0x4000
    1454:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1458:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    145c:	ldr.w	r4, [r3, #320]	; 0x140
    1460:	lsls	r4, r4, #17
    1462:	bpl.n	144c <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1464:	tst	r1, r5
    1466:	bne.n	147c <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    1468:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    146a:	ldr	r4, [pc, #24]	; (1484 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    146c:	str	r2, [r0, #8]
	endpoint->status = 0;
    146e:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1470:	ldr.w	r3, [r4, #432]	; 0x1b0
    1474:	orrs	r1, r3
    1476:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    147a:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    147c:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    147e:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1480:	pop	{r4, r5}
    1482:	bx	lr
    1484:	.word	0x402e0000

00001488 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1488:	push	{r4, r5, r6, lr}
    148a:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    148c:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    148e:	cbz	r0, 14b6 <run_callbacks+0x2e>
    1490:	mov	r2, r0
    1492:	movs	r4, #0
    1494:	b.n	149e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1496:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    1498:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    149a:	cmp	r2, #1
    149c:	beq.n	14b8 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    149e:	ldr	r3, [r2, #4]
    14a0:	ands.w	r3, r3, #128	; 0x80
    14a4:	beq.n	1496 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    14a6:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    14a8:	cbz	r4, 14b6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    14aa:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    14ac:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    14ae:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    14b0:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    14b2:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    14b4:	bne.n	14aa <run_callbacks+0x22>
    14b6:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    14b8:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    14ba:	str	r3, [r6, #52]	; 0x34
			break;
    14bc:	b.n	14a8 <run_callbacks+0x20>
    14be:	nop

000014c0 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    14c0:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    14c2:	cbnz	r1, 1502 <endpoint0_transmit.constprop.1+0x42>
    14c4:	ldr	r4, [pc, #136]	; (1550 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14c6:	ldr	r1, [pc, #140]	; (1554 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14c8:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    14ca:	ldr	r3, [pc, #140]	; (1558 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14cc:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14ce:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    14d0:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14d2:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    14d4:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14d6:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    14d8:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    14da:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14de:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    14e0:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    14e4:	ldr	r5, [pc, #116]	; (155c <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    14e6:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    14ea:	ldr.w	r1, [r3, #432]	; 0x1b0
    14ee:	orr.w	r1, r1, #1
    14f2:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    14f6:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    14f8:	ldr.w	r3, [r2, #432]	; 0x1b0
    14fc:	cmp	r3, #0
    14fe:	bne.n	14f8 <endpoint0_transmit.constprop.1+0x38>
}
    1500:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1502:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1504:	ldr	r3, [pc, #88]	; (1560 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1506:	ldr	r5, [pc, #80]	; (1558 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1508:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    150a:	ldr	r4, [pc, #68]	; (1550 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    150c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1510:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1512:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1514:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1516:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    151a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    151c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1520:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1522:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1526:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    152a:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    152e:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1530:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1532:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1536:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    153a:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    153e:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1540:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1542:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1546:	ldr.w	r3, [r2, #432]	; 0x1b0
    154a:	cmp	r3, #0
    154c:	bne.n	1546 <endpoint0_transmit.constprop.1+0x86>
    154e:	b.n	14c6 <endpoint0_transmit.constprop.1+0x6>
    1550:	.word	0x20003000
    1554:	.word	0x20002020
    1558:	.word	0x402e0000
    155c:	.word	0x20001254
    1560:	.word	0x20002000

00001564 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    1564:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1568:	ldr	r4, [pc, #752]	; (185c <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    156a:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    156c:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1570:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1574:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1578:	beq.n	1638 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    157a:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    157e:	cmp	r3, #0
    1580:	beq.n	162e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1582:	mov.w	fp, #65537	; 0x10001
    1586:	ldr.w	r9, [pc, #764]	; 1884 <isr+0x320>
    158a:	ldr	r6, [pc, #724]	; (1860 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    158c:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    158e:	mov	sl, fp
    1590:	ldr	r0, [r6, #40]	; 0x28
    1592:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1594:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1598:	ldr.w	r3, [r4, #320]	; 0x140
    159c:	orr.w	r3, r3, #8192	; 0x2000
    15a0:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    15a4:	ldr.w	r3, [r4, #320]	; 0x140
    15a8:	lsls	r7, r3, #18
    15aa:	bpl.n	1598 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    15ac:	ldr.w	r3, [r5, #320]	; 0x140
    15b0:	bic.w	r3, r3, #8192	; 0x2000
    15b4:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    15b8:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    15bc:	ldr.w	r3, [r4, #436]	; 0x1b4
    15c0:	ands.w	r3, r3, #65537	; 0x10001
    15c4:	bne.n	15bc <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    15c6:	uxth	r1, r0
    15c8:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    15cc:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    15d0:	cmp	r1, r7
    15d2:	bhi.w	1720 <isr+0x1bc>
    15d6:	cmp.w	r1, #1664	; 0x680
    15da:	bcs.w	19b4 <isr+0x450>
    15de:	cmp.w	r1, #258	; 0x102
    15e2:	beq.w	18ba <isr+0x356>
    15e6:	bhi.w	17b2 <isr+0x24e>
    15ea:	cmp	r1, #128	; 0x80
    15ec:	beq.w	18a0 <isr+0x33c>
    15f0:	cmp	r1, #130	; 0x82
    15f2:	bne.w	17a2 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    15f6:	uxth	r2, r2
    15f8:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    15fc:	cmp	r1, #7
    15fe:	bhi.w	17a2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1602:	lsls	r1, r1, #2
    1604:	ldr	r0, [pc, #604]	; (1864 <isr+0x300>)
		reply_buffer[0] = 0;
    1606:	ldr	r7, [pc, #608]	; (1868 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1608:	add	r0, r1
    160a:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    160c:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    160e:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1610:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1612:	bpl.w	1a32 <isr+0x4ce>
    1616:	lsls	r2, r1, #15
    1618:	bpl.n	161e <isr+0xba>
			reply_buffer[0] = 1;
    161a:	movs	r3, #1
    161c:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    161e:	movs	r1, #2
    1620:	ldr	r0, [pc, #580]	; (1868 <isr+0x304>)
    1622:	bl	14c0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1626:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    162a:	cmp	r3, #0
    162c:	bne.n	1590 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    162e:	ldr	r2, [pc, #556]	; (185c <isr+0x2f8>)
    1630:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1634:	cmp	r3, #0
    1636:	bne.n	16da <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1638:	tst.w	r8, #64	; 0x40
    163c:	beq.n	1670 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    163e:	ldr	r3, [pc, #540]	; (185c <isr+0x2f8>)
    1640:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1644:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1646:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    164a:	ldr.w	r1, [r3, #444]	; 0x1bc
    164e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1652:	ldr.w	r4, [r2, #432]	; 0x1b0
    1656:	ldr	r3, [pc, #516]	; (185c <isr+0x2f8>)
    1658:	cmp	r4, #0
    165a:	bne.n	1652 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    165c:	mov.w	r2, #4294967295
    1660:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1664:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1668:	bl	1020 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    166c:	ldr	r3, [pc, #508]	; (186c <isr+0x308>)
    166e:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1670:	tst.w	r8, #16777216	; 0x1000000
    1674:	beq.n	167e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1676:	ldr	r3, [pc, #504]	; (1870 <isr+0x30c>)
    1678:	ldr	r3, [r3, #0]
    167a:	cbz	r3, 167e <isr+0x11a>
    167c:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    167e:	tst.w	r8, #33554432	; 0x2000000
    1682:	beq.n	168c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1684:	ldr	r3, [pc, #492]	; (1874 <isr+0x310>)
    1686:	ldr	r3, [r3, #0]
    1688:	cbz	r3, 168c <isr+0x128>
    168a:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    168c:	tst.w	r8, #4
    1690:	beq.n	16a4 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1692:	ldr	r3, [pc, #456]	; (185c <isr+0x2f8>)
    1694:	ldr.w	r3, [r3, #388]	; 0x184
    1698:	ands.w	r3, r3, #512	; 0x200
    169c:	beq.n	171a <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    169e:	ldr	r3, [pc, #472]	; (1878 <isr+0x314>)
    16a0:	movs	r2, #1
    16a2:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    16a4:	ldr	r3, [pc, #436]	; (185c <isr+0x2f8>)
    16a6:	ldr.w	r2, [r3, #328]	; 0x148
    16aa:	lsls	r2, r2, #24
    16ac:	bpl.n	16d4 <isr+0x170>
    16ae:	tst.w	r8, #128	; 0x80
    16b2:	beq.n	16d4 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    16b4:	ldr	r1, [pc, #452]	; (187c <isr+0x318>)
    16b6:	ldrb	r2, [r1, #0]
    16b8:	cbz	r2, 16d4 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    16ba:	subs	r2, #1
    16bc:	uxtb	r2, r2
    16be:	strb	r2, [r1, #0]
    16c0:	cbnz	r2, 16d4 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    16c2:	ldr	r1, [pc, #444]	; (1880 <isr+0x31c>)
    16c4:	ldrb	r2, [r1, #0]
    16c6:	and.w	r2, r2, #251	; 0xfb
    16ca:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    16cc:	cmp	r2, #0
    16ce:	beq.w	1b36 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    16d2:	bkpt	0x00fb
		#endif
		#ifdef MULTITOUCH_INTERFACE
		usb_touchscreen_update_callback();
		#endif
	}
}
    16d4:	add	sp, #12
    16d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    16da:	ldr	r1, [pc, #424]	; (1884 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    16dc:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    16e0:	ldr	r0, [r1, #0]
    16e2:	tst	r3, r0
    16e4:	bne.w	1abe <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    16e8:	ldr	r2, [pc, #384]	; (186c <isr+0x308>)
    16ea:	ldr	r4, [r2, #0]
			if (completestatus) {
    16ec:	ands	r4, r3
    16ee:	beq.n	1638 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    16f0:	lsls	r3, r4, #29
    16f2:	bmi.w	1b54 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    16f6:	lsls	r7, r4, #13
    16f8:	bmi.w	1b4c <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    16fc:	lsls	r6, r4, #28
    16fe:	bmi.w	1b64 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    1702:	lsls	r5, r4, #12
    1704:	bmi.w	1b5c <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1708:	lsls	r0, r4, #27
    170a:	bmi.w	1b44 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    170e:	lsls	r1, r4, #11
    1710:	bpl.n	1638 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1712:	ldr	r0, [pc, #372]	; (1888 <isr+0x324>)
    1714:	bl	1488 <run_callbacks>
    1718:	b.n	1638 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    171a:	ldr	r2, [pc, #348]	; (1878 <isr+0x314>)
    171c:	strb	r3, [r2, #0]
    171e:	b.n	16a4 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1720:	movw	r7, #8225	; 0x2021
    1724:	cmp	r1, r7
    1726:	beq.n	179a <isr+0x236>
    1728:	bhi.n	180a <isr+0x2a6>
    172a:	cmp.w	r1, #2176	; 0x880
    172e:	beq.w	1998 <isr+0x434>
    1732:	cmp.w	r1, #2304	; 0x900
    1736:	bne.n	17a2 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1738:	ubfx	r0, r0, #16, #8
    173c:	ldr	r2, [pc, #332]	; (188c <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    173e:	ldr	r1, [pc, #336]	; (1890 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1740:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1742:	ldr	r7, [pc, #336]	; (1894 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1744:	ldr	r2, [pc, #336]	; (1898 <isr+0x334>)
    1746:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1748:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    174c:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1750:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    1754:	bl	1024 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1758:	ldr	r2, [pc, #320]	; (189c <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    175a:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    175c:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    175e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1760:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1762:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1764:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1766:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    176a:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    176c:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1770:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1772:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1776:	ldr.w	r2, [r5, #432]	; 0x1b0
    177a:	orr.w	r2, r2, #65536	; 0x10000
    177e:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1782:	ldr	r2, [pc, #256]	; (1884 <isr+0x320>)
    1784:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    1786:	ldr.w	r3, [r4, #432]	; 0x1b0
    178a:	cmp	r3, #0
    178c:	bne.n	1786 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    178e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1792:	cmp	r3, #0
    1794:	bne.w	1590 <isr+0x2c>
    1798:	b.n	162e <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    179a:	lsrs	r1, r2, #16
    179c:	cmp	r1, #7
    179e:	beq.w	1a3a <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    17a2:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    17a6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    17aa:	cmp	r3, #0
    17ac:	bne.w	1590 <isr+0x2c>
    17b0:	b.n	162e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    17b2:	movw	r7, #770	; 0x302
    17b6:	cmp	r1, r7
    17b8:	beq.w	1932 <isr+0x3ce>
    17bc:	cmp.w	r1, #1280	; 0x500
    17c0:	bne.n	17a2 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17c2:	ldr	r2, [pc, #216]	; (189c <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17c4:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17c6:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    17c8:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17ca:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17cc:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17ce:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    17d2:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17d4:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    17d8:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17da:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    17de:	ldr.w	r3, [r5, #432]	; 0x1b0
    17e2:	orr.w	r3, r3, #65536	; 0x10000
    17e6:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    17ea:	ldr.w	r3, [r4, #432]	; 0x1b0
    17ee:	cmp	r3, #0
    17f0:	bne.n	17ea <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    17f2:	lsrs	r3, r0, #16
    17f4:	lsls	r3, r3, #25
    17f6:	orr.w	r3, r3, #16777216	; 0x1000000
    17fa:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    17fe:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1802:	cmp	r3, #0
    1804:	bne.w	1590 <isr+0x2c>
    1808:	b.n	162e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    180a:	movw	r3, #8737	; 0x2221
    180e:	cmp	r1, r3
    1810:	beq.w	1920 <isr+0x3bc>
    1814:	movw	r3, #8993	; 0x2321
    1818:	cmp	r1, r3
    181a:	bne.n	17a2 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    181c:	ldr	r3, [pc, #124]	; (189c <isr+0x338>)
    181e:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1820:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1822:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1824:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1826:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1828:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    182c:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    182e:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1832:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1834:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1836:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    183a:	ldr.w	r3, [r4, #432]	; 0x1b0
    183e:	orr.w	r3, r3, #65536	; 0x10000
    1842:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1846:	ldr.w	r3, [r4, #432]	; 0x1b0
    184a:	cmp	r3, #0
    184c:	bne.n	1846 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    184e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1852:	cmp	r3, #0
    1854:	bne.w	1590 <isr+0x2c>
    1858:	b.n	162e <isr+0xca>
    185a:	nop
    185c:	.word	0x402e0000
    1860:	.word	0x20003000
    1864:	.word	0x402e01c0
    1868:	.word	0x20001268
    186c:	.word	0x20001244
    1870:	.word	0x20001240
    1874:	.word	0x2000124c
    1878:	.word	0x20001250
    187c:	.word	0x20001258
    1880:	.word	0x20001248
    1884:	.word	0x20001254
    1888:	.word	0x20003240
    188c:	.word	0x20001278
    1890:	.word	0x000200c8
    1894:	.word	0x00cc0002
    1898:	.word	0x00c80002
    189c:	.word	0x20002020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    18a0:	ldr	r2, [pc, #744]	; (1b8c <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    18a2:	movs	r1, #2
    18a4:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    18a6:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    18a8:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    18aa:	bl	14c0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    18ae:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    18b2:	cmp	r3, #0
    18b4:	bne.w	1590 <isr+0x2c>
    18b8:	b.n	162e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    18ba:	uxth	r2, r2
    18bc:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    18c0:	cmp	r3, #7
    18c2:	bhi.w	17a2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    18c6:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    18ca:	mov.w	r3, r3, lsl #2
    18ce:	ldr	r2, [pc, #704]	; (1b90 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    18d0:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    18d4:	add	r2, r3
    18d6:	ldr	r3, [r2, #0]
    18d8:	ite	ne
    18da:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    18de:	biceq.w	r3, r3, #1
    18e2:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    18e4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    18e6:	ldr	r3, [pc, #684]	; (1b94 <isr+0x630>)
    18e8:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    18ea:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    18ec:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    18ee:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    18f2:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    18f4:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    18f8:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    18fa:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    18fc:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1900:	ldr.w	r3, [r4, #432]	; 0x1b0
    1904:	orr.w	r3, r3, #65536	; 0x10000
    1908:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    190c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1910:	cmp	r3, #0
    1912:	bne.n	190c <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1914:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1918:	cmp	r3, #0
    191a:	bne.w	1590 <isr+0x2c>
    191e:	b.n	162e <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1920:	ldr	r3, [pc, #628]	; (1b98 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    1922:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1926:	ldr	r2, [pc, #628]	; (1b9c <isr+0x638>)
    1928:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    192a:	ldr	r3, [pc, #628]	; (1ba0 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    192c:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    192e:	strb	r0, [r3, #0]
    1930:	b.n	181c <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1932:	uxth	r2, r2
    1934:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1938:	cmp	r3, #7
    193a:	bhi.w	17a2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    193e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1942:	mov.w	r3, r3, lsl #2
    1946:	ldr	r2, [pc, #584]	; (1b90 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1948:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    194c:	add	r2, r3
    194e:	ldr	r3, [r2, #0]
    1950:	ite	ne
    1952:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1956:	orreq.w	r3, r3, #1
    195a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    195c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    195e:	ldr	r3, [pc, #564]	; (1b94 <isr+0x630>)
    1960:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1962:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1964:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1966:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    196a:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    196c:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1970:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1972:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1974:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1978:	ldr.w	r3, [r4, #432]	; 0x1b0
    197c:	orr.w	r3, r3, #65536	; 0x10000
    1980:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1984:	ldr.w	r3, [r4, #432]	; 0x1b0
    1988:	cmp	r3, #0
    198a:	bne.n	1984 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    198c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1990:	cmp	r3, #0
    1992:	bne.w	1590 <isr+0x2c>
    1996:	b.n	162e <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1998:	ldr	r2, [pc, #520]	; (1ba4 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    199a:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    199c:	ldr	r3, [pc, #492]	; (1b8c <isr+0x628>)
    199e:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    19a0:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    19a2:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    19a4:	bl	14c0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    19a8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    19ac:	cmp	r3, #0
    19ae:	bne.w	1590 <isr+0x2c>
    19b2:	b.n	162e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    19b4:	ldr	r3, [pc, #496]	; (1ba8 <isr+0x644>)
    19b6:	ldr	r1, [r3, #4]
    19b8:	cmp	r1, #0
    19ba:	beq.w	17a2 <isr+0x23e>
    19be:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    19c0:	uxth.w	lr, r2
    19c4:	b.n	19d0 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    19c6:	adds	r3, #12
    19c8:	ldr	r1, [r3, #4]
    19ca:	cmp	r1, #0
    19cc:	beq.w	17a2 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    19d0:	ldrh	r7, [r3, #0]
    19d2:	cmp	r7, r0
    19d4:	bne.n	19c6 <isr+0x462>
    19d6:	ldrh	r7, [r3, #2]
    19d8:	cmp	r7, lr
    19da:	bne.n	19c6 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    19dc:	lsrs	r7, r0, #8
    19de:	cmp	r7, #3
    19e0:	beq.w	1bf0 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    19e4:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    19e6:	lsrs	r2, r2, #16
    19e8:	cmp	r3, r2
    19ea:	it	cs
    19ec:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    19ee:	cmp.w	r0, #512	; 0x200
    19f2:	beq.w	1b6c <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    19f6:	cmp.w	r0, #1792	; 0x700
    19fa:	beq.w	1b10 <isr+0x5ac>
    19fe:	ldr	r7, [pc, #428]	; (1bac <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1a00:	mov	r2, r3
    1a02:	str	r3, [sp, #4]
    1a04:	mov	r0, r7
    1a06:	bl	2080 <memcpy>
    1a0a:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1a0c:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1a10:	add	r7, r3
	asm("dsb");
    1a12:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1a16:	ldr	r1, [pc, #408]	; (1bb0 <isr+0x64c>)
    1a18:	str	r2, [r1, #0]
		location += 32;
    1a1a:	adds	r2, #32
	} while (location < end_addr);
    1a1c:	cmp	r7, r2
    1a1e:	bhi.n	1a16 <isr+0x4b2>
	asm("dsb");
    1a20:	dsb	sy
	asm("isb");
    1a24:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1a28:	ldr	r0, [pc, #384]	; (1bac <isr+0x648>)
    1a2a:	mov	r1, r3
    1a2c:	bl	14c0 <endpoint0_transmit.constprop.1>
    1a30:	b.n	1626 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1a32:	lsls	r3, r1, #31
    1a34:	bpl.w	161e <isr+0xba>
    1a38:	b.n	161a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1a3a:	ldr	r7, [pc, #376]	; (1bb4 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1a3c:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1a40:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1a42:	ldr	r1, [pc, #372]	; (1bb8 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1a44:	ldr	r3, [pc, #372]	; (1bbc <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1a46:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1a48:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1a4c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1a4e:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    1a52:	ldr	r1, [pc, #364]	; (1bc0 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1a54:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1a56:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1a5a:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1a5e:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1a62:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1a64:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1a68:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1a6c:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1a70:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1a72:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1a74:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1a78:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1a7a:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1a7c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1a80:	cmp	r3, #0
    1a82:	bne.n	1a7c <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    1a84:	ldr	r2, [pc, #268]	; (1b94 <isr+0x630>)
    1a86:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1a88:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1a8c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1a8e:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1a90:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1a94:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1a96:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1a9a:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1a9c:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1aa0:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1aa2:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1aa6:	ldr.w	r3, [r5, #432]	; 0x1b0
    1aaa:	orrs	r3, r0
    1aac:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1ab0:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1ab4:	ldr.w	r3, [r4, #432]	; 0x1b0
    1ab8:	cmp	r3, #0
    1aba:	bne.n	1ab4 <isr+0x550>
    1abc:	b.n	1626 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1abe:	ldr	r4, [pc, #244]	; (1bb4 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1ac0:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1ac4:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1ac6:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1ac8:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1aca:	cmp	r4, r0
    1acc:	bne.w	16e8 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1ad0:	ldr	r1, [pc, #236]	; (1bc0 <isr+0x65c>)
    1ad2:	ldr	r4, [pc, #240]	; (1bc4 <isr+0x660>)
    1ad4:	ldmia	r1, {r0, r1}
    1ad6:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1ad8:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1ada:	str	r0, [r4, #0]
    1adc:	strh	r1, [r4, #4]
    1ade:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1ae0:	bne.w	16e8 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1ae4:	cpsid	i
	sof_usage |= (1 << interface);
    1ae6:	ldr	r0, [pc, #224]	; (1bc8 <isr+0x664>)
    1ae8:	ldrb	r1, [r0, #0]
    1aea:	orr.w	r1, r1, #4
    1aee:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1af0:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1af4:	lsls	r0, r1, #24
    1af6:	bmi.n	1b06 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1af8:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1afc:	movs	r0, #128	; 0x80
    1afe:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1b02:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1b06:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1b08:	ldr	r2, [pc, #192]	; (1bcc <isr+0x668>)
    1b0a:	movs	r1, #80	; 0x50
    1b0c:	strb	r1, [r2, #0]
    1b0e:	b.n	16e8 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1b10:	ldr	r0, [pc, #188]	; (1bd0 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1b12:	mov	r2, r3
    1b14:	ldr	r7, [pc, #148]	; (1bac <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1b16:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1b1a:	ldr	r1, [pc, #184]	; (1bd4 <isr+0x670>)
    1b1c:	ldr	r0, [pc, #184]	; (1bd8 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1b1e:	str	r3, [sp, #4]
    1b20:	cmp.w	lr, #0
    1b24:	it	eq
    1b26:	moveq	r1, r0
    1b28:	mov	r0, r7
    1b2a:	bl	2080 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1b2e:	movs	r2, #7
    1b30:	ldr	r3, [sp, #4]
    1b32:	strb	r2, [r7, #1]
    1b34:	b.n	1a0c <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1b36:	ldr.w	r2, [r3, #328]	; 0x148
    1b3a:	bic.w	r2, r2, #128	; 0x80
    1b3e:	str.w	r2, [r3, #328]	; 0x148
    1b42:	b.n	16d2 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1b44:	ldr	r0, [pc, #148]	; (1bdc <isr+0x678>)
    1b46:	bl	1488 <run_callbacks>
    1b4a:	b.n	170e <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1b4c:	ldr	r0, [pc, #144]	; (1be0 <isr+0x67c>)
    1b4e:	bl	1488 <run_callbacks>
    1b52:	b.n	16fc <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1b54:	ldr	r0, [pc, #140]	; (1be4 <isr+0x680>)
    1b56:	bl	1488 <run_callbacks>
    1b5a:	b.n	16f6 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1b5c:	ldr	r0, [pc, #136]	; (1be8 <isr+0x684>)
    1b5e:	bl	1488 <run_callbacks>
    1b62:	b.n	1708 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1b64:	ldr	r0, [pc, #132]	; (1bec <isr+0x688>)
    1b66:	bl	1488 <run_callbacks>
    1b6a:	b.n	1702 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1b6c:	ldr	r0, [pc, #96]	; (1bd0 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1b6e:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1b70:	ldr	r1, [pc, #100]	; (1bd8 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1b72:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1b74:	ldr	r0, [pc, #92]	; (1bd4 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1b76:	str	r3, [sp, #4]
    1b78:	cmp	r7, #0
    1b7a:	it	eq
    1b7c:	moveq	r1, r0
    1b7e:	ldr	r0, [pc, #44]	; (1bac <isr+0x648>)
    1b80:	bl	2080 <memcpy>
    1b84:	ldr	r7, [pc, #36]	; (1bac <isr+0x648>)
    1b86:	ldr	r3, [sp, #4]
    1b88:	b.n	1a0c <isr+0x4a8>
    1b8a:	nop
    1b8c:	.word	0x20001268
    1b90:	.word	0x402e01c0
    1b94:	.word	0x20002020
    1b98:	.word	0x20001034
    1b9c:	.word	0x200016c8
    1ba0:	.word	0x200011a8
    1ba4:	.word	0x20001278
    1ba8:	.word	0x200002f0
    1bac:	.word	0x20203000
    1bb0:	.word	0xe000ef70
    1bb4:	.word	0x20001260
    1bb8:	.word	0x00070080
    1bbc:	.word	0x20002000
    1bc0:	.word	0x20001270
    1bc4:	.word	0x200016c0
    1bc8:	.word	0x20001248
    1bcc:	.word	0x20001258
    1bd0:	.word	0x20001250
    1bd4:	.word	0x60001610
    1bd8:	.word	0x60001654
    1bdc:	.word	0x20003200
    1be0:	.word	0x20003140
    1be4:	.word	0x20003100
    1be8:	.word	0x200031c0
    1bec:	.word	0x20003180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1bf0:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1bf2:	ldrb	r3, [r1, #0]
    1bf4:	cmp	r3, r2
    1bf6:	it	cs
    1bf8:	movcs	r3, r2
    1bfa:	b.n	19f6 <isr+0x492>

00001bfc <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1bfc:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1bfe:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1c02:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1c06:	ite	ne
    1c08:	movne	r7, #0
    1c0a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1c0e:	cmp	r2, #2
    1c10:	bls.n	1c16 <usb_config_rx+0x1a>
    1c12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1c16:	mov.w	sl, r0, lsl #7
    1c1a:	ldr.w	r9, [pc, #64]	; 1c5c <usb_config_rx+0x60>
    1c1e:	mov	r5, r1
    1c20:	mov	r4, r0
    1c22:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1c26:	movs	r1, #0
    1c28:	movs	r2, #64	; 0x40
    1c2a:	mov	r8, r3
    1c2c:	mov	r0, r6
    1c2e:	bl	28ec <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1c32:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1c34:	orr.w	r1, r7, r5, lsl #16
    1c38:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1c3c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1c40:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1c42:	cmp.w	r8, #0
    1c46:	beq.n	1c12 <usb_config_rx+0x16>
    1c48:	ldr	r3, [pc, #12]	; (1c58 <usb_config_rx+0x5c>)
    1c4a:	lsls	r0, r4
    1c4c:	ldr	r4, [r3, #0]
    1c4e:	orrs	r0, r4
    1c50:	str	r0, [r3, #0]
    1c52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c56:	nop
    1c58:	.word	0x20001244
    1c5c:	.word	0x20003000

00001c60 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1c60:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1c62:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1c66:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1c6a:	ite	ne
    1c6c:	movne	r7, #0
    1c6e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1c72:	cmp	r2, #2
    1c74:	bls.n	1c7a <usb_config_tx+0x1a>
    1c76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1c7a:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1c7c:	lsls	r5, r0, #7
    1c7e:	ldr.w	r9, [pc, #68]	; 1cc4 <usb_config_tx+0x64>
    1c82:	mov	r8, r1
    1c84:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1c86:	movs	r1, #0
    1c88:	mov	r4, r0
    1c8a:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1c8c:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1c90:	mov	r0, sl
    1c92:	bl	28ec <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1c96:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1c98:	orr.w	r1, r7, r8, lsl #16
    1c9c:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1ca0:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1ca4:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1ca8:	cmp	r6, #0
    1caa:	beq.n	1c76 <usb_config_tx+0x16>
    1cac:	add.w	r0, r4, #16
    1cb0:	ldr	r3, [pc, #12]	; (1cc0 <usb_config_tx+0x60>)
    1cb2:	lsls	r2, r0
    1cb4:	ldr	r0, [r3, #0]
    1cb6:	orrs	r2, r0
    1cb8:	str	r2, [r3, #0]
    1cba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cbe:	nop
    1cc0:	.word	0x20001244
    1cc4:	.word	0x20003000

00001cc8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1cc8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1cca:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1ccc:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1cce:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1cd2:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1cd4:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1cd6:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1cd8:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1cdc:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1ce0:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1ce4:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1ce8:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1cea:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1cec:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1cee:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1cf0:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1cf2:	pop	{r4, r5, r6, r7}
    1cf4:	bx	lr
    1cf6:	nop

00001cf8 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1cf8:	subs	r3, r0, #2
    1cfa:	cmp	r3, #2
    1cfc:	bls.n	1d00 <usb_transmit+0x8>
    1cfe:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1d00:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1d02:	ldr	r3, [pc, #24]	; (1d1c <usb_transmit+0x24>)
    1d04:	add.w	r4, r0, #16
    1d08:	movs	r5, #1
    1d0a:	mov	r2, r1
    1d0c:	add.w	r0, r3, r0, lsl #7
    1d10:	lsl.w	r1, r5, r4
}
    1d14:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1d16:	b.w	142c <schedule_transfer>
    1d1a:	nop
    1d1c:	.word	0x20003040

00001d20 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1d20:	subs	r3, r0, #2
    1d22:	cmp	r3, #2
    1d24:	bls.n	1d28 <usb_receive+0x8>
    1d26:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1d28:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1d2a:	ldr	r3, [pc, #20]	; (1d40 <usb_receive+0x20>)
    1d2c:	movs	r4, #1
    1d2e:	mov	r2, r1
    1d30:	lsl.w	r1, r4, r0
    1d34:	add.w	r0, r3, r0, lsl #7
}
    1d38:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1d3c:	b.w	142c <schedule_transfer>
    1d40:	.word	0x20003000

00001d44 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1d44:	ldr	r0, [r0, #4]
#endif
}
    1d46:	bx	lr

00001d48 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1d48:	ldr	r0, [pc, #656]	; (1fdc <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d4a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d4e:	ldr	r3, [pc, #656]	; (1fe0 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1d50:	ldr	r2, [r0, #120]	; 0x78
    1d52:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1d56:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1d58:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1d5a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1d5c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d60:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1d64:	ldr	r4, [pc, #636]	; (1fe4 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d66:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d6a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d6c:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1d70:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d72:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1d74:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d78:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1d7c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d80:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1d84:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1d88:	ldrh.w	r0, [r3, #392]	; 0x188
    1d8c:	uxth	r0, r0
    1d8e:	orr.w	r0, r0, #240	; 0xf0
    1d92:	strh.w	r0, [r3, #392]	; 0x188
    1d96:	add.w	r0, r1, r1, lsl #1
    1d9a:	ldr	r3, [pc, #580]	; (1fe0 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1d9c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d9e:	movs	r5, #0
    1da0:	lsls	r0, r0, #5
    1da2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1da4:	cmp	r1, #4
    1da6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1da8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1dac:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1dae:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1db0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1db2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1db4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1db6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1db8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1dba:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1dbc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1dbe:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1dc0:	bne.n	1d96 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dc2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1dc6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1dca:	ldr	r3, [pc, #540]	; (1fe8 <pwm_init+0x2a0>)
    1dcc:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dd0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1dd2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1dd4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1dd8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dda:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1dde:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1de2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1de6:	ldrh.w	r0, [r4, #392]	; 0x188
    1dea:	uxth	r0, r0
    1dec:	orr.w	r0, r0, #3840	; 0xf00
    1df0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1df4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1df8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1dfc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1e00:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1e04:	ldrh.w	r0, [r3, #392]	; 0x188
    1e08:	uxth	r0, r0
    1e0a:	orr.w	r0, r0, #240	; 0xf0
    1e0e:	strh.w	r0, [r3, #392]	; 0x188
    1e12:	add.w	r0, r1, r1, lsl #1
    1e16:	ldr	r3, [pc, #464]	; (1fe8 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1e18:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1e1a:	movs	r5, #0
    1e1c:	lsls	r0, r0, #5
    1e1e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1e20:	cmp	r1, #4
    1e22:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1e24:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1e26:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1e2a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1e2c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1e2e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1e30:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1e32:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1e34:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1e36:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1e38:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1e3a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1e3c:	bne.n	1e12 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e3e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1e42:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1e46:	ldr	r3, [pc, #420]	; (1fec <pwm_init+0x2a4>)
    1e48:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e4c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1e4e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1e50:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1e54:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e56:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1e5a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e5e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1e62:	ldrh.w	r0, [r4, #392]	; 0x188
    1e66:	uxth	r0, r0
    1e68:	orr.w	r0, r0, #3840	; 0xf00
    1e6c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1e70:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1e74:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1e78:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1e7c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1e80:	ldrh.w	r0, [r3, #392]	; 0x188
    1e84:	uxth	r0, r0
    1e86:	orr.w	r0, r0, #240	; 0xf0
    1e8a:	strh.w	r0, [r3, #392]	; 0x188
    1e8e:	add.w	r0, r1, r1, lsl #1
    1e92:	ldr	r3, [pc, #344]	; (1fec <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    1e94:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1e96:	movs	r5, #0
    1e98:	lsls	r0, r0, #5
    1e9a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1e9c:	cmp	r1, #4
    1e9e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1ea0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1ea2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1ea6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1ea8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1eaa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1eac:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1eae:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1eb0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1eb2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1eb4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1eb6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1eb8:	bne.n	1e8e <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1eba:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1ebe:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1ec2:	ldr	r3, [pc, #300]	; (1ff0 <pwm_init+0x2a8>)
    1ec4:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1ec8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1eca:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1ecc:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1ed0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1ed2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1ed6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1eda:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1ede:	ldrh.w	r0, [r4, #392]	; 0x188
    1ee2:	uxth	r0, r0
    1ee4:	orr.w	r0, r0, #3840	; 0xf00
    1ee8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1eec:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1ef0:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1ef4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1ef8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1efc:	ldrh.w	r0, [r3, #392]	; 0x188
    1f00:	uxth	r0, r0
    1f02:	orr.w	r0, r0, #240	; 0xf0
    1f06:	strh.w	r0, [r3, #392]	; 0x188
    1f0a:	add.w	r0, r1, r1, lsl #1
    1f0e:	ldr	r3, [pc, #224]	; (1ff0 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    1f10:	adds	r1, #1
    1f12:	lsls	r0, r0, #5
    1f14:	mov	r4, r3
    1f16:	cmp	r1, #4
    1f18:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1f1a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1f1c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1f20:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1f22:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1f24:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1f26:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1f28:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    1f2a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1f2c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1f2e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1f30:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1f32:	bne.n	1f0a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1f34:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1f38:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1f3a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1f3c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1f40:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1f42:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1f46:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1f48:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1f4c:	orrs	r3, r7
    1f4e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1f52:	ldrh.w	r3, [r4, #392]	; 0x188
    1f56:	uxth	r3, r3
    1f58:	orr.w	r3, r3, #3840	; 0xf00
    1f5c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1f60:	lsls	r0, r2, #5
    1f62:	ldr	r3, [pc, #144]	; (1ff4 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1f64:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1f66:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1f68:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1f6a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1f6c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1f6e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1f70:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1f72:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1f76:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1f78:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1f7a:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1f7c:	bne.n	1f60 <pwm_init+0x218>
    1f7e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1f80:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1f82:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1f86:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1f8a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1f8c:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1f90:	lsls	r0, r2, #5
    1f92:	ldr	r3, [pc, #100]	; (1ff8 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1f94:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1f96:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1f98:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1f9a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1f9c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1f9e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1fa0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1fa2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1fa4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1fa6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1fa8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1faa:	bne.n	1f90 <pwm_init+0x248>
    1fac:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1fae:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1fb0:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1fb4:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1fb8:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1fba:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1fbe:	lsls	r0, r2, #5
    1fc0:	ldr	r3, [pc, #56]	; (1ffc <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1fc2:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1fc4:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1fc6:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1fc8:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1fca:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1fcc:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1fce:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1fd0:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1fd2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1fd4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1fd6:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1fd8:	bne.n	1fbe <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1fda:	pop	{r4, r5, r6, r7, pc}
    1fdc:	.word	0x400fc000
    1fe0:	.word	0x403dc000
    1fe4:	.word	0xfc030000
    1fe8:	.word	0x403e0000
    1fec:	.word	0x403e4000
    1ff0:	.word	0x403e8000
    1ff4:	.word	0x401dc000
    1ff8:	.word	0x401e0000
    1ffc:	.word	0x401e4000

00002000 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2000:	ldr	r2, [pc, #72]	; (204c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2002:	ldr	r3, [pc, #76]	; (2050 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2004:	ldr.w	r0, [r2, #544]	; 0x220
    2008:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    200c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    200e:	push	{r4, lr}
    2010:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2012:	bhi.n	201a <usb_init_serialnumber+0x1a>
    2014:	add.w	r0, r0, r0, lsl #2
    2018:	lsls	r0, r0, #1
    201a:	ldr	r4, [pc, #56]	; (2054 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    201c:	add	r1, sp, #4
    201e:	movs	r2, #10
    2020:	bl	21b4 <ultoa>
    2024:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    2026:	movs	r3, #0
    2028:	mov	r0, r4
		char c = buf[i];
    202a:	ldrb.w	r2, [r1], #1
    202e:	adds	r3, #1
		if (!c) break;
    2030:	cbz	r2, 2042 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2032:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    2034:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2038:	bne.n	202a <usb_init_serialnumber+0x2a>
    203a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    203c:	strb	r3, [r4, #0]
}
    203e:	add	sp, #16
    2040:	pop	{r4, pc}
    2042:	lsls	r3, r3, #1
    2044:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2046:	strb	r3, [r4, #0]
}
    2048:	add	sp, #16
    204a:	pop	{r4, pc}
    204c:	.word	0x401f4400
    2050:	.word	0x0098967f
    2054:	.word	0x20000620

00002058 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    2058:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    205a:	ldr	r3, [pc, #28]	; (2078 <HardwareSerial::processSerialEvents()+0x20>)
    205c:	ldrb	r4, [r3, #0]
    205e:	cbz	r4, 2074 <HardwareSerial::processSerialEvents()+0x1c>
    2060:	ldr	r5, [pc, #24]	; (207c <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    2062:	ldr.w	r3, [r5, #4]!
    2066:	cmp	r3, #0
    2068:	beq.n	2062 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    206a:	blx	r3
			if (--handlers_still_to_process == 0) return;
    206c:	subs	r3, r4, #1
    206e:	ands.w	r4, r3, #255	; 0xff
    2072:	bne.n	2062 <HardwareSerial::processSerialEvents()+0xa>
    2074:	pop	{r3, r4, r5, pc}
    2076:	nop
    2078:	.word	0x200012a8
    207c:	.word	0x20001288

00002080 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2080:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2082:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2086:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    208a:	bne.n	2168 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    208c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    208e:	bcc.n	2114 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2090:	ldr.w	r3, [r1], #4
    2094:	str.w	r3, [r0], #4
    2098:	ldr.w	r3, [r1], #4
    209c:	str.w	r3, [r0], #4
    20a0:	ldr.w	r3, [r1], #4
    20a4:	str.w	r3, [r0], #4
    20a8:	ldr.w	r3, [r1], #4
    20ac:	str.w	r3, [r0], #4
    20b0:	ldr.w	r3, [r1], #4
    20b4:	str.w	r3, [r0], #4
    20b8:	ldr.w	r3, [r1], #4
    20bc:	str.w	r3, [r0], #4
    20c0:	ldr.w	r3, [r1], #4
    20c4:	str.w	r3, [r0], #4
    20c8:	ldr.w	r3, [r1], #4
    20cc:	str.w	r3, [r0], #4
    20d0:	ldr.w	r3, [r1], #4
    20d4:	str.w	r3, [r0], #4
    20d8:	ldr.w	r3, [r1], #4
    20dc:	str.w	r3, [r0], #4
    20e0:	ldr.w	r3, [r1], #4
    20e4:	str.w	r3, [r0], #4
    20e8:	ldr.w	r3, [r1], #4
    20ec:	str.w	r3, [r0], #4
    20f0:	ldr.w	r3, [r1], #4
    20f4:	str.w	r3, [r0], #4
    20f8:	ldr.w	r3, [r1], #4
    20fc:	str.w	r3, [r0], #4
    2100:	ldr.w	r3, [r1], #4
    2104:	str.w	r3, [r0], #4
    2108:	ldr.w	r3, [r1], #4
    210c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2110:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2112:	bcs.n	2090 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2114:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2116:	bcc.n	213c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2118:	ldr.w	r3, [r1], #4
    211c:	str.w	r3, [r0], #4
    2120:	ldr.w	r3, [r1], #4
    2124:	str.w	r3, [r0], #4
    2128:	ldr.w	r3, [r1], #4
    212c:	str.w	r3, [r0], #4
    2130:	ldr.w	r3, [r1], #4
    2134:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2138:	subs	r2, #16
	bhs	.Lmid_block_loop
    213a:	bcs.n	2118 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    213c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    213e:	bcc.n	214c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2140:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2144:	str.w	r3, [r0], #4
	subs	r2, #4
    2148:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    214a:	bcs.n	2140 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    214c:	adds	r2, #4
	beq	.Ldone
    214e:	beq.n	2162 <memcpy+0xe2>

	lsls	r2, r2, #31
    2150:	lsls	r2, r2, #31
	itt ne
    2152:	itt	ne
	ldrbne  r3, [r1], #1
    2154:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2158:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    215c:	bcc.n	2162 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    215e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2160:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2162:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2164:	bx	lr
    2166:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2168:	cmp	r2, #8
	blo	.Lbyte_copy
    216a:	bcc.n	2194 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    216c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    216e:	beq.n	208c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2170:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2174:	beq.n	208c <memcpy+0xc>

	rsb	r3, #4
    2176:	rsb	r3, r3, #4
	subs	r2, r3
    217a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    217c:	lsls	r3, r3, #31
	itt ne
    217e:	itt	ne
	ldrbne  r3, [r1], #1
    2180:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2184:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2188:	bcc.n	208c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    218a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    218e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2192:	b.n	208c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2194:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2196:	bcc.n	214c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2198:	subs	r2, #1
	ldrb    r3, [r1], #1
    219a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    219e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    21a2:	bcs.n	2198 <memcpy+0x118>

	ldrb	r3, [r1]
    21a4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    21a6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    21a8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    21aa:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    21ac:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    21ae:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    21b0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    21b2:	bx	lr

000021b4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    21b4:	push	{r4, r5, r6, r7}
    21b6:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    21b8:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    21ba:	mov	r7, r6
    21bc:	b.n	21c0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    21be:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    21c0:	udiv	r3, r0, r2
    21c4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    21c8:	add.w	r4, r0, #55	; 0x37
    21cc:	cmp	r0, #9
    21ce:	add.w	r0, r0, #48	; 0x30
    21d2:	uxtb	r4, r4
    21d4:	it	ls
    21d6:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    21d8:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    21da:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    21de:	cmp	r3, #0
    21e0:	bne.n	21be <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    21e2:	adds	r2, r1, r5
    21e4:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    21e6:	cbz	r5, 21fc <ultoa+0x48>
    21e8:	adds	r3, #1
		t = buf[j];
    21ea:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    21ee:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21f0:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    21f2:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21f4:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    21f6:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21fa:	blt.n	21e8 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    21fc:	mov	r0, r1
    21fe:	pop	{r4, r5, r6, r7}
    2200:	bx	lr
    2202:	nop

00002204 <__aeabi_atexit>:
    2204:	mov	r3, r1
    2206:	mov	r1, r0
    2208:	mov	r0, r3
    220a:	b.w	2210 <__cxa_atexit>
    220e:	nop

00002210 <__cxa_atexit>:
    2210:	mov	r3, r2
    2212:	mov	r2, r1
    2214:	mov	r1, r0
    2216:	movs	r0, #2
    2218:	b.w	2f48 <__register_exitproc>

0000221c <__errno>:
    221c:	ldr	r3, [pc, #4]	; (2224 <__errno+0x8>)
    221e:	ldr	r0, [r3, #0]
    2220:	bx	lr
    2222:	nop
    2224:	.word	0x20000a60

00002228 <__libc_init_array>:
    2228:	push	{r4, r5, r6, lr}
    222a:	ldr	r6, [pc, #60]	; (2268 <__libc_init_array+0x40>)
    222c:	ldr	r5, [pc, #60]	; (226c <__libc_init_array+0x44>)
    222e:	subs	r6, r6, r5
    2230:	asrs	r6, r6, #2
    2232:	it	ne
    2234:	movne	r4, #0
    2236:	beq.n	2244 <__libc_init_array+0x1c>
    2238:	adds	r4, #1
    223a:	ldr.w	r3, [r5], #4
    223e:	blx	r3
    2240:	cmp	r6, r4
    2242:	bne.n	2238 <__libc_init_array+0x10>
    2244:	ldr	r6, [pc, #40]	; (2270 <__libc_init_array+0x48>)
    2246:	ldr	r5, [pc, #44]	; (2274 <__libc_init_array+0x4c>)
    2248:	subs	r6, r6, r5
    224a:	bl	6140 <___init_veneer>
    224e:	asrs	r6, r6, #2
    2250:	it	ne
    2252:	movne	r4, #0
    2254:	beq.n	2264 <__libc_init_array+0x3c>
    2256:	adds	r4, #1
    2258:	ldr.w	r3, [r5], #4
    225c:	blx	r3
    225e:	cmp	r6, r4
    2260:	bne.n	2256 <__libc_init_array+0x2e>
    2262:	pop	{r4, r5, r6, pc}
    2264:	pop	{r4, r5, r6, pc}
    2266:	nop
    2268:	.word	0x600016f8
    226c:	.word	0x600016f8
    2270:	.word	0x60001700
    2274:	.word	0x600016f8

00002278 <malloc>:
    2278:	ldr	r3, [pc, #8]	; (2284 <malloc+0xc>)
    227a:	mov	r1, r0
    227c:	ldr	r0, [r3, #0]
    227e:	b.w	2288 <_malloc_r>
    2282:	nop
    2284:	.word	0x20000a60

00002288 <_malloc_r>:
    2288:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    228c:	add.w	r5, r1, #11
    2290:	cmp	r5, #22
    2292:	sub	sp, #12
    2294:	mov	r6, r0
    2296:	bls.w	23d8 <_malloc_r+0x150>
    229a:	bics.w	r5, r5, #7
    229e:	bmi.w	2420 <_malloc_r+0x198>
    22a2:	cmp	r1, r5
    22a4:	bhi.w	2420 <_malloc_r+0x198>
    22a8:	bl	2988 <__malloc_lock>
    22ac:	cmp.w	r5, #504	; 0x1f8
    22b0:	bcc.w	27ec <_malloc_r+0x564>
    22b4:	lsrs	r3, r5, #9
    22b6:	beq.w	242e <_malloc_r+0x1a6>
    22ba:	cmp	r3, #4
    22bc:	bhi.w	25c6 <_malloc_r+0x33e>
    22c0:	lsrs	r0, r5, #6
    22c2:	add.w	lr, r0, #57	; 0x39
    22c6:	mov.w	r3, lr, lsl #1
    22ca:	adds	r0, #56	; 0x38
    22cc:	ldr	r7, [pc, #784]	; (25e0 <_malloc_r+0x358>)
    22ce:	add.w	r3, r7, r3, lsl #2
    22d2:	sub.w	r1, r3, #8
    22d6:	ldr	r4, [r3, #4]
    22d8:	cmp	r1, r4
    22da:	bne.n	22ec <_malloc_r+0x64>
    22dc:	b.n	2438 <_malloc_r+0x1b0>
    22de:	cmp	r2, #0
    22e0:	bge.w	243c <_malloc_r+0x1b4>
    22e4:	ldr	r4, [r4, #12]
    22e6:	cmp	r1, r4
    22e8:	beq.w	2438 <_malloc_r+0x1b0>
    22ec:	ldr	r3, [r4, #4]
    22ee:	bic.w	r3, r3, #3
    22f2:	subs	r2, r3, r5
    22f4:	cmp	r2, #15
    22f6:	ble.n	22de <_malloc_r+0x56>
    22f8:	ldr	r1, [pc, #740]	; (25e0 <_malloc_r+0x358>)
    22fa:	ldr	r4, [r7, #16]
    22fc:	add.w	lr, r1, #8
    2300:	cmp	r4, lr
    2302:	beq.w	266c <_malloc_r+0x3e4>
    2306:	ldr	r3, [r4, #4]
    2308:	bic.w	r3, r3, #3
    230c:	subs	r2, r3, r5
    230e:	cmp	r2, #15
    2310:	bgt.w	2646 <_malloc_r+0x3be>
    2314:	cmp	r2, #0
    2316:	str.w	lr, [r1, #20]
    231a:	str.w	lr, [r1, #16]
    231e:	bge.w	245e <_malloc_r+0x1d6>
    2322:	cmp.w	r3, #512	; 0x200
    2326:	bcs.w	25f8 <_malloc_r+0x370>
    232a:	lsrs	r3, r3, #3
    232c:	add.w	ip, r3, #1
    2330:	movs	r2, #1
    2332:	asrs	r3, r3, #2
    2334:	lsl.w	r3, r2, r3
    2338:	ldr	r2, [r1, #4]
    233a:	ldr.w	r8, [r1, ip, lsl #3]
    233e:	str.w	r8, [r4, #8]
    2342:	add.w	r9, r1, ip, lsl #3
    2346:	orrs	r2, r3
    2348:	sub.w	r3, r9, #8
    234c:	str	r3, [r4, #12]
    234e:	str	r2, [r1, #4]
    2350:	str.w	r4, [r1, ip, lsl #3]
    2354:	str.w	r4, [r8, #12]
    2358:	asrs	r3, r0, #2
    235a:	movs	r4, #1
    235c:	lsls	r4, r3
    235e:	cmp	r4, r2
    2360:	bhi.w	2478 <_malloc_r+0x1f0>
    2364:	tst	r4, r2
    2366:	bne.n	2376 <_malloc_r+0xee>
    2368:	bic.w	r0, r0, #3
    236c:	lsls	r4, r4, #1
    236e:	tst	r4, r2
    2370:	add.w	r0, r0, #4
    2374:	beq.n	236c <_malloc_r+0xe4>
    2376:	add.w	r9, r7, r0, lsl #3
    237a:	mov	ip, r9
    237c:	mov	r8, r0
    237e:	ldr.w	r1, [ip, #12]
    2382:	cmp	ip, r1
    2384:	bne.n	2396 <_malloc_r+0x10e>
    2386:	b.n	2670 <_malloc_r+0x3e8>
    2388:	cmp	r2, #0
    238a:	bge.w	2690 <_malloc_r+0x408>
    238e:	ldr	r1, [r1, #12]
    2390:	cmp	ip, r1
    2392:	beq.w	2670 <_malloc_r+0x3e8>
    2396:	ldr	r3, [r1, #4]
    2398:	bic.w	r3, r3, #3
    239c:	subs	r2, r3, r5
    239e:	cmp	r2, #15
    23a0:	ble.n	2388 <_malloc_r+0x100>
    23a2:	mov	r4, r1
    23a4:	ldr.w	ip, [r1, #12]
    23a8:	ldr.w	r8, [r4, #8]!
    23ac:	adds	r3, r1, r5
    23ae:	orr.w	r5, r5, #1
    23b2:	str	r5, [r1, #4]
    23b4:	orr.w	r1, r2, #1
    23b8:	str.w	ip, [r8, #12]
    23bc:	mov	r0, r6
    23be:	str.w	r8, [ip, #8]
    23c2:	str	r3, [r7, #20]
    23c4:	str	r3, [r7, #16]
    23c6:	str.w	lr, [r3, #12]
    23ca:	str.w	lr, [r3, #8]
    23ce:	str	r1, [r3, #4]
    23d0:	str	r2, [r3, r2]
    23d2:	bl	298c <__malloc_unlock>
    23d6:	b.n	2418 <_malloc_r+0x190>
    23d8:	cmp	r1, #16
    23da:	bhi.n	2420 <_malloc_r+0x198>
    23dc:	bl	2988 <__malloc_lock>
    23e0:	movs	r5, #16
    23e2:	movs	r3, #6
    23e4:	movs	r0, #2
    23e6:	ldr	r7, [pc, #504]	; (25e0 <_malloc_r+0x358>)
    23e8:	add.w	r3, r7, r3, lsl #2
    23ec:	sub.w	r2, r3, #8
    23f0:	ldr	r4, [r3, #4]
    23f2:	cmp	r4, r2
    23f4:	beq.w	2682 <_malloc_r+0x3fa>
    23f8:	ldr	r3, [r4, #4]
    23fa:	ldr	r1, [r4, #12]
    23fc:	ldr	r5, [r4, #8]
    23fe:	bic.w	r3, r3, #3
    2402:	add	r3, r4
    2404:	mov	r0, r6
    2406:	ldr	r2, [r3, #4]
    2408:	str	r1, [r5, #12]
    240a:	orr.w	r2, r2, #1
    240e:	str	r5, [r1, #8]
    2410:	str	r2, [r3, #4]
    2412:	bl	298c <__malloc_unlock>
    2416:	adds	r4, #8
    2418:	mov	r0, r4
    241a:	add	sp, #12
    241c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2420:	movs	r4, #0
    2422:	movs	r3, #12
    2424:	mov	r0, r4
    2426:	str	r3, [r6, #0]
    2428:	add	sp, #12
    242a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    242e:	movs	r3, #128	; 0x80
    2430:	mov.w	lr, #64	; 0x40
    2434:	movs	r0, #63	; 0x3f
    2436:	b.n	22cc <_malloc_r+0x44>
    2438:	mov	r0, lr
    243a:	b.n	22f8 <_malloc_r+0x70>
    243c:	add	r3, r4
    243e:	ldr	r1, [r4, #12]
    2440:	ldr	r2, [r3, #4]
    2442:	ldr	r5, [r4, #8]
    2444:	orr.w	r2, r2, #1
    2448:	str	r1, [r5, #12]
    244a:	mov	r0, r6
    244c:	str	r5, [r1, #8]
    244e:	str	r2, [r3, #4]
    2450:	bl	298c <__malloc_unlock>
    2454:	adds	r4, #8
    2456:	mov	r0, r4
    2458:	add	sp, #12
    245a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    245e:	add	r3, r4
    2460:	mov	r0, r6
    2462:	ldr	r2, [r3, #4]
    2464:	orr.w	r2, r2, #1
    2468:	str	r2, [r3, #4]
    246a:	bl	298c <__malloc_unlock>
    246e:	adds	r4, #8
    2470:	mov	r0, r4
    2472:	add	sp, #12
    2474:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2478:	ldr	r4, [r7, #8]
    247a:	ldr	r3, [r4, #4]
    247c:	bic.w	r8, r3, #3
    2480:	cmp	r8, r5
    2482:	bcc.n	248e <_malloc_r+0x206>
    2484:	rsb	r3, r5, r8
    2488:	cmp	r3, #15
    248a:	bgt.w	25a6 <_malloc_r+0x31e>
    248e:	ldr	r3, [pc, #340]	; (25e4 <_malloc_r+0x35c>)
    2490:	ldr.w	r9, [pc, #352]	; 25f4 <_malloc_r+0x36c>
    2494:	ldr	r2, [r3, #0]
    2496:	ldr.w	r3, [r9]
    249a:	adds	r3, #1
    249c:	add	r2, r5
    249e:	add.w	sl, r4, r8
    24a2:	beq.w	2766 <_malloc_r+0x4de>
    24a6:	add.w	r2, r2, #4096	; 0x1000
    24aa:	adds	r2, #15
    24ac:	bic.w	r2, r2, #4080	; 0xff0
    24b0:	bic.w	r2, r2, #15
    24b4:	mov	r1, r2
    24b6:	mov	r0, r6
    24b8:	str	r2, [sp, #4]
    24ba:	bl	2d70 <_sbrk_r>
    24be:	cmp.w	r0, #4294967295
    24c2:	mov	fp, r0
    24c4:	ldr	r2, [sp, #4]
    24c6:	beq.w	277a <_malloc_r+0x4f2>
    24ca:	cmp	sl, r0
    24cc:	bhi.w	26c8 <_malloc_r+0x440>
    24d0:	ldr	r3, [pc, #276]	; (25e8 <_malloc_r+0x360>)
    24d2:	ldr	r1, [r3, #0]
    24d4:	cmp	sl, fp
    24d6:	add	r1, r2
    24d8:	str	r1, [r3, #0]
    24da:	beq.w	2784 <_malloc_r+0x4fc>
    24de:	ldr.w	r0, [r9]
    24e2:	ldr.w	lr, [pc, #272]	; 25f4 <_malloc_r+0x36c>
    24e6:	adds	r0, #1
    24e8:	ittet	ne
    24ea:	rsbne	sl, sl, fp
    24ee:	addne	r1, sl
    24f0:	streq.w	fp, [lr]
    24f4:	strne	r1, [r3, #0]
    24f6:	ands.w	r1, fp, #7
    24fa:	beq.w	272c <_malloc_r+0x4a4>
    24fe:	rsb	r0, r1, #8
    2502:	rsb	r1, r1, #4096	; 0x1000
    2506:	add	fp, r0
    2508:	adds	r1, #8
    250a:	add	r2, fp
    250c:	ubfx	r2, r2, #0, #12
    2510:	rsb	r9, r2, r1
    2514:	mov	r1, r9
    2516:	mov	r0, r6
    2518:	str	r3, [sp, #4]
    251a:	bl	2d70 <_sbrk_r>
    251e:	adds	r3, r0, #1
    2520:	ldr	r3, [sp, #4]
    2522:	beq.w	27a4 <_malloc_r+0x51c>
    2526:	rsb	r2, fp, r0
    252a:	add	r2, r9
    252c:	orr.w	r2, r2, #1
    2530:	ldr	r1, [r3, #0]
    2532:	str.w	fp, [r7, #8]
    2536:	add	r1, r9
    2538:	cmp	r4, r7
    253a:	str.w	r2, [fp, #4]
    253e:	str	r1, [r3, #0]
    2540:	ldr.w	r9, [pc, #164]	; 25e8 <_malloc_r+0x360>
    2544:	beq.n	2574 <_malloc_r+0x2ec>
    2546:	cmp.w	r8, #15
    254a:	bls.w	2748 <_malloc_r+0x4c0>
    254e:	ldr	r2, [r4, #4]
    2550:	sub.w	r3, r8, #12
    2554:	bic.w	r3, r3, #7
    2558:	adds	r0, r4, r3
    255a:	and.w	r2, r2, #1
    255e:	mov.w	lr, #5
    2562:	orrs	r2, r3
    2564:	cmp	r3, #15
    2566:	str	r2, [r4, #4]
    2568:	str.w	lr, [r0, #4]
    256c:	str.w	lr, [r0, #8]
    2570:	bhi.w	27ac <_malloc_r+0x524>
    2574:	ldr	r3, [pc, #116]	; (25ec <_malloc_r+0x364>)
    2576:	ldr	r4, [r7, #8]
    2578:	ldr	r2, [r3, #0]
    257a:	cmp	r1, r2
    257c:	it	hi
    257e:	strhi	r1, [r3, #0]
    2580:	ldr	r3, [pc, #108]	; (25f0 <_malloc_r+0x368>)
    2582:	ldr	r2, [r3, #0]
    2584:	cmp	r1, r2
    2586:	ldr	r2, [r4, #4]
    2588:	it	hi
    258a:	strhi	r1, [r3, #0]
    258c:	bic.w	r2, r2, #3
    2590:	cmp	r5, r2
    2592:	sub.w	r3, r2, r5
    2596:	bhi.n	259c <_malloc_r+0x314>
    2598:	cmp	r3, #15
    259a:	bgt.n	25a6 <_malloc_r+0x31e>
    259c:	mov	r0, r6
    259e:	bl	298c <__malloc_unlock>
    25a2:	movs	r4, #0
    25a4:	b.n	2418 <_malloc_r+0x190>
    25a6:	adds	r2, r4, r5
    25a8:	orr.w	r3, r3, #1
    25ac:	orr.w	r5, r5, #1
    25b0:	str	r5, [r4, #4]
    25b2:	mov	r0, r6
    25b4:	str	r2, [r7, #8]
    25b6:	str	r3, [r2, #4]
    25b8:	bl	298c <__malloc_unlock>
    25bc:	adds	r4, #8
    25be:	mov	r0, r4
    25c0:	add	sp, #12
    25c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25c6:	cmp	r3, #20
    25c8:	bls.n	26ae <_malloc_r+0x426>
    25ca:	cmp	r3, #84	; 0x54
    25cc:	bhi.w	2718 <_malloc_r+0x490>
    25d0:	lsrs	r0, r5, #12
    25d2:	add.w	lr, r0, #111	; 0x6f
    25d6:	mov.w	r3, lr, lsl #1
    25da:	adds	r0, #110	; 0x6e
    25dc:	b.n	22cc <_malloc_r+0x44>
    25de:	nop
    25e0:	.word	0x20000bd0
    25e4:	.word	0x200012b4
    25e8:	.word	0x200012b8
    25ec:	.word	0x200012b0
    25f0:	.word	0x200012ac
    25f4:	.word	0x20000fdc
    25f8:	lsrs	r2, r3, #9
    25fa:	cmp	r2, #4
    25fc:	bls.n	26bc <_malloc_r+0x434>
    25fe:	cmp	r2, #20
    2600:	bhi.w	276a <_malloc_r+0x4e2>
    2604:	add.w	r1, r2, #92	; 0x5c
    2608:	lsls	r1, r1, #1
    260a:	adds	r2, #91	; 0x5b
    260c:	add.w	ip, r7, r1, lsl #2
    2610:	ldr.w	r1, [r7, r1, lsl #2]
    2614:	ldr.w	r8, [pc, #476]	; 27f4 <_malloc_r+0x56c>
    2618:	sub.w	ip, ip, #8
    261c:	cmp	ip, r1
    261e:	beq.w	2732 <_malloc_r+0x4aa>
    2622:	ldr	r2, [r1, #4]
    2624:	bic.w	r2, r2, #3
    2628:	cmp	r3, r2
    262a:	bcs.n	2632 <_malloc_r+0x3aa>
    262c:	ldr	r1, [r1, #8]
    262e:	cmp	ip, r1
    2630:	bne.n	2622 <_malloc_r+0x39a>
    2632:	ldr.w	ip, [r1, #12]
    2636:	ldr	r2, [r7, #4]
    2638:	str.w	ip, [r4, #12]
    263c:	str	r1, [r4, #8]
    263e:	str.w	r4, [ip, #8]
    2642:	str	r4, [r1, #12]
    2644:	b.n	2358 <_malloc_r+0xd0>
    2646:	adds	r3, r4, r5
    2648:	orr.w	r7, r2, #1
    264c:	orr.w	r5, r5, #1
    2650:	str	r5, [r4, #4]
    2652:	mov	r0, r6
    2654:	str	r3, [r1, #20]
    2656:	str	r3, [r1, #16]
    2658:	str.w	lr, [r3, #12]
    265c:	str.w	lr, [r3, #8]
    2660:	str	r7, [r3, #4]
    2662:	str	r2, [r3, r2]
    2664:	adds	r4, #8
    2666:	bl	298c <__malloc_unlock>
    266a:	b.n	2418 <_malloc_r+0x190>
    266c:	ldr	r2, [r1, #4]
    266e:	b.n	2358 <_malloc_r+0xd0>
    2670:	add.w	r8, r8, #1
    2674:	tst.w	r8, #3
    2678:	add.w	ip, ip, #8
    267c:	bne.w	237e <_malloc_r+0xf6>
    2680:	b.n	26e4 <_malloc_r+0x45c>
    2682:	ldr	r4, [r3, #12]
    2684:	cmp	r3, r4
    2686:	it	eq
    2688:	addeq	r0, #2
    268a:	beq.w	22f8 <_malloc_r+0x70>
    268e:	b.n	23f8 <_malloc_r+0x170>
    2690:	add	r3, r1
    2692:	mov	r4, r1
    2694:	ldr	r2, [r3, #4]
    2696:	ldr	r1, [r1, #12]
    2698:	ldr.w	r5, [r4, #8]!
    269c:	orr.w	r2, r2, #1
    26a0:	str	r2, [r3, #4]
    26a2:	mov	r0, r6
    26a4:	str	r1, [r5, #12]
    26a6:	str	r5, [r1, #8]
    26a8:	bl	298c <__malloc_unlock>
    26ac:	b.n	2418 <_malloc_r+0x190>
    26ae:	add.w	lr, r3, #92	; 0x5c
    26b2:	add.w	r0, r3, #91	; 0x5b
    26b6:	mov.w	r3, lr, lsl #1
    26ba:	b.n	22cc <_malloc_r+0x44>
    26bc:	lsrs	r2, r3, #6
    26be:	add.w	r1, r2, #57	; 0x39
    26c2:	lsls	r1, r1, #1
    26c4:	adds	r2, #56	; 0x38
    26c6:	b.n	260c <_malloc_r+0x384>
    26c8:	cmp	r4, r7
    26ca:	ldr	r3, [pc, #296]	; (27f4 <_malloc_r+0x56c>)
    26cc:	beq.w	24d0 <_malloc_r+0x248>
    26d0:	ldr	r4, [r3, #8]
    26d2:	ldr	r2, [r4, #4]
    26d4:	bic.w	r2, r2, #3
    26d8:	b.n	2590 <_malloc_r+0x308>
    26da:	ldr.w	r3, [r9], #-8
    26de:	cmp	r9, r3
    26e0:	bne.w	27e8 <_malloc_r+0x560>
    26e4:	tst.w	r0, #3
    26e8:	add.w	r0, r0, #4294967295
    26ec:	bne.n	26da <_malloc_r+0x452>
    26ee:	ldr	r3, [r7, #4]
    26f0:	bic.w	r3, r3, r4
    26f4:	str	r3, [r7, #4]
    26f6:	lsls	r4, r4, #1
    26f8:	cmp	r4, r3
    26fa:	bhi.w	2478 <_malloc_r+0x1f0>
    26fe:	cmp	r4, #0
    2700:	beq.w	2478 <_malloc_r+0x1f0>
    2704:	tst	r4, r3
    2706:	mov	r0, r8
    2708:	bne.w	2376 <_malloc_r+0xee>
    270c:	lsls	r4, r4, #1
    270e:	tst	r4, r3
    2710:	add.w	r0, r0, #4
    2714:	beq.n	270c <_malloc_r+0x484>
    2716:	b.n	2376 <_malloc_r+0xee>
    2718:	cmp.w	r3, #340	; 0x154
    271c:	bhi.n	2750 <_malloc_r+0x4c8>
    271e:	lsrs	r0, r5, #15
    2720:	add.w	lr, r0, #120	; 0x78
    2724:	mov.w	r3, lr, lsl #1
    2728:	adds	r0, #119	; 0x77
    272a:	b.n	22cc <_malloc_r+0x44>
    272c:	mov.w	r1, #4096	; 0x1000
    2730:	b.n	250a <_malloc_r+0x282>
    2732:	movs	r1, #1
    2734:	ldr.w	r3, [r8, #4]
    2738:	asrs	r2, r2, #2
    273a:	lsl.w	r2, r1, r2
    273e:	orrs	r2, r3
    2740:	str.w	r2, [r8, #4]
    2744:	mov	r1, ip
    2746:	b.n	2638 <_malloc_r+0x3b0>
    2748:	movs	r3, #1
    274a:	str.w	r3, [fp, #4]
    274e:	b.n	259c <_malloc_r+0x314>
    2750:	movw	r2, #1364	; 0x554
    2754:	cmp	r3, r2
    2756:	bhi.n	279a <_malloc_r+0x512>
    2758:	lsrs	r0, r5, #18
    275a:	add.w	lr, r0, #125	; 0x7d
    275e:	mov.w	r3, lr, lsl #1
    2762:	adds	r0, #124	; 0x7c
    2764:	b.n	22cc <_malloc_r+0x44>
    2766:	adds	r2, #16
    2768:	b.n	24b4 <_malloc_r+0x22c>
    276a:	cmp	r2, #84	; 0x54
    276c:	bhi.n	27bc <_malloc_r+0x534>
    276e:	lsrs	r2, r3, #12
    2770:	add.w	r1, r2, #111	; 0x6f
    2774:	lsls	r1, r1, #1
    2776:	adds	r2, #110	; 0x6e
    2778:	b.n	260c <_malloc_r+0x384>
    277a:	ldr	r4, [r7, #8]
    277c:	ldr	r2, [r4, #4]
    277e:	bic.w	r2, r2, #3
    2782:	b.n	2590 <_malloc_r+0x308>
    2784:	ubfx	r0, sl, #0, #12
    2788:	cmp	r0, #0
    278a:	bne.w	24de <_malloc_r+0x256>
    278e:	add	r2, r8
    2790:	ldr	r3, [r7, #8]
    2792:	orr.w	r2, r2, #1
    2796:	str	r2, [r3, #4]
    2798:	b.n	2574 <_malloc_r+0x2ec>
    279a:	movs	r3, #254	; 0xfe
    279c:	mov.w	lr, #127	; 0x7f
    27a0:	movs	r0, #126	; 0x7e
    27a2:	b.n	22cc <_malloc_r+0x44>
    27a4:	movs	r2, #1
    27a6:	mov.w	r9, #0
    27aa:	b.n	2530 <_malloc_r+0x2a8>
    27ac:	add.w	r1, r4, #8
    27b0:	mov	r0, r6
    27b2:	bl	3088 <_free_r>
    27b6:	ldr.w	r1, [r9]
    27ba:	b.n	2574 <_malloc_r+0x2ec>
    27bc:	cmp.w	r2, #340	; 0x154
    27c0:	bhi.n	27ce <_malloc_r+0x546>
    27c2:	lsrs	r2, r3, #15
    27c4:	add.w	r1, r2, #120	; 0x78
    27c8:	lsls	r1, r1, #1
    27ca:	adds	r2, #119	; 0x77
    27cc:	b.n	260c <_malloc_r+0x384>
    27ce:	movw	r1, #1364	; 0x554
    27d2:	cmp	r2, r1
    27d4:	bhi.n	27e2 <_malloc_r+0x55a>
    27d6:	lsrs	r2, r3, #18
    27d8:	add.w	r1, r2, #125	; 0x7d
    27dc:	lsls	r1, r1, #1
    27de:	adds	r2, #124	; 0x7c
    27e0:	b.n	260c <_malloc_r+0x384>
    27e2:	movs	r1, #254	; 0xfe
    27e4:	movs	r2, #126	; 0x7e
    27e6:	b.n	260c <_malloc_r+0x384>
    27e8:	ldr	r3, [r7, #4]
    27ea:	b.n	26f6 <_malloc_r+0x46e>
    27ec:	lsrs	r0, r5, #3
    27ee:	adds	r3, r0, #1
    27f0:	lsls	r3, r3, #1
    27f2:	b.n	23e6 <_malloc_r+0x15e>
    27f4:	.word	0x20000bd0

000027f8 <__ascii_mbtowc>:
    27f8:	sub	sp, #8
    27fa:	cbz	r1, 2810 <__ascii_mbtowc+0x18>
    27fc:	cbz	r2, 2816 <__ascii_mbtowc+0x1e>
    27fe:	cbz	r3, 281c <__ascii_mbtowc+0x24>
    2800:	ldrb	r3, [r2, #0]
    2802:	str	r3, [r1, #0]
    2804:	ldrb	r2, [r2, #0]
    2806:	adds	r0, r2, #0
    2808:	it	ne
    280a:	movne	r0, #1
    280c:	add	sp, #8
    280e:	bx	lr
    2810:	add	r1, sp, #4
    2812:	cmp	r2, #0
    2814:	bne.n	27fe <__ascii_mbtowc+0x6>
    2816:	mov	r0, r2
    2818:	add	sp, #8
    281a:	bx	lr
    281c:	mvn.w	r0, #1
    2820:	b.n	280c <__ascii_mbtowc+0x14>
    2822:	nop

00002824 <memmove>:
    2824:	cmp	r0, r1
    2826:	push	{r4, r5, r6, r7, lr}
    2828:	bls.n	2846 <memmove+0x22>
    282a:	adds	r3, r1, r2
    282c:	cmp	r0, r3
    282e:	bcs.n	2846 <memmove+0x22>
    2830:	adds	r1, r0, r2
    2832:	cmp	r2, #0
    2834:	beq.n	28da <memmove+0xb6>
    2836:	subs	r2, r3, r2
    2838:	ldrb.w	r4, [r3, #-1]!
    283c:	strb.w	r4, [r1, #-1]!
    2840:	cmp	r3, r2
    2842:	bne.n	2838 <memmove+0x14>
    2844:	pop	{r4, r5, r6, r7, pc}
    2846:	cmp	r2, #15
    2848:	bls.n	28dc <memmove+0xb8>
    284a:	orr.w	r3, r1, r0
    284e:	lsls	r3, r3, #30
    2850:	bne.n	28e0 <memmove+0xbc>
    2852:	add.w	r4, r0, #16
    2856:	add.w	r3, r1, #16
    285a:	mov	r5, r2
    285c:	ldr.w	r6, [r3, #-16]
    2860:	str.w	r6, [r4, #-16]
    2864:	ldr.w	r6, [r3, #-12]
    2868:	str.w	r6, [r4, #-12]
    286c:	ldr.w	r6, [r3, #-8]
    2870:	str.w	r6, [r4, #-8]
    2874:	subs	r5, #16
    2876:	ldr.w	r6, [r3, #-4]
    287a:	str.w	r6, [r4, #-4]
    287e:	cmp	r5, #15
    2880:	add.w	r3, r3, #16
    2884:	add.w	r4, r4, #16
    2888:	bhi.n	285c <memmove+0x38>
    288a:	sub.w	r3, r2, #16
    288e:	bic.w	r3, r3, #15
    2892:	and.w	lr, r2, #15
    2896:	adds	r3, #16
    2898:	cmp.w	lr, #3
    289c:	add	r1, r3
    289e:	add	r3, r0
    28a0:	bls.n	28e6 <memmove+0xc2>
    28a2:	subs	r6, r3, #4
    28a4:	mov	r5, r1
    28a6:	mov	r4, lr
    28a8:	subs	r4, #4
    28aa:	ldr.w	r7, [r5], #4
    28ae:	str.w	r7, [r6, #4]!
    28b2:	cmp	r4, #3
    28b4:	bhi.n	28a8 <memmove+0x84>
    28b6:	sub.w	r4, lr, #4
    28ba:	bic.w	r4, r4, #3
    28be:	adds	r4, #4
    28c0:	add	r3, r4
    28c2:	add	r1, r4
    28c4:	and.w	r2, r2, #3
    28c8:	cbz	r2, 28e4 <memmove+0xc0>
    28ca:	subs	r3, #1
    28cc:	add	r2, r1
    28ce:	ldrb.w	r4, [r1], #1
    28d2:	strb.w	r4, [r3, #1]!
    28d6:	cmp	r2, r1
    28d8:	bne.n	28ce <memmove+0xaa>
    28da:	pop	{r4, r5, r6, r7, pc}
    28dc:	mov	r3, r0
    28de:	b.n	28c8 <memmove+0xa4>
    28e0:	mov	r3, r0
    28e2:	b.n	28ca <memmove+0xa6>
    28e4:	pop	{r4, r5, r6, r7, pc}
    28e6:	mov	r2, lr
    28e8:	b.n	28c8 <memmove+0xa4>
    28ea:	nop

000028ec <memset>:
    28ec:	push	{r4, r5, r6}
    28ee:	lsls	r4, r0, #30
    28f0:	beq.n	2980 <memset+0x94>
    28f2:	subs	r4, r2, #1
    28f4:	cmp	r2, #0
    28f6:	beq.n	297c <memset+0x90>
    28f8:	uxtb	r5, r1
    28fa:	mov	r3, r0
    28fc:	b.n	2904 <memset+0x18>
    28fe:	subs	r2, r4, #1
    2900:	cbz	r4, 297c <memset+0x90>
    2902:	mov	r4, r2
    2904:	strb.w	r5, [r3], #1
    2908:	lsls	r2, r3, #30
    290a:	bne.n	28fe <memset+0x12>
    290c:	cmp	r4, #3
    290e:	bls.n	296e <memset+0x82>
    2910:	uxtb	r5, r1
    2912:	orr.w	r5, r5, r5, lsl #8
    2916:	cmp	r4, #15
    2918:	orr.w	r5, r5, r5, lsl #16
    291c:	bls.n	2952 <memset+0x66>
    291e:	add.w	r2, r3, #16
    2922:	mov	r6, r4
    2924:	subs	r6, #16
    2926:	cmp	r6, #15
    2928:	str.w	r5, [r2, #-16]
    292c:	str.w	r5, [r2, #-12]
    2930:	str.w	r5, [r2, #-8]
    2934:	str.w	r5, [r2, #-4]
    2938:	add.w	r2, r2, #16
    293c:	bhi.n	2924 <memset+0x38>
    293e:	sub.w	r2, r4, #16
    2942:	bic.w	r2, r2, #15
    2946:	and.w	r4, r4, #15
    294a:	adds	r2, #16
    294c:	cmp	r4, #3
    294e:	add	r3, r2
    2950:	bls.n	296e <memset+0x82>
    2952:	mov	r6, r3
    2954:	mov	r2, r4
    2956:	subs	r2, #4
    2958:	cmp	r2, #3
    295a:	str.w	r5, [r6], #4
    295e:	bhi.n	2956 <memset+0x6a>
    2960:	subs	r2, r4, #4
    2962:	bic.w	r2, r2, #3
    2966:	adds	r2, #4
    2968:	add	r3, r2
    296a:	and.w	r4, r4, #3
    296e:	cbz	r4, 297c <memset+0x90>
    2970:	uxtb	r1, r1
    2972:	add	r4, r3
    2974:	strb.w	r1, [r3], #1
    2978:	cmp	r3, r4
    297a:	bne.n	2974 <memset+0x88>
    297c:	pop	{r4, r5, r6}
    297e:	bx	lr
    2980:	mov	r4, r2
    2982:	mov	r3, r0
    2984:	b.n	290c <memset+0x20>
    2986:	nop

00002988 <__malloc_lock>:
    2988:	bx	lr
    298a:	nop

0000298c <__malloc_unlock>:
    298c:	bx	lr
    298e:	nop

00002990 <_realloc_r>:
    2990:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2994:	mov	r7, r2
    2996:	sub	sp, #12
    2998:	cmp	r1, #0
    299a:	beq.w	2b20 <_realloc_r+0x190>
    299e:	mov	r6, r1
    29a0:	mov	r9, r0
    29a2:	add.w	r5, r7, #11
    29a6:	bl	2988 <__malloc_lock>
    29aa:	ldr.w	lr, [r6, #-4]
    29ae:	cmp	r5, #22
    29b0:	bic.w	r4, lr, #3
    29b4:	sub.w	r8, r6, #8
    29b8:	bhi.n	2a3c <_realloc_r+0xac>
    29ba:	movs	r2, #16
    29bc:	mov	r5, r2
    29be:	cmp	r7, r5
    29c0:	bhi.n	2a46 <_realloc_r+0xb6>
    29c2:	cmp	r4, r2
    29c4:	bge.n	2ab2 <_realloc_r+0x122>
    29c6:	ldr	r3, [pc, #804]	; (2cec <_realloc_r+0x35c>)
    29c8:	ldr	r1, [r3, #8]
    29ca:	add.w	r0, r8, r4
    29ce:	cmp	r0, r1
    29d0:	ldr	r1, [r0, #4]
    29d2:	beq.w	2b88 <_realloc_r+0x1f8>
    29d6:	bic.w	r3, r1, #1
    29da:	add	r3, r0
    29dc:	ldr	r3, [r3, #4]
    29de:	lsls	r3, r3, #31
    29e0:	bpl.n	2ade <_realloc_r+0x14e>
    29e2:	tst.w	lr, #1
    29e6:	beq.n	2a54 <_realloc_r+0xc4>
    29e8:	mov	r1, r7
    29ea:	mov	r0, r9
    29ec:	bl	2288 <_malloc_r>
    29f0:	mov	r7, r0
    29f2:	cbz	r0, 2a2e <_realloc_r+0x9e>
    29f4:	ldr.w	r3, [r6, #-4]
    29f8:	bic.w	r3, r3, #1
    29fc:	add	r3, r8
    29fe:	sub.w	r2, r0, #8
    2a02:	cmp	r2, r3
    2a04:	beq.w	2c90 <_realloc_r+0x300>
    2a08:	subs	r2, r4, #4
    2a0a:	cmp	r2, #36	; 0x24
    2a0c:	bhi.w	2c72 <_realloc_r+0x2e2>
    2a10:	cmp	r2, #19
    2a12:	bhi.w	2c1e <_realloc_r+0x28e>
    2a16:	mov	r3, r0
    2a18:	mov	r2, r6
    2a1a:	ldr	r1, [r2, #0]
    2a1c:	str	r1, [r3, #0]
    2a1e:	ldr	r1, [r2, #4]
    2a20:	str	r1, [r3, #4]
    2a22:	ldr	r2, [r2, #8]
    2a24:	str	r2, [r3, #8]
    2a26:	mov	r1, r6
    2a28:	mov	r0, r9
    2a2a:	bl	3088 <_free_r>
    2a2e:	mov	r0, r9
    2a30:	bl	298c <__malloc_unlock>
    2a34:	mov	r0, r7
    2a36:	add	sp, #12
    2a38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a3c:	bic.w	r5, r5, #7
    2a40:	cmp	r5, #0
    2a42:	mov	r2, r5
    2a44:	bge.n	29be <_realloc_r+0x2e>
    2a46:	movs	r3, #12
    2a48:	movs	r0, #0
    2a4a:	str.w	r3, [r9]
    2a4e:	add	sp, #12
    2a50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a54:	ldr.w	r3, [r6, #-8]
    2a58:	rsb	sl, r3, r8
    2a5c:	ldr.w	r3, [sl, #4]
    2a60:	bic.w	ip, r3, #3
    2a64:	add.w	r3, r4, ip
    2a68:	cmp	r3, r2
    2a6a:	blt.n	29e8 <_realloc_r+0x58>
    2a6c:	mov	r7, sl
    2a6e:	ldr.w	r1, [sl, #12]
    2a72:	ldr.w	r0, [r7, #8]!
    2a76:	subs	r2, r4, #4
    2a78:	cmp	r2, #36	; 0x24
    2a7a:	str	r1, [r0, #12]
    2a7c:	str	r0, [r1, #8]
    2a7e:	bhi.w	2cb0 <_realloc_r+0x320>
    2a82:	cmp	r2, #19
    2a84:	bls.w	2cac <_realloc_r+0x31c>
    2a88:	ldr	r1, [r6, #0]
    2a8a:	str.w	r1, [sl, #8]
    2a8e:	ldr	r1, [r6, #4]
    2a90:	str.w	r1, [sl, #12]
    2a94:	cmp	r2, #27
    2a96:	bhi.w	2cf0 <_realloc_r+0x360>
    2a9a:	adds	r6, #8
    2a9c:	add.w	r2, sl, #16
    2aa0:	ldr	r1, [r6, #0]
    2aa2:	str	r1, [r2, #0]
    2aa4:	ldr	r1, [r6, #4]
    2aa6:	str	r1, [r2, #4]
    2aa8:	ldr	r1, [r6, #8]
    2aaa:	str	r1, [r2, #8]
    2aac:	mov	r6, r7
    2aae:	mov	r4, r3
    2ab0:	mov	r8, sl
    2ab2:	subs	r3, r4, r5
    2ab4:	cmp	r3, #15
    2ab6:	bhi.n	2af4 <_realloc_r+0x164>
    2ab8:	ldr.w	r3, [r8, #4]
    2abc:	and.w	r3, r3, #1
    2ac0:	orrs	r3, r4
    2ac2:	add	r4, r8
    2ac4:	str.w	r3, [r8, #4]
    2ac8:	ldr	r3, [r4, #4]
    2aca:	orr.w	r3, r3, #1
    2ace:	str	r3, [r4, #4]
    2ad0:	mov	r0, r9
    2ad2:	bl	298c <__malloc_unlock>
    2ad6:	mov	r0, r6
    2ad8:	add	sp, #12
    2ada:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ade:	bic.w	r1, r1, #3
    2ae2:	add	r1, r4
    2ae4:	cmp	r1, r2
    2ae6:	blt.n	2b2c <_realloc_r+0x19c>
    2ae8:	ldr	r3, [r0, #12]
    2aea:	ldr	r2, [r0, #8]
    2aec:	mov	r4, r1
    2aee:	str	r3, [r2, #12]
    2af0:	str	r2, [r3, #8]
    2af2:	b.n	2ab2 <_realloc_r+0x122>
    2af4:	ldr.w	r2, [r8, #4]
    2af8:	add.w	r1, r8, r5
    2afc:	and.w	r2, r2, #1
    2b00:	orrs	r5, r2
    2b02:	orr.w	r2, r3, #1
    2b06:	add	r3, r1
    2b08:	str.w	r5, [r8, #4]
    2b0c:	str	r2, [r1, #4]
    2b0e:	ldr	r2, [r3, #4]
    2b10:	orr.w	r2, r2, #1
    2b14:	adds	r1, #8
    2b16:	str	r2, [r3, #4]
    2b18:	mov	r0, r9
    2b1a:	bl	3088 <_free_r>
    2b1e:	b.n	2ad0 <_realloc_r+0x140>
    2b20:	mov	r1, r2
    2b22:	add	sp, #12
    2b24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b28:	b.w	2288 <_malloc_r>
    2b2c:	tst.w	lr, #1
    2b30:	bne.w	29e8 <_realloc_r+0x58>
    2b34:	ldr.w	r3, [r6, #-8]
    2b38:	rsb	sl, r3, r8
    2b3c:	ldr.w	r3, [sl, #4]
    2b40:	bic.w	ip, r3, #3
    2b44:	add.w	lr, r1, ip
    2b48:	cmp	lr, r2
    2b4a:	blt.n	2a64 <_realloc_r+0xd4>
    2b4c:	ldr	r3, [r0, #12]
    2b4e:	ldr	r2, [r0, #8]
    2b50:	mov	r7, sl
    2b52:	str	r3, [r2, #12]
    2b54:	str	r2, [r3, #8]
    2b56:	ldr.w	r1, [r7, #8]!
    2b5a:	ldr.w	r3, [sl, #12]
    2b5e:	str	r3, [r1, #12]
    2b60:	subs	r2, r4, #4
    2b62:	cmp	r2, #36	; 0x24
    2b64:	str	r1, [r3, #8]
    2b66:	bhi.w	2c9c <_realloc_r+0x30c>
    2b6a:	cmp	r2, #19
    2b6c:	bls.n	2c34 <_realloc_r+0x2a4>
    2b6e:	ldr	r3, [r6, #0]
    2b70:	str.w	r3, [sl, #8]
    2b74:	ldr	r3, [r6, #4]
    2b76:	str.w	r3, [sl, #12]
    2b7a:	cmp	r2, #27
    2b7c:	bhi.w	2cc0 <_realloc_r+0x330>
    2b80:	adds	r6, #8
    2b82:	add.w	r3, sl, #16
    2b86:	b.n	2c36 <_realloc_r+0x2a6>
    2b88:	bic.w	fp, r1, #3
    2b8c:	add	fp, r4
    2b8e:	add.w	r0, r5, #16
    2b92:	cmp	fp, r0
    2b94:	bge.n	2c4a <_realloc_r+0x2ba>
    2b96:	tst.w	lr, #1
    2b9a:	bne.w	29e8 <_realloc_r+0x58>
    2b9e:	ldr.w	r1, [r6, #-8]
    2ba2:	rsb	sl, r1, r8
    2ba6:	ldr.w	r1, [sl, #4]
    2baa:	bic.w	ip, r1, #3
    2bae:	add	fp, ip
    2bb0:	cmp	r0, fp
    2bb2:	bgt.w	2a64 <_realloc_r+0xd4>
    2bb6:	mov	r7, sl
    2bb8:	ldr.w	r1, [sl, #12]
    2bbc:	ldr.w	r0, [r7, #8]!
    2bc0:	subs	r2, r4, #4
    2bc2:	cmp	r2, #36	; 0x24
    2bc4:	str	r1, [r0, #12]
    2bc6:	str	r0, [r1, #8]
    2bc8:	bhi.w	2d34 <_realloc_r+0x3a4>
    2bcc:	cmp	r2, #19
    2bce:	bls.w	2d1c <_realloc_r+0x38c>
    2bd2:	ldr	r1, [r6, #0]
    2bd4:	str.w	r1, [sl, #8]
    2bd8:	ldr	r1, [r6, #4]
    2bda:	str.w	r1, [sl, #12]
    2bde:	cmp	r2, #27
    2be0:	bhi.w	2d42 <_realloc_r+0x3b2>
    2be4:	adds	r6, #8
    2be6:	add.w	r2, sl, #16
    2bea:	ldr	r1, [r6, #0]
    2bec:	str	r1, [r2, #0]
    2bee:	ldr	r1, [r6, #4]
    2bf0:	str	r1, [r2, #4]
    2bf2:	ldr	r1, [r6, #8]
    2bf4:	str	r1, [r2, #8]
    2bf6:	add.w	r1, sl, r5
    2bfa:	rsb	r2, r5, fp
    2bfe:	orr.w	r2, r2, #1
    2c02:	str	r1, [r3, #8]
    2c04:	str	r2, [r1, #4]
    2c06:	ldr.w	r3, [sl, #4]
    2c0a:	and.w	r3, r3, #1
    2c0e:	orrs	r5, r3
    2c10:	mov	r0, r9
    2c12:	str.w	r5, [sl, #4]
    2c16:	bl	298c <__malloc_unlock>
    2c1a:	mov	r0, r7
    2c1c:	b.n	2ad8 <_realloc_r+0x148>
    2c1e:	ldr	r3, [r6, #0]
    2c20:	str	r3, [r0, #0]
    2c22:	ldr	r3, [r6, #4]
    2c24:	str	r3, [r0, #4]
    2c26:	cmp	r2, #27
    2c28:	bhi.n	2c7a <_realloc_r+0x2ea>
    2c2a:	add.w	r3, r0, #8
    2c2e:	add.w	r2, r6, #8
    2c32:	b.n	2a1a <_realloc_r+0x8a>
    2c34:	mov	r3, r7
    2c36:	ldr	r2, [r6, #0]
    2c38:	str	r2, [r3, #0]
    2c3a:	ldr	r2, [r6, #4]
    2c3c:	str	r2, [r3, #4]
    2c3e:	ldr	r2, [r6, #8]
    2c40:	str	r2, [r3, #8]
    2c42:	mov	r6, r7
    2c44:	mov	r4, lr
    2c46:	mov	r8, sl
    2c48:	b.n	2ab2 <_realloc_r+0x122>
    2c4a:	add.w	r1, r8, r5
    2c4e:	rsb	fp, r5, fp
    2c52:	orr.w	r2, fp, #1
    2c56:	str	r1, [r3, #8]
    2c58:	str	r2, [r1, #4]
    2c5a:	ldr.w	r3, [r6, #-4]
    2c5e:	and.w	r3, r3, #1
    2c62:	orrs	r5, r3
    2c64:	mov	r0, r9
    2c66:	str.w	r5, [r6, #-4]
    2c6a:	bl	298c <__malloc_unlock>
    2c6e:	mov	r0, r6
    2c70:	b.n	2ad8 <_realloc_r+0x148>
    2c72:	mov	r1, r6
    2c74:	bl	2824 <memmove>
    2c78:	b.n	2a26 <_realloc_r+0x96>
    2c7a:	ldr	r3, [r6, #8]
    2c7c:	str	r3, [r0, #8]
    2c7e:	ldr	r3, [r6, #12]
    2c80:	str	r3, [r0, #12]
    2c82:	cmp	r2, #36	; 0x24
    2c84:	beq.n	2cd8 <_realloc_r+0x348>
    2c86:	add.w	r3, r0, #16
    2c8a:	add.w	r2, r6, #16
    2c8e:	b.n	2a1a <_realloc_r+0x8a>
    2c90:	ldr.w	r3, [r0, #-4]
    2c94:	bic.w	r3, r3, #3
    2c98:	add	r4, r3
    2c9a:	b.n	2ab2 <_realloc_r+0x122>
    2c9c:	mov	r1, r6
    2c9e:	mov	r0, r7
    2ca0:	mov	r4, lr
    2ca2:	mov	r8, sl
    2ca4:	bl	2824 <memmove>
    2ca8:	mov	r6, r7
    2caa:	b.n	2ab2 <_realloc_r+0x122>
    2cac:	mov	r2, r7
    2cae:	b.n	2aa0 <_realloc_r+0x110>
    2cb0:	mov	r1, r6
    2cb2:	mov	r0, r7
    2cb4:	mov	r4, r3
    2cb6:	mov	r8, sl
    2cb8:	bl	2824 <memmove>
    2cbc:	mov	r6, r7
    2cbe:	b.n	2ab2 <_realloc_r+0x122>
    2cc0:	ldr	r3, [r6, #8]
    2cc2:	str.w	r3, [sl, #16]
    2cc6:	ldr	r3, [r6, #12]
    2cc8:	str.w	r3, [sl, #20]
    2ccc:	cmp	r2, #36	; 0x24
    2cce:	beq.n	2d08 <_realloc_r+0x378>
    2cd0:	adds	r6, #16
    2cd2:	add.w	r3, sl, #24
    2cd6:	b.n	2c36 <_realloc_r+0x2a6>
    2cd8:	ldr	r3, [r6, #16]
    2cda:	str	r3, [r0, #16]
    2cdc:	ldr	r3, [r6, #20]
    2cde:	str	r3, [r0, #20]
    2ce0:	add.w	r2, r6, #24
    2ce4:	add.w	r3, r0, #24
    2ce8:	b.n	2a1a <_realloc_r+0x8a>
    2cea:	nop
    2cec:	.word	0x20000bd0
    2cf0:	ldr	r1, [r6, #8]
    2cf2:	str.w	r1, [sl, #16]
    2cf6:	ldr	r1, [r6, #12]
    2cf8:	str.w	r1, [sl, #20]
    2cfc:	cmp	r2, #36	; 0x24
    2cfe:	beq.n	2d20 <_realloc_r+0x390>
    2d00:	adds	r6, #16
    2d02:	add.w	r2, sl, #24
    2d06:	b.n	2aa0 <_realloc_r+0x110>
    2d08:	ldr	r3, [r6, #16]
    2d0a:	str.w	r3, [sl, #24]
    2d0e:	ldr	r3, [r6, #20]
    2d10:	str.w	r3, [sl, #28]
    2d14:	adds	r6, #24
    2d16:	add.w	r3, sl, #32
    2d1a:	b.n	2c36 <_realloc_r+0x2a6>
    2d1c:	mov	r2, r7
    2d1e:	b.n	2bea <_realloc_r+0x25a>
    2d20:	ldr	r2, [r6, #16]
    2d22:	str.w	r2, [sl, #24]
    2d26:	ldr	r2, [r6, #20]
    2d28:	str.w	r2, [sl, #28]
    2d2c:	adds	r6, #24
    2d2e:	add.w	r2, sl, #32
    2d32:	b.n	2aa0 <_realloc_r+0x110>
    2d34:	mov	r1, r6
    2d36:	mov	r0, r7
    2d38:	str	r3, [sp, #4]
    2d3a:	bl	2824 <memmove>
    2d3e:	ldr	r3, [sp, #4]
    2d40:	b.n	2bf6 <_realloc_r+0x266>
    2d42:	ldr	r1, [r6, #8]
    2d44:	str.w	r1, [sl, #16]
    2d48:	ldr	r1, [r6, #12]
    2d4a:	str.w	r1, [sl, #20]
    2d4e:	cmp	r2, #36	; 0x24
    2d50:	beq.n	2d5a <_realloc_r+0x3ca>
    2d52:	adds	r6, #16
    2d54:	add.w	r2, sl, #24
    2d58:	b.n	2bea <_realloc_r+0x25a>
    2d5a:	ldr	r2, [r6, #16]
    2d5c:	str.w	r2, [sl, #24]
    2d60:	ldr	r2, [r6, #20]
    2d62:	str.w	r2, [sl, #28]
    2d66:	adds	r6, #24
    2d68:	add.w	r2, sl, #32
    2d6c:	b.n	2bea <_realloc_r+0x25a>
    2d6e:	nop

00002d70 <_sbrk_r>:
    2d70:	push	{r3, r4, r5, lr}
    2d72:	ldr	r4, [pc, #28]	; (2d90 <_sbrk_r+0x20>)
    2d74:	movs	r3, #0
    2d76:	mov	r5, r0
    2d78:	mov	r0, r1
    2d7a:	str	r3, [r4, #0]
    2d7c:	bl	cbc <_sbrk>
    2d80:	adds	r3, r0, #1
    2d82:	beq.n	2d86 <_sbrk_r+0x16>
    2d84:	pop	{r3, r4, r5, pc}
    2d86:	ldr	r3, [r4, #0]
    2d88:	cmp	r3, #0
    2d8a:	beq.n	2d84 <_sbrk_r+0x14>
    2d8c:	str	r3, [r5, #0]
    2d8e:	pop	{r3, r4, r5, pc}
    2d90:	.word	0x20003280
	...

00002dc0 <strlen>:
    2dc0:	pld	[r0]
    2dc4:	strd	r4, r5, [sp, #-8]!
    2dc8:	bic.w	r1, r0, #7
    2dcc:	mvn.w	ip, #0
    2dd0:	ands.w	r4, r0, #7
    2dd4:	pld	[r1, #32]
    2dd8:	bne.w	2e6e <strlen+0xae>
    2ddc:	mov.w	r4, #0
    2de0:	mvn.w	r0, #7
    2de4:	ldrd	r2, r3, [r1]
    2de8:	pld	[r1, #64]	; 0x40
    2dec:	add.w	r0, r0, #8
    2df0:	uadd8	r2, r2, ip
    2df4:	sel	r2, r4, ip
    2df8:	uadd8	r3, r3, ip
    2dfc:	sel	r3, r2, ip
    2e00:	cbnz	r3, 2e56 <strlen+0x96>
    2e02:	ldrd	r2, r3, [r1, #8]
    2e06:	uadd8	r2, r2, ip
    2e0a:	add.w	r0, r0, #8
    2e0e:	sel	r2, r4, ip
    2e12:	uadd8	r3, r3, ip
    2e16:	sel	r3, r2, ip
    2e1a:	cbnz	r3, 2e56 <strlen+0x96>
    2e1c:	ldrd	r2, r3, [r1, #16]
    2e20:	uadd8	r2, r2, ip
    2e24:	add.w	r0, r0, #8
    2e28:	sel	r2, r4, ip
    2e2c:	uadd8	r3, r3, ip
    2e30:	sel	r3, r2, ip
    2e34:	cbnz	r3, 2e56 <strlen+0x96>
    2e36:	ldrd	r2, r3, [r1, #24]
    2e3a:	add.w	r1, r1, #32
    2e3e:	uadd8	r2, r2, ip
    2e42:	add.w	r0, r0, #8
    2e46:	sel	r2, r4, ip
    2e4a:	uadd8	r3, r3, ip
    2e4e:	sel	r3, r2, ip
    2e52:	cmp	r3, #0
    2e54:	beq.n	2de4 <strlen+0x24>
    2e56:	cmp	r2, #0
    2e58:	itt	eq
    2e5a:	addeq	r0, #4
    2e5c:	moveq	r2, r3
    2e5e:	rev	r2, r2
    2e60:	clz	r2, r2
    2e64:	ldrd	r4, r5, [sp], #8
    2e68:	add.w	r0, r0, r2, lsr #3
    2e6c:	bx	lr
    2e6e:	ldrd	r2, r3, [r1]
    2e72:	and.w	r5, r4, #3
    2e76:	rsb	r0, r4, #0
    2e7a:	mov.w	r5, r5, lsl #3
    2e7e:	tst.w	r4, #4
    2e82:	pld	[r1, #64]	; 0x40
    2e86:	lsl.w	r5, ip, r5
    2e8a:	orn	r2, r2, r5
    2e8e:	itt	ne
    2e90:	ornne	r3, r3, r5
    2e94:	movne	r2, ip
    2e96:	mov.w	r4, #0
    2e9a:	b.n	2df0 <strlen+0x30>

00002e9c <_vdprintf_r>:
    2e9c:	push	{r4, r5, r6, r7, lr}
    2e9e:	sub.w	sp, sp, #532	; 0x214
    2ea2:	add	r5, sp, #16
    2ea4:	str	r3, [sp, #0]
    2ea6:	mov	r7, r1
    2ea8:	mov	r3, r2
    2eaa:	mov.w	r4, #512	; 0x200
    2eae:	add	r2, sp, #12
    2eb0:	mov	r1, r5
    2eb2:	str	r4, [sp, #12]
    2eb4:	mov	r6, r0
    2eb6:	bl	3944 <_vasnprintf_r>
    2eba:	cbz	r0, 2ee0 <_vdprintf_r+0x44>
    2ebc:	mov	r4, r0
    2ebe:	mov	r2, r0
    2ec0:	mov	r1, r7
    2ec2:	ldr	r3, [sp, #12]
    2ec4:	mov	r0, r6
    2ec6:	bl	2f1c <_write_r>
    2eca:	cmp	r4, r5
    2ecc:	str	r0, [sp, #12]
    2ece:	beq.n	2eda <_vdprintf_r+0x3e>
    2ed0:	mov	r0, r6
    2ed2:	mov	r1, r4
    2ed4:	bl	3088 <_free_r>
    2ed8:	ldr	r0, [sp, #12]
    2eda:	add.w	sp, sp, #532	; 0x214
    2ede:	pop	{r4, r5, r6, r7, pc}
    2ee0:	mov.w	r0, #4294967295
    2ee4:	b.n	2eda <_vdprintf_r+0x3e>
    2ee6:	nop

00002ee8 <vdprintf>:
    2ee8:	push	{r4}
    2eea:	ldr	r4, [pc, #16]	; (2efc <vdprintf+0x14>)
    2eec:	mov	r3, r2
    2eee:	mov	r2, r1
    2ef0:	mov	r1, r0
    2ef2:	ldr	r0, [r4, #0]
    2ef4:	ldr.w	r4, [sp], #4
    2ef8:	b.w	2e9c <_vdprintf_r>
    2efc:	.word	0x20000a60

00002f00 <__ascii_wctomb>:
    2f00:	cbz	r1, 2f0c <__ascii_wctomb+0xc>
    2f02:	cmp	r2, #255	; 0xff
    2f04:	bhi.n	2f10 <__ascii_wctomb+0x10>
    2f06:	strb	r2, [r1, #0]
    2f08:	movs	r0, #1
    2f0a:	bx	lr
    2f0c:	mov	r0, r1
    2f0e:	bx	lr
    2f10:	movs	r3, #138	; 0x8a
    2f12:	str	r3, [r0, #0]
    2f14:	mov.w	r0, #4294967295
    2f18:	bx	lr
    2f1a:	nop

00002f1c <_write_r>:
    2f1c:	push	{r4, r5, r6, lr}
    2f1e:	mov	r5, r1
    2f20:	ldr	r4, [pc, #32]	; (2f44 <_write_r+0x28>)
    2f22:	mov	r1, r2
    2f24:	mov	r6, r0
    2f26:	mov	r2, r3
    2f28:	mov	r0, r5
    2f2a:	movs	r3, #0
    2f2c:	str	r3, [r4, #0]
    2f2e:	bl	bdc <_write>
    2f32:	adds	r3, r0, #1
    2f34:	beq.n	2f38 <_write_r+0x1c>
    2f36:	pop	{r4, r5, r6, pc}
    2f38:	ldr	r3, [r4, #0]
    2f3a:	cmp	r3, #0
    2f3c:	beq.n	2f36 <_write_r+0x1a>
    2f3e:	str	r3, [r6, #0]
    2f40:	pop	{r4, r5, r6, pc}
    2f42:	nop
    2f44:	.word	0x20003280

00002f48 <__register_exitproc>:
    2f48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f4c:	ldr	r4, [pc, #148]	; (2fe4 <__register_exitproc+0x9c>)
    2f4e:	ldr	r5, [r4, #0]
    2f50:	ldr.w	r4, [r5, #328]	; 0x148
    2f54:	mov	r6, r0
    2f56:	mov	r8, r1
    2f58:	mov	sl, r2
    2f5a:	mov	r9, r3
    2f5c:	cbz	r4, 2fd0 <__register_exitproc+0x88>
    2f5e:	ldr	r0, [r4, #4]
    2f60:	cmp	r0, #31
    2f62:	bgt.n	2f94 <__register_exitproc+0x4c>
    2f64:	adds	r3, r0, #1
    2f66:	cbz	r6, 2f86 <__register_exitproc+0x3e>
    2f68:	add.w	r5, r4, r0, lsl #2
    2f6c:	movs	r2, #1
    2f6e:	str.w	sl, [r5, #136]	; 0x88
    2f72:	ldr.w	r1, [r4, #392]	; 0x188
    2f76:	lsls	r2, r0
    2f78:	orrs	r1, r2
    2f7a:	cmp	r6, #2
    2f7c:	str.w	r1, [r4, #392]	; 0x188
    2f80:	str.w	r9, [r5, #264]	; 0x108
    2f84:	beq.n	2fc4 <__register_exitproc+0x7c>
    2f86:	adds	r0, #2
    2f88:	str	r3, [r4, #4]
    2f8a:	str.w	r8, [r4, r0, lsl #2]
    2f8e:	movs	r0, #0
    2f90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f94:	ldr	r3, [pc, #80]	; (2fe8 <__register_exitproc+0xa0>)
    2f96:	cbz	r3, 2fda <__register_exitproc+0x92>
    2f98:	mov.w	r0, #400	; 0x190
    2f9c:	bl	2278 <malloc>
    2fa0:	mov	r4, r0
    2fa2:	cbz	r0, 2fda <__register_exitproc+0x92>
    2fa4:	ldr.w	r3, [r5, #328]	; 0x148
    2fa8:	movs	r7, #0
    2faa:	stmia.w	r0, {r3, r7}
    2fae:	str.w	r4, [r5, #328]	; 0x148
    2fb2:	mov	r0, r7
    2fb4:	movs	r3, #1
    2fb6:	str.w	r7, [r4, #392]	; 0x188
    2fba:	str.w	r7, [r4, #396]	; 0x18c
    2fbe:	cmp	r6, #0
    2fc0:	beq.n	2f86 <__register_exitproc+0x3e>
    2fc2:	b.n	2f68 <__register_exitproc+0x20>
    2fc4:	ldr.w	r1, [r4, #396]	; 0x18c
    2fc8:	orrs	r2, r1
    2fca:	str.w	r2, [r4, #396]	; 0x18c
    2fce:	b.n	2f86 <__register_exitproc+0x3e>
    2fd0:	add.w	r4, r5, #332	; 0x14c
    2fd4:	str.w	r4, [r5, #328]	; 0x148
    2fd8:	b.n	2f5e <__register_exitproc+0x16>
    2fda:	mov.w	r0, #4294967295
    2fde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2fe2:	nop
    2fe4:	.word	0x2000035c
    2fe8:	.word	0x00002279

00002fec <_malloc_trim_r>:
    2fec:	push	{r3, r4, r5, r6, r7, lr}
    2fee:	ldr	r7, [pc, #140]	; (307c <_malloc_trim_r+0x90>)
    2ff0:	mov	r4, r1
    2ff2:	mov	r6, r0
    2ff4:	bl	2988 <__malloc_lock>
    2ff8:	ldr	r3, [r7, #8]
    2ffa:	ldr	r5, [r3, #4]
    2ffc:	bic.w	r5, r5, #3
    3000:	subs	r1, r5, r4
    3002:	addw	r1, r1, #4079	; 0xfef
    3006:	bic.w	r1, r1, #4080	; 0xff0
    300a:	bic.w	r1, r1, #15
    300e:	sub.w	r4, r1, #4096	; 0x1000
    3012:	cmp.w	r4, #4096	; 0x1000
    3016:	blt.n	3028 <_malloc_trim_r+0x3c>
    3018:	movs	r1, #0
    301a:	mov	r0, r6
    301c:	bl	2d70 <_sbrk_r>
    3020:	ldr	r3, [r7, #8]
    3022:	add	r3, r5
    3024:	cmp	r0, r3
    3026:	beq.n	3032 <_malloc_trim_r+0x46>
    3028:	mov	r0, r6
    302a:	bl	298c <__malloc_unlock>
    302e:	movs	r0, #0
    3030:	pop	{r3, r4, r5, r6, r7, pc}
    3032:	negs	r1, r4
    3034:	mov	r0, r6
    3036:	bl	2d70 <_sbrk_r>
    303a:	adds	r0, #1
    303c:	beq.n	305a <_malloc_trim_r+0x6e>
    303e:	ldr	r3, [pc, #64]	; (3080 <_malloc_trim_r+0x94>)
    3040:	ldr	r2, [r7, #8]
    3042:	ldr	r1, [r3, #0]
    3044:	subs	r5, r5, r4
    3046:	orr.w	r5, r5, #1
    304a:	mov	r0, r6
    304c:	subs	r1, r1, r4
    304e:	str	r5, [r2, #4]
    3050:	str	r1, [r3, #0]
    3052:	bl	298c <__malloc_unlock>
    3056:	movs	r0, #1
    3058:	pop	{r3, r4, r5, r6, r7, pc}
    305a:	movs	r1, #0
    305c:	mov	r0, r6
    305e:	bl	2d70 <_sbrk_r>
    3062:	ldr	r2, [r7, #8]
    3064:	subs	r3, r0, r2
    3066:	cmp	r3, #15
    3068:	ble.n	3028 <_malloc_trim_r+0x3c>
    306a:	ldr	r4, [pc, #24]	; (3084 <_malloc_trim_r+0x98>)
    306c:	ldr	r1, [pc, #16]	; (3080 <_malloc_trim_r+0x94>)
    306e:	ldr	r4, [r4, #0]
    3070:	orr.w	r3, r3, #1
    3074:	subs	r0, r0, r4
    3076:	str	r3, [r2, #4]
    3078:	str	r0, [r1, #0]
    307a:	b.n	3028 <_malloc_trim_r+0x3c>
    307c:	.word	0x20000bd0
    3080:	.word	0x200012b8
    3084:	.word	0x20000fdc

00003088 <_free_r>:
    3088:	cmp	r1, #0
    308a:	beq.n	3118 <_free_r+0x90>
    308c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3090:	mov	r5, r1
    3092:	mov	r8, r0
    3094:	bl	2988 <__malloc_lock>
    3098:	ldr.w	r7, [r5, #-4]
    309c:	ldr	r1, [pc, #424]	; (3248 <_free_r+0x1c0>)
    309e:	bic.w	r3, r7, #1
    30a2:	sub.w	r4, r5, #8
    30a6:	adds	r2, r4, r3
    30a8:	ldr	r6, [r1, #8]
    30aa:	ldr	r0, [r2, #4]
    30ac:	cmp	r2, r6
    30ae:	bic.w	r0, r0, #3
    30b2:	beq.n	317a <_free_r+0xf2>
    30b4:	lsls	r6, r7, #31
    30b6:	str	r0, [r2, #4]
    30b8:	bmi.n	30d2 <_free_r+0x4a>
    30ba:	ldr.w	r7, [r5, #-8]
    30be:	subs	r4, r4, r7
    30c0:	add.w	lr, r1, #8
    30c4:	ldr	r5, [r4, #8]
    30c6:	cmp	r5, lr
    30c8:	add	r3, r7
    30ca:	beq.n	31ac <_free_r+0x124>
    30cc:	ldr	r7, [r4, #12]
    30ce:	str	r7, [r5, #12]
    30d0:	str	r5, [r7, #8]
    30d2:	adds	r5, r2, r0
    30d4:	ldr	r5, [r5, #4]
    30d6:	lsls	r5, r5, #31
    30d8:	bpl.n	3160 <_free_r+0xd8>
    30da:	orr.w	r2, r3, #1
    30de:	str	r2, [r4, #4]
    30e0:	str	r3, [r4, r3]
    30e2:	cmp.w	r3, #512	; 0x200
    30e6:	bcs.n	311a <_free_r+0x92>
    30e8:	lsrs	r3, r3, #3
    30ea:	adds	r2, r3, #1
    30ec:	ldr	r5, [r1, #4]
    30ee:	ldr.w	r7, [r1, r2, lsl #3]
    30f2:	str	r7, [r4, #8]
    30f4:	movs	r0, #1
    30f6:	asrs	r3, r3, #2
    30f8:	lsl.w	r3, r0, r3
    30fc:	add.w	r0, r1, r2, lsl #3
    3100:	orrs	r5, r3
    3102:	subs	r0, #8
    3104:	str	r0, [r4, #12]
    3106:	str	r5, [r1, #4]
    3108:	str.w	r4, [r1, r2, lsl #3]
    310c:	str	r4, [r7, #12]
    310e:	mov	r0, r8
    3110:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3114:	b.w	298c <__malloc_unlock>
    3118:	bx	lr
    311a:	lsrs	r2, r3, #9
    311c:	cmp	r2, #4
    311e:	bhi.n	31c8 <_free_r+0x140>
    3120:	lsrs	r2, r3, #6
    3122:	add.w	r7, r2, #57	; 0x39
    3126:	lsls	r7, r7, #1
    3128:	add.w	r5, r2, #56	; 0x38
    312c:	add.w	r0, r1, r7, lsl #2
    3130:	ldr.w	r2, [r1, r7, lsl #2]
    3134:	ldr	r1, [pc, #272]	; (3248 <_free_r+0x1c0>)
    3136:	subs	r0, #8
    3138:	cmp	r0, r2
    313a:	beq.n	31d8 <_free_r+0x150>
    313c:	ldr	r1, [r2, #4]
    313e:	bic.w	r1, r1, #3
    3142:	cmp	r3, r1
    3144:	bcs.n	314c <_free_r+0xc4>
    3146:	ldr	r2, [r2, #8]
    3148:	cmp	r0, r2
    314a:	bne.n	313c <_free_r+0xb4>
    314c:	ldr	r0, [r2, #12]
    314e:	str	r0, [r4, #12]
    3150:	str	r2, [r4, #8]
    3152:	str	r4, [r0, #8]
    3154:	str	r4, [r2, #12]
    3156:	mov	r0, r8
    3158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    315c:	b.w	298c <__malloc_unlock>
    3160:	ldr	r5, [r2, #8]
    3162:	ldr	r7, [pc, #232]	; (324c <_free_r+0x1c4>)
    3164:	cmp	r5, r7
    3166:	add	r3, r0
    3168:	beq.n	31ea <_free_r+0x162>
    316a:	ldr	r0, [r2, #12]
    316c:	str	r0, [r5, #12]
    316e:	orr.w	r2, r3, #1
    3172:	str	r5, [r0, #8]
    3174:	str	r2, [r4, #4]
    3176:	str	r3, [r4, r3]
    3178:	b.n	30e2 <_free_r+0x5a>
    317a:	lsls	r7, r7, #31
    317c:	add	r3, r0
    317e:	bmi.n	3190 <_free_r+0x108>
    3180:	ldr.w	r2, [r5, #-8]
    3184:	subs	r4, r4, r2
    3186:	add	r3, r2
    3188:	ldr	r0, [r4, #8]
    318a:	ldr	r2, [r4, #12]
    318c:	str	r2, [r0, #12]
    318e:	str	r0, [r2, #8]
    3190:	ldr	r2, [pc, #188]	; (3250 <_free_r+0x1c8>)
    3192:	ldr	r2, [r2, #0]
    3194:	orr.w	r0, r3, #1
    3198:	cmp	r3, r2
    319a:	str	r0, [r4, #4]
    319c:	str	r4, [r1, #8]
    319e:	bcc.n	310e <_free_r+0x86>
    31a0:	ldr	r3, [pc, #176]	; (3254 <_free_r+0x1cc>)
    31a2:	mov	r0, r8
    31a4:	ldr	r1, [r3, #0]
    31a6:	bl	2fec <_malloc_trim_r>
    31aa:	b.n	310e <_free_r+0x86>
    31ac:	adds	r1, r2, r0
    31ae:	ldr	r1, [r1, #4]
    31b0:	lsls	r1, r1, #31
    31b2:	bmi.n	323e <_free_r+0x1b6>
    31b4:	ldr	r1, [r2, #8]
    31b6:	ldr	r2, [r2, #12]
    31b8:	str	r2, [r1, #12]
    31ba:	add	r3, r0
    31bc:	orr.w	r0, r3, #1
    31c0:	str	r1, [r2, #8]
    31c2:	str	r0, [r4, #4]
    31c4:	str	r3, [r4, r3]
    31c6:	b.n	310e <_free_r+0x86>
    31c8:	cmp	r2, #20
    31ca:	bhi.n	31fc <_free_r+0x174>
    31cc:	add.w	r7, r2, #92	; 0x5c
    31d0:	lsls	r7, r7, #1
    31d2:	add.w	r5, r2, #91	; 0x5b
    31d6:	b.n	312c <_free_r+0xa4>
    31d8:	asrs	r2, r5, #2
    31da:	ldr	r3, [r1, #4]
    31dc:	movs	r5, #1
    31de:	lsl.w	r2, r5, r2
    31e2:	orrs	r3, r2
    31e4:	str	r3, [r1, #4]
    31e6:	mov	r2, r0
    31e8:	b.n	314e <_free_r+0xc6>
    31ea:	orr.w	r2, r3, #1
    31ee:	str	r4, [r1, #20]
    31f0:	str	r4, [r1, #16]
    31f2:	str	r5, [r4, #12]
    31f4:	str	r5, [r4, #8]
    31f6:	str	r2, [r4, #4]
    31f8:	str	r3, [r4, r3]
    31fa:	b.n	310e <_free_r+0x86>
    31fc:	cmp	r2, #84	; 0x54
    31fe:	bhi.n	320e <_free_r+0x186>
    3200:	lsrs	r2, r3, #12
    3202:	add.w	r7, r2, #111	; 0x6f
    3206:	lsls	r7, r7, #1
    3208:	add.w	r5, r2, #110	; 0x6e
    320c:	b.n	312c <_free_r+0xa4>
    320e:	cmp.w	r2, #340	; 0x154
    3212:	bhi.n	3222 <_free_r+0x19a>
    3214:	lsrs	r2, r3, #15
    3216:	add.w	r7, r2, #120	; 0x78
    321a:	lsls	r7, r7, #1
    321c:	add.w	r5, r2, #119	; 0x77
    3220:	b.n	312c <_free_r+0xa4>
    3222:	movw	r0, #1364	; 0x554
    3226:	cmp	r2, r0
    3228:	bhi.n	3238 <_free_r+0x1b0>
    322a:	lsrs	r2, r3, #18
    322c:	add.w	r7, r2, #125	; 0x7d
    3230:	lsls	r7, r7, #1
    3232:	add.w	r5, r2, #124	; 0x7c
    3236:	b.n	312c <_free_r+0xa4>
    3238:	movs	r7, #254	; 0xfe
    323a:	movs	r5, #126	; 0x7e
    323c:	b.n	312c <_free_r+0xa4>
    323e:	orr.w	r2, r3, #1
    3242:	str	r2, [r4, #4]
    3244:	str	r3, [r4, r3]
    3246:	b.n	310e <_free_r+0x86>
    3248:	.word	0x20000bd0
    324c:	.word	0x20000bd8
    3250:	.word	0x20000fd8
    3254:	.word	0x200012b4

00003258 <_localeconv_r>:
    3258:	ldr	r2, [pc, #16]	; (326c <_localeconv_r+0x14>)
    325a:	ldr	r3, [pc, #20]	; (3270 <_localeconv_r+0x18>)
    325c:	ldr	r2, [r2, #0]
    325e:	ldr	r0, [r2, #52]	; 0x34
    3260:	cmp	r0, #0
    3262:	it	eq
    3264:	moveq	r0, r3
    3266:	adds	r0, #240	; 0xf0
    3268:	bx	lr
    326a:	nop
    326c:	.word	0x20000a60
    3270:	.word	0x20000a64
	...

00003280 <memchr>:
    3280:	and.w	r1, r1, #255	; 0xff
    3284:	cmp	r2, #16
    3286:	blt.n	32e0 <memchr+0x60>
    3288:	tst.w	r0, #7
    328c:	beq.n	32a0 <memchr+0x20>
    328e:	ldrb.w	r3, [r0], #1
    3292:	subs	r2, #1
    3294:	cmp	r3, r1
    3296:	beq.n	32f4 <memchr+0x74>
    3298:	tst.w	r0, #7
    329c:	cbz	r2, 32f0 <memchr+0x70>
    329e:	bne.n	328e <memchr+0xe>
    32a0:	push	{r4, r5, r6, r7}
    32a2:	orr.w	r1, r1, r1, lsl #8
    32a6:	orr.w	r1, r1, r1, lsl #16
    32aa:	bic.w	r4, r2, #7
    32ae:	mvns.w	r7, #0
    32b2:	movs	r3, #0
    32b4:	ldrd	r5, r6, [r0], #8
    32b8:	subs	r4, #8
    32ba:	eor.w	r5, r5, r1
    32be:	eor.w	r6, r6, r1
    32c2:	uadd8	r5, r5, r7
    32c6:	sel	r5, r3, r7
    32ca:	uadd8	r6, r6, r7
    32ce:	sel	r6, r5, r7
    32d2:	cbnz	r6, 32f8 <memchr+0x78>
    32d4:	bne.n	32b4 <memchr+0x34>
    32d6:	pop	{r4, r5, r6, r7}
    32d8:	and.w	r1, r1, #255	; 0xff
    32dc:	and.w	r2, r2, #7
    32e0:	cbz	r2, 32f0 <memchr+0x70>
    32e2:	ldrb.w	r3, [r0], #1
    32e6:	subs	r2, #1
    32e8:	eor.w	r3, r3, r1
    32ec:	cbz	r3, 32f4 <memchr+0x74>
    32ee:	bne.n	32e2 <memchr+0x62>
    32f0:	movs	r0, #0
    32f2:	bx	lr
    32f4:	subs	r0, #1
    32f6:	bx	lr
    32f8:	cmp	r5, #0
    32fa:	itte	eq
    32fc:	moveq	r5, r6
    32fe:	subeq	r0, #3
    3300:	subne	r0, #7
    3302:	tst.w	r5, #1
    3306:	bne.n	3318 <memchr+0x98>
    3308:	adds	r0, #1
    330a:	tst.w	r5, #256	; 0x100
    330e:	ittt	eq
    3310:	addeq	r0, #1
    3312:	tsteq.w	r5, #98304	; 0x18000
    3316:	addeq	r0, #1
    3318:	pop	{r4, r5, r6, r7}
    331a:	subs	r0, #1
    331c:	bx	lr
    331e:	nop

00003320 <_Balloc>:
    3320:	ldr	r3, [r0, #76]	; 0x4c
    3322:	push	{r4, r5, r6, lr}
    3324:	mov	r5, r0
    3326:	mov	r4, r1
    3328:	cbz	r3, 333e <_Balloc+0x1e>
    332a:	ldr.w	r0, [r3, r4, lsl #2]
    332e:	cbz	r0, 3352 <_Balloc+0x32>
    3330:	ldr	r2, [r0, #0]
    3332:	str.w	r2, [r3, r4, lsl #2]
    3336:	movs	r3, #0
    3338:	str	r3, [r0, #16]
    333a:	str	r3, [r0, #12]
    333c:	pop	{r4, r5, r6, pc}
    333e:	movs	r2, #33	; 0x21
    3340:	movs	r1, #4
    3342:	bl	39a4 <_calloc_r>
    3346:	str	r0, [r5, #76]	; 0x4c
    3348:	mov	r3, r0
    334a:	cmp	r0, #0
    334c:	bne.n	332a <_Balloc+0xa>
    334e:	movs	r0, #0
    3350:	pop	{r4, r5, r6, pc}
    3352:	movs	r1, #1
    3354:	lsl.w	r6, r1, r4
    3358:	adds	r2, r6, #5
    335a:	mov	r0, r5
    335c:	lsls	r2, r2, #2
    335e:	bl	39a4 <_calloc_r>
    3362:	cmp	r0, #0
    3364:	beq.n	334e <_Balloc+0x2e>
    3366:	str	r4, [r0, #4]
    3368:	str	r6, [r0, #8]
    336a:	b.n	3336 <_Balloc+0x16>

0000336c <_Bfree>:
    336c:	cbz	r1, 337c <_Bfree+0x10>
    336e:	ldr	r3, [r0, #76]	; 0x4c
    3370:	ldr	r2, [r1, #4]
    3372:	ldr.w	r0, [r3, r2, lsl #2]
    3376:	str	r0, [r1, #0]
    3378:	str.w	r1, [r3, r2, lsl #2]
    337c:	bx	lr
    337e:	nop

00003380 <__multadd>:
    3380:	push	{r4, r5, r6, r7, lr}
    3382:	ldr	r4, [r1, #16]
    3384:	sub	sp, #12
    3386:	mov	r5, r1
    3388:	mov	r6, r0
    338a:	add.w	lr, r1, #20
    338e:	movs	r7, #0
    3390:	ldr.w	r0, [lr]
    3394:	uxth	r1, r0
    3396:	mla	r1, r2, r1, r3
    339a:	lsrs	r3, r1, #16
    339c:	lsrs	r0, r0, #16
    339e:	mla	r3, r2, r0, r3
    33a2:	uxth	r1, r1
    33a4:	adds	r7, #1
    33a6:	add.w	r1, r1, r3, lsl #16
    33aa:	cmp	r4, r7
    33ac:	str.w	r1, [lr], #4
    33b0:	mov.w	r3, r3, lsr #16
    33b4:	bgt.n	3390 <__multadd+0x10>
    33b6:	cbz	r3, 33c8 <__multadd+0x48>
    33b8:	ldr	r2, [r5, #8]
    33ba:	cmp	r4, r2
    33bc:	bge.n	33ce <__multadd+0x4e>
    33be:	add.w	r2, r5, r4, lsl #2
    33c2:	adds	r4, #1
    33c4:	str	r3, [r2, #20]
    33c6:	str	r4, [r5, #16]
    33c8:	mov	r0, r5
    33ca:	add	sp, #12
    33cc:	pop	{r4, r5, r6, r7, pc}
    33ce:	ldr	r1, [r5, #4]
    33d0:	str	r3, [sp, #4]
    33d2:	adds	r1, #1
    33d4:	mov	r0, r6
    33d6:	bl	3320 <_Balloc>
    33da:	ldr	r2, [r5, #16]
    33dc:	adds	r2, #2
    33de:	add.w	r1, r5, #12
    33e2:	mov	r7, r0
    33e4:	lsls	r2, r2, #2
    33e6:	adds	r0, #12
    33e8:	bl	2080 <memcpy>
    33ec:	ldr	r2, [r6, #76]	; 0x4c
    33ee:	ldr	r1, [r5, #4]
    33f0:	ldr	r3, [sp, #4]
    33f2:	ldr.w	r0, [r2, r1, lsl #2]
    33f6:	str	r0, [r5, #0]
    33f8:	str.w	r5, [r2, r1, lsl #2]
    33fc:	mov	r5, r7
    33fe:	b.n	33be <__multadd+0x3e>

00003400 <__hi0bits>:
    3400:	lsrs	r3, r0, #16
    3402:	lsls	r3, r3, #16
    3404:	cbnz	r3, 3434 <__hi0bits+0x34>
    3406:	lsls	r0, r0, #16
    3408:	movs	r3, #16
    340a:	tst.w	r0, #4278190080	; 0xff000000
    340e:	itt	eq
    3410:	lsleq	r0, r0, #8
    3412:	addeq	r3, #8
    3414:	tst.w	r0, #4026531840	; 0xf0000000
    3418:	itt	eq
    341a:	lsleq	r0, r0, #4
    341c:	addeq	r3, #4
    341e:	tst.w	r0, #3221225472	; 0xc0000000
    3422:	itt	eq
    3424:	lsleq	r0, r0, #2
    3426:	addeq	r3, #2
    3428:	cmp	r0, #0
    342a:	blt.n	343c <__hi0bits+0x3c>
    342c:	lsls	r2, r0, #1
    342e:	bmi.n	3438 <__hi0bits+0x38>
    3430:	movs	r0, #32
    3432:	bx	lr
    3434:	movs	r3, #0
    3436:	b.n	340a <__hi0bits+0xa>
    3438:	adds	r0, r3, #1
    343a:	bx	lr
    343c:	mov	r0, r3
    343e:	bx	lr

00003440 <__lo0bits>:
    3440:	ldr	r3, [r0, #0]
    3442:	ands.w	r2, r3, #7
    3446:	beq.n	3458 <__lo0bits+0x18>
    3448:	lsls	r1, r3, #31
    344a:	bmi.n	348e <__lo0bits+0x4e>
    344c:	lsls	r2, r3, #30
    344e:	bmi.n	3492 <__lo0bits+0x52>
    3450:	lsrs	r3, r3, #2
    3452:	str	r3, [r0, #0]
    3454:	movs	r0, #2
    3456:	bx	lr
    3458:	uxth	r1, r3
    345a:	cbnz	r1, 3460 <__lo0bits+0x20>
    345c:	lsrs	r3, r3, #16
    345e:	movs	r2, #16
    3460:	tst.w	r3, #255	; 0xff
    3464:	itt	eq
    3466:	lsreq	r3, r3, #8
    3468:	addeq	r2, #8
    346a:	lsls	r1, r3, #28
    346c:	itt	eq
    346e:	lsreq	r3, r3, #4
    3470:	addeq	r2, #4
    3472:	lsls	r1, r3, #30
    3474:	itt	eq
    3476:	lsreq	r3, r3, #2
    3478:	addeq	r2, #2
    347a:	lsls	r1, r3, #31
    347c:	bmi.n	3488 <__lo0bits+0x48>
    347e:	lsrs	r3, r3, #1
    3480:	bne.n	3486 <__lo0bits+0x46>
    3482:	movs	r0, #32
    3484:	bx	lr
    3486:	adds	r2, #1
    3488:	str	r3, [r0, #0]
    348a:	mov	r0, r2
    348c:	bx	lr
    348e:	movs	r0, #0
    3490:	bx	lr
    3492:	lsrs	r3, r3, #1
    3494:	str	r3, [r0, #0]
    3496:	movs	r0, #1
    3498:	bx	lr
    349a:	nop

0000349c <__i2b>:
    349c:	push	{r4, lr}
    349e:	mov	r4, r1
    34a0:	movs	r1, #1
    34a2:	bl	3320 <_Balloc>
    34a6:	movs	r2, #1
    34a8:	str	r4, [r0, #20]
    34aa:	str	r2, [r0, #16]
    34ac:	pop	{r4, pc}
    34ae:	nop

000034b0 <__multiply>:
    34b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34b4:	ldr	r5, [r1, #16]
    34b6:	ldr	r7, [r2, #16]
    34b8:	cmp	r5, r7
    34ba:	sub	sp, #12
    34bc:	mov	r4, r1
    34be:	mov	r6, r2
    34c0:	bge.n	34cc <__multiply+0x1c>
    34c2:	mov	r2, r5
    34c4:	mov	r4, r6
    34c6:	mov	r5, r7
    34c8:	mov	r6, r1
    34ca:	mov	r7, r2
    34cc:	ldr	r3, [r4, #8]
    34ce:	ldr	r1, [r4, #4]
    34d0:	add.w	r8, r5, r7
    34d4:	cmp	r8, r3
    34d6:	it	gt
    34d8:	addgt	r1, #1
    34da:	bl	3320 <_Balloc>
    34de:	add.w	ip, r0, #20
    34e2:	add.w	r9, ip, r8, lsl #2
    34e6:	cmp	ip, r9
    34e8:	str	r0, [sp, #0]
    34ea:	bcs.n	34f8 <__multiply+0x48>
    34ec:	mov	r3, ip
    34ee:	movs	r1, #0
    34f0:	str.w	r1, [r3], #4
    34f4:	cmp	r9, r3
    34f6:	bhi.n	34f0 <__multiply+0x40>
    34f8:	add.w	r2, r6, #20
    34fc:	add.w	sl, r2, r7, lsl #2
    3500:	add.w	r3, r4, #20
    3504:	cmp	r2, sl
    3506:	add.w	lr, r3, r5, lsl #2
    350a:	bcs.n	35b6 <__multiply+0x106>
    350c:	str.w	r9, [sp, #4]
    3510:	mov	r9, r3
    3512:	ldr.w	r3, [r2], #4
    3516:	uxth.w	fp, r3
    351a:	cmp.w	fp, #0
    351e:	beq.n	3562 <__multiply+0xb2>
    3520:	movs	r0, #0
    3522:	mov	r7, r9
    3524:	mov	r6, ip
    3526:	mov	r5, r0
    3528:	b.n	352c <__multiply+0x7c>
    352a:	mov	r6, r3
    352c:	ldr.w	r4, [r7], #4
    3530:	ldr	r0, [r6, #0]
    3532:	uxth	r1, r4
    3534:	uxth	r3, r0
    3536:	mla	r1, fp, r1, r3
    353a:	lsrs	r4, r4, #16
    353c:	lsrs	r0, r0, #16
    353e:	adds	r3, r1, r5
    3540:	mla	r0, fp, r4, r0
    3544:	add.w	r0, r0, r3, lsr #16
    3548:	uxth	r1, r3
    354a:	mov	r3, r6
    354c:	orr.w	r1, r1, r0, lsl #16
    3550:	cmp	lr, r7
    3552:	mov.w	r5, r0, lsr #16
    3556:	str.w	r1, [r3], #4
    355a:	bhi.n	352a <__multiply+0x7a>
    355c:	str	r5, [r6, #4]
    355e:	ldr.w	r3, [r2, #-4]
    3562:	movs.w	fp, r3, lsr #16
    3566:	beq.n	35aa <__multiply+0xfa>
    3568:	ldr.w	r3, [ip]
    356c:	mov	r7, ip
    356e:	mov	r0, r3
    3570:	mov	r5, r9
    3572:	movs	r1, #0
    3574:	b.n	3578 <__multiply+0xc8>
    3576:	mov	r7, r6
    3578:	ldrh	r4, [r5, #0]
    357a:	lsrs	r0, r0, #16
    357c:	mla	r0, fp, r4, r0
    3580:	add	r1, r0
    3582:	uxth	r4, r3
    3584:	mov	r6, r7
    3586:	orr.w	r3, r4, r1, lsl #16
    358a:	str.w	r3, [r6], #4
    358e:	ldr	r0, [r7, #4]
    3590:	ldr.w	r4, [r5], #4
    3594:	uxth	r3, r0
    3596:	lsrs	r4, r4, #16
    3598:	mla	r4, fp, r4, r3
    359c:	add.w	r3, r4, r1, lsr #16
    35a0:	cmp	lr, r5
    35a2:	mov.w	r1, r3, lsr #16
    35a6:	bhi.n	3576 <__multiply+0xc6>
    35a8:	str	r3, [r7, #4]
    35aa:	cmp	sl, r2
    35ac:	add.w	ip, ip, #4
    35b0:	bhi.n	3512 <__multiply+0x62>
    35b2:	ldr.w	r9, [sp, #4]
    35b6:	cmp.w	r8, #0
    35ba:	ble.n	35d4 <__multiply+0x124>
    35bc:	ldr.w	r3, [r9, #-4]
    35c0:	sub.w	r9, r9, #4
    35c4:	cbz	r3, 35ce <__multiply+0x11e>
    35c6:	b.n	35d4 <__multiply+0x124>
    35c8:	ldr.w	r3, [r9, #-4]!
    35cc:	cbnz	r3, 35d4 <__multiply+0x124>
    35ce:	subs.w	r8, r8, #1
    35d2:	bne.n	35c8 <__multiply+0x118>
    35d4:	ldr	r0, [sp, #0]
    35d6:	str.w	r8, [r0, #16]
    35da:	add	sp, #12
    35dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000035e0 <__pow5mult>:
    35e0:	ands.w	r3, r2, #3
    35e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35e8:	mov	r4, r2
    35ea:	mov	r7, r0
    35ec:	bne.n	364c <__pow5mult+0x6c>
    35ee:	mov	r6, r1
    35f0:	asrs	r4, r4, #2
    35f2:	beq.n	362e <__pow5mult+0x4e>
    35f4:	ldr	r5, [r7, #72]	; 0x48
    35f6:	cbz	r5, 365e <__pow5mult+0x7e>
    35f8:	lsls	r3, r4, #31
    35fa:	mov.w	r8, #0
    35fe:	bmi.n	360e <__pow5mult+0x2e>
    3600:	asrs	r4, r4, #1
    3602:	beq.n	362e <__pow5mult+0x4e>
    3604:	ldr	r0, [r5, #0]
    3606:	cbz	r0, 3634 <__pow5mult+0x54>
    3608:	mov	r5, r0
    360a:	lsls	r3, r4, #31
    360c:	bpl.n	3600 <__pow5mult+0x20>
    360e:	mov	r2, r5
    3610:	mov	r1, r6
    3612:	mov	r0, r7
    3614:	bl	34b0 <__multiply>
    3618:	cbz	r6, 3648 <__pow5mult+0x68>
    361a:	ldr	r2, [r6, #4]
    361c:	ldr	r3, [r7, #76]	; 0x4c
    361e:	asrs	r4, r4, #1
    3620:	ldr.w	r1, [r3, r2, lsl #2]
    3624:	str	r1, [r6, #0]
    3626:	str.w	r6, [r3, r2, lsl #2]
    362a:	mov	r6, r0
    362c:	bne.n	3604 <__pow5mult+0x24>
    362e:	mov	r0, r6
    3630:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3634:	mov	r2, r5
    3636:	mov	r1, r5
    3638:	mov	r0, r7
    363a:	bl	34b0 <__multiply>
    363e:	str	r0, [r5, #0]
    3640:	str.w	r8, [r0]
    3644:	mov	r5, r0
    3646:	b.n	360a <__pow5mult+0x2a>
    3648:	mov	r6, r0
    364a:	b.n	3600 <__pow5mult+0x20>
    364c:	subs	r2, r3, #1
    364e:	ldr	r5, [pc, #44]	; (367c <__pow5mult+0x9c>)
    3650:	movs	r3, #0
    3652:	ldr.w	r2, [r5, r2, lsl #2]
    3656:	bl	3380 <__multadd>
    365a:	mov	r6, r0
    365c:	b.n	35f0 <__pow5mult+0x10>
    365e:	movs	r1, #1
    3660:	mov	r0, r7
    3662:	bl	3320 <_Balloc>
    3666:	movw	r1, #625	; 0x271
    366a:	movs	r2, #1
    366c:	movs	r3, #0
    366e:	str	r1, [r0, #20]
    3670:	str	r2, [r0, #16]
    3672:	mov	r5, r0
    3674:	str	r0, [r7, #72]	; 0x48
    3676:	str	r3, [r0, #0]
    3678:	b.n	35f8 <__pow5mult+0x18>
    367a:	nop
    367c:	.word	0x20000568

00003680 <__lshift>:
    3680:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3684:	mov	r9, r2
    3686:	ldr	r2, [r1, #16]
    3688:	ldr	r3, [r1, #8]
    368a:	mov.w	r4, r9, asr #5
    368e:	add.w	r8, r4, r2
    3692:	add.w	r5, r8, #1
    3696:	cmp	r5, r3
    3698:	mov	r6, r1
    369a:	mov	sl, r0
    369c:	ldr	r1, [r1, #4]
    369e:	ble.n	36aa <__lshift+0x2a>
    36a0:	lsls	r3, r3, #1
    36a2:	cmp	r5, r3
    36a4:	add.w	r1, r1, #1
    36a8:	bgt.n	36a0 <__lshift+0x20>
    36aa:	mov	r0, sl
    36ac:	bl	3320 <_Balloc>
    36b0:	cmp	r4, #0
    36b2:	add.w	r2, r0, #20
    36b6:	ble.n	372a <__lshift+0xaa>
    36b8:	add.w	r3, r2, r4, lsl #2
    36bc:	movs	r1, #0
    36be:	str.w	r1, [r2], #4
    36c2:	cmp	r3, r2
    36c4:	bne.n	36be <__lshift+0x3e>
    36c6:	ldr	r4, [r6, #16]
    36c8:	add.w	r1, r6, #20
    36cc:	ands.w	r9, r9, #31
    36d0:	add.w	lr, r1, r4, lsl #2
    36d4:	beq.n	371a <__lshift+0x9a>
    36d6:	rsb	r2, r9, #32
    36da:	movs	r4, #0
    36dc:	ldr	r7, [r1, #0]
    36de:	lsl.w	ip, r7, r9
    36e2:	orr.w	r4, ip, r4
    36e6:	mov	ip, r3
    36e8:	str.w	r4, [r3], #4
    36ec:	ldr.w	r4, [r1], #4
    36f0:	cmp	lr, r1
    36f2:	lsr.w	r4, r4, r2
    36f6:	bhi.n	36dc <__lshift+0x5c>
    36f8:	str.w	r4, [ip, #4]
    36fc:	cbz	r4, 3702 <__lshift+0x82>
    36fe:	add.w	r5, r8, #2
    3702:	ldr.w	r3, [sl, #76]	; 0x4c
    3706:	ldr	r2, [r6, #4]
    3708:	subs	r5, #1
    370a:	ldr.w	r1, [r3, r2, lsl #2]
    370e:	str	r5, [r0, #16]
    3710:	str	r1, [r6, #0]
    3712:	str.w	r6, [r3, r2, lsl #2]
    3716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    371a:	subs	r3, #4
    371c:	ldr.w	r2, [r1], #4
    3720:	str.w	r2, [r3, #4]!
    3724:	cmp	lr, r1
    3726:	bhi.n	371c <__lshift+0x9c>
    3728:	b.n	3702 <__lshift+0x82>
    372a:	mov	r3, r2
    372c:	b.n	36c6 <__lshift+0x46>
    372e:	nop

00003730 <__mcmp>:
    3730:	ldr	r2, [r0, #16]
    3732:	ldr	r3, [r1, #16]
    3734:	subs	r2, r2, r3
    3736:	bne.n	3760 <__mcmp+0x30>
    3738:	lsls	r3, r3, #2
    373a:	adds	r0, #20
    373c:	adds	r1, #20
    373e:	add	r1, r3
    3740:	push	{r4}
    3742:	add	r3, r0
    3744:	b.n	374a <__mcmp+0x1a>
    3746:	cmp	r0, r3
    3748:	bcs.n	3764 <__mcmp+0x34>
    374a:	ldr.w	r4, [r3, #-4]!
    374e:	ldr.w	r2, [r1, #-4]!
    3752:	cmp	r4, r2
    3754:	beq.n	3746 <__mcmp+0x16>
    3756:	bcc.n	376c <__mcmp+0x3c>
    3758:	movs	r0, #1
    375a:	ldr.w	r4, [sp], #4
    375e:	bx	lr
    3760:	mov	r0, r2
    3762:	bx	lr
    3764:	movs	r0, #0
    3766:	ldr.w	r4, [sp], #4
    376a:	bx	lr
    376c:	mov.w	r0, #4294967295
    3770:	b.n	375a <__mcmp+0x2a>
    3772:	nop

00003774 <__mdiff>:
    3774:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3778:	ldr	r3, [r1, #16]
    377a:	mov	r7, r1
    377c:	ldr	r1, [r2, #16]
    377e:	subs	r3, r3, r1
    3780:	cmp	r3, #0
    3782:	mov	r8, r2
    3784:	bne.n	37b6 <__mdiff+0x42>
    3786:	lsls	r1, r1, #2
    3788:	add.w	r2, r7, #20
    378c:	add.w	r5, r8, #20
    3790:	adds	r3, r2, r1
    3792:	add	r1, r5
    3794:	b.n	379a <__mdiff+0x26>
    3796:	cmp	r2, r3
    3798:	bcs.n	3858 <__mdiff+0xe4>
    379a:	ldr.w	r6, [r3, #-4]!
    379e:	ldr.w	r4, [r1, #-4]!
    37a2:	cmp	r6, r4
    37a4:	beq.n	3796 <__mdiff+0x22>
    37a6:	bcs.n	386a <__mdiff+0xf6>
    37a8:	mov	r3, r7
    37aa:	mov	r4, r2
    37ac:	mov	r7, r8
    37ae:	mov.w	r9, #1
    37b2:	mov	r8, r3
    37b4:	b.n	37c4 <__mdiff+0x50>
    37b6:	blt.n	3874 <__mdiff+0x100>
    37b8:	add.w	r5, r7, #20
    37bc:	add.w	r4, r2, #20
    37c0:	mov.w	r9, #0
    37c4:	ldr	r1, [r7, #4]
    37c6:	bl	3320 <_Balloc>
    37ca:	ldr.w	r3, [r8, #16]
    37ce:	ldr	r6, [r7, #16]
    37d0:	str.w	r9, [r0, #12]
    37d4:	add.w	ip, r4, r3, lsl #2
    37d8:	mov	lr, r4
    37da:	add.w	r7, r5, r6, lsl #2
    37de:	add.w	r4, r0, #20
    37e2:	movs	r3, #0
    37e4:	ldr.w	r1, [lr], #4
    37e8:	ldr.w	r8, [r5], #4
    37ec:	uxth	r2, r1
    37ee:	uxtah	r3, r3, r8
    37f2:	lsrs	r1, r1, #16
    37f4:	subs	r2, r3, r2
    37f6:	rsb	r3, r1, r8, lsr #16
    37fa:	add.w	r3, r3, r2, asr #16
    37fe:	uxth	r2, r2
    3800:	orr.w	r2, r2, r3, lsl #16
    3804:	cmp	ip, lr
    3806:	str.w	r2, [r4], #4
    380a:	mov.w	r3, r3, asr #16
    380e:	bhi.n	37e4 <__mdiff+0x70>
    3810:	cmp	r7, r5
    3812:	bls.n	3844 <__mdiff+0xd0>
    3814:	mov	ip, r4
    3816:	mov	r1, r5
    3818:	ldr.w	lr, [r1], #4
    381c:	uxtah	r2, r3, lr
    3820:	asrs	r3, r2, #16
    3822:	add.w	r3, r3, lr, lsr #16
    3826:	uxth	r2, r2
    3828:	orr.w	r2, r2, r3, lsl #16
    382c:	cmp	r7, r1
    382e:	str.w	r2, [ip], #4
    3832:	mov.w	r3, r3, asr #16
    3836:	bhi.n	3818 <__mdiff+0xa4>
    3838:	mvns	r5, r5
    383a:	add	r5, r7
    383c:	bic.w	r5, r5, #3
    3840:	adds	r5, #4
    3842:	add	r4, r5
    3844:	subs	r4, #4
    3846:	cbnz	r2, 3852 <__mdiff+0xde>
    3848:	ldr.w	r3, [r4, #-4]!
    384c:	subs	r6, #1
    384e:	cmp	r3, #0
    3850:	beq.n	3848 <__mdiff+0xd4>
    3852:	str	r6, [r0, #16]
    3854:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3858:	movs	r1, #0
    385a:	bl	3320 <_Balloc>
    385e:	movs	r2, #1
    3860:	movs	r3, #0
    3862:	str	r2, [r0, #16]
    3864:	str	r3, [r0, #20]
    3866:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    386a:	mov	r4, r5
    386c:	mov.w	r9, #0
    3870:	mov	r5, r2
    3872:	b.n	37c4 <__mdiff+0x50>
    3874:	mov	r3, r7
    3876:	add.w	r4, r7, #20
    387a:	add.w	r5, r8, #20
    387e:	mov	r7, r8
    3880:	mov.w	r9, #1
    3884:	mov	r8, r3
    3886:	b.n	37c4 <__mdiff+0x50>

00003888 <__d2b>:
    3888:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    388c:	vmov	r6, r7, d0
    3890:	sub	sp, #12
    3892:	mov	r8, r1
    3894:	movs	r1, #1
    3896:	mov	r4, r7
    3898:	ubfx	r5, r7, #20, #11
    389c:	mov	r7, r2
    389e:	bl	3320 <_Balloc>
    38a2:	ubfx	r4, r4, #0, #20
    38a6:	mov	r9, r0
    38a8:	cbz	r5, 38ae <__d2b+0x26>
    38aa:	orr.w	r4, r4, #1048576	; 0x100000
    38ae:	str	r4, [sp, #4]
    38b0:	cbz	r6, 38fa <__d2b+0x72>
    38b2:	add	r0, sp, #8
    38b4:	str.w	r6, [r0, #-8]!
    38b8:	bl	3440 <__lo0bits>
    38bc:	cmp	r0, #0
    38be:	bne.n	392a <__d2b+0xa2>
    38c0:	ldmia.w	sp, {r2, r3}
    38c4:	str.w	r2, [r9, #20]
    38c8:	cmp	r3, #0
    38ca:	ite	eq
    38cc:	moveq	r1, #1
    38ce:	movne	r1, #2
    38d0:	str.w	r3, [r9, #24]
    38d4:	str.w	r1, [r9, #16]
    38d8:	cbnz	r5, 3912 <__d2b+0x8a>
    38da:	add.w	r3, r9, r1, lsl #2
    38de:	subw	r0, r0, #1074	; 0x432
    38e2:	str.w	r0, [r8]
    38e6:	ldr	r0, [r3, #16]
    38e8:	bl	3400 <__hi0bits>
    38ec:	rsb	r0, r0, r1, lsl #5
    38f0:	str	r0, [r7, #0]
    38f2:	mov	r0, r9
    38f4:	add	sp, #12
    38f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    38fa:	add	r0, sp, #4
    38fc:	bl	3440 <__lo0bits>
    3900:	ldr	r3, [sp, #4]
    3902:	str.w	r3, [r9, #20]
    3906:	movs	r1, #1
    3908:	adds	r0, #32
    390a:	str.w	r1, [r9, #16]
    390e:	cmp	r5, #0
    3910:	beq.n	38da <__d2b+0x52>
    3912:	subw	r5, r5, #1075	; 0x433
    3916:	add	r5, r0
    3918:	rsb	r0, r0, #53	; 0x35
    391c:	str.w	r5, [r8]
    3920:	str	r0, [r7, #0]
    3922:	mov	r0, r9
    3924:	add	sp, #12
    3926:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    392a:	ldmia.w	sp, {r2, r3}
    392e:	rsb	r1, r0, #32
    3932:	lsl.w	r1, r3, r1
    3936:	orrs	r2, r1
    3938:	lsrs	r3, r0
    393a:	str	r3, [sp, #4]
    393c:	str.w	r2, [r9, #20]
    3940:	b.n	38c8 <__d2b+0x40>
    3942:	nop

00003944 <_vasnprintf_r>:
    3944:	push	{r4, r5, r6, lr}
    3946:	mov	r5, r2
    3948:	sub	sp, #104	; 0x68
    394a:	ldr	r4, [r2, #0]
    394c:	cbz	r1, 3952 <_vasnprintf_r+0xe>
    394e:	cmp	r4, #0
    3950:	bne.n	3988 <_vasnprintf_r+0x44>
    3952:	movs	r4, #0
    3954:	mov.w	r2, #648	; 0x288
    3958:	strh.w	r2, [sp, #12]
    395c:	str	r4, [sp, #0]
    395e:	str	r4, [sp, #16]
    3960:	mov	r2, r3
    3962:	movw	r6, #65535	; 0xffff
    3966:	ldr	r3, [sp, #120]	; 0x78
    3968:	str	r4, [sp, #8]
    396a:	mov	r1, sp
    396c:	str	r4, [sp, #20]
    396e:	strh.w	r6, [sp, #14]
    3972:	bl	47b8 <_svfprintf_r>
    3976:	cmp	r0, #0
    3978:	blt.n	399e <_vasnprintf_r+0x5a>
    397a:	ldr	r3, [sp, #0]
    397c:	str	r0, [r5, #0]
    397e:	movs	r2, #0
    3980:	strb	r2, [r3, #0]
    3982:	ldr	r0, [sp, #16]
    3984:	add	sp, #104	; 0x68
    3986:	pop	{r4, r5, r6, pc}
    3988:	mov.w	r2, #1544	; 0x608
    398c:	str	r1, [sp, #0]
    398e:	str	r1, [sp, #16]
    3990:	strh.w	r2, [sp, #12]
    3994:	bge.n	3960 <_vasnprintf_r+0x1c>
    3996:	movs	r3, #139	; 0x8b
    3998:	str	r3, [r0, #0]
    399a:	movs	r0, #0
    399c:	b.n	3984 <_vasnprintf_r+0x40>
    399e:	movs	r0, #0
    39a0:	b.n	3984 <_vasnprintf_r+0x40>
    39a2:	nop

000039a4 <_calloc_r>:
    39a4:	push	{r4, lr}
    39a6:	mul.w	r1, r2, r1
    39aa:	bl	2288 <_malloc_r>
    39ae:	mov	r4, r0
    39b0:	cbz	r0, 39ea <_calloc_r+0x46>
    39b2:	ldr.w	r2, [r0, #-4]
    39b6:	bic.w	r2, r2, #3
    39ba:	subs	r2, #4
    39bc:	cmp	r2, #36	; 0x24
    39be:	bhi.n	39f2 <_calloc_r+0x4e>
    39c0:	cmp	r2, #19
    39c2:	bls.n	39ee <_calloc_r+0x4a>
    39c4:	movs	r3, #0
    39c6:	cmp	r2, #27
    39c8:	str	r3, [r0, #0]
    39ca:	str	r3, [r0, #4]
    39cc:	bls.n	39fc <_calloc_r+0x58>
    39ce:	cmp	r2, #36	; 0x24
    39d0:	str	r3, [r0, #8]
    39d2:	str	r3, [r0, #12]
    39d4:	iteee	ne
    39d6:	addne.w	r2, r0, #16
    39da:	streq	r3, [r0, #16]
    39dc:	streq	r3, [r0, #20]
    39de:	addeq.w	r2, r0, #24
    39e2:	movs	r3, #0
    39e4:	str	r3, [r2, #0]
    39e6:	str	r3, [r2, #4]
    39e8:	str	r3, [r2, #8]
    39ea:	mov	r0, r4
    39ec:	pop	{r4, pc}
    39ee:	mov	r2, r0
    39f0:	b.n	39e2 <_calloc_r+0x3e>
    39f2:	movs	r1, #0
    39f4:	bl	28ec <memset>
    39f8:	mov	r0, r4
    39fa:	pop	{r4, pc}
    39fc:	add.w	r2, r0, #8
    3a00:	b.n	39e2 <_calloc_r+0x3e>
    3a02:	nop

00003a04 <quorem>:
    3a04:	ldr	r2, [r0, #16]
    3a06:	ldr	r3, [r1, #16]
    3a08:	cmp	r3, r2
    3a0a:	bgt.w	3b28 <quorem+0x124>
    3a0e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a12:	add.w	r8, r3, #4294967295
    3a16:	add.w	r7, r1, #20
    3a1a:	add.w	fp, r0, #20
    3a1e:	ldr.w	r2, [r7, r8, lsl #2]
    3a22:	ldr.w	r3, [fp, r8, lsl #2]
    3a26:	mov.w	r4, r8, lsl #2
    3a2a:	sub	sp, #12
    3a2c:	adds	r2, #1
    3a2e:	udiv	r9, r3, r2
    3a32:	add.w	r3, fp, r4
    3a36:	str	r4, [sp, #0]
    3a38:	add.w	sl, r7, r4
    3a3c:	str	r3, [sp, #4]
    3a3e:	cmp.w	r9, #0
    3a42:	beq.n	3ab8 <quorem+0xb4>
    3a44:	movs	r5, #0
    3a46:	mov	ip, r7
    3a48:	mov	lr, fp
    3a4a:	mov	r3, r5
    3a4c:	ldr.w	r6, [ip], #4
    3a50:	ldr.w	r2, [lr]
    3a54:	uxth	r4, r6
    3a56:	mla	r5, r9, r4, r5
    3a5a:	lsrs	r6, r6, #16
    3a5c:	lsrs	r4, r5, #16
    3a5e:	mla	r4, r9, r6, r4
    3a62:	uxth	r5, r5
    3a64:	subs	r3, r3, r5
    3a66:	uxth	r6, r4
    3a68:	uxtah	r3, r3, r2
    3a6c:	rsb	r6, r6, r2, lsr #16
    3a70:	add.w	r6, r6, r3, asr #16
    3a74:	uxth	r3, r3
    3a76:	orr.w	r3, r3, r6, lsl #16
    3a7a:	cmp	sl, ip
    3a7c:	str.w	r3, [lr], #4
    3a80:	mov.w	r5, r4, lsr #16
    3a84:	mov.w	r3, r6, asr #16
    3a88:	bcs.n	3a4c <quorem+0x48>
    3a8a:	ldr	r3, [sp, #0]
    3a8c:	ldr.w	r3, [fp, r3]
    3a90:	cbnz	r3, 3ab8 <quorem+0xb4>
    3a92:	ldr	r4, [sp, #4]
    3a94:	subs	r3, r4, #4
    3a96:	cmp	fp, r3
    3a98:	bcs.n	3ab4 <quorem+0xb0>
    3a9a:	ldr.w	r3, [r4, #-4]
    3a9e:	cbnz	r3, 3ab4 <quorem+0xb0>
    3aa0:	sub.w	r3, r4, #8
    3aa4:	b.n	3aac <quorem+0xa8>
    3aa6:	ldr	r2, [r3, #0]
    3aa8:	subs	r3, #4
    3aaa:	cbnz	r2, 3ab4 <quorem+0xb0>
    3aac:	cmp	fp, r3
    3aae:	add.w	r8, r8, #4294967295
    3ab2:	bcc.n	3aa6 <quorem+0xa2>
    3ab4:	str.w	r8, [r0, #16]
    3ab8:	mov	r4, r0
    3aba:	bl	3730 <__mcmp>
    3abe:	cmp	r0, #0
    3ac0:	blt.n	3b20 <quorem+0x11c>
    3ac2:	add.w	r9, r9, #1
    3ac6:	mov	r5, fp
    3ac8:	movs	r3, #0
    3aca:	ldr.w	r1, [r7], #4
    3ace:	ldr	r0, [r5, #0]
    3ad0:	uxth	r2, r1
    3ad2:	subs	r2, r3, r2
    3ad4:	lsrs	r1, r1, #16
    3ad6:	uxtah	r2, r2, r0
    3ada:	rsb	r3, r1, r0, lsr #16
    3ade:	add.w	r3, r3, r2, asr #16
    3ae2:	uxth	r1, r2
    3ae4:	orr.w	r1, r1, r3, lsl #16
    3ae8:	cmp	sl, r7
    3aea:	str.w	r1, [r5], #4
    3aee:	mov.w	r3, r3, asr #16
    3af2:	bcs.n	3aca <quorem+0xc6>
    3af4:	ldr.w	r2, [fp, r8, lsl #2]
    3af8:	add.w	r3, fp, r8, lsl #2
    3afc:	cbnz	r2, 3b20 <quorem+0x11c>
    3afe:	subs	r2, r3, #4
    3b00:	cmp	fp, r2
    3b02:	bcs.n	3b1c <quorem+0x118>
    3b04:	ldr.w	r2, [r3, #-4]
    3b08:	cbnz	r2, 3b1c <quorem+0x118>
    3b0a:	subs	r3, #8
    3b0c:	b.n	3b14 <quorem+0x110>
    3b0e:	ldr	r2, [r3, #0]
    3b10:	subs	r3, #4
    3b12:	cbnz	r2, 3b1c <quorem+0x118>
    3b14:	cmp	fp, r3
    3b16:	add.w	r8, r8, #4294967295
    3b1a:	bcc.n	3b0e <quorem+0x10a>
    3b1c:	str.w	r8, [r4, #16]
    3b20:	mov	r0, r9
    3b22:	add	sp, #12
    3b24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b28:	movs	r0, #0
    3b2a:	bx	lr
    3b2c:	movs	r0, r0
	...

00003b30 <_dtoa_r>:
    3b30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b34:	vmov	r6, r7, d0
    3b38:	sub	sp, #76	; 0x4c
    3b3a:	ldr	r5, [r0, #64]	; 0x40
    3b3c:	str	r1, [sp, #4]
    3b3e:	mov	r4, r0
    3b40:	mov	r8, r2
    3b42:	str	r3, [sp, #16]
    3b44:	vmov	sl, s0
    3b48:	mov	fp, r7
    3b4a:	cbz	r5, 3b60 <_dtoa_r+0x30>
    3b4c:	ldr	r2, [r0, #68]	; 0x44
    3b4e:	str	r2, [r5, #4]
    3b50:	movs	r3, #1
    3b52:	lsls	r3, r2
    3b54:	str	r3, [r5, #8]
    3b56:	mov	r1, r5
    3b58:	bl	336c <_Bfree>
    3b5c:	movs	r3, #0
    3b5e:	str	r3, [r4, #64]	; 0x40
    3b60:	cmp.w	fp, #0
    3b64:	mov	r6, fp
    3b66:	blt.n	3bd2 <_dtoa_r+0xa2>
    3b68:	ldr	r2, [sp, #112]	; 0x70
    3b6a:	movs	r3, #0
    3b6c:	str	r3, [r2, #0]
    3b6e:	ldr	r3, [pc, #784]	; (3e80 <_dtoa_r+0x350>)
    3b70:	mov	r2, r3
    3b72:	ands	r3, r6
    3b74:	cmp	r3, r2
    3b76:	beq.n	3ba4 <_dtoa_r+0x74>
    3b78:	vmov	d7, sl, fp
    3b7c:	vcmp.f64	d7, #0.0
    3b80:	vmrs	APSR_nzcv, fpscr
    3b84:	strd	sl, fp, [sp, #8]
    3b88:	bne.n	3be0 <_dtoa_r+0xb0>
    3b8a:	ldr	r2, [sp, #16]
    3b8c:	movs	r3, #1
    3b8e:	str	r3, [r2, #0]
    3b90:	ldr	r3, [sp, #116]	; 0x74
    3b92:	cmp	r3, #0
    3b94:	beq.w	3d06 <_dtoa_r+0x1d6>
    3b98:	ldr	r0, [pc, #744]	; (3e84 <_dtoa_r+0x354>)
    3b9a:	str	r0, [r3, #0]
    3b9c:	subs	r0, #1
    3b9e:	add	sp, #76	; 0x4c
    3ba0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ba4:	ldr	r2, [sp, #16]
    3ba6:	movw	r3, #9999	; 0x270f
    3baa:	str	r3, [r2, #0]
    3bac:	cmp.w	sl, #0
    3bb0:	beq.w	3cd8 <_dtoa_r+0x1a8>
    3bb4:	ldr	r0, [pc, #720]	; (3e88 <_dtoa_r+0x358>)
    3bb6:	ldr	r3, [sp, #116]	; 0x74
    3bb8:	cmp	r3, #0
    3bba:	beq.n	3b9e <_dtoa_r+0x6e>
    3bbc:	ldrb	r3, [r0, #3]
    3bbe:	cmp	r3, #0
    3bc0:	beq.w	3d0a <_dtoa_r+0x1da>
    3bc4:	add.w	r3, r0, #8
    3bc8:	ldr	r2, [sp, #116]	; 0x74
    3bca:	str	r3, [r2, #0]
    3bcc:	add	sp, #76	; 0x4c
    3bce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bd2:	ldr	r2, [sp, #112]	; 0x70
    3bd4:	movs	r3, #1
    3bd6:	bic.w	r6, fp, #2147483648	; 0x80000000
    3bda:	str	r3, [r2, #0]
    3bdc:	mov	fp, r6
    3bde:	b.n	3b6e <_dtoa_r+0x3e>
    3be0:	add	r1, sp, #68	; 0x44
    3be2:	add	r2, sp, #64	; 0x40
    3be4:	vldr	d0, [sp, #8]
    3be8:	mov	r0, r4
    3bea:	bl	3888 <__d2b>
    3bee:	lsrs	r1, r6, #20
    3bf0:	str	r0, [sp, #28]
    3bf2:	bne.n	3cea <_dtoa_r+0x1ba>
    3bf4:	ldr	r0, [sp, #64]	; 0x40
    3bf6:	ldr	r1, [sp, #68]	; 0x44
    3bf8:	add	r1, r0
    3bfa:	addw	r3, r1, #1074	; 0x432
    3bfe:	cmp	r3, #32
    3c00:	ble.w	4086 <_dtoa_r+0x556>
    3c04:	rsb	r3, r3, #64	; 0x40
    3c08:	addw	r2, r1, #1042	; 0x412
    3c0c:	lsls	r6, r3
    3c0e:	lsr.w	r3, sl, r2
    3c12:	orrs	r3, r6
    3c14:	vmov	s15, r3
    3c18:	vcvt.f64.u32	d7, s15
    3c1c:	movs	r5, #1
    3c1e:	vmov	r2, r3, d7
    3c22:	subs	r1, #1
    3c24:	sub.w	r3, r3, #32505856	; 0x1f00000
    3c28:	str	r5, [sp, #40]	; 0x28
    3c2a:	vmov	d7, r2, r3
    3c2e:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    3c32:	vldr	d4, [pc, #564]	; 3e68 <_dtoa_r+0x338>
    3c36:	vsub.f64	d6, d7, d6
    3c3a:	vldr	d7, [pc, #564]	; 3e70 <_dtoa_r+0x340>
    3c3e:	vldr	d5, [pc, #568]	; 3e78 <_dtoa_r+0x348>
    3c42:	vfma.f64	d7, d6, d4
    3c46:	vmov	s13, r1
    3c4a:	vcvt.f64.s32	d6, s13
    3c4e:	vfma.f64	d7, d6, d5
    3c52:	vcvt.s32.f64	s13, d7
    3c56:	vcmpe.f64	d7, #0.0
    3c5a:	vmrs	APSR_nzcv, fpscr
    3c5e:	vstr	s13, [sp, #8]
    3c62:	bmi.w	3e9e <_dtoa_r+0x36e>
    3c66:	ldr	r5, [sp, #8]
    3c68:	cmp	r5, #22
    3c6a:	bhi.w	3e98 <_dtoa_r+0x368>
    3c6e:	ldr	r3, [pc, #540]	; (3e8c <_dtoa_r+0x35c>)
    3c70:	add.w	r3, r3, r5, lsl #3
    3c74:	vldr	d7, [r3]
    3c78:	vmov	d6, sl, fp
    3c7c:	vcmpe.f64	d7, d6
    3c80:	vmrs	APSR_nzcv, fpscr
    3c84:	ble.w	4094 <_dtoa_r+0x564>
    3c88:	subs	r3, r5, #1
    3c8a:	str	r3, [sp, #8]
    3c8c:	movs	r3, #0
    3c8e:	str	r3, [sp, #48]	; 0x30
    3c90:	subs	r1, r0, r1
    3c92:	subs.w	r9, r1, #1
    3c96:	bmi.w	3ec8 <_dtoa_r+0x398>
    3c9a:	movs	r3, #0
    3c9c:	str	r3, [sp, #24]
    3c9e:	ldr	r3, [sp, #8]
    3ca0:	cmp	r3, #0
    3ca2:	blt.w	3eb6 <_dtoa_r+0x386>
    3ca6:	add	r9, r3
    3ca8:	str	r3, [sp, #44]	; 0x2c
    3caa:	movs	r3, #0
    3cac:	str	r3, [sp, #20]
    3cae:	ldr	r3, [sp, #4]
    3cb0:	cmp	r3, #9
    3cb2:	bhi.n	3d0e <_dtoa_r+0x1de>
    3cb4:	cmp	r3, #5
    3cb6:	ble.w	4778 <_dtoa_r+0xc48>
    3cba:	subs	r3, #4
    3cbc:	str	r3, [sp, #4]
    3cbe:	movs	r3, #0
    3cc0:	str	r3, [sp, #56]	; 0x38
    3cc2:	ldr	r3, [sp, #4]
    3cc4:	subs	r3, #2
    3cc6:	cmp	r3, #3
    3cc8:	bhi.w	478a <_dtoa_r+0xc5a>
    3ccc:	tbh	[pc, r3, lsl #1]
    3cd0:	.word	0x01e502a9
    3cd4:	.word	0x03c802b5
    3cd8:	ldr	r3, [pc, #428]	; (3e88 <_dtoa_r+0x358>)
    3cda:	ldr	r2, [pc, #436]	; (3e90 <_dtoa_r+0x360>)
    3cdc:	ubfx	r0, r6, #0, #20
    3ce0:	cmp	r0, #0
    3ce2:	ite	ne
    3ce4:	movne	r0, r3
    3ce6:	moveq	r0, r2
    3ce8:	b.n	3bb6 <_dtoa_r+0x86>
    3cea:	ldrd	r2, r3, [sp, #8]
    3cee:	ubfx	r0, r3, #0, #20
    3cf2:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    3cf6:	movs	r5, #0
    3cf8:	subw	r1, r1, #1023	; 0x3ff
    3cfc:	orr.w	r3, r3, #3145728	; 0x300000
    3d00:	ldr	r0, [sp, #64]	; 0x40
    3d02:	str	r5, [sp, #40]	; 0x28
    3d04:	b.n	3c2a <_dtoa_r+0xfa>
    3d06:	ldr	r0, [pc, #396]	; (3e94 <_dtoa_r+0x364>)
    3d08:	b.n	3b9e <_dtoa_r+0x6e>
    3d0a:	adds	r3, r0, #3
    3d0c:	b.n	3bc8 <_dtoa_r+0x98>
    3d0e:	movs	r1, #0
    3d10:	str	r1, [r4, #68]	; 0x44
    3d12:	mov	r0, r4
    3d14:	mov	r8, r1
    3d16:	str	r1, [sp, #4]
    3d18:	bl	3320 <_Balloc>
    3d1c:	mov.w	r7, #4294967295
    3d20:	movs	r3, #1
    3d22:	str	r0, [sp, #32]
    3d24:	str	r0, [r4, #64]	; 0x40
    3d26:	str	r7, [sp, #52]	; 0x34
    3d28:	str	r3, [sp, #36]	; 0x24
    3d2a:	ldr	r3, [sp, #68]	; 0x44
    3d2c:	cmp	r3, #0
    3d2e:	blt.n	3e26 <_dtoa_r+0x2f6>
    3d30:	ldr	r2, [sp, #8]
    3d32:	cmp	r2, #14
    3d34:	bgt.n	3e26 <_dtoa_r+0x2f6>
    3d36:	ldr	r3, [pc, #340]	; (3e8c <_dtoa_r+0x35c>)
    3d38:	cmp.w	r8, #0
    3d3c:	add.w	r3, r3, r2, lsl #3
    3d40:	vldr	d4, [r3]
    3d44:	blt.w	4250 <_dtoa_r+0x720>
    3d48:	vneg.f64	d2, d4
    3d4c:	vmov	d7, sl, fp
    3d50:	vdiv.f64	d6, d7, d4
    3d54:	vcvt.s32.f64	s12, d6
    3d58:	ldr	r2, [sp, #32]
    3d5a:	vmov	r3, s12
    3d5e:	cmp	r7, #1
    3d60:	add.w	r3, r3, #48	; 0x30
    3d64:	vcvt.f64.s32	d5, s12
    3d68:	add.w	fp, r2, #1
    3d6c:	strb	r3, [r2, #0]
    3d6e:	vfma.f64	d7, d2, d5
    3d72:	beq.n	3dba <_dtoa_r+0x28a>
    3d74:	vmov.f64	d3, #36	; 0x41200000  10.0
    3d78:	vmul.f64	d7, d7, d3
    3d7c:	vcmp.f64	d7, #0.0
    3d80:	vmrs	APSR_nzcv, fpscr
    3d84:	beq.n	3dfc <_dtoa_r+0x2cc>
    3d86:	ldr	r2, [sp, #32]
    3d88:	b.n	3d98 <_dtoa_r+0x268>
    3d8a:	vmul.f64	d7, d7, d3
    3d8e:	vcmp.f64	d7, #0.0
    3d92:	vmrs	APSR_nzcv, fpscr
    3d96:	beq.n	3dfc <_dtoa_r+0x2cc>
    3d98:	vdiv.f64	d6, d7, d4
    3d9c:	vcvt.s32.f64	s12, d6
    3da0:	vmov	r3, s12
    3da4:	adds	r3, #48	; 0x30
    3da6:	strb.w	r3, [fp], #1
    3daa:	rsb	r3, r2, fp
    3dae:	cmp	r3, r7
    3db0:	vcvt.f64.s32	d5, s12
    3db4:	vfma.f64	d7, d2, d5
    3db8:	bne.n	3d8a <_dtoa_r+0x25a>
    3dba:	vadd.f64	d7, d7, d7
    3dbe:	vcmpe.f64	d4, d7
    3dc2:	vmrs	APSR_nzcv, fpscr
    3dc6:	bmi.n	3dda <_dtoa_r+0x2aa>
    3dc8:	vcmp.f64	d4, d7
    3dcc:	vmrs	APSR_nzcv, fpscr
    3dd0:	bne.n	3dfc <_dtoa_r+0x2cc>
    3dd2:	vmov	r3, s12
    3dd6:	lsls	r3, r3, #31
    3dd8:	bpl.n	3dfc <_dtoa_r+0x2cc>
    3dda:	ldrb.w	r0, [fp, #-1]
    3dde:	ldr	r2, [sp, #32]
    3de0:	add.w	r3, fp, #4294967295
    3de4:	b.n	3df0 <_dtoa_r+0x2c0>
    3de6:	cmp	r2, r3
    3de8:	beq.w	45b6 <_dtoa_r+0xa86>
    3dec:	ldrb.w	r0, [r3, #-1]!
    3df0:	cmp	r0, #57	; 0x39
    3df2:	add.w	fp, r3, #1
    3df6:	beq.n	3de6 <_dtoa_r+0x2b6>
    3df8:	adds	r0, #1
    3dfa:	strb	r0, [r3, #0]
    3dfc:	ldr	r1, [sp, #28]
    3dfe:	mov	r0, r4
    3e00:	bl	336c <_Bfree>
    3e04:	movs	r2, #0
    3e06:	ldr	r3, [sp, #8]
    3e08:	strb.w	r2, [fp]
    3e0c:	ldr	r2, [sp, #16]
    3e0e:	adds	r3, #1
    3e10:	str	r3, [r2, #0]
    3e12:	ldr	r3, [sp, #116]	; 0x74
    3e14:	cmp	r3, #0
    3e16:	beq.w	44e6 <_dtoa_r+0x9b6>
    3e1a:	ldr	r0, [sp, #32]
    3e1c:	str.w	fp, [r3]
    3e20:	add	sp, #76	; 0x4c
    3e22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e26:	ldr	r2, [sp, #36]	; 0x24
    3e28:	cmp	r2, #0
    3e2a:	beq.n	3ed4 <_dtoa_r+0x3a4>
    3e2c:	ldr	r2, [sp, #4]
    3e2e:	cmp	r2, #1
    3e30:	ble.w	4290 <_dtoa_r+0x760>
    3e34:	ldr	r1, [sp, #20]
    3e36:	subs	r2, r7, #1
    3e38:	cmp	r1, r2
    3e3a:	blt.w	44ec <_dtoa_r+0x9bc>
    3e3e:	subs	r3, r1, r2
    3e40:	str	r3, [sp, #56]	; 0x38
    3e42:	cmp	r7, #0
    3e44:	ldr	r3, [sp, #24]
    3e46:	blt.w	4692 <_dtoa_r+0xb62>
    3e4a:	str	r3, [sp, #40]	; 0x28
    3e4c:	mov	r3, r7
    3e4e:	ldr	r2, [sp, #24]
    3e50:	movs	r1, #1
    3e52:	add	r2, r3
    3e54:	mov	r0, r4
    3e56:	str	r2, [sp, #24]
    3e58:	add	r9, r3
    3e5a:	bl	349c <__i2b>
    3e5e:	mov	r6, r0
    3e60:	b.n	3ede <_dtoa_r+0x3ae>
    3e62:	nop
    3e64:	nop.w
    3e68:	.word	0x636f4361
    3e6c:	.word	0x3fd287a7
    3e70:	.word	0x8b60c8b3
    3e74:	.word	0x3fc68a28
    3e78:	.word	0x509f79fb
    3e7c:	.word	0x3fd34413
    3e80:	.word	0x7ff00000
    3e84:	.word	0x20000585
    3e88:	.word	0x20000580
    3e8c:	.word	0x20000478
    3e90:	.word	0x20000574
    3e94:	.word	0x20000584
    3e98:	movs	r3, #1
    3e9a:	str	r3, [sp, #48]	; 0x30
    3e9c:	b.n	3c90 <_dtoa_r+0x160>
    3e9e:	vcvt.f64.s32	d6, s13
    3ea2:	vcmp.f64	d7, d6
    3ea6:	vmrs	APSR_nzcv, fpscr
    3eaa:	beq.w	3c66 <_dtoa_r+0x136>
    3eae:	ldr	r3, [sp, #8]
    3eb0:	subs	r3, #1
    3eb2:	str	r3, [sp, #8]
    3eb4:	b.n	3c66 <_dtoa_r+0x136>
    3eb6:	ldr	r2, [sp, #24]
    3eb8:	ldr	r3, [sp, #8]
    3eba:	subs	r2, r2, r3
    3ebc:	negs	r3, r3
    3ebe:	str	r3, [sp, #20]
    3ec0:	movs	r3, #0
    3ec2:	str	r2, [sp, #24]
    3ec4:	str	r3, [sp, #44]	; 0x2c
    3ec6:	b.n	3cae <_dtoa_r+0x17e>
    3ec8:	rsb	r3, r9, #0
    3ecc:	str	r3, [sp, #24]
    3ece:	mov.w	r9, #0
    3ed2:	b.n	3c9e <_dtoa_r+0x16e>
    3ed4:	ldr	r3, [sp, #20]
    3ed6:	str	r3, [sp, #56]	; 0x38
    3ed8:	ldr	r6, [sp, #36]	; 0x24
    3eda:	ldr	r3, [sp, #24]
    3edc:	str	r3, [sp, #40]	; 0x28
    3ede:	ldr	r1, [sp, #40]	; 0x28
    3ee0:	mov	r3, r1
    3ee2:	cbz	r1, 3efe <_dtoa_r+0x3ce>
    3ee4:	cmp.w	r9, #0
    3ee8:	ble.n	3efe <_dtoa_r+0x3ce>
    3eea:	cmp	r1, r9
    3eec:	ldr	r2, [sp, #24]
    3eee:	it	ge
    3ef0:	movge	r3, r9
    3ef2:	subs	r2, r2, r3
    3ef4:	str	r2, [sp, #24]
    3ef6:	subs	r2, r1, r3
    3ef8:	str	r2, [sp, #40]	; 0x28
    3efa:	rsb	r9, r3, r9
    3efe:	ldr	r3, [sp, #20]
    3f00:	cmp	r3, #0
    3f02:	ble.w	4406 <_dtoa_r+0x8d6>
    3f06:	ldr	r2, [sp, #36]	; 0x24
    3f08:	cmp	r2, #0
    3f0a:	beq.w	4242 <_dtoa_r+0x712>
    3f0e:	ldr	r2, [sp, #56]	; 0x38
    3f10:	cmp	r2, #0
    3f12:	beq.w	4242 <_dtoa_r+0x712>
    3f16:	mov	r1, r6
    3f18:	mov	r0, r4
    3f1a:	bl	35e0 <__pow5mult>
    3f1e:	ldr	r2, [sp, #28]
    3f20:	mov	r1, r0
    3f22:	mov	r6, r0
    3f24:	mov	r0, r4
    3f26:	bl	34b0 <__multiply>
    3f2a:	ldr	r1, [sp, #28]
    3f2c:	mov	r5, r0
    3f2e:	mov	r0, r4
    3f30:	bl	336c <_Bfree>
    3f34:	ldr	r3, [sp, #20]
    3f36:	ldr	r2, [sp, #56]	; 0x38
    3f38:	subs	r3, r3, r2
    3f3a:	str	r3, [sp, #20]
    3f3c:	bne.w	4240 <_dtoa_r+0x710>
    3f40:	movs	r1, #1
    3f42:	mov	r0, r4
    3f44:	bl	349c <__i2b>
    3f48:	ldr	r3, [sp, #44]	; 0x2c
    3f4a:	str	r0, [sp, #20]
    3f4c:	cmp	r3, #0
    3f4e:	beq.w	42aa <_dtoa_r+0x77a>
    3f52:	mov	r1, r0
    3f54:	mov	r2, r3
    3f56:	mov	r0, r4
    3f58:	bl	35e0 <__pow5mult>
    3f5c:	ldr	r3, [sp, #4]
    3f5e:	str	r0, [sp, #20]
    3f60:	cmp	r3, #1
    3f62:	ble.w	4466 <_dtoa_r+0x936>
    3f66:	movs	r3, #0
    3f68:	str	r3, [sp, #28]
    3f6a:	ldr	r2, [sp, #20]
    3f6c:	ldr	r3, [r2, #16]
    3f6e:	add.w	r3, r2, r3, lsl #2
    3f72:	ldr	r0, [r3, #16]
    3f74:	bl	3400 <__hi0bits>
    3f78:	rsb	r0, r0, #32
    3f7c:	add	r0, r9
    3f7e:	ands.w	r0, r0, #31
    3f82:	beq.w	42a6 <_dtoa_r+0x776>
    3f86:	rsb	r3, r0, #32
    3f8a:	cmp	r3, #4
    3f8c:	ble.w	4780 <_dtoa_r+0xc50>
    3f90:	rsb	r0, r0, #28
    3f94:	ldr	r3, [sp, #24]
    3f96:	add	r3, r0
    3f98:	str	r3, [sp, #24]
    3f9a:	ldr	r3, [sp, #40]	; 0x28
    3f9c:	add	r3, r0
    3f9e:	str	r3, [sp, #40]	; 0x28
    3fa0:	add	r9, r0
    3fa2:	ldr	r3, [sp, #24]
    3fa4:	cmp	r3, #0
    3fa6:	ble.n	3fb4 <_dtoa_r+0x484>
    3fa8:	mov	r1, r5
    3faa:	mov	r2, r3
    3fac:	mov	r0, r4
    3fae:	bl	3680 <__lshift>
    3fb2:	mov	r5, r0
    3fb4:	cmp.w	r9, #0
    3fb8:	ble.n	3fc6 <_dtoa_r+0x496>
    3fba:	mov	r2, r9
    3fbc:	ldr	r1, [sp, #20]
    3fbe:	mov	r0, r4
    3fc0:	bl	3680 <__lshift>
    3fc4:	str	r0, [sp, #20]
    3fc6:	ldr	r3, [sp, #48]	; 0x30
    3fc8:	cmp	r3, #0
    3fca:	bne.w	43d0 <_dtoa_r+0x8a0>
    3fce:	cmp	r7, #0
    3fd0:	ble.w	4414 <_dtoa_r+0x8e4>
    3fd4:	ldr	r3, [sp, #36]	; 0x24
    3fd6:	cmp	r3, #0
    3fd8:	bne.w	42d2 <_dtoa_r+0x7a2>
    3fdc:	ldr.w	fp, [sp, #32]
    3fe0:	ldr.w	sl, [sp, #20]
    3fe4:	mov	r8, fp
    3fe6:	b.n	3fee <_dtoa_r+0x4be>
    3fe8:	bl	3380 <__multadd>
    3fec:	mov	r5, r0
    3fee:	mov	r1, sl
    3ff0:	mov	r0, r5
    3ff2:	bl	3a04 <quorem>
    3ff6:	add.w	r9, r0, #48	; 0x30
    3ffa:	strb.w	r9, [r8], #1
    3ffe:	rsb	r3, fp, r8
    4002:	cmp	r3, r7
    4004:	mov.w	r2, #10
    4008:	mov.w	r3, #0
    400c:	mov	r1, r5
    400e:	mov	r0, r4
    4010:	blt.n	3fe8 <_dtoa_r+0x4b8>
    4012:	ldr	r3, [sp, #32]
    4014:	cmp	r7, #1
    4016:	ite	ge
    4018:	addge	r3, r3, r7
    401a:	addlt	r3, #1
    401c:	mov	fp, r3
    401e:	mov.w	sl, #0
    4022:	mov	r1, r5
    4024:	movs	r2, #1
    4026:	mov	r0, r4
    4028:	bl	3680 <__lshift>
    402c:	ldr	r1, [sp, #20]
    402e:	str	r0, [sp, #28]
    4030:	bl	3730 <__mcmp>
    4034:	cmp	r0, #0
    4036:	ble.w	4552 <_dtoa_r+0xa22>
    403a:	ldrb.w	r2, [fp, #-1]
    403e:	ldr	r1, [sp, #32]
    4040:	add.w	r3, fp, #4294967295
    4044:	b.n	4050 <_dtoa_r+0x520>
    4046:	cmp	r3, r1
    4048:	beq.w	4452 <_dtoa_r+0x922>
    404c:	ldrb.w	r2, [r3, #-1]!
    4050:	cmp	r2, #57	; 0x39
    4052:	add.w	fp, r3, #1
    4056:	beq.n	4046 <_dtoa_r+0x516>
    4058:	adds	r2, #1
    405a:	strb	r2, [r3, #0]
    405c:	ldr	r1, [sp, #20]
    405e:	mov	r0, r4
    4060:	bl	336c <_Bfree>
    4064:	cmp	r6, #0
    4066:	beq.w	3dfc <_dtoa_r+0x2cc>
    406a:	cmp.w	sl, #0
    406e:	beq.n	407c <_dtoa_r+0x54c>
    4070:	cmp	sl, r6
    4072:	beq.n	407c <_dtoa_r+0x54c>
    4074:	mov	r1, sl
    4076:	mov	r0, r4
    4078:	bl	336c <_Bfree>
    407c:	mov	r1, r6
    407e:	mov	r0, r4
    4080:	bl	336c <_Bfree>
    4084:	b.n	3dfc <_dtoa_r+0x2cc>
    4086:	rsb	r3, r3, #32
    408a:	lsl.w	r3, sl, r3
    408e:	vmov	s15, r3
    4092:	b.n	3c18 <_dtoa_r+0xe8>
    4094:	movs	r3, #0
    4096:	str	r3, [sp, #48]	; 0x30
    4098:	b.n	3c90 <_dtoa_r+0x160>
    409a:	movs	r3, #0
    409c:	str	r3, [sp, #36]	; 0x24
    409e:	ldr	r3, [sp, #8]
    40a0:	add	r3, r8
    40a2:	adds	r7, r3, #1
    40a4:	cmp	r7, #0
    40a6:	str	r3, [sp, #52]	; 0x34
    40a8:	ble.w	4506 <_dtoa_r+0x9d6>
    40ac:	mov	r6, r7
    40ae:	mov	r5, r7
    40b0:	movs	r1, #0
    40b2:	cmp	r6, #23
    40b4:	str	r1, [r4, #68]	; 0x44
    40b6:	bls.n	40ce <_dtoa_r+0x59e>
    40b8:	movs	r2, #1
    40ba:	movs	r3, #4
    40bc:	lsls	r3, r3, #1
    40be:	add.w	r0, r3, #20
    40c2:	cmp	r0, r6
    40c4:	mov	r1, r2
    40c6:	add.w	r2, r2, #1
    40ca:	bls.n	40bc <_dtoa_r+0x58c>
    40cc:	str	r1, [r4, #68]	; 0x44
    40ce:	mov	r0, r4
    40d0:	bl	3320 <_Balloc>
    40d4:	cmp	r5, #14
    40d6:	str	r0, [sp, #32]
    40d8:	str	r0, [r4, #64]	; 0x40
    40da:	bhi.w	3d2a <_dtoa_r+0x1fa>
    40de:	ldr	r3, [sp, #56]	; 0x38
    40e0:	cmp	r3, #0
    40e2:	beq.w	3d2a <_dtoa_r+0x1fa>
    40e6:	ldr	r1, [sp, #8]
    40e8:	cmp	r1, #0
    40ea:	strd	sl, fp, [sp, #56]	; 0x38
    40ee:	ble.w	4574 <_dtoa_r+0xa44>
    40f2:	ldr	r3, [pc, #792]	; (440c <_dtoa_r+0x8dc>)
    40f4:	and.w	r2, r1, #15
    40f8:	add.w	r2, r3, r2, lsl #3
    40fc:	asrs	r3, r1, #4
    40fe:	lsls	r6, r3, #27
    4100:	vldr	d6, [r2]
    4104:	bpl.w	44fe <_dtoa_r+0x9ce>
    4108:	ldr	r2, [pc, #772]	; (4410 <_dtoa_r+0x8e0>)
    410a:	vldr	d7, [r2, #32]
    410e:	vmov	d4, sl, fp
    4112:	and.w	r3, r3, #15
    4116:	movs	r1, #3
    4118:	vdiv.f64	d5, d4, d7
    411c:	cbz	r3, 4136 <_dtoa_r+0x606>
    411e:	ldr	r2, [pc, #752]	; (4410 <_dtoa_r+0x8e0>)
    4120:	lsls	r5, r3, #31
    4122:	bpl.n	412e <_dtoa_r+0x5fe>
    4124:	vldr	d7, [r2]
    4128:	adds	r1, #1
    412a:	vmul.f64	d6, d6, d7
    412e:	asrs	r3, r3, #1
    4130:	add.w	r2, r2, #8
    4134:	bne.n	4120 <_dtoa_r+0x5f0>
    4136:	vdiv.f64	d4, d5, d6
    413a:	ldr	r3, [sp, #48]	; 0x30
    413c:	cbz	r3, 414e <_dtoa_r+0x61e>
    413e:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4142:	vcmpe.f64	d4, d7
    4146:	vmrs	APSR_nzcv, fpscr
    414a:	bmi.w	46bc <_dtoa_r+0xb8c>
    414e:	vmov	s15, r1
    4152:	vcvt.f64.s32	d6, s15
    4156:	vmov.f64	d7, #28	; 0x40e00000  7.0
    415a:	vfma.f64	d7, d6, d4
    415e:	vmov	r2, r3, d7
    4162:	sub.w	r3, r3, #54525952	; 0x3400000
    4166:	cmp	r7, #0
    4168:	beq.w	44b8 <_dtoa_r+0x988>
    416c:	ldr	r6, [sp, #8]
    416e:	mov	r1, r7
    4170:	ldr	r0, [sp, #36]	; 0x24
    4172:	cmp	r0, #0
    4174:	beq.w	4612 <_dtoa_r+0xae2>
    4178:	vmov.f64	d3, #96	; 0x3f000000  0.5
    417c:	ldr	r0, [pc, #652]	; (440c <_dtoa_r+0x8dc>)
    417e:	ldr	r5, [sp, #32]
    4180:	add.w	r0, r0, r1, lsl #3
    4184:	vldr	d6, [r0, #-8]
    4188:	vcvt.s32.f64	s14, d4
    418c:	vdiv.f64	d5, d3, d6
    4190:	vmov	r0, s14
    4194:	vmov	d6, r2, r3
    4198:	adds	r0, #48	; 0x30
    419a:	uxtb	r0, r0
    419c:	vsub.f64	d5, d5, d6
    41a0:	vcvt.f64.s32	d7, s14
    41a4:	vsub.f64	d7, d4, d7
    41a8:	vcmpe.f64	d5, d7
    41ac:	vmrs	APSR_nzcv, fpscr
    41b0:	strb	r0, [r5, #0]
    41b2:	add.w	fp, r5, #1
    41b6:	bgt.n	421e <_dtoa_r+0x6ee>
    41b8:	vmov.f64	d3, #112	; 0x3f800000  1.0
    41bc:	vsub.f64	d6, d3, d7
    41c0:	vcmpe.f64	d5, d6
    41c4:	vmrs	APSR_nzcv, fpscr
    41c8:	bgt.w	4728 <_dtoa_r+0xbf8>
    41cc:	cmp	r1, #1
    41ce:	ble.w	456c <_dtoa_r+0xa3c>
    41d2:	vmov.f64	d4, #36	; 0x41200000  10.0
    41d6:	ldr	r3, [sp, #32]
    41d8:	add	r1, r3
    41da:	b.n	41f2 <_dtoa_r+0x6c2>
    41dc:	vsub.f64	d6, d3, d7
    41e0:	vcmpe.f64	d6, d5
    41e4:	vmrs	APSR_nzcv, fpscr
    41e8:	bmi.w	4728 <_dtoa_r+0xbf8>
    41ec:	cmp	fp, r1
    41ee:	beq.w	456c <_dtoa_r+0xa3c>
    41f2:	vmul.f64	d7, d7, d4
    41f6:	vmul.f64	d5, d5, d4
    41fa:	vcvt.s32.f64	s12, d7
    41fe:	vmov	r3, s12
    4202:	add.w	r0, r3, #48	; 0x30
    4206:	uxtb	r0, r0
    4208:	vcvt.f64.s32	d6, s12
    420c:	vsub.f64	d7, d7, d6
    4210:	vcmpe.f64	d7, d5
    4214:	vmrs	APSR_nzcv, fpscr
    4218:	strb.w	r0, [fp], #1
    421c:	bpl.n	41dc <_dtoa_r+0x6ac>
    421e:	str	r6, [sp, #8]
    4220:	b.n	3dfc <_dtoa_r+0x2cc>
    4222:	movs	r3, #0
    4224:	str	r3, [sp, #36]	; 0x24
    4226:	cmp.w	r8, #0
    422a:	ble.w	450e <_dtoa_r+0x9de>
    422e:	mov	r6, r8
    4230:	mov	r5, r8
    4232:	str.w	r8, [sp, #52]	; 0x34
    4236:	mov	r7, r8
    4238:	b.n	40b0 <_dtoa_r+0x580>
    423a:	movs	r3, #1
    423c:	str	r3, [sp, #36]	; 0x24
    423e:	b.n	4226 <_dtoa_r+0x6f6>
    4240:	str	r5, [sp, #28]
    4242:	ldr	r2, [sp, #20]
    4244:	ldr	r1, [sp, #28]
    4246:	mov	r0, r4
    4248:	bl	35e0 <__pow5mult>
    424c:	mov	r5, r0
    424e:	b.n	3f40 <_dtoa_r+0x410>
    4250:	cmp	r7, #0
    4252:	bgt.w	3d48 <_dtoa_r+0x218>
    4256:	bne.w	44de <_dtoa_r+0x9ae>
    425a:	vmov.f64	d7, #20	; 0x40a00000  5.0
    425e:	vmul.f64	d4, d4, d7
    4262:	vmov	d7, sl, fp
    4266:	vcmpe.f64	d4, d7
    426a:	vmrs	APSR_nzcv, fpscr
    426e:	mov	r6, r7
    4270:	str	r7, [sp, #20]
    4272:	blt.w	4440 <_dtoa_r+0x910>
    4276:	mvn.w	r3, r8
    427a:	ldr.w	fp, [sp, #32]
    427e:	str	r3, [sp, #8]
    4280:	ldr	r1, [sp, #20]
    4282:	mov	r0, r4
    4284:	bl	336c <_Bfree>
    4288:	cmp	r6, #0
    428a:	beq.w	3dfc <_dtoa_r+0x2cc>
    428e:	b.n	407c <_dtoa_r+0x54c>
    4290:	ldr	r2, [sp, #40]	; 0x28
    4292:	cmp	r2, #0
    4294:	beq.w	469c <_dtoa_r+0xb6c>
    4298:	ldr	r2, [sp, #20]
    429a:	str	r2, [sp, #56]	; 0x38
    429c:	ldr	r2, [sp, #24]
    429e:	str	r2, [sp, #40]	; 0x28
    42a0:	addw	r3, r3, #1075	; 0x433
    42a4:	b.n	3e4e <_dtoa_r+0x31e>
    42a6:	movs	r0, #28
    42a8:	b.n	3f94 <_dtoa_r+0x464>
    42aa:	ldr	r3, [sp, #4]
    42ac:	cmp	r3, #1
    42ae:	ble.w	4732 <_dtoa_r+0xc02>
    42b2:	ldr	r3, [sp, #44]	; 0x2c
    42b4:	str	r3, [sp, #28]
    42b6:	movs	r0, #1
    42b8:	b.n	3f7c <_dtoa_r+0x44c>
    42ba:	mov	r1, r6
    42bc:	movs	r3, #0
    42be:	movs	r2, #10
    42c0:	mov	r0, r4
    42c2:	bl	3380 <__multadd>
    42c6:	ldr	r3, [sp, #52]	; 0x34
    42c8:	cmp	r3, #0
    42ca:	mov	r6, r0
    42cc:	ble.w	476a <_dtoa_r+0xc3a>
    42d0:	mov	r7, r3
    42d2:	ldr	r3, [sp, #40]	; 0x28
    42d4:	cmp	r3, #0
    42d6:	ble.n	42e4 <_dtoa_r+0x7b4>
    42d8:	mov	r1, r6
    42da:	mov	r2, r3
    42dc:	mov	r0, r4
    42de:	bl	3680 <__lshift>
    42e2:	mov	r6, r0
    42e4:	ldr	r3, [sp, #28]
    42e6:	cmp	r3, #0
    42e8:	bne.w	45c8 <_dtoa_r+0xa98>
    42ec:	mov	r8, r6
    42ee:	ldr	r3, [sp, #32]
    42f0:	subs	r7, #1
    42f2:	adds	r2, r3, r7
    42f4:	str	r2, [sp, #36]	; 0x24
    42f6:	and.w	r2, sl, #1
    42fa:	str	r2, [sp, #40]	; 0x28
    42fc:	mov	r7, r3
    42fe:	ldr.w	fp, [sp, #20]
    4302:	mov	r0, r5
    4304:	mov	r1, fp
    4306:	bl	3a04 <quorem>
    430a:	mov	r1, r6
    430c:	mov	sl, r0
    430e:	mov	r0, r5
    4310:	bl	3730 <__mcmp>
    4314:	mov	r2, r8
    4316:	mov	r1, fp
    4318:	mov	r9, r0
    431a:	mov	r0, r4
    431c:	bl	3774 <__mdiff>
    4320:	ldr	r3, [r0, #12]
    4322:	mov	fp, r0
    4324:	add.w	r2, sl, #48	; 0x30
    4328:	cmp	r3, #0
    432a:	bne.n	43c0 <_dtoa_r+0x890>
    432c:	mov	r1, r0
    432e:	mov	r0, r5
    4330:	str	r2, [sp, #28]
    4332:	bl	3730 <__mcmp>
    4336:	mov	r1, fp
    4338:	str	r0, [sp, #24]
    433a:	mov	r0, r4
    433c:	bl	336c <_Bfree>
    4340:	ldr	r3, [sp, #24]
    4342:	ldr	r2, [sp, #28]
    4344:	cbnz	r3, 4352 <_dtoa_r+0x822>
    4346:	ldr	r1, [sp, #4]
    4348:	cbnz	r1, 4352 <_dtoa_r+0x822>
    434a:	ldr	r1, [sp, #40]	; 0x28
    434c:	cmp	r1, #0
    434e:	beq.w	473c <_dtoa_r+0xc0c>
    4352:	cmp.w	r9, #0
    4356:	blt.w	4518 <_dtoa_r+0x9e8>
    435a:	bne.n	4368 <_dtoa_r+0x838>
    435c:	ldr	r1, [sp, #4]
    435e:	cbnz	r1, 4368 <_dtoa_r+0x838>
    4360:	ldr	r1, [sp, #40]	; 0x28
    4362:	cmp	r1, #0
    4364:	beq.w	4518 <_dtoa_r+0x9e8>
    4368:	cmp	r3, #0
    436a:	bgt.w	45f0 <_dtoa_r+0xac0>
    436e:	ldr	r3, [sp, #36]	; 0x24
    4370:	strb	r2, [r7, #0]
    4372:	add.w	r9, r7, #1
    4376:	cmp	r7, r3
    4378:	mov	fp, r9
    437a:	beq.w	460a <_dtoa_r+0xada>
    437e:	mov	r1, r5
    4380:	movs	r3, #0
    4382:	movs	r2, #10
    4384:	mov	r0, r4
    4386:	bl	3380 <__multadd>
    438a:	cmp	r6, r8
    438c:	mov	r5, r0
    438e:	mov	r1, r6
    4390:	mov.w	r3, #0
    4394:	mov.w	r2, #10
    4398:	mov	r0, r4
    439a:	beq.n	43b4 <_dtoa_r+0x884>
    439c:	bl	3380 <__multadd>
    43a0:	mov	r1, r8
    43a2:	mov	r6, r0
    43a4:	movs	r3, #0
    43a6:	movs	r2, #10
    43a8:	mov	r0, r4
    43aa:	bl	3380 <__multadd>
    43ae:	mov	r7, r9
    43b0:	mov	r8, r0
    43b2:	b.n	42fe <_dtoa_r+0x7ce>
    43b4:	bl	3380 <__multadd>
    43b8:	mov	r7, r9
    43ba:	mov	r6, r0
    43bc:	mov	r8, r0
    43be:	b.n	42fe <_dtoa_r+0x7ce>
    43c0:	mov	r1, r0
    43c2:	mov	r0, r4
    43c4:	str	r2, [sp, #24]
    43c6:	bl	336c <_Bfree>
    43ca:	movs	r3, #1
    43cc:	ldr	r2, [sp, #24]
    43ce:	b.n	4352 <_dtoa_r+0x822>
    43d0:	ldr	r1, [sp, #20]
    43d2:	mov	r0, r5
    43d4:	bl	3730 <__mcmp>
    43d8:	cmp	r0, #0
    43da:	bge.w	3fce <_dtoa_r+0x49e>
    43de:	mov	r1, r5
    43e0:	ldr	r5, [sp, #8]
    43e2:	movs	r3, #0
    43e4:	subs	r5, #1
    43e6:	movs	r2, #10
    43e8:	mov	r0, r4
    43ea:	str	r5, [sp, #8]
    43ec:	bl	3380 <__multadd>
    43f0:	ldr	r3, [sp, #36]	; 0x24
    43f2:	mov	r5, r0
    43f4:	cmp	r3, #0
    43f6:	bne.w	42ba <_dtoa_r+0x78a>
    43fa:	ldr	r3, [sp, #52]	; 0x34
    43fc:	cmp	r3, #0
    43fe:	ble.w	475c <_dtoa_r+0xc2c>
    4402:	mov	r7, r3
    4404:	b.n	3fdc <_dtoa_r+0x4ac>
    4406:	ldr	r5, [sp, #28]
    4408:	b.n	3f40 <_dtoa_r+0x410>
    440a:	nop
    440c:	.word	0x20000478
    4410:	.word	0x20000540
    4414:	ldr	r3, [sp, #4]
    4416:	cmp	r3, #2
    4418:	ble.w	3fd4 <_dtoa_r+0x4a4>
    441c:	cmp	r7, #0
    441e:	bne.w	46f4 <_dtoa_r+0xbc4>
    4422:	mov	r3, r7
    4424:	ldr	r1, [sp, #20]
    4426:	movs	r2, #5
    4428:	mov	r0, r4
    442a:	bl	3380 <__multadd>
    442e:	mov	r1, r0
    4430:	str	r0, [sp, #20]
    4432:	mov	r0, r5
    4434:	bl	3730 <__mcmp>
    4438:	cmp	r0, #0
    443a:	str	r5, [sp, #28]
    443c:	ble.w	4276 <_dtoa_r+0x746>
    4440:	ldr	r2, [sp, #8]
    4442:	ldr	r1, [sp, #32]
    4444:	movs	r3, #49	; 0x31
    4446:	adds	r2, #1
    4448:	str	r2, [sp, #8]
    444a:	strb	r3, [r1, #0]
    444c:	add.w	fp, r1, #1
    4450:	b.n	4280 <_dtoa_r+0x750>
    4452:	ldr	r2, [sp, #8]
    4454:	adds	r2, #1
    4456:	str	r2, [sp, #8]
    4458:	ldr	r2, [sp, #32]
    445a:	movs	r3, #49	; 0x31
    445c:	strb	r3, [r2, #0]
    445e:	b.n	405c <_dtoa_r+0x52c>
    4460:	movs	r3, #1
    4462:	str	r3, [sp, #36]	; 0x24
    4464:	b.n	409e <_dtoa_r+0x56e>
    4466:	cmp.w	sl, #0
    446a:	bne.w	3f66 <_dtoa_r+0x436>
    446e:	ubfx	r3, fp, #0, #20
    4472:	cmp	r3, #0
    4474:	bne.w	46ae <_dtoa_r+0xb7e>
    4478:	bic.w	r3, fp, #2147483648	; 0x80000000
    447c:	lsrs	r3, r3, #20
    447e:	lsls	r3, r3, #20
    4480:	cmp	r3, #0
    4482:	beq.w	472e <_dtoa_r+0xbfe>
    4486:	ldr	r3, [sp, #24]
    4488:	adds	r3, #1
    448a:	str	r3, [sp, #24]
    448c:	movs	r3, #1
    448e:	add.w	r9, r9, #1
    4492:	str	r3, [sp, #28]
    4494:	ldr	r3, [sp, #44]	; 0x2c
    4496:	movs	r0, #1
    4498:	cmp	r3, #0
    449a:	beq.w	3f7c <_dtoa_r+0x44c>
    449e:	b.n	3f6a <_dtoa_r+0x43a>
    44a0:	vmov	s15, r1
    44a4:	vcvt.f64.s32	d6, s15
    44a8:	vmov.f64	d7, #28	; 0x40e00000  7.0
    44ac:	vfma.f64	d7, d4, d6
    44b0:	vmov	r2, r3, d7
    44b4:	sub.w	r3, r3, #54525952	; 0x3400000
    44b8:	vmov	d6, r2, r3
    44bc:	vmov.f64	d7, #20	; 0x40a00000  5.0
    44c0:	vsub.f64	d7, d4, d7
    44c4:	vcmpe.f64	d7, d6
    44c8:	vmrs	APSR_nzcv, fpscr
    44cc:	bgt.w	468a <_dtoa_r+0xb5a>
    44d0:	vneg.f64	d6, d6
    44d4:	vcmpe.f64	d7, d6
    44d8:	vmrs	APSR_nzcv, fpscr
    44dc:	bpl.n	456c <_dtoa_r+0xa3c>
    44de:	movs	r3, #0
    44e0:	str	r3, [sp, #20]
    44e2:	mov	r6, r3
    44e4:	b.n	4276 <_dtoa_r+0x746>
    44e6:	ldr	r0, [sp, #32]
    44e8:	b.w	3b9e <_dtoa_r+0x6e>
    44ec:	ldr	r3, [sp, #20]
    44ee:	ldr	r1, [sp, #44]	; 0x2c
    44f0:	str	r2, [sp, #20]
    44f2:	subs	r3, r2, r3
    44f4:	add	r1, r3
    44f6:	movs	r3, #0
    44f8:	str	r1, [sp, #44]	; 0x2c
    44fa:	str	r3, [sp, #56]	; 0x38
    44fc:	b.n	3e42 <_dtoa_r+0x312>
    44fe:	vldr	d5, [sp, #56]	; 0x38
    4502:	movs	r1, #2
    4504:	b.n	411c <_dtoa_r+0x5ec>
    4506:	mov	r5, r7
    4508:	movs	r1, #0
    450a:	str	r1, [r4, #68]	; 0x44
    450c:	b.n	40ce <_dtoa_r+0x59e>
    450e:	movs	r5, #1
    4510:	str	r5, [sp, #52]	; 0x34
    4512:	mov	r7, r5
    4514:	mov	r8, r5
    4516:	b.n	4508 <_dtoa_r+0x9d8>
    4518:	cmp	r3, #0
    451a:	mov	r9, r2
    451c:	ble.n	4542 <_dtoa_r+0xa12>
    451e:	mov	r1, r5
    4520:	movs	r2, #1
    4522:	mov	r0, r4
    4524:	bl	3680 <__lshift>
    4528:	ldr	r1, [sp, #20]
    452a:	mov	r5, r0
    452c:	bl	3730 <__mcmp>
    4530:	cmp	r0, #0
    4532:	ble.w	474e <_dtoa_r+0xc1e>
    4536:	cmp.w	r9, #57	; 0x39
    453a:	beq.w	46f8 <_dtoa_r+0xbc8>
    453e:	add.w	r9, sl, #49	; 0x31
    4542:	mov	sl, r6
    4544:	strb.w	r9, [r7]
    4548:	add.w	fp, r7, #1
    454c:	mov	r6, r8
    454e:	str	r5, [sp, #28]
    4550:	b.n	405c <_dtoa_r+0x52c>
    4552:	bne.n	455e <_dtoa_r+0xa2e>
    4554:	tst.w	r9, #1
    4558:	beq.n	455e <_dtoa_r+0xa2e>
    455a:	b.n	403a <_dtoa_r+0x50a>
    455c:	mov	fp, r2
    455e:	ldrb.w	r3, [fp, #-1]
    4562:	cmp	r3, #48	; 0x30
    4564:	add.w	r2, fp, #4294967295
    4568:	beq.n	455c <_dtoa_r+0xa2c>
    456a:	b.n	405c <_dtoa_r+0x52c>
    456c:	ldrd	sl, fp, [sp, #56]	; 0x38
    4570:	b.w	3d2a <_dtoa_r+0x1fa>
    4574:	ldr	r3, [sp, #8]
    4576:	negs	r3, r3
    4578:	cmp	r3, #0
    457a:	beq.w	46b4 <_dtoa_r+0xb84>
    457e:	ldr	r2, [pc, #556]	; (47ac <_dtoa_r+0xc7c>)
    4580:	and.w	r1, r3, #15
    4584:	add.w	r2, r2, r1, lsl #3
    4588:	vldr	d7, [r2]
    458c:	vldr	d6, [sp, #56]	; 0x38
    4590:	asrs	r3, r3, #4
    4592:	vmul.f64	d4, d6, d7
    4596:	beq.w	4766 <_dtoa_r+0xc36>
    459a:	ldr	r2, [pc, #532]	; (47b0 <_dtoa_r+0xc80>)
    459c:	movs	r1, #2
    459e:	lsls	r0, r3, #31
    45a0:	bpl.n	45ac <_dtoa_r+0xa7c>
    45a2:	vldr	d7, [r2]
    45a6:	adds	r1, #1
    45a8:	vmul.f64	d4, d4, d7
    45ac:	asrs	r3, r3, #1
    45ae:	add.w	r2, r2, #8
    45b2:	bne.n	459e <_dtoa_r+0xa6e>
    45b4:	b.n	413a <_dtoa_r+0x60a>
    45b6:	ldr	r1, [sp, #32]
    45b8:	movs	r2, #48	; 0x30
    45ba:	strb	r2, [r1, #0]
    45bc:	ldr	r2, [sp, #8]
    45be:	ldrb.w	r0, [fp, #-1]
    45c2:	adds	r2, #1
    45c4:	str	r2, [sp, #8]
    45c6:	b.n	3df8 <_dtoa_r+0x2c8>
    45c8:	ldr	r1, [r6, #4]
    45ca:	mov	r0, r4
    45cc:	bl	3320 <_Balloc>
    45d0:	ldr	r3, [r6, #16]
    45d2:	adds	r2, r3, #2
    45d4:	mov	r8, r0
    45d6:	lsls	r2, r2, #2
    45d8:	add.w	r1, r6, #12
    45dc:	adds	r0, #12
    45de:	bl	2080 <memcpy>
    45e2:	mov	r1, r8
    45e4:	movs	r2, #1
    45e6:	mov	r0, r4
    45e8:	bl	3680 <__lshift>
    45ec:	mov	r8, r0
    45ee:	b.n	42ee <_dtoa_r+0x7be>
    45f0:	cmp	r2, #57	; 0x39
    45f2:	beq.w	46f8 <_dtoa_r+0xbc8>
    45f6:	add.w	r9, r2, #1
    45fa:	mov	sl, r6
    45fc:	strb.w	r9, [r7]
    4600:	add.w	fp, r7, #1
    4604:	mov	r6, r8
    4606:	str	r5, [sp, #28]
    4608:	b.n	405c <_dtoa_r+0x52c>
    460a:	mov	sl, r6
    460c:	mov	r9, r2
    460e:	mov	r6, r8
    4610:	b.n	4022 <_dtoa_r+0x4f2>
    4612:	ldr	r0, [pc, #408]	; (47ac <_dtoa_r+0xc7c>)
    4614:	vcvt.s32.f64	s12, d4
    4618:	subs	r5, r1, #1
    461a:	add.w	r0, r0, r5, lsl #3
    461e:	vmov	d7, r2, r3
    4622:	vldr	d3, [r0]
    4626:	vmov	r3, s12
    462a:	vmul.f64	d3, d3, d7
    462e:	ldr	r0, [sp, #32]
    4630:	adds	r3, #48	; 0x30
    4632:	cmp	r1, #1
    4634:	vcvt.f64.s32	d6, s12
    4638:	strb	r3, [r0, #0]
    463a:	add.w	fp, r0, #1
    463e:	vsub.f64	d7, d4, d6
    4642:	beq.n	466e <_dtoa_r+0xb3e>
    4644:	vmov.f64	d5, #36	; 0x41200000  10.0
    4648:	ldr	r3, [sp, #32]
    464a:	add	r1, r3
    464c:	mov	r3, fp
    464e:	vmul.f64	d7, d7, d5
    4652:	vcvt.s32.f64	s12, d7
    4656:	vmov	r2, s12
    465a:	adds	r2, #48	; 0x30
    465c:	strb.w	r2, [r3], #1
    4660:	cmp	r1, r3
    4662:	vcvt.f64.s32	d6, s12
    4666:	vsub.f64	d7, d7, d6
    466a:	bne.n	464e <_dtoa_r+0xb1e>
    466c:	add	fp, r5
    466e:	vmov.f64	d6, #96	; 0x3f000000  0.5
    4672:	vadd.f64	d5, d3, d6
    4676:	vcmpe.f64	d5, d7
    467a:	vmrs	APSR_nzcv, fpscr
    467e:	bpl.n	4708 <_dtoa_r+0xbd8>
    4680:	str	r6, [sp, #8]
    4682:	ldrb.w	r0, [fp, #-1]
    4686:	b.w	3dde <_dtoa_r+0x2ae>
    468a:	movs	r3, #0
    468c:	str	r3, [sp, #20]
    468e:	mov	r6, r3
    4690:	b.n	4440 <_dtoa_r+0x910>
    4692:	subs	r3, r3, r7
    4694:	str	r3, [sp, #40]	; 0x28
    4696:	movs	r3, #0
    4698:	b.w	3e4e <_dtoa_r+0x31e>
    469c:	ldr	r2, [sp, #20]
    469e:	ldr	r3, [sp, #64]	; 0x40
    46a0:	str	r2, [sp, #56]	; 0x38
    46a2:	ldr	r2, [sp, #24]
    46a4:	str	r2, [sp, #40]	; 0x28
    46a6:	rsb	r3, r3, #54	; 0x36
    46aa:	b.w	3e4e <_dtoa_r+0x31e>
    46ae:	movs	r3, #0
    46b0:	str	r3, [sp, #28]
    46b2:	b.n	4494 <_dtoa_r+0x964>
    46b4:	vldr	d4, [sp, #56]	; 0x38
    46b8:	movs	r1, #2
    46ba:	b.n	413a <_dtoa_r+0x60a>
    46bc:	cmp	r7, #0
    46be:	beq.w	44a0 <_dtoa_r+0x970>
    46c2:	ldr	r0, [sp, #52]	; 0x34
    46c4:	cmp	r0, #0
    46c6:	ble.w	456c <_dtoa_r+0xa3c>
    46ca:	vmov.f64	d5, #36	; 0x41200000  10.0
    46ce:	vmov.f64	d7, #28	; 0x40e00000  7.0
    46d2:	adds	r1, #1
    46d4:	vmov	s13, r1
    46d8:	vmul.f64	d4, d4, d5
    46dc:	ldr	r3, [sp, #8]
    46de:	vcvt.f64.s32	d6, s13
    46e2:	subs	r6, r3, #1
    46e4:	vfma.f64	d7, d4, d6
    46e8:	vmov	r2, r3, d7
    46ec:	mov	r1, r0
    46ee:	sub.w	r3, r3, #54525952	; 0x3400000
    46f2:	b.n	4170 <_dtoa_r+0x640>
    46f4:	str	r5, [sp, #28]
    46f6:	b.n	4276 <_dtoa_r+0x746>
    46f8:	movs	r2, #57	; 0x39
    46fa:	mov	sl, r6
    46fc:	str	r5, [sp, #28]
    46fe:	mov	r6, r8
    4700:	strb	r2, [r7, #0]
    4702:	add.w	fp, r7, #1
    4706:	b.n	403e <_dtoa_r+0x50e>
    4708:	vsub.f64	d6, d6, d3
    470c:	vcmpe.f64	d6, d7
    4710:	vmrs	APSR_nzcv, fpscr
    4714:	bgt.n	471a <_dtoa_r+0xbea>
    4716:	b.n	456c <_dtoa_r+0xa3c>
    4718:	mov	fp, r2
    471a:	ldrb.w	r3, [fp, #-1]
    471e:	cmp	r3, #48	; 0x30
    4720:	add.w	r2, fp, #4294967295
    4724:	beq.n	4718 <_dtoa_r+0xbe8>
    4726:	b.n	421e <_dtoa_r+0x6ee>
    4728:	str	r6, [sp, #8]
    472a:	b.w	3dde <_dtoa_r+0x2ae>
    472e:	str	r3, [sp, #28]
    4730:	b.n	4494 <_dtoa_r+0x964>
    4732:	cmp.w	sl, #0
    4736:	bne.w	42b2 <_dtoa_r+0x782>
    473a:	b.n	446e <_dtoa_r+0x93e>
    473c:	cmp	r2, #57	; 0x39
    473e:	mov	fp, r9
    4740:	mov	r9, r2
    4742:	beq.n	46f8 <_dtoa_r+0xbc8>
    4744:	cmp.w	fp, #0
    4748:	bgt.w	453e <_dtoa_r+0xa0e>
    474c:	b.n	4542 <_dtoa_r+0xa12>
    474e:	bne.w	4542 <_dtoa_r+0xa12>
    4752:	tst.w	r9, #1
    4756:	beq.w	4542 <_dtoa_r+0xa12>
    475a:	b.n	4536 <_dtoa_r+0xa06>
    475c:	ldr	r3, [sp, #4]
    475e:	cmp	r3, #2
    4760:	bgt.n	4774 <_dtoa_r+0xc44>
    4762:	ldr	r7, [sp, #52]	; 0x34
    4764:	b.n	3fdc <_dtoa_r+0x4ac>
    4766:	movs	r1, #2
    4768:	b.n	413a <_dtoa_r+0x60a>
    476a:	ldr	r3, [sp, #4]
    476c:	cmp	r3, #2
    476e:	bgt.n	4774 <_dtoa_r+0xc44>
    4770:	ldr	r7, [sp, #52]	; 0x34
    4772:	b.n	42d2 <_dtoa_r+0x7a2>
    4774:	ldr	r7, [sp, #52]	; 0x34
    4776:	b.n	441c <_dtoa_r+0x8ec>
    4778:	movs	r3, #1
    477a:	str	r3, [sp, #56]	; 0x38
    477c:	b.w	3cc2 <_dtoa_r+0x192>
    4780:	beq.w	3fa2 <_dtoa_r+0x472>
    4784:	rsb	r0, r0, #60	; 0x3c
    4788:	b.n	3f94 <_dtoa_r+0x464>
    478a:	movs	r5, #0
    478c:	str	r5, [r4, #68]	; 0x44
    478e:	mov	r1, r5
    4790:	mov	r0, r4
    4792:	bl	3320 <_Balloc>
    4796:	mov.w	r7, #4294967295
    479a:	movs	r3, #1
    479c:	str	r0, [sp, #32]
    479e:	mov	r8, r5
    47a0:	str	r0, [r4, #64]	; 0x40
    47a2:	str	r7, [sp, #52]	; 0x34
    47a4:	str	r3, [sp, #36]	; 0x24
    47a6:	b.w	3d2a <_dtoa_r+0x1fa>
    47aa:	nop
    47ac:	.word	0x20000478
    47b0:	.word	0x20000540
    47b4:	.word	0x00000000

000047b8 <_svfprintf_r>:
    47b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47bc:	vpush	{d8-d10}
    47c0:	sub	sp, #228	; 0xe4
    47c2:	mov	r4, r1
    47c4:	str	r1, [sp, #12]
    47c6:	mov	sl, r2
    47c8:	str	r3, [sp, #36]	; 0x24
    47ca:	str	r0, [sp, #20]
    47cc:	bl	3258 <_localeconv_r>
    47d0:	ldr	r3, [r0, #0]
    47d2:	str	r3, [sp, #64]	; 0x40
    47d4:	mov	r0, r3
    47d6:	bl	2dc0 <strlen>
    47da:	ldrh	r3, [r4, #12]
    47dc:	str	r0, [sp, #60]	; 0x3c
    47de:	lsls	r1, r3, #24
    47e0:	bpl.n	47ea <_svfprintf_r+0x32>
    47e2:	ldr	r3, [r4, #16]
    47e4:	cmp	r3, #0
    47e6:	beq.w	58e4 <_svfprintf_r+0x112c>
    47ea:	movs	r3, #0
    47ec:	vldr	d8, [pc, #656]	; 4a80 <_svfprintf_r+0x2c8>
    47f0:	vldr	d9, [pc, #660]	; 4a88 <_svfprintf_r+0x2d0>
    47f4:	str	r3, [sp, #52]	; 0x34
    47f6:	str	r3, [sp, #116]	; 0x74
    47f8:	str	r3, [sp, #112]	; 0x70
    47fa:	str	r3, [sp, #68]	; 0x44
    47fc:	str	r3, [sp, #24]
    47fe:	add	r3, sp, #160	; 0xa0
    4800:	str	r3, [sp, #108]	; 0x6c
    4802:	mov	r9, r3
    4804:	ldrb.w	r3, [sl]
    4808:	mov	r4, sl
    480a:	cbz	r3, 4848 <_svfprintf_r+0x90>
    480c:	cmp	r3, #37	; 0x25
    480e:	bne.n	4816 <_svfprintf_r+0x5e>
    4810:	b.n	4848 <_svfprintf_r+0x90>
    4812:	cmp	r3, #37	; 0x25
    4814:	beq.n	481e <_svfprintf_r+0x66>
    4816:	ldrb.w	r3, [r4, #1]!
    481a:	cmp	r3, #0
    481c:	bne.n	4812 <_svfprintf_r+0x5a>
    481e:	rsb	r5, sl, r4
    4822:	cbz	r5, 4848 <_svfprintf_r+0x90>
    4824:	ldr	r3, [sp, #112]	; 0x70
    4826:	ldr	r2, [sp, #116]	; 0x74
    4828:	str.w	sl, [r9]
    482c:	adds	r3, #1
    482e:	add	r2, r5
    4830:	cmp	r3, #7
    4832:	str.w	r5, [r9, #4]
    4836:	str	r2, [sp, #116]	; 0x74
    4838:	str	r3, [sp, #112]	; 0x70
    483a:	bgt.w	4984 <_svfprintf_r+0x1cc>
    483e:	add.w	r9, r9, #8
    4842:	ldr	r3, [sp, #24]
    4844:	add	r3, r5
    4846:	str	r3, [sp, #24]
    4848:	ldrb	r3, [r4, #0]
    484a:	cmp	r3, #0
    484c:	beq.w	4996 <_svfprintf_r+0x1de>
    4850:	movs	r3, #0
    4852:	mov	r2, r3
    4854:	strb.w	r3, [sp, #79]	; 0x4f
    4858:	mov	r1, r3
    485a:	str	r3, [sp, #28]
    485c:	mov	fp, r3
    485e:	mov.w	r8, #4294967295
    4862:	ldrb	r3, [r4, #1]
    4864:	add.w	sl, r4, #1
    4868:	mov	r5, r8
    486a:	add.w	sl, sl, #1
    486e:	sub.w	r0, r3, #32
    4872:	cmp	r0, #88	; 0x58
    4874:	bhi.w	5068 <_svfprintf_r+0x8b0>
    4878:	tbh	[pc, r0, lsl #1]
    487c:	.word	0x03f60363
    4880:	.word	0x036b03f6
    4884:	.word	0x03f603f6
    4888:	.word	0x03f603f6
    488c:	.word	0x03f603f6
    4890:	.word	0x037e0370
    4894:	.word	0x005d03f6
    4898:	.word	0x03f600df
    489c:	.word	0x010c00fb
    48a0:	.word	0x010c010c
    48a4:	.word	0x010c010c
    48a8:	.word	0x010c010c
    48ac:	.word	0x010c010c
    48b0:	.word	0x03f603f6
    48b4:	.word	0x03f603f6
    48b8:	.word	0x03f603f6
    48bc:	.word	0x03f603f6
    48c0:	.word	0x03f603f6
    48c4:	.word	0x015e011c
    48c8:	.word	0x015e03f6
    48cc:	.word	0x03f603f6
    48d0:	.word	0x03f603f6
    48d4:	.word	0x03f602a1
    48d8:	.word	0x02a603f6
    48dc:	.word	0x03f603f6
    48e0:	.word	0x03f603f6
    48e4:	.word	0x02d803f6
    48e8:	.word	0x03f603f6
    48ec:	.word	0x03f60305
    48f0:	.word	0x03f603f6
    48f4:	.word	0x03f603f6
    48f8:	.word	0x03f603f6
    48fc:	.word	0x03f603f6
    4900:	.word	0x034303f6
    4904:	.word	0x015e0356
    4908:	.word	0x015e015e
    490c:	.word	0x0356035e
    4910:	.word	0x03f603f6
    4914:	.word	0x03f603a4
    4918:	.word	0x00a203b1
    491c:	.word	0x03c30062
    4920:	.word	0x03c803f6
    4924:	.word	0x038303f6
    4928:	.word	0x03f603f6
    492c:	.short	0x038b
    492e:	ldr	r0, [sp, #28]
    4930:	str	r3, [sp, #36]	; 0x24
    4932:	negs	r0, r0
    4934:	str	r0, [sp, #28]
    4936:	orr.w	fp, fp, #4
    493a:	ldrb.w	r3, [sl]
    493e:	b.n	486a <_svfprintf_r+0xb2>
    4940:	mov	r8, r5
    4942:	ldr	r0, [sp, #36]	; 0x24
    4944:	movs	r1, #0
    4946:	movs	r3, #48	; 0x30
    4948:	movs	r2, #120	; 0x78
    494a:	cmp	r8, r1
    494c:	strb.w	r3, [sp, #80]	; 0x50
    4950:	ldr	r4, [r0, #0]
    4952:	strb.w	r2, [sp, #81]	; 0x51
    4956:	add.w	r7, r0, #4
    495a:	mov.w	r5, #0
    495e:	strb.w	r1, [sp, #79]	; 0x4f
    4962:	orr.w	r3, fp, #2
    4966:	blt.w	50a2 <_svfprintf_r+0x8ea>
    496a:	bic.w	r3, fp, #128	; 0x80
    496e:	orr.w	fp, r3, #2
    4972:	orrs.w	r3, r4, r5
    4976:	str	r7, [sp, #36]	; 0x24
    4978:	beq.w	504e <_svfprintf_r+0x896>
    497c:	mov	r7, r1
    497e:	str	r2, [sp, #48]	; 0x30
    4980:	ldr	r0, [pc, #268]	; (4a90 <_svfprintf_r+0x2d8>)
    4982:	b.n	4ee2 <_svfprintf_r+0x72a>
    4984:	add	r2, sp, #108	; 0x6c
    4986:	ldr	r1, [sp, #12]
    4988:	ldr	r0, [sp, #20]
    498a:	bl	5d28 <__ssprint_r>
    498e:	cbnz	r0, 49a4 <_svfprintf_r+0x1ec>
    4990:	add.w	r9, sp, #160	; 0xa0
    4994:	b.n	4842 <_svfprintf_r+0x8a>
    4996:	ldr	r3, [sp, #116]	; 0x74
    4998:	cbz	r3, 49a4 <_svfprintf_r+0x1ec>
    499a:	ldr	r0, [sp, #20]
    499c:	ldr	r1, [sp, #12]
    499e:	add	r2, sp, #108	; 0x6c
    49a0:	bl	5d28 <__ssprint_r>
    49a4:	ldr	r3, [sp, #12]
    49a6:	ldrh	r3, [r3, #12]
    49a8:	tst.w	r3, #64	; 0x40
    49ac:	ldr	r3, [sp, #24]
    49ae:	it	ne
    49b0:	movne.w	r3, #4294967295
    49b4:	mov	r0, r3
    49b6:	add	sp, #228	; 0xe4
    49b8:	vpop	{d8-d10}
    49bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49c0:	str	r3, [sp, #48]	; 0x30
    49c2:	mov	r8, r5
    49c4:	cmp	r2, #0
    49c6:	bne.w	5cfe <_svfprintf_r+0x1546>
    49ca:	ands.w	r3, fp, #32
    49ce:	beq.w	4dde <_svfprintf_r+0x626>
    49d2:	ldr	r7, [sp, #36]	; 0x24
    49d4:	adds	r7, #7
    49d6:	bic.w	r3, r7, #7
    49da:	movs	r7, #0
    49dc:	add.w	r2, r3, #8
    49e0:	cmp	r8, r7
    49e2:	str	r2, [sp, #36]	; 0x24
    49e4:	ldrd	r4, r5, [r3]
    49e8:	strb.w	r7, [sp, #79]	; 0x4f
    49ec:	blt.w	56ac <_svfprintf_r+0xef4>
    49f0:	orrs.w	r3, r4, r5
    49f4:	bic.w	fp, fp, #128	; 0x80
    49f8:	beq.w	5092 <_svfprintf_r+0x8da>
    49fc:	add	r6, sp, #160	; 0xa0
    49fe:	lsrs	r2, r4, #3
    4a00:	orr.w	r2, r2, r5, lsl #29
    4a04:	lsrs	r1, r5, #3
    4a06:	and.w	r3, r4, #7
    4a0a:	mov	r5, r1
    4a0c:	mov	r4, r2
    4a0e:	adds	r3, #48	; 0x30
    4a10:	orrs.w	r2, r4, r5
    4a14:	strb.w	r3, [r6, #-1]!
    4a18:	bne.n	49fe <_svfprintf_r+0x246>
    4a1a:	tst.w	fp, #1
    4a1e:	beq.w	4e70 <_svfprintf_r+0x6b8>
    4a22:	cmp	r3, #48	; 0x30
    4a24:	beq.w	4e70 <_svfprintf_r+0x6b8>
    4a28:	movs	r2, #48	; 0x30
    4a2a:	subs	r3, r6, #1
    4a2c:	strb.w	r2, [r6, #-1]
    4a30:	add	r2, sp, #160	; 0xa0
    4a32:	subs	r2, r2, r3
    4a34:	str	r2, [sp, #32]
    4a36:	mov	r6, r3
    4a38:	b.n	4e76 <_svfprintf_r+0x6be>
    4a3a:	ldrb.w	r3, [sl]
    4a3e:	cmp	r3, #42	; 0x2a
    4a40:	add.w	r4, sl, #1
    4a44:	beq.w	5ca6 <_svfprintf_r+0x14ee>
    4a48:	sub.w	r0, r3, #48	; 0x30
    4a4c:	cmp	r0, #9
    4a4e:	it	ls
    4a50:	movls	r5, #0
    4a52:	bhi.w	5c00 <_svfprintf_r+0x1448>
    4a56:	ldrb.w	r3, [r4], #1
    4a5a:	add.w	r5, r5, r5, lsl #2
    4a5e:	add.w	r5, r0, r5, lsl #1
    4a62:	sub.w	r0, r3, #48	; 0x30
    4a66:	cmp	r0, #9
    4a68:	bls.n	4a56 <_svfprintf_r+0x29e>
    4a6a:	orr.w	r5, r5, r5, asr #31
    4a6e:	mov	sl, r4
    4a70:	b.n	486e <_svfprintf_r+0xb6>
    4a72:	orr.w	fp, fp, #128	; 0x80
    4a76:	ldrb.w	r3, [sl]
    4a7a:	b.n	486a <_svfprintf_r+0xb2>
    4a7c:	nop.w
	...
    4a88:	.word	0xffffffff
    4a8c:	.word	0x7fefffff
    4a90:	.word	0x200005bc
    4a94:	sub.w	r0, r3, #48	; 0x30
    4a98:	movs	r3, #0
    4a9a:	mov	r4, r3
    4a9c:	ldrb.w	r3, [sl], #1
    4aa0:	add.w	r4, r4, r4, lsl #2
    4aa4:	add.w	r4, r0, r4, lsl #1
    4aa8:	sub.w	r0, r3, #48	; 0x30
    4aac:	cmp	r0, #9
    4aae:	bls.n	4a9c <_svfprintf_r+0x2e4>
    4ab0:	str	r4, [sp, #28]
    4ab2:	b.n	486e <_svfprintf_r+0xb6>
    4ab4:	str	r3, [sp, #48]	; 0x30
    4ab6:	mov	r8, r5
    4ab8:	cmp	r2, #0
    4aba:	bne.w	5d16 <_svfprintf_r+0x155e>
    4abe:	orr.w	fp, fp, #16
    4ac2:	tst.w	fp, #32
    4ac6:	beq.w	54d0 <_svfprintf_r+0xd18>
    4aca:	ldr	r7, [sp, #36]	; 0x24
    4acc:	adds	r7, #7
    4ace:	bic.w	r7, r7, #7
    4ad2:	ldrd	r2, r3, [r7]
    4ad6:	add.w	r1, r7, #8
    4ada:	str	r1, [sp, #36]	; 0x24
    4adc:	mov	r4, r2
    4ade:	mov	r5, r3
    4ae0:	cmp	r2, #0
    4ae2:	sbcs.w	r3, r3, #0
    4ae6:	blt.w	5558 <_svfprintf_r+0xda0>
    4aea:	cmp.w	r8, #0
    4aee:	ldrb.w	r7, [sp, #79]	; 0x4f
    4af2:	blt.w	4e60 <_svfprintf_r+0x6a8>
    4af6:	orrs.w	r3, r4, r5
    4afa:	bic.w	fp, fp, #128	; 0x80
    4afe:	beq.w	52ee <_svfprintf_r+0xb36>
    4b02:	cmp	r5, #0
    4b04:	it	eq
    4b06:	cmpeq	r4, #10
    4b08:	bcc.w	4e68 <_svfprintf_r+0x6b0>
    4b0c:	add	r6, sp, #160	; 0xa0
    4b0e:	mov	r0, r4
    4b10:	mov	r1, r5
    4b12:	movs	r2, #10
    4b14:	movs	r3, #0
    4b16:	bl	5e28 <__aeabi_uldivmod>
    4b1a:	adds	r2, #48	; 0x30
    4b1c:	strb.w	r2, [r6, #-1]!
    4b20:	mov	r0, r4
    4b22:	mov	r1, r5
    4b24:	movs	r3, #0
    4b26:	movs	r2, #10
    4b28:	bl	5e28 <__aeabi_uldivmod>
    4b2c:	mov	r4, r0
    4b2e:	mov	r5, r1
    4b30:	orrs.w	r3, r4, r5
    4b34:	bne.n	4b0e <_svfprintf_r+0x356>
    4b36:	b.n	4e70 <_svfprintf_r+0x6b8>
    4b38:	str	r3, [sp, #48]	; 0x30
    4b3a:	mov	r8, r5
    4b3c:	cmp	r2, #0
    4b3e:	bne.w	5d0e <_svfprintf_r+0x1556>
    4b42:	ldr	r7, [sp, #36]	; 0x24
    4b44:	tst.w	fp, #8
    4b48:	add.w	r7, r7, #7
    4b4c:	beq.w	57d0 <_svfprintf_r+0x1018>
    4b50:	bic.w	r3, r7, #7
    4b54:	vldr	d8, [r3]
    4b58:	add.w	r2, r3, #8
    4b5c:	str	r2, [sp, #36]	; 0x24
    4b5e:	vabs.f64	d7, d8
    4b62:	vcmp.f64	d7, d9
    4b66:	vmrs	APSR_nzcv, fpscr
    4b6a:	ble.w	56e6 <_svfprintf_r+0xf2e>
    4b6e:	vcmpe.f64	d8, #0.0
    4b72:	vmrs	APSR_nzcv, fpscr
    4b76:	bmi.w	5b0e <_svfprintf_r+0x1356>
    4b7a:	ldrb.w	r7, [sp, #79]	; 0x4f
    4b7e:	ldr	r6, [pc, #668]	; (4e1c <_svfprintf_r+0x664>)
    4b80:	ldr	r3, [pc, #668]	; (4e20 <_svfprintf_r+0x668>)
    4b82:	ldr	r1, [sp, #48]	; 0x30
    4b84:	movs	r2, #3
    4b86:	mov.w	r8, #0
    4b8a:	str	r2, [sp, #16]
    4b8c:	bic.w	fp, fp, #128	; 0x80
    4b90:	cmp	r1, #71	; 0x47
    4b92:	it	le
    4b94:	movle	r6, r3
    4b96:	str	r2, [sp, #32]
    4b98:	str.w	r8, [sp, #56]	; 0x38
    4b9c:	cbz	r7, 4ba4 <_svfprintf_r+0x3ec>
    4b9e:	ldr	r3, [sp, #16]
    4ba0:	adds	r3, #1
    4ba2:	str	r3, [sp, #16]
    4ba4:	ands.w	r3, fp, #2
    4ba8:	str	r3, [sp, #40]	; 0x28
    4baa:	beq.n	4bb2 <_svfprintf_r+0x3fa>
    4bac:	ldr	r3, [sp, #16]
    4bae:	adds	r3, #2
    4bb0:	str	r3, [sp, #16]
    4bb2:	ands.w	r3, fp, #132	; 0x84
    4bb6:	str	r3, [sp, #44]	; 0x2c
    4bb8:	bne.w	50bc <_svfprintf_r+0x904>
    4bbc:	ldr	r3, [sp, #28]
    4bbe:	ldr	r2, [sp, #16]
    4bc0:	subs	r4, r3, r2
    4bc2:	cmp	r4, #0
    4bc4:	ble.w	50bc <_svfprintf_r+0x904>
    4bc8:	cmp	r4, #16
    4bca:	ldr	r1, [sp, #116]	; 0x74
    4bcc:	ldr	r2, [sp, #112]	; 0x70
    4bce:	ldr	r7, [pc, #596]	; (4e24 <_svfprintf_r+0x66c>)
    4bd0:	ble.n	4c1a <_svfprintf_r+0x462>
    4bd2:	mov	r0, r9
    4bd4:	movs	r5, #16
    4bd6:	mov	r9, r8
    4bd8:	mov	r8, r6
    4bda:	ldr	r6, [sp, #20]
    4bdc:	b.n	4be8 <_svfprintf_r+0x430>
    4bde:	subs	r4, #16
    4be0:	cmp	r4, #16
    4be2:	add.w	r0, r0, #8
    4be6:	ble.n	4c14 <_svfprintf_r+0x45c>
    4be8:	adds	r2, #1
    4bea:	adds	r1, #16
    4bec:	cmp	r2, #7
    4bee:	str	r1, [sp, #116]	; 0x74
    4bf0:	str	r2, [sp, #112]	; 0x70
    4bf2:	str	r7, [r0, #0]
    4bf4:	str	r5, [r0, #4]
    4bf6:	ble.n	4bde <_svfprintf_r+0x426>
    4bf8:	add	r2, sp, #108	; 0x6c
    4bfa:	ldr	r1, [sp, #12]
    4bfc:	mov	r0, r6
    4bfe:	bl	5d28 <__ssprint_r>
    4c02:	cmp	r0, #0
    4c04:	bne.w	49a4 <_svfprintf_r+0x1ec>
    4c08:	subs	r4, #16
    4c0a:	cmp	r4, #16
    4c0c:	ldr	r1, [sp, #116]	; 0x74
    4c0e:	ldr	r2, [sp, #112]	; 0x70
    4c10:	add	r0, sp, #160	; 0xa0
    4c12:	bgt.n	4be8 <_svfprintf_r+0x430>
    4c14:	mov	r6, r8
    4c16:	mov	r8, r9
    4c18:	mov	r9, r0
    4c1a:	adds	r2, #1
    4c1c:	adds	r3, r4, r1
    4c1e:	cmp	r2, #7
    4c20:	str	r3, [sp, #116]	; 0x74
    4c22:	str	r2, [sp, #112]	; 0x70
    4c24:	str.w	r7, [r9]
    4c28:	str.w	r4, [r9, #4]
    4c2c:	bgt.w	53f4 <_svfprintf_r+0xc3c>
    4c30:	ldrb.w	r7, [sp, #79]	; 0x4f
    4c34:	add.w	r9, r9, #8
    4c38:	cbz	r7, 4c58 <_svfprintf_r+0x4a0>
    4c3a:	ldr	r2, [sp, #112]	; 0x70
    4c3c:	adds	r2, #1
    4c3e:	adds	r3, #1
    4c40:	add.w	r0, sp, #79	; 0x4f
    4c44:	movs	r1, #1
    4c46:	cmp	r2, #7
    4c48:	str	r3, [sp, #116]	; 0x74
    4c4a:	str	r2, [sp, #112]	; 0x70
    4c4c:	stmia.w	r9, {r0, r1}
    4c50:	bgt.w	5312 <_svfprintf_r+0xb5a>
    4c54:	add.w	r9, r9, #8
    4c58:	ldr	r2, [sp, #40]	; 0x28
    4c5a:	cbz	r2, 4c78 <_svfprintf_r+0x4c0>
    4c5c:	ldr	r2, [sp, #112]	; 0x70
    4c5e:	adds	r2, #1
    4c60:	adds	r3, #2
    4c62:	add	r0, sp, #80	; 0x50
    4c64:	movs	r1, #2
    4c66:	cmp	r2, #7
    4c68:	str	r3, [sp, #116]	; 0x74
    4c6a:	str	r2, [sp, #112]	; 0x70
    4c6c:	stmia.w	r9, {r0, r1}
    4c70:	bgt.w	532a <_svfprintf_r+0xb72>
    4c74:	add.w	r9, r9, #8
    4c78:	ldr	r2, [sp, #44]	; 0x2c
    4c7a:	cmp	r2, #128	; 0x80
    4c7c:	beq.w	517c <_svfprintf_r+0x9c4>
    4c80:	ldr	r2, [sp, #32]
    4c82:	rsb	r4, r2, r8
    4c86:	cmp	r4, #0
    4c88:	ble.n	4cf4 <_svfprintf_r+0x53c>
    4c8a:	cmp	r4, #16
    4c8c:	ldr	r2, [sp, #112]	; 0x70
    4c8e:	ldr	r7, [pc, #408]	; (4e28 <_svfprintf_r+0x670>)
    4c90:	ble.n	4cda <_svfprintf_r+0x522>
    4c92:	mov	r1, r9
    4c94:	mov.w	r8, #16
    4c98:	mov	r9, r6
    4c9a:	ldr	r5, [sp, #20]
    4c9c:	ldr	r6, [sp, #12]
    4c9e:	b.n	4caa <_svfprintf_r+0x4f2>
    4ca0:	subs	r4, #16
    4ca2:	cmp	r4, #16
    4ca4:	add.w	r1, r1, #8
    4ca8:	ble.n	4cd6 <_svfprintf_r+0x51e>
    4caa:	adds	r2, #1
    4cac:	adds	r3, #16
    4cae:	cmp	r2, #7
    4cb0:	str	r3, [sp, #116]	; 0x74
    4cb2:	str	r2, [sp, #112]	; 0x70
    4cb4:	stmia.w	r1, {r7, r8}
    4cb8:	ble.n	4ca0 <_svfprintf_r+0x4e8>
    4cba:	add	r2, sp, #108	; 0x6c
    4cbc:	mov	r1, r6
    4cbe:	mov	r0, r5
    4cc0:	bl	5d28 <__ssprint_r>
    4cc4:	cmp	r0, #0
    4cc6:	bne.w	49a4 <_svfprintf_r+0x1ec>
    4cca:	subs	r4, #16
    4ccc:	cmp	r4, #16
    4cce:	ldr	r3, [sp, #116]	; 0x74
    4cd0:	ldr	r2, [sp, #112]	; 0x70
    4cd2:	add	r1, sp, #160	; 0xa0
    4cd4:	bgt.n	4caa <_svfprintf_r+0x4f2>
    4cd6:	mov	r6, r9
    4cd8:	mov	r9, r1
    4cda:	adds	r2, #1
    4cdc:	add	r3, r4
    4cde:	cmp	r2, #7
    4ce0:	str	r3, [sp, #116]	; 0x74
    4ce2:	str	r2, [sp, #112]	; 0x70
    4ce4:	str.w	r7, [r9]
    4ce8:	str.w	r4, [r9, #4]
    4cec:	bgt.w	52fa <_svfprintf_r+0xb42>
    4cf0:	add.w	r9, r9, #8
    4cf4:	tst.w	fp, #256	; 0x100
    4cf8:	bne.w	50c0 <_svfprintf_r+0x908>
    4cfc:	ldr	r2, [sp, #112]	; 0x70
    4cfe:	ldr	r0, [sp, #32]
    4d00:	str.w	r6, [r9]
    4d04:	adds	r2, #1
    4d06:	add	r3, r0
    4d08:	cmp	r2, #7
    4d0a:	str	r3, [sp, #116]	; 0x74
    4d0c:	str.w	r0, [r9, #4]
    4d10:	str	r2, [sp, #112]	; 0x70
    4d12:	bgt.w	529a <_svfprintf_r+0xae2>
    4d16:	add.w	r9, r9, #8
    4d1a:	tst.w	fp, #4
    4d1e:	beq.n	4d9e <_svfprintf_r+0x5e6>
    4d20:	ldr	r2, [sp, #28]
    4d22:	ldr	r1, [sp, #16]
    4d24:	subs	r4, r2, r1
    4d26:	cmp	r4, #0
    4d28:	ble.n	4d9e <_svfprintf_r+0x5e6>
    4d2a:	cmp	r4, #16
    4d2c:	ldr	r2, [sp, #112]	; 0x70
    4d2e:	ldr	r7, [pc, #244]	; (4e24 <_svfprintf_r+0x66c>)
    4d30:	ble.n	4d78 <_svfprintf_r+0x5c0>
    4d32:	movs	r5, #16
    4d34:	ldr	r6, [sp, #20]
    4d36:	ldr.w	r8, [sp, #12]
    4d3a:	b.n	4d46 <_svfprintf_r+0x58e>
    4d3c:	subs	r4, #16
    4d3e:	cmp	r4, #16
    4d40:	add.w	r9, r9, #8
    4d44:	ble.n	4d78 <_svfprintf_r+0x5c0>
    4d46:	adds	r2, #1
    4d48:	adds	r3, #16
    4d4a:	cmp	r2, #7
    4d4c:	str	r3, [sp, #116]	; 0x74
    4d4e:	str	r2, [sp, #112]	; 0x70
    4d50:	str.w	r7, [r9]
    4d54:	str.w	r5, [r9, #4]
    4d58:	ble.n	4d3c <_svfprintf_r+0x584>
    4d5a:	add	r2, sp, #108	; 0x6c
    4d5c:	mov	r1, r8
    4d5e:	mov	r0, r6
    4d60:	bl	5d28 <__ssprint_r>
    4d64:	cmp	r0, #0
    4d66:	bne.w	49a4 <_svfprintf_r+0x1ec>
    4d6a:	subs	r4, #16
    4d6c:	cmp	r4, #16
    4d6e:	ldr	r3, [sp, #116]	; 0x74
    4d70:	ldr	r2, [sp, #112]	; 0x70
    4d72:	add.w	r9, sp, #160	; 0xa0
    4d76:	bgt.n	4d46 <_svfprintf_r+0x58e>
    4d78:	adds	r2, #1
    4d7a:	add	r3, r4
    4d7c:	cmp	r2, #7
    4d7e:	str	r3, [sp, #116]	; 0x74
    4d80:	str	r2, [sp, #112]	; 0x70
    4d82:	str.w	r7, [r9]
    4d86:	str.w	r4, [r9, #4]
    4d8a:	ble.n	4d9e <_svfprintf_r+0x5e6>
    4d8c:	add	r2, sp, #108	; 0x6c
    4d8e:	ldr	r1, [sp, #12]
    4d90:	ldr	r0, [sp, #20]
    4d92:	bl	5d28 <__ssprint_r>
    4d96:	cmp	r0, #0
    4d98:	bne.w	49a4 <_svfprintf_r+0x1ec>
    4d9c:	ldr	r3, [sp, #116]	; 0x74
    4d9e:	ldr	r2, [sp, #24]
    4da0:	ldr	r1, [sp, #28]
    4da2:	ldr	r0, [sp, #16]
    4da4:	cmp	r1, r0
    4da6:	ite	ge
    4da8:	addge	r2, r2, r1
    4daa:	addlt	r2, r2, r0
    4dac:	str	r2, [sp, #24]
    4dae:	cmp	r3, #0
    4db0:	bne.w	52b2 <_svfprintf_r+0xafa>
    4db4:	movs	r3, #0
    4db6:	str	r3, [sp, #112]	; 0x70
    4db8:	add.w	r9, sp, #160	; 0xa0
    4dbc:	b.n	4804 <_svfprintf_r+0x4c>
    4dbe:	orr.w	fp, fp, #8
    4dc2:	ldrb.w	r3, [sl]
    4dc6:	b.n	486a <_svfprintf_r+0xb2>
    4dc8:	str	r3, [sp, #48]	; 0x30
    4dca:	mov	r8, r5
    4dcc:	cmp	r2, #0
    4dce:	bne.w	5d06 <_svfprintf_r+0x154e>
    4dd2:	orr.w	fp, fp, #16
    4dd6:	ands.w	r3, fp, #32
    4dda:	bne.w	49d2 <_svfprintf_r+0x21a>
    4dde:	ands.w	r2, fp, #16
    4de2:	bne.w	5508 <_svfprintf_r+0xd50>
    4de6:	ands.w	r3, fp, #64	; 0x40
    4dea:	beq.w	5508 <_svfprintf_r+0xd50>
    4dee:	ldr	r1, [sp, #36]	; 0x24
    4df0:	strb.w	r2, [sp, #79]	; 0x4f
    4df4:	mov	r3, r1
    4df6:	cmp.w	r8, #0
    4dfa:	add.w	r3, r3, #4
    4dfe:	ldrh	r4, [r1, #0]
    4e00:	mov.w	r5, #0
    4e04:	blt.w	595e <_svfprintf_r+0x11a6>
    4e08:	orrs.w	r1, r4, r5
    4e0c:	bic.w	fp, fp, #128	; 0x80
    4e10:	str	r3, [sp, #36]	; 0x24
    4e12:	beq.w	5092 <_svfprintf_r+0x8da>
    4e16:	mov	r7, r2
    4e18:	b.n	49fc <_svfprintf_r+0x244>
    4e1a:	nop
    4e1c:	.word	0x2000059c
    4e20:	.word	0x20000598
    4e24:	.word	0x200005d8
    4e28:	.word	0x20000588
    4e2c:	str	r3, [sp, #48]	; 0x30
    4e2e:	mov	r8, r5
    4e30:	cmp	r2, #0
    4e32:	bne.w	5ce8 <_svfprintf_r+0x1530>
    4e36:	orr.w	fp, fp, #16
    4e3a:	ands.w	r3, fp, #32
    4e3e:	beq.w	5410 <_svfprintf_r+0xc58>
    4e42:	ldr	r7, [sp, #36]	; 0x24
    4e44:	adds	r7, #7
    4e46:	bic.w	r3, r7, #7
    4e4a:	movs	r7, #0
    4e4c:	add.w	r2, r3, #8
    4e50:	cmp	r8, r7
    4e52:	str	r2, [sp, #36]	; 0x24
    4e54:	ldrd	r4, r5, [r3]
    4e58:	strb.w	r7, [sp, #79]	; 0x4f
    4e5c:	bge.w	4af6 <_svfprintf_r+0x33e>
    4e60:	orrs.w	r3, r4, r5
    4e64:	bne.w	4b02 <_svfprintf_r+0x34a>
    4e68:	add	r6, sp, #224	; 0xe0
    4e6a:	adds	r4, #48	; 0x30
    4e6c:	strb.w	r4, [r6, #-65]!
    4e70:	add	r3, sp, #160	; 0xa0
    4e72:	subs	r3, r3, r6
    4e74:	str	r3, [sp, #32]
    4e76:	ldr	r3, [sp, #32]
    4e78:	cmp	r3, r8
    4e7a:	it	lt
    4e7c:	movlt	r3, r8
    4e7e:	str	r3, [sp, #16]
    4e80:	movs	r3, #0
    4e82:	str	r3, [sp, #56]	; 0x38
    4e84:	b.n	4b9c <_svfprintf_r+0x3e4>
    4e86:	str	r3, [sp, #48]	; 0x30
    4e88:	mov	r8, r5
    4e8a:	cmp	r2, #0
    4e8c:	bne.w	5ce0 <_svfprintf_r+0x1528>
    4e90:	tst.w	fp, #32
    4e94:	ldr	r0, [pc, #776]	; (51a0 <_svfprintf_r+0x9e8>)
    4e96:	beq.w	4fa6 <_svfprintf_r+0x7ee>
    4e9a:	ldr	r7, [sp, #36]	; 0x24
    4e9c:	adds	r7, #7
    4e9e:	bic.w	r3, r7, #7
    4ea2:	ldrd	r4, r5, [r3]
    4ea6:	add.w	r2, r3, #8
    4eaa:	str	r2, [sp, #36]	; 0x24
    4eac:	ands.w	r7, fp, #1
    4eb0:	beq.w	5342 <_svfprintf_r+0xb8a>
    4eb4:	orrs.w	r3, r4, r5
    4eb8:	beq.w	5802 <_svfprintf_r+0x104a>
    4ebc:	movs	r7, #0
    4ebe:	movs	r3, #48	; 0x30
    4ec0:	ldrb.w	r2, [sp, #48]	; 0x30
    4ec4:	strb.w	r3, [sp, #80]	; 0x50
    4ec8:	cmp	r8, r7
    4eca:	strb.w	r2, [sp, #81]	; 0x51
    4ece:	strb.w	r7, [sp, #79]	; 0x4f
    4ed2:	orr.w	r3, fp, #2
    4ed6:	blt.w	5b08 <_svfprintf_r+0x1350>
    4eda:	bic.w	r3, fp, #128	; 0x80
    4ede:	orr.w	fp, r3, #2
    4ee2:	add	r6, sp, #160	; 0xa0
    4ee4:	lsrs	r3, r4, #4
    4ee6:	and.w	r1, r4, #15
    4eea:	orr.w	r3, r3, r5, lsl #28
    4eee:	lsrs	r2, r5, #4
    4ef0:	mov	r4, r3
    4ef2:	mov	r5, r2
    4ef4:	ldrb	r3, [r0, r1]
    4ef6:	strb.w	r3, [r6, #-1]!
    4efa:	orrs.w	r3, r4, r5
    4efe:	bne.n	4ee4 <_svfprintf_r+0x72c>
    4f00:	b.n	4e70 <_svfprintf_r+0x6b8>
    4f02:	ldr	r1, [sp, #36]	; 0x24
    4f04:	str	r3, [sp, #48]	; 0x30
    4f06:	ldr	r2, [r1, #0]
    4f08:	strb.w	r2, [sp, #120]	; 0x78
    4f0c:	movs	r3, #0
    4f0e:	mov	r2, r1
    4f10:	mov	r7, r3
    4f12:	strb.w	r3, [sp, #79]	; 0x4f
    4f16:	adds	r2, #4
    4f18:	movs	r3, #1
    4f1a:	str	r3, [sp, #16]
    4f1c:	mov	r8, r7
    4f1e:	str	r7, [sp, #56]	; 0x38
    4f20:	str	r2, [sp, #36]	; 0x24
    4f22:	str	r3, [sp, #32]
    4f24:	add	r6, sp, #120	; 0x78
    4f26:	b.n	4ba4 <_svfprintf_r+0x3ec>
    4f28:	str	r3, [sp, #48]	; 0x30
    4f2a:	mov	r8, r5
    4f2c:	cmp	r2, #0
    4f2e:	beq.w	4ac2 <_svfprintf_r+0x30a>
    4f32:	strb.w	r1, [sp, #79]	; 0x4f
    4f36:	b.n	4ac2 <_svfprintf_r+0x30a>
    4f38:	orr.w	fp, fp, #64	; 0x40
    4f3c:	ldrb.w	r3, [sl]
    4f40:	b.n	486a <_svfprintf_r+0xb2>
    4f42:	ldrb.w	r3, [sl]
    4f46:	cmp	r1, #0
    4f48:	bne.w	486a <_svfprintf_r+0xb2>
    4f4c:	movs	r2, #1
    4f4e:	movs	r1, #32
    4f50:	b.n	486a <_svfprintf_r+0xb2>
    4f52:	orr.w	fp, fp, #1
    4f56:	ldrb.w	r3, [sl]
    4f5a:	b.n	486a <_svfprintf_r+0xb2>
    4f5c:	ldr	r4, [sp, #36]	; 0x24
    4f5e:	ldr	r3, [r4, #0]
    4f60:	str	r3, [sp, #28]
    4f62:	mov	r0, r3
    4f64:	cmp	r0, #0
    4f66:	mov	r3, r4
    4f68:	add.w	r3, r3, #4
    4f6c:	blt.w	492e <_svfprintf_r+0x176>
    4f70:	str	r3, [sp, #36]	; 0x24
    4f72:	ldrb.w	r3, [sl]
    4f76:	b.n	486a <_svfprintf_r+0xb2>
    4f78:	ldrb.w	r3, [sl]
    4f7c:	movs	r2, #1
    4f7e:	movs	r1, #43	; 0x2b
    4f80:	b.n	486a <_svfprintf_r+0xb2>
    4f82:	str	r3, [sp, #48]	; 0x30
    4f84:	mov	r8, r5
    4f86:	cmp	r2, #0
    4f88:	beq.w	4e3a <_svfprintf_r+0x682>
    4f8c:	strb.w	r1, [sp, #79]	; 0x4f
    4f90:	b.n	4e3a <_svfprintf_r+0x682>
    4f92:	str	r3, [sp, #48]	; 0x30
    4f94:	mov	r8, r5
    4f96:	cmp	r2, #0
    4f98:	bne.w	5cf0 <_svfprintf_r+0x1538>
    4f9c:	tst.w	fp, #32
    4fa0:	ldr	r0, [pc, #512]	; (51a4 <_svfprintf_r+0x9ec>)
    4fa2:	bne.w	4e9a <_svfprintf_r+0x6e2>
    4fa6:	ldr	r2, [sp, #36]	; 0x24
    4fa8:	tst.w	fp, #16
    4fac:	mov	r3, r2
    4fae:	bne.w	5534 <_svfprintf_r+0xd7c>
    4fb2:	tst.w	fp, #64	; 0x40
    4fb6:	beq.w	5534 <_svfprintf_r+0xd7c>
    4fba:	adds	r3, #4
    4fbc:	ldrh	r4, [r2, #0]
    4fbe:	str	r3, [sp, #36]	; 0x24
    4fc0:	movs	r5, #0
    4fc2:	b.n	4eac <_svfprintf_r+0x6f4>
    4fc4:	ldrb.w	r3, [sl]
    4fc8:	cmp	r3, #108	; 0x6c
    4fca:	ittte	eq
    4fcc:	ldrbeq.w	r3, [sl, #1]
    4fd0:	orreq.w	fp, fp, #32
    4fd4:	addeq.w	sl, sl, #1
    4fd8:	orrne.w	fp, fp, #16
    4fdc:	b.n	486a <_svfprintf_r+0xb2>
    4fde:	cmp	r2, #0
    4fe0:	bne.w	5cc2 <_svfprintf_r+0x150a>
    4fe4:	tst.w	fp, #32
    4fe8:	beq.w	56b8 <_svfprintf_r+0xf00>
    4fec:	ldr	r2, [sp, #36]	; 0x24
    4fee:	ldr	r1, [sp, #24]
    4ff0:	ldr	r3, [r2, #0]
    4ff2:	asrs	r5, r1, #31
    4ff4:	mov	r0, r1
    4ff6:	adds	r2, #4
    4ff8:	mov	r1, r5
    4ffa:	str	r2, [sp, #36]	; 0x24
    4ffc:	strd	r0, r1, [r3]
    5000:	b.n	4804 <_svfprintf_r+0x4c>
    5002:	orr.w	fp, fp, #32
    5006:	ldrb.w	r3, [sl]
    500a:	b.n	486a <_svfprintf_r+0xb2>
    500c:	ldr	r2, [sp, #36]	; 0x24
    500e:	str	r3, [sp, #48]	; 0x30
    5010:	ldr	r6, [r2, #0]
    5012:	movs	r4, #0
    5014:	strb.w	r4, [sp, #79]	; 0x4f
    5018:	adds	r7, r2, #4
    501a:	cmp	r6, #0
    501c:	beq.w	5aea <_svfprintf_r+0x1332>
    5020:	cmp	r5, #0
    5022:	blt.w	596a <_svfprintf_r+0x11b2>
    5026:	mov	r2, r5
    5028:	mov	r1, r4
    502a:	mov	r0, r6
    502c:	bl	3280 <memchr>
    5030:	cmp	r0, #0
    5032:	beq.w	5bce <_svfprintf_r+0x1416>
    5036:	subs	r3, r0, r6
    5038:	str	r3, [sp, #32]
    503a:	mov	r8, r4
    503c:	bic.w	r3, r3, r3, asr #31
    5040:	str	r7, [sp, #36]	; 0x24
    5042:	str	r3, [sp, #16]
    5044:	str.w	r8, [sp, #56]	; 0x38
    5048:	ldrb.w	r7, [sp, #79]	; 0x4f
    504c:	b.n	4b9c <_svfprintf_r+0x3e4>
    504e:	ldr	r0, [pc, #340]	; (51a4 <_svfprintf_r+0x9ec>)
    5050:	str	r2, [sp, #48]	; 0x30
    5052:	cmp.w	r8, #0
    5056:	bne.w	5362 <_svfprintf_r+0xbaa>
    505a:	mov	r7, r8
    505c:	mov.w	r8, #0
    5060:	str.w	r8, [sp, #32]
    5064:	add	r6, sp, #160	; 0xa0
    5066:	b.n	4e76 <_svfprintf_r+0x6be>
    5068:	str	r3, [sp, #48]	; 0x30
    506a:	cmp	r2, #0
    506c:	bne.w	5cca <_svfprintf_r+0x1512>
    5070:	ldr	r2, [sp, #48]	; 0x30
    5072:	cmp	r2, #0
    5074:	beq.w	4996 <_svfprintf_r+0x1de>
    5078:	movs	r3, #0
    507a:	movs	r1, #1
    507c:	mov	r7, r3
    507e:	str	r1, [sp, #16]
    5080:	strb.w	r2, [sp, #120]	; 0x78
    5084:	strb.w	r3, [sp, #79]	; 0x4f
    5088:	mov	r8, r3
    508a:	str	r3, [sp, #56]	; 0x38
    508c:	str	r1, [sp, #32]
    508e:	add	r6, sp, #120	; 0x78
    5090:	b.n	4ba4 <_svfprintf_r+0x3ec>
    5092:	cmp.w	r8, #0
    5096:	beq.w	5bb0 <_svfprintf_r+0x13f8>
    509a:	movs	r7, #0
    509c:	movs	r4, #0
    509e:	movs	r5, #0
    50a0:	b.n	49fc <_svfprintf_r+0x244>
    50a2:	ldr	r0, [pc, #256]	; (51a4 <_svfprintf_r+0x9ec>)
    50a4:	str	r2, [sp, #48]	; 0x30
    50a6:	mov	fp, r3
    50a8:	orrs.w	r3, r4, r5
    50ac:	str	r7, [sp, #36]	; 0x24
    50ae:	mov.w	r7, #0
    50b2:	bne.w	4ee2 <_svfprintf_r+0x72a>
    50b6:	movs	r4, #0
    50b8:	movs	r5, #0
    50ba:	b.n	4ee2 <_svfprintf_r+0x72a>
    50bc:	ldr	r3, [sp, #116]	; 0x74
    50be:	b.n	4c38 <_svfprintf_r+0x480>
    50c0:	ldr	r2, [sp, #48]	; 0x30
    50c2:	cmp	r2, #101	; 0x65
    50c4:	ble.w	520a <_svfprintf_r+0xa52>
    50c8:	vcmp.f64	d8, #0.0
    50cc:	vmrs	APSR_nzcv, fpscr
    50d0:	bne.w	5366 <_svfprintf_r+0xbae>
    50d4:	ldr	r2, [sp, #112]	; 0x70
    50d6:	ldr	r1, [pc, #208]	; (51a8 <_svfprintf_r+0x9f0>)
    50d8:	str.w	r1, [r9]
    50dc:	adds	r2, #1
    50de:	adds	r3, #1
    50e0:	movs	r1, #1
    50e2:	cmp	r2, #7
    50e4:	str	r3, [sp, #116]	; 0x74
    50e6:	str	r2, [sp, #112]	; 0x70
    50e8:	str.w	r1, [r9, #4]
    50ec:	bgt.w	5814 <_svfprintf_r+0x105c>
    50f0:	add.w	r9, r9, #8
    50f4:	ldr	r2, [sp, #84]	; 0x54
    50f6:	ldr	r1, [sp, #52]	; 0x34
    50f8:	cmp	r2, r1
    50fa:	blt.n	5104 <_svfprintf_r+0x94c>
    50fc:	tst.w	fp, #1
    5100:	beq.w	4d1a <_svfprintf_r+0x562>
    5104:	ldr	r2, [sp, #112]	; 0x70
    5106:	ldr	r0, [sp, #60]	; 0x3c
    5108:	ldr	r1, [sp, #64]	; 0x40
    510a:	str.w	r1, [r9]
    510e:	adds	r2, #1
    5110:	add	r3, r0
    5112:	cmp	r2, #7
    5114:	str	r3, [sp, #116]	; 0x74
    5116:	str.w	r0, [r9, #4]
    511a:	str	r2, [sp, #112]	; 0x70
    511c:	bgt.w	58cc <_svfprintf_r+0x1114>
    5120:	add.w	r9, r9, #8
    5124:	ldr	r2, [sp, #52]	; 0x34
    5126:	subs	r4, r2, #1
    5128:	cmp	r4, #0
    512a:	ble.w	4d1a <_svfprintf_r+0x562>
    512e:	cmp	r4, #16
    5130:	ldr	r2, [sp, #112]	; 0x70
    5132:	ldr	r7, [pc, #120]	; (51ac <_svfprintf_r+0x9f4>)
    5134:	ble.w	54f0 <_svfprintf_r+0xd38>
    5138:	movs	r5, #16
    513a:	ldr	r6, [sp, #20]
    513c:	ldr.w	r8, [sp, #12]
    5140:	b.n	514e <_svfprintf_r+0x996>
    5142:	add.w	r9, r9, #8
    5146:	subs	r4, #16
    5148:	cmp	r4, #16
    514a:	ble.w	54f0 <_svfprintf_r+0xd38>
    514e:	adds	r2, #1
    5150:	adds	r3, #16
    5152:	cmp	r2, #7
    5154:	str	r3, [sp, #116]	; 0x74
    5156:	str	r2, [sp, #112]	; 0x70
    5158:	str.w	r7, [r9]
    515c:	str.w	r5, [r9, #4]
    5160:	ble.n	5142 <_svfprintf_r+0x98a>
    5162:	add	r2, sp, #108	; 0x6c
    5164:	mov	r1, r8
    5166:	mov	r0, r6
    5168:	bl	5d28 <__ssprint_r>
    516c:	cmp	r0, #0
    516e:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5172:	ldr	r3, [sp, #116]	; 0x74
    5174:	ldr	r2, [sp, #112]	; 0x70
    5176:	add.w	r9, sp, #160	; 0xa0
    517a:	b.n	5146 <_svfprintf_r+0x98e>
    517c:	ldr	r2, [sp, #28]
    517e:	ldr	r1, [sp, #16]
    5180:	subs	r4, r2, r1
    5182:	cmp	r4, #0
    5184:	ble.w	4c80 <_svfprintf_r+0x4c8>
    5188:	cmp	r4, #16
    518a:	ldr	r2, [sp, #112]	; 0x70
    518c:	ldr	r7, [pc, #28]	; (51ac <_svfprintf_r+0x9f4>)
    518e:	ble.n	51ee <_svfprintf_r+0xa36>
    5190:	mov	r1, r9
    5192:	movs	r5, #16
    5194:	mov	r9, r8
    5196:	mov	r0, r3
    5198:	mov	r8, r6
    519a:	ldr	r6, [sp, #20]
    519c:	b.n	51ba <_svfprintf_r+0xa02>
    519e:	nop
    51a0:	.word	0x200005a8
    51a4:	.word	0x200005bc
    51a8:	.word	0x20000584
    51ac:	.word	0x20000588
    51b0:	subs	r4, #16
    51b2:	cmp	r4, #16
    51b4:	add.w	r1, r1, #8
    51b8:	ble.n	51e6 <_svfprintf_r+0xa2e>
    51ba:	adds	r2, #1
    51bc:	adds	r0, #16
    51be:	cmp	r2, #7
    51c0:	str	r0, [sp, #116]	; 0x74
    51c2:	str	r2, [sp, #112]	; 0x70
    51c4:	str	r7, [r1, #0]
    51c6:	str	r5, [r1, #4]
    51c8:	ble.n	51b0 <_svfprintf_r+0x9f8>
    51ca:	add	r2, sp, #108	; 0x6c
    51cc:	ldr	r1, [sp, #12]
    51ce:	mov	r0, r6
    51d0:	bl	5d28 <__ssprint_r>
    51d4:	cmp	r0, #0
    51d6:	bne.w	49a4 <_svfprintf_r+0x1ec>
    51da:	subs	r4, #16
    51dc:	cmp	r4, #16
    51de:	ldr	r0, [sp, #116]	; 0x74
    51e0:	ldr	r2, [sp, #112]	; 0x70
    51e2:	add	r1, sp, #160	; 0xa0
    51e4:	bgt.n	51ba <_svfprintf_r+0xa02>
    51e6:	mov	r6, r8
    51e8:	mov	r3, r0
    51ea:	mov	r8, r9
    51ec:	mov	r9, r1
    51ee:	adds	r2, #1
    51f0:	add	r3, r4
    51f2:	cmp	r2, #7
    51f4:	str	r3, [sp, #116]	; 0x74
    51f6:	str	r2, [sp, #112]	; 0x70
    51f8:	str.w	r7, [r9]
    51fc:	str.w	r4, [r9, #4]
    5200:	bgt.w	5690 <_svfprintf_r+0xed8>
    5204:	add.w	r9, r9, #8
    5208:	b.n	4c80 <_svfprintf_r+0x4c8>
    520a:	ldr	r2, [sp, #52]	; 0x34
    520c:	str.w	r6, [r9]
    5210:	cmp	r2, #1
    5212:	ldr	r2, [sp, #112]	; 0x70
    5214:	add.w	r3, r3, #1
    5218:	add.w	r2, r2, #1
    521c:	mov.w	r1, #1
    5220:	str	r3, [sp, #116]	; 0x74
    5222:	str	r2, [sp, #112]	; 0x70
    5224:	str.w	r1, [r9, #4]
    5228:	ble.w	564c <_svfprintf_r+0xe94>
    522c:	cmp	r2, #7
    522e:	bgt.w	565c <_svfprintf_r+0xea4>
    5232:	add.w	r9, r9, #8
    5236:	ldr	r0, [sp, #60]	; 0x3c
    5238:	ldr	r1, [sp, #64]	; 0x40
    523a:	str.w	r1, [r9]
    523e:	adds	r2, #1
    5240:	add	r3, r0
    5242:	cmp	r2, #7
    5244:	str	r3, [sp, #116]	; 0x74
    5246:	str	r2, [sp, #112]	; 0x70
    5248:	str.w	r0, [r9, #4]
    524c:	bgt.w	5676 <_svfprintf_r+0xebe>
    5250:	add.w	r9, r9, #8
    5254:	vcmp.f64	d8, #0.0
    5258:	vmrs	APSR_nzcv, fpscr
    525c:	ldr	r1, [sp, #52]	; 0x34
    525e:	beq.w	544c <_svfprintf_r+0xc94>
    5262:	subs	r1, #1
    5264:	adds	r2, #1
    5266:	adds	r6, #1
    5268:	add	r3, r1
    526a:	cmp	r2, #7
    526c:	str.w	r6, [r9]
    5270:	str	r2, [sp, #112]	; 0x70
    5272:	str	r3, [sp, #116]	; 0x74
    5274:	str.w	r1, [r9, #4]
    5278:	bgt.w	54b6 <_svfprintf_r+0xcfe>
    527c:	add.w	r9, r9, #8
    5280:	ldr	r0, [sp, #68]	; 0x44
    5282:	str.w	r0, [r9, #4]
    5286:	adds	r2, #1
    5288:	add	r3, r0
    528a:	add	r1, sp, #92	; 0x5c
    528c:	cmp	r2, #7
    528e:	str	r3, [sp, #116]	; 0x74
    5290:	str	r2, [sp, #112]	; 0x70
    5292:	str.w	r1, [r9]
    5296:	ble.w	4d16 <_svfprintf_r+0x55e>
    529a:	add	r2, sp, #108	; 0x6c
    529c:	ldr	r1, [sp, #12]
    529e:	ldr	r0, [sp, #20]
    52a0:	bl	5d28 <__ssprint_r>
    52a4:	cmp	r0, #0
    52a6:	bne.w	49a4 <_svfprintf_r+0x1ec>
    52aa:	ldr	r3, [sp, #116]	; 0x74
    52ac:	add.w	r9, sp, #160	; 0xa0
    52b0:	b.n	4d1a <_svfprintf_r+0x562>
    52b2:	add	r2, sp, #108	; 0x6c
    52b4:	ldr	r1, [sp, #12]
    52b6:	ldr	r0, [sp, #20]
    52b8:	bl	5d28 <__ssprint_r>
    52bc:	cmp	r0, #0
    52be:	beq.w	4db4 <_svfprintf_r+0x5fc>
    52c2:	b.w	49a4 <_svfprintf_r+0x1ec>
    52c6:	ldr	r1, [sp, #36]	; 0x24
    52c8:	cmp.w	r8, #0
    52cc:	ldr	r4, [r1, #0]
    52ce:	strb.w	r3, [sp, #79]	; 0x4f
    52d2:	add.w	r7, r1, #4
    52d6:	mov.w	r5, #0
    52da:	blt.w	59c0 <_svfprintf_r+0x1208>
    52de:	orrs.w	r2, r4, r5
    52e2:	str	r7, [sp, #36]	; 0x24
    52e4:	bic.w	fp, fp, #128	; 0x80
    52e8:	mov	r7, r3
    52ea:	bne.w	4b02 <_svfprintf_r+0x34a>
    52ee:	cmp.w	r8, #0
    52f2:	beq.w	505c <_svfprintf_r+0x8a4>
    52f6:	movs	r4, #0
    52f8:	b.n	4e68 <_svfprintf_r+0x6b0>
    52fa:	add	r2, sp, #108	; 0x6c
    52fc:	ldr	r1, [sp, #12]
    52fe:	ldr	r0, [sp, #20]
    5300:	bl	5d28 <__ssprint_r>
    5304:	cmp	r0, #0
    5306:	bne.w	49a4 <_svfprintf_r+0x1ec>
    530a:	ldr	r3, [sp, #116]	; 0x74
    530c:	add.w	r9, sp, #160	; 0xa0
    5310:	b.n	4cf4 <_svfprintf_r+0x53c>
    5312:	add	r2, sp, #108	; 0x6c
    5314:	ldr	r1, [sp, #12]
    5316:	ldr	r0, [sp, #20]
    5318:	bl	5d28 <__ssprint_r>
    531c:	cmp	r0, #0
    531e:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5322:	ldr	r3, [sp, #116]	; 0x74
    5324:	add.w	r9, sp, #160	; 0xa0
    5328:	b.n	4c58 <_svfprintf_r+0x4a0>
    532a:	add	r2, sp, #108	; 0x6c
    532c:	ldr	r1, [sp, #12]
    532e:	ldr	r0, [sp, #20]
    5330:	bl	5d28 <__ssprint_r>
    5334:	cmp	r0, #0
    5336:	bne.w	49a4 <_svfprintf_r+0x1ec>
    533a:	ldr	r3, [sp, #116]	; 0x74
    533c:	add.w	r9, sp, #160	; 0xa0
    5340:	b.n	4c78 <_svfprintf_r+0x4c0>
    5342:	cmp.w	r8, #0
    5346:	strb.w	r7, [sp, #79]	; 0x4f
    534a:	blt.w	582c <_svfprintf_r+0x1074>
    534e:	orrs.w	r3, r4, r5
    5352:	bic.w	fp, fp, #128	; 0x80
    5356:	bne.w	4ee2 <_svfprintf_r+0x72a>
    535a:	cmp.w	r8, #0
    535e:	beq.w	505a <_svfprintf_r+0x8a2>
    5362:	movs	r7, #0
    5364:	b.n	50b6 <_svfprintf_r+0x8fe>
    5366:	ldr	r4, [sp, #84]	; 0x54
    5368:	cmp	r4, #0
    536a:	ble.w	5830 <_svfprintf_r+0x1078>
    536e:	ldr	r2, [sp, #56]	; 0x38
    5370:	ldr	r1, [sp, #52]	; 0x34
    5372:	cmp	r2, r1
    5374:	it	ge
    5376:	movge	r2, r1
    5378:	cmp	r2, #0
    537a:	mov	r4, r2
    537c:	ble.n	539a <_svfprintf_r+0xbe2>
    537e:	ldr	r2, [sp, #112]	; 0x70
    5380:	str.w	r6, [r9]
    5384:	adds	r2, #1
    5386:	add	r3, r4
    5388:	cmp	r2, #7
    538a:	str	r3, [sp, #116]	; 0x74
    538c:	str.w	r4, [r9, #4]
    5390:	str	r2, [sp, #112]	; 0x70
    5392:	bgt.w	5a7a <_svfprintf_r+0x12c2>
    5396:	add.w	r9, r9, #8
    539a:	ldr	r2, [sp, #56]	; 0x38
    539c:	cmp	r4, #0
    539e:	it	ge
    53a0:	subge	r2, r2, r4
    53a2:	cmp	r2, #0
    53a4:	mov	r4, r2
    53a6:	ble.w	558c <_svfprintf_r+0xdd4>
    53aa:	cmp	r4, #16
    53ac:	ldr	r2, [sp, #112]	; 0x70
    53ae:	ldr	r7, [pc, #772]	; (56b4 <_svfprintf_r+0xefc>)
    53b0:	ble.w	57e6 <_svfprintf_r+0x102e>
    53b4:	mov	r1, r9
    53b6:	movs	r5, #16
    53b8:	mov	r9, r6
    53ba:	ldr.w	r8, [sp, #20]
    53be:	ldr	r6, [sp, #12]
    53c0:	b.n	53cc <_svfprintf_r+0xc14>
    53c2:	adds	r1, #8
    53c4:	subs	r4, #16
    53c6:	cmp	r4, #16
    53c8:	ble.w	57e2 <_svfprintf_r+0x102a>
    53cc:	adds	r2, #1
    53ce:	adds	r3, #16
    53d0:	cmp	r2, #7
    53d2:	str	r3, [sp, #116]	; 0x74
    53d4:	str	r2, [sp, #112]	; 0x70
    53d6:	str	r7, [r1, #0]
    53d8:	str	r5, [r1, #4]
    53da:	ble.n	53c2 <_svfprintf_r+0xc0a>
    53dc:	add	r2, sp, #108	; 0x6c
    53de:	mov	r1, r6
    53e0:	mov	r0, r8
    53e2:	bl	5d28 <__ssprint_r>
    53e6:	cmp	r0, #0
    53e8:	bne.w	49a4 <_svfprintf_r+0x1ec>
    53ec:	ldr	r3, [sp, #116]	; 0x74
    53ee:	ldr	r2, [sp, #112]	; 0x70
    53f0:	add	r1, sp, #160	; 0xa0
    53f2:	b.n	53c4 <_svfprintf_r+0xc0c>
    53f4:	add	r2, sp, #108	; 0x6c
    53f6:	ldr	r1, [sp, #12]
    53f8:	ldr	r0, [sp, #20]
    53fa:	bl	5d28 <__ssprint_r>
    53fe:	cmp	r0, #0
    5400:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5404:	ldrb.w	r7, [sp, #79]	; 0x4f
    5408:	ldr	r3, [sp, #116]	; 0x74
    540a:	add.w	r9, sp, #160	; 0xa0
    540e:	b.n	4c38 <_svfprintf_r+0x480>
    5410:	ands.w	r2, fp, #16
    5414:	bne.w	52c6 <_svfprintf_r+0xb0e>
    5418:	ands.w	r3, fp, #64	; 0x40
    541c:	beq.w	52c6 <_svfprintf_r+0xb0e>
    5420:	ldr	r1, [sp, #36]	; 0x24
    5422:	strb.w	r2, [sp, #79]	; 0x4f
    5426:	mov	r3, r1
    5428:	cmp.w	r8, #0
    542c:	add.w	r3, r3, #4
    5430:	ldrh	r4, [r1, #0]
    5432:	mov.w	r5, #0
    5436:	blt.w	5962 <_svfprintf_r+0x11aa>
    543a:	orrs.w	r1, r4, r5
    543e:	bic.w	fp, fp, #128	; 0x80
    5442:	str	r3, [sp, #36]	; 0x24
    5444:	mov	r7, r2
    5446:	bne.w	4b02 <_svfprintf_r+0x34a>
    544a:	b.n	52ee <_svfprintf_r+0xb36>
    544c:	subs	r4, r1, #1
    544e:	cmp	r4, #0
    5450:	ble.w	5280 <_svfprintf_r+0xac8>
    5454:	cmp	r4, #16
    5456:	ldr	r7, [pc, #604]	; (56b4 <_svfprintf_r+0xefc>)
    5458:	ble.n	54a0 <_svfprintf_r+0xce8>
    545a:	movs	r5, #16
    545c:	ldr	r6, [sp, #20]
    545e:	ldr.w	r8, [sp, #12]
    5462:	b.n	546e <_svfprintf_r+0xcb6>
    5464:	subs	r4, #16
    5466:	cmp	r4, #16
    5468:	add.w	r9, r9, #8
    546c:	ble.n	54a0 <_svfprintf_r+0xce8>
    546e:	adds	r2, #1
    5470:	adds	r3, #16
    5472:	cmp	r2, #7
    5474:	str	r3, [sp, #116]	; 0x74
    5476:	str	r2, [sp, #112]	; 0x70
    5478:	str.w	r7, [r9]
    547c:	str.w	r5, [r9, #4]
    5480:	ble.n	5464 <_svfprintf_r+0xcac>
    5482:	add	r2, sp, #108	; 0x6c
    5484:	mov	r1, r8
    5486:	mov	r0, r6
    5488:	bl	5d28 <__ssprint_r>
    548c:	cmp	r0, #0
    548e:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5492:	subs	r4, #16
    5494:	cmp	r4, #16
    5496:	ldr	r3, [sp, #116]	; 0x74
    5498:	ldr	r2, [sp, #112]	; 0x70
    549a:	add.w	r9, sp, #160	; 0xa0
    549e:	bgt.n	546e <_svfprintf_r+0xcb6>
    54a0:	adds	r2, #1
    54a2:	add	r3, r4
    54a4:	cmp	r2, #7
    54a6:	str	r3, [sp, #116]	; 0x74
    54a8:	str	r2, [sp, #112]	; 0x70
    54aa:	str.w	r7, [r9]
    54ae:	str.w	r4, [r9, #4]
    54b2:	ble.w	527c <_svfprintf_r+0xac4>
    54b6:	add	r2, sp, #108	; 0x6c
    54b8:	ldr	r1, [sp, #12]
    54ba:	ldr	r0, [sp, #20]
    54bc:	bl	5d28 <__ssprint_r>
    54c0:	cmp	r0, #0
    54c2:	bne.w	49a4 <_svfprintf_r+0x1ec>
    54c6:	ldr	r3, [sp, #116]	; 0x74
    54c8:	ldr	r2, [sp, #112]	; 0x70
    54ca:	add.w	r9, sp, #160	; 0xa0
    54ce:	b.n	5280 <_svfprintf_r+0xac8>
    54d0:	tst.w	fp, #16
    54d4:	bne.n	553e <_svfprintf_r+0xd86>
    54d6:	tst.w	fp, #64	; 0x40
    54da:	beq.n	553e <_svfprintf_r+0xd86>
    54dc:	ldr	r1, [sp, #36]	; 0x24
    54de:	ldrsh.w	r4, [r1]
    54e2:	adds	r1, #4
    54e4:	asrs	r5, r4, #31
    54e6:	mov	r2, r4
    54e8:	mov	r3, r5
    54ea:	str	r1, [sp, #36]	; 0x24
    54ec:	b.w	4ae0 <_svfprintf_r+0x328>
    54f0:	adds	r2, #1
    54f2:	add	r3, r4
    54f4:	cmp	r2, #7
    54f6:	str	r3, [sp, #116]	; 0x74
    54f8:	str	r2, [sp, #112]	; 0x70
    54fa:	str.w	r7, [r9]
    54fe:	str.w	r4, [r9, #4]
    5502:	ble.w	4d16 <_svfprintf_r+0x55e>
    5506:	b.n	529a <_svfprintf_r+0xae2>
    5508:	ldr	r1, [sp, #36]	; 0x24
    550a:	cmp.w	r8, #0
    550e:	ldr	r4, [r1, #0]
    5510:	strb.w	r3, [sp, #79]	; 0x4f
    5514:	add.w	r7, r1, #4
    5518:	mov.w	r5, #0
    551c:	blt.w	56aa <_svfprintf_r+0xef2>
    5520:	orrs.w	r2, r4, r5
    5524:	bic.w	fp, fp, #128	; 0x80
    5528:	str	r7, [sp, #36]	; 0x24
    552a:	beq.w	5092 <_svfprintf_r+0x8da>
    552e:	mov	r7, r3
    5530:	b.w	49fc <_svfprintf_r+0x244>
    5534:	ldr	r4, [r3, #0]
    5536:	adds	r3, #4
    5538:	str	r3, [sp, #36]	; 0x24
    553a:	movs	r5, #0
    553c:	b.n	4eac <_svfprintf_r+0x6f4>
    553e:	ldr	r2, [sp, #36]	; 0x24
    5540:	ldr	r4, [r2, #0]
    5542:	mov	r3, r2
    5544:	adds	r3, #4
    5546:	asrs	r5, r4, #31
    5548:	mov	r2, r4
    554a:	str	r3, [sp, #36]	; 0x24
    554c:	cmp	r2, #0
    554e:	mov	r3, r5
    5550:	sbcs.w	r3, r3, #0
    5554:	bge.w	4aea <_svfprintf_r+0x332>
    5558:	negs	r4, r4
    555a:	mov.w	r7, #45	; 0x2d
    555e:	sbc.w	r5, r5, r5, lsl #1
    5562:	cmp.w	r8, #0
    5566:	strb.w	r7, [sp, #79]	; 0x4f
    556a:	blt.w	4b02 <_svfprintf_r+0x34a>
    556e:	bic.w	fp, fp, #128	; 0x80
    5572:	b.w	4b02 <_svfprintf_r+0x34a>
    5576:	add	r2, sp, #108	; 0x6c
    5578:	ldr	r1, [sp, #12]
    557a:	ldr	r0, [sp, #20]
    557c:	bl	5d28 <__ssprint_r>
    5580:	cmp	r0, #0
    5582:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5586:	ldr	r3, [sp, #116]	; 0x74
    5588:	add.w	r9, sp, #160	; 0xa0
    558c:	ldr	r1, [sp, #56]	; 0x38
    558e:	ldr	r2, [sp, #84]	; 0x54
    5590:	add	r1, r6
    5592:	mov	r5, r1
    5594:	ldr	r1, [sp, #52]	; 0x34
    5596:	cmp	r2, r1
    5598:	blt.n	562a <_svfprintf_r+0xe72>
    559a:	tst.w	fp, #1
    559e:	bne.n	562a <_svfprintf_r+0xe72>
    55a0:	ldr	r0, [sp, #52]	; 0x34
    55a2:	add	r6, r0
    55a4:	subs	r4, r6, r5
    55a6:	subs	r2, r0, r2
    55a8:	cmp	r4, r2
    55aa:	it	ge
    55ac:	movge	r4, r2
    55ae:	cmp	r4, #0
    55b0:	mov	r6, r4
    55b2:	ble.n	55d0 <_svfprintf_r+0xe18>
    55b4:	ldr	r1, [sp, #112]	; 0x70
    55b6:	str.w	r5, [r9]
    55ba:	adds	r1, #1
    55bc:	add	r3, r4
    55be:	cmp	r1, #7
    55c0:	str	r3, [sp, #116]	; 0x74
    55c2:	str.w	r4, [r9, #4]
    55c6:	str	r1, [sp, #112]	; 0x70
    55c8:	bgt.w	5acc <_svfprintf_r+0x1314>
    55cc:	add.w	r9, r9, #8
    55d0:	cmp	r6, #0
    55d2:	ite	ge
    55d4:	subge	r4, r2, r6
    55d6:	movlt	r4, r2
    55d8:	cmp	r4, #0
    55da:	ble.w	4d1a <_svfprintf_r+0x562>
    55de:	cmp	r4, #16
    55e0:	ldr	r2, [sp, #112]	; 0x70
    55e2:	ldr	r7, [pc, #208]	; (56b4 <_svfprintf_r+0xefc>)
    55e4:	ble.n	54f0 <_svfprintf_r+0xd38>
    55e6:	movs	r5, #16
    55e8:	ldr	r6, [sp, #20]
    55ea:	ldr.w	r8, [sp, #12]
    55ee:	b.n	55fc <_svfprintf_r+0xe44>
    55f0:	add.w	r9, r9, #8
    55f4:	subs	r4, #16
    55f6:	cmp	r4, #16
    55f8:	ble.w	54f0 <_svfprintf_r+0xd38>
    55fc:	adds	r2, #1
    55fe:	adds	r3, #16
    5600:	cmp	r2, #7
    5602:	str	r3, [sp, #116]	; 0x74
    5604:	str	r2, [sp, #112]	; 0x70
    5606:	str.w	r7, [r9]
    560a:	str.w	r5, [r9, #4]
    560e:	ble.n	55f0 <_svfprintf_r+0xe38>
    5610:	add	r2, sp, #108	; 0x6c
    5612:	mov	r1, r8
    5614:	mov	r0, r6
    5616:	bl	5d28 <__ssprint_r>
    561a:	cmp	r0, #0
    561c:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5620:	ldr	r3, [sp, #116]	; 0x74
    5622:	ldr	r2, [sp, #112]	; 0x70
    5624:	add.w	r9, sp, #160	; 0xa0
    5628:	b.n	55f4 <_svfprintf_r+0xe3c>
    562a:	ldr	r1, [sp, #112]	; 0x70
    562c:	ldr	r4, [sp, #60]	; 0x3c
    562e:	ldr	r0, [sp, #64]	; 0x40
    5630:	str.w	r0, [r9]
    5634:	adds	r1, #1
    5636:	add	r3, r4
    5638:	cmp	r1, #7
    563a:	str	r3, [sp, #116]	; 0x74
    563c:	str.w	r4, [r9, #4]
    5640:	str	r1, [sp, #112]	; 0x70
    5642:	bgt.w	5a92 <_svfprintf_r+0x12da>
    5646:	add.w	r9, r9, #8
    564a:	b.n	55a0 <_svfprintf_r+0xde8>
    564c:	tst.w	fp, #1
    5650:	bne.w	522c <_svfprintf_r+0xa74>
    5654:	cmp	r2, #7
    5656:	ble.w	527c <_svfprintf_r+0xac4>
    565a:	b.n	54b6 <_svfprintf_r+0xcfe>
    565c:	add	r2, sp, #108	; 0x6c
    565e:	ldr	r1, [sp, #12]
    5660:	ldr	r0, [sp, #20]
    5662:	bl	5d28 <__ssprint_r>
    5666:	cmp	r0, #0
    5668:	bne.w	49a4 <_svfprintf_r+0x1ec>
    566c:	ldr	r3, [sp, #116]	; 0x74
    566e:	ldr	r2, [sp, #112]	; 0x70
    5670:	add.w	r9, sp, #160	; 0xa0
    5674:	b.n	5236 <_svfprintf_r+0xa7e>
    5676:	add	r2, sp, #108	; 0x6c
    5678:	ldr	r1, [sp, #12]
    567a:	ldr	r0, [sp, #20]
    567c:	bl	5d28 <__ssprint_r>
    5680:	cmp	r0, #0
    5682:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5686:	ldr	r3, [sp, #116]	; 0x74
    5688:	ldr	r2, [sp, #112]	; 0x70
    568a:	add.w	r9, sp, #160	; 0xa0
    568e:	b.n	5254 <_svfprintf_r+0xa9c>
    5690:	add	r2, sp, #108	; 0x6c
    5692:	ldr	r1, [sp, #12]
    5694:	ldr	r0, [sp, #20]
    5696:	bl	5d28 <__ssprint_r>
    569a:	cmp	r0, #0
    569c:	bne.w	49a4 <_svfprintf_r+0x1ec>
    56a0:	ldr	r3, [sp, #116]	; 0x74
    56a2:	add.w	r9, sp, #160	; 0xa0
    56a6:	b.w	4c80 <_svfprintf_r+0x4c8>
    56aa:	str	r7, [sp, #36]	; 0x24
    56ac:	movs	r7, #0
    56ae:	b.w	49fc <_svfprintf_r+0x244>
    56b2:	nop
    56b4:	.word	0x20000588
    56b8:	tst.w	fp, #16
    56bc:	bne.n	56d6 <_svfprintf_r+0xf1e>
    56be:	tst.w	fp, #64	; 0x40
    56c2:	beq.n	56d6 <_svfprintf_r+0xf1e>
    56c4:	ldr	r2, [sp, #36]	; 0x24
    56c6:	ldr	r3, [r2, #0]
    56c8:	adds	r2, #4
    56ca:	str	r2, [sp, #36]	; 0x24
    56cc:	ldrh.w	r2, [sp, #24]
    56d0:	strh	r2, [r3, #0]
    56d2:	b.w	4804 <_svfprintf_r+0x4c>
    56d6:	ldr	r2, [sp, #36]	; 0x24
    56d8:	ldr	r3, [r2, #0]
    56da:	adds	r2, #4
    56dc:	str	r2, [sp, #36]	; 0x24
    56de:	ldr	r2, [sp, #24]
    56e0:	str	r2, [r3, #0]
    56e2:	b.w	4804 <_svfprintf_r+0x4c>
    56e6:	vcmp.f64	d8, d8
    56ea:	vmrs	APSR_nzcv, fpscr
    56ee:	bvs.w	5c2e <_svfprintf_r+0x1476>
    56f2:	ldr	r3, [sp, #48]	; 0x30
    56f4:	cmp.w	r8, #4294967295
    56f8:	bic.w	r5, r3, #32
    56fc:	beq.w	5b4a <_svfprintf_r+0x1392>
    5700:	cmp	r5, #71	; 0x47
    5702:	beq.w	5952 <_svfprintf_r+0x119a>
    5706:	orr.w	r3, fp, #256	; 0x100
    570a:	str	r3, [sp, #40]	; 0x28
    570c:	vmov	r3, s17
    5710:	cmp	r3, #0
    5712:	blt.w	5b50 <_svfprintf_r+0x1398>
    5716:	vmov.f64	d10, d8
    571a:	movs	r7, #0
    571c:	ldr	r3, [sp, #48]	; 0x30
    571e:	cmp	r3, #102	; 0x66
    5720:	beq.w	5b28 <_svfprintf_r+0x1370>
    5724:	cmp	r3, #70	; 0x46
    5726:	beq.w	5902 <_svfprintf_r+0x114a>
    572a:	vmov.f64	d0, d10
    572e:	cmp	r5, #69	; 0x45
    5730:	ite	eq
    5732:	addeq.w	r4, r8, #1
    5736:	movne	r4, r8
    5738:	add	r2, sp, #100	; 0x64
    573a:	add	r3, sp, #88	; 0x58
    573c:	str	r2, [sp, #4]
    573e:	str	r3, [sp, #0]
    5740:	mov	r2, r4
    5742:	add	r3, sp, #84	; 0x54
    5744:	movs	r1, #2
    5746:	ldr	r0, [sp, #20]
    5748:	bl	3b30 <_dtoa_r>
    574c:	ldr	r3, [sp, #48]	; 0x30
    574e:	cmp	r3, #103	; 0x67
    5750:	mov	r6, r0
    5752:	bne.w	5b72 <_svfprintf_r+0x13ba>
    5756:	tst.w	fp, #1
    575a:	beq.w	5c2a <_svfprintf_r+0x1472>
    575e:	adds	r1, r6, r4
    5760:	vcmp.f64	d10, #0.0
    5764:	vmrs	APSR_nzcv, fpscr
    5768:	beq.w	5a76 <_svfprintf_r+0x12be>
    576c:	ldr	r3, [sp, #100]	; 0x64
    576e:	cmp	r1, r3
    5770:	bls.n	5780 <_svfprintf_r+0xfc8>
    5772:	movs	r0, #48	; 0x30
    5774:	adds	r2, r3, #1
    5776:	str	r2, [sp, #100]	; 0x64
    5778:	strb	r0, [r3, #0]
    577a:	ldr	r3, [sp, #100]	; 0x64
    577c:	cmp	r1, r3
    577e:	bhi.n	5774 <_svfprintf_r+0xfbc>
    5780:	subs	r3, r3, r6
    5782:	cmp	r5, #71	; 0x47
    5784:	str	r3, [sp, #52]	; 0x34
    5786:	beq.w	59c8 <_svfprintf_r+0x1210>
    578a:	ldr	r3, [sp, #48]	; 0x30
    578c:	cmp	r3, #101	; 0x65
    578e:	ble.w	5b90 <_svfprintf_r+0x13d8>
    5792:	ldr	r3, [sp, #48]	; 0x30
    5794:	cmp	r3, #102	; 0x66
    5796:	ldr	r3, [sp, #84]	; 0x54
    5798:	beq.w	5b94 <_svfprintf_r+0x13dc>
    579c:	str	r3, [sp, #56]	; 0x38
    579e:	ldr	r2, [sp, #56]	; 0x38
    57a0:	ldr	r1, [sp, #52]	; 0x34
    57a2:	cmp	r2, r1
    57a4:	blt.w	5b58 <_svfprintf_r+0x13a0>
    57a8:	tst.w	fp, #1
    57ac:	bne.w	5c18 <_svfprintf_r+0x1460>
    57b0:	bic.w	r3, r2, r2, asr #31
    57b4:	str	r2, [sp, #32]
    57b6:	movs	r2, #103	; 0x67
    57b8:	str	r2, [sp, #48]	; 0x30
    57ba:	cmp	r7, #0
    57bc:	bne.w	59ac <_svfprintf_r+0x11f4>
    57c0:	mov	r8, r7
    57c2:	str	r3, [sp, #16]
    57c4:	ldr.w	fp, [sp, #40]	; 0x28
    57c8:	ldrb.w	r7, [sp, #79]	; 0x4f
    57cc:	b.w	4b9c <_svfprintf_r+0x3e4>
    57d0:	bic.w	r7, r7, #7
    57d4:	add.w	r3, r7, #8
    57d8:	vldr	d8, [r7]
    57dc:	str	r3, [sp, #36]	; 0x24
    57de:	b.w	4b5e <_svfprintf_r+0x3a6>
    57e2:	mov	r6, r9
    57e4:	mov	r9, r1
    57e6:	adds	r2, #1
    57e8:	add	r3, r4
    57ea:	cmp	r2, #7
    57ec:	str	r3, [sp, #116]	; 0x74
    57ee:	str	r2, [sp, #112]	; 0x70
    57f0:	str.w	r7, [r9]
    57f4:	str.w	r4, [r9, #4]
    57f8:	bgt.w	5576 <_svfprintf_r+0xdbe>
    57fc:	add.w	r9, r9, #8
    5800:	b.n	558c <_svfprintf_r+0xdd4>
    5802:	movs	r7, #0
    5804:	cmp	r8, r7
    5806:	strb.w	r7, [sp, #79]	; 0x4f
    580a:	blt.w	50b6 <_svfprintf_r+0x8fe>
    580e:	bic.w	fp, fp, #128	; 0x80
    5812:	b.n	5052 <_svfprintf_r+0x89a>
    5814:	add	r2, sp, #108	; 0x6c
    5816:	ldr	r1, [sp, #12]
    5818:	ldr	r0, [sp, #20]
    581a:	bl	5d28 <__ssprint_r>
    581e:	cmp	r0, #0
    5820:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5824:	ldr	r3, [sp, #116]	; 0x74
    5826:	add.w	r9, sp, #160	; 0xa0
    582a:	b.n	50f4 <_svfprintf_r+0x93c>
    582c:	ldr	r7, [sp, #36]	; 0x24
    582e:	b.n	50a8 <_svfprintf_r+0x8f0>
    5830:	ldr	r2, [sp, #112]	; 0x70
    5832:	ldr	r1, [pc, #740]	; (5b18 <_svfprintf_r+0x1360>)
    5834:	str.w	r1, [r9]
    5838:	adds	r2, #1
    583a:	adds	r3, #1
    583c:	movs	r1, #1
    583e:	cmp	r2, #7
    5840:	str	r3, [sp, #116]	; 0x74
    5842:	str	r2, [sp, #112]	; 0x70
    5844:	str.w	r1, [r9, #4]
    5848:	bgt.n	5938 <_svfprintf_r+0x1180>
    584a:	add.w	r9, r9, #8
    584e:	cbnz	r4, 585c <_svfprintf_r+0x10a4>
    5850:	ldr	r2, [sp, #52]	; 0x34
    5852:	cbnz	r2, 585c <_svfprintf_r+0x10a4>
    5854:	tst.w	fp, #1
    5858:	beq.w	4d1a <_svfprintf_r+0x562>
    585c:	ldr	r2, [sp, #112]	; 0x70
    585e:	ldr	r0, [sp, #60]	; 0x3c
    5860:	ldr	r1, [sp, #64]	; 0x40
    5862:	str.w	r1, [r9]
    5866:	adds	r2, #1
    5868:	add	r3, r0
    586a:	cmp	r2, #7
    586c:	str	r3, [sp, #116]	; 0x74
    586e:	str.w	r0, [r9, #4]
    5872:	str	r2, [sp, #112]	; 0x70
    5874:	bgt.w	5be4 <_svfprintf_r+0x142c>
    5878:	add.w	r9, r9, #8
    587c:	negs	r4, r4
    587e:	cmp	r4, #0
    5880:	ble.w	5992 <_svfprintf_r+0x11da>
    5884:	cmp	r4, #16
    5886:	ldr	r7, [pc, #660]	; (5b1c <_svfprintf_r+0x1364>)
    5888:	ble.w	5ab0 <_svfprintf_r+0x12f8>
    588c:	mov	r1, r9
    588e:	movs	r5, #16
    5890:	mov	r9, r6
    5892:	ldr.w	r8, [sp, #20]
    5896:	ldr	r6, [sp, #12]
    5898:	b.n	58a4 <_svfprintf_r+0x10ec>
    589a:	adds	r1, #8
    589c:	subs	r4, #16
    589e:	cmp	r4, #16
    58a0:	ble.w	5aac <_svfprintf_r+0x12f4>
    58a4:	adds	r2, #1
    58a6:	adds	r3, #16
    58a8:	cmp	r2, #7
    58aa:	str	r3, [sp, #116]	; 0x74
    58ac:	str	r2, [sp, #112]	; 0x70
    58ae:	str	r7, [r1, #0]
    58b0:	str	r5, [r1, #4]
    58b2:	ble.n	589a <_svfprintf_r+0x10e2>
    58b4:	add	r2, sp, #108	; 0x6c
    58b6:	mov	r1, r6
    58b8:	mov	r0, r8
    58ba:	bl	5d28 <__ssprint_r>
    58be:	cmp	r0, #0
    58c0:	bne.w	49a4 <_svfprintf_r+0x1ec>
    58c4:	ldr	r3, [sp, #116]	; 0x74
    58c6:	ldr	r2, [sp, #112]	; 0x70
    58c8:	add	r1, sp, #160	; 0xa0
    58ca:	b.n	589c <_svfprintf_r+0x10e4>
    58cc:	add	r2, sp, #108	; 0x6c
    58ce:	ldr	r1, [sp, #12]
    58d0:	ldr	r0, [sp, #20]
    58d2:	bl	5d28 <__ssprint_r>
    58d6:	cmp	r0, #0
    58d8:	bne.w	49a4 <_svfprintf_r+0x1ec>
    58dc:	ldr	r3, [sp, #116]	; 0x74
    58de:	add.w	r9, sp, #160	; 0xa0
    58e2:	b.n	5124 <_svfprintf_r+0x96c>
    58e4:	movs	r1, #64	; 0x40
    58e6:	ldr	r0, [sp, #20]
    58e8:	bl	2288 <_malloc_r>
    58ec:	ldr	r2, [sp, #12]
    58ee:	str	r0, [r2, #0]
    58f0:	str	r0, [r2, #16]
    58f2:	cmp	r0, #0
    58f4:	beq.w	5cd2 <_svfprintf_r+0x151a>
    58f8:	ldr	r2, [sp, #12]
    58fa:	movs	r3, #64	; 0x40
    58fc:	str	r3, [r2, #20]
    58fe:	b.w	47ea <_svfprintf_r+0x32>
    5902:	add	r2, sp, #100	; 0x64
    5904:	add	r3, sp, #88	; 0x58
    5906:	str	r2, [sp, #4]
    5908:	str	r3, [sp, #0]
    590a:	mov	r2, r8
    590c:	add	r3, sp, #84	; 0x54
    590e:	movs	r1, #3
    5910:	vmov.f64	d0, d10
    5914:	ldr	r0, [sp, #20]
    5916:	bl	3b30 <_dtoa_r>
    591a:	mov	r4, r8
    591c:	mov	r6, r0
    591e:	ldr	r3, [sp, #48]	; 0x30
    5920:	cmp	r3, #70	; 0x46
    5922:	add.w	r1, r6, r4
    5926:	bne.w	5760 <_svfprintf_r+0xfa8>
    592a:	ldrb	r3, [r6, #0]
    592c:	cmp	r3, #48	; 0x30
    592e:	beq.w	5c4c <_svfprintf_r+0x1494>
    5932:	ldr	r4, [sp, #84]	; 0x54
    5934:	add	r1, r4
    5936:	b.n	5760 <_svfprintf_r+0xfa8>
    5938:	add	r2, sp, #108	; 0x6c
    593a:	ldr	r1, [sp, #12]
    593c:	ldr	r0, [sp, #20]
    593e:	bl	5d28 <__ssprint_r>
    5942:	cmp	r0, #0
    5944:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5948:	ldr	r4, [sp, #84]	; 0x54
    594a:	ldr	r3, [sp, #116]	; 0x74
    594c:	add.w	r9, sp, #160	; 0xa0
    5950:	b.n	584e <_svfprintf_r+0x1096>
    5952:	cmp.w	r8, #0
    5956:	it	eq
    5958:	moveq.w	r8, #1
    595c:	b.n	5706 <_svfprintf_r+0xf4e>
    595e:	str	r3, [sp, #36]	; 0x24
    5960:	b.n	56ac <_svfprintf_r+0xef4>
    5962:	str	r3, [sp, #36]	; 0x24
    5964:	mov	r7, r2
    5966:	b.w	4e60 <_svfprintf_r+0x6a8>
    596a:	mov	r0, r6
    596c:	bl	2dc0 <strlen>
    5970:	mov	r8, r4
    5972:	mov	r3, r0
    5974:	str	r0, [sp, #32]
    5976:	b.w	503c <_svfprintf_r+0x884>
    597a:	add	r2, sp, #108	; 0x6c
    597c:	ldr	r1, [sp, #12]
    597e:	ldr	r0, [sp, #20]
    5980:	bl	5d28 <__ssprint_r>
    5984:	cmp	r0, #0
    5986:	bne.w	49a4 <_svfprintf_r+0x1ec>
    598a:	ldr	r3, [sp, #116]	; 0x74
    598c:	ldr	r2, [sp, #112]	; 0x70
    598e:	add.w	r9, sp, #160	; 0xa0
    5992:	ldr	r0, [sp, #52]	; 0x34
    5994:	str.w	r6, [r9]
    5998:	adds	r2, #1
    599a:	add	r3, r0
    599c:	cmp	r2, #7
    599e:	str	r3, [sp, #116]	; 0x74
    59a0:	str	r2, [sp, #112]	; 0x70
    59a2:	str.w	r0, [r9, #4]
    59a6:	ble.w	4d16 <_svfprintf_r+0x55e>
    59aa:	b.n	529a <_svfprintf_r+0xae2>
    59ac:	movs	r7, #45	; 0x2d
    59ae:	str	r3, [sp, #16]
    59b0:	ldr.w	fp, [sp, #40]	; 0x28
    59b4:	strb.w	r7, [sp, #79]	; 0x4f
    59b8:	mov.w	r8, #0
    59bc:	b.w	4b9e <_svfprintf_r+0x3e6>
    59c0:	str	r7, [sp, #36]	; 0x24
    59c2:	mov	r7, r3
    59c4:	b.w	4e60 <_svfprintf_r+0x6a8>
    59c8:	ldr	r3, [sp, #84]	; 0x54
    59ca:	adds	r2, r3, #3
    59cc:	blt.n	59d4 <_svfprintf_r+0x121c>
    59ce:	cmp	r8, r3
    59d0:	bge.w	579c <_svfprintf_r+0xfe4>
    59d4:	ldr	r2, [sp, #48]	; 0x30
    59d6:	subs	r2, #2
    59d8:	str	r2, [sp, #48]	; 0x30
    59da:	subs	r3, #1
    59dc:	cmp	r3, #0
    59de:	ldrb.w	r2, [sp, #48]	; 0x30
    59e2:	str	r3, [sp, #84]	; 0x54
    59e4:	it	lt
    59e6:	neglt	r3, r3
    59e8:	strb.w	r2, [sp, #92]	; 0x5c
    59ec:	ite	lt
    59ee:	movlt	r2, #45	; 0x2d
    59f0:	movge	r2, #43	; 0x2b
    59f2:	cmp	r3, #9
    59f4:	strb.w	r2, [sp, #93]	; 0x5d
    59f8:	ble.w	5c08 <_svfprintf_r+0x1450>
    59fc:	add.w	r0, sp, #107	; 0x6b
    5a00:	mov	r4, r0
    5a02:	ldr	r2, [pc, #284]	; (5b20 <_svfprintf_r+0x1368>)
    5a04:	smull	r2, r1, r2, r3
    5a08:	asrs	r2, r3, #31
    5a0a:	rsb	r2, r2, r1, asr #2
    5a0e:	add.w	r1, r2, r2, lsl #2
    5a12:	sub.w	r3, r3, r1, lsl #1
    5a16:	add.w	r1, r3, #48	; 0x30
    5a1a:	cmp	r2, #9
    5a1c:	mov	r3, r2
    5a1e:	strb.w	r1, [r4, #-1]!
    5a22:	bgt.n	5a02 <_svfprintf_r+0x124a>
    5a24:	mov	r1, r4
    5a26:	adds	r3, #48	; 0x30
    5a28:	uxtb	r2, r3
    5a2a:	strb.w	r2, [r1, #-1]!
    5a2e:	cmp	r0, r1
    5a30:	bls.w	5cf8 <_svfprintf_r+0x1540>
    5a34:	add.w	r1, sp, #94	; 0x5e
    5a38:	mov	r3, r4
    5a3a:	b.n	5a40 <_svfprintf_r+0x1288>
    5a3c:	ldrb.w	r2, [r3], #1
    5a40:	strb.w	r2, [r1], #1
    5a44:	cmp	r0, r3
    5a46:	bne.n	5a3c <_svfprintf_r+0x1284>
    5a48:	adds	r3, r0, #1
    5a4a:	subs	r3, r3, r4
    5a4c:	add.w	r2, sp, #94	; 0x5e
    5a50:	add	r3, r2
    5a52:	add	r2, sp, #92	; 0x5c
    5a54:	subs	r3, r3, r2
    5a56:	ldr	r2, [sp, #52]	; 0x34
    5a58:	str	r3, [sp, #68]	; 0x44
    5a5a:	cmp	r2, #1
    5a5c:	add	r3, r2
    5a5e:	str	r3, [sp, #32]
    5a60:	ble.w	5c62 <_svfprintf_r+0x14aa>
    5a64:	ldr	r3, [sp, #32]
    5a66:	ldr	r2, [sp, #60]	; 0x3c
    5a68:	add	r3, r2
    5a6a:	movs	r2, #0
    5a6c:	str	r3, [sp, #32]
    5a6e:	str	r2, [sp, #56]	; 0x38
    5a70:	bic.w	r3, r3, r3, asr #31
    5a74:	b.n	57ba <_svfprintf_r+0x1002>
    5a76:	mov	r3, r1
    5a78:	b.n	5780 <_svfprintf_r+0xfc8>
    5a7a:	add	r2, sp, #108	; 0x6c
    5a7c:	ldr	r1, [sp, #12]
    5a7e:	ldr	r0, [sp, #20]
    5a80:	bl	5d28 <__ssprint_r>
    5a84:	cmp	r0, #0
    5a86:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5a8a:	ldr	r3, [sp, #116]	; 0x74
    5a8c:	add.w	r9, sp, #160	; 0xa0
    5a90:	b.n	539a <_svfprintf_r+0xbe2>
    5a92:	add	r2, sp, #108	; 0x6c
    5a94:	ldr	r1, [sp, #12]
    5a96:	ldr	r0, [sp, #20]
    5a98:	bl	5d28 <__ssprint_r>
    5a9c:	cmp	r0, #0
    5a9e:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5aa2:	ldr	r2, [sp, #84]	; 0x54
    5aa4:	ldr	r3, [sp, #116]	; 0x74
    5aa6:	add.w	r9, sp, #160	; 0xa0
    5aaa:	b.n	55a0 <_svfprintf_r+0xde8>
    5aac:	mov	r6, r9
    5aae:	mov	r9, r1
    5ab0:	adds	r2, #1
    5ab2:	add	r3, r4
    5ab4:	cmp	r2, #7
    5ab6:	str	r3, [sp, #116]	; 0x74
    5ab8:	str	r2, [sp, #112]	; 0x70
    5aba:	str.w	r7, [r9]
    5abe:	str.w	r4, [r9, #4]
    5ac2:	bgt.w	597a <_svfprintf_r+0x11c2>
    5ac6:	add.w	r9, r9, #8
    5aca:	b.n	5992 <_svfprintf_r+0x11da>
    5acc:	add	r2, sp, #108	; 0x6c
    5ace:	ldr	r1, [sp, #12]
    5ad0:	ldr	r0, [sp, #20]
    5ad2:	bl	5d28 <__ssprint_r>
    5ad6:	cmp	r0, #0
    5ad8:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5adc:	ldr	r2, [sp, #84]	; 0x54
    5ade:	ldr	r1, [sp, #52]	; 0x34
    5ae0:	ldr	r3, [sp, #116]	; 0x74
    5ae2:	subs	r2, r1, r2
    5ae4:	add.w	r9, sp, #160	; 0xa0
    5ae8:	b.n	55d0 <_svfprintf_r+0xe18>
    5aea:	cmp	r5, #6
    5aec:	mov	r3, r5
    5aee:	it	cs
    5af0:	movcs	r3, #6
    5af2:	str	r3, [sp, #32]
    5af4:	bic.w	r3, r3, r3, asr #31
    5af8:	mov	r8, r6
    5afa:	str	r7, [sp, #36]	; 0x24
    5afc:	str	r6, [sp, #56]	; 0x38
    5afe:	mov	r7, r6
    5b00:	str	r3, [sp, #16]
    5b02:	ldr	r6, [pc, #32]	; (5b24 <_svfprintf_r+0x136c>)
    5b04:	b.w	4b9c <_svfprintf_r+0x3e4>
    5b08:	mov	fp, r3
    5b0a:	b.w	4ee2 <_svfprintf_r+0x72a>
    5b0e:	movs	r7, #45	; 0x2d
    5b10:	strb.w	r7, [sp, #79]	; 0x4f
    5b14:	b.w	4b7e <_svfprintf_r+0x3c6>
    5b18:	.word	0x20000584
    5b1c:	.word	0x20000588
    5b20:	.word	0x66666667
    5b24:	.word	0x200005d0
    5b28:	add	r2, sp, #100	; 0x64
    5b2a:	add	r3, sp, #88	; 0x58
    5b2c:	str	r2, [sp, #4]
    5b2e:	str	r3, [sp, #0]
    5b30:	movs	r1, #3
    5b32:	add	r3, sp, #84	; 0x54
    5b34:	mov	r2, r8
    5b36:	vmov.f64	d0, d10
    5b3a:	ldr	r0, [sp, #20]
    5b3c:	bl	3b30 <_dtoa_r>
    5b40:	mov	r4, r8
    5b42:	mov	r6, r0
    5b44:	add.w	r1, r0, r8
    5b48:	b.n	592a <_svfprintf_r+0x1172>
    5b4a:	mov.w	r8, #6
    5b4e:	b.n	5706 <_svfprintf_r+0xf4e>
    5b50:	vneg.f64	d10, d8
    5b54:	movs	r7, #45	; 0x2d
    5b56:	b.n	571c <_svfprintf_r+0xf64>
    5b58:	ldr	r2, [sp, #60]	; 0x3c
    5b5a:	ldr	r3, [sp, #52]	; 0x34
    5b5c:	add	r3, r2
    5b5e:	ldr	r2, [sp, #56]	; 0x38
    5b60:	str	r3, [sp, #32]
    5b62:	cmp	r2, #0
    5b64:	ble.w	5c74 <_svfprintf_r+0x14bc>
    5b68:	movs	r2, #103	; 0x67
    5b6a:	bic.w	r3, r3, r3, asr #31
    5b6e:	str	r2, [sp, #48]	; 0x30
    5b70:	b.n	57ba <_svfprintf_r+0x1002>
    5b72:	ldr	r3, [sp, #48]	; 0x30
    5b74:	cmp	r3, #71	; 0x47
    5b76:	bne.w	575e <_svfprintf_r+0xfa6>
    5b7a:	tst.w	fp, #1
    5b7e:	bne.w	591e <_svfprintf_r+0x1166>
    5b82:	ldr	r3, [sp, #100]	; 0x64
    5b84:	cmp	r5, #71	; 0x47
    5b86:	sub.w	r3, r3, r6
    5b8a:	str	r3, [sp, #52]	; 0x34
    5b8c:	beq.w	59c8 <_svfprintf_r+0x1210>
    5b90:	ldr	r3, [sp, #84]	; 0x54
    5b92:	b.n	59da <_svfprintf_r+0x1222>
    5b94:	cmp	r3, #0
    5b96:	mov	r2, r3
    5b98:	str	r3, [sp, #56]	; 0x38
    5b9a:	ble.n	5c84 <_svfprintf_r+0x14cc>
    5b9c:	cmp.w	r8, #0
    5ba0:	bne.n	5c3a <_svfprintf_r+0x1482>
    5ba2:	tst.w	fp, #1
    5ba6:	bne.n	5c3a <_svfprintf_r+0x1482>
    5ba8:	bic.w	r3, r3, r3, asr #31
    5bac:	str	r2, [sp, #32]
    5bae:	b.n	57ba <_svfprintf_r+0x1002>
    5bb0:	tst.w	fp, #1
    5bb4:	mov	r7, r8
    5bb6:	beq.n	5bc4 <_svfprintf_r+0x140c>
    5bb8:	add	r6, sp, #224	; 0xe0
    5bba:	movs	r3, #48	; 0x30
    5bbc:	strb.w	r3, [r6, #-65]!
    5bc0:	b.w	4e70 <_svfprintf_r+0x6b8>
    5bc4:	str.w	r8, [sp, #32]
    5bc8:	add	r6, sp, #160	; 0xa0
    5bca:	b.w	4e76 <_svfprintf_r+0x6be>
    5bce:	bic.w	r3, r5, r5, asr #31
    5bd2:	str	r7, [sp, #36]	; 0x24
    5bd4:	str	r3, [sp, #16]
    5bd6:	str	r5, [sp, #32]
    5bd8:	mov	r8, r0
    5bda:	str	r0, [sp, #56]	; 0x38
    5bdc:	ldrb.w	r7, [sp, #79]	; 0x4f
    5be0:	b.w	4b9c <_svfprintf_r+0x3e4>
    5be4:	add	r2, sp, #108	; 0x6c
    5be6:	ldr	r1, [sp, #12]
    5be8:	ldr	r0, [sp, #20]
    5bea:	bl	5d28 <__ssprint_r>
    5bee:	cmp	r0, #0
    5bf0:	bne.w	49a4 <_svfprintf_r+0x1ec>
    5bf4:	ldr	r4, [sp, #84]	; 0x54
    5bf6:	ldr	r3, [sp, #116]	; 0x74
    5bf8:	ldr	r2, [sp, #112]	; 0x70
    5bfa:	add.w	r9, sp, #160	; 0xa0
    5bfe:	b.n	587c <_svfprintf_r+0x10c4>
    5c00:	mov	sl, r4
    5c02:	movs	r5, #0
    5c04:	b.w	486e <_svfprintf_r+0xb6>
    5c08:	adds	r3, #48	; 0x30
    5c0a:	movs	r2, #48	; 0x30
    5c0c:	strb.w	r3, [sp, #95]	; 0x5f
    5c10:	strb.w	r2, [sp, #94]	; 0x5e
    5c14:	add	r3, sp, #96	; 0x60
    5c16:	b.n	5a52 <_svfprintf_r+0x129a>
    5c18:	ldr	r2, [sp, #60]	; 0x3c
    5c1a:	ldr	r3, [sp, #56]	; 0x38
    5c1c:	add	r3, r2
    5c1e:	movs	r2, #103	; 0x67
    5c20:	str	r3, [sp, #32]
    5c22:	str	r2, [sp, #48]	; 0x30
    5c24:	bic.w	r3, r3, r3, asr #31
    5c28:	b.n	57ba <_svfprintf_r+0x1002>
    5c2a:	ldr	r3, [sp, #100]	; 0x64
    5c2c:	b.n	5780 <_svfprintf_r+0xfc8>
    5c2e:	ldr	r6, [pc, #240]	; (5d20 <_svfprintf_r+0x1568>)
    5c30:	ldr	r3, [pc, #240]	; (5d24 <_svfprintf_r+0x156c>)
    5c32:	ldrb.w	r7, [sp, #79]	; 0x4f
    5c36:	b.w	4b82 <_svfprintf_r+0x3ca>
    5c3a:	ldr	r3, [sp, #56]	; 0x38
    5c3c:	ldr	r2, [sp, #60]	; 0x3c
    5c3e:	adds	r5, r3, r2
    5c40:	add.w	r3, r5, r8
    5c44:	str	r3, [sp, #32]
    5c46:	bic.w	r3, r3, r3, asr #31
    5c4a:	b.n	57ba <_svfprintf_r+0x1002>
    5c4c:	vcmp.f64	d10, #0.0
    5c50:	vmrs	APSR_nzcv, fpscr
    5c54:	beq.w	5932 <_svfprintf_r+0x117a>
    5c58:	rsb	r4, r4, #1
    5c5c:	str	r4, [sp, #84]	; 0x54
    5c5e:	add	r1, r4
    5c60:	b.n	5760 <_svfprintf_r+0xfa8>
    5c62:	ands.w	r3, fp, #1
    5c66:	bne.w	5a64 <_svfprintf_r+0x12ac>
    5c6a:	str	r3, [sp, #56]	; 0x38
    5c6c:	ldr	r3, [sp, #32]
    5c6e:	bic.w	r3, r3, r3, asr #31
    5c72:	b.n	57ba <_svfprintf_r+0x1002>
    5c74:	ldr	r3, [sp, #56]	; 0x38
    5c76:	ldr	r2, [sp, #32]
    5c78:	rsb	r3, r3, #1
    5c7c:	add	r2, r3
    5c7e:	mov	r3, r2
    5c80:	str	r2, [sp, #32]
    5c82:	b.n	5b68 <_svfprintf_r+0x13b0>
    5c84:	cmp.w	r8, #0
    5c88:	bne.n	5c90 <_svfprintf_r+0x14d8>
    5c8a:	tst.w	fp, #1
    5c8e:	beq.n	5ca0 <_svfprintf_r+0x14e8>
    5c90:	ldr	r3, [sp, #60]	; 0x3c
    5c92:	adds	r5, r3, #1
    5c94:	add.w	r3, r5, r8
    5c98:	str	r3, [sp, #32]
    5c9a:	bic.w	r3, r3, r3, asr #31
    5c9e:	b.n	57ba <_svfprintf_r+0x1002>
    5ca0:	movs	r3, #1
    5ca2:	str	r3, [sp, #32]
    5ca4:	b.n	57ba <_svfprintf_r+0x1002>
    5ca6:	ldr	r0, [sp, #36]	; 0x24
    5ca8:	ldrb.w	r3, [sl, #1]
    5cac:	ldr	r5, [r0, #0]
    5cae:	adds	r0, #4
    5cb0:	cmp	r5, #0
    5cb2:	str	r0, [sp, #36]	; 0x24
    5cb4:	mov	sl, r4
    5cb6:	bge.w	486a <_svfprintf_r+0xb2>
    5cba:	mov.w	r5, #4294967295
    5cbe:	b.w	486a <_svfprintf_r+0xb2>
    5cc2:	strb.w	r1, [sp, #79]	; 0x4f
    5cc6:	b.w	4fe4 <_svfprintf_r+0x82c>
    5cca:	strb.w	r1, [sp, #79]	; 0x4f
    5cce:	b.w	5070 <_svfprintf_r+0x8b8>
    5cd2:	ldr	r2, [sp, #20]
    5cd4:	movs	r3, #12
    5cd6:	str	r3, [r2, #0]
    5cd8:	mov.w	r0, #4294967295
    5cdc:	b.w	49b6 <_svfprintf_r+0x1fe>
    5ce0:	strb.w	r1, [sp, #79]	; 0x4f
    5ce4:	b.w	4e90 <_svfprintf_r+0x6d8>
    5ce8:	strb.w	r1, [sp, #79]	; 0x4f
    5cec:	b.w	4e36 <_svfprintf_r+0x67e>
    5cf0:	strb.w	r1, [sp, #79]	; 0x4f
    5cf4:	b.w	4f9c <_svfprintf_r+0x7e4>
    5cf8:	add.w	r3, sp, #94	; 0x5e
    5cfc:	b.n	5a52 <_svfprintf_r+0x129a>
    5cfe:	strb.w	r1, [sp, #79]	; 0x4f
    5d02:	b.w	49ca <_svfprintf_r+0x212>
    5d06:	strb.w	r1, [sp, #79]	; 0x4f
    5d0a:	b.w	4dd2 <_svfprintf_r+0x61a>
    5d0e:	strb.w	r1, [sp, #79]	; 0x4f
    5d12:	b.w	4b42 <_svfprintf_r+0x38a>
    5d16:	strb.w	r1, [sp, #79]	; 0x4f
    5d1a:	b.w	4abe <_svfprintf_r+0x306>
    5d1e:	nop
    5d20:	.word	0x200005a4
    5d24:	.word	0x200005a0

00005d28 <__ssprint_r>:
    5d28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d2c:	ldr	r3, [r2, #8]
    5d2e:	sub	sp, #12
    5d30:	mov	r8, r2
    5d32:	cmp	r3, #0
    5d34:	beq.n	5e1c <__ssprint_r+0xf4>
    5d36:	mov	fp, r0
    5d38:	mov.w	r9, #0
    5d3c:	ldr	r6, [r2, #0]
    5d3e:	ldr	r0, [r1, #0]
    5d40:	ldr	r3, [r1, #8]
    5d42:	mov	r5, r1
    5d44:	mov	r4, r9
    5d46:	cmp	r4, #0
    5d48:	beq.n	5dd6 <__ssprint_r+0xae>
    5d4a:	cmp	r4, r3
    5d4c:	mov	r7, r3
    5d4e:	mov	sl, r3
    5d50:	bcc.n	5de0 <__ssprint_r+0xb8>
    5d52:	ldrh	r3, [r5, #12]
    5d54:	tst.w	r3, #1152	; 0x480
    5d58:	beq.n	5db6 <__ssprint_r+0x8e>
    5d5a:	ldr	r7, [r5, #20]
    5d5c:	ldr	r1, [r5, #16]
    5d5e:	add.w	r7, r7, r7, lsl #1
    5d62:	rsb	sl, r1, r0
    5d66:	add.w	r7, r7, r7, lsr #31
    5d6a:	adds	r0, r4, #1
    5d6c:	asrs	r7, r7, #1
    5d6e:	add	r0, sl
    5d70:	cmp	r0, r7
    5d72:	mov	r2, r7
    5d74:	itt	hi
    5d76:	movhi	r7, r0
    5d78:	movhi	r2, r7
    5d7a:	lsls	r3, r3, #21
    5d7c:	bpl.n	5de6 <__ssprint_r+0xbe>
    5d7e:	mov	r1, r2
    5d80:	mov	r0, fp
    5d82:	bl	2288 <_malloc_r>
    5d86:	cmp	r0, #0
    5d88:	beq.n	5dfa <__ssprint_r+0xd2>
    5d8a:	mov	r2, sl
    5d8c:	ldr	r1, [r5, #16]
    5d8e:	str	r0, [sp, #4]
    5d90:	bl	2080 <memcpy>
    5d94:	ldrh	r2, [r5, #12]
    5d96:	ldr	r3, [sp, #4]
    5d98:	bic.w	r2, r2, #1152	; 0x480
    5d9c:	orr.w	r2, r2, #128	; 0x80
    5da0:	strh	r2, [r5, #12]
    5da2:	rsb	r2, sl, r7
    5da6:	add.w	r0, r3, sl
    5daa:	str	r7, [r5, #20]
    5dac:	str	r3, [r5, #16]
    5dae:	str	r0, [r5, #0]
    5db0:	str	r2, [r5, #8]
    5db2:	mov	r7, r4
    5db4:	mov	sl, r4
    5db6:	mov	r2, sl
    5db8:	mov	r1, r9
    5dba:	bl	2824 <memmove>
    5dbe:	ldr.w	r2, [r8, #8]
    5dc2:	ldr	r3, [r5, #8]
    5dc4:	ldr	r0, [r5, #0]
    5dc6:	subs	r3, r3, r7
    5dc8:	add	r0, sl
    5dca:	subs	r4, r2, r4
    5dcc:	str	r3, [r5, #8]
    5dce:	str	r0, [r5, #0]
    5dd0:	str.w	r4, [r8, #8]
    5dd4:	cbz	r4, 5e1c <__ssprint_r+0xf4>
    5dd6:	ldr.w	r9, [r6]
    5dda:	ldr	r4, [r6, #4]
    5ddc:	adds	r6, #8
    5dde:	b.n	5d46 <__ssprint_r+0x1e>
    5de0:	mov	r7, r4
    5de2:	mov	sl, r4
    5de4:	b.n	5db6 <__ssprint_r+0x8e>
    5de6:	mov	r0, fp
    5de8:	bl	2990 <_realloc_r>
    5dec:	mov	r3, r0
    5dee:	cmp	r0, #0
    5df0:	bne.n	5da2 <__ssprint_r+0x7a>
    5df2:	ldr	r1, [r5, #16]
    5df4:	mov	r0, fp
    5df6:	bl	3088 <_free_r>
    5dfa:	movs	r3, #12
    5dfc:	str.w	r3, [fp]
    5e00:	ldrh	r3, [r5, #12]
    5e02:	movs	r2, #0
    5e04:	orr.w	r3, r3, #64	; 0x40
    5e08:	mov.w	r0, #4294967295
    5e0c:	strh	r3, [r5, #12]
    5e0e:	str.w	r2, [r8, #8]
    5e12:	str.w	r2, [r8, #4]
    5e16:	add	sp, #12
    5e18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e1c:	movs	r0, #0
    5e1e:	str.w	r0, [r8, #4]
    5e22:	add	sp, #12
    5e24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005e28 <__aeabi_uldivmod>:
    5e28:	cbnz	r3, 5e40 <__aeabi_uldivmod+0x18>
    5e2a:	cbnz	r2, 5e40 <__aeabi_uldivmod+0x18>
    5e2c:	cmp	r1, #0
    5e2e:	it	eq
    5e30:	cmpeq	r0, #0
    5e32:	itt	ne
    5e34:	movne.w	r1, #4294967295
    5e38:	movne.w	r0, #4294967295
    5e3c:	b.w	613c <__aeabi_idiv0>
    5e40:	sub.w	ip, sp, #8
    5e44:	strd	ip, lr, [sp, #-16]!
    5e48:	bl	5e58 <__udivmoddi4>
    5e4c:	ldr.w	lr, [sp, #4]
    5e50:	ldrd	r2, r3, [sp, #8]
    5e54:	add	sp, #16
    5e56:	bx	lr

00005e58 <__udivmoddi4>:
    5e58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e5c:	mov	ip, r1
    5e5e:	mov	r6, r1
    5e60:	mov	r4, r0
    5e62:	ldr	r5, [sp, #32]
    5e64:	cmp	r3, #0
    5e66:	bne.n	5f0a <__udivmoddi4+0xb2>
    5e68:	cmp	r2, r1
    5e6a:	mov	r7, r2
    5e6c:	bls.n	5f48 <__udivmoddi4+0xf0>
    5e6e:	clz	lr, r2
    5e72:	cmp.w	lr, #0
    5e76:	beq.n	5e90 <__udivmoddi4+0x38>
    5e78:	rsb	r4, lr, #32
    5e7c:	lsr.w	r4, r0, r4
    5e80:	lsl.w	r6, r1, lr
    5e84:	orr.w	ip, r4, r6
    5e88:	lsl.w	r7, r2, lr
    5e8c:	lsl.w	r4, r0, lr
    5e90:	mov.w	r9, r7, lsr #16
    5e94:	lsrs	r2, r4, #16
    5e96:	udiv	r0, ip, r9
    5e9a:	uxth.w	r8, r7
    5e9e:	mls	r6, r9, r0, ip
    5ea2:	orr.w	r6, r2, r6, lsl #16
    5ea6:	mul.w	r3, r0, r8
    5eaa:	cmp	r3, r6
    5eac:	bls.n	5ec2 <__udivmoddi4+0x6a>
    5eae:	adds	r6, r6, r7
    5eb0:	add.w	r2, r0, #4294967295
    5eb4:	bcs.w	60fc <__udivmoddi4+0x2a4>
    5eb8:	cmp	r3, r6
    5eba:	bls.w	60fc <__udivmoddi4+0x2a4>
    5ebe:	subs	r0, #2
    5ec0:	add	r6, r7
    5ec2:	subs	r6, r6, r3
    5ec4:	uxth	r2, r4
    5ec6:	udiv	r3, r6, r9
    5eca:	mls	r6, r9, r3, r6
    5ece:	orr.w	r4, r2, r6, lsl #16
    5ed2:	mul.w	r8, r3, r8
    5ed6:	cmp	r8, r4
    5ed8:	bls.n	5eee <__udivmoddi4+0x96>
    5eda:	adds	r4, r4, r7
    5edc:	add.w	r2, r3, #4294967295
    5ee0:	bcs.w	60f8 <__udivmoddi4+0x2a0>
    5ee4:	cmp	r8, r4
    5ee6:	bls.w	60f8 <__udivmoddi4+0x2a0>
    5eea:	subs	r3, #2
    5eec:	add	r4, r7
    5eee:	rsb	r4, r8, r4
    5ef2:	orr.w	r0, r3, r0, lsl #16
    5ef6:	movs	r1, #0
    5ef8:	cmp	r5, #0
    5efa:	beq.n	5fc2 <__udivmoddi4+0x16a>
    5efc:	lsr.w	r4, r4, lr
    5f00:	movs	r3, #0
    5f02:	str	r4, [r5, #0]
    5f04:	str	r3, [r5, #4]
    5f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f0a:	cmp	r3, r1
    5f0c:	bls.n	5f1e <__udivmoddi4+0xc6>
    5f0e:	cmp	r5, #0
    5f10:	beq.n	5fbe <__udivmoddi4+0x166>
    5f12:	movs	r1, #0
    5f14:	stmia.w	r5, {r0, r6}
    5f18:	mov	r0, r1
    5f1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f1e:	clz	r1, r3
    5f22:	cmp	r1, #0
    5f24:	bne.w	6048 <__udivmoddi4+0x1f0>
    5f28:	cmp	r3, r6
    5f2a:	bcc.n	5f32 <__udivmoddi4+0xda>
    5f2c:	cmp	r2, r0
    5f2e:	bhi.w	6122 <__udivmoddi4+0x2ca>
    5f32:	subs	r4, r0, r2
    5f34:	sbc.w	r6, r6, r3
    5f38:	movs	r0, #1
    5f3a:	mov	ip, r6
    5f3c:	cmp	r5, #0
    5f3e:	beq.n	5fc2 <__udivmoddi4+0x16a>
    5f40:	stmia.w	r5, {r4, ip}
    5f44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f48:	cbnz	r2, 5f50 <__udivmoddi4+0xf8>
    5f4a:	movs	r7, #1
    5f4c:	udiv	r7, r7, r2
    5f50:	clz	lr, r7
    5f54:	cmp.w	lr, #0
    5f58:	bne.n	5fc6 <__udivmoddi4+0x16e>
    5f5a:	subs	r3, r6, r7
    5f5c:	mov.w	r8, r7, lsr #16
    5f60:	uxth.w	ip, r7
    5f64:	movs	r1, #1
    5f66:	udiv	r0, r3, r8
    5f6a:	lsrs	r2, r4, #16
    5f6c:	mls	r6, r8, r0, r3
    5f70:	orr.w	r6, r2, r6, lsl #16
    5f74:	mul.w	r3, ip, r0
    5f78:	cmp	r3, r6
    5f7a:	bls.n	5f8c <__udivmoddi4+0x134>
    5f7c:	adds	r6, r6, r7
    5f7e:	add.w	r2, r0, #4294967295
    5f82:	bcs.n	5f8a <__udivmoddi4+0x132>
    5f84:	cmp	r3, r6
    5f86:	bhi.w	6126 <__udivmoddi4+0x2ce>
    5f8a:	mov	r0, r2
    5f8c:	subs	r6, r6, r3
    5f8e:	uxth	r2, r4
    5f90:	udiv	r3, r6, r8
    5f94:	mls	r6, r8, r3, r6
    5f98:	orr.w	r4, r2, r6, lsl #16
    5f9c:	mul.w	ip, ip, r3
    5fa0:	cmp	ip, r4
    5fa2:	bls.n	5fb4 <__udivmoddi4+0x15c>
    5fa4:	adds	r4, r4, r7
    5fa6:	add.w	r2, r3, #4294967295
    5faa:	bcs.n	5fb2 <__udivmoddi4+0x15a>
    5fac:	cmp	ip, r4
    5fae:	bhi.w	611c <__udivmoddi4+0x2c4>
    5fb2:	mov	r3, r2
    5fb4:	rsb	r4, ip, r4
    5fb8:	orr.w	r0, r3, r0, lsl #16
    5fbc:	b.n	5ef8 <__udivmoddi4+0xa0>
    5fbe:	mov	r1, r5
    5fc0:	mov	r0, r5
    5fc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fc6:	rsb	r1, lr, #32
    5fca:	lsl.w	r3, r6, lr
    5fce:	lsl.w	r7, r7, lr
    5fd2:	lsr.w	r9, r0, r1
    5fd6:	mov.w	r8, r7, lsr #16
    5fda:	lsrs	r6, r1
    5fdc:	orr.w	r9, r9, r3
    5fe0:	udiv	sl, r6, r8
    5fe4:	mov.w	r4, r9, lsr #16
    5fe8:	mls	r6, r8, sl, r6
    5fec:	uxth.w	ip, r7
    5ff0:	orr.w	r3, r4, r6, lsl #16
    5ff4:	mul.w	r2, sl, ip
    5ff8:	cmp	r2, r3
    5ffa:	lsl.w	r4, r0, lr
    5ffe:	bls.n	6016 <__udivmoddi4+0x1be>
    6000:	adds	r3, r3, r7
    6002:	add.w	r1, sl, #4294967295
    6006:	bcs.w	6118 <__udivmoddi4+0x2c0>
    600a:	cmp	r2, r3
    600c:	bls.w	6118 <__udivmoddi4+0x2c0>
    6010:	sub.w	sl, sl, #2
    6014:	add	r3, r7
    6016:	subs	r3, r3, r2
    6018:	uxth.w	r9, r9
    601c:	udiv	r1, r3, r8
    6020:	mls	r3, r8, r1, r3
    6024:	orr.w	r3, r9, r3, lsl #16
    6028:	mul.w	r6, r1, ip
    602c:	cmp	r6, r3
    602e:	bls.n	6040 <__udivmoddi4+0x1e8>
    6030:	adds	r3, r3, r7
    6032:	add.w	r2, r1, #4294967295
    6036:	bcs.n	6110 <__udivmoddi4+0x2b8>
    6038:	cmp	r6, r3
    603a:	bls.n	6110 <__udivmoddi4+0x2b8>
    603c:	subs	r1, #2
    603e:	add	r3, r7
    6040:	subs	r3, r3, r6
    6042:	orr.w	r1, r1, sl, lsl #16
    6046:	b.n	5f66 <__udivmoddi4+0x10e>
    6048:	rsb	lr, r1, #32
    604c:	lsr.w	r4, r2, lr
    6050:	lsls	r3, r1
    6052:	orrs	r3, r4
    6054:	lsr.w	r7, r0, lr
    6058:	lsl.w	r4, r6, r1
    605c:	mov.w	ip, r3, lsr #16
    6060:	lsr.w	r6, r6, lr
    6064:	orrs	r4, r7
    6066:	udiv	r9, r6, ip
    606a:	lsrs	r7, r4, #16
    606c:	mls	r6, ip, r9, r6
    6070:	uxth.w	r8, r3
    6074:	orr.w	r6, r7, r6, lsl #16
    6078:	mul.w	r7, r9, r8
    607c:	cmp	r7, r6
    607e:	lsl.w	r2, r2, r1
    6082:	lsl.w	sl, r0, r1
    6086:	bls.n	609a <__udivmoddi4+0x242>
    6088:	adds	r6, r6, r3
    608a:	add.w	r0, r9, #4294967295
    608e:	bcs.n	6114 <__udivmoddi4+0x2bc>
    6090:	cmp	r7, r6
    6092:	bls.n	6114 <__udivmoddi4+0x2bc>
    6094:	sub.w	r9, r9, #2
    6098:	add	r6, r3
    609a:	subs	r6, r6, r7
    609c:	uxth	r0, r4
    609e:	udiv	r4, r6, ip
    60a2:	mls	r6, ip, r4, r6
    60a6:	orr.w	r7, r0, r6, lsl #16
    60aa:	mul.w	r8, r4, r8
    60ae:	cmp	r8, r7
    60b0:	bls.n	60c2 <__udivmoddi4+0x26a>
    60b2:	adds	r7, r7, r3
    60b4:	add.w	r0, r4, #4294967295
    60b8:	bcs.n	610c <__udivmoddi4+0x2b4>
    60ba:	cmp	r8, r7
    60bc:	bls.n	610c <__udivmoddi4+0x2b4>
    60be:	subs	r4, #2
    60c0:	add	r7, r3
    60c2:	orr.w	r0, r4, r9, lsl #16
    60c6:	rsb	r7, r8, r7
    60ca:	umull	r8, r9, r0, r2
    60ce:	cmp	r7, r9
    60d0:	mov	r4, r8
    60d2:	mov	r6, r9
    60d4:	bcc.n	6100 <__udivmoddi4+0x2a8>
    60d6:	beq.n	612c <__udivmoddi4+0x2d4>
    60d8:	cbz	r5, 6134 <__udivmoddi4+0x2dc>
    60da:	subs.w	r3, sl, r4
    60de:	sbc.w	r7, r7, r6
    60e2:	lsl.w	lr, r7, lr
    60e6:	lsrs	r3, r1
    60e8:	lsrs	r7, r1
    60ea:	orr.w	r3, lr, r3
    60ee:	stmia.w	r5, {r3, r7}
    60f2:	movs	r1, #0
    60f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60f8:	mov	r3, r2
    60fa:	b.n	5eee <__udivmoddi4+0x96>
    60fc:	mov	r0, r2
    60fe:	b.n	5ec2 <__udivmoddi4+0x6a>
    6100:	subs.w	r4, r8, r2
    6104:	sbc.w	r6, r9, r3
    6108:	subs	r0, #1
    610a:	b.n	60d8 <__udivmoddi4+0x280>
    610c:	mov	r4, r0
    610e:	b.n	60c2 <__udivmoddi4+0x26a>
    6110:	mov	r1, r2
    6112:	b.n	6040 <__udivmoddi4+0x1e8>
    6114:	mov	r9, r0
    6116:	b.n	609a <__udivmoddi4+0x242>
    6118:	mov	sl, r1
    611a:	b.n	6016 <__udivmoddi4+0x1be>
    611c:	subs	r3, #2
    611e:	add	r4, r7
    6120:	b.n	5fb4 <__udivmoddi4+0x15c>
    6122:	mov	r0, r1
    6124:	b.n	5f3c <__udivmoddi4+0xe4>
    6126:	subs	r0, #2
    6128:	add	r6, r7
    612a:	b.n	5f8c <__udivmoddi4+0x134>
    612c:	cmp	sl, r8
    612e:	bcc.n	6100 <__udivmoddi4+0x2a8>
    6130:	mov	r6, r7
    6132:	b.n	60d8 <__udivmoddi4+0x280>
    6134:	mov	r1, r5
    6136:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    613a:	nop

0000613c <__aeabi_idiv0>:
    613c:	bx	lr
    613e:	nop

00006140 <___init_veneer>:
    6140:	ldr.w	pc, [pc]	; 6144 <___init_veneer+0x4>
    6144:	.word	0x600016a5
	...

Disassembly of section .fini:

00006150 <_fini>:
    6150:	push	{r3, r4, r5, r6, r7, lr}
    6152:	nop
