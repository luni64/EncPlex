
.vsteensy/build/T4_0/10_FrequencyGenerator.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001448 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001730 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016f8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	6000129c <usb_init>
	analog_init();
600011e4:	bl	600014ac <analog_init>
	pwm_init();
600011e8:	bl	60001708 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	60001504 <tempmon_init>

	startup_late_hook();
600011f0:	bl	60001710 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001738 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	60001728 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001750
60001220:	.word	0x00006810
60001224:	.word	0x20000000
60001228:	.word	0x60007f6c
6000122c:	.word	0x20001150
60001230:	.word	0x20001150
60001234:	.word	0x20003700
60001238:	.word	0xe000ed88
6000123c:	.word	0x200033fc
60001240:	.word	0x00002775
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x000024b9
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x000025bd
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x2000141c
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20001424
60001290:	.word	0x20003400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	60001718 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	60001700 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #640	; 0x280
6000132a:	bl	60001720 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20003000
6000137c:	.word	0x20003400
60001380:	.word	0x00001381
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000138a:	ldr	r2, [pc, #116]	; (60001400 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000138e:	ldr	r3, [pc, #116]	; (60001404 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001390:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r0, [pc, #112]	; (60001408 <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001398:	ldr	r7, [pc, #112]	; (6000140c <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
6000139a:	ldr	r6, [pc, #116]	; (60001410 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000139c:	ldr	r5, [pc, #116]	; (60001414 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139e:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013a0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013a4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013a6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013a8:	ldr	r7, [pc, #108]	; (60001418 <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013aa:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ac:	ldr	r6, [pc, #108]	; (6000141c <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013ae:	ldr	r5, [pc, #112]	; (60001420 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013b0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013b2:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013b4:	ldr	r7, [pc, #108]	; (60001424 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b6:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013b8:	ldr	r6, [pc, #108]	; (60001428 <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ba:	ldr	r5, [pc, #112]	; (6000142c <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013bc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013be:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c0:	ldr	r7, [pc, #108]	; (60001430 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013c2:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c4:	ldr	r6, [pc, #108]	; (60001434 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600013c6:	ldr	r5, [pc, #112]	; (60001438 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ca:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600013cc:	ldr	r7, [pc, #108]	; (6000143c <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600013ce:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600013d0:	ldr	r6, [pc, #108]	; (60001440 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600013d2:	ldr	r5, [pc, #112]	; (60001444 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600013d4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600013d6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600013d8:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013da:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013dc:	dsb	sy
	asm("isb");
600013e0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013e4:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013e8:	dsb	sy
	asm("isb");
600013ec:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013f0:	ldr.w	r3, [r2, #-136]
600013f4:	orr.w	r3, r3, #196608	; 0x30000
600013f8:	str.w	r3, [r2, #-136]
600013fc:	pop	{r4, r5, r6, r7, pc}
600013fe:	nop
60001400:	.word	0xe000ed9c
60001404:	.word	0xe000eda0
60001408:	.word	0xe000ed94
6000140c:	.word	0x03080025
60001410:	.word	0x00200011
60001414:	.word	0x07020021
60001418:	.word	0x20000012
6000141c:	.word	0x13080025
60001420:	.word	0x20200013
60001424:	.word	0x130b0027
60001428:	.word	0x40000014
6000142c:	.word	0x13100033
60001430:	.word	0x60000015
60001434:	.word	0x070b002f
60001438:	.word	0x70000016
6000143c:	.word	0x070b0035
60001440:	.word	0x70000017
60001444:	.word	0x030b002f

60001448 <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
60001448:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144a:	ldr	r2, [pc, #92]	; (600014a8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000144e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001452:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001456:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000145e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001462:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001464:	tst.w	r3, #2
60001468:	beq.n	60001478 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000146c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000146e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001470:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001472:	tst.w	r3, #2
60001476:	bne.n	6000146a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001478:	tst.w	r3, #8192	; 0x2000
6000147c:	bne.n	60001482 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000147e:	str	r5, [r2, #20]
			continue;
60001480:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001482:	tst.w	r3, #4096	; 0x1000
60001486:	bne.n	6000148c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001488:	str	r6, [r2, #20]
			continue;
6000148a:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000148c:	cmp	r3, #0
6000148e:	bge.n	60001462 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001490:	tst.w	r3, #65536	; 0x10000
60001494:	beq.n	6000149a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001496:	str	r1, [r2, #24]
			continue;
60001498:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149a:	lsls	r3, r3, #25
6000149c:	bmi.n	600014a2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000149e:	str	r7, [r2, #20]
			continue;
600014a0:	b.n	60001462 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a2:	pop	{r4, r5, r6, r7}
600014a4:	bx	lr
600014a6:	nop
600014a8:	.word	0x400d8000

600014ac <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ac:	ldr	r3, [pc, #68]	; (600014f4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ae:	ldr	r1, [pc, #72]	; (600014f8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014b2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600014b8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ba:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014bc:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014c2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c4:	orr.w	r0, r0, #768	; 0x300
600014c8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ca:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014cc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ce:	ldr	r3, [r2, #72]	; 0x48
600014d0:	lsls	r3, r3, #24
600014d2:	bmi.n	600014ce <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014d4:	ldr	r3, [pc, #36]	; (600014fc <analog_init+0x50>)
600014d6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014da:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014dc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014de:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014e0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014e2:	ldr	r3, [r2, #72]	; 0x48
600014e4:	ands.w	r3, r3, #128	; 0x80
600014e8:	bne.n	600014e2 <analog_init+0x36>
	calibrating = 0;
600014ea:	ldr	r2, [pc, #20]	; (60001500 <analog_init+0x54>)
600014ec:	strb	r3, [r2, #0]
}
600014ee:	pop	{r4, r5}
600014f0:	bx	lr
600014f2:	nop
600014f4:	.word	0x400fc000
600014f8:	.word	0x400c4000
600014fc:	.word	0x400c8000
60001500:	.word	0x20001448

60001504 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	ldr	r2, [pc, #236]	; (600015f4 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001506:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr	r1, [pc, #236]	; (600015f8 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000150c:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000150e:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001510:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001512:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001516:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	ldr.w	lr, [pc, #256]	; 6000161c <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000151c:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000151e:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001522:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001526:	ldr	r7, [pc, #212]	; (600015fc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001528:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000152a:	ubfx	r4, r3, #8, #12
6000152e:	ldr	r6, [pc, #208]	; (60001600 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001534:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001538:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000153c:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001544:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001548:	vmov	s15, r4
6000154c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001550:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001552:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001556:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000155e:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001560:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001564:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001568:	ldr	r5, [pc, #152]	; (60001604 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000156e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001570:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001578:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157a:	vdiv.f32	s11, s14, s13
6000157e:	ldr	r6, [pc, #136]	; (60001608 <tempmon_init+0x104>)
60001580:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001582:	ldr	r1, [pc, #136]	; (6000160c <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001584:	ldr	r4, [pc, #136]	; (60001610 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001586:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158a:	vmov	s15, r3
6000158e:	ldr	r3, [pc, #132]	; (60001614 <tempmon_init+0x110>)
60001590:	str.w	r3, [r6, #320]	; 0x140
60001594:	vcvt.f32.u32	s15, s15
60001598:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a0:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a8:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015ac:	vmov	r3, s11
600015b0:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b4:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015bc:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015be:	and.w	r1, r1, r5, lsl #16
600015c2:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015c6:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ca:	orrs	r3, r1
600015cc:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015d0:	vmov	r3, s15
600015d4:	ldr.w	r1, [r2, #272]	; 0x110
600015d8:	ubfx	r3, r3, #0, #12
600015dc:	orrs	r3, r1
600015de:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015e2:	ldr	r3, [r2, #0]
600015e4:	orr.w	r3, r3, #2
600015e8:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015ea:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015ec:	ldr	r3, [pc, #40]	; (60001618 <tempmon_init+0x114>)
600015ee:	movs	r2, #1
600015f0:	str	r2, [r3, #0]
600015f2:	pop	{r4, r5, r6, r7, pc}
600015f4:	.word	0x400d8180
600015f8:	.word	0x401f4400
600015fc:	.word	0x20001454
60001600:	.word	0x20001458
60001604:	.word	0x20001450
60001608:	.word	0x20003400
6000160c:	.word	0x0fff0000
60001610:	.word	0xe000e440
60001614:	.word	0x000028a1
60001618:	.word	0xe000e108
6000161c:	.word	0x2000144c

60001620 <usb_string_product_name_default>:
60001620:	..U.S.B. .S.e.r.
60001630:	i.a.l...

60001638 <usb_string_manufacturer_name_default>:
60001638:	..T.e.e.n.s.y.d.
60001648:	u.i.n.o.

60001650 <string0>:
60001650:	....

60001654 <usb_config_descriptor_12>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	.........@......
60001694:	@...

60001698 <usb_config_descriptor_480>:
60001698:	..C.....2.......
600016a8:	...$....$....$..
600016b8:	.$..............
600016c8:	................
600016d8:	....

600016dc <qualifier_descriptor>:
600016dc:	.......@....

600016e8 <_init>:
600016e8:	push	{r3, r4, r5, r6, r7, lr}
600016ea:	nop
600016ec:	pop	{r3, r4, r5, r6, r7}
600016ee:	pop	{r3}
600016f0:	mov	lr, r3
600016f2:	bx	lr
600016f4:			; <UNDEFINED> instruction: 0xffffffff

600016f8 <__startup_early_hook_veneer>:
600016f8:	ldr.w	pc, [pc]	; 600016fc <__startup_early_hook_veneer+0x4>
600016fc:	.word	0x0000278d

60001700 <__delay_veneer>:
60001700:	ldr.w	pc, [pc]	; 60001704 <__delay_veneer+0x4>
60001704:	.word	0x00001b65

60001708 <__pwm_init_veneer>:
60001708:	ldr.w	pc, [pc]	; 6000170c <__pwm_init_veneer+0x4>
6000170c:	.word	0x00001f99

60001710 <__startup_late_hook_veneer>:
60001710:	ldr.w	pc, [pc]	; 60001714 <__startup_late_hook_veneer+0x4>
60001714:	.word	0x00002791

60001718 <__usb_init_serialnumber_veneer>:
60001718:	ldr.w	pc, [pc]	; 6000171c <__usb_init_serialnumber_veneer+0x4>
6000171c:	.word	0x000022d1

60001720 <__memset_veneer>:
60001720:	ldr.w	pc, [pc]	; 60001724 <__memset_veneer+0x4>
60001724:	.word	0x00002fd5

60001728 <__main_veneer>:
60001728:	ldr.w	pc, [pc]	; 6000172c <__main_veneer+0x4>
6000172c:	.word	0x00002329

60001730 <__set_arm_clock_veneer>:
60001730:	ldr.w	pc, [pc]	; 60001734 <__set_arm_clock_veneer+0x4>
60001734:	.word	0x00000f85

60001738 <____libc_init_array_veneer>:
60001738:	ldr.w	pc, [pc]	; 6000173c <____libc_init_array_veneer+0x4>
6000173c:	.word	0x00002911

60001740 <__init_array_start>:
60001740:	.word	0x00000045
60001744:	.word	0x00000671

60001748 <__init_array_end>:
60001748:	.word	0xffffffff
6000174c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r2, #5
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	ldr	r4, [r2, #0]
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	nop
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r2, #5
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	ldr	r4, [r2, #0]
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	asrs	r0, r2, #5
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <std::_Function_handler<void (long, long), void (*)(int, int)>::_M_invoke(std::_Any_data const&, long&&, long&&)>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      7c:	push	{r4}
      {
	(*_Base::_M_get_pointer(__functor))(
      7e:	ldr	r4, [r1, #0]
      80:	ldr	r3, [r0, #0]
      82:	ldr	r1, [r2, #0]
      84:	.word	0xf85d4620
	    std::forward<_ArgTypes>(__args)...);
      }
      88:	ldr	r3, [pc, #16]	; (9c <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x10>)

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
      8a:	.short	0x4718

0000008c <std::_Function_base::_Base_manager<void (*)(int, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
      8c:	cmp	r2, #1
      8e:	.short	0xd006
      90:	cmp	r2, #2
      92:	.short	0xd102
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
      94:	ldr	r3, [r1, #0]
      96:	.short	0xb100
      98:	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
      9a:	movs	r0, #0
      9c:	.word	0x60014770
      a0:	movs	r0, #0
      a2:	bx	lr

000000a4 <EncPlex::Encoder::~Encoder()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
      a4:	ldr	r3, [r0, #32]
#include "core_pins.h"

namespace EncPlex
{
    // Simple encoder implementation which reads phase A and B from two digital pins
    class Encoder : public EncoderBase
      a6:	.short	0xb510
      a8:	mov	r4, r0
      aa:	cbz	r3, b6 <EncPlex::Encoder::~Encoder()+0x12>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
      ac:	.word	0x0118f100
      b0:	movs	r2, #3
      b2:	mov	r0, r1
      b4:	blx	r3
      b6:	mov	r0, r4
      b8:	pop	{r4, pc}
      ba:	nop

000000bc <FreqGen_t::panic()>:
  protected:
    Channel channel[nrOfChannels];

    unsigned usedChannels = 0;

    void panic()
      bc:	.word	0x2101b508
    {
      pinMode(LED_BUILTIN, OUTPUT);
      c0:	movs	r0, #13
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
      c2:	.short	0x4c08
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
      c4:	movs	r5, #8
      c6:	.short	0xf002
      c8:	str.w	lr, [r3, #4]
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
      cc:	.word	0x5088f8c4
      while (true)
      {
        digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
        delay(50);
      d0:	movs	r0, #50	; 0x32
      d2:	.short	0xf001
      d4:	stc2l	8, cr6, [r7, #-652]	; 0xfffffd74
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
      d8:	lsls	r3, r3, #28
      da:	bmi.n	cc <FreqGen_t::panic()+0x10>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
      dc:	.word	0x5084f8c4
      e0:	b.n	d0 <FreqGen_t::panic()+0x14>
      e2:	.short	0xbf00
      e4:	ands	r0, r0
      e6:	tst	r0, r0

000000e8 <loop>:

    // Inline implementation ===============================================

    void Encoder::tick()
    {
        update(digitalReadFast(pinA), digitalReadFast(pinB));
      e8:	.word	0xf8924a28
      ec:	adds	r0, #44	; 0x2c
      ee:	.short	0x4610
      f0:	ldrb.w	r2, [r2, #48]	; 0x30
#endif
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
      f4:	lsls	r3, r3, #4
      f6:	lsls	r2, r2, #4

  onChannelChanged(0, 0); // print some info at startup
}

void loop()
{
      f8:	push	{r4, r5, r6, lr}
      fa:	ldr	r4, [pc, #148]	; (190 <loop+0xa8>)
      fc:	ldr	r1, [r4, r3]
      fe:	adds	r6, r4, r2
     100:	.word	0x442358a5
     104:	ldr	r1, [r1, #8]
     106:	ldr	r2, [r6, #12]
     108:	ldr	r5, [r5, #8]
     10a:	ldr	r3, [r3, #12]
     10c:	tst	r5, r2
     10e:	ite	ne
     110:	movne	r2, #1
     112:	moveq	r2, #0
     114:	tst	r1, r3
     116:	.short	0xbf14
     118:	movne	r1, #1
     11a:	.short	0x2100
     11c:	bl	760 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>	; unpredictable branch in IT block

     120:	.word	0xf8924a1c
     124:	adds	r0, #44	; 0x2c
     126:	moveq	r0, r2
     128:	.word	0x2030f892
     12c:	lsls	r3, r3, #4
     12e:	lsls	r2, r2, #4
     130:	.word	0x442358e1
     134:	ldr	r5, [r4, r2]
     136:	.short	0x18a6
     138:	ldr	r1, [r1, #8]
     13a:	ldr	r2, [r6, #12]
     13c:	.word	0x68db68ad
     140:	tst	r5, r2
     142:	.short	0xbf14
     144:	movne	r2, #1
     146:	.short	0x2200
     148:	tst	r1, r3
     14a:	.short	0xbf14
     14c:	movne	r1, #1
     14e:	.short	0x2100
     150:	bl	760 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>	; unpredictable branch in IT block

     154:	.word	0xf8924a10
     158:	adds	r0, #44	; 0x2c
     15a:	.short	0x4610
     15c:	ldrb.w	r2, [r2, #48]	; 0x30
     160:	.word	0x0112011b
     164:	ldr	r1, [r4, r3]
     166:	.short	0x4423
     168:	adds	r5, r4, r2
     16a:	ldreq	r4, [r4, r2]
     16c:	.word	0x68ea6889
     170:	ldr	r4, [r4, #8]
     172:	.short	0x68db
     174:	tst	r4, r2
     176:	ite	ne
     178:	.word	0x22002201
     17c:	tst	r1, r3
  frequencyEncoder.tick();
  chnSelectEncoder.tick();
  dutyCycleEncoder.tick();
}
     17e:	.short	0xe8bd
     180:	eors	r0, r6
     182:	ite	ne	; unpredictable <IT:ne>
     184:	.word	0x21002101
     188:	b.w	760 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>	; unpredictable branch in IT block

     18c:	.word	0x200011a0
     190:	lsls	r0, r2, #5
     192:	.short	0x2000
     194:	asrs	r4, r5, #5
     196:	movne	r0, #0
     198:	.word	0x200011d4

0000019c <printChannelInfo(unsigned int)>:
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     19c:	ldr	r2, [pc, #44]	; (1cc <printChannelInfo(unsigned int)+0x30>)
     19e:	.short	0x6e13
     1a0:	cmp	r0, r3

// Helpers ===================================================
void printChannelInfo(unsigned ch)
{
     1a2:	.short	0xb510
     1a4:	sub	sp, #8
     1a6:	.short	0xd20d
      return channel[ch].getPin();
     1a8:	add.w	r3, r0, r0, lsl #1
  int pin = generator.getPin(ch);
  int frq = generator.getFrequency(ch);
  int dty = generator.getDutyCycle(ch);

  Serial.printf("Pin: %u -> f=%u Hz d=%u %%\n", pin, frq, dty);
     1ac:	.word	0x48094908
     1b0:	lsls	r3, r3, #2
     1b2:	.short	0x18d4
     1b4:	ldrb	r2, [r2, r3]
     1b6:	ldreq	r3, [r4, #8]
     1b8:	.word	0x94006864
     1bc:	bl	2620 <Print::printf(char const*, ...)>
}
     1c0:	.word	0xbd10b002
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     1c4:	mov	r0, r2
     1c6:	.short	0xf7ff
     1c8:	vpmin.f<illegal width 64>	d27, d9, d0
     1cc:	.word	0x200006f4
     1d0:	movs	r0, r3
     1d2:	.short	0x2000
     1d4:	lsls	r0, r2, #30
     1d6:	movs	r0, #0

000001d8 <onFrequencyChanged(int, int)>:

void onFrequencyChanged(int encVal, int encDelta)
{
     1d8:	.word	0x4b1eb5f8
      channel[ch].setDutyCycle(d);
    }

    unsigned getFrequency(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     1dc:	ldr	r5, [pc, #120]	; (258 <onFrequencyChanged(int, int)+0x80>)
  unsigned ch = chnSelectEncoder.getValue();
     1de:	.short	0x681e
     1e0:	ldr	r3, [r5, #96]	; 0x60
     1e2:	.short	0x429e
     1e4:	bcs.n	24c <onFrequencyChanged(int, int)+0x74>
      return channel[ch].getFrequency();
     1e6:	.short	0xeb06
     1e8:	lsls	r6, r0, #17
     1ea:	mov.w	r2, #1000	; 0x3e8
     1ee:	lsls	r4, r4, #2
     1f0:	adds	r7, r5, r4
     1f2:	.short	0x5d28
     1f4:	ldr	r3, [r7, #8]
     1f6:	.short	0xfb02
     1f8:	adds	r1, #1
     1fa:	.short	0xea21
     1fc:	strb	r1, [r4, #7]
}

void Channel::setFrequency(int f)
{
    frequency = max(0, f);
    analogWriteFrequency(pin, frequency);
     1fe:	.short	0xee07
     200:	subs	r0, r2, r2
        analogWrite(pin, 0); // switch off output
}

void Channel::setFrequency(int f)
{
    frequency = max(0, f);
     202:	.short	0x60b9
    analogWriteFrequency(pin, frequency);
     204:	vcvt.f32.s32	s0, s15
     208:	.word	0xfe92f001
}

void Channel::enable(bool on)
{
    if (on)
        setDutyCycle(dutyCycle); // set last stored duty cycle
     20c:	ldr	r3, [r7, #4]
     20e:	.short	0x5d28
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     210:	cmp	r3, #0
     212:	ble.n	246 <onFrequencyChanged(int, int)+0x6e>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     214:	cmp	r3, #99	; 0x63
     216:	ble.n	22c <onFrequencyChanged(int, int)+0x54>
     218:	movs	r1, #253	; 0xfd
     21a:	movs	r3, #99	; 0x63
    analogWriteFrequency(pin, frequency);
}

void Channel::setDutyCycle(int d) // percent
{
    dutyCycle = min(99, max(0, d)); // limit to [0, 100[
     21c:	str	r3, [r7, #4]
    analogWrite(pin, dutyCycle * 2.56f);
     21e:	bl	1e68 <analogWrite>
  unsigned f = generator.getFrequency(ch) + encDelta * 1000;
  generator.setFrequency(ch, f);

  printChannelInfo(ch);
     222:	mov	r0, r6
}
     224:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
{
  unsigned ch = chnSelectEncoder.getValue();
  unsigned f = generator.getFrequency(ch) + encDelta * 1000;
  generator.setFrequency(ch, f);

  printChannelInfo(ch);
     228:	b.w	19c <printChannelInfo(unsigned int)>
     22c:	vmov	s15, r3
     230:	vldr	s14, [pc, #40]	; 25c <onFrequencyChanged(int, int)+0x84>
     234:	vcvt.f32.s32	s15, s15
     238:	vmul.f32	s15, s15, s14
     23c:	vcvt.s32.f32	s15, s15
     240:	vmov	r1, s15
     244:	b.n	21c <onFrequencyChanged(int, int)+0x44>
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     246:	movs	r1, #0
     248:	mov	r3, r1
     24a:	b.n	21c <onFrequencyChanged(int, int)+0x44>
      channel[ch].setDutyCycle(d);
    }

    unsigned getFrequency(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     24c:	mov	r0, r5
     24e:	bl	bc <FreqGen_t::panic()>
     252:	nop
     254:	.word	0x2000116c
     258:	.word	0x200006f4
     25c:	.word	0x4023d70a

00000260 <onDutyCycleChanged(int, int)>:
}

void onDutyCycleChanged(int encVal, int encDelta)
{
     260:	ldr	r3, [pc, #96]	; (2c4 <onDutyCycleChanged(int, int)+0x64>)
      return channel[ch].getFrequency();
    }

    unsigned getDutyCycle(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     262:	ldr	r0, [pc, #100]	; (2c8 <onDutyCycleChanged(int, int)+0x68>)
     264:	push	{r4, lr}
  unsigned ch = chnSelectEncoder.getValue(); // get the currently active channel
     266:	ldr	r4, [r3, #0]
     268:	ldr	r3, [r0, #96]	; 0x60
     26a:	cmp	r4, r3
     26c:	bcs.n	2be <onDutyCycleChanged(int, int)+0x5e>
      return channel[ch].getDutyCycle();
     26e:	add.w	r3, r4, r4, lsl #1
  unsigned d = generator.getDutyCycle(ch) + encDelta * 5;
     272:	add.w	r1, r1, r1, lsl #2
     276:	lsls	r3, r3, #2
     278:	adds	r2, r0, r3
     27a:	ldrb	r0, [r0, r3]
     27c:	ldr	r3, [r2, #4]
     27e:	add	r1, r3
     280:	cmp	r1, #0
     282:	ble.n	2b8 <onDutyCycleChanged(int, int)+0x58>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     284:	cmp	r1, #99	; 0x63
     286:	ble.n	29c <onDutyCycleChanged(int, int)+0x3c>
     288:	movs	r1, #253	; 0xfd
     28a:	movs	r3, #99	; 0x63
    analogWriteFrequency(pin, frequency);
}

void Channel::setDutyCycle(int d) // percent
{
    dutyCycle = min(99, max(0, d)); // limit to [0, 100[
     28c:	str	r3, [r2, #4]
    analogWrite(pin, dutyCycle * 2.56f);
     28e:	bl	1e68 <analogWrite>
  generator.setDutyCycle(ch, d);

  printChannelInfo(ch);
     292:	mov	r0, r4
}
     294:	ldmia.w	sp!, {r4, lr}
{
  unsigned ch = chnSelectEncoder.getValue(); // get the currently active channel
  unsigned d = generator.getDutyCycle(ch) + encDelta * 5;
  generator.setDutyCycle(ch, d);

  printChannelInfo(ch);
     298:	b.w	19c <printChannelInfo(unsigned int)>
     29c:	vmov	s15, r1
     2a0:	vldr	s14, [pc, #40]	; 2cc <onDutyCycleChanged(int, int)+0x6c>
     2a4:	mov	r3, r1
     2a6:	vcvt.f32.s32	s15, s15
     2aa:	vmul.f32	s15, s15, s14
     2ae:	vcvt.s32.f32	s15, s15
     2b2:	vmov	r1, s15
     2b6:	b.n	28c <onDutyCycleChanged(int, int)+0x2c>
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     2b8:	movs	r1, #0
     2ba:	mov	r3, r1
     2bc:	b.n	28c <onDutyCycleChanged(int, int)+0x2c>
      return channel[ch].getFrequency();
    }

    unsigned getDutyCycle(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     2be:	bl	bc <FreqGen_t::panic()>
     2c2:	nop
     2c4:	.word	0x2000116c
     2c8:	.word	0x200006f4
     2cc:	.word	0x4023d70a

000002d0 <onChannelChanged(int, int)>:
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     2d0:	ldr	r3, [pc, #40]	; (2fc <onChannelChanged(int, int)+0x2c>)
     2d2:	ldr	r2, [r3, #96]	; 0x60
     2d4:	cmp	r0, r2
}

void onChannelChanged(int encVal, int encDelta)
{
     2d6:	push	{r4, lr}
     2d8:	bcs.n	2f6 <onChannelChanged(int, int)+0x26>
      return channel[ch].getPin();
     2da:	add.w	r2, r0, r0, lsl #1
     2de:	mov	r4, r0
  Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
     2e0:	ldr	r1, [pc, #28]	; (300 <onChannelChanged(int, int)+0x30>)
     2e2:	ldr	r0, [pc, #32]	; (304 <onChannelChanged(int, int)+0x34>)
     2e4:	ldrb.w	r2, [r3, r2, lsl #2]
     2e8:	bl	2620 <Print::printf(char const*, ...)>
  printChannelInfo(encVal);
     2ec:	mov	r0, r4
}
     2ee:	ldmia.w	sp!, {r4, lr}
}

void onChannelChanged(int encVal, int encDelta)
{
  Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
  printChannelInfo(encVal);
     2f2:	b.w	19c <printChannelInfo(unsigned int)>
      return channel[ch].getDutyCycle();
    }

    uint8_t getPin(unsigned ch)
    {
      if (ch >= usedChannels) panic();
     2f6:	mov	r0, r3
     2f8:	bl	bc <FreqGen_t::panic()>
     2fc:	.word	0x200006f4
     300:	.word	0x20000034
     304:	.word	0x20000790

00000308 <setup>:
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
  
void setup()
{
     308:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     30c:	ldr	r1, [pc, #52]	; (344 <setup+0x3c>)
     30e:	sub	sp, #60	; 0x3c
     310:	ldr	r2, [pc, #52]	; (348 <setup+0x40>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     312:	ldr	r0, [pc, #56]	; (34c <setup+0x44>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     314:	ldr	r5, [pc, #56]	; (350 <setup+0x48>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     316:	ldrb	r3, [r1, #0]
     318:	cmp	r3, #0
     31a:	beq.w	616 <setup+0x30e>
     31e:	ldrb	r3, [r0, #0]
     320:	lsls	r3, r3, #31
     322:	bpl.w	616 <setup+0x30e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     326:	ldr	r3, [r2, #0]
     328:	ldr	r4, [r5, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     32a:	subs	r3, r3, r4
     32c:	cmp	r3, #14
     32e:	bls.w	616 <setup+0x30e>
     332:	ldr	r4, [pc, #32]	; (354 <setup+0x4c>)
     334:	movs	r0, #9
     336:	ldr	r6, [pc, #32]	; (358 <setup+0x50>)
void Channel::setPin(uint8_t p)
{
    pin = p;
    analogWrite(pin, 0); // switch off
    frequency = 0;
    dutyCycle = 50;
     338:	mov.w	r8, #50	; 0x32
     33c:	ldr	r3, [r4, #96]	; 0x60
     33e:	add.w	r7, r6, #20
     342:	b.n	360 <setup+0x58>
     344:	.word	0x20001418
     348:	.word	0x20001424
     34c:	.word	0x20001348
     350:	.word	0x200014b8
     354:	.word	0x200006f4
     358:	.word	0x20000000
     35c:	ldr.w	r0, [r6, #4]!
      }
    }

    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();
     360:	cmp	r0, #40	; 0x28
     362:	bgt.w	636 <setup+0x32e>
     366:	cmp	r3, #7
     368:	ite	ls
     36a:	movls	r5, #0
     36c:	movhi	r5, #1
     36e:	cmp	r5, #0
     370:	bne.w	636 <setup+0x32e>

      channel[usedChannels].setPin(pin);
     374:	uxtb	r2, r0
};

void Channel::setPin(uint8_t p)
{
    pin = p;
    analogWrite(pin, 0); // switch off
     376:	mov	r1, r5
    unsigned frequency = 50;
};

void Channel::setPin(uint8_t p)
{
    pin = p;
     378:	add.w	r3, r3, r3, lsl #1
    analogWrite(pin, 0); // switch off
     37c:	mov	r0, r2
    unsigned frequency = 50;
};

void Channel::setPin(uint8_t p)
{
    pin = p;
     37e:	strb.w	r2, [r4, r3, lsl #2]
     382:	add.w	r9, r4, r3, lsl #2
    analogWrite(pin, 0); // switch off
     386:	bl	1e68 <analogWrite>
      usedChannels++;
     38a:	ldr	r2, [r4, #96]	; 0x60
  public:
    static constexpr unsigned nrOfChannels = 8;

    void addOutputPins(std::initializer_list<int> pins)
    {
      for (auto pin : pins) {
     38c:	cmp	r6, r7
    frequency = 0;
     38e:	str.w	r5, [r9, #8]
    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();

      channel[usedChannels].setPin(pin);
      usedChannels++;
     392:	add.w	r3, r2, #1
    dutyCycle = 50;
     396:	str.w	r8, [r9, #4]
     39a:	str	r3, [r4, #96]	; 0x60
  public:
    static constexpr unsigned nrOfChannels = 8;

    void addOutputPins(std::initializer_list<int> pins)
    {
      for (auto pin : pins) {
     39c:	bne.n	35c <setup+0x54>
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     39e:	ldr	r7, [pc, #668]	; (63c <setup+0x334>)
        pinMode(pinA, inputMode);
     3a0:	movs	r1, #2
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     3a2:	ldr	r3, [pc, #668]	; (640 <setup+0x338>)
     3a4:	mov	r0, r5
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     3a6:	ldr.w	r9, [pc, #704]	; 668 <setup+0x360>
	    _M_manager = &_My_handler::_M_manager;
     3aa:	ldr.w	r8, [pc, #704]	; 66c <setup+0x364>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     3ae:	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     3b0:	str.w	r9, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
     3b4:	str.w	r8, [sp, #16]
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     3b8:	str	r5, [r7, #44]	; 0x2c
        pinMode(pinA, inputMode);
     3ba:	bl	2250 <pinMode>

        this->pinB = pinB;
     3be:	movs	r3, #1
        pinMode(pinB, inputMode);
     3c0:	movs	r1, #2
     3c2:	mov	r0, r3
    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     3c4:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     3c6:	bl	2250 <pinMode>

        setCountMode(countMode);
     3ca:	mov	r1, r5
     3cc:	mov	r0, r7
     3ce:	bl	6f8 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)>
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
     3d2:	mov.w	r3, #1107296256	; 0x42000000
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     3d6:	mov	r0, r7
     3d8:	ldr	r1, [r3, #8]
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
     3da:	ldr	r2, [r3, #8]
     3dc:	ubfx	r1, r1, #3, #1
     3e0:	ubfx	r2, r2, #2, #1
     3e4:	bl	754 <EncPlex::EncoderBase::begin(unsigned long, unsigned long)>
     3e8:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     3ea:	str	r5, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     3ec:	cmp	r3, #0
     3ee:	beq.w	622 <setup+0x31a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     3f2:	movs	r2, #2
     3f4:	add	r1, sp, #8
     3f6:	add	r0, sp, #24
     3f8:	blx	r3
	  _M_invoker = __x._M_invoker;
     3fa:	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
     3fc:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     3fe:	str	r5, [sp, #48]	; 0x30
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     400:	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     402:	str	r3, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     404:	cmp	r3, #0
     406:	beq.w	622 <setup+0x31a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     40a:	add	r5, sp, #40	; 0x28
     40c:	add	r1, sp, #24
     40e:	movs	r2, #2
     410:	mov	r0, r5
     412:	blx	r3
	  _M_invoker = __x._M_invoker;
     414:	ldr	r1, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     416:	ldr	r2, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     418:	ldr.w	sl, [r7, #32]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     41c:	mov	r6, sp
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
     41e:	str	r2, [r7, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     420:	ldr	r3, [pc, #544]	; (644 <setup+0x33c>)
     422:	ldr	r2, [r7, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     424:	str	r1, [r7, #36]	; 0x24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     426:	ldmia.w	r5, {r0, r1}
     42a:	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     42e:	ldmia.w	r3, {r0, r1}
     432:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     436:	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     43a:	str.w	sl, [sp, #48]	; 0x30
     43e:	str	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
     440:	stmia.w	r3, {r0, r1}

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     444:	cmp.w	sl, #0
     448:	beq.n	452 <setup+0x14a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     44a:	movs	r2, #3
     44c:	mov	r1, r5
     44e:	mov	r0, r5
     450:	blx	sl

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     452:	ldr	r3, [sp, #32]
     454:	cbz	r3, 45e <setup+0x156>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     456:	add	r1, sp, #24
     458:	movs	r2, #3
     45a:	mov	r0, r1
     45c:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     45e:	ldr	r3, [sp, #16]
     460:	cbz	r3, 46a <setup+0x162>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     462:	add	r1, sp, #8
     464:	movs	r2, #3
     466:	mov	r0, r1
     468:	blx	r3
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     46a:	mov.w	sl, #2
     46e:	ldr	r7, [pc, #472]	; (648 <setup+0x340>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     470:	ldr	r3, [pc, #472]	; (64c <setup+0x344>)
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     472:	mov.w	fp, #0
        pinMode(pinA, inputMode);
     476:	mov	r1, sl
     478:	mov	r0, sl
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     47a:	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     47c:	str.w	r9, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
     480:	str.w	r8, [sp, #16]
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     484:	str.w	sl, [r7, #44]	; 0x2c
        pinMode(pinA, inputMode);
     488:	bl	2250 <pinMode>

        this->pinB = pinB;
     48c:	movs	r3, #3
        pinMode(pinB, inputMode);
     48e:	mov	r1, sl
     490:	mov	r0, r3
    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     492:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     494:	bl	2250 <pinMode>

        setCountMode(countMode);
     498:	mov	r0, r7
     49a:	mov	r1, fp
     49c:	bl	6f8 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)>
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
     4a0:	ldr	r3, [pc, #428]	; (650 <setup+0x348>)
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     4a2:	mov	r0, r7
     4a4:	ldr	r1, [r3, #8]
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
     4a6:	ldr	r2, [r3, #8]
     4a8:	ubfx	r1, r1, #4, #1
     4ac:	ubfx	r2, r2, #5, #1
     4b0:	bl	754 <EncPlex::EncoderBase::begin(unsigned long, unsigned long)>
     4b4:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     4b6:	str.w	fp, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     4ba:	cmp	r3, #0
     4bc:	beq.w	630 <setup+0x328>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     4c0:	mov	r2, sl
     4c2:	add	r1, sp, #8
     4c4:	add	r0, sp, #24
     4c6:	blx	r3
	  _M_invoker = __x._M_invoker;
     4c8:	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
     4ca:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     4cc:	str.w	fp, [sp, #48]	; 0x30
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     4d0:	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     4d2:	str	r3, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     4d4:	cmp	r3, #0
     4d6:	beq.w	630 <setup+0x328>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     4da:	mov	r2, sl
     4dc:	add	r1, sp, #24
     4de:	mov	r0, r5
     4e0:	blx	r3
	  _M_invoker = __x._M_invoker;
     4e2:	ldr	r1, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     4e4:	ldr	r2, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     4e6:	ldr.w	sl, [r7, #32]
     4ea:	ldr	r3, [pc, #360]	; (654 <setup+0x34c>)
      __b = _GLIBCXX_MOVE(__tmp);
     4ec:	str	r2, [r7, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     4ee:	ldr	r2, [r7, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     4f0:	str	r1, [r7, #36]	; 0x24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     4f2:	ldmia.w	r5, {r0, r1}
     4f6:	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     4fa:	ldmia.w	r3, {r0, r1}
     4fe:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     502:	ldmia.w	r6, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     506:	str.w	sl, [sp, #48]	; 0x30
     50a:	str	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
     50c:	stmia.w	r3, {r0, r1}

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     510:	cmp.w	sl, #0
     514:	beq.n	51e <setup+0x216>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     516:	movs	r2, #3
     518:	mov	r1, r5
     51a:	mov	r0, r5
     51c:	blx	sl

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     51e:	ldr	r3, [sp, #32]
     520:	cbz	r3, 52a <setup+0x222>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     522:	add	r1, sp, #24
     524:	movs	r2, #3
     526:	mov	r0, r1
     528:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     52a:	ldr	r3, [sp, #16]
     52c:	cbz	r3, 536 <setup+0x22e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     52e:	add	r1, sp, #8
     530:	movs	r2, #3
     532:	mov	r0, r1
     534:	blx	r3
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     536:	movs	r3, #4
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
     538:	ldr	r2, [pc, #284]	; (658 <setup+0x350>)
     53a:	ldr	r7, [pc, #288]	; (65c <setup+0x354>)
        pinMode(pinA, inputMode);
     53c:	movs	r1, #2
     53e:	mov	r0, r3
     540:	str	r2, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
     542:	str.w	r8, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     546:	mov.w	r8, #0
        update(digitalReadFast(pinA), digitalReadFast(pinB));
    }

    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
     54a:	str	r3, [r7, #44]	; 0x2c
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
     54c:	str.w	r9, [sp, #20]
        pinMode(pinA, inputMode);
     550:	bl	2250 <pinMode>

        this->pinB = pinB;
     554:	movs	r3, #5
        pinMode(pinB, inputMode);
     556:	movs	r1, #2
     558:	mov	r0, r3
    void Encoder::begin(int pinA, int pinB, EncPlex::CountMode countMode, int inputMode)
    {
        this->pinA = pinA;
        pinMode(pinA, inputMode);

        this->pinB = pinB;
     55a:	str	r3, [r7, #48]	; 0x30
        pinMode(pinB, inputMode);
     55c:	bl	2250 <pinMode>

        setCountMode(countMode);
     560:	mov	r0, r7
     562:	mov	r1, r8
     564:	bl	6f8 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)>
		} else if (pin == 4) {
			return (CORE_PIN4_PINREG & CORE_PIN4_BITMASK) ? 1 : 0;
     568:	ldr	r3, [pc, #228]	; (650 <setup+0x348>)
        EncoderBase::begin(digitalReadFast(pinA), digitalReadFast(pinB)); // set start state
     56a:	mov	r0, r7
     56c:	ldr	r1, [r3, #8]
		} else if (pin == 5) {
			return (CORE_PIN5_PINREG & CORE_PIN5_BITMASK) ? 1 : 0;
     56e:	ldr	r2, [r3, #8]
     570:	ubfx	r1, r1, #6, #1
     574:	ubfx	r2, r2, #8, #1
     578:	bl	754 <EncPlex::EncoderBase::begin(unsigned long, unsigned long)>
     57c:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     57e:	str.w	r8, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     582:	cmp	r3, #0
     584:	beq.n	62a <setup+0x322>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     586:	movs	r2, #2
     588:	add	r1, sp, #8
     58a:	add	r0, sp, #24
     58c:	blx	r3
	  _M_invoker = __x._M_invoker;
     58e:	ldr	r2, [sp, #20]
	  _M_manager = __x._M_manager;
     590:	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     592:	str.w	r8, [sp, #48]	; 0x30
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
     596:	str	r2, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     598:	str	r3, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
     59a:	cmp	r3, #0
     59c:	beq.n	62a <setup+0x322>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     59e:	add	r1, sp, #24
     5a0:	movs	r2, #2
     5a2:	mov	r0, r5
     5a4:	blx	r3
	  _M_invoker = __x._M_invoker;
     5a6:	ldr	r1, [sp, #36]	; 0x24
	  _M_manager = __x._M_manager;
     5a8:	ldr	r2, [sp, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5aa:	ldr.w	r8, [r7, #32]
     5ae:	ldr	r3, [pc, #176]	; (660 <setup+0x358>)
      __b = _GLIBCXX_MOVE(__tmp);
     5b0:	str	r2, [r7, #32]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5b2:	ldr	r2, [r7, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
     5b4:	str	r1, [r7, #36]	; 0x24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     5b6:	ldmia.w	r5, {r0, r1}
     5ba:	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
     5be:	ldmia.w	r3, {r0, r1}
     5c2:	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
     5c6:	ldmia.w	r6, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
     5ca:	str.w	r8, [sp, #48]	; 0x30
     5ce:	str	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
     5d0:	stmia.w	r3, {r0, r1}

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     5d4:	cmp.w	r8, #0
     5d8:	beq.n	5e2 <setup+0x2da>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     5da:	movs	r2, #3
     5dc:	mov	r1, r5
     5de:	mov	r0, r5
     5e0:	blx	r8

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     5e2:	ldr	r3, [sp, #32]
     5e4:	cbz	r3, 5ee <setup+0x2e6>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     5e6:	add	r1, sp, #24
     5e8:	movs	r2, #3
     5ea:	mov	r0, r1
     5ec:	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
     5ee:	ldr	r3, [sp, #16]
     5f0:	cbz	r3, 5fa <setup+0x2f2>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     5f2:	add	r1, sp, #8
     5f4:	movs	r2, #3
     5f6:	mov	r0, r1
     5f8:	blx	r3
  generator.addOutputPins({9, 10, 11, 12, 14, 15}); // define up to 8 output pins (here for a T4.0)

  chnSelectEncoder.begin(0, 1, onChannelChanged);                 // encoder to select current channel on pin 0/1 using onChannelChanged callback
  frequencyEncoder.begin(2, 3, onFrequencyChanged);               // encoder to select freqency
  dutyCycleEncoder.begin(4, 5, onDutyCycleChanged);               // encoder to select duty cylce
  chnSelectEncoder.setLimits(0, generator.getNrOfChannels() - 1); // limit channel encoder range to actual number of defined channels
     5fa:	movs	r3, #0
     5fc:	ldr	r2, [r4, #96]	; 0x60
     5fe:	ldr	r0, [pc, #60]	; (63c <setup+0x334>)
     600:	mov	r1, r3
     602:	subs	r2, #1
     604:	bl	738 <EncPlex::EncoderBase::setLimits(long, long, bool)>

  onChannelChanged(0, 0); // print some info at startup
     608:	movs	r1, #0
     60a:	mov	r0, r1
     60c:	bl	2d0 <onChannelChanged(int, int)>
}
     610:	add	sp, #60	; 0x3c
     612:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     616:	ldr	r3, [r2, #0]
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
  
void setup()
{
  while (!Serial && millis() < 1000)
     618:	cmp.w	r3, #1000	; 0x3e8
     61c:	bcc.w	316 <setup+0xe>
     620:	b.n	332 <setup+0x2a>
     622:	ldr	r1, [sp, #52]	; 0x34
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
  
void setup()
{
     624:	movs	r2, #0
     626:	add	r5, sp, #40	; 0x28
     628:	b.n	418 <setup+0x110>
     62a:	ldr	r1, [sp, #52]	; 0x34
     62c:	movs	r2, #0
     62e:	b.n	5aa <setup+0x2a2>
     630:	ldr	r1, [sp, #52]	; 0x34
     632:	movs	r2, #0
     634:	b.n	4e6 <setup+0x1de>
      }
    }

    void addChannels(int pin)
    {
      if (usedChannels >= nrOfChannels || pin > CORE_NUM_DIGITAL) panic();
     636:	ldr	r0, [pc, #44]	; (664 <setup+0x35c>)
     638:	bl	bc <FreqGen_t::panic()>
     63c:	.word	0x2000116c
     640:	.word	0x000002d1
     644:	.word	0x20001184
     648:	.word	0x200011a0
     64c:	.word	0x000001d9
     650:	.word	0x4200c000
     654:	.word	0x200011b8
     658:	.word	0x00000261
     65c:	.word	0x200011d4
     660:	.word	0x200011ec
     664:	.word	0x200006f4
     668:	.word	0x0000007d
     66c:	.word	0x0000008d

00000670 <_GLOBAL__sub_I_generator>:

void onChannelChanged(int encVal, int encDelta)
{
  Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
  printChannelInfo(encVal);
}
     670:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    };

    class EncoderBase
    {
     public:
        EncoderBase() = default;
     674:	movs	r4, #0
     676:	ldr	r3, [pc, #104]	; (6e0 <_GLOBAL__sub_I_generator+0x70>)
void onFrequencyChanged(int encVal, int encDelta);
void onChannelChanged(int encVal, int encDelta);
void onDutyCycleChanged(int encVal, int encDelta);

FreqGen_t generator;
Encoder frequencyEncoder;
     678:	ldr.w	r9, [pc, #116]	; 6f0 <_GLOBAL__sub_I_generator+0x80>
     67c:	mov.w	r7, #2147483648	; 0x80000000
     680:	ldr.w	r8, [pc, #112]	; 6f4 <_GLOBAL__sub_I_generator+0x84>
     684:	mvn.w	r6, #2147483648	; 0x80000000
     688:	ldr	r5, [pc, #88]	; (6e4 <_GLOBAL__sub_I_generator+0x74>)
     68a:	mov	r2, r9
     68c:	mov	r1, r8
     68e:	str	r4, [r3, #0]
     690:	strb	r4, [r3, #12]
     692:	mov	r0, r3
     694:	str	r4, [r3, #16]
     696:	strb	r4, [r3, #20]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     698:	str	r4, [r3, #32]
     69a:	str	r7, [r3, #4]
     69c:	str	r6, [r3, #8]
     69e:	str	r5, [r3, #40]	; 0x28
     6a0:	bl	28ec <__aeabi_atexit>
     6a4:	ldr	r3, [pc, #64]	; (6e8 <_GLOBAL__sub_I_generator+0x78>)
Encoder dutyCycleEncoder;
     6a6:	mov	r2, r9
     6a8:	mov	r1, r8
     6aa:	str	r6, [r3, #8]
     6ac:	mov	r0, r3
     6ae:	strb	r4, [r3, #12]
     6b0:	str	r4, [r3, #16]
     6b2:	strb	r4, [r3, #20]
     6b4:	str	r4, [r3, #32]
     6b6:	str	r5, [r3, #40]	; 0x28
     6b8:	stmia.w	r3, {r4, r7}
     6bc:	bl	28ec <__aeabi_atexit>
     6c0:	ldr	r3, [pc, #40]	; (6ec <_GLOBAL__sub_I_generator+0x7c>)
Encoder chnSelectEncoder;
     6c2:	mov	r2, r9
     6c4:	mov	r1, r8
     6c6:	mov	r0, r3
     6c8:	str	r6, [r3, #8]
     6ca:	strb	r4, [r3, #12]
     6cc:	str	r4, [r3, #16]
     6ce:	strb	r4, [r3, #20]
     6d0:	str	r4, [r3, #32]
     6d2:	str	r5, [r3, #40]	; 0x28
     6d4:	stmia.w	r3, {r4, r7}

void onChannelChanged(int encVal, int encDelta)
{
  Serial.printf("\nSetup pin %u\n", generator.getPin(encVal));
  printChannelInfo(encVal);
}
     6d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void onDutyCycleChanged(int encVal, int encDelta);

FreqGen_t generator;
Encoder frequencyEncoder;
Encoder dutyCycleEncoder;
Encoder chnSelectEncoder;
     6dc:	b.w	28ec <__aeabi_atexit>
     6e0:	.word	0x200011a0
     6e4:	.word	0x20000044
     6e8:	.word	0x200011d4
     6ec:	.word	0x2000116c
     6f0:	.word	0x200006f0
     6f4:	.word	0x000000a5

000006f8 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)>:

namespace EncPlex
{
    void EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
     6f8:	cmp	r1, #1
     6fa:	beq.n	720 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x28>
     6fc:	cmp	r1, #2
     6fe:	beq.n	716 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x1e>
     700:	cbz	r1, 70c <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x14>
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            default:
                stateMachine = &stateMachineFull;
     702:	ldr	r2, [pc, #40]	; (72c <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x34>)
                invert = 0b00;
     704:	movs	r3, #0
            case CountMode::half:
                stateMachine = &stateMachineHalf;
                invert = 0b00;
                break;
            default:
                stateMachine = &stateMachineFull;
     706:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     708:	str	r3, [r0, #16]
     70a:	bx	lr
    void EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     70c:	ldr	r2, [pc, #32]	; (730 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x38>)
                invert = 0b11;
     70e:	movs	r3, #3
    void EncoderBase::setCountMode(CountMode mode)
    {
        switch (mode)
        {
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
     710:	str	r2, [r0, #40]	; 0x28
                invert = 0b11;
     712:	str	r3, [r0, #16]
                break;
     714:	bx	lr
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     716:	ldr	r2, [pc, #28]	; (734 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x3c>)
                invert = 0b00;
     718:	movs	r3, #0
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
                invert = 0b00;
                break;
            case CountMode::half:
                stateMachine = &stateMachineHalf;
     71a:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     71c:	str	r3, [r0, #16]
                break;
     71e:	bx	lr
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     720:	ldr	r2, [pc, #12]	; (730 <EncPlex::EncoderBase::setCountMode(EncPlex::CountMode)+0x38>)
                invert = 0b00;
     722:	movs	r3, #0
            case CountMode::quarter :
                stateMachine = &stateMachineQtr;
                invert = 0b11;
                break;
            case CountMode::quarterInv :
                stateMachine = &stateMachineQtr;
     724:	str	r2, [r0, #40]	; 0x28
                invert = 0b00;
     726:	str	r3, [r0, #16]
                break;
     728:	bx	lr
     72a:	nop
     72c:	.word	0x20000044
     730:	.word	0x2000007c
     734:	.word	0x20000060

00000738 <EncPlex::EncoderBase::setLimits(long, long, bool)>:
        }
    }

    void EncoderBase::setLimits(int32_t min, int32_t max, bool periodic)
    {
        if(min < max)
     738:	cmp	r1, r2
     73a:	blt.n	74a <EncPlex::EncoderBase::setLimits(long, long, bool)+0x12>
            this->maxVal = max;
            this->periodic = periodic;
        }
        else
        {
            this->minVal = INT32_MIN;
     73c:	mov.w	r2, #2147483648	; 0x80000000
            this->maxVal = INT32_MAX;
     740:	mvn.w	r3, #2147483648	; 0x80000000
            this->maxVal = max;
            this->periodic = periodic;
        }
        else
        {
            this->minVal = INT32_MIN;
     744:	str	r2, [r0, #4]
            this->maxVal = INT32_MAX;
     746:	str	r3, [r0, #8]
     748:	bx	lr

    void EncoderBase::setLimits(int32_t min, int32_t max, bool periodic)
    {
        if(min < max)
        {
            this->minVal = min;
     74a:	str	r1, [r0, #4]
            this->maxVal = max;
     74c:	str	r2, [r0, #8]
            this->periodic = periodic;
     74e:	strb	r3, [r0, #12]
     750:	bx	lr
     752:	nop

00000754 <EncPlex::EncoderBase::begin(unsigned long, unsigned long)>:
    };


    void EncoderBase::begin(uint32_t phaseA, uint32_t phaseB)
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
     754:	orr.w	r1, r2, r1, lsl #1
     758:	ldr	r3, [r0, #16]
     75a:	eors	r3, r1
     75c:	strb	r3, [r0, #20]
     75e:	bx	lr

00000760 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>:
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     760:	mov	r3, r0
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     762:	orr.w	r2, r2, r1, lsl #1
     766:	ldr	r0, [r0, #16]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     768:	push	{r4, r5, lr}
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     76a:	ldr	r4, [r3, #40]	; 0x28
     76c:	eors	r0, r2
     76e:	ldrb	r5, [r3, #20]
    {
         curState =  (phaseA << 1 | phaseB) ^ invert ;
    }

    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
     770:	sub	sp, #36	; 0x24
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
     772:	add.w	r4, r4, r5, lsl #2
     776:	ldrb	r2, [r4, r0]
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     778:	and.w	r1, r2, #15
    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB)
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
     77c:	and.w	r2, r2, #240	; 0xf0
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
     780:	cmp	r2, #16
    {
        unsigned input = (phaseA << 1 | phaseB) ^ invert;   // invert signals if necessary

        curState = (*stateMachine)[curState][input];        // get next state depending on new input
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state
     782:	strb	r1, [r3, #20]

        if(direction == UP)
     784:	beq.n	7c0 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x60>
            }
            value = maxVal;
            return false;
        }

        if (direction == DOWN)
     786:	cmp	r2, #32
     788:	beq.n	792 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x32>
        if (direction == ERR)
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
     78a:	movs	r4, #0
    }
     78c:	mov	r0, r4
     78e:	add	sp, #36	; 0x24
     790:	pop	{r4, r5, pc}
            return false;
        }

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
     792:	ldmia.w	r3, {r1, r2}
     796:	cmp	r1, r2
     798:	ble.n	816 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xb6>
            {
                value--;
     79a:	subs	r1, #1
                if (callback != nullptr) callback(value, -1);
     79c:	ldr	r2, [r3, #32]

        if (direction == DOWN)
        {
            if (value > minVal)  // minVal = INT_MIN if no limits set
            {
                value--;
     79e:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     7a0:	cbz	r2, 7b8 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x58>
     7a2:	mov.w	r4, #4294967295
     7a6:	add	r2, sp, #32
     7a8:	str	r1, [sp, #16]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     7aa:	add.w	r0, r3, #24
     7ae:	str.w	r4, [r2, #-12]!
     7b2:	add	r1, sp, #16
     7b4:	ldr	r3, [r3, #36]	; 0x24
     7b6:	blx	r3
                return true;
     7b8:	movs	r4, #1
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     7ba:	mov	r0, r4
     7bc:	add	sp, #36	; 0x24
     7be:	pop	{r4, r5, pc}
        uint8_t direction = curState & 0xF0;                // direction is set if we need to count up / down or got an error
        curState &=  0x0F;                                  // remove the direction info from state

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
     7c0:	ldr	r1, [r3, #0]
     7c2:	ldr	r2, [r3, #8]
     7c4:	cmp	r1, r2
     7c6:	blt.n	7f2 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x92>
            {
                value++;
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
     7c8:	ldrb	r4, [r3, #12]
     7ca:	cmp	r4, #0
     7cc:	beq.n	83c <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xdc>
            {
                value = minVal;
     7ce:	ldr	r1, [r3, #4]
                if (callback != nullptr) callback(value, +1);
     7d0:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, +1);
                return true;
            }
            if (periodic)       // if periodic, wrap to minVal, else stop counting
            {
                value = minVal;
     7d2:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     7d4:	cmp	r2, #0
     7d6:	beq.n	7b8 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x58>
     7d8:	add	r2, sp, #32
     7da:	movs	r5, #1
     7dc:	str	r1, [sp, #8]
     7de:	add.w	r0, r3, #24
     7e2:	str.w	r5, [r2, #-20]!
     7e6:	add	r1, sp, #8
     7e8:	ldr	r3, [r3, #36]	; 0x24
     7ea:	blx	r3
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     7ec:	mov	r0, r4
     7ee:	add	sp, #36	; 0x24
     7f0:	pop	{r4, r5, pc}

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     7f2:	adds	r1, #1
                if (callback != nullptr) callback(value, +1);
     7f4:	ldr	r2, [r3, #32]

        if(direction == UP)
        {
           if (value < maxVal)  // maxVal = INT_MAX if no limits set
            {
                value++;
     7f6:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, +1);
     7f8:	cmp	r2, #0
     7fa:	beq.n	7b8 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x58>
     7fc:	movs	r4, #1
     7fe:	add	r2, sp, #32
     800:	str	r1, [sp, #0]
     802:	add.w	r0, r3, #24
     806:	str.w	r4, [r2, #-28]!
     80a:	mov	r1, sp
     80c:	ldr	r3, [r3, #36]	; 0x24
     80e:	blx	r3
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     810:	mov	r0, r4
     812:	add	sp, #36	; 0x24
     814:	pop	{r4, r5, pc}
            {
                value--;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
     816:	ldrb	r4, [r3, #12]
     818:	cbz	r4, 83c <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xdc>
            {
                value = maxVal;
     81a:	ldr	r1, [r3, #8]
                if (callback != nullptr) callback(value, -1);
     81c:	ldr	r2, [r3, #32]
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            if (periodic)        // if periodic, wrap to maxVal, else stop counting
            {
                value = maxVal;
     81e:	str	r1, [r3, #0]
                if (callback != nullptr) callback(value, -1);
     820:	cmp	r2, #0
     822:	beq.n	7b8 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x58>
     824:	mov.w	r5, #4294967295
     828:	add	r2, sp, #32
     82a:	str	r1, [sp, #24]
     82c:	add.w	r0, r3, #24
     830:	str.w	r5, [r2, #-4]!
     834:	add	r1, sp, #24
     836:	ldr	r3, [r3, #36]	; 0x24
     838:	blx	r3
     83a:	b.n	78c <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x2c>
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     83c:	mov	r0, r4
            {
                value = maxVal;
                if (callback != nullptr) callback(value, -1);
                return true;
            }
            value = minVal;
     83e:	str	r2, [r3, #0]
        {
            if (errCallback != nullptr) errCallback(value);
        }
#endif
        return false;
    }
     840:	add	sp, #36	; 0x24
     842:	pop	{r4, r5, pc}

00000844 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     844:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     846:	ldr	r1, [pc, #80]	; (898 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     848:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     84c:	ldr	r5, [pc, #76]	; (89c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     84e:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     850:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     854:	ldr	r6, [pc, #72]	; (8a0 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     856:	ldr	r2, [pc, #76]	; (8a4 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     858:	add.w	r5, r5, r0, lsl #5
     85c:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     85e:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     860:	mov	r0, r5
     862:	ldrh	r2, [r6, #0]
     864:	bl	1ae4 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     868:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     86a:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     86e:	add	r1, r4
	asm("dsb");
     870:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     874:	ldr	r2, [pc, #48]	; (8a8 <rx_queue_transfer+0x64>)
     876:	str	r3, [r2, #0]
		location += 32;
     878:	adds	r3, #32
	} while (location < end_addr);
     87a:	cmp	r1, r3
     87c:	bhi.n	876 <rx_queue_transfer+0x32>
	asm("dsb");
     87e:	dsb	sy
	asm("isb");
     882:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     886:	movs	r0, #3
     888:	mov	r1, r5
     88a:	bl	1b3c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     88e:	ldr	r3, [pc, #28]	; (8ac <rx_queue_transfer+0x68>)
     890:	mov.w	r2, #131072	; 0x20000
     894:	str	r2, [r3, #0]
     896:	pop	{r3, r4, r5, r6, r7, pc}
     898:	.word	0x20200000
     89c:	.word	0x20001220
     8a0:	.word	0x2000132e
     8a4:	.word	0xe000e18c
     8a8:	.word	0xe000ef5c
     8ac:	.word	0xe000e10c

000008b0 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     8b0:	ldr	r2, [pc, #144]	; (944 <rx_event+0x94>)
     8b2:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     8b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     8b8:	ubfx	r3, r3, #16, #15
     8bc:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     8be:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     8c0:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     8c2:	cmp	r4, #0
     8c4:	ble.n	938 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     8c6:	ldr	r1, [pc, #128]	; (948 <rx_event+0x98>)
		if (head != rx_tail) {
     8c8:	ldr	r2, [pc, #128]	; (94c <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     8ca:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     8cc:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     8ce:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     8d0:	ldr	r0, [pc, #124]	; (950 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     8d2:	ldr	r6, [pc, #128]	; (954 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     8d4:	cmp	r3, r2
     8d6:	beq.n	8e8 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     8d8:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     8dc:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     8e0:	rsb	r2, r7, #512	; 0x200
     8e4:	cmp	r4, r2
     8e6:	bls.n	90e <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     8e8:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     8ea:	movs	r2, #0
     8ec:	ldr	r7, [pc, #104]	; (958 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     8ee:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     8f0:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     8f4:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     8f8:	ldr	r6, [pc, #96]	; (95c <rx_event+0xac>)
     8fa:	ite	ls
     8fc:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     8fe:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     900:	strb	r2, [r1, #0]
		rx_available += len;
     902:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     904:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     906:	add	r4, r2
     908:	str	r4, [r6, #0]
     90a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     90e:	ldr	r3, [pc, #80]	; (960 <rx_event+0xb0>)
     910:	add.w	r0, r7, r8, lsl #9
     914:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     916:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     918:	add.w	r1, r3, r5, lsl #9
     91c:	add	r0, r3
     91e:	bl	2640 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     922:	ldr	r2, [pc, #56]	; (95c <rx_event+0xac>)
				rx_queue_transfer(i);
     924:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     926:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     92a:	ldr	r3, [r2, #0]
     92c:	add	r4, r3
     92e:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     930:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     934:	b.w	844 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     938:	mov	r0, r5
	}
}
     93a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     93e:	b.w	844 <rx_queue_transfer>
     942:	nop
     944:	.word	0x2000132e
     948:	.word	0x20001344
     94c:	.word	0x20001320
     950:	.word	0x20001324
     954:	.word	0x20001330
     958:	.word	0x20001208
     95c:	.word	0x20001340
     960:	.word	0x20200000

00000964 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     964:	ldr	r3, [pc, #120]	; (9e0 <usb_serial_flush_callback+0x7c>)
     966:	ldrb	r2, [r3, #0]
     968:	cbnz	r2, 982 <usb_serial_flush_callback+0x1e>
     96a:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     96e:	ldr	r2, [pc, #116]	; (9e4 <usb_serial_flush_callback+0x80>)
     970:	ldrb	r2, [r2, #0]
     972:	cbz	r2, 982 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     974:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     978:	ldr	r5, [pc, #108]	; (9e8 <usb_serial_flush_callback+0x84>)
     97a:	ldrh	r2, [r5, #0]
     97c:	cbnz	r2, 984 <usb_serial_flush_callback+0x20>
     97e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     982:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     984:	ldr	r6, [pc, #100]	; (9ec <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     986:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     98a:	ldr	r7, [pc, #100]	; (9f0 <usb_serial_flush_callback+0x8c>)
     98c:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     98e:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     990:	ldr	r4, [pc, #96]	; (9f4 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     992:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     996:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     99a:	mov	r0, r7
     99c:	mov	r1, r4
     99e:	bl	1ae4 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     9a2:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     9a6:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     9aa:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     9ae:	ldr	r3, [pc, #72]	; (9f8 <usb_serial_flush_callback+0x94>)
     9b0:	str	r1, [r3, #0]
		location += 32;
     9b2:	adds	r1, #32
	} while (location < end_addr);
     9b4:	cmp	r2, r1
     9b6:	bhi.n	9b0 <usb_serial_flush_callback+0x4c>
	asm("dsb");
     9b8:	dsb	sy
	asm("isb");
     9bc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     9c0:	movs	r0, #4
     9c2:	mov	r1, r7
     9c4:	bl	1b14 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     9c8:	ldrb	r3, [r6, #0]
     9ca:	ldr	r2, [pc, #32]	; (9ec <usb_serial_flush_callback+0x88>)
     9cc:	adds	r3, #1
     9ce:	uxtb	r3, r3
     9d0:	cmp	r3, #3
     9d2:	it	hi
     9d4:	movhi	r3, #0
     9d6:	strb	r3, [r2, #0]
	tx_available = 0;
     9d8:	movs	r3, #0
     9da:	strh	r3, [r5, #0]
     9dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9e0:	.word	0x2000121a
     9e4:	.word	0x20001418
     9e8:	.word	0x20001346
     9ec:	.word	0x2000121b
     9f0:	.word	0x20001360
     9f4:	.word	0x20201000
     9f8:	.word	0xe000ef70

000009fc <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     9fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a00:	sub	sp, #20
     a02:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     a04:	str	r1, [sp, #4]
     a06:	cmp	r1, #0
     a08:	beq.w	b50 <usb_serial_write.part.1+0x154>
     a0c:	movs	r3, #0
     a0e:	ldr.w	r8, [pc, #348]	; b6c <usb_serial_write.part.1+0x170>
     a12:	ldr.w	r9, [pc, #332]	; b60 <usb_serial_write.part.1+0x164>
     a16:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     a18:	ldr	r6, [pc, #312]	; (b54 <usb_serial_write.part.1+0x158>)
     a1a:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     a1e:	ldr.w	sl, [pc, #336]	; b70 <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     a22:	ldr.w	fp, [pc, #336]	; b74 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     a26:	ldr	r2, [pc, #304]	; (b58 <usb_serial_write.part.1+0x15c>)
     a28:	ldrb	r4, [r2, #0]
     a2a:	ldr	r2, [pc, #304]	; (b5c <usb_serial_write.part.1+0x160>)
     a2c:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     a30:	cmp	r3, #0
     a32:	bne.n	b12 <usb_serial_write.part.1+0x116>
     a34:	mov	r5, r3
     a36:	mov	r4, r3
     a38:	b.n	a64 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     a3a:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     a3e:	cbnz	r4, a42 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     a40:	ldr	r5, [r6, #0]
     a42:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     a44:	cmp	r3, #0
     a46:	bne.n	b06 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     a48:	ldr	r3, [r6, #0]
     a4a:	subs	r3, r3, r5
     a4c:	cmp	r3, #120	; 0x78
     a4e:	bhi.n	b44 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     a50:	ldrb.w	r3, [sl]
     a54:	cmp	r3, #0
     a56:	beq.n	b06 <usb_serial_write.part.1+0x10a>
			yield();
     a58:	bl	2338 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     a5c:	ldrh.w	r3, [r8]
     a60:	cmp	r3, #0
     a62:	bne.n	b0e <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     a64:	mov	r0, r7
     a66:	bl	1b60 <usb_transfer_status>
			if (!(status & 0x80)) {
     a6a:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     a6e:	ldr	r2, [pc, #240]	; (b60 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     a70:	bne.n	a3a <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     a72:	mov.w	r3, #2048	; 0x800
     a76:	ldr	r2, [pc, #224]	; (b58 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     a78:	strb.w	r0, [r9]
     a7c:	ldrb	r4, [r2, #0]
     a7e:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     a80:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     a84:	lsls	r4, r4, #11
		if (size >= tx_available) {
     a86:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     a88:	ldr	r1, [pc, #216]	; (b64 <usb_serial_write.part.1+0x168>)
     a8a:	add	r0, r4
		if (size >= tx_available) {
     a8c:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     a8e:	add	r0, r1
		if (size >= tx_available) {
     a90:	bcc.n	b1a <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     a92:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     a94:	ldr	r1, [sp, #8]
     a96:	bl	2640 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     a9a:	movs	r3, #0
     a9c:	mov	r1, r4
     a9e:	mov.w	r2, #2048	; 0x800
     aa2:	mov	r0, r7
     aa4:	bl	1ae4 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     aa8:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     aac:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     ab0:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     ab4:	str.w	r3, [fp]
		location += 32;
     ab8:	adds	r3, #32
	} while (location < end_addr);
     aba:	cmp	r4, r3
     abc:	bhi.n	ab4 <usb_serial_write.part.1+0xb8>
	asm("dsb");
     abe:	dsb	sy
	asm("isb");
     ac2:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     ac6:	movs	r0, #4
     ac8:	mov	r1, r7
     aca:	bl	1b14 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     ace:	ldr	r3, [pc, #136]	; (b58 <usb_serial_write.part.1+0x15c>)
     ad0:	ldr	r2, [pc, #132]	; (b58 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     ad2:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     ad4:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     ad6:	ldr	r0, [pc, #144]	; (b68 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     ad8:	adds	r3, #1
     ada:	uxtb	r3, r3
     adc:	cmp	r3, #3
     ade:	it	hi
     ae0:	movhi	r3, #0
     ae2:	strb	r3, [r2, #0]
			size -= tx_available;
     ae4:	ldrh.w	r2, [r8]
			sent += tx_available;
     ae8:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     aea:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     aee:	add	r3, r2
     af0:	str	r3, [sp, #0]
			data += tx_available;
     af2:	ldr	r3, [sp, #8]
     af4:	add	r3, r2
     af6:	str	r3, [sp, #8]
     af8:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     afa:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     afe:	ldr	r1, [sp, #4]
     b00:	subs	r2, r1, r2
     b02:	str	r2, [sp, #4]
     b04:	bne.n	a26 <usb_serial_write.part.1+0x2a>
     b06:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b08:	add	sp, #20
     b0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b0e:	ldr	r2, [pc, #72]	; (b58 <usb_serial_write.part.1+0x15c>)
     b10:	ldrb	r4, [r2, #0]
     b12:	mov	r2, r3
     b14:	rsb	r0, r3, #2048	; 0x800
     b18:	b.n	a84 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     b1a:	ldr	r4, [sp, #4]
     b1c:	ldr	r1, [sp, #8]
     b1e:	mov	r2, r4
     b20:	str	r3, [sp, #12]
     b22:	bl	2640 <memcpy>
			tx_available -= size;
     b26:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     b28:	ldr	r2, [pc, #60]	; (b68 <usb_serial_write.part.1+0x16c>)
     b2a:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     b2e:	subs	r3, r3, r4
     b30:	strh.w	r3, [r8]
     b34:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     b36:	str.w	r1, [r2, #132]	; 0x84
     b3a:	mov	r0, r3
     b3c:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b3e:	add	sp, #20
     b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     b44:	movs	r3, #1
				return sent;
     b46:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     b48:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     b4a:	add	sp, #20
     b4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     b50:	ldr	r0, [sp, #4]
     b52:	b.n	b08 <usb_serial_write.part.1+0x10c>
     b54:	.word	0x20001424
     b58:	.word	0x2000121b
     b5c:	.word	0x20001360
     b60:	.word	0x20001345
     b64:	.word	0x20201000
     b68:	.word	0x402e0000
     b6c:	.word	0x20001346
     b70:	.word	0x20001418
     b74:	.word	0xe000ef70

00000b78 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     b78:	bx	lr
     b7a:	nop

00000b7c <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     b7c:	ldr	r3, [pc, #196]	; (c44 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     b7e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     b82:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     b84:	ldr	r7, [pc, #192]	; (c48 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     b86:	cmp	r3, #0
     b88:	beq.n	c34 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     b8a:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     b8e:	ldr.w	r8, [pc, #236]	; c7c <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     b92:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     b94:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     b98:	movs	r1, #0
     b9a:	movs	r2, #128	; 0x80
     b9c:	ldr	r0, [pc, #172]	; (c4c <usb_serial_configure+0xd0>)
	tx_head = 0;
     b9e:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     ba0:	ldr	r6, [pc, #172]	; (c50 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     ba2:	bl	2fd4 <memset>
	tx_head = 0;
     ba6:	ldr	r4, [pc, #172]	; (c54 <usb_serial_configure+0xd8>)
	tx_available = 0;
     ba8:	ldr	r3, [pc, #172]	; (c58 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     baa:	mov	r1, r5
     bac:	mov.w	r2, #256	; 0x100
     bb0:	ldr	r0, [pc, #168]	; (c5c <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     bb2:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     bb4:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     bb6:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     bb8:	bl	2fd4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
     bbc:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     bbe:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     bc0:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     bc2:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     bc4:	str	r5, [r6, #8]
     bc6:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     bc8:	ldr	r1, [pc, #148]	; (c60 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     bca:	ldr	r6, [pc, #152]	; (c64 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     bcc:	ldr	r0, [pc, #152]	; (c68 <usb_serial_configure+0xec>)
	rx_available = 0;
     bce:	ldr.w	lr, [pc, #176]	; c80 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     bd2:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     bd4:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     bd6:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     bd8:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     bda:	str	r5, [r6, #0]
     bdc:	str	r5, [r6, #4]
     bde:	str	r5, [r6, #8]
     be0:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     be2:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     be6:	bl	1a7c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     bea:	ldrh.w	r1, [r8]
     bee:	mov	r2, r5
     bf0:	ldr	r3, [pc, #120]	; (c6c <usb_serial_configure+0xf0>)
     bf2:	movs	r0, #3
     bf4:	bl	1a18 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     bf8:	mov	r3, r5
     bfa:	ldrh	r1, [r7, #0]
     bfc:	movs	r2, #1
     bfe:	movs	r0, #4
     c00:	bl	1a7c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     c04:	mov	r0, r4
     c06:	adds	r4, #1
     c08:	bl	844 <rx_queue_transfer>
     c0c:	cmp	r4, #8
     c0e:	bne.n	c04 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     c10:	ldr	r3, [pc, #92]	; (c70 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     c12:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     c14:	ldr	r0, [pc, #92]	; (c74 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     c16:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     c18:	ldr	r4, [pc, #92]	; (c78 <usb_serial_configure+0xfc>)
     c1a:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     c1c:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     c20:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     c24:	ldr.w	r2, [r3, #328]	; 0x148
     c28:	orr.w	r2, r2, #16777216	; 0x1000000
     c2c:	str.w	r2, [r3, #328]	; 0x148
     c30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     c34:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     c36:	ldr.w	r8, [pc, #68]	; c7c <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     c3a:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     c3c:	strh.w	r3, [r8]
     c40:	b.n	b98 <usb_serial_configure+0x1c>
     c42:	nop
     c44:	.word	0x200013f0
     c48:	.word	0x20001218
     c4c:	.word	0x20001360
     c50:	.word	0x20001330
     c54:	.word	0x2000121b
     c58:	.word	0x20001346
     c5c:	.word	0x20001220
     c60:	.word	0x20001344
     c64:	.word	0x20001208
     c68:	.word	0x20001320
     c6c:	.word	0x000008b1
     c70:	.word	0x402e0000
     c74:	.word	0x200013e0
     c78:	.word	0x00000965
     c7c:	.word	0x2000132e
     c80:	.word	0x20001340

00000c84 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     c84:	ldr	r3, [pc, #196]	; (d4c <usb_serial_read+0xc8>)
     c86:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     c8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     c8e:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     c90:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     c92:	ldr	r3, [pc, #188]	; (d50 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     c94:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     c96:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     c98:	cmp	r1, #0
     c9a:	beq.n	d44 <usb_serial_read+0xc0>
     c9c:	ldr	r3, [pc, #180]	; (d54 <usb_serial_read+0xd0>)
     c9e:	uxtb	r4, r4
     ca0:	ldrb	r3, [r3, #0]
     ca2:	cmp	r4, r3
     ca4:	beq.n	d48 <usb_serial_read+0xc4>
     ca6:	mov	sl, r0
     ca8:	movs	r7, #0
     caa:	ldr.w	fp, [pc, #192]	; d6c <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
     cae:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cb0:	ldr	r3, [pc, #164]	; (d58 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
     cb2:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     cb6:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     cb8:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cba:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
     cbc:	ldr	r3, [pc, #156]	; (d5c <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     cbe:	it	cs
     cc0:	movcs	r4, #0
		uint32_t i = rx_list[tail];
     cc2:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cc4:	ldr	r3, [pc, #144]	; (d58 <usb_serial_read+0xd4>)
     cc6:	ldrh.w	lr, [r3, r5, lsl #1]
     cca:	ldr	r3, [pc, #148]	; (d60 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     ccc:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cd0:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     cd4:	ldr	r3, [pc, #140]	; (d64 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     cd6:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     cda:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     cdc:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     cde:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
     ce0:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     ce2:	bcs.n	d18 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
     ce4:	add.w	r1, lr, r5, lsl #9
     ce8:	mov	r2, r8
     cea:	add	r1, r3
     cec:	bl	2640 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
     cf0:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     cf2:	ldr.w	r1, [fp]
     cf6:	mov	r0, r9
			rx_index[i] += len;
     cf8:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     cfc:	rsb	r1, r8, r1
			rx_index[i] += len;
     d00:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     d02:	str.w	r1, [fp]
			rx_index[i] += len;
     d06:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
     d0a:	ldr	r3, [pc, #92]	; (d68 <usb_serial_read+0xe4>)
     d0c:	mov.w	r2, #131072	; 0x20000
     d10:	str	r2, [r3, #0]
	return count;
}
     d12:	add	sp, #12
     d14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     d18:	bl	2640 <memcpy>
			p += avail;
			rx_available -= avail;
     d1c:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     d20:	uxtb	r3, r4
			rx_queue_transfer(i);
     d22:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
     d24:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
     d26:	add	sl, r6
			rx_available -= avail;
     d28:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     d2c:	ldr	r2, [pc, #32]	; (d50 <usb_serial_read+0xcc>)
     d2e:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
     d30:	bl	844 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     d34:	cmp	r9, r7
     d36:	bls.n	d40 <usb_serial_read+0xbc>
     d38:	ldr	r3, [pc, #24]	; (d54 <usb_serial_read+0xd0>)
     d3a:	ldrb	r3, [r3, #0]
     d3c:	cmp	r4, r3
     d3e:	bne.n	cae <usb_serial_read+0x2a>
     d40:	mov	r0, r7
     d42:	b.n	d0a <usb_serial_read+0x86>
     d44:	mov	r0, r1
     d46:	b.n	d0a <usb_serial_read+0x86>
     d48:	movs	r0, #0
     d4a:	b.n	d0a <usb_serial_read+0x86>
     d4c:	.word	0xe000e18c
     d50:	.word	0x20001320
     d54:	.word	0x20001344
     d58:	.word	0x20001208
     d5c:	.word	0x20001324
     d60:	.word	0x20001330
     d64:	.word	0x20200000
     d68:	.word	0xe000e10c
     d6c:	.word	0x20001340

00000d70 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     d70:	ldr	r3, [pc, #44]	; (da0 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
     d72:	ldr	r2, [pc, #48]	; (da4 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     d74:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
     d76:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     d78:	uxtb	r3, r3
	if (tail == rx_head) return -1;
     d7a:	cmp	r3, r2
     d7c:	beq.n	d9a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
     d7e:	adds	r3, #1
	uint32_t i = rx_list[tail];
     d80:	ldr	r0, [pc, #36]	; (da8 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     d82:	ldr	r2, [pc, #40]	; (dac <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     d84:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     d86:	ldr	r1, [pc, #40]	; (db0 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     d88:	it	cs
     d8a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
     d8c:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     d8e:	ldrh.w	r1, [r1, r3, lsl #1]
     d92:	add.w	r3, r2, r3, lsl #9
     d96:	ldrb	r0, [r3, r1]
     d98:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
     d9a:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
     d9e:	bx	lr
     da0:	.word	0x20001320
     da4:	.word	0x20001344
     da8:	.word	0x20001324
     dac:	.word	0x20200000
     db0:	.word	0x20001208

00000db4 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
     db4:	ldr	r3, [pc, #4]	; (dbc <usb_serial_available+0x8>)
     db6:	ldr	r0, [r3, #0]
}
     db8:	bx	lr
     dba:	nop
     dbc:	.word	0x20001340

00000dc0 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
     dc0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
     dc4:	ldr	r6, [pc, #84]	; (e1c <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
     dc6:	ldr	r5, [pc, #88]	; (e20 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     dc8:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
     dca:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     dcc:	uxtb	r4, r4
	while (tail != rx_head) {
     dce:	cmp	r4, r3
     dd0:	beq.n	e16 <usb_serial_flush_input+0x56>
     dd2:	ldr.w	r9, [pc, #84]	; e28 <usb_serial_flush_input+0x68>
     dd6:	ldr.w	fp, [pc, #84]	; e2c <usb_serial_flush_input+0x6c>
     dda:	ldr.w	r8, [pc, #84]	; e30 <usb_serial_flush_input+0x70>
     dde:	ldr	r7, [pc, #68]	; (e24 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
     de0:	adds	r4, #1
     de2:	cmp	r4, #8
     de4:	uxtb.w	sl, r4
     de8:	bls.n	dee <usb_serial_flush_input+0x2e>
     dea:	movs	r4, #0
     dec:	mov	sl, r4
		uint32_t i = rx_list[tail];
     dee:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
     df2:	ldr.w	r2, [fp]
     df6:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
     dfa:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
     dfc:	ldrh.w	r1, [r7, r1, lsl #1]
     e00:	subs	r3, r3, r1
     e02:	subs	r3, r2, r3
     e04:	str.w	r3, [fp]
		rx_queue_transfer(i);
     e08:	bl	844 <rx_queue_transfer>
		rx_tail = tail;
     e0c:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
     e10:	ldrb	r3, [r5, #0]
     e12:	cmp	r4, r3
     e14:	bne.n	de0 <usb_serial_flush_input+0x20>
     e16:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e1a:	nop
     e1c:	.word	0x20001320
     e20:	.word	0x20001344
     e24:	.word	0x20001208
     e28:	.word	0x20001324
     e2c:	.word	0x20001340
     e30:	.word	0x20001330

00000e34 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     e34:	push	{lr}
     e36:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
     e38:	movs	r1, #1
     e3a:	add.w	r0, sp, #7
     e3e:	bl	c84 <usb_serial_read>
     e42:	cbz	r0, e4e <usb_serial_getchar+0x1a>
     e44:	ldrb.w	r0, [sp, #7]
	return -1;
}
     e48:	add	sp, #12
     e4a:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
     e4e:	mov.w	r0, #4294967295
     e52:	b.n	e48 <usb_serial_getchar+0x14>

00000e54 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     e54:	ldr	r3, [pc, #36]	; (e7c <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     e56:	push	{lr}
     e58:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     e5a:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     e5c:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     e60:	cbnz	r3, e6c <usb_serial_putchar+0x18>
     e62:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     e66:	add	sp, #12
     e68:	ldr.w	pc, [sp], #4
     e6c:	movs	r1, #1
     e6e:	add.w	r0, sp, #7
     e72:	bl	9fc <usb_serial_write.part.1>
     e76:	add	sp, #12
     e78:	ldr.w	pc, [sp], #4
     e7c:	.word	0x20001418

00000e80 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     e80:	ldr	r3, [pc, #16]	; (e94 <usb_serial_write+0x14>)
     e82:	ldrb	r3, [r3, #0]
     e84:	and.w	r2, r3, #255	; 0xff
     e88:	cbz	r3, e8e <usb_serial_write+0xe>
     e8a:	b.w	9fc <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     e8e:	mov	r0, r2
     e90:	bx	lr
     e92:	nop
     e94:	.word	0x20001418

00000e98 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     e98:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     e9c:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     e9e:	ldr.w	r8, [pc, #64]	; ee0 <usb_serial_write_buffer_free+0x48>
     ea2:	movs	r3, #1
     ea4:	ldr	r5, [pc, #48]	; (ed8 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     ea6:	mov	r7, r4
     ea8:	ldr	r6, [pc, #48]	; (edc <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     eaa:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     eae:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     eb0:	mov	r0, r5
     eb2:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     eb4:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     eb6:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     eba:	beq.n	ec8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     ebc:	bl	1b60 <usb_transfer_status>
     ec0:	lsls	r3, r0, #24
     ec2:	it	pl
     ec4:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     ec8:	cmp	r4, #4
     eca:	bne.n	eae <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     ecc:	movs	r3, #0
	return sum;
}
     ece:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     ed0:	strb.w	r3, [r8]
	return sum;
}
     ed4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ed8:	.word	0x20001360
     edc:	.word	0x2000121b
     ee0:	.word	0x2000121a

00000ee4 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     ee4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
     ee8:	ldr	r3, [pc, #124]	; (f68 <usb_serial_flush_output+0x84>)
     eea:	ldrb	r3, [r3, #0]
     eec:	cbz	r3, ef4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
     eee:	ldr	r5, [pc, #124]	; (f6c <usb_serial_flush_output+0x88>)
     ef0:	ldrh	r2, [r5, #0]
     ef2:	cbnz	r2, ef8 <usb_serial_flush_output+0x14>
     ef4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     ef8:	ldr.w	r8, [pc, #132]	; f80 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     efc:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f00:	ldr	r6, [pc, #108]	; (f70 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f02:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     f06:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f0a:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     f0c:	ldr	r4, [pc, #100]	; (f74 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f0e:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f10:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f14:	ldr	r7, [pc, #96]	; (f78 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     f16:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f1a:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f1c:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     f20:	mov	r1, r4
     f22:	bl	1ae4 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     f26:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     f2a:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     f2e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     f32:	ldr	r3, [pc, #72]	; (f7c <usb_serial_flush_output+0x98>)
     f34:	str	r1, [r3, #0]
		location += 32;
     f36:	adds	r1, #32
	} while (location < end_addr);
     f38:	cmp	r2, r1
     f3a:	bhi.n	f34 <usb_serial_flush_output+0x50>
	asm("dsb");
     f3c:	dsb	sy
	asm("isb");
     f40:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     f44:	movs	r0, #4
     f46:	mov	r1, r6
     f48:	bl	1b14 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     f4c:	ldrb.w	r3, [r8]
     f50:	ldr	r2, [pc, #44]	; (f80 <usb_serial_flush_output+0x9c>)
     f52:	adds	r3, #1
     f54:	uxtb	r3, r3
     f56:	cmp	r3, #3
     f58:	it	hi
     f5a:	movhi	r3, #0
     f5c:	strb	r3, [r2, #0]
	tx_available = 0;
     f5e:	movs	r3, #0
     f60:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
     f62:	strb	r3, [r7, #0]
     f64:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f68:	.word	0x20001418
     f6c:	.word	0x20001346
     f70:	.word	0x20001360
     f74:	.word	0x20201000
     f78:	.word	0x2000121a
     f7c:	.word	0xe000ef70
     f80:	.word	0x2000121b

00000f84 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     f84:	ldr	r2, [pc, #600]	; (11e0 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     f86:	ldr	r3, [pc, #604]	; (11e4 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     f88:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     f8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     f8e:	ldr	r4, [pc, #600]	; (11e8 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     f90:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     f94:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     f96:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     f98:	bls.n	fd4 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     f9a:	ldr	r3, [pc, #592]	; (11ec <set_arm_clock+0x268>)
     f9c:	cmp	r0, r3
     f9e:	bls.w	11cc <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     fa2:	ldr	r3, [pc, #588]	; (11f0 <set_arm_clock+0x26c>)
     fa4:	movw	r5, #1575	; 0x627
     fa8:	ldr	r7, [pc, #584]	; (11f4 <set_arm_clock+0x270>)
     faa:	add	r3, r0
     fac:	ldr	r4, [pc, #584]	; (11f8 <set_arm_clock+0x274>)
     fae:	lsrs	r2, r3, #8
     fb0:	umull	r3, r2, r7, r2
     fb4:	lsrs	r3, r2, #7
     fb6:	add.w	r3, r3, r3, lsl #2
     fba:	add.w	r2, r3, r3, lsl #2
     fbe:	addw	r3, r2, #1250	; 0x4e2
     fc2:	cmp	r3, r5
     fc4:	it	cs
     fc6:	movcs	r3, r5
     fc8:	sub.w	r3, r3, #800	; 0x320
     fcc:	umull	r3, r5, r4, r3
     fd0:	lsrs	r5, r5, #3
     fd2:	b.n	fde <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     fd4:	ldr	r5, [pc, #548]	; (11fc <set_arm_clock+0x278>)
     fd6:	cmp	r0, r5
     fd8:	ite	ls
     fda:	movls	r5, #6
     fdc:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     fde:	ldr	r2, [pc, #516]	; (11e4 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     fe0:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     fe4:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     fe8:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     fea:	orr.w	r3, r3, #192	; 0xc0
     fee:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     ff2:	bcs.n	100a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     ff4:	ldr	r3, [pc, #496]	; (11e8 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     ff6:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     ffa:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     ffc:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     ffe:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1000:	ldr	r3, [r2, #0]
    1002:	cmp	r3, #0
    1004:	bge.n	1000 <set_arm_clock+0x7c>
    1006:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    100a:	ands.w	r3, lr, #33554432	; 0x2000000
    100e:	bne.n	1074 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1010:	ldr	r4, [pc, #492]	; (1200 <set_arm_clock+0x27c>)
    1012:	ldr	r2, [pc, #496]	; (1204 <set_arm_clock+0x280>)
    1014:	ldr.w	ip, [r4, #16]
    1018:	mov	r4, r2
    101a:	and.w	r2, ip, r2
    101e:	cmp	r2, r4
    1020:	itet	eq
    1022:	moveq.w	r3, #402653184	; 0x18000000
    1026:	movne.w	r2, #4096	; 0x1000
    102a:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    102c:	eor.w	r4, lr, r3
    1030:	tst.w	r4, #939524096	; 0x38000000
    1034:	beq.n	1048 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1036:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    103a:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    103e:	ldr	r4, [pc, #420]	; (11e4 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1040:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1044:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1048:	eor.w	r3, r1, r2
    104c:	tst.w	r3, #12288	; 0x3000
    1050:	beq.n	1064 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1052:	ldr	r3, [pc, #400]	; (11e4 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1054:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1058:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    105a:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    105c:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    105e:	ldr	r3, [r2, #72]	; 0x48
    1060:	lsls	r4, r3, #28
    1062:	bmi.n	105e <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1064:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1068:	ldr	r2, [pc, #376]	; (11e4 <set_arm_clock+0x260>)
    106a:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    106e:	ldr	r3, [r2, #72]	; 0x48
    1070:	lsls	r1, r3, #26
    1072:	bmi.n	106e <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1074:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1076:	ldr	r4, [pc, #400]	; (1208 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1078:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    107a:	mul.w	r3, r1, r2
    107e:	mul.w	r3, r0, r3
    1082:	cmp	r3, r4
    1084:	bhi.n	109a <set_arm_clock+0x116>
		if (div_arm < 8) {
    1086:	cmp	r2, #7
    1088:	bhi.w	11b6 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    108c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    108e:	mul.w	r3, r1, r2
    1092:	mul.w	r3, r0, r3
    1096:	cmp	r3, r4
    1098:	bls.n	1086 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    109a:	ldr	r0, [pc, #368]	; (120c <set_arm_clock+0x288>)
    109c:	ldr	r4, [pc, #368]	; (1210 <set_arm_clock+0x28c>)
    109e:	add	r0, r3
    10a0:	umull	r0, r3, r4, r0
    10a4:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    10a6:	cmp	r3, #108	; 0x6c
    10a8:	bhi.w	11c2 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    10ac:	cmp	r3, #53	; 0x35
    10ae:	bhi.w	11d0 <set_arm_clock+0x24c>
    10b2:	ldr.w	r8, [pc, #392]	; 123c <set_arm_clock+0x2b8>
    10b6:	movs	r3, #54	; 0x36
    10b8:	ldr	r0, [pc, #344]	; (1214 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    10ba:	ldr.w	ip, [pc, #324]	; 1200 <set_arm_clock+0x27c>
    10be:	ldr	r4, [pc, #344]	; (1218 <set_arm_clock+0x294>)
    10c0:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    10c4:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    10c8:	and.w	r4, r9, r4
    10cc:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    10ce:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    10d2:	beq.n	10ec <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    10d4:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    10d8:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    10dc:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    10de:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    10e2:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    10e6:	ldr	r3, [r4, #0]
    10e8:	cmp	r3, #0
    10ea:	bge.n	10e6 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    10ec:	ldr.w	ip, [pc, #244]	; 11e4 <set_arm_clock+0x260>
    10f0:	subs	r2, #1
    10f2:	ldr.w	r3, [ip, #16]
    10f6:	and.w	r3, r3, #7
    10fa:	cmp	r3, r2
    10fc:	beq.n	110e <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    10fe:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1102:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1104:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1108:	ldr	r3, [r4, #72]	; 0x48
    110a:	lsls	r3, r3, #15
    110c:	bmi.n	1108 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    110e:	subs	r1, #1
    1110:	lsls	r1, r1, #10
    1112:	eor.w	r3, lr, r1
    1116:	tst.w	r3, #7168	; 0x1c00
    111a:	beq.n	1136 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    111c:	ldr	r3, [pc, #196]	; (11e4 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    111e:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1122:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1126:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1128:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    112c:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1130:	ldr	r3, [r2, #72]	; 0x48
    1132:	lsls	r1, r3, #30
    1134:	bmi.n	1130 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1136:	ldr	r3, [pc, #228]	; (121c <set_arm_clock+0x298>)
    1138:	ldr	r1, [pc, #228]	; (1220 <set_arm_clock+0x29c>)
    113a:	add	r3, r0
    113c:	lsrs	r3, r3, #7
    113e:	umull	r3, r1, r1, r3
    1142:	lsrs	r1, r1, #12
    1144:	cmp	r1, #4
    1146:	it	cs
    1148:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    114a:	subs	r3, r1, #1
    114c:	lsls	r3, r3, #8
    114e:	eor.w	r2, lr, r3
    1152:	tst.w	r2, #768	; 0x300
    1156:	beq.n	1168 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1158:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    115c:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1160:	ldr	r2, [pc, #128]	; (11e4 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1162:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1166:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1168:	ldr	r3, [pc, #120]	; (11e4 <set_arm_clock+0x260>)
    116a:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    116c:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    116e:	bic.w	r4, r4, #33554432	; 0x2000000
    1172:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1174:	ldr	r3, [r2, #72]	; 0x48
    1176:	lsls	r3, r3, #26
    1178:	bmi.n	1174 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    117a:	ldr	r3, [pc, #168]	; (1224 <set_arm_clock+0x2a0>)
    117c:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1180:	ldr	r4, [pc, #164]	; (1228 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1182:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1184:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1188:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    118a:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    118e:	ldr	r4, [pc, #156]	; (122c <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1190:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1194:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1198:	ldr	r2, [pc, #148]	; (1230 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    119a:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    119c:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    119e:	bcs.n	11b2 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    11a0:	ldr	r3, [pc, #68]	; (11e8 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    11a2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    11a6:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    11a8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    11aa:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    11ac:	ldr	r3, [r2, #0]
    11ae:	cmp	r3, #0
    11b0:	bge.n	11ac <set_arm_clock+0x228>
	}

	return frequency;
}
    11b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    11b6:	cmp	r1, #4
    11b8:	bhi.w	109a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    11bc:	adds	r1, #1
				div_arm = 1;
    11be:	movs	r2, #1
    11c0:	b.n	107a <set_arm_clock+0xf6>
    11c2:	ldr.w	r8, [pc, #124]	; 1240 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    11c6:	movs	r3, #108	; 0x6c
    11c8:	ldr	r0, [pc, #104]	; (1234 <set_arm_clock+0x2b0>)
    11ca:	b.n	10ba <set_arm_clock+0x136>
    11cc:	movs	r5, #18
    11ce:	b.n	fde <set_arm_clock+0x5a>
    11d0:	ldr	r0, [pc, #100]	; (1238 <set_arm_clock+0x2b4>)
    11d2:	ldr.w	r8, [pc, #112]	; 1244 <set_arm_clock+0x2c0>
    11d6:	mul.w	r0, r0, r3
    11da:	orr.w	r8, r3, r8
    11de:	b.n	10ba <set_arm_clock+0x136>
    11e0:	.word	0x1f78a400
    11e4:	.word	0x400fc000
    11e8:	.word	0x40080000
    11ec:	.word	0x23c34600
    11f0:	.word	0xdc3cba00
    11f4:	.word	0x004cb223
    11f8:	.word	0x51eb851f
    11fc:	.word	0x016e3600
    1200:	.word	0x400d8000
    1204:	.word	0x80003040
    1208:	.word	0x269fb1ff
    120c:	.word	0x005b8d80
    1210:	.word	0x165e9f81
    1214:	.word	0x269fb200
    1218:	.word	0x8001307f
    121c:	.word	0x08f0d17f
    1220:	.word	0x00e5109f
    1224:	.word	0x431bde83
    1228:	.word	0x2000075c
    122c:	.word	0x20000758
    1230:	.word	0x20001420
    1234:	.word	0x4d3f6400
    1238:	.word	0x00b71b00
    123c:	.word	0x80002036
    1240:	.word	0x8000206c
    1244:	.word	0x80002000

00001248 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1248:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    124a:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    124c:	cbz	r3, 1256 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    124e:	ldr	r3, [r2, #4]
    1250:	orr.w	r3, r3, #32768	; 0x8000
    1254:	str	r3, [r2, #4]
	}
	__disable_irq();
    1256:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1258:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    125a:	cbz	r4, 1284 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    125c:	ldr	r3, [pc, #64]	; (12a0 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    125e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1260:	ldr.w	r4, [r3, #432]	; 0x1b0
    1264:	tst	r4, r1
    1266:	bne.n	1298 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1268:	ldr.w	r4, [r3, #320]	; 0x140
    126c:	orr.w	r4, r4, #16384	; 0x4000
    1270:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1274:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    1278:	ldr.w	r4, [r3, #320]	; 0x140
    127c:	lsls	r4, r4, #17
    127e:	bpl.n	1268 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1280:	tst	r1, r5
    1282:	bne.n	1298 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    1284:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    1286:	ldr	r4, [pc, #24]	; (12a0 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1288:	str	r2, [r0, #8]
	endpoint->status = 0;
    128a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    128c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1290:	orrs	r1, r3
    1292:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1296:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    1298:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    129a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    129c:	pop	{r4, r5}
    129e:	bx	lr
    12a0:	.word	0x402e0000

000012a4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    12a4:	push	{r4, r5, r6, lr}
    12a6:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    12a8:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    12aa:	cbz	r0, 12d2 <run_callbacks+0x2e>
    12ac:	mov	r2, r0
    12ae:	movs	r4, #0
    12b0:	b.n	12ba <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    12b2:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    12b4:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    12b6:	cmp	r2, #1
    12b8:	beq.n	12d4 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    12ba:	ldr	r3, [r2, #4]
    12bc:	ands.w	r3, r3, #128	; 0x80
    12c0:	beq.n	12b2 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    12c2:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    12c4:	cbz	r4, 12d2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    12c6:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    12c8:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    12ca:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    12cc:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    12ce:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    12d0:	bne.n	12c6 <run_callbacks+0x22>
    12d2:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    12d4:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    12d6:	str	r3, [r6, #52]	; 0x34
			break;
    12d8:	b.n	12c4 <run_callbacks+0x20>
    12da:	nop

000012dc <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    12dc:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    12de:	cbnz	r1, 131e <endpoint0_transmit.constprop.1+0x42>
    12e0:	ldr	r4, [pc, #136]	; (136c <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12e2:	ldr	r1, [pc, #140]	; (1370 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    12e4:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    12e6:	ldr	r3, [pc, #140]	; (1374 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12e8:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12ea:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    12ec:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12ee:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    12f0:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12f2:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    12f4:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    12f6:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    12fa:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    12fc:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1300:	ldr	r5, [pc, #116]	; (1378 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1302:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1306:	ldr.w	r1, [r3, #432]	; 0x1b0
    130a:	orr.w	r1, r1, #1
    130e:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1312:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1314:	ldr.w	r3, [r2, #432]	; 0x1b0
    1318:	cmp	r3, #0
    131a:	bne.n	1314 <endpoint0_transmit.constprop.1+0x38>
}
    131c:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    131e:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1320:	ldr	r3, [pc, #88]	; (137c <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1322:	ldr	r5, [pc, #80]	; (1374 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1324:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1326:	ldr	r4, [pc, #68]	; (136c <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1328:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    132c:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    132e:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1330:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1332:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1336:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1338:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    133c:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    133e:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1342:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1346:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    134a:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    134c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    134e:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1352:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1356:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    135a:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    135c:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    135e:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1362:	ldr.w	r3, [r2, #432]	; 0x1b0
    1366:	cmp	r3, #0
    1368:	bne.n	1362 <endpoint0_transmit.constprop.1+0x86>
    136a:	b.n	12e2 <endpoint0_transmit.constprop.1+0x6>
    136c:	.word	0x20003000
    1370:	.word	0x20002020
    1374:	.word	0x402e0000
    1378:	.word	0x200013f4
    137c:	.word	0x20002000

00001380 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    1380:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1384:	ldr	r4, [pc, #752]	; (1678 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    1386:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1388:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    138c:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1390:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1394:	beq.n	1454 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1396:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    139a:	cmp	r3, #0
    139c:	beq.n	144a <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    139e:	mov.w	fp, #65537	; 0x10001
    13a2:	ldr.w	r9, [pc, #764]	; 16a0 <isr+0x320>
    13a6:	ldr	r6, [pc, #724]	; (167c <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    13a8:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    13aa:	mov	sl, fp
    13ac:	ldr	r0, [r6, #40]	; 0x28
    13ae:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    13b0:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    13b4:	ldr.w	r3, [r4, #320]	; 0x140
    13b8:	orr.w	r3, r3, #8192	; 0x2000
    13bc:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    13c0:	ldr.w	r3, [r4, #320]	; 0x140
    13c4:	lsls	r7, r3, #18
    13c6:	bpl.n	13b4 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    13c8:	ldr.w	r3, [r5, #320]	; 0x140
    13cc:	bic.w	r3, r3, #8192	; 0x2000
    13d0:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    13d4:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    13d8:	ldr.w	r3, [r4, #436]	; 0x1b4
    13dc:	ands.w	r3, r3, #65537	; 0x10001
    13e0:	bne.n	13d8 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    13e2:	uxth	r1, r0
    13e4:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    13e8:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    13ec:	cmp	r1, r7
    13ee:	bhi.w	153c <isr+0x1bc>
    13f2:	cmp.w	r1, #1664	; 0x680
    13f6:	bcs.w	17d0 <isr+0x450>
    13fa:	cmp.w	r1, #258	; 0x102
    13fe:	beq.w	16d6 <isr+0x356>
    1402:	bhi.w	15ce <isr+0x24e>
    1406:	cmp	r1, #128	; 0x80
    1408:	beq.w	16bc <isr+0x33c>
    140c:	cmp	r1, #130	; 0x82
    140e:	bne.w	15be <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1412:	uxth	r2, r2
    1414:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1418:	cmp	r1, #7
    141a:	bhi.w	15be <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    141e:	lsls	r1, r1, #2
    1420:	ldr	r0, [pc, #604]	; (1680 <isr+0x300>)
		reply_buffer[0] = 0;
    1422:	ldr	r7, [pc, #608]	; (1684 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1424:	add	r0, r1
    1426:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1428:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    142a:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    142c:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    142e:	bpl.w	184e <isr+0x4ce>
    1432:	lsls	r2, r1, #15
    1434:	bpl.n	143a <isr+0xba>
			reply_buffer[0] = 1;
    1436:	movs	r3, #1
    1438:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    143a:	movs	r1, #2
    143c:	ldr	r0, [pc, #580]	; (1684 <isr+0x304>)
    143e:	bl	12dc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1442:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1446:	cmp	r3, #0
    1448:	bne.n	13ac <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    144a:	ldr	r2, [pc, #556]	; (1678 <isr+0x2f8>)
    144c:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1450:	cmp	r3, #0
    1452:	bne.n	14f6 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1454:	tst.w	r8, #64	; 0x40
    1458:	beq.n	148c <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    145a:	ldr	r3, [pc, #540]	; (1678 <isr+0x2f8>)
    145c:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1460:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1462:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1466:	ldr.w	r1, [r3, #444]	; 0x1bc
    146a:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    146e:	ldr.w	r4, [r2, #432]	; 0x1b0
    1472:	ldr	r3, [pc, #516]	; (1678 <isr+0x2f8>)
    1474:	cmp	r4, #0
    1476:	bne.n	146e <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1478:	mov.w	r2, #4294967295
    147c:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1480:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1484:	bl	b78 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    1488:	ldr	r3, [pc, #508]	; (1688 <isr+0x308>)
    148a:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    148c:	tst.w	r8, #16777216	; 0x1000000
    1490:	beq.n	149a <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1492:	ldr	r3, [pc, #504]	; (168c <isr+0x30c>)
    1494:	ldr	r3, [r3, #0]
    1496:	cbz	r3, 149a <isr+0x11a>
    1498:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    149a:	tst.w	r8, #33554432	; 0x2000000
    149e:	beq.n	14a8 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    14a0:	ldr	r3, [pc, #492]	; (1690 <isr+0x310>)
    14a2:	ldr	r3, [r3, #0]
    14a4:	cbz	r3, 14a8 <isr+0x128>
    14a6:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    14a8:	tst.w	r8, #4
    14ac:	beq.n	14c0 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    14ae:	ldr	r3, [pc, #456]	; (1678 <isr+0x2f8>)
    14b0:	ldr.w	r3, [r3, #388]	; 0x184
    14b4:	ands.w	r3, r3, #512	; 0x200
    14b8:	beq.n	1536 <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    14ba:	ldr	r3, [pc, #472]	; (1694 <isr+0x314>)
    14bc:	movs	r2, #1
    14be:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    14c0:	ldr	r3, [pc, #436]	; (1678 <isr+0x2f8>)
    14c2:	ldr.w	r2, [r3, #328]	; 0x148
    14c6:	lsls	r2, r2, #24
    14c8:	bpl.n	14f0 <isr+0x170>
    14ca:	tst.w	r8, #128	; 0x80
    14ce:	beq.n	14f0 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    14d0:	ldr	r1, [pc, #452]	; (1698 <isr+0x318>)
    14d2:	ldrb	r2, [r1, #0]
    14d4:	cbz	r2, 14f0 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    14d6:	subs	r2, #1
    14d8:	uxtb	r2, r2
    14da:	strb	r2, [r1, #0]
    14dc:	cbnz	r2, 14f0 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    14de:	ldr	r1, [pc, #444]	; (169c <isr+0x31c>)
    14e0:	ldrb	r2, [r1, #0]
    14e2:	and.w	r2, r2, #251	; 0xfb
    14e6:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    14e8:	cmp	r2, #0
    14ea:	beq.w	1952 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    14ee:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    14f0:	add	sp, #12
    14f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    14f6:	ldr	r1, [pc, #424]	; (16a0 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    14f8:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    14fc:	ldr	r0, [r1, #0]
    14fe:	tst	r3, r0
    1500:	bne.w	18da <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1504:	ldr	r2, [pc, #384]	; (1688 <isr+0x308>)
    1506:	ldr	r4, [r2, #0]
			if (completestatus) {
    1508:	ands	r4, r3
    150a:	beq.n	1454 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    150c:	lsls	r3, r4, #29
    150e:	bmi.w	1970 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    1512:	lsls	r7, r4, #13
    1514:	bmi.w	1968 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1518:	lsls	r6, r4, #28
    151a:	bmi.w	1980 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    151e:	lsls	r5, r4, #12
    1520:	bmi.w	1978 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1524:	lsls	r0, r4, #27
    1526:	bmi.w	1960 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    152a:	lsls	r1, r4, #11
    152c:	bpl.n	1454 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    152e:	ldr	r0, [pc, #372]	; (16a4 <isr+0x324>)
    1530:	bl	12a4 <run_callbacks>
    1534:	b.n	1454 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1536:	ldr	r2, [pc, #348]	; (1694 <isr+0x314>)
    1538:	strb	r3, [r2, #0]
    153a:	b.n	14c0 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    153c:	movw	r7, #8225	; 0x2021
    1540:	cmp	r1, r7
    1542:	beq.n	15b6 <isr+0x236>
    1544:	bhi.n	1626 <isr+0x2a6>
    1546:	cmp.w	r1, #2176	; 0x880
    154a:	beq.w	17b4 <isr+0x434>
    154e:	cmp.w	r1, #2304	; 0x900
    1552:	bne.n	15be <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1554:	ubfx	r0, r0, #16, #8
    1558:	ldr	r2, [pc, #332]	; (16a8 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    155a:	ldr	r1, [pc, #336]	; (16ac <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    155c:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    155e:	ldr	r7, [pc, #336]	; (16b0 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1560:	ldr	r2, [pc, #336]	; (16b4 <isr+0x334>)
    1562:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1564:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1568:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    156c:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    1570:	bl	b7c <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1574:	ldr	r2, [pc, #320]	; (16b8 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1576:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1578:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    157a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    157c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    157e:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1580:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1582:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1586:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1588:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    158c:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    158e:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1592:	ldr.w	r2, [r5, #432]	; 0x1b0
    1596:	orr.w	r2, r2, #65536	; 0x10000
    159a:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    159e:	ldr	r2, [pc, #256]	; (16a0 <isr+0x320>)
    15a0:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    15a2:	ldr.w	r3, [r4, #432]	; 0x1b0
    15a6:	cmp	r3, #0
    15a8:	bne.n	15a2 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    15aa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    15ae:	cmp	r3, #0
    15b0:	bne.w	13ac <isr+0x2c>
    15b4:	b.n	144a <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    15b6:	lsrs	r1, r2, #16
    15b8:	cmp	r1, #7
    15ba:	beq.w	1856 <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    15be:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    15c2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    15c6:	cmp	r3, #0
    15c8:	bne.w	13ac <isr+0x2c>
    15cc:	b.n	144a <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    15ce:	movw	r7, #770	; 0x302
    15d2:	cmp	r1, r7
    15d4:	beq.w	174e <isr+0x3ce>
    15d8:	cmp.w	r1, #1280	; 0x500
    15dc:	bne.n	15be <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15de:	ldr	r2, [pc, #216]	; (16b8 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15e0:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15e2:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15e4:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15e6:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15e8:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15ea:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    15ee:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15f0:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    15f4:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    15f6:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    15fa:	ldr.w	r3, [r5, #432]	; 0x1b0
    15fe:	orr.w	r3, r3, #65536	; 0x10000
    1602:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1606:	ldr.w	r3, [r4, #432]	; 0x1b0
    160a:	cmp	r3, #0
    160c:	bne.n	1606 <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    160e:	lsrs	r3, r0, #16
    1610:	lsls	r3, r3, #25
    1612:	orr.w	r3, r3, #16777216	; 0x1000000
    1616:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    161a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    161e:	cmp	r3, #0
    1620:	bne.w	13ac <isr+0x2c>
    1624:	b.n	144a <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1626:	movw	r3, #8737	; 0x2221
    162a:	cmp	r1, r3
    162c:	beq.w	173c <isr+0x3bc>
    1630:	movw	r3, #8993	; 0x2321
    1634:	cmp	r1, r3
    1636:	bne.n	15be <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1638:	ldr	r3, [pc, #124]	; (16b8 <isr+0x338>)
    163a:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    163c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    163e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1640:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1642:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1644:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1648:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    164a:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    164e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1650:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1652:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1656:	ldr.w	r3, [r4, #432]	; 0x1b0
    165a:	orr.w	r3, r3, #65536	; 0x10000
    165e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1662:	ldr.w	r3, [r4, #432]	; 0x1b0
    1666:	cmp	r3, #0
    1668:	bne.n	1662 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    166a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    166e:	cmp	r3, #0
    1670:	bne.w	13ac <isr+0x2c>
    1674:	b.n	144a <isr+0xca>
    1676:	nop
    1678:	.word	0x402e0000
    167c:	.word	0x20003000
    1680:	.word	0x402e01c0
    1684:	.word	0x20001408
    1688:	.word	0x200013e4
    168c:	.word	0x200013e0
    1690:	.word	0x200013ec
    1694:	.word	0x200013f0
    1698:	.word	0x200013f8
    169c:	.word	0x200013e8
    16a0:	.word	0x200013f4
    16a4:	.word	0x20003240
    16a8:	.word	0x20001418
    16ac:	.word	0x000200c8
    16b0:	.word	0x00cc0002
    16b4:	.word	0x00c80002
    16b8:	.word	0x20002020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    16bc:	ldr	r2, [pc, #744]	; (19a8 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    16be:	movs	r1, #2
    16c0:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    16c2:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    16c4:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    16c6:	bl	12dc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    16ca:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    16ce:	cmp	r3, #0
    16d0:	bne.w	13ac <isr+0x2c>
    16d4:	b.n	144a <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    16d6:	uxth	r2, r2
    16d8:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    16dc:	cmp	r3, #7
    16de:	bhi.w	15be <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    16e2:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    16e6:	mov.w	r3, r3, lsl #2
    16ea:	ldr	r2, [pc, #704]	; (19ac <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16ec:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    16f0:	add	r2, r3
    16f2:	ldr	r3, [r2, #0]
    16f4:	ite	ne
    16f6:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    16fa:	biceq.w	r3, r3, #1
    16fe:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1700:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1702:	ldr	r3, [pc, #684]	; (19b0 <isr+0x630>)
    1704:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1706:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1708:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    170a:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    170e:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1710:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1714:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1716:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1718:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    171c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1720:	orr.w	r3, r3, #65536	; 0x10000
    1724:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1728:	ldr.w	r3, [r4, #432]	; 0x1b0
    172c:	cmp	r3, #0
    172e:	bne.n	1728 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1730:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1734:	cmp	r3, #0
    1736:	bne.w	13ac <isr+0x2c>
    173a:	b.n	144a <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    173c:	ldr	r3, [pc, #628]	; (19b4 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    173e:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1742:	ldr	r2, [pc, #628]	; (19b8 <isr+0x638>)
    1744:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    1746:	ldr	r3, [pc, #628]	; (19bc <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1748:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    174a:	strb	r0, [r3, #0]
    174c:	b.n	1638 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    174e:	uxth	r2, r2
    1750:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1754:	cmp	r3, #7
    1756:	bhi.w	15be <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    175a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    175e:	mov.w	r3, r3, lsl #2
    1762:	ldr	r2, [pc, #584]	; (19ac <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1764:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1768:	add	r2, r3
    176a:	ldr	r3, [r2, #0]
    176c:	ite	ne
    176e:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1772:	orreq.w	r3, r3, #1
    1776:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1778:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    177a:	ldr	r3, [pc, #564]	; (19b0 <isr+0x630>)
    177c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    177e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1780:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1782:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1786:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1788:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    178c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    178e:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1790:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1794:	ldr.w	r3, [r4, #432]	; 0x1b0
    1798:	orr.w	r3, r3, #65536	; 0x10000
    179c:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    17a0:	ldr.w	r3, [r4, #432]	; 0x1b0
    17a4:	cmp	r3, #0
    17a6:	bne.n	17a0 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    17a8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    17ac:	cmp	r3, #0
    17ae:	bne.w	13ac <isr+0x2c>
    17b2:	b.n	144a <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    17b4:	ldr	r2, [pc, #520]	; (19c0 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    17b6:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    17b8:	ldr	r3, [pc, #492]	; (19a8 <isr+0x628>)
    17ba:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    17bc:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    17be:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    17c0:	bl	12dc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    17c4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    17c8:	cmp	r3, #0
    17ca:	bne.w	13ac <isr+0x2c>
    17ce:	b.n	144a <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    17d0:	ldr	r3, [pc, #496]	; (19c4 <isr+0x644>)
    17d2:	ldr	r1, [r3, #4]
    17d4:	cmp	r1, #0
    17d6:	beq.w	15be <isr+0x23e>
    17da:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    17dc:	uxth.w	lr, r2
    17e0:	b.n	17ec <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    17e2:	adds	r3, #12
    17e4:	ldr	r1, [r3, #4]
    17e6:	cmp	r1, #0
    17e8:	beq.w	15be <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    17ec:	ldrh	r7, [r3, #0]
    17ee:	cmp	r7, r0
    17f0:	bne.n	17e2 <isr+0x462>
    17f2:	ldrh	r7, [r3, #2]
    17f4:	cmp	r7, lr
    17f6:	bne.n	17e2 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    17f8:	lsrs	r7, r0, #8
    17fa:	cmp	r7, #3
    17fc:	beq.w	1a0c <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1800:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1802:	lsrs	r2, r2, #16
    1804:	cmp	r3, r2
    1806:	it	cs
    1808:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    180a:	cmp.w	r0, #512	; 0x200
    180e:	beq.w	1988 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1812:	cmp.w	r0, #1792	; 0x700
    1816:	beq.w	192c <isr+0x5ac>
    181a:	ldr	r7, [pc, #428]	; (19c8 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    181c:	mov	r2, r3
    181e:	str	r3, [sp, #4]
    1820:	mov	r0, r7
    1822:	bl	2640 <memcpy>
    1826:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1828:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    182c:	add	r7, r3
	asm("dsb");
    182e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1832:	ldr	r1, [pc, #408]	; (19cc <isr+0x64c>)
    1834:	str	r2, [r1, #0]
		location += 32;
    1836:	adds	r2, #32
	} while (location < end_addr);
    1838:	cmp	r7, r2
    183a:	bhi.n	1832 <isr+0x4b2>
	asm("dsb");
    183c:	dsb	sy
	asm("isb");
    1840:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1844:	ldr	r0, [pc, #384]	; (19c8 <isr+0x648>)
    1846:	mov	r1, r3
    1848:	bl	12dc <endpoint0_transmit.constprop.1>
    184c:	b.n	1442 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    184e:	lsls	r3, r1, #31
    1850:	bpl.w	143a <isr+0xba>
    1854:	b.n	1436 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1856:	ldr	r7, [pc, #376]	; (19d0 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1858:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    185c:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    185e:	ldr	r1, [pc, #372]	; (19d4 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1860:	ldr	r3, [pc, #372]	; (19d8 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1862:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1864:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1868:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    186a:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    186e:	ldr	r1, [pc, #364]	; (19dc <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1870:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1872:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1876:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    187a:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    187e:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1880:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1884:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1888:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    188c:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    188e:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1890:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1894:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1896:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1898:	ldr.w	r3, [r4, #432]	; 0x1b0
    189c:	cmp	r3, #0
    189e:	bne.n	1898 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    18a0:	ldr	r2, [pc, #268]	; (19b0 <isr+0x630>)
    18a2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    18a4:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    18a8:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    18aa:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    18ac:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    18b0:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    18b2:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    18b6:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    18b8:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    18bc:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    18be:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    18c2:	ldr.w	r3, [r5, #432]	; 0x1b0
    18c6:	orrs	r3, r0
    18c8:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    18cc:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    18d0:	ldr.w	r3, [r4, #432]	; 0x1b0
    18d4:	cmp	r3, #0
    18d6:	bne.n	18d0 <isr+0x550>
    18d8:	b.n	1442 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    18da:	ldr	r4, [pc, #244]	; (19d0 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    18dc:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    18e0:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    18e2:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    18e4:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    18e6:	cmp	r4, r0
    18e8:	bne.w	1504 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    18ec:	ldr	r1, [pc, #236]	; (19dc <isr+0x65c>)
    18ee:	ldr	r4, [pc, #240]	; (19e0 <isr+0x660>)
    18f0:	ldmia	r1, {r0, r1}
    18f2:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    18f4:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    18f6:	str	r0, [r4, #0]
    18f8:	strh	r1, [r4, #4]
    18fa:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    18fc:	bne.w	1504 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1900:	cpsid	i
	sof_usage |= (1 << interface);
    1902:	ldr	r0, [pc, #224]	; (19e4 <isr+0x664>)
    1904:	ldrb	r1, [r0, #0]
    1906:	orr.w	r1, r1, #4
    190a:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    190c:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1910:	lsls	r0, r1, #24
    1912:	bmi.n	1922 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1914:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1918:	movs	r0, #128	; 0x80
    191a:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    191e:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1922:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1924:	ldr	r2, [pc, #192]	; (19e8 <isr+0x668>)
    1926:	movs	r1, #80	; 0x50
    1928:	strb	r1, [r2, #0]
    192a:	b.n	1504 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    192c:	ldr	r0, [pc, #188]	; (19ec <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    192e:	mov	r2, r3
    1930:	ldr	r7, [pc, #148]	; (19c8 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1932:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1936:	ldr	r1, [pc, #184]	; (19f0 <isr+0x670>)
    1938:	ldr	r0, [pc, #184]	; (19f4 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    193a:	str	r3, [sp, #4]
    193c:	cmp.w	lr, #0
    1940:	it	eq
    1942:	moveq	r1, r0
    1944:	mov	r0, r7
    1946:	bl	2640 <memcpy>
					usb_descriptor_buffer[1] = 7;
    194a:	movs	r2, #7
    194c:	ldr	r3, [sp, #4]
    194e:	strb	r2, [r7, #1]
    1950:	b.n	1828 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1952:	ldr.w	r2, [r3, #328]	; 0x148
    1956:	bic.w	r2, r2, #128	; 0x80
    195a:	str.w	r2, [r3, #328]	; 0x148
    195e:	b.n	14ee <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1960:	ldr	r0, [pc, #148]	; (19f8 <isr+0x678>)
    1962:	bl	12a4 <run_callbacks>
    1966:	b.n	152a <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1968:	ldr	r0, [pc, #144]	; (19fc <isr+0x67c>)
    196a:	bl	12a4 <run_callbacks>
    196e:	b.n	1518 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1970:	ldr	r0, [pc, #140]	; (1a00 <isr+0x680>)
    1972:	bl	12a4 <run_callbacks>
    1976:	b.n	1512 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1978:	ldr	r0, [pc, #136]	; (1a04 <isr+0x684>)
    197a:	bl	12a4 <run_callbacks>
    197e:	b.n	1524 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1980:	ldr	r0, [pc, #132]	; (1a08 <isr+0x688>)
    1982:	bl	12a4 <run_callbacks>
    1986:	b.n	151e <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1988:	ldr	r0, [pc, #96]	; (19ec <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    198a:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    198c:	ldr	r1, [pc, #100]	; (19f4 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    198e:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1990:	ldr	r0, [pc, #92]	; (19f0 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1992:	str	r3, [sp, #4]
    1994:	cmp	r7, #0
    1996:	it	eq
    1998:	moveq	r1, r0
    199a:	ldr	r0, [pc, #44]	; (19c8 <isr+0x648>)
    199c:	bl	2640 <memcpy>
    19a0:	ldr	r7, [pc, #36]	; (19c8 <isr+0x648>)
    19a2:	ldr	r3, [sp, #4]
    19a4:	b.n	1828 <isr+0x4a8>
    19a6:	nop
    19a8:	.word	0x20001408
    19ac:	.word	0x402e01c0
    19b0:	.word	0x20002020
    19b4:	.word	0x20001424
    19b8:	.word	0x200014b8
    19bc:	.word	0x20001348
    19c0:	.word	0x20001418
    19c4:	.word	0x200003d0
    19c8:	.word	0x20203000
    19cc:	.word	0xe000ef70
    19d0:	.word	0x20001400
    19d4:	.word	0x00070080
    19d8:	.word	0x20002000
    19dc:	.word	0x20001410
    19e0:	.word	0x200014b0
    19e4:	.word	0x200013e8
    19e8:	.word	0x200013f8
    19ec:	.word	0x200013f0
    19f0:	.word	0x60001654
    19f4:	.word	0x60001698
    19f8:	.word	0x20003200
    19fc:	.word	0x20003140
    1a00:	.word	0x20003100
    1a04:	.word	0x200031c0
    1a08:	.word	0x20003180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1a0c:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1a0e:	ldrb	r3, [r1, #0]
    1a10:	cmp	r3, r2
    1a12:	it	cs
    1a14:	movcs	r3, r2
    1a16:	b.n	1812 <isr+0x492>

00001a18 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a18:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1a1a:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1a1e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a22:	ite	ne
    1a24:	movne	r7, #0
    1a26:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1a2a:	cmp	r2, #2
    1a2c:	bls.n	1a32 <usb_config_rx+0x1a>
    1a2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1a32:	mov.w	sl, r0, lsl #7
    1a36:	ldr.w	r9, [pc, #64]	; 1a78 <usb_config_rx+0x60>
    1a3a:	mov	r5, r1
    1a3c:	mov	r4, r0
    1a3e:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1a42:	movs	r1, #0
    1a44:	movs	r2, #64	; 0x40
    1a46:	mov	r8, r3
    1a48:	mov	r0, r6
    1a4a:	bl	2fd4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1a4e:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1a50:	orr.w	r1, r7, r5, lsl #16
    1a54:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1a58:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1a5c:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1a5e:	cmp.w	r8, #0
    1a62:	beq.n	1a2e <usb_config_rx+0x16>
    1a64:	ldr	r3, [pc, #12]	; (1a74 <usb_config_rx+0x5c>)
    1a66:	lsls	r0, r4
    1a68:	ldr	r4, [r3, #0]
    1a6a:	orrs	r0, r4
    1a6c:	str	r0, [r3, #0]
    1a6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a72:	nop
    1a74:	.word	0x200013e4
    1a78:	.word	0x20003000

00001a7c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a7c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1a7e:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1a82:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a86:	ite	ne
    1a88:	movne	r7, #0
    1a8a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1a8e:	cmp	r2, #2
    1a90:	bls.n	1a96 <usb_config_tx+0x1a>
    1a92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1a96:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1a98:	lsls	r5, r0, #7
    1a9a:	ldr.w	r9, [pc, #68]	; 1ae0 <usb_config_tx+0x64>
    1a9e:	mov	r8, r1
    1aa0:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1aa2:	movs	r1, #0
    1aa4:	mov	r4, r0
    1aa6:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1aa8:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1aac:	mov	r0, sl
    1aae:	bl	2fd4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1ab2:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1ab4:	orr.w	r1, r7, r8, lsl #16
    1ab8:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1abc:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1ac0:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1ac4:	cmp	r6, #0
    1ac6:	beq.n	1a92 <usb_config_tx+0x16>
    1ac8:	add.w	r0, r4, #16
    1acc:	ldr	r3, [pc, #12]	; (1adc <usb_config_tx+0x60>)
    1ace:	lsls	r2, r0
    1ad0:	ldr	r0, [r3, #0]
    1ad2:	orrs	r2, r0
    1ad4:	str	r2, [r3, #0]
    1ad6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ada:	nop
    1adc:	.word	0x200013e4
    1ae0:	.word	0x20003000

00001ae4 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1ae4:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1ae6:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1ae8:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1aea:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1aee:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1af0:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1af2:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1af4:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1af8:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1afc:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1b00:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1b04:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1b06:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1b08:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1b0a:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1b0c:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1b0e:	pop	{r4, r5, r6, r7}
    1b10:	bx	lr
    1b12:	nop

00001b14 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1b14:	subs	r3, r0, #2
    1b16:	cmp	r3, #2
    1b18:	bls.n	1b1c <usb_transmit+0x8>
    1b1a:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1b1c:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1b1e:	ldr	r3, [pc, #24]	; (1b38 <usb_transmit+0x24>)
    1b20:	add.w	r4, r0, #16
    1b24:	movs	r5, #1
    1b26:	mov	r2, r1
    1b28:	add.w	r0, r3, r0, lsl #7
    1b2c:	lsl.w	r1, r5, r4
}
    1b30:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1b32:	b.w	1248 <schedule_transfer>
    1b36:	nop
    1b38:	.word	0x20003040

00001b3c <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1b3c:	subs	r3, r0, #2
    1b3e:	cmp	r3, #2
    1b40:	bls.n	1b44 <usb_receive+0x8>
    1b42:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1b44:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1b46:	ldr	r3, [pc, #20]	; (1b5c <usb_receive+0x20>)
    1b48:	movs	r4, #1
    1b4a:	mov	r2, r1
    1b4c:	lsl.w	r1, r4, r0
    1b50:	add.w	r0, r3, r0, lsl #7
}
    1b54:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1b58:	b.w	1248 <schedule_transfer>
    1b5c:	.word	0x20003000

00001b60 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1b60:	ldr	r0, [r0, #4]
#endif
}
    1b62:	bx	lr

00001b64 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1b64:	cmp	r0, #0
    1b66:	beq.n	1c18 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1b68:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    1b6a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b6e:	sub	sp, #20
    1b70:	mov	fp, r0
    1b72:	ldr	r4, [pc, #168]	; (1c1c <delay+0xb8>)
    1b74:	ldr	r5, [pc, #168]	; (1c20 <delay+0xbc>)
    1b76:	ldr	r6, [pc, #172]	; (1c24 <delay+0xc0>)
    1b78:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1b7c:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1b80:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    1b82:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1b84:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1b88:	cmp	r1, #0
    1b8a:	bne.n	1b7c <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1b8c:	ldr	r7, [pc, #152]	; (1c28 <delay+0xc4>)
    1b8e:	strd	r8, r9, [sp, #8]
    1b92:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1b94:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b96:	ldr	r2, [pc, #148]	; (1c2c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1b98:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1b9c:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1b9e:	ldr	r2, [r2, #0]
    1ba0:	movs	r7, #1
    1ba2:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    1ba6:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1baa:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    1bac:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1bae:	cmp	r3, r1
    1bb0:	it	eq
    1bb2:	cmpeq	r2, r8
    1bb4:	ite	cs
    1bb6:	movcs	sl, r8
    1bb8:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1bba:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1bbe:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1bc2:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1bc4:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1bc6:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1bca:	cmp	r3, #0
    1bcc:	bne.n	1bbe <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1bce:	ldr	r0, [sp, #4]
    1bd0:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1bd2:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1bd4:	ldr	r0, [pc, #84]	; (1c2c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1bd6:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1bda:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1bdc:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1be0:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    1be4:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1be8:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1bec:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    1bee:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1bf0:	cmp	r1, r3
    1bf2:	it	eq
    1bf4:	cmpeq	r0, r8
    1bf6:	ite	cs
    1bf8:	movcs	r3, r8
    1bfa:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1bfc:	add	r2, r3
    1bfe:	cmp	r2, lr
    1c00:	bcc.n	1c12 <delay+0xae>
			if (--msec == 0) return;
    1c02:	subs.w	fp, fp, #1
			start += 1000;
    1c06:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    1c0a:	bne.n	1bbe <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1c0c:	add	sp, #20
    1c0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    1c12:	bl	2338 <yield>
	}
    1c16:	b.n	1bbe <delay+0x5a>
    1c18:	bx	lr
    1c1a:	nop
    1c1c:	.word	0x20003280
    1c20:	.word	0x20001424
    1c24:	.word	0x2000141c
    1c28:	.word	0xe0001004
    1c2c:	.word	0x20001420

00001c30 <flexpwmWrite>:
};

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
    1c30:	push	{r4, r5, r6, r7, lr}
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
    1c32:	add.w	r6, r1, r1, lsl #1
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    1c36:	ldr	r4, [pc, #164]	; (1cdc <flexpwmWrite+0xac>)

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    1c38:	movs	r5, #1
	uint32_t modulo = p->SM[submodule].VAL1;
    1c3a:	add.w	r6, r0, r6, lsl #5
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    1c3e:	ldrb.w	ip, [r4]

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    1c42:	lsl.w	r1, r5, r1
	uint32_t modulo = p->SM[submodule].VAL1;
    1c46:	ldrh	r4, [r6, #14]

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    1c48:	uxth.w	lr, r1
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1c4c:	ldrh.w	r5, [r0, #392]	; 0x188
#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
    1c50:	uxth	r4, r4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1c52:	mov.w	r7, lr, lsl #4

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    1c56:	mla	r3, r4, r3, r3
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1c5a:	uxth	r5, r5
    1c5c:	and.w	r7, r7, #240	; 0xf0

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    1c60:	lsr.w	r3, r3, ip
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1c64:	orrs	r5, r7
    1c66:	cmp	r3, r4
    1c68:	strh.w	r5, [r0, #392]	; 0x188
    1c6c:	it	cs
    1c6e:	movcs	r3, r4
	switch (channel) {
    1c70:	cmp	r2, #1
    1c72:	beq.n	1cba <flexpwmWrite+0x8a>
    1c74:	bcc.n	1ca2 <flexpwmWrite+0x72>
    1c76:	cmp	r2, #2
    1c78:	beq.n	1c8c <flexpwmWrite+0x5c>
    1c7a:	and.w	r1, r1, #15
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
		//printf(" write channel B\n");
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    1c7e:	ldrh.w	r3, [r0, #392]	; 0x188
    1c82:	uxth	r3, r3
    1c84:	orrs	r1, r3
    1c86:	strh.w	r1, [r0, #392]	; 0x188
    1c8a:	pop	{r4, r5, r6, r7, pc}
		p->SM[submodule].VAL3 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
		//printf(" write channel A\n");
		break;
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
    1c8c:	uxth	r3, r3
    1c8e:	and.w	r1, r1, #15
    1c92:	strh	r3, [r6, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    1c94:	ldrh.w	r3, [r0, #384]	; 0x180
    1c98:	uxth	r3, r3
    1c9a:	orrs	r7, r3
    1c9c:	strh.w	r7, [r0, #384]	; 0x180
    1ca0:	b.n	1c7e <flexpwmWrite+0x4e>
	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	switch (channel) {
	  case 0: // X
		p->SM[submodule].VAL0 = modulo - cval;
    1ca2:	subs	r3, r4, r3
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    1ca4:	and.w	r1, r1, #15
	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	switch (channel) {
	  case 0: // X
		p->SM[submodule].VAL0 = modulo - cval;
    1ca8:	uxth	r3, r3
    1caa:	strh	r3, [r6, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    1cac:	ldrh.w	r3, [r0, #384]	; 0x180
    1cb0:	uxth	r3, r3
    1cb2:	orrs	r3, r1
    1cb4:	strh.w	r3, [r0, #384]	; 0x180
		//printf(" write channel X\n");
		break;
    1cb8:	b.n	1c7e <flexpwmWrite+0x4e>
	  case 1: // A
		p->SM[submodule].VAL3 = cval;
    1cba:	uxth	r3, r3
    1cbc:	and.w	r1, r1, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    1cc0:	mov.w	lr, lr, lsl #8
		p->SM[submodule].VAL0 = modulo - cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
		//printf(" write channel X\n");
		break;
	  case 1: // A
		p->SM[submodule].VAL3 = cval;
    1cc4:	strh	r3, [r6, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    1cc6:	ldrh.w	r3, [r0, #384]	; 0x180
    1cca:	and.w	lr, lr, #3840	; 0xf00
    1cce:	uxth	r3, r3
    1cd0:	orr.w	lr, lr, r3
    1cd4:	strh.w	lr, [r0, #384]	; 0x180
		//printf(" write channel A\n");
		break;
    1cd8:	b.n	1c7e <flexpwmWrite+0x4e>
    1cda:	nop
    1cdc:	.word	0x20000760

00001ce0 <flexpwmFrequency>:
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
    1ce0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    1ce4:	mov.w	lr, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
    1ce8:	ldr	r2, [pc, #228]	; (1dd0 <flexpwmFrequency+0xf0>)
    1cea:	vmov.f64	d6, #96	; 0x3f000000  0.5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    1cee:	mov.w	ip, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
    1cf2:	add.w	r3, lr, r1
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    1cf6:	lsl.w	r7, ip, r1
	uint32_t olddiv = p->SM[submodule].VAL1;
    1cfa:	add.w	r3, r0, r3, lsl #5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    1cfe:	uxth	r6, r7
	uint32_t olddiv = p->SM[submodule].VAL1;
    1d00:	ldrh	r3, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
    1d02:	vldr	s15, [r2]
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    1d06:	uxth	r5, r3
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
    1d08:	vcvt.f32.u32	s15, s15
    1d0c:	vdiv.f32	s0, s15, s0
    1d10:	vcvt.f64.f32	d0, s0
    1d14:	vadd.f64	d0, d0, d6
    1d18:	vcvt.u32.f64	s15, d0
    1d1c:	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    1d20:	cmp.w	r3, #65536	; 0x10000
    1d24:	bcc.n	1dc4 <flexpwmFrequency+0xe4>
    1d26:	movs	r2, #0
    1d28:	movw	r4, #65535	; 0xffff
    1d2c:	b.n	1d32 <flexpwmFrequency+0x52>
    1d2e:	cmp	r2, #6
    1d30:	bhi.n	1d3a <flexpwmFrequency+0x5a>
		newdiv = newdiv >> 1;
    1d32:	lsrs	r3, r3, #1
		prescale = prescale + 1;
    1d34:	adds	r2, #1
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    1d36:	cmp	r3, r4
    1d38:	bhi.n	1d2e <flexpwmFrequency+0x4e>
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
    1d3a:	cmp.w	r3, #65536	; 0x10000
    1d3e:	mov.w	r2, r2, lsl #4
    1d42:	bcs.n	1db4 <flexpwmFrequency+0xd4>
    1d44:	orr.w	r2, r2, #1024	; 0x400
    1d48:	uxth	r2, r2
    1d4a:	add.w	ip, r3, #4294967295
    1d4e:	uxth.w	ip, ip
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1d52:	ldrh.w	r8, [r0, #392]	; 0x188
    1d56:	lsls	r6, r6, #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    1d58:	and.w	r4, r7, #15
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    1d5c:	add	r1, lr
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1d5e:	uxtb	r6, r6
    1d60:	uxth.w	r7, r8
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    1d64:	add.w	r1, r0, r1, lsl #5
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    1d68:	orrs	r6, r7
    1d6a:	strh.w	r6, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    1d6e:	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    1d70:	strh.w	ip, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    1d74:	ldrh	r2, [r1, #10]
    1d76:	uxth	r2, r2
    1d78:	mul.w	r2, r3, r2
    1d7c:	udiv	r2, r2, r5
    1d80:	uxth	r2, r2
    1d82:	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    1d84:	ldrh	r2, [r1, #22]
    1d86:	uxth	r2, r2
    1d88:	mul.w	r2, r3, r2
    1d8c:	udiv	r2, r2, r5
    1d90:	uxth	r2, r2
    1d92:	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    1d94:	ldrh	r2, [r1, #30]
    1d96:	uxth	r2, r2
    1d98:	mul.w	r3, r3, r2
    1d9c:	udiv	r3, r3, r5
    1da0:	uxth	r3, r3
    1da2:	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    1da4:	ldrh.w	r3, [r0, #392]	; 0x188
    1da8:	uxth	r3, r3
    1daa:	orrs	r4, r3
    1dac:	strh.w	r4, [r0, #392]	; 0x188
    1db0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1db4:	orr.w	r2, r2, #1024	; 0x400
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
    1db8:	movw	ip, #65534	; 0xfffe
		newdiv = 65535;
    1dbc:	movw	r3, #65535	; 0xffff
    1dc0:	uxth	r2, r2
    1dc2:	b.n	1d52 <flexpwmFrequency+0x72>
	} else if (newdiv < 2) {
    1dc4:	cmp	r3, #1
    1dc6:	mov.w	r2, #1024	; 0x400
    1dca:	bhi.n	1d4a <flexpwmFrequency+0x6a>
		newdiv = 2;
    1dcc:	movs	r3, #2
    1dce:	b.n	1d52 <flexpwmFrequency+0x72>
    1dd0:	.word	0x20000758

00001dd4 <quadtimerFrequency>:
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
    1dd4:	ldr	r3, [pc, #140]	; (1e64 <quadtimerFrequency+0x90>)
    1dd6:	vmov.f64	d6, #96	; 0x3f000000  0.5
    1dda:	vldr	s15, [r3]
    1dde:	vcvt.f32.u32	s15, s15
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
    1de2:	push	{r4, r5}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
    1de4:	vdiv.f32	s0, s15, s0
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    1de8:	movw	r4, #65534	; 0xfffe
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
    1dec:	vcvt.f64.f32	d0, s0
    1df0:	vadd.f64	d0, d0, d6
    1df4:	vcvt.u32.f64	s15, d0
    1df8:	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    1dfc:	cmp	r3, r4
    1dfe:	bls.n	1e56 <quadtimerFrequency+0x82>
    1e00:	movs	r2, #0
    1e02:	b.n	1e08 <quadtimerFrequency+0x34>
    1e04:	cmp	r2, #6
    1e06:	bhi.n	1e10 <quadtimerFrequency+0x3c>
		newdiv = newdiv >> 1; 
    1e08:	lsrs	r3, r3, #1
		prescale = prescale + 1;
    1e0a:	adds	r2, #1
void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    1e0c:	cmp	r3, r4
    1e0e:	bhi.n	1e04 <quadtimerFrequency+0x30>
    1e10:	adds	r2, #8
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
    1e12:	movw	r5, #65534	; 0xfffe
    1e16:	movw	r4, #8230	; 0x2026
    1e1a:	lsls	r2, r2, #9
    1e1c:	cmp	r3, r5
    1e1e:	and.w	r2, r2, #7680	; 0x1e00
		newdiv = 65534;
    1e22:	it	hi
    1e24:	movhi	r3, r5
    1e26:	orrs	r4, r2
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    1e28:	add.w	r1, r0, r1, lsl #5
    1e2c:	ldrh	r5, [r1, #16]
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    1e2e:	ldrh	r2, [r1, #6]
		newdiv = 65534;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    1e30:	uxth	r5, r5
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    1e32:	uxth	r2, r2
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    1e34:	mul.w	r0, r5, r3
    1e38:	rsb	r2, r2, #65537	; 0x10001
    1e3c:	add	r2, r5
    1e3e:	udiv	r2, r0, r2
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
    1e42:	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
    1e44:	uxth	r2, r2
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
    1e46:	rsb	r3, r3, #1
    1e4a:	uxth	r3, r3
    1e4c:	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    1e4e:	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    1e50:	strh	r4, [r1, #12]
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
}
    1e52:	pop	{r4, r5}
    1e54:	bx	lr
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
		newdiv = 65534;
	} else if (newdiv < 2) {
    1e56:	cmp	r3, #1
    1e58:	movw	r4, #12326	; 0x3026
		newdiv = 2;
    1e5c:	it	ls
    1e5e:	movls	r3, #2
    1e60:	b.n	1e28 <quadtimerFrequency+0x54>
    1e62:	nop
    1e64:	.word	0x20000758

00001e68 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    1e68:	cmp	r0, #39	; 0x27
    1e6a:	bhi.n	1e86 <analogWrite+0x1e>
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    1e6c:	ldr	r2, [pc, #164]	; (1f14 <analogWrite+0xac>)
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
}

void analogWrite(uint8_t pin, int val)
{
    1e6e:	push	{r3, r4, r5, r6, r7, lr}
    1e70:	mov	r4, r0
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    1e72:	sxth	r0, r0
	if (info->type == 1) {
    1e74:	ldrb.w	r6, [r2, r0, lsl #2]
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    1e78:	add.w	r5, r2, r0, lsl #2
	if (info->type == 1) {
    1e7c:	cmp	r6, #1
    1e7e:	beq.n	1e88 <analogWrite+0x20>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
    1e80:	cmp	r6, #2
    1e82:	beq.n	1eb2 <analogWrite+0x4a>
    1e84:	pop	{r3, r4, r5, r6, r7, pc}
    1e86:	bx	lr
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    1e88:	ldrb	r2, [r5, #1]
    1e8a:	ubfx	r3, r2, #4, #2
    1e8e:	cmp	r3, #3
    1e90:	beq.n	1f08 <analogWrite+0xa0>
    1e92:	ldr	r0, [pc, #132]	; (1f18 <analogWrite+0xb0>)
    1e94:	ldr.w	r0, [r0, r3, lsl #2]
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    1e98:	uxth	r3, r1
    1e9a:	and.w	r1, r2, #3
    1e9e:	ldrb	r2, [r5, #2]
    1ea0:	bl	1c30 <flexpwmWrite>
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
    1ea4:	ldr	r0, [pc, #116]	; (1f1c <analogWrite+0xb4>)
    1ea6:	ldrb	r2, [r5, #3]
    1ea8:	add.w	r0, r0, r4, lsl #4
    1eac:	ldr	r3, [r0, #4]
    1eae:	str	r2, [r3, #0]
    1eb0:	pop	{r3, r4, r5, r6, r7, pc}
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    1eb2:	ldrb	r6, [r5, #1]
    1eb4:	ubfx	r3, r6, #4, #2
    1eb8:	cmp	r3, #3
    1eba:	beq.n	1f0c <analogWrite+0xa4>
    1ebc:	ldr	r2, [pc, #96]	; (1f20 <analogWrite+0xb8>)
    1ebe:	ldr.w	lr, [r2, r3, lsl #2]
    1ec2:	and.w	r6, r6, #3
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    1ec6:	ldr	r3, [pc, #92]	; (1f24 <analogWrite+0xbc>)
    1ec8:	uxth	r1, r1
    1eca:	add.w	r7, lr, r6, lsl #5
    1ece:	ldrb.w	ip, [r3]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    1ed2:	lsls	r6, r6, #5
    1ed4:	ldrh	r2, [r7, #6]
    1ed6:	add.w	r3, lr, r6
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
    1eda:	add	r6, lr
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    1edc:	uxth	r2, r2
    1ede:	ldrh	r0, [r3, #16]
    1ee0:	rsb	r2, r2, #65537	; 0x10001
    1ee4:	uxtah	r2, r2, r0
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    1ee8:	subs	r0, r2, #1
    1eea:	mul.w	r3, r0, r1
    1eee:	lsr.w	r3, r3, ip
	if (high >= modulo - 1) high = modulo - 2;
    1ef2:	cmp	r0, r3
    1ef4:	it	ls
    1ef6:	subls	r3, r2, #2
	//printf(" modulo=%lu\n", modulo);
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
    1ef8:	subs	r2, r2, r3
	p->CH[submodule].CMPLD1 = high;
    1efa:	uxth	r3, r3
	//printf(" modulo=%lu\n", modulo);
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
    1efc:	rsb	r2, r2, #1
    1f00:	uxth	r2, r2
    1f02:	strh	r2, [r7, #6]
	p->CH[submodule].CMPLD1 = high;
    1f04:	strh	r3, [r6, #16]
    1f06:	b.n	1ea4 <analogWrite+0x3c>
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    1f08:	ldr	r0, [pc, #28]	; (1f28 <analogWrite+0xc0>)
    1f0a:	b.n	1e98 <analogWrite+0x30>
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    1f0c:	ldr.w	lr, [pc, #28]	; 1f2c <analogWrite+0xc4>
    1f10:	b.n	1ec2 <analogWrite+0x5a>
    1f12:	nop
    1f14:	.word	0x20000098
    1f18:	.word	0x20000138
    1f1c:	.word	0x20000150
    1f20:	.word	0x20000144
    1f24:	.word	0x20000760
    1f28:	.word	0x403e8000
    1f2c:	.word	0x401e8000

00001f30 <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    1f30:	cmp	r0, #39	; 0x27
    1f32:	bhi.n	1f48 <analogWriteFrequency+0x18>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    1f34:	sxth	r0, r0
    1f36:	ldr	r3, [pc, #76]	; (1f84 <analogWriteFrequency+0x54>)
	if (info->type == 1) {
    1f38:	ldrb.w	r2, [r3, r0, lsl #2]
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    1f3c:	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
    1f40:	cmp	r2, #1
    1f42:	beq.n	1f4a <analogWriteFrequency+0x1a>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
    1f44:	cmp	r2, #2
    1f46:	beq.n	1f64 <analogWriteFrequency+0x34>
    1f48:	bx	lr
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    1f4a:	ldrb	r1, [r3, #1]
    1f4c:	ubfx	r2, r1, #4, #2
    1f50:	cmp	r2, #3
    1f52:	beq.n	1f7c <analogWriteFrequency+0x4c>
    1f54:	ldr	r0, [pc, #48]	; (1f88 <analogWriteFrequency+0x58>)
    1f56:	ldr.w	r0, [r0, r2, lsl #2]
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    1f5a:	ldrb	r2, [r3, #2]
    1f5c:	and.w	r1, r1, #3
    1f60:	b.w	1ce0 <flexpwmFrequency>
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    1f64:	ldrb	r1, [r3, #1]
    1f66:	ubfx	r3, r1, #4, #2
    1f6a:	cmp	r3, #3
    1f6c:	beq.n	1f80 <analogWriteFrequency+0x50>
    1f6e:	ldr	r2, [pc, #28]	; (1f8c <analogWriteFrequency+0x5c>)
    1f70:	ldr.w	r0, [r2, r3, lsl #2]
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    1f74:	and.w	r1, r1, #3
    1f78:	b.w	1dd4 <quadtimerFrequency>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    1f7c:	ldr	r0, [pc, #16]	; (1f90 <analogWriteFrequency+0x60>)
    1f7e:	b.n	1f5a <analogWriteFrequency+0x2a>
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    1f80:	ldr	r0, [pc, #16]	; (1f94 <analogWriteFrequency+0x64>)
    1f82:	b.n	1f74 <analogWriteFrequency+0x44>
    1f84:	.word	0x20000098
    1f88:	.word	0x20000138
    1f8c:	.word	0x20000144
    1f90:	.word	0x403e8000
    1f94:	.word	0x401e8000

00001f98 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1f98:	ldr	r0, [pc, #656]	; (222c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1f9a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1f9e:	ldr	r3, [pc, #656]	; (2230 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1fa0:	ldr	r2, [r0, #120]	; 0x78
    1fa2:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1fa6:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1fa8:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1faa:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1fac:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1fb0:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1fb4:	ldr	r4, [pc, #636]	; (2234 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1fb6:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1fba:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1fbc:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1fc0:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1fc2:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1fc4:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1fc8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1fcc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1fd0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1fd4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1fd8:	ldrh.w	r0, [r3, #392]	; 0x188
    1fdc:	uxth	r0, r0
    1fde:	orr.w	r0, r0, #240	; 0xf0
    1fe2:	strh.w	r0, [r3, #392]	; 0x188
    1fe6:	add.w	r0, r1, r1, lsl #1
    1fea:	ldr	r3, [pc, #580]	; (2230 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1fec:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1fee:	movs	r5, #0
    1ff0:	lsls	r0, r0, #5
    1ff2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1ff4:	cmp	r1, #4
    1ff6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1ff8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1ffc:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1ffe:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2000:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2002:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2004:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2006:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2008:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    200a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    200c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    200e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2010:	bne.n	1fe6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2012:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2016:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    201a:	ldr	r3, [pc, #540]	; (2238 <pwm_init+0x2a0>)
    201c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2020:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2022:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2024:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2028:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    202a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    202e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2032:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2036:	ldrh.w	r0, [r4, #392]	; 0x188
    203a:	uxth	r0, r0
    203c:	orr.w	r0, r0, #3840	; 0xf00
    2040:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2044:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2048:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    204c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2050:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2054:	ldrh.w	r0, [r3, #392]	; 0x188
    2058:	uxth	r0, r0
    205a:	orr.w	r0, r0, #240	; 0xf0
    205e:	strh.w	r0, [r3, #392]	; 0x188
    2062:	add.w	r0, r1, r1, lsl #1
    2066:	ldr	r3, [pc, #464]	; (2238 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2068:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    206a:	movs	r5, #0
    206c:	lsls	r0, r0, #5
    206e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2070:	cmp	r1, #4
    2072:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2074:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2076:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    207a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    207c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    207e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2080:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2082:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2084:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2086:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2088:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    208a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    208c:	bne.n	2062 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    208e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2092:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2096:	ldr	r3, [pc, #420]	; (223c <pwm_init+0x2a4>)
    2098:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    209c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    209e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    20a0:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    20a4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20a6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    20aa:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20ae:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    20b2:	ldrh.w	r0, [r4, #392]	; 0x188
    20b6:	uxth	r0, r0
    20b8:	orr.w	r0, r0, #3840	; 0xf00
    20bc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    20c0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    20c4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    20c8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    20cc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    20d0:	ldrh.w	r0, [r3, #392]	; 0x188
    20d4:	uxth	r0, r0
    20d6:	orr.w	r0, r0, #240	; 0xf0
    20da:	strh.w	r0, [r3, #392]	; 0x188
    20de:	add.w	r0, r1, r1, lsl #1
    20e2:	ldr	r3, [pc, #344]	; (223c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    20e4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    20e6:	movs	r5, #0
    20e8:	lsls	r0, r0, #5
    20ea:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    20ec:	cmp	r1, #4
    20ee:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    20f0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    20f2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    20f6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    20f8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    20fa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    20fc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    20fe:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2100:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2102:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2104:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2106:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2108:	bne.n	20de <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    210a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    210e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2112:	ldr	r3, [pc, #300]	; (2240 <pwm_init+0x2a8>)
    2114:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2118:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    211a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    211c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2120:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2122:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2126:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    212a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    212e:	ldrh.w	r0, [r4, #392]	; 0x188
    2132:	uxth	r0, r0
    2134:	orr.w	r0, r0, #3840	; 0xf00
    2138:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    213c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2140:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2144:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2148:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    214c:	ldrh.w	r0, [r3, #392]	; 0x188
    2150:	uxth	r0, r0
    2152:	orr.w	r0, r0, #240	; 0xf0
    2156:	strh.w	r0, [r3, #392]	; 0x188
    215a:	add.w	r0, r1, r1, lsl #1
    215e:	ldr	r3, [pc, #224]	; (2240 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    2160:	adds	r1, #1
    2162:	lsls	r0, r0, #5
    2164:	mov	r4, r3
    2166:	cmp	r1, #4
    2168:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    216a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    216c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2170:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2172:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2174:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2176:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2178:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    217a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    217c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    217e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2180:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2182:	bne.n	215a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2184:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2188:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    218a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    218c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2190:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2192:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2196:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2198:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    219c:	orrs	r3, r7
    219e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    21a2:	ldrh.w	r3, [r4, #392]	; 0x188
    21a6:	uxth	r3, r3
    21a8:	orr.w	r3, r3, #3840	; 0xf00
    21ac:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    21b0:	lsls	r0, r2, #5
    21b2:	ldr	r3, [pc, #144]	; (2244 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21b4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    21b6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21b8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    21ba:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    21bc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21be:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21c0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21c2:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    21c6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    21c8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21ca:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21cc:	bne.n	21b0 <pwm_init+0x218>
    21ce:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21d0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21d2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21d6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    21da:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21dc:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    21e0:	lsls	r0, r2, #5
    21e2:	ldr	r3, [pc, #100]	; (2248 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21e4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    21e6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21e8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    21ea:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    21ec:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21ee:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21f0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21f2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    21f4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    21f6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21f8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21fa:	bne.n	21e0 <pwm_init+0x248>
    21fc:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21fe:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2200:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2204:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2208:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    220a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    220e:	lsls	r0, r2, #5
    2210:	ldr	r3, [pc, #56]	; (224c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2212:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2214:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2216:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2218:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    221a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    221c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    221e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2220:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2222:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2224:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2226:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2228:	bne.n	220e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    222a:	pop	{r4, r5, r6, r7, pc}
    222c:	.word	0x400fc000
    2230:	.word	0x403dc000
    2234:	.word	0xfc030000
    2238:	.word	0x403e0000
    223c:	.word	0x403e4000
    2240:	.word	0x403e8000
    2244:	.word	0x401dc000
    2248:	.word	0x401e0000
    224c:	.word	0x401e4000

00002250 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2250:	cmp	r0, #39	; 0x27
    2252:	bhi.n	228e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    2254:	lsls	r0, r0, #4
    2256:	ldr	r2, [pc, #104]	; (22c0 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2258:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    225a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    225e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    2260:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2262:	beq.n	2290 <pinMode+0x40>
    2264:	cmp	r1, #4
    2266:	beq.n	2290 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2268:	ldr	r4, [r3, #12]
    226a:	ldr	r2, [r0, #4]
    226c:	bic.w	r2, r2, r4
    2270:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2272:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    2274:	cbz	r1, 22b2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    2276:	cmp	r1, #2
    2278:	beq.n	22b8 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    227a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    227c:	ldr	r3, [r3, #4]
}
    227e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2282:	ite	eq
    2284:	ldreq	r1, [pc, #60]	; (22c4 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    2286:	ldrne	r1, [pc, #64]	; (22c8 <pinMode+0x78>)
    2288:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    228a:	movs	r2, #21
    228c:	str	r2, [r3, #0]
}
    228e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2290:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    2292:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2294:	ldr	r4, [r0, #4]
    2296:	orr.w	r2, r2, r4
    229a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    229c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    229e:	beq.n	22b2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    22a0:	movw	r1, #2104	; 0x838
    22a4:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    22a6:	ldr	r3, [r3, #4]
    22a8:	movs	r2, #21
}
    22aa:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    22ae:	str	r2, [r3, #0]
}
    22b0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    22b2:	movs	r1, #56	; 0x38
    22b4:	str	r1, [r2, #0]
    22b6:	b.n	22a6 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    22b8:	ldr	r1, [pc, #16]	; (22cc <pinMode+0x7c>)
    22ba:	str	r1, [r2, #0]
    22bc:	b.n	22a6 <pinMode+0x56>
    22be:	nop
    22c0:	.word	0x20000150
    22c4:	.word	0x00013038
    22c8:	.word	0x00010038
    22cc:	.word	0x0001f038

000022d0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    22d0:	ldr	r2, [pc, #72]	; (231c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    22d2:	ldr	r3, [pc, #76]	; (2320 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    22d4:	ldr.w	r0, [r2, #544]	; 0x220
    22d8:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    22dc:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    22de:	push	{r4, lr}
    22e0:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    22e2:	bhi.n	22ea <usb_init_serialnumber+0x1a>
    22e4:	add.w	r0, r0, r0, lsl #2
    22e8:	lsls	r0, r0, #1
    22ea:	ldr	r4, [pc, #56]	; (2324 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    22ec:	add	r1, sp, #4
    22ee:	movs	r2, #10
    22f0:	bl	2850 <ultoa>
    22f4:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    22f6:	movs	r3, #0
    22f8:	mov	r0, r4
		char c = buf[i];
    22fa:	ldrb.w	r2, [r1], #1
    22fe:	adds	r3, #1
		if (!c) break;
    2300:	cbz	r2, 2312 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2302:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    2304:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2308:	bne.n	22fa <usb_init_serialnumber+0x2a>
    230a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    230c:	strb	r3, [r4, #0]
}
    230e:	add	sp, #16
    2310:	pop	{r4, pc}
    2312:	lsls	r3, r3, #1
    2314:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2316:	strb	r3, [r4, #0]
}
    2318:	add	sp, #16
    231a:	pop	{r4, pc}
    231c:	.word	0x401f4400
    2320:	.word	0x0098967f
    2324:	.word	0x20000778

00002328 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2328:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    232a:	bl	308 <setup>
	while (1) {
		loop();
    232e:	bl	e8 <loop>
		yield();
    2332:	bl	2338 <yield>
    2336:	b.n	232e <main+0x6>

00002338 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2338:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    233a:	ldr	r4, [pc, #132]	; (23c0 <yield+0x88>)
    233c:	ldrb	r3, [r4, #0]
    233e:	cbnz	r3, 2362 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2340:	ldr	r3, [pc, #128]	; (23c4 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2342:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2344:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2346:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2348:	cbnz	r3, 2392 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    234a:	ldr	r3, [pc, #124]	; (23c8 <yield+0x90>)
    234c:	ldrb	r3, [r3, #0]
    234e:	cmp	r3, #0
    2350:	bne.n	23a6 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    2352:	ldr	r3, [pc, #120]	; (23cc <yield+0x94>)

	running = 0;
    2354:	movs	r1, #0
    2356:	ldr	r2, [r3, #0]
    2358:	strb	r1, [r4, #0]
    235a:	cbz	r2, 2362 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    235c:	mrs	r2, IPSR
		if (ipsr != 0) return;
    2360:	cbz	r2, 2364 <yield+0x2c>
    2362:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2364:	mrs	r0, PRIMASK
		__disable_irq();
    2368:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    236a:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    236c:	cbz	r2, 23ac <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    236e:	ldr	r4, [pc, #96]	; (23d0 <yield+0x98>)
    2370:	ldrb	r1, [r4, #0]
    2372:	cbnz	r1, 23ac <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2374:	movs	r6, #1
		firstYield = first->_next;
    2376:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2378:	strb	r6, [r4, #0]
		firstYield = first->_next;
    237a:	str	r5, [r3, #0]
		if (firstYield) {
    237c:	cbz	r5, 23b4 <yield+0x7c>
			firstYield->_prev = nullptr;
    237e:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2380:	cbnz	r0, 2384 <yield+0x4c>
    2382:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2384:	movs	r5, #0
		(*(first->_function))(*first);
    2386:	ldr	r3, [r2, #8]
    2388:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    238a:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    238c:	blx	r3
		runningFromYield = false;
    238e:	strb	r5, [r4, #0]
    2390:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2392:	bl	db4 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2396:	cmp	r0, #0
    2398:	beq.n	234a <yield+0x12>
    239a:	bl	2604 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    239e:	ldr	r3, [pc, #40]	; (23c8 <yield+0x90>)
    23a0:	ldrb	r3, [r3, #0]
    23a2:	cmp	r3, #0
    23a4:	beq.n	2352 <yield+0x1a>
    23a6:	bl	28c4 <HardwareSerial::processSerialEvents()>
    23aa:	b.n	2352 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    23ac:	cmp	r0, #0
    23ae:	bne.n	2362 <yield+0x2a>
    23b0:	cpsie	i
    23b2:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    23b4:	ldr	r3, [pc, #28]	; (23d4 <yield+0x9c>)
    23b6:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    23b8:	cmp	r0, #0
    23ba:	bne.n	2384 <yield+0x4c>
    23bc:	b.n	2382 <yield+0x4a>
    23be:	nop
    23c0:	.word	0x20001428
    23c4:	.word	0x2000078e
    23c8:	.word	0x20001478
    23cc:	.word	0x2000143c
    23d0:	.word	0x20001440
    23d4:	.word	0x20001438

000023d8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    23d8:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    23da:	mrs	r2, PRIMASK
		__disable_irq();
    23de:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    23e0:	ldrb	r3, [r0, #29]
    23e2:	cbnz	r3, 23f2 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    23e4:	ldrb	r1, [r0, #28]
    23e6:	cmp	r1, #1
    23e8:	beq.n	23fc <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    23ea:	cmp	r1, #3
    23ec:	beq.n	2410 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    23ee:	movs	r3, #1
    23f0:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    23f2:	cbnz	r2, 23f6 <EventResponder::triggerEventNotImmediate()+0x1e>
    23f4:	cpsie	i
	}
	enableInterrupts(irq);
}
    23f6:	ldr.w	r4, [sp], #4
    23fa:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    23fc:	ldr	r4, [pc, #68]	; (2444 <EventResponder::triggerEventNotImmediate()+0x6c>)
    23fe:	ldr	r1, [r4, #0]
    2400:	cbz	r1, 242c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    2402:	ldr	r1, [pc, #68]	; (2448 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    2404:	str	r3, [r0, #20]
				_prev = lastYield;
    2406:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    2408:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    240a:	str	r3, [r0, #24]
				_prev->_next = this;
    240c:	str	r0, [r3, #20]
    240e:	b.n	23ee <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    2410:	ldr	r4, [pc, #56]	; (244c <EventResponder::triggerEventNotImmediate()+0x74>)
    2412:	ldr	r1, [r4, #0]
    2414:	cbz	r1, 2438 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    2416:	ldr	r1, [pc, #56]	; (2450 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    2418:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    241a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    241c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    241e:	str	r3, [r0, #24]
				_prev->_next = this;
    2420:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2422:	ldr	r3, [pc, #48]	; (2454 <EventResponder::triggerEventNotImmediate()+0x7c>)
    2424:	mov.w	r1, #268435456	; 0x10000000
    2428:	str	r1, [r3, #0]
    242a:	b.n	23ee <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    242c:	ldr	r3, [pc, #24]	; (2448 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    242e:	str	r1, [r0, #20]
				_prev = nullptr;
    2430:	str	r1, [r0, #24]
				firstYield = this;
    2432:	str	r0, [r4, #0]
				lastYield = this;
    2434:	str	r0, [r3, #0]
    2436:	b.n	23ee <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    2438:	ldr	r3, [pc, #20]	; (2450 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    243a:	str	r1, [r0, #20]
				_prev = nullptr;
    243c:	str	r1, [r0, #24]
				firstInterrupt = this;
    243e:	str	r0, [r4, #0]
				lastInterrupt = this;
    2440:	str	r0, [r3, #0]
    2442:	b.n	2422 <EventResponder::triggerEventNotImmediate()+0x4a>
    2444:	.word	0x2000143c
    2448:	.word	0x20001438
    244c:	.word	0x2000142c
    2450:	.word	0x20001430
    2454:	.word	0xe000ed04

00002458 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2458:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    245a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    245c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    245e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2460:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2462:	beq.n	246c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2464:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2468:	b.w	23d8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    246c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    246e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2472:	bx	r3

00002474 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2474:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2476:	mrs	r1, PRIMASK
		__disable_irq();
    247a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    247c:	ldr	r4, [pc, #48]	; (24b0 <EventResponder::runFromInterrupt()+0x3c>)
    247e:	ldr	r3, [r4, #0]
		if (first) {
    2480:	cbz	r3, 24a6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2482:	ldr	r6, [pc, #48]	; (24b4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2484:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    2486:	ldr	r2, [r3, #20]
    2488:	str	r2, [r4, #0]
			if (firstInterrupt) {
    248a:	cbz	r2, 24ac <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    248c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    248e:	cbnz	r1, 2492 <EventResponder::runFromInterrupt()+0x1e>
    2490:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    2492:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    2494:	mov	r0, r3
    2496:	ldr	r3, [r3, #8]
    2498:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    249a:	mrs	r1, PRIMASK
		__disable_irq();
    249e:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    24a0:	ldr	r3, [r4, #0]
		if (first) {
    24a2:	cmp	r3, #0
    24a4:	bne.n	2486 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    24a6:	cbnz	r1, 24aa <EventResponder::runFromInterrupt()+0x36>
    24a8:	cpsie	i
    24aa:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    24ac:	str	r2, [r6, #0]
    24ae:	b.n	248e <EventResponder::runFromInterrupt()+0x1a>
    24b0:	.word	0x2000142c
    24b4:	.word	0x20001430

000024b8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    24b8:	b.w	2474 <EventResponder::runFromInterrupt()>

000024bc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    24bc:	ldr	r2, [pc, #96]	; (2520 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    24be:	push	{r4, r5}
	if (listActive == nullptr) {
    24c0:	ldr	r4, [r2, #0]
    24c2:	cmp	r4, #0
    24c4:	beq.n	2518 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    24c6:	ldr	r3, [r0, #0]
    24c8:	ldr	r1, [r4, #0]
    24ca:	cmp	r3, r1
    24cc:	bcs.n	24ee <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    24ce:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    24d0:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    24d2:	str	r4, [r0, #8]
		_prev = nullptr;
    24d4:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    24d6:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    24d8:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    24da:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    24dc:	movs	r3, #2
}
    24de:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    24e0:	strb	r3, [r0, #20]
}
    24e2:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    24e4:	str	r3, [r0, #0]
    24e6:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    24e8:	ldr	r1, [r2, #0]
    24ea:	cmp	r3, r1
    24ec:	bcc.n	2500 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    24ee:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    24f0:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    24f2:	cmp	r2, #0
    24f4:	bne.n	24e4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    24f6:	str	r2, [r0, #8]
		_prev = timer;
    24f8:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    24fa:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    24fc:	str	r0, [r4, #8]
    24fe:	b.n	24dc <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    2500:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    2502:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    2504:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    2506:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    2508:	str	r5, [r0, #12]
				timer->_prev = this;
    250a:	str	r0, [r4, #12]
				_prev->_next = this;
    250c:	ldr	r1, [r0, #12]
    250e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    2510:	str	r3, [r4, #0]
				_state = TimerActive;
    2512:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    2514:	pop	{r4, r5}
    2516:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    2518:	str	r4, [r0, #8]
		_prev = nullptr;
    251a:	str	r4, [r0, #12]
		listActive = this;
    251c:	str	r0, [r2, #0]
    251e:	b.n	24dc <MillisTimer::addToActiveList()+0x20>
    2520:	.word	0x20001434

00002524 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    2524:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    2526:	ldr	r6, [pc, #136]	; (25b0 <MillisTimer::runFromTimer()+0x8c>)
    2528:	ldr	r4, [r6, #0]
	while (timer) {
    252a:	cbz	r4, 2578 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    252c:	ldr	r3, [r4, #0]
    252e:	cmp	r3, #0
    2530:	bne.n	25a8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    2532:	mov	r5, r3
    2534:	ldr	r7, [pc, #124]	; (25b4 <MillisTimer::runFromTimer()+0x90>)
    2536:	b.n	2542 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    2538:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    253a:	cbz	r4, 2578 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    253c:	ldr	r3, [r4, #0]
    253e:	cmp	r3, #0
    2540:	bne.n	25a8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    2542:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    2544:	cbz	r3, 2548 <MillisTimer::runFromTimer()+0x24>
    2546:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    2548:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    254a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    254c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    254e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    2550:	ldr	r3, [r3, #0]
    2552:	cmp	r3, r7
    2554:	bne.n	259a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2556:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2558:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    255a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    255c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    255e:	beq.n	25a2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2560:	bl	23d8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    2564:	ldr	r3, [r4, #4]
    2566:	cmp	r3, #0
    2568:	beq.n	2538 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    256a:	str	r3, [r4, #0]
				timer->addToActiveList();
    256c:	mov	r0, r4
    256e:	bl	24bc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    2572:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    2574:	cmp	r4, #0
    2576:	bne.n	253c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2578:	mrs	r3, PRIMASK
		__disable_irq();
    257c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    257e:	ldr	r2, [pc, #56]	; (25b8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    2580:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    2582:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    2584:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    2586:	cbnz	r3, 258a <MillisTimer::runFromTimer()+0x66>
    2588:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    258a:	cbz	r0, 2598 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    258c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    258e:	bl	24bc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    2592:	mov	r0, r4
    2594:	cmp	r0, #0
    2596:	bne.n	258c <MillisTimer::runFromTimer()+0x68>
    2598:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    259a:	mov	r2, r4
    259c:	movs	r1, #0
    259e:	blx	r3
    25a0:	b.n	2564 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    25a2:	ldr	r3, [r0, #8]
    25a4:	blx	r3
    25a6:	b.n	2564 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    25a8:	subs	r3, #1
    25aa:	str	r3, [r4, #0]
			break;
    25ac:	b.n	2578 <MillisTimer::runFromTimer()+0x54>
    25ae:	nop
    25b0:	.word	0x20001434
    25b4:	.word	0x00002459
    25b8:	.word	0x20001444

000025bc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    25bc:	ldr	r2, [pc, #16]	; (25d0 <systick_isr+0x14>)
    25be:	ldr	r3, [pc, #20]	; (25d4 <systick_isr+0x18>)
    25c0:	ldr	r1, [r2, #0]
	systick_millis_count++;
    25c2:	ldr	r2, [pc, #20]	; (25d8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    25c4:	str	r1, [r3, #0]
	systick_millis_count++;
    25c6:	ldr	r3, [r2, #0]
    25c8:	adds	r3, #1
    25ca:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    25cc:	b.w	2524 <MillisTimer::runFromTimer()>
    25d0:	.word	0xe0001004
    25d4:	.word	0x2000141c
    25d8:	.word	0x20001424

000025dc <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    25dc:	b.w	dc0 <usb_serial_flush_input>

000025e0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    25e0:	b.w	d70 <usb_serial_peekchar>

000025e4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    25e4:	b.w	e34 <usb_serial_getchar>

000025e8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    25e8:	b.w	db4 <usb_serial_available>

000025ec <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    25ec:	b.w	ee4 <usb_serial_flush_output>

000025f0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    25f0:	b.w	e98 <usb_serial_write_buffer_free>

000025f4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    25f4:	mov	r0, r1
    25f6:	mov	r1, r2
    25f8:	b.w	e80 <usb_serial_write>

000025fc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    25fc:	mov	r0, r1
    25fe:	b.w	e54 <usb_serial_putchar>
    2602:	nop

00002604 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    2604:	ldr	r3, [pc, #4]	; (260c <serialEvent()+0x8>)
    2606:	movs	r2, #0
    2608:	strb	r2, [r3, #0]
    260a:	bx	lr
    260c:	.word	0x2000078e

00002610 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    2610:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    2612:	push	{r4, lr}
    2614:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    2616:	ldr	r3, [r3, #4]
    2618:	blx	r3
	return len;
}
    261a:	mov	r0, r4
    261c:	pop	{r4, pc}
    261e:	nop

00002620 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    2620:	push	{r1, r2, r3}
    2622:	push	{lr}
    2624:	sub	sp, #8
    2626:	add	r3, sp, #12
    2628:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    262c:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    262e:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    2630:	bl	35a8 <vdprintf>
#endif
}
    2634:	add	sp, #8
    2636:	ldr.w	lr, [sp], #4
    263a:	add	sp, #12
    263c:	bx	lr
    263e:	nop

00002640 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2640:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2642:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2646:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    264a:	bne.n	2728 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    264c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    264e:	bcc.n	26d4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2650:	ldr.w	r3, [r1], #4
    2654:	str.w	r3, [r0], #4
    2658:	ldr.w	r3, [r1], #4
    265c:	str.w	r3, [r0], #4
    2660:	ldr.w	r3, [r1], #4
    2664:	str.w	r3, [r0], #4
    2668:	ldr.w	r3, [r1], #4
    266c:	str.w	r3, [r0], #4
    2670:	ldr.w	r3, [r1], #4
    2674:	str.w	r3, [r0], #4
    2678:	ldr.w	r3, [r1], #4
    267c:	str.w	r3, [r0], #4
    2680:	ldr.w	r3, [r1], #4
    2684:	str.w	r3, [r0], #4
    2688:	ldr.w	r3, [r1], #4
    268c:	str.w	r3, [r0], #4
    2690:	ldr.w	r3, [r1], #4
    2694:	str.w	r3, [r0], #4
    2698:	ldr.w	r3, [r1], #4
    269c:	str.w	r3, [r0], #4
    26a0:	ldr.w	r3, [r1], #4
    26a4:	str.w	r3, [r0], #4
    26a8:	ldr.w	r3, [r1], #4
    26ac:	str.w	r3, [r0], #4
    26b0:	ldr.w	r3, [r1], #4
    26b4:	str.w	r3, [r0], #4
    26b8:	ldr.w	r3, [r1], #4
    26bc:	str.w	r3, [r0], #4
    26c0:	ldr.w	r3, [r1], #4
    26c4:	str.w	r3, [r0], #4
    26c8:	ldr.w	r3, [r1], #4
    26cc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    26d0:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    26d2:	bcs.n	2650 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    26d4:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    26d6:	bcc.n	26fc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    26d8:	ldr.w	r3, [r1], #4
    26dc:	str.w	r3, [r0], #4
    26e0:	ldr.w	r3, [r1], #4
    26e4:	str.w	r3, [r0], #4
    26e8:	ldr.w	r3, [r1], #4
    26ec:	str.w	r3, [r0], #4
    26f0:	ldr.w	r3, [r1], #4
    26f4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    26f8:	subs	r2, #16
	bhs	.Lmid_block_loop
    26fa:	bcs.n	26d8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    26fc:	adds	r2, #12
	blo	.Lcopy_less_than_4
    26fe:	bcc.n	270c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2700:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2704:	str.w	r3, [r0], #4
	subs	r2, #4
    2708:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    270a:	bcs.n	2700 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    270c:	adds	r2, #4
	beq	.Ldone
    270e:	beq.n	2722 <memcpy+0xe2>

	lsls	r2, r2, #31
    2710:	lsls	r2, r2, #31
	itt ne
    2712:	itt	ne
	ldrbne  r3, [r1], #1
    2714:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2718:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    271c:	bcc.n	2722 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    271e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2720:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2722:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2724:	bx	lr
    2726:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2728:	cmp	r2, #8
	blo	.Lbyte_copy
    272a:	bcc.n	2754 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    272c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    272e:	beq.n	264c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2730:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2734:	beq.n	264c <memcpy+0xc>

	rsb	r3, #4
    2736:	rsb	r3, r3, #4
	subs	r2, r3
    273a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    273c:	lsls	r3, r3, #31
	itt ne
    273e:	itt	ne
	ldrbne  r3, [r1], #1
    2740:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2744:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2748:	bcc.n	264c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    274a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    274e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2752:	b.n	264c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2754:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2756:	bcc.n	270c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2758:	subs	r2, #1
	ldrb    r3, [r1], #1
    275a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    275e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2762:	bcs.n	2758 <memcpy+0x118>

	ldrb	r3, [r1]
    2764:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2766:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2768:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    276a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    276c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    276e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2770:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2772:	bx	lr

00002774 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    2774:	movs	r0, #4
    2776:	mov	r1, lr
    2778:	tst	r0, r1
    277a:	beq.n	2784 <_MSP>
    277c:	mrs	r0, PSP
    2780:	b.w	2794 <HardFault_HandlerC>

00002784 <_MSP>:
    2784:	mrs	r0, MSP
    2788:	b.w	2794 <HardFault_HandlerC>

0000278c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    278c:	bx	lr
    278e:	nop

00002790 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    2790:	bx	lr
    2792:	nop

00002794 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2794:	ldr	r3, [pc, #108]	; (2804 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2796:	movs	r1, #5
    2798:	ldr	r2, [pc, #108]	; (2808 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    279a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    279c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    279e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    27a2:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    27a4:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    27a8:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    27aa:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    27ac:	ldr	r4, [pc, #92]	; (280c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    27ae:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    27b0:	ldr	r0, [pc, #92]	; (2810 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    27b2:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    27b4:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    27b8:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    27bc:	ldr	r3, [r4, #0]
    27be:	cmp	r3, r0
    27c0:	bls.n	27c8 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    27c2:	ldr	r0, [pc, #80]	; (2814 <HardFault_HandlerC+0x80>)
    27c4:	bl	f84 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    27c8:	ldr	r5, [pc, #56]	; (2804 <HardFault_HandlerC+0x70>)
    27ca:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    27cc:	movs	r0, #0
    27ce:	ldr	r2, [pc, #72]	; (2818 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    27d0:	ldr	r1, [pc, #72]	; (281c <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    27d2:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    27d6:	str	r0, [sp, #4]
    27d8:	ldr	r3, [sp, #4]
    27da:	cmp	r3, r2
    27dc:	bhi.n	27ea <HardFault_HandlerC+0x56>
    27de:	ldr	r3, [sp, #4]
    27e0:	adds	r3, #1
    27e2:	str	r3, [sp, #4]
    27e4:	ldr	r3, [sp, #4]
    27e6:	cmp	r3, r2
    27e8:	bls.n	27de <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    27ea:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    27ee:	str	r0, [sp, #4]
    27f0:	ldr	r3, [sp, #4]
    27f2:	cmp	r3, r1
    27f4:	bhi.n	27d2 <HardFault_HandlerC+0x3e>
    27f6:	ldr	r3, [sp, #4]
    27f8:	adds	r3, #1
    27fa:	str	r3, [sp, #4]
    27fc:	ldr	r3, [sp, #4]
    27fe:	cmp	r3, r1
    2800:	bls.n	27f6 <HardFault_HandlerC+0x62>
    2802:	b.n	27d2 <HardFault_HandlerC+0x3e>
    2804:	.word	0x401bc000
    2808:	.word	0x401f8000
    280c:	.word	0x2000075c
    2810:	.word	0x23c345ff
    2814:	.word	0x11e1a300
    2818:	.word	0x000f423f
    281c:	.word	0x0089543f

00002820 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    2820:	ldr	r2, [pc, #36]	; (2848 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    2822:	push	{r3, lr}
        char *prev = __brkval;
    2824:	ldr	r3, [r2, #0]
        if (incr != 0) {
    2826:	cbz	r0, 2832 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    2828:	add	r0, r3
    282a:	ldr	r1, [pc, #32]	; (284c <_sbrk+0x2c>)
    282c:	cmp	r0, r1
    282e:	bhi.n	2836 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    2830:	str	r0, [r2, #0]
        }
        return prev;
}
    2832:	mov	r0, r3
    2834:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2836:	bl	2904 <__errno>
    283a:	movs	r2, #12
                        return (void *)-1;
    283c:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2840:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2842:	mov	r0, r3
    2844:	pop	{r3, pc}
    2846:	nop
    2848:	.word	0x200007a0
    284c:	.word	0x20280000

00002850 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2850:	push	{r4, r5, r6, r7}
    2852:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    2854:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2856:	mov	r7, r6
    2858:	b.n	285c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    285a:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    285c:	udiv	r3, r0, r2
    2860:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2864:	add.w	r4, r0, #55	; 0x37
    2868:	cmp	r0, #9
    286a:	add.w	r0, r0, #48	; 0x30
    286e:	uxtb	r4, r4
    2870:	it	ls
    2872:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    2874:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2876:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    287a:	cmp	r3, #0
    287c:	bne.n	285a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    287e:	adds	r2, r1, r5
    2880:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    2882:	cbz	r5, 2898 <ultoa+0x48>
    2884:	adds	r3, #1
		t = buf[j];
    2886:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    288a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    288c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    288e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2890:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    2892:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2896:	blt.n	2884 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    2898:	mov	r0, r1
    289a:	pop	{r4, r5, r6, r7}
    289c:	bx	lr
    289e:	nop

000028a0 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    28a0:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    28a2:	ldr	r2, [pc, #24]	; (28bc <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    28a4:	movs	r1, #7
    28a6:	ldr	r3, [pc, #24]	; (28c0 <Panic_Temp_isr+0x20>)
    28a8:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    28aa:	ldr	r3, [r2, #56]	; 0x38
    28ac:	orr.w	r3, r3, #64	; 0x40
    28b0:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    28b2:	dsb	sy
  while (1) asm ("wfi");
    28b6:	wfi
    28b8:	b.n	28b6 <Panic_Temp_isr+0x16>
    28ba:	nop
    28bc:	.word	0x400d4000
    28c0:	.word	0x400ac000

000028c4 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    28c4:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    28c6:	ldr	r3, [pc, #28]	; (28e4 <HardwareSerial::processSerialEvents()+0x20>)
    28c8:	ldrb	r4, [r3, #0]
    28ca:	cbz	r4, 28e0 <HardwareSerial::processSerialEvents()+0x1c>
    28cc:	ldr	r5, [pc, #24]	; (28e8 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    28ce:	ldr.w	r3, [r5, #4]!
    28d2:	cmp	r3, #0
    28d4:	beq.n	28ce <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    28d6:	blx	r3
			if (--handlers_still_to_process == 0) return;
    28d8:	subs	r3, r4, #1
    28da:	ands.w	r4, r3, #255	; 0xff
    28de:	bne.n	28ce <HardwareSerial::processSerialEvents()+0xa>
    28e0:	pop	{r3, r4, r5, pc}
    28e2:	nop
    28e4:	.word	0x20001478
    28e8:	.word	0x20001458

000028ec <__aeabi_atexit>:
    28ec:	mov	r3, r1
    28ee:	mov	r1, r0
    28f0:	mov	r0, r3
    28f2:	b.w	28f8 <__cxa_atexit>
    28f6:	nop

000028f8 <__cxa_atexit>:
    28f8:	mov	r3, r2
    28fa:	mov	r2, r1
    28fc:	mov	r1, r0
    28fe:	movs	r0, #2
    2900:	b.w	3608 <__register_exitproc>

00002904 <__errno>:
    2904:	ldr	r3, [pc, #4]	; (290c <__errno+0x8>)
    2906:	ldr	r0, [r3, #0]
    2908:	bx	lr
    290a:	nop
    290c:	.word	0x20000bd0

00002910 <__libc_init_array>:
    2910:	push	{r4, r5, r6, lr}
    2912:	ldr	r6, [pc, #60]	; (2950 <__libc_init_array+0x40>)
    2914:	ldr	r5, [pc, #60]	; (2954 <__libc_init_array+0x44>)
    2916:	subs	r6, r6, r5
    2918:	asrs	r6, r6, #2
    291a:	it	ne
    291c:	movne	r4, #0
    291e:	beq.n	292c <__libc_init_array+0x1c>
    2920:	adds	r4, #1
    2922:	ldr.w	r3, [r5], #4
    2926:	blx	r3
    2928:	cmp	r6, r4
    292a:	bne.n	2920 <__libc_init_array+0x10>
    292c:	ldr	r6, [pc, #40]	; (2958 <__libc_init_array+0x48>)
    292e:	ldr	r5, [pc, #44]	; (295c <__libc_init_array+0x4c>)
    2930:	subs	r6, r6, r5
    2932:	bl	6800 <___init_veneer>
    2936:	asrs	r6, r6, #2
    2938:	it	ne
    293a:	movne	r4, #0
    293c:	beq.n	294c <__libc_init_array+0x3c>
    293e:	adds	r4, #1
    2940:	ldr.w	r3, [r5], #4
    2944:	blx	r3
    2946:	cmp	r6, r4
    2948:	bne.n	293e <__libc_init_array+0x2e>
    294a:	pop	{r4, r5, r6, pc}
    294c:	pop	{r4, r5, r6, pc}
    294e:	nop
    2950:	.word	0x60001740
    2954:	.word	0x60001740
    2958:	.word	0x60001748
    295c:	.word	0x60001740

00002960 <malloc>:
    2960:	ldr	r3, [pc, #8]	; (296c <malloc+0xc>)
    2962:	mov	r1, r0
    2964:	ldr	r0, [r3, #0]
    2966:	b.w	2970 <_malloc_r>
    296a:	nop
    296c:	.word	0x20000bd0

00002970 <_malloc_r>:
    2970:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2974:	add.w	r5, r1, #11
    2978:	cmp	r5, #22
    297a:	sub	sp, #12
    297c:	mov	r6, r0
    297e:	bls.w	2ac0 <_malloc_r+0x150>
    2982:	bics.w	r5, r5, #7
    2986:	bmi.w	2b08 <_malloc_r+0x198>
    298a:	cmp	r1, r5
    298c:	bhi.w	2b08 <_malloc_r+0x198>
    2990:	bl	3070 <__malloc_lock>
    2994:	cmp.w	r5, #504	; 0x1f8
    2998:	bcc.w	2ed4 <_malloc_r+0x564>
    299c:	lsrs	r3, r5, #9
    299e:	beq.w	2b16 <_malloc_r+0x1a6>
    29a2:	cmp	r3, #4
    29a4:	bhi.w	2cae <_malloc_r+0x33e>
    29a8:	lsrs	r0, r5, #6
    29aa:	add.w	lr, r0, #57	; 0x39
    29ae:	mov.w	r3, lr, lsl #1
    29b2:	adds	r0, #56	; 0x38
    29b4:	ldr	r7, [pc, #784]	; (2cc8 <_malloc_r+0x358>)
    29b6:	add.w	r3, r7, r3, lsl #2
    29ba:	sub.w	r1, r3, #8
    29be:	ldr	r4, [r3, #4]
    29c0:	cmp	r1, r4
    29c2:	bne.n	29d4 <_malloc_r+0x64>
    29c4:	b.n	2b20 <_malloc_r+0x1b0>
    29c6:	cmp	r2, #0
    29c8:	bge.w	2b24 <_malloc_r+0x1b4>
    29cc:	ldr	r4, [r4, #12]
    29ce:	cmp	r1, r4
    29d0:	beq.w	2b20 <_malloc_r+0x1b0>
    29d4:	ldr	r3, [r4, #4]
    29d6:	bic.w	r3, r3, #3
    29da:	subs	r2, r3, r5
    29dc:	cmp	r2, #15
    29de:	ble.n	29c6 <_malloc_r+0x56>
    29e0:	ldr	r1, [pc, #740]	; (2cc8 <_malloc_r+0x358>)
    29e2:	ldr	r4, [r7, #16]
    29e4:	add.w	lr, r1, #8
    29e8:	cmp	r4, lr
    29ea:	beq.w	2d54 <_malloc_r+0x3e4>
    29ee:	ldr	r3, [r4, #4]
    29f0:	bic.w	r3, r3, #3
    29f4:	subs	r2, r3, r5
    29f6:	cmp	r2, #15
    29f8:	bgt.w	2d2e <_malloc_r+0x3be>
    29fc:	cmp	r2, #0
    29fe:	str.w	lr, [r1, #20]
    2a02:	str.w	lr, [r1, #16]
    2a06:	bge.w	2b46 <_malloc_r+0x1d6>
    2a0a:	cmp.w	r3, #512	; 0x200
    2a0e:	bcs.w	2ce0 <_malloc_r+0x370>
    2a12:	lsrs	r3, r3, #3
    2a14:	add.w	ip, r3, #1
    2a18:	movs	r2, #1
    2a1a:	asrs	r3, r3, #2
    2a1c:	lsl.w	r3, r2, r3
    2a20:	ldr	r2, [r1, #4]
    2a22:	ldr.w	r8, [r1, ip, lsl #3]
    2a26:	str.w	r8, [r4, #8]
    2a2a:	add.w	r9, r1, ip, lsl #3
    2a2e:	orrs	r2, r3
    2a30:	sub.w	r3, r9, #8
    2a34:	str	r3, [r4, #12]
    2a36:	str	r2, [r1, #4]
    2a38:	str.w	r4, [r1, ip, lsl #3]
    2a3c:	str.w	r4, [r8, #12]
    2a40:	asrs	r3, r0, #2
    2a42:	movs	r4, #1
    2a44:	lsls	r4, r3
    2a46:	cmp	r4, r2
    2a48:	bhi.w	2b60 <_malloc_r+0x1f0>
    2a4c:	tst	r4, r2
    2a4e:	bne.n	2a5e <_malloc_r+0xee>
    2a50:	bic.w	r0, r0, #3
    2a54:	lsls	r4, r4, #1
    2a56:	tst	r4, r2
    2a58:	add.w	r0, r0, #4
    2a5c:	beq.n	2a54 <_malloc_r+0xe4>
    2a5e:	add.w	r9, r7, r0, lsl #3
    2a62:	mov	ip, r9
    2a64:	mov	r8, r0
    2a66:	ldr.w	r1, [ip, #12]
    2a6a:	cmp	ip, r1
    2a6c:	bne.n	2a7e <_malloc_r+0x10e>
    2a6e:	b.n	2d58 <_malloc_r+0x3e8>
    2a70:	cmp	r2, #0
    2a72:	bge.w	2d78 <_malloc_r+0x408>
    2a76:	ldr	r1, [r1, #12]
    2a78:	cmp	ip, r1
    2a7a:	beq.w	2d58 <_malloc_r+0x3e8>
    2a7e:	ldr	r3, [r1, #4]
    2a80:	bic.w	r3, r3, #3
    2a84:	subs	r2, r3, r5
    2a86:	cmp	r2, #15
    2a88:	ble.n	2a70 <_malloc_r+0x100>
    2a8a:	mov	r4, r1
    2a8c:	ldr.w	ip, [r1, #12]
    2a90:	ldr.w	r8, [r4, #8]!
    2a94:	adds	r3, r1, r5
    2a96:	orr.w	r5, r5, #1
    2a9a:	str	r5, [r1, #4]
    2a9c:	orr.w	r1, r2, #1
    2aa0:	str.w	ip, [r8, #12]
    2aa4:	mov	r0, r6
    2aa6:	str.w	r8, [ip, #8]
    2aaa:	str	r3, [r7, #20]
    2aac:	str	r3, [r7, #16]
    2aae:	str.w	lr, [r3, #12]
    2ab2:	str.w	lr, [r3, #8]
    2ab6:	str	r1, [r3, #4]
    2ab8:	str	r2, [r3, r2]
    2aba:	bl	3074 <__malloc_unlock>
    2abe:	b.n	2b00 <_malloc_r+0x190>
    2ac0:	cmp	r1, #16
    2ac2:	bhi.n	2b08 <_malloc_r+0x198>
    2ac4:	bl	3070 <__malloc_lock>
    2ac8:	movs	r5, #16
    2aca:	movs	r3, #6
    2acc:	movs	r0, #2
    2ace:	ldr	r7, [pc, #504]	; (2cc8 <_malloc_r+0x358>)
    2ad0:	add.w	r3, r7, r3, lsl #2
    2ad4:	sub.w	r2, r3, #8
    2ad8:	ldr	r4, [r3, #4]
    2ada:	cmp	r4, r2
    2adc:	beq.w	2d6a <_malloc_r+0x3fa>
    2ae0:	ldr	r3, [r4, #4]
    2ae2:	ldr	r1, [r4, #12]
    2ae4:	ldr	r5, [r4, #8]
    2ae6:	bic.w	r3, r3, #3
    2aea:	add	r3, r4
    2aec:	mov	r0, r6
    2aee:	ldr	r2, [r3, #4]
    2af0:	str	r1, [r5, #12]
    2af2:	orr.w	r2, r2, #1
    2af6:	str	r5, [r1, #8]
    2af8:	str	r2, [r3, #4]
    2afa:	bl	3074 <__malloc_unlock>
    2afe:	adds	r4, #8
    2b00:	mov	r0, r4
    2b02:	add	sp, #12
    2b04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b08:	movs	r4, #0
    2b0a:	movs	r3, #12
    2b0c:	mov	r0, r4
    2b0e:	str	r3, [r6, #0]
    2b10:	add	sp, #12
    2b12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b16:	movs	r3, #128	; 0x80
    2b18:	mov.w	lr, #64	; 0x40
    2b1c:	movs	r0, #63	; 0x3f
    2b1e:	b.n	29b4 <_malloc_r+0x44>
    2b20:	mov	r0, lr
    2b22:	b.n	29e0 <_malloc_r+0x70>
    2b24:	add	r3, r4
    2b26:	ldr	r1, [r4, #12]
    2b28:	ldr	r2, [r3, #4]
    2b2a:	ldr	r5, [r4, #8]
    2b2c:	orr.w	r2, r2, #1
    2b30:	str	r1, [r5, #12]
    2b32:	mov	r0, r6
    2b34:	str	r5, [r1, #8]
    2b36:	str	r2, [r3, #4]
    2b38:	bl	3074 <__malloc_unlock>
    2b3c:	adds	r4, #8
    2b3e:	mov	r0, r4
    2b40:	add	sp, #12
    2b42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b46:	add	r3, r4
    2b48:	mov	r0, r6
    2b4a:	ldr	r2, [r3, #4]
    2b4c:	orr.w	r2, r2, #1
    2b50:	str	r2, [r3, #4]
    2b52:	bl	3074 <__malloc_unlock>
    2b56:	adds	r4, #8
    2b58:	mov	r0, r4
    2b5a:	add	sp, #12
    2b5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b60:	ldr	r4, [r7, #8]
    2b62:	ldr	r3, [r4, #4]
    2b64:	bic.w	r8, r3, #3
    2b68:	cmp	r8, r5
    2b6a:	bcc.n	2b76 <_malloc_r+0x206>
    2b6c:	rsb	r3, r5, r8
    2b70:	cmp	r3, #15
    2b72:	bgt.w	2c8e <_malloc_r+0x31e>
    2b76:	ldr	r3, [pc, #340]	; (2ccc <_malloc_r+0x35c>)
    2b78:	ldr.w	r9, [pc, #352]	; 2cdc <_malloc_r+0x36c>
    2b7c:	ldr	r2, [r3, #0]
    2b7e:	ldr.w	r3, [r9]
    2b82:	adds	r3, #1
    2b84:	add	r2, r5
    2b86:	add.w	sl, r4, r8
    2b8a:	beq.w	2e4e <_malloc_r+0x4de>
    2b8e:	add.w	r2, r2, #4096	; 0x1000
    2b92:	adds	r2, #15
    2b94:	bic.w	r2, r2, #4080	; 0xff0
    2b98:	bic.w	r2, r2, #15
    2b9c:	mov	r1, r2
    2b9e:	mov	r0, r6
    2ba0:	str	r2, [sp, #4]
    2ba2:	bl	3458 <_sbrk_r>
    2ba6:	cmp.w	r0, #4294967295
    2baa:	mov	fp, r0
    2bac:	ldr	r2, [sp, #4]
    2bae:	beq.w	2e62 <_malloc_r+0x4f2>
    2bb2:	cmp	sl, r0
    2bb4:	bhi.w	2db0 <_malloc_r+0x440>
    2bb8:	ldr	r3, [pc, #276]	; (2cd0 <_malloc_r+0x360>)
    2bba:	ldr	r1, [r3, #0]
    2bbc:	cmp	sl, fp
    2bbe:	add	r1, r2
    2bc0:	str	r1, [r3, #0]
    2bc2:	beq.w	2e6c <_malloc_r+0x4fc>
    2bc6:	ldr.w	r0, [r9]
    2bca:	ldr.w	lr, [pc, #272]	; 2cdc <_malloc_r+0x36c>
    2bce:	adds	r0, #1
    2bd0:	ittet	ne
    2bd2:	rsbne	sl, sl, fp
    2bd6:	addne	r1, sl
    2bd8:	streq.w	fp, [lr]
    2bdc:	strne	r1, [r3, #0]
    2bde:	ands.w	r1, fp, #7
    2be2:	beq.w	2e14 <_malloc_r+0x4a4>
    2be6:	rsb	r0, r1, #8
    2bea:	rsb	r1, r1, #4096	; 0x1000
    2bee:	add	fp, r0
    2bf0:	adds	r1, #8
    2bf2:	add	r2, fp
    2bf4:	ubfx	r2, r2, #0, #12
    2bf8:	rsb	r9, r2, r1
    2bfc:	mov	r1, r9
    2bfe:	mov	r0, r6
    2c00:	str	r3, [sp, #4]
    2c02:	bl	3458 <_sbrk_r>
    2c06:	adds	r3, r0, #1
    2c08:	ldr	r3, [sp, #4]
    2c0a:	beq.w	2e8c <_malloc_r+0x51c>
    2c0e:	rsb	r2, fp, r0
    2c12:	add	r2, r9
    2c14:	orr.w	r2, r2, #1
    2c18:	ldr	r1, [r3, #0]
    2c1a:	str.w	fp, [r7, #8]
    2c1e:	add	r1, r9
    2c20:	cmp	r4, r7
    2c22:	str.w	r2, [fp, #4]
    2c26:	str	r1, [r3, #0]
    2c28:	ldr.w	r9, [pc, #164]	; 2cd0 <_malloc_r+0x360>
    2c2c:	beq.n	2c5c <_malloc_r+0x2ec>
    2c2e:	cmp.w	r8, #15
    2c32:	bls.w	2e30 <_malloc_r+0x4c0>
    2c36:	ldr	r2, [r4, #4]
    2c38:	sub.w	r3, r8, #12
    2c3c:	bic.w	r3, r3, #7
    2c40:	adds	r0, r4, r3
    2c42:	and.w	r2, r2, #1
    2c46:	mov.w	lr, #5
    2c4a:	orrs	r2, r3
    2c4c:	cmp	r3, #15
    2c4e:	str	r2, [r4, #4]
    2c50:	str.w	lr, [r0, #4]
    2c54:	str.w	lr, [r0, #8]
    2c58:	bhi.w	2e94 <_malloc_r+0x524>
    2c5c:	ldr	r3, [pc, #116]	; (2cd4 <_malloc_r+0x364>)
    2c5e:	ldr	r4, [r7, #8]
    2c60:	ldr	r2, [r3, #0]
    2c62:	cmp	r1, r2
    2c64:	it	hi
    2c66:	strhi	r1, [r3, #0]
    2c68:	ldr	r3, [pc, #108]	; (2cd8 <_malloc_r+0x368>)
    2c6a:	ldr	r2, [r3, #0]
    2c6c:	cmp	r1, r2
    2c6e:	ldr	r2, [r4, #4]
    2c70:	it	hi
    2c72:	strhi	r1, [r3, #0]
    2c74:	bic.w	r2, r2, #3
    2c78:	cmp	r5, r2
    2c7a:	sub.w	r3, r2, r5
    2c7e:	bhi.n	2c84 <_malloc_r+0x314>
    2c80:	cmp	r3, #15
    2c82:	bgt.n	2c8e <_malloc_r+0x31e>
    2c84:	mov	r0, r6
    2c86:	bl	3074 <__malloc_unlock>
    2c8a:	movs	r4, #0
    2c8c:	b.n	2b00 <_malloc_r+0x190>
    2c8e:	adds	r2, r4, r5
    2c90:	orr.w	r3, r3, #1
    2c94:	orr.w	r5, r5, #1
    2c98:	str	r5, [r4, #4]
    2c9a:	mov	r0, r6
    2c9c:	str	r2, [r7, #8]
    2c9e:	str	r3, [r2, #4]
    2ca0:	bl	3074 <__malloc_unlock>
    2ca4:	adds	r4, #8
    2ca6:	mov	r0, r4
    2ca8:	add	sp, #12
    2caa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cae:	cmp	r3, #20
    2cb0:	bls.n	2d96 <_malloc_r+0x426>
    2cb2:	cmp	r3, #84	; 0x54
    2cb4:	bhi.w	2e00 <_malloc_r+0x490>
    2cb8:	lsrs	r0, r5, #12
    2cba:	add.w	lr, r0, #111	; 0x6f
    2cbe:	mov.w	r3, lr, lsl #1
    2cc2:	adds	r0, #110	; 0x6e
    2cc4:	b.n	29b4 <_malloc_r+0x44>
    2cc6:	nop
    2cc8:	.word	0x20000d40
    2ccc:	.word	0x20001484
    2cd0:	.word	0x20001488
    2cd4:	.word	0x20001480
    2cd8:	.word	0x2000147c
    2cdc:	.word	0x2000114c
    2ce0:	lsrs	r2, r3, #9
    2ce2:	cmp	r2, #4
    2ce4:	bls.n	2da4 <_malloc_r+0x434>
    2ce6:	cmp	r2, #20
    2ce8:	bhi.w	2e52 <_malloc_r+0x4e2>
    2cec:	add.w	r1, r2, #92	; 0x5c
    2cf0:	lsls	r1, r1, #1
    2cf2:	adds	r2, #91	; 0x5b
    2cf4:	add.w	ip, r7, r1, lsl #2
    2cf8:	ldr.w	r1, [r7, r1, lsl #2]
    2cfc:	ldr.w	r8, [pc, #476]	; 2edc <_malloc_r+0x56c>
    2d00:	sub.w	ip, ip, #8
    2d04:	cmp	ip, r1
    2d06:	beq.w	2e1a <_malloc_r+0x4aa>
    2d0a:	ldr	r2, [r1, #4]
    2d0c:	bic.w	r2, r2, #3
    2d10:	cmp	r3, r2
    2d12:	bcs.n	2d1a <_malloc_r+0x3aa>
    2d14:	ldr	r1, [r1, #8]
    2d16:	cmp	ip, r1
    2d18:	bne.n	2d0a <_malloc_r+0x39a>
    2d1a:	ldr.w	ip, [r1, #12]
    2d1e:	ldr	r2, [r7, #4]
    2d20:	str.w	ip, [r4, #12]
    2d24:	str	r1, [r4, #8]
    2d26:	str.w	r4, [ip, #8]
    2d2a:	str	r4, [r1, #12]
    2d2c:	b.n	2a40 <_malloc_r+0xd0>
    2d2e:	adds	r3, r4, r5
    2d30:	orr.w	r7, r2, #1
    2d34:	orr.w	r5, r5, #1
    2d38:	str	r5, [r4, #4]
    2d3a:	mov	r0, r6
    2d3c:	str	r3, [r1, #20]
    2d3e:	str	r3, [r1, #16]
    2d40:	str.w	lr, [r3, #12]
    2d44:	str.w	lr, [r3, #8]
    2d48:	str	r7, [r3, #4]
    2d4a:	str	r2, [r3, r2]
    2d4c:	adds	r4, #8
    2d4e:	bl	3074 <__malloc_unlock>
    2d52:	b.n	2b00 <_malloc_r+0x190>
    2d54:	ldr	r2, [r1, #4]
    2d56:	b.n	2a40 <_malloc_r+0xd0>
    2d58:	add.w	r8, r8, #1
    2d5c:	tst.w	r8, #3
    2d60:	add.w	ip, ip, #8
    2d64:	bne.w	2a66 <_malloc_r+0xf6>
    2d68:	b.n	2dcc <_malloc_r+0x45c>
    2d6a:	ldr	r4, [r3, #12]
    2d6c:	cmp	r3, r4
    2d6e:	it	eq
    2d70:	addeq	r0, #2
    2d72:	beq.w	29e0 <_malloc_r+0x70>
    2d76:	b.n	2ae0 <_malloc_r+0x170>
    2d78:	add	r3, r1
    2d7a:	mov	r4, r1
    2d7c:	ldr	r2, [r3, #4]
    2d7e:	ldr	r1, [r1, #12]
    2d80:	ldr.w	r5, [r4, #8]!
    2d84:	orr.w	r2, r2, #1
    2d88:	str	r2, [r3, #4]
    2d8a:	mov	r0, r6
    2d8c:	str	r1, [r5, #12]
    2d8e:	str	r5, [r1, #8]
    2d90:	bl	3074 <__malloc_unlock>
    2d94:	b.n	2b00 <_malloc_r+0x190>
    2d96:	add.w	lr, r3, #92	; 0x5c
    2d9a:	add.w	r0, r3, #91	; 0x5b
    2d9e:	mov.w	r3, lr, lsl #1
    2da2:	b.n	29b4 <_malloc_r+0x44>
    2da4:	lsrs	r2, r3, #6
    2da6:	add.w	r1, r2, #57	; 0x39
    2daa:	lsls	r1, r1, #1
    2dac:	adds	r2, #56	; 0x38
    2dae:	b.n	2cf4 <_malloc_r+0x384>
    2db0:	cmp	r4, r7
    2db2:	ldr	r3, [pc, #296]	; (2edc <_malloc_r+0x56c>)
    2db4:	beq.w	2bb8 <_malloc_r+0x248>
    2db8:	ldr	r4, [r3, #8]
    2dba:	ldr	r2, [r4, #4]
    2dbc:	bic.w	r2, r2, #3
    2dc0:	b.n	2c78 <_malloc_r+0x308>
    2dc2:	ldr.w	r3, [r9], #-8
    2dc6:	cmp	r9, r3
    2dc8:	bne.w	2ed0 <_malloc_r+0x560>
    2dcc:	tst.w	r0, #3
    2dd0:	add.w	r0, r0, #4294967295
    2dd4:	bne.n	2dc2 <_malloc_r+0x452>
    2dd6:	ldr	r3, [r7, #4]
    2dd8:	bic.w	r3, r3, r4
    2ddc:	str	r3, [r7, #4]
    2dde:	lsls	r4, r4, #1
    2de0:	cmp	r4, r3
    2de2:	bhi.w	2b60 <_malloc_r+0x1f0>
    2de6:	cmp	r4, #0
    2de8:	beq.w	2b60 <_malloc_r+0x1f0>
    2dec:	tst	r4, r3
    2dee:	mov	r0, r8
    2df0:	bne.w	2a5e <_malloc_r+0xee>
    2df4:	lsls	r4, r4, #1
    2df6:	tst	r4, r3
    2df8:	add.w	r0, r0, #4
    2dfc:	beq.n	2df4 <_malloc_r+0x484>
    2dfe:	b.n	2a5e <_malloc_r+0xee>
    2e00:	cmp.w	r3, #340	; 0x154
    2e04:	bhi.n	2e38 <_malloc_r+0x4c8>
    2e06:	lsrs	r0, r5, #15
    2e08:	add.w	lr, r0, #120	; 0x78
    2e0c:	mov.w	r3, lr, lsl #1
    2e10:	adds	r0, #119	; 0x77
    2e12:	b.n	29b4 <_malloc_r+0x44>
    2e14:	mov.w	r1, #4096	; 0x1000
    2e18:	b.n	2bf2 <_malloc_r+0x282>
    2e1a:	movs	r1, #1
    2e1c:	ldr.w	r3, [r8, #4]
    2e20:	asrs	r2, r2, #2
    2e22:	lsl.w	r2, r1, r2
    2e26:	orrs	r2, r3
    2e28:	str.w	r2, [r8, #4]
    2e2c:	mov	r1, ip
    2e2e:	b.n	2d20 <_malloc_r+0x3b0>
    2e30:	movs	r3, #1
    2e32:	str.w	r3, [fp, #4]
    2e36:	b.n	2c84 <_malloc_r+0x314>
    2e38:	movw	r2, #1364	; 0x554
    2e3c:	cmp	r3, r2
    2e3e:	bhi.n	2e82 <_malloc_r+0x512>
    2e40:	lsrs	r0, r5, #18
    2e42:	add.w	lr, r0, #125	; 0x7d
    2e46:	mov.w	r3, lr, lsl #1
    2e4a:	adds	r0, #124	; 0x7c
    2e4c:	b.n	29b4 <_malloc_r+0x44>
    2e4e:	adds	r2, #16
    2e50:	b.n	2b9c <_malloc_r+0x22c>
    2e52:	cmp	r2, #84	; 0x54
    2e54:	bhi.n	2ea4 <_malloc_r+0x534>
    2e56:	lsrs	r2, r3, #12
    2e58:	add.w	r1, r2, #111	; 0x6f
    2e5c:	lsls	r1, r1, #1
    2e5e:	adds	r2, #110	; 0x6e
    2e60:	b.n	2cf4 <_malloc_r+0x384>
    2e62:	ldr	r4, [r7, #8]
    2e64:	ldr	r2, [r4, #4]
    2e66:	bic.w	r2, r2, #3
    2e6a:	b.n	2c78 <_malloc_r+0x308>
    2e6c:	ubfx	r0, sl, #0, #12
    2e70:	cmp	r0, #0
    2e72:	bne.w	2bc6 <_malloc_r+0x256>
    2e76:	add	r2, r8
    2e78:	ldr	r3, [r7, #8]
    2e7a:	orr.w	r2, r2, #1
    2e7e:	str	r2, [r3, #4]
    2e80:	b.n	2c5c <_malloc_r+0x2ec>
    2e82:	movs	r3, #254	; 0xfe
    2e84:	mov.w	lr, #127	; 0x7f
    2e88:	movs	r0, #126	; 0x7e
    2e8a:	b.n	29b4 <_malloc_r+0x44>
    2e8c:	movs	r2, #1
    2e8e:	mov.w	r9, #0
    2e92:	b.n	2c18 <_malloc_r+0x2a8>
    2e94:	add.w	r1, r4, #8
    2e98:	mov	r0, r6
    2e9a:	bl	3748 <_free_r>
    2e9e:	ldr.w	r1, [r9]
    2ea2:	b.n	2c5c <_malloc_r+0x2ec>
    2ea4:	cmp.w	r2, #340	; 0x154
    2ea8:	bhi.n	2eb6 <_malloc_r+0x546>
    2eaa:	lsrs	r2, r3, #15
    2eac:	add.w	r1, r2, #120	; 0x78
    2eb0:	lsls	r1, r1, #1
    2eb2:	adds	r2, #119	; 0x77
    2eb4:	b.n	2cf4 <_malloc_r+0x384>
    2eb6:	movw	r1, #1364	; 0x554
    2eba:	cmp	r2, r1
    2ebc:	bhi.n	2eca <_malloc_r+0x55a>
    2ebe:	lsrs	r2, r3, #18
    2ec0:	add.w	r1, r2, #125	; 0x7d
    2ec4:	lsls	r1, r1, #1
    2ec6:	adds	r2, #124	; 0x7c
    2ec8:	b.n	2cf4 <_malloc_r+0x384>
    2eca:	movs	r1, #254	; 0xfe
    2ecc:	movs	r2, #126	; 0x7e
    2ece:	b.n	2cf4 <_malloc_r+0x384>
    2ed0:	ldr	r3, [r7, #4]
    2ed2:	b.n	2dde <_malloc_r+0x46e>
    2ed4:	lsrs	r0, r5, #3
    2ed6:	adds	r3, r0, #1
    2ed8:	lsls	r3, r3, #1
    2eda:	b.n	2ace <_malloc_r+0x15e>
    2edc:	.word	0x20000d40

00002ee0 <__ascii_mbtowc>:
    2ee0:	sub	sp, #8
    2ee2:	cbz	r1, 2ef8 <__ascii_mbtowc+0x18>
    2ee4:	cbz	r2, 2efe <__ascii_mbtowc+0x1e>
    2ee6:	cbz	r3, 2f04 <__ascii_mbtowc+0x24>
    2ee8:	ldrb	r3, [r2, #0]
    2eea:	str	r3, [r1, #0]
    2eec:	ldrb	r2, [r2, #0]
    2eee:	adds	r0, r2, #0
    2ef0:	it	ne
    2ef2:	movne	r0, #1
    2ef4:	add	sp, #8
    2ef6:	bx	lr
    2ef8:	add	r1, sp, #4
    2efa:	cmp	r2, #0
    2efc:	bne.n	2ee6 <__ascii_mbtowc+0x6>
    2efe:	mov	r0, r2
    2f00:	add	sp, #8
    2f02:	bx	lr
    2f04:	mvn.w	r0, #1
    2f08:	b.n	2ef4 <__ascii_mbtowc+0x14>
    2f0a:	nop

00002f0c <memmove>:
    2f0c:	cmp	r0, r1
    2f0e:	push	{r4, r5, r6, r7, lr}
    2f10:	bls.n	2f2e <memmove+0x22>
    2f12:	adds	r3, r1, r2
    2f14:	cmp	r0, r3
    2f16:	bcs.n	2f2e <memmove+0x22>
    2f18:	adds	r1, r0, r2
    2f1a:	cmp	r2, #0
    2f1c:	beq.n	2fc2 <memmove+0xb6>
    2f1e:	subs	r2, r3, r2
    2f20:	ldrb.w	r4, [r3, #-1]!
    2f24:	strb.w	r4, [r1, #-1]!
    2f28:	cmp	r3, r2
    2f2a:	bne.n	2f20 <memmove+0x14>
    2f2c:	pop	{r4, r5, r6, r7, pc}
    2f2e:	cmp	r2, #15
    2f30:	bls.n	2fc4 <memmove+0xb8>
    2f32:	orr.w	r3, r1, r0
    2f36:	lsls	r3, r3, #30
    2f38:	bne.n	2fc8 <memmove+0xbc>
    2f3a:	add.w	r4, r0, #16
    2f3e:	add.w	r3, r1, #16
    2f42:	mov	r5, r2
    2f44:	ldr.w	r6, [r3, #-16]
    2f48:	str.w	r6, [r4, #-16]
    2f4c:	ldr.w	r6, [r3, #-12]
    2f50:	str.w	r6, [r4, #-12]
    2f54:	ldr.w	r6, [r3, #-8]
    2f58:	str.w	r6, [r4, #-8]
    2f5c:	subs	r5, #16
    2f5e:	ldr.w	r6, [r3, #-4]
    2f62:	str.w	r6, [r4, #-4]
    2f66:	cmp	r5, #15
    2f68:	add.w	r3, r3, #16
    2f6c:	add.w	r4, r4, #16
    2f70:	bhi.n	2f44 <memmove+0x38>
    2f72:	sub.w	r3, r2, #16
    2f76:	bic.w	r3, r3, #15
    2f7a:	and.w	lr, r2, #15
    2f7e:	adds	r3, #16
    2f80:	cmp.w	lr, #3
    2f84:	add	r1, r3
    2f86:	add	r3, r0
    2f88:	bls.n	2fce <memmove+0xc2>
    2f8a:	subs	r6, r3, #4
    2f8c:	mov	r5, r1
    2f8e:	mov	r4, lr
    2f90:	subs	r4, #4
    2f92:	ldr.w	r7, [r5], #4
    2f96:	str.w	r7, [r6, #4]!
    2f9a:	cmp	r4, #3
    2f9c:	bhi.n	2f90 <memmove+0x84>
    2f9e:	sub.w	r4, lr, #4
    2fa2:	bic.w	r4, r4, #3
    2fa6:	adds	r4, #4
    2fa8:	add	r3, r4
    2faa:	add	r1, r4
    2fac:	and.w	r2, r2, #3
    2fb0:	cbz	r2, 2fcc <memmove+0xc0>
    2fb2:	subs	r3, #1
    2fb4:	add	r2, r1
    2fb6:	ldrb.w	r4, [r1], #1
    2fba:	strb.w	r4, [r3, #1]!
    2fbe:	cmp	r2, r1
    2fc0:	bne.n	2fb6 <memmove+0xaa>
    2fc2:	pop	{r4, r5, r6, r7, pc}
    2fc4:	mov	r3, r0
    2fc6:	b.n	2fb0 <memmove+0xa4>
    2fc8:	mov	r3, r0
    2fca:	b.n	2fb2 <memmove+0xa6>
    2fcc:	pop	{r4, r5, r6, r7, pc}
    2fce:	mov	r2, lr
    2fd0:	b.n	2fb0 <memmove+0xa4>
    2fd2:	nop

00002fd4 <memset>:
    2fd4:	push	{r4, r5, r6}
    2fd6:	lsls	r4, r0, #30
    2fd8:	beq.n	3068 <memset+0x94>
    2fda:	subs	r4, r2, #1
    2fdc:	cmp	r2, #0
    2fde:	beq.n	3064 <memset+0x90>
    2fe0:	uxtb	r5, r1
    2fe2:	mov	r3, r0
    2fe4:	b.n	2fec <memset+0x18>
    2fe6:	subs	r2, r4, #1
    2fe8:	cbz	r4, 3064 <memset+0x90>
    2fea:	mov	r4, r2
    2fec:	strb.w	r5, [r3], #1
    2ff0:	lsls	r2, r3, #30
    2ff2:	bne.n	2fe6 <memset+0x12>
    2ff4:	cmp	r4, #3
    2ff6:	bls.n	3056 <memset+0x82>
    2ff8:	uxtb	r5, r1
    2ffa:	orr.w	r5, r5, r5, lsl #8
    2ffe:	cmp	r4, #15
    3000:	orr.w	r5, r5, r5, lsl #16
    3004:	bls.n	303a <memset+0x66>
    3006:	add.w	r2, r3, #16
    300a:	mov	r6, r4
    300c:	subs	r6, #16
    300e:	cmp	r6, #15
    3010:	str.w	r5, [r2, #-16]
    3014:	str.w	r5, [r2, #-12]
    3018:	str.w	r5, [r2, #-8]
    301c:	str.w	r5, [r2, #-4]
    3020:	add.w	r2, r2, #16
    3024:	bhi.n	300c <memset+0x38>
    3026:	sub.w	r2, r4, #16
    302a:	bic.w	r2, r2, #15
    302e:	and.w	r4, r4, #15
    3032:	adds	r2, #16
    3034:	cmp	r4, #3
    3036:	add	r3, r2
    3038:	bls.n	3056 <memset+0x82>
    303a:	mov	r6, r3
    303c:	mov	r2, r4
    303e:	subs	r2, #4
    3040:	cmp	r2, #3
    3042:	str.w	r5, [r6], #4
    3046:	bhi.n	303e <memset+0x6a>
    3048:	subs	r2, r4, #4
    304a:	bic.w	r2, r2, #3
    304e:	adds	r2, #4
    3050:	add	r3, r2
    3052:	and.w	r4, r4, #3
    3056:	cbz	r4, 3064 <memset+0x90>
    3058:	uxtb	r1, r1
    305a:	add	r4, r3
    305c:	strb.w	r1, [r3], #1
    3060:	cmp	r3, r4
    3062:	bne.n	305c <memset+0x88>
    3064:	pop	{r4, r5, r6}
    3066:	bx	lr
    3068:	mov	r4, r2
    306a:	mov	r3, r0
    306c:	b.n	2ff4 <memset+0x20>
    306e:	nop

00003070 <__malloc_lock>:
    3070:	bx	lr
    3072:	nop

00003074 <__malloc_unlock>:
    3074:	bx	lr
    3076:	nop

00003078 <_realloc_r>:
    3078:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    307c:	mov	r7, r2
    307e:	sub	sp, #12
    3080:	cmp	r1, #0
    3082:	beq.w	3208 <_realloc_r+0x190>
    3086:	mov	r6, r1
    3088:	mov	r9, r0
    308a:	add.w	r5, r7, #11
    308e:	bl	3070 <__malloc_lock>
    3092:	ldr.w	lr, [r6, #-4]
    3096:	cmp	r5, #22
    3098:	bic.w	r4, lr, #3
    309c:	sub.w	r8, r6, #8
    30a0:	bhi.n	3124 <_realloc_r+0xac>
    30a2:	movs	r2, #16
    30a4:	mov	r5, r2
    30a6:	cmp	r7, r5
    30a8:	bhi.n	312e <_realloc_r+0xb6>
    30aa:	cmp	r4, r2
    30ac:	bge.n	319a <_realloc_r+0x122>
    30ae:	ldr	r3, [pc, #804]	; (33d4 <_realloc_r+0x35c>)
    30b0:	ldr	r1, [r3, #8]
    30b2:	add.w	r0, r8, r4
    30b6:	cmp	r0, r1
    30b8:	ldr	r1, [r0, #4]
    30ba:	beq.w	3270 <_realloc_r+0x1f8>
    30be:	bic.w	r3, r1, #1
    30c2:	add	r3, r0
    30c4:	ldr	r3, [r3, #4]
    30c6:	lsls	r3, r3, #31
    30c8:	bpl.n	31c6 <_realloc_r+0x14e>
    30ca:	tst.w	lr, #1
    30ce:	beq.n	313c <_realloc_r+0xc4>
    30d0:	mov	r1, r7
    30d2:	mov	r0, r9
    30d4:	bl	2970 <_malloc_r>
    30d8:	mov	r7, r0
    30da:	cbz	r0, 3116 <_realloc_r+0x9e>
    30dc:	ldr.w	r3, [r6, #-4]
    30e0:	bic.w	r3, r3, #1
    30e4:	add	r3, r8
    30e6:	sub.w	r2, r0, #8
    30ea:	cmp	r2, r3
    30ec:	beq.w	3378 <_realloc_r+0x300>
    30f0:	subs	r2, r4, #4
    30f2:	cmp	r2, #36	; 0x24
    30f4:	bhi.w	335a <_realloc_r+0x2e2>
    30f8:	cmp	r2, #19
    30fa:	bhi.w	3306 <_realloc_r+0x28e>
    30fe:	mov	r3, r0
    3100:	mov	r2, r6
    3102:	ldr	r1, [r2, #0]
    3104:	str	r1, [r3, #0]
    3106:	ldr	r1, [r2, #4]
    3108:	str	r1, [r3, #4]
    310a:	ldr	r2, [r2, #8]
    310c:	str	r2, [r3, #8]
    310e:	mov	r1, r6
    3110:	mov	r0, r9
    3112:	bl	3748 <_free_r>
    3116:	mov	r0, r9
    3118:	bl	3074 <__malloc_unlock>
    311c:	mov	r0, r7
    311e:	add	sp, #12
    3120:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3124:	bic.w	r5, r5, #7
    3128:	cmp	r5, #0
    312a:	mov	r2, r5
    312c:	bge.n	30a6 <_realloc_r+0x2e>
    312e:	movs	r3, #12
    3130:	movs	r0, #0
    3132:	str.w	r3, [r9]
    3136:	add	sp, #12
    3138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    313c:	ldr.w	r3, [r6, #-8]
    3140:	rsb	sl, r3, r8
    3144:	ldr.w	r3, [sl, #4]
    3148:	bic.w	ip, r3, #3
    314c:	add.w	r3, r4, ip
    3150:	cmp	r3, r2
    3152:	blt.n	30d0 <_realloc_r+0x58>
    3154:	mov	r7, sl
    3156:	ldr.w	r1, [sl, #12]
    315a:	ldr.w	r0, [r7, #8]!
    315e:	subs	r2, r4, #4
    3160:	cmp	r2, #36	; 0x24
    3162:	str	r1, [r0, #12]
    3164:	str	r0, [r1, #8]
    3166:	bhi.w	3398 <_realloc_r+0x320>
    316a:	cmp	r2, #19
    316c:	bls.w	3394 <_realloc_r+0x31c>
    3170:	ldr	r1, [r6, #0]
    3172:	str.w	r1, [sl, #8]
    3176:	ldr	r1, [r6, #4]
    3178:	str.w	r1, [sl, #12]
    317c:	cmp	r2, #27
    317e:	bhi.w	33d8 <_realloc_r+0x360>
    3182:	adds	r6, #8
    3184:	add.w	r2, sl, #16
    3188:	ldr	r1, [r6, #0]
    318a:	str	r1, [r2, #0]
    318c:	ldr	r1, [r6, #4]
    318e:	str	r1, [r2, #4]
    3190:	ldr	r1, [r6, #8]
    3192:	str	r1, [r2, #8]
    3194:	mov	r6, r7
    3196:	mov	r4, r3
    3198:	mov	r8, sl
    319a:	subs	r3, r4, r5
    319c:	cmp	r3, #15
    319e:	bhi.n	31dc <_realloc_r+0x164>
    31a0:	ldr.w	r3, [r8, #4]
    31a4:	and.w	r3, r3, #1
    31a8:	orrs	r3, r4
    31aa:	add	r4, r8
    31ac:	str.w	r3, [r8, #4]
    31b0:	ldr	r3, [r4, #4]
    31b2:	orr.w	r3, r3, #1
    31b6:	str	r3, [r4, #4]
    31b8:	mov	r0, r9
    31ba:	bl	3074 <__malloc_unlock>
    31be:	mov	r0, r6
    31c0:	add	sp, #12
    31c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31c6:	bic.w	r1, r1, #3
    31ca:	add	r1, r4
    31cc:	cmp	r1, r2
    31ce:	blt.n	3214 <_realloc_r+0x19c>
    31d0:	ldr	r3, [r0, #12]
    31d2:	ldr	r2, [r0, #8]
    31d4:	mov	r4, r1
    31d6:	str	r3, [r2, #12]
    31d8:	str	r2, [r3, #8]
    31da:	b.n	319a <_realloc_r+0x122>
    31dc:	ldr.w	r2, [r8, #4]
    31e0:	add.w	r1, r8, r5
    31e4:	and.w	r2, r2, #1
    31e8:	orrs	r5, r2
    31ea:	orr.w	r2, r3, #1
    31ee:	add	r3, r1
    31f0:	str.w	r5, [r8, #4]
    31f4:	str	r2, [r1, #4]
    31f6:	ldr	r2, [r3, #4]
    31f8:	orr.w	r2, r2, #1
    31fc:	adds	r1, #8
    31fe:	str	r2, [r3, #4]
    3200:	mov	r0, r9
    3202:	bl	3748 <_free_r>
    3206:	b.n	31b8 <_realloc_r+0x140>
    3208:	mov	r1, r2
    320a:	add	sp, #12
    320c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3210:	b.w	2970 <_malloc_r>
    3214:	tst.w	lr, #1
    3218:	bne.w	30d0 <_realloc_r+0x58>
    321c:	ldr.w	r3, [r6, #-8]
    3220:	rsb	sl, r3, r8
    3224:	ldr.w	r3, [sl, #4]
    3228:	bic.w	ip, r3, #3
    322c:	add.w	lr, r1, ip
    3230:	cmp	lr, r2
    3232:	blt.n	314c <_realloc_r+0xd4>
    3234:	ldr	r3, [r0, #12]
    3236:	ldr	r2, [r0, #8]
    3238:	mov	r7, sl
    323a:	str	r3, [r2, #12]
    323c:	str	r2, [r3, #8]
    323e:	ldr.w	r1, [r7, #8]!
    3242:	ldr.w	r3, [sl, #12]
    3246:	str	r3, [r1, #12]
    3248:	subs	r2, r4, #4
    324a:	cmp	r2, #36	; 0x24
    324c:	str	r1, [r3, #8]
    324e:	bhi.w	3384 <_realloc_r+0x30c>
    3252:	cmp	r2, #19
    3254:	bls.n	331c <_realloc_r+0x2a4>
    3256:	ldr	r3, [r6, #0]
    3258:	str.w	r3, [sl, #8]
    325c:	ldr	r3, [r6, #4]
    325e:	str.w	r3, [sl, #12]
    3262:	cmp	r2, #27
    3264:	bhi.w	33a8 <_realloc_r+0x330>
    3268:	adds	r6, #8
    326a:	add.w	r3, sl, #16
    326e:	b.n	331e <_realloc_r+0x2a6>
    3270:	bic.w	fp, r1, #3
    3274:	add	fp, r4
    3276:	add.w	r0, r5, #16
    327a:	cmp	fp, r0
    327c:	bge.n	3332 <_realloc_r+0x2ba>
    327e:	tst.w	lr, #1
    3282:	bne.w	30d0 <_realloc_r+0x58>
    3286:	ldr.w	r1, [r6, #-8]
    328a:	rsb	sl, r1, r8
    328e:	ldr.w	r1, [sl, #4]
    3292:	bic.w	ip, r1, #3
    3296:	add	fp, ip
    3298:	cmp	r0, fp
    329a:	bgt.w	314c <_realloc_r+0xd4>
    329e:	mov	r7, sl
    32a0:	ldr.w	r1, [sl, #12]
    32a4:	ldr.w	r0, [r7, #8]!
    32a8:	subs	r2, r4, #4
    32aa:	cmp	r2, #36	; 0x24
    32ac:	str	r1, [r0, #12]
    32ae:	str	r0, [r1, #8]
    32b0:	bhi.w	341c <_realloc_r+0x3a4>
    32b4:	cmp	r2, #19
    32b6:	bls.w	3404 <_realloc_r+0x38c>
    32ba:	ldr	r1, [r6, #0]
    32bc:	str.w	r1, [sl, #8]
    32c0:	ldr	r1, [r6, #4]
    32c2:	str.w	r1, [sl, #12]
    32c6:	cmp	r2, #27
    32c8:	bhi.w	342a <_realloc_r+0x3b2>
    32cc:	adds	r6, #8
    32ce:	add.w	r2, sl, #16
    32d2:	ldr	r1, [r6, #0]
    32d4:	str	r1, [r2, #0]
    32d6:	ldr	r1, [r6, #4]
    32d8:	str	r1, [r2, #4]
    32da:	ldr	r1, [r6, #8]
    32dc:	str	r1, [r2, #8]
    32de:	add.w	r1, sl, r5
    32e2:	rsb	r2, r5, fp
    32e6:	orr.w	r2, r2, #1
    32ea:	str	r1, [r3, #8]
    32ec:	str	r2, [r1, #4]
    32ee:	ldr.w	r3, [sl, #4]
    32f2:	and.w	r3, r3, #1
    32f6:	orrs	r5, r3
    32f8:	mov	r0, r9
    32fa:	str.w	r5, [sl, #4]
    32fe:	bl	3074 <__malloc_unlock>
    3302:	mov	r0, r7
    3304:	b.n	31c0 <_realloc_r+0x148>
    3306:	ldr	r3, [r6, #0]
    3308:	str	r3, [r0, #0]
    330a:	ldr	r3, [r6, #4]
    330c:	str	r3, [r0, #4]
    330e:	cmp	r2, #27
    3310:	bhi.n	3362 <_realloc_r+0x2ea>
    3312:	add.w	r3, r0, #8
    3316:	add.w	r2, r6, #8
    331a:	b.n	3102 <_realloc_r+0x8a>
    331c:	mov	r3, r7
    331e:	ldr	r2, [r6, #0]
    3320:	str	r2, [r3, #0]
    3322:	ldr	r2, [r6, #4]
    3324:	str	r2, [r3, #4]
    3326:	ldr	r2, [r6, #8]
    3328:	str	r2, [r3, #8]
    332a:	mov	r6, r7
    332c:	mov	r4, lr
    332e:	mov	r8, sl
    3330:	b.n	319a <_realloc_r+0x122>
    3332:	add.w	r1, r8, r5
    3336:	rsb	fp, r5, fp
    333a:	orr.w	r2, fp, #1
    333e:	str	r1, [r3, #8]
    3340:	str	r2, [r1, #4]
    3342:	ldr.w	r3, [r6, #-4]
    3346:	and.w	r3, r3, #1
    334a:	orrs	r5, r3
    334c:	mov	r0, r9
    334e:	str.w	r5, [r6, #-4]
    3352:	bl	3074 <__malloc_unlock>
    3356:	mov	r0, r6
    3358:	b.n	31c0 <_realloc_r+0x148>
    335a:	mov	r1, r6
    335c:	bl	2f0c <memmove>
    3360:	b.n	310e <_realloc_r+0x96>
    3362:	ldr	r3, [r6, #8]
    3364:	str	r3, [r0, #8]
    3366:	ldr	r3, [r6, #12]
    3368:	str	r3, [r0, #12]
    336a:	cmp	r2, #36	; 0x24
    336c:	beq.n	33c0 <_realloc_r+0x348>
    336e:	add.w	r3, r0, #16
    3372:	add.w	r2, r6, #16
    3376:	b.n	3102 <_realloc_r+0x8a>
    3378:	ldr.w	r3, [r0, #-4]
    337c:	bic.w	r3, r3, #3
    3380:	add	r4, r3
    3382:	b.n	319a <_realloc_r+0x122>
    3384:	mov	r1, r6
    3386:	mov	r0, r7
    3388:	mov	r4, lr
    338a:	mov	r8, sl
    338c:	bl	2f0c <memmove>
    3390:	mov	r6, r7
    3392:	b.n	319a <_realloc_r+0x122>
    3394:	mov	r2, r7
    3396:	b.n	3188 <_realloc_r+0x110>
    3398:	mov	r1, r6
    339a:	mov	r0, r7
    339c:	mov	r4, r3
    339e:	mov	r8, sl
    33a0:	bl	2f0c <memmove>
    33a4:	mov	r6, r7
    33a6:	b.n	319a <_realloc_r+0x122>
    33a8:	ldr	r3, [r6, #8]
    33aa:	str.w	r3, [sl, #16]
    33ae:	ldr	r3, [r6, #12]
    33b0:	str.w	r3, [sl, #20]
    33b4:	cmp	r2, #36	; 0x24
    33b6:	beq.n	33f0 <_realloc_r+0x378>
    33b8:	adds	r6, #16
    33ba:	add.w	r3, sl, #24
    33be:	b.n	331e <_realloc_r+0x2a6>
    33c0:	ldr	r3, [r6, #16]
    33c2:	str	r3, [r0, #16]
    33c4:	ldr	r3, [r6, #20]
    33c6:	str	r3, [r0, #20]
    33c8:	add.w	r2, r6, #24
    33cc:	add.w	r3, r0, #24
    33d0:	b.n	3102 <_realloc_r+0x8a>
    33d2:	nop
    33d4:	.word	0x20000d40
    33d8:	ldr	r1, [r6, #8]
    33da:	str.w	r1, [sl, #16]
    33de:	ldr	r1, [r6, #12]
    33e0:	str.w	r1, [sl, #20]
    33e4:	cmp	r2, #36	; 0x24
    33e6:	beq.n	3408 <_realloc_r+0x390>
    33e8:	adds	r6, #16
    33ea:	add.w	r2, sl, #24
    33ee:	b.n	3188 <_realloc_r+0x110>
    33f0:	ldr	r3, [r6, #16]
    33f2:	str.w	r3, [sl, #24]
    33f6:	ldr	r3, [r6, #20]
    33f8:	str.w	r3, [sl, #28]
    33fc:	adds	r6, #24
    33fe:	add.w	r3, sl, #32
    3402:	b.n	331e <_realloc_r+0x2a6>
    3404:	mov	r2, r7
    3406:	b.n	32d2 <_realloc_r+0x25a>
    3408:	ldr	r2, [r6, #16]
    340a:	str.w	r2, [sl, #24]
    340e:	ldr	r2, [r6, #20]
    3410:	str.w	r2, [sl, #28]
    3414:	adds	r6, #24
    3416:	add.w	r2, sl, #32
    341a:	b.n	3188 <_realloc_r+0x110>
    341c:	mov	r1, r6
    341e:	mov	r0, r7
    3420:	str	r3, [sp, #4]
    3422:	bl	2f0c <memmove>
    3426:	ldr	r3, [sp, #4]
    3428:	b.n	32de <_realloc_r+0x266>
    342a:	ldr	r1, [r6, #8]
    342c:	str.w	r1, [sl, #16]
    3430:	ldr	r1, [r6, #12]
    3432:	str.w	r1, [sl, #20]
    3436:	cmp	r2, #36	; 0x24
    3438:	beq.n	3442 <_realloc_r+0x3ca>
    343a:	adds	r6, #16
    343c:	add.w	r2, sl, #24
    3440:	b.n	32d2 <_realloc_r+0x25a>
    3442:	ldr	r2, [r6, #16]
    3444:	str.w	r2, [sl, #24]
    3448:	ldr	r2, [r6, #20]
    344a:	str.w	r2, [sl, #28]
    344e:	adds	r6, #24
    3450:	add.w	r2, sl, #32
    3454:	b.n	32d2 <_realloc_r+0x25a>
    3456:	nop

00003458 <_sbrk_r>:
    3458:	push	{r3, r4, r5, lr}
    345a:	ldr	r4, [pc, #28]	; (3478 <_sbrk_r+0x20>)
    345c:	movs	r3, #0
    345e:	mov	r5, r0
    3460:	mov	r0, r1
    3462:	str	r3, [r4, #0]
    3464:	bl	2820 <_sbrk>
    3468:	adds	r3, r0, #1
    346a:	beq.n	346e <_sbrk_r+0x16>
    346c:	pop	{r3, r4, r5, pc}
    346e:	ldr	r3, [r4, #0]
    3470:	cmp	r3, #0
    3472:	beq.n	346c <_sbrk_r+0x14>
    3474:	str	r3, [r5, #0]
    3476:	pop	{r3, r4, r5, pc}
    3478:	.word	0x200036c0
    347c:	.word	0x00000000

00003480 <strlen>:
    3480:	pld	[r0]
    3484:	strd	r4, r5, [sp, #-8]!
    3488:	bic.w	r1, r0, #7
    348c:	mvn.w	ip, #0
    3490:	ands.w	r4, r0, #7
    3494:	pld	[r1, #32]
    3498:	bne.w	352e <strlen+0xae>
    349c:	mov.w	r4, #0
    34a0:	mvn.w	r0, #7
    34a4:	ldrd	r2, r3, [r1]
    34a8:	pld	[r1, #64]	; 0x40
    34ac:	add.w	r0, r0, #8
    34b0:	uadd8	r2, r2, ip
    34b4:	sel	r2, r4, ip
    34b8:	uadd8	r3, r3, ip
    34bc:	sel	r3, r2, ip
    34c0:	cbnz	r3, 3516 <strlen+0x96>
    34c2:	ldrd	r2, r3, [r1, #8]
    34c6:	uadd8	r2, r2, ip
    34ca:	add.w	r0, r0, #8
    34ce:	sel	r2, r4, ip
    34d2:	uadd8	r3, r3, ip
    34d6:	sel	r3, r2, ip
    34da:	cbnz	r3, 3516 <strlen+0x96>
    34dc:	ldrd	r2, r3, [r1, #16]
    34e0:	uadd8	r2, r2, ip
    34e4:	add.w	r0, r0, #8
    34e8:	sel	r2, r4, ip
    34ec:	uadd8	r3, r3, ip
    34f0:	sel	r3, r2, ip
    34f4:	cbnz	r3, 3516 <strlen+0x96>
    34f6:	ldrd	r2, r3, [r1, #24]
    34fa:	add.w	r1, r1, #32
    34fe:	uadd8	r2, r2, ip
    3502:	add.w	r0, r0, #8
    3506:	sel	r2, r4, ip
    350a:	uadd8	r3, r3, ip
    350e:	sel	r3, r2, ip
    3512:	cmp	r3, #0
    3514:	beq.n	34a4 <strlen+0x24>
    3516:	cmp	r2, #0
    3518:	itt	eq
    351a:	addeq	r0, #4
    351c:	moveq	r2, r3
    351e:	rev	r2, r2
    3520:	clz	r2, r2
    3524:	ldrd	r4, r5, [sp], #8
    3528:	add.w	r0, r0, r2, lsr #3
    352c:	bx	lr
    352e:	ldrd	r2, r3, [r1]
    3532:	and.w	r5, r4, #3
    3536:	rsb	r0, r4, #0
    353a:	mov.w	r5, r5, lsl #3
    353e:	tst.w	r4, #4
    3542:	pld	[r1, #64]	; 0x40
    3546:	lsl.w	r5, ip, r5
    354a:	orn	r2, r2, r5
    354e:	itt	ne
    3550:	ornne	r3, r3, r5
    3554:	movne	r2, ip
    3556:	mov.w	r4, #0
    355a:	b.n	34b0 <strlen+0x30>

0000355c <_vdprintf_r>:
    355c:	push	{r4, r5, r6, r7, lr}
    355e:	sub.w	sp, sp, #532	; 0x214
    3562:	add	r5, sp, #16
    3564:	str	r3, [sp, #0]
    3566:	mov	r7, r1
    3568:	mov	r3, r2
    356a:	mov.w	r4, #512	; 0x200
    356e:	add	r2, sp, #12
    3570:	mov	r1, r5
    3572:	str	r4, [sp, #12]
    3574:	mov	r6, r0
    3576:	bl	4004 <_vasnprintf_r>
    357a:	cbz	r0, 35a0 <_vdprintf_r+0x44>
    357c:	mov	r4, r0
    357e:	mov	r2, r0
    3580:	mov	r1, r7
    3582:	ldr	r3, [sp, #12]
    3584:	mov	r0, r6
    3586:	bl	35dc <_write_r>
    358a:	cmp	r4, r5
    358c:	str	r0, [sp, #12]
    358e:	beq.n	359a <_vdprintf_r+0x3e>
    3590:	mov	r0, r6
    3592:	mov	r1, r4
    3594:	bl	3748 <_free_r>
    3598:	ldr	r0, [sp, #12]
    359a:	add.w	sp, sp, #532	; 0x214
    359e:	pop	{r4, r5, r6, r7, pc}
    35a0:	mov.w	r0, #4294967295
    35a4:	b.n	359a <_vdprintf_r+0x3e>
    35a6:	nop

000035a8 <vdprintf>:
    35a8:	push	{r4}
    35aa:	ldr	r4, [pc, #16]	; (35bc <vdprintf+0x14>)
    35ac:	mov	r3, r2
    35ae:	mov	r2, r1
    35b0:	mov	r1, r0
    35b2:	ldr	r0, [r4, #0]
    35b4:	ldr.w	r4, [sp], #4
    35b8:	b.w	355c <_vdprintf_r>
    35bc:	.word	0x20000bd0

000035c0 <__ascii_wctomb>:
    35c0:	cbz	r1, 35cc <__ascii_wctomb+0xc>
    35c2:	cmp	r2, #255	; 0xff
    35c4:	bhi.n	35d0 <__ascii_wctomb+0x10>
    35c6:	strb	r2, [r1, #0]
    35c8:	movs	r0, #1
    35ca:	bx	lr
    35cc:	mov	r0, r1
    35ce:	bx	lr
    35d0:	movs	r3, #138	; 0x8a
    35d2:	str	r3, [r0, #0]
    35d4:	mov.w	r0, #4294967295
    35d8:	bx	lr
    35da:	nop

000035dc <_write_r>:
    35dc:	push	{r4, r5, r6, lr}
    35de:	mov	r5, r1
    35e0:	ldr	r4, [pc, #32]	; (3604 <_write_r+0x28>)
    35e2:	mov	r1, r2
    35e4:	mov	r6, r0
    35e6:	mov	r2, r3
    35e8:	mov	r0, r5
    35ea:	movs	r3, #0
    35ec:	str	r3, [r4, #0]
    35ee:	bl	2610 <_write>
    35f2:	adds	r3, r0, #1
    35f4:	beq.n	35f8 <_write_r+0x1c>
    35f6:	pop	{r4, r5, r6, pc}
    35f8:	ldr	r3, [r4, #0]
    35fa:	cmp	r3, #0
    35fc:	beq.n	35f6 <_write_r+0x1a>
    35fe:	str	r3, [r6, #0]
    3600:	pop	{r4, r5, r6, pc}
    3602:	nop
    3604:	.word	0x200036c0

00003608 <__register_exitproc>:
    3608:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    360c:	ldr	r4, [pc, #148]	; (36a4 <__register_exitproc+0x9c>)
    360e:	ldr	r5, [r4, #0]
    3610:	ldr.w	r4, [r5, #328]	; 0x148
    3614:	mov	r6, r0
    3616:	mov	r8, r1
    3618:	mov	sl, r2
    361a:	mov	r9, r3
    361c:	cbz	r4, 3690 <__register_exitproc+0x88>
    361e:	ldr	r0, [r4, #4]
    3620:	cmp	r0, #31
    3622:	bgt.n	3654 <__register_exitproc+0x4c>
    3624:	adds	r3, r0, #1
    3626:	cbz	r6, 3646 <__register_exitproc+0x3e>
    3628:	add.w	r5, r4, r0, lsl #2
    362c:	movs	r2, #1
    362e:	str.w	sl, [r5, #136]	; 0x88
    3632:	ldr.w	r1, [r4, #392]	; 0x188
    3636:	lsls	r2, r0
    3638:	orrs	r1, r2
    363a:	cmp	r6, #2
    363c:	str.w	r1, [r4, #392]	; 0x188
    3640:	str.w	r9, [r5, #264]	; 0x108
    3644:	beq.n	3684 <__register_exitproc+0x7c>
    3646:	adds	r0, #2
    3648:	str	r3, [r4, #4]
    364a:	str.w	r8, [r4, r0, lsl #2]
    364e:	movs	r0, #0
    3650:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3654:	ldr	r3, [pc, #80]	; (36a8 <__register_exitproc+0xa0>)
    3656:	cbz	r3, 369a <__register_exitproc+0x92>
    3658:	mov.w	r0, #400	; 0x190
    365c:	bl	2960 <malloc>
    3660:	mov	r4, r0
    3662:	cbz	r0, 369a <__register_exitproc+0x92>
    3664:	ldr.w	r3, [r5, #328]	; 0x148
    3668:	movs	r7, #0
    366a:	stmia.w	r0, {r3, r7}
    366e:	str.w	r4, [r5, #328]	; 0x148
    3672:	mov	r0, r7
    3674:	movs	r3, #1
    3676:	str.w	r7, [r4, #392]	; 0x188
    367a:	str.w	r7, [r4, #396]	; 0x18c
    367e:	cmp	r6, #0
    3680:	beq.n	3646 <__register_exitproc+0x3e>
    3682:	b.n	3628 <__register_exitproc+0x20>
    3684:	ldr.w	r1, [r4, #396]	; 0x18c
    3688:	orrs	r2, r1
    368a:	str.w	r2, [r4, #396]	; 0x18c
    368e:	b.n	3646 <__register_exitproc+0x3e>
    3690:	add.w	r4, r5, #332	; 0x14c
    3694:	str.w	r4, [r5, #328]	; 0x148
    3698:	b.n	361e <__register_exitproc+0x16>
    369a:	mov.w	r0, #4294967295
    369e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36a2:	nop
    36a4:	.word	0x20000464
    36a8:	.word	0x00002961

000036ac <_malloc_trim_r>:
    36ac:	push	{r3, r4, r5, r6, r7, lr}
    36ae:	ldr	r7, [pc, #140]	; (373c <_malloc_trim_r+0x90>)
    36b0:	mov	r4, r1
    36b2:	mov	r6, r0
    36b4:	bl	3070 <__malloc_lock>
    36b8:	ldr	r3, [r7, #8]
    36ba:	ldr	r5, [r3, #4]
    36bc:	bic.w	r5, r5, #3
    36c0:	subs	r1, r5, r4
    36c2:	addw	r1, r1, #4079	; 0xfef
    36c6:	bic.w	r1, r1, #4080	; 0xff0
    36ca:	bic.w	r1, r1, #15
    36ce:	sub.w	r4, r1, #4096	; 0x1000
    36d2:	cmp.w	r4, #4096	; 0x1000
    36d6:	blt.n	36e8 <_malloc_trim_r+0x3c>
    36d8:	movs	r1, #0
    36da:	mov	r0, r6
    36dc:	bl	3458 <_sbrk_r>
    36e0:	ldr	r3, [r7, #8]
    36e2:	add	r3, r5
    36e4:	cmp	r0, r3
    36e6:	beq.n	36f2 <_malloc_trim_r+0x46>
    36e8:	mov	r0, r6
    36ea:	bl	3074 <__malloc_unlock>
    36ee:	movs	r0, #0
    36f0:	pop	{r3, r4, r5, r6, r7, pc}
    36f2:	negs	r1, r4
    36f4:	mov	r0, r6
    36f6:	bl	3458 <_sbrk_r>
    36fa:	adds	r0, #1
    36fc:	beq.n	371a <_malloc_trim_r+0x6e>
    36fe:	ldr	r3, [pc, #64]	; (3740 <_malloc_trim_r+0x94>)
    3700:	ldr	r2, [r7, #8]
    3702:	ldr	r1, [r3, #0]
    3704:	subs	r5, r5, r4
    3706:	orr.w	r5, r5, #1
    370a:	mov	r0, r6
    370c:	subs	r1, r1, r4
    370e:	str	r5, [r2, #4]
    3710:	str	r1, [r3, #0]
    3712:	bl	3074 <__malloc_unlock>
    3716:	movs	r0, #1
    3718:	pop	{r3, r4, r5, r6, r7, pc}
    371a:	movs	r1, #0
    371c:	mov	r0, r6
    371e:	bl	3458 <_sbrk_r>
    3722:	ldr	r2, [r7, #8]
    3724:	subs	r3, r0, r2
    3726:	cmp	r3, #15
    3728:	ble.n	36e8 <_malloc_trim_r+0x3c>
    372a:	ldr	r4, [pc, #24]	; (3744 <_malloc_trim_r+0x98>)
    372c:	ldr	r1, [pc, #16]	; (3740 <_malloc_trim_r+0x94>)
    372e:	ldr	r4, [r4, #0]
    3730:	orr.w	r3, r3, #1
    3734:	subs	r0, r0, r4
    3736:	str	r3, [r2, #4]
    3738:	str	r0, [r1, #0]
    373a:	b.n	36e8 <_malloc_trim_r+0x3c>
    373c:	.word	0x20000d40
    3740:	.word	0x20001488
    3744:	.word	0x2000114c

00003748 <_free_r>:
    3748:	cmp	r1, #0
    374a:	beq.n	37d8 <_free_r+0x90>
    374c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3750:	mov	r5, r1
    3752:	mov	r8, r0
    3754:	bl	3070 <__malloc_lock>
    3758:	ldr.w	r7, [r5, #-4]
    375c:	ldr	r1, [pc, #424]	; (3908 <_free_r+0x1c0>)
    375e:	bic.w	r3, r7, #1
    3762:	sub.w	r4, r5, #8
    3766:	adds	r2, r4, r3
    3768:	ldr	r6, [r1, #8]
    376a:	ldr	r0, [r2, #4]
    376c:	cmp	r2, r6
    376e:	bic.w	r0, r0, #3
    3772:	beq.n	383a <_free_r+0xf2>
    3774:	lsls	r6, r7, #31
    3776:	str	r0, [r2, #4]
    3778:	bmi.n	3792 <_free_r+0x4a>
    377a:	ldr.w	r7, [r5, #-8]
    377e:	subs	r4, r4, r7
    3780:	add.w	lr, r1, #8
    3784:	ldr	r5, [r4, #8]
    3786:	cmp	r5, lr
    3788:	add	r3, r7
    378a:	beq.n	386c <_free_r+0x124>
    378c:	ldr	r7, [r4, #12]
    378e:	str	r7, [r5, #12]
    3790:	str	r5, [r7, #8]
    3792:	adds	r5, r2, r0
    3794:	ldr	r5, [r5, #4]
    3796:	lsls	r5, r5, #31
    3798:	bpl.n	3820 <_free_r+0xd8>
    379a:	orr.w	r2, r3, #1
    379e:	str	r2, [r4, #4]
    37a0:	str	r3, [r4, r3]
    37a2:	cmp.w	r3, #512	; 0x200
    37a6:	bcs.n	37da <_free_r+0x92>
    37a8:	lsrs	r3, r3, #3
    37aa:	adds	r2, r3, #1
    37ac:	ldr	r5, [r1, #4]
    37ae:	ldr.w	r7, [r1, r2, lsl #3]
    37b2:	str	r7, [r4, #8]
    37b4:	movs	r0, #1
    37b6:	asrs	r3, r3, #2
    37b8:	lsl.w	r3, r0, r3
    37bc:	add.w	r0, r1, r2, lsl #3
    37c0:	orrs	r5, r3
    37c2:	subs	r0, #8
    37c4:	str	r0, [r4, #12]
    37c6:	str	r5, [r1, #4]
    37c8:	str.w	r4, [r1, r2, lsl #3]
    37cc:	str	r4, [r7, #12]
    37ce:	mov	r0, r8
    37d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37d4:	b.w	3074 <__malloc_unlock>
    37d8:	bx	lr
    37da:	lsrs	r2, r3, #9
    37dc:	cmp	r2, #4
    37de:	bhi.n	3888 <_free_r+0x140>
    37e0:	lsrs	r2, r3, #6
    37e2:	add.w	r7, r2, #57	; 0x39
    37e6:	lsls	r7, r7, #1
    37e8:	add.w	r5, r2, #56	; 0x38
    37ec:	add.w	r0, r1, r7, lsl #2
    37f0:	ldr.w	r2, [r1, r7, lsl #2]
    37f4:	ldr	r1, [pc, #272]	; (3908 <_free_r+0x1c0>)
    37f6:	subs	r0, #8
    37f8:	cmp	r0, r2
    37fa:	beq.n	3898 <_free_r+0x150>
    37fc:	ldr	r1, [r2, #4]
    37fe:	bic.w	r1, r1, #3
    3802:	cmp	r3, r1
    3804:	bcs.n	380c <_free_r+0xc4>
    3806:	ldr	r2, [r2, #8]
    3808:	cmp	r0, r2
    380a:	bne.n	37fc <_free_r+0xb4>
    380c:	ldr	r0, [r2, #12]
    380e:	str	r0, [r4, #12]
    3810:	str	r2, [r4, #8]
    3812:	str	r4, [r0, #8]
    3814:	str	r4, [r2, #12]
    3816:	mov	r0, r8
    3818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    381c:	b.w	3074 <__malloc_unlock>
    3820:	ldr	r5, [r2, #8]
    3822:	ldr	r7, [pc, #232]	; (390c <_free_r+0x1c4>)
    3824:	cmp	r5, r7
    3826:	add	r3, r0
    3828:	beq.n	38aa <_free_r+0x162>
    382a:	ldr	r0, [r2, #12]
    382c:	str	r0, [r5, #12]
    382e:	orr.w	r2, r3, #1
    3832:	str	r5, [r0, #8]
    3834:	str	r2, [r4, #4]
    3836:	str	r3, [r4, r3]
    3838:	b.n	37a2 <_free_r+0x5a>
    383a:	lsls	r7, r7, #31
    383c:	add	r3, r0
    383e:	bmi.n	3850 <_free_r+0x108>
    3840:	ldr.w	r2, [r5, #-8]
    3844:	subs	r4, r4, r2
    3846:	add	r3, r2
    3848:	ldr	r0, [r4, #8]
    384a:	ldr	r2, [r4, #12]
    384c:	str	r2, [r0, #12]
    384e:	str	r0, [r2, #8]
    3850:	ldr	r2, [pc, #188]	; (3910 <_free_r+0x1c8>)
    3852:	ldr	r2, [r2, #0]
    3854:	orr.w	r0, r3, #1
    3858:	cmp	r3, r2
    385a:	str	r0, [r4, #4]
    385c:	str	r4, [r1, #8]
    385e:	bcc.n	37ce <_free_r+0x86>
    3860:	ldr	r3, [pc, #176]	; (3914 <_free_r+0x1cc>)
    3862:	mov	r0, r8
    3864:	ldr	r1, [r3, #0]
    3866:	bl	36ac <_malloc_trim_r>
    386a:	b.n	37ce <_free_r+0x86>
    386c:	adds	r1, r2, r0
    386e:	ldr	r1, [r1, #4]
    3870:	lsls	r1, r1, #31
    3872:	bmi.n	38fe <_free_r+0x1b6>
    3874:	ldr	r1, [r2, #8]
    3876:	ldr	r2, [r2, #12]
    3878:	str	r2, [r1, #12]
    387a:	add	r3, r0
    387c:	orr.w	r0, r3, #1
    3880:	str	r1, [r2, #8]
    3882:	str	r0, [r4, #4]
    3884:	str	r3, [r4, r3]
    3886:	b.n	37ce <_free_r+0x86>
    3888:	cmp	r2, #20
    388a:	bhi.n	38bc <_free_r+0x174>
    388c:	add.w	r7, r2, #92	; 0x5c
    3890:	lsls	r7, r7, #1
    3892:	add.w	r5, r2, #91	; 0x5b
    3896:	b.n	37ec <_free_r+0xa4>
    3898:	asrs	r2, r5, #2
    389a:	ldr	r3, [r1, #4]
    389c:	movs	r5, #1
    389e:	lsl.w	r2, r5, r2
    38a2:	orrs	r3, r2
    38a4:	str	r3, [r1, #4]
    38a6:	mov	r2, r0
    38a8:	b.n	380e <_free_r+0xc6>
    38aa:	orr.w	r2, r3, #1
    38ae:	str	r4, [r1, #20]
    38b0:	str	r4, [r1, #16]
    38b2:	str	r5, [r4, #12]
    38b4:	str	r5, [r4, #8]
    38b6:	str	r2, [r4, #4]
    38b8:	str	r3, [r4, r3]
    38ba:	b.n	37ce <_free_r+0x86>
    38bc:	cmp	r2, #84	; 0x54
    38be:	bhi.n	38ce <_free_r+0x186>
    38c0:	lsrs	r2, r3, #12
    38c2:	add.w	r7, r2, #111	; 0x6f
    38c6:	lsls	r7, r7, #1
    38c8:	add.w	r5, r2, #110	; 0x6e
    38cc:	b.n	37ec <_free_r+0xa4>
    38ce:	cmp.w	r2, #340	; 0x154
    38d2:	bhi.n	38e2 <_free_r+0x19a>
    38d4:	lsrs	r2, r3, #15
    38d6:	add.w	r7, r2, #120	; 0x78
    38da:	lsls	r7, r7, #1
    38dc:	add.w	r5, r2, #119	; 0x77
    38e0:	b.n	37ec <_free_r+0xa4>
    38e2:	movw	r0, #1364	; 0x554
    38e6:	cmp	r2, r0
    38e8:	bhi.n	38f8 <_free_r+0x1b0>
    38ea:	lsrs	r2, r3, #18
    38ec:	add.w	r7, r2, #125	; 0x7d
    38f0:	lsls	r7, r7, #1
    38f2:	add.w	r5, r2, #124	; 0x7c
    38f6:	b.n	37ec <_free_r+0xa4>
    38f8:	movs	r7, #254	; 0xfe
    38fa:	movs	r5, #126	; 0x7e
    38fc:	b.n	37ec <_free_r+0xa4>
    38fe:	orr.w	r2, r3, #1
    3902:	str	r2, [r4, #4]
    3904:	str	r3, [r4, r3]
    3906:	b.n	37ce <_free_r+0x86>
    3908:	.word	0x20000d40
    390c:	.word	0x20000d48
    3910:	.word	0x20001148
    3914:	.word	0x20001484

00003918 <_localeconv_r>:
    3918:	ldr	r2, [pc, #16]	; (392c <_localeconv_r+0x14>)
    391a:	ldr	r3, [pc, #20]	; (3930 <_localeconv_r+0x18>)
    391c:	ldr	r2, [r2, #0]
    391e:	ldr	r0, [r2, #52]	; 0x34
    3920:	cmp	r0, #0
    3922:	it	eq
    3924:	moveq	r0, r3
    3926:	adds	r0, #240	; 0xf0
    3928:	bx	lr
    392a:	nop
    392c:	.word	0x20000bd0
    3930:	.word	0x20000bd4
	...

00003940 <memchr>:
    3940:	and.w	r1, r1, #255	; 0xff
    3944:	cmp	r2, #16
    3946:	blt.n	39a0 <memchr+0x60>
    3948:	tst.w	r0, #7
    394c:	beq.n	3960 <memchr+0x20>
    394e:	ldrb.w	r3, [r0], #1
    3952:	subs	r2, #1
    3954:	cmp	r3, r1
    3956:	beq.n	39b4 <memchr+0x74>
    3958:	tst.w	r0, #7
    395c:	cbz	r2, 39b0 <memchr+0x70>
    395e:	bne.n	394e <memchr+0xe>
    3960:	push	{r4, r5, r6, r7}
    3962:	orr.w	r1, r1, r1, lsl #8
    3966:	orr.w	r1, r1, r1, lsl #16
    396a:	bic.w	r4, r2, #7
    396e:	mvns.w	r7, #0
    3972:	movs	r3, #0
    3974:	ldrd	r5, r6, [r0], #8
    3978:	subs	r4, #8
    397a:	eor.w	r5, r5, r1
    397e:	eor.w	r6, r6, r1
    3982:	uadd8	r5, r5, r7
    3986:	sel	r5, r3, r7
    398a:	uadd8	r6, r6, r7
    398e:	sel	r6, r5, r7
    3992:	cbnz	r6, 39b8 <memchr+0x78>
    3994:	bne.n	3974 <memchr+0x34>
    3996:	pop	{r4, r5, r6, r7}
    3998:	and.w	r1, r1, #255	; 0xff
    399c:	and.w	r2, r2, #7
    39a0:	cbz	r2, 39b0 <memchr+0x70>
    39a2:	ldrb.w	r3, [r0], #1
    39a6:	subs	r2, #1
    39a8:	eor.w	r3, r3, r1
    39ac:	cbz	r3, 39b4 <memchr+0x74>
    39ae:	bne.n	39a2 <memchr+0x62>
    39b0:	movs	r0, #0
    39b2:	bx	lr
    39b4:	subs	r0, #1
    39b6:	bx	lr
    39b8:	cmp	r5, #0
    39ba:	itte	eq
    39bc:	moveq	r5, r6
    39be:	subeq	r0, #3
    39c0:	subne	r0, #7
    39c2:	tst.w	r5, #1
    39c6:	bne.n	39d8 <memchr+0x98>
    39c8:	adds	r0, #1
    39ca:	tst.w	r5, #256	; 0x100
    39ce:	ittt	eq
    39d0:	addeq	r0, #1
    39d2:	tsteq.w	r5, #98304	; 0x18000
    39d6:	addeq	r0, #1
    39d8:	pop	{r4, r5, r6, r7}
    39da:	subs	r0, #1
    39dc:	bx	lr
    39de:	nop

000039e0 <_Balloc>:
    39e0:	ldr	r3, [r0, #76]	; 0x4c
    39e2:	push	{r4, r5, r6, lr}
    39e4:	mov	r5, r0
    39e6:	mov	r4, r1
    39e8:	cbz	r3, 39fe <_Balloc+0x1e>
    39ea:	ldr.w	r0, [r3, r4, lsl #2]
    39ee:	cbz	r0, 3a12 <_Balloc+0x32>
    39f0:	ldr	r2, [r0, #0]
    39f2:	str.w	r2, [r3, r4, lsl #2]
    39f6:	movs	r3, #0
    39f8:	str	r3, [r0, #16]
    39fa:	str	r3, [r0, #12]
    39fc:	pop	{r4, r5, r6, pc}
    39fe:	movs	r2, #33	; 0x21
    3a00:	movs	r1, #4
    3a02:	bl	4064 <_calloc_r>
    3a06:	str	r0, [r5, #76]	; 0x4c
    3a08:	mov	r3, r0
    3a0a:	cmp	r0, #0
    3a0c:	bne.n	39ea <_Balloc+0xa>
    3a0e:	movs	r0, #0
    3a10:	pop	{r4, r5, r6, pc}
    3a12:	movs	r1, #1
    3a14:	lsl.w	r6, r1, r4
    3a18:	adds	r2, r6, #5
    3a1a:	mov	r0, r5
    3a1c:	lsls	r2, r2, #2
    3a1e:	bl	4064 <_calloc_r>
    3a22:	cmp	r0, #0
    3a24:	beq.n	3a0e <_Balloc+0x2e>
    3a26:	str	r4, [r0, #4]
    3a28:	str	r6, [r0, #8]
    3a2a:	b.n	39f6 <_Balloc+0x16>

00003a2c <_Bfree>:
    3a2c:	cbz	r1, 3a3c <_Bfree+0x10>
    3a2e:	ldr	r3, [r0, #76]	; 0x4c
    3a30:	ldr	r2, [r1, #4]
    3a32:	ldr.w	r0, [r3, r2, lsl #2]
    3a36:	str	r0, [r1, #0]
    3a38:	str.w	r1, [r3, r2, lsl #2]
    3a3c:	bx	lr
    3a3e:	nop

00003a40 <__multadd>:
    3a40:	push	{r4, r5, r6, r7, lr}
    3a42:	ldr	r4, [r1, #16]
    3a44:	sub	sp, #12
    3a46:	mov	r5, r1
    3a48:	mov	r6, r0
    3a4a:	add.w	lr, r1, #20
    3a4e:	movs	r7, #0
    3a50:	ldr.w	r0, [lr]
    3a54:	uxth	r1, r0
    3a56:	mla	r1, r2, r1, r3
    3a5a:	lsrs	r3, r1, #16
    3a5c:	lsrs	r0, r0, #16
    3a5e:	mla	r3, r2, r0, r3
    3a62:	uxth	r1, r1
    3a64:	adds	r7, #1
    3a66:	add.w	r1, r1, r3, lsl #16
    3a6a:	cmp	r4, r7
    3a6c:	str.w	r1, [lr], #4
    3a70:	mov.w	r3, r3, lsr #16
    3a74:	bgt.n	3a50 <__multadd+0x10>
    3a76:	cbz	r3, 3a88 <__multadd+0x48>
    3a78:	ldr	r2, [r5, #8]
    3a7a:	cmp	r4, r2
    3a7c:	bge.n	3a8e <__multadd+0x4e>
    3a7e:	add.w	r2, r5, r4, lsl #2
    3a82:	adds	r4, #1
    3a84:	str	r3, [r2, #20]
    3a86:	str	r4, [r5, #16]
    3a88:	mov	r0, r5
    3a8a:	add	sp, #12
    3a8c:	pop	{r4, r5, r6, r7, pc}
    3a8e:	ldr	r1, [r5, #4]
    3a90:	str	r3, [sp, #4]
    3a92:	adds	r1, #1
    3a94:	mov	r0, r6
    3a96:	bl	39e0 <_Balloc>
    3a9a:	ldr	r2, [r5, #16]
    3a9c:	adds	r2, #2
    3a9e:	add.w	r1, r5, #12
    3aa2:	mov	r7, r0
    3aa4:	lsls	r2, r2, #2
    3aa6:	adds	r0, #12
    3aa8:	bl	2640 <memcpy>
    3aac:	ldr	r2, [r6, #76]	; 0x4c
    3aae:	ldr	r1, [r5, #4]
    3ab0:	ldr	r3, [sp, #4]
    3ab2:	ldr.w	r0, [r2, r1, lsl #2]
    3ab6:	str	r0, [r5, #0]
    3ab8:	str.w	r5, [r2, r1, lsl #2]
    3abc:	mov	r5, r7
    3abe:	b.n	3a7e <__multadd+0x3e>

00003ac0 <__hi0bits>:
    3ac0:	lsrs	r3, r0, #16
    3ac2:	lsls	r3, r3, #16
    3ac4:	cbnz	r3, 3af4 <__hi0bits+0x34>
    3ac6:	lsls	r0, r0, #16
    3ac8:	movs	r3, #16
    3aca:	tst.w	r0, #4278190080	; 0xff000000
    3ace:	itt	eq
    3ad0:	lsleq	r0, r0, #8
    3ad2:	addeq	r3, #8
    3ad4:	tst.w	r0, #4026531840	; 0xf0000000
    3ad8:	itt	eq
    3ada:	lsleq	r0, r0, #4
    3adc:	addeq	r3, #4
    3ade:	tst.w	r0, #3221225472	; 0xc0000000
    3ae2:	itt	eq
    3ae4:	lsleq	r0, r0, #2
    3ae6:	addeq	r3, #2
    3ae8:	cmp	r0, #0
    3aea:	blt.n	3afc <__hi0bits+0x3c>
    3aec:	lsls	r2, r0, #1
    3aee:	bmi.n	3af8 <__hi0bits+0x38>
    3af0:	movs	r0, #32
    3af2:	bx	lr
    3af4:	movs	r3, #0
    3af6:	b.n	3aca <__hi0bits+0xa>
    3af8:	adds	r0, r3, #1
    3afa:	bx	lr
    3afc:	mov	r0, r3
    3afe:	bx	lr

00003b00 <__lo0bits>:
    3b00:	ldr	r3, [r0, #0]
    3b02:	ands.w	r2, r3, #7
    3b06:	beq.n	3b18 <__lo0bits+0x18>
    3b08:	lsls	r1, r3, #31
    3b0a:	bmi.n	3b4e <__lo0bits+0x4e>
    3b0c:	lsls	r2, r3, #30
    3b0e:	bmi.n	3b52 <__lo0bits+0x52>
    3b10:	lsrs	r3, r3, #2
    3b12:	str	r3, [r0, #0]
    3b14:	movs	r0, #2
    3b16:	bx	lr
    3b18:	uxth	r1, r3
    3b1a:	cbnz	r1, 3b20 <__lo0bits+0x20>
    3b1c:	lsrs	r3, r3, #16
    3b1e:	movs	r2, #16
    3b20:	tst.w	r3, #255	; 0xff
    3b24:	itt	eq
    3b26:	lsreq	r3, r3, #8
    3b28:	addeq	r2, #8
    3b2a:	lsls	r1, r3, #28
    3b2c:	itt	eq
    3b2e:	lsreq	r3, r3, #4
    3b30:	addeq	r2, #4
    3b32:	lsls	r1, r3, #30
    3b34:	itt	eq
    3b36:	lsreq	r3, r3, #2
    3b38:	addeq	r2, #2
    3b3a:	lsls	r1, r3, #31
    3b3c:	bmi.n	3b48 <__lo0bits+0x48>
    3b3e:	lsrs	r3, r3, #1
    3b40:	bne.n	3b46 <__lo0bits+0x46>
    3b42:	movs	r0, #32
    3b44:	bx	lr
    3b46:	adds	r2, #1
    3b48:	str	r3, [r0, #0]
    3b4a:	mov	r0, r2
    3b4c:	bx	lr
    3b4e:	movs	r0, #0
    3b50:	bx	lr
    3b52:	lsrs	r3, r3, #1
    3b54:	str	r3, [r0, #0]
    3b56:	movs	r0, #1
    3b58:	bx	lr
    3b5a:	nop

00003b5c <__i2b>:
    3b5c:	push	{r4, lr}
    3b5e:	mov	r4, r1
    3b60:	movs	r1, #1
    3b62:	bl	39e0 <_Balloc>
    3b66:	movs	r2, #1
    3b68:	str	r4, [r0, #20]
    3b6a:	str	r2, [r0, #16]
    3b6c:	pop	{r4, pc}
    3b6e:	nop

00003b70 <__multiply>:
    3b70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b74:	ldr	r5, [r1, #16]
    3b76:	ldr	r7, [r2, #16]
    3b78:	cmp	r5, r7
    3b7a:	sub	sp, #12
    3b7c:	mov	r4, r1
    3b7e:	mov	r6, r2
    3b80:	bge.n	3b8c <__multiply+0x1c>
    3b82:	mov	r2, r5
    3b84:	mov	r4, r6
    3b86:	mov	r5, r7
    3b88:	mov	r6, r1
    3b8a:	mov	r7, r2
    3b8c:	ldr	r3, [r4, #8]
    3b8e:	ldr	r1, [r4, #4]
    3b90:	add.w	r8, r5, r7
    3b94:	cmp	r8, r3
    3b96:	it	gt
    3b98:	addgt	r1, #1
    3b9a:	bl	39e0 <_Balloc>
    3b9e:	add.w	ip, r0, #20
    3ba2:	add.w	r9, ip, r8, lsl #2
    3ba6:	cmp	ip, r9
    3ba8:	str	r0, [sp, #0]
    3baa:	bcs.n	3bb8 <__multiply+0x48>
    3bac:	mov	r3, ip
    3bae:	movs	r1, #0
    3bb0:	str.w	r1, [r3], #4
    3bb4:	cmp	r9, r3
    3bb6:	bhi.n	3bb0 <__multiply+0x40>
    3bb8:	add.w	r2, r6, #20
    3bbc:	add.w	sl, r2, r7, lsl #2
    3bc0:	add.w	r3, r4, #20
    3bc4:	cmp	r2, sl
    3bc6:	add.w	lr, r3, r5, lsl #2
    3bca:	bcs.n	3c76 <__multiply+0x106>
    3bcc:	str.w	r9, [sp, #4]
    3bd0:	mov	r9, r3
    3bd2:	ldr.w	r3, [r2], #4
    3bd6:	uxth.w	fp, r3
    3bda:	cmp.w	fp, #0
    3bde:	beq.n	3c22 <__multiply+0xb2>
    3be0:	movs	r0, #0
    3be2:	mov	r7, r9
    3be4:	mov	r6, ip
    3be6:	mov	r5, r0
    3be8:	b.n	3bec <__multiply+0x7c>
    3bea:	mov	r6, r3
    3bec:	ldr.w	r4, [r7], #4
    3bf0:	ldr	r0, [r6, #0]
    3bf2:	uxth	r1, r4
    3bf4:	uxth	r3, r0
    3bf6:	mla	r1, fp, r1, r3
    3bfa:	lsrs	r4, r4, #16
    3bfc:	lsrs	r0, r0, #16
    3bfe:	adds	r3, r1, r5
    3c00:	mla	r0, fp, r4, r0
    3c04:	add.w	r0, r0, r3, lsr #16
    3c08:	uxth	r1, r3
    3c0a:	mov	r3, r6
    3c0c:	orr.w	r1, r1, r0, lsl #16
    3c10:	cmp	lr, r7
    3c12:	mov.w	r5, r0, lsr #16
    3c16:	str.w	r1, [r3], #4
    3c1a:	bhi.n	3bea <__multiply+0x7a>
    3c1c:	str	r5, [r6, #4]
    3c1e:	ldr.w	r3, [r2, #-4]
    3c22:	movs.w	fp, r3, lsr #16
    3c26:	beq.n	3c6a <__multiply+0xfa>
    3c28:	ldr.w	r3, [ip]
    3c2c:	mov	r7, ip
    3c2e:	mov	r0, r3
    3c30:	mov	r5, r9
    3c32:	movs	r1, #0
    3c34:	b.n	3c38 <__multiply+0xc8>
    3c36:	mov	r7, r6
    3c38:	ldrh	r4, [r5, #0]
    3c3a:	lsrs	r0, r0, #16
    3c3c:	mla	r0, fp, r4, r0
    3c40:	add	r1, r0
    3c42:	uxth	r4, r3
    3c44:	mov	r6, r7
    3c46:	orr.w	r3, r4, r1, lsl #16
    3c4a:	str.w	r3, [r6], #4
    3c4e:	ldr	r0, [r7, #4]
    3c50:	ldr.w	r4, [r5], #4
    3c54:	uxth	r3, r0
    3c56:	lsrs	r4, r4, #16
    3c58:	mla	r4, fp, r4, r3
    3c5c:	add.w	r3, r4, r1, lsr #16
    3c60:	cmp	lr, r5
    3c62:	mov.w	r1, r3, lsr #16
    3c66:	bhi.n	3c36 <__multiply+0xc6>
    3c68:	str	r3, [r7, #4]
    3c6a:	cmp	sl, r2
    3c6c:	add.w	ip, ip, #4
    3c70:	bhi.n	3bd2 <__multiply+0x62>
    3c72:	ldr.w	r9, [sp, #4]
    3c76:	cmp.w	r8, #0
    3c7a:	ble.n	3c94 <__multiply+0x124>
    3c7c:	ldr.w	r3, [r9, #-4]
    3c80:	sub.w	r9, r9, #4
    3c84:	cbz	r3, 3c8e <__multiply+0x11e>
    3c86:	b.n	3c94 <__multiply+0x124>
    3c88:	ldr.w	r3, [r9, #-4]!
    3c8c:	cbnz	r3, 3c94 <__multiply+0x124>
    3c8e:	subs.w	r8, r8, #1
    3c92:	bne.n	3c88 <__multiply+0x118>
    3c94:	ldr	r0, [sp, #0]
    3c96:	str.w	r8, [r0, #16]
    3c9a:	add	sp, #12
    3c9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003ca0 <__pow5mult>:
    3ca0:	ands.w	r3, r2, #3
    3ca4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ca8:	mov	r4, r2
    3caa:	mov	r7, r0
    3cac:	bne.n	3d0c <__pow5mult+0x6c>
    3cae:	mov	r6, r1
    3cb0:	asrs	r4, r4, #2
    3cb2:	beq.n	3cee <__pow5mult+0x4e>
    3cb4:	ldr	r5, [r7, #72]	; 0x48
    3cb6:	cbz	r5, 3d1e <__pow5mult+0x7e>
    3cb8:	lsls	r3, r4, #31
    3cba:	mov.w	r8, #0
    3cbe:	bmi.n	3cce <__pow5mult+0x2e>
    3cc0:	asrs	r4, r4, #1
    3cc2:	beq.n	3cee <__pow5mult+0x4e>
    3cc4:	ldr	r0, [r5, #0]
    3cc6:	cbz	r0, 3cf4 <__pow5mult+0x54>
    3cc8:	mov	r5, r0
    3cca:	lsls	r3, r4, #31
    3ccc:	bpl.n	3cc0 <__pow5mult+0x20>
    3cce:	mov	r2, r5
    3cd0:	mov	r1, r6
    3cd2:	mov	r0, r7
    3cd4:	bl	3b70 <__multiply>
    3cd8:	cbz	r6, 3d08 <__pow5mult+0x68>
    3cda:	ldr	r2, [r6, #4]
    3cdc:	ldr	r3, [r7, #76]	; 0x4c
    3cde:	asrs	r4, r4, #1
    3ce0:	ldr.w	r1, [r3, r2, lsl #2]
    3ce4:	str	r1, [r6, #0]
    3ce6:	str.w	r6, [r3, r2, lsl #2]
    3cea:	mov	r6, r0
    3cec:	bne.n	3cc4 <__pow5mult+0x24>
    3cee:	mov	r0, r6
    3cf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cf4:	mov	r2, r5
    3cf6:	mov	r1, r5
    3cf8:	mov	r0, r7
    3cfa:	bl	3b70 <__multiply>
    3cfe:	str	r0, [r5, #0]
    3d00:	str.w	r8, [r0]
    3d04:	mov	r5, r0
    3d06:	b.n	3cca <__pow5mult+0x2a>
    3d08:	mov	r6, r0
    3d0a:	b.n	3cc0 <__pow5mult+0x20>
    3d0c:	subs	r2, r3, #1
    3d0e:	ldr	r5, [pc, #44]	; (3d3c <__pow5mult+0x9c>)
    3d10:	movs	r3, #0
    3d12:	ldr.w	r2, [r5, r2, lsl #2]
    3d16:	bl	3a40 <__multadd>
    3d1a:	mov	r6, r0
    3d1c:	b.n	3cb0 <__pow5mult+0x10>
    3d1e:	movs	r1, #1
    3d20:	mov	r0, r7
    3d22:	bl	39e0 <_Balloc>
    3d26:	movw	r1, #625	; 0x271
    3d2a:	movs	r2, #1
    3d2c:	movs	r3, #0
    3d2e:	str	r1, [r0, #20]
    3d30:	str	r2, [r0, #16]
    3d32:	mov	r5, r0
    3d34:	str	r0, [r7, #72]	; 0x48
    3d36:	str	r3, [r0, #0]
    3d38:	b.n	3cb8 <__pow5mult+0x18>
    3d3a:	nop
    3d3c:	.word	0x20000670

00003d40 <__lshift>:
    3d40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d44:	mov	r9, r2
    3d46:	ldr	r2, [r1, #16]
    3d48:	ldr	r3, [r1, #8]
    3d4a:	mov.w	r4, r9, asr #5
    3d4e:	add.w	r8, r4, r2
    3d52:	add.w	r5, r8, #1
    3d56:	cmp	r5, r3
    3d58:	mov	r6, r1
    3d5a:	mov	sl, r0
    3d5c:	ldr	r1, [r1, #4]
    3d5e:	ble.n	3d6a <__lshift+0x2a>
    3d60:	lsls	r3, r3, #1
    3d62:	cmp	r5, r3
    3d64:	add.w	r1, r1, #1
    3d68:	bgt.n	3d60 <__lshift+0x20>
    3d6a:	mov	r0, sl
    3d6c:	bl	39e0 <_Balloc>
    3d70:	cmp	r4, #0
    3d72:	add.w	r2, r0, #20
    3d76:	ble.n	3dea <__lshift+0xaa>
    3d78:	add.w	r3, r2, r4, lsl #2
    3d7c:	movs	r1, #0
    3d7e:	str.w	r1, [r2], #4
    3d82:	cmp	r3, r2
    3d84:	bne.n	3d7e <__lshift+0x3e>
    3d86:	ldr	r4, [r6, #16]
    3d88:	add.w	r1, r6, #20
    3d8c:	ands.w	r9, r9, #31
    3d90:	add.w	lr, r1, r4, lsl #2
    3d94:	beq.n	3dda <__lshift+0x9a>
    3d96:	rsb	r2, r9, #32
    3d9a:	movs	r4, #0
    3d9c:	ldr	r7, [r1, #0]
    3d9e:	lsl.w	ip, r7, r9
    3da2:	orr.w	r4, ip, r4
    3da6:	mov	ip, r3
    3da8:	str.w	r4, [r3], #4
    3dac:	ldr.w	r4, [r1], #4
    3db0:	cmp	lr, r1
    3db2:	lsr.w	r4, r4, r2
    3db6:	bhi.n	3d9c <__lshift+0x5c>
    3db8:	str.w	r4, [ip, #4]
    3dbc:	cbz	r4, 3dc2 <__lshift+0x82>
    3dbe:	add.w	r5, r8, #2
    3dc2:	ldr.w	r3, [sl, #76]	; 0x4c
    3dc6:	ldr	r2, [r6, #4]
    3dc8:	subs	r5, #1
    3dca:	ldr.w	r1, [r3, r2, lsl #2]
    3dce:	str	r5, [r0, #16]
    3dd0:	str	r1, [r6, #0]
    3dd2:	str.w	r6, [r3, r2, lsl #2]
    3dd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3dda:	subs	r3, #4
    3ddc:	ldr.w	r2, [r1], #4
    3de0:	str.w	r2, [r3, #4]!
    3de4:	cmp	lr, r1
    3de6:	bhi.n	3ddc <__lshift+0x9c>
    3de8:	b.n	3dc2 <__lshift+0x82>
    3dea:	mov	r3, r2
    3dec:	b.n	3d86 <__lshift+0x46>
    3dee:	nop

00003df0 <__mcmp>:
    3df0:	ldr	r2, [r0, #16]
    3df2:	ldr	r3, [r1, #16]
    3df4:	subs	r2, r2, r3
    3df6:	bne.n	3e20 <__mcmp+0x30>
    3df8:	lsls	r3, r3, #2
    3dfa:	adds	r0, #20
    3dfc:	adds	r1, #20
    3dfe:	add	r1, r3
    3e00:	push	{r4}
    3e02:	add	r3, r0
    3e04:	b.n	3e0a <__mcmp+0x1a>
    3e06:	cmp	r0, r3
    3e08:	bcs.n	3e24 <__mcmp+0x34>
    3e0a:	ldr.w	r4, [r3, #-4]!
    3e0e:	ldr.w	r2, [r1, #-4]!
    3e12:	cmp	r4, r2
    3e14:	beq.n	3e06 <__mcmp+0x16>
    3e16:	bcc.n	3e2c <__mcmp+0x3c>
    3e18:	movs	r0, #1
    3e1a:	ldr.w	r4, [sp], #4
    3e1e:	bx	lr
    3e20:	mov	r0, r2
    3e22:	bx	lr
    3e24:	movs	r0, #0
    3e26:	ldr.w	r4, [sp], #4
    3e2a:	bx	lr
    3e2c:	mov.w	r0, #4294967295
    3e30:	b.n	3e1a <__mcmp+0x2a>
    3e32:	nop

00003e34 <__mdiff>:
    3e34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e38:	ldr	r3, [r1, #16]
    3e3a:	mov	r7, r1
    3e3c:	ldr	r1, [r2, #16]
    3e3e:	subs	r3, r3, r1
    3e40:	cmp	r3, #0
    3e42:	mov	r8, r2
    3e44:	bne.n	3e76 <__mdiff+0x42>
    3e46:	lsls	r1, r1, #2
    3e48:	add.w	r2, r7, #20
    3e4c:	add.w	r5, r8, #20
    3e50:	adds	r3, r2, r1
    3e52:	add	r1, r5
    3e54:	b.n	3e5a <__mdiff+0x26>
    3e56:	cmp	r2, r3
    3e58:	bcs.n	3f18 <__mdiff+0xe4>
    3e5a:	ldr.w	r6, [r3, #-4]!
    3e5e:	ldr.w	r4, [r1, #-4]!
    3e62:	cmp	r6, r4
    3e64:	beq.n	3e56 <__mdiff+0x22>
    3e66:	bcs.n	3f2a <__mdiff+0xf6>
    3e68:	mov	r3, r7
    3e6a:	mov	r4, r2
    3e6c:	mov	r7, r8
    3e6e:	mov.w	r9, #1
    3e72:	mov	r8, r3
    3e74:	b.n	3e84 <__mdiff+0x50>
    3e76:	blt.n	3f34 <__mdiff+0x100>
    3e78:	add.w	r5, r7, #20
    3e7c:	add.w	r4, r2, #20
    3e80:	mov.w	r9, #0
    3e84:	ldr	r1, [r7, #4]
    3e86:	bl	39e0 <_Balloc>
    3e8a:	ldr.w	r3, [r8, #16]
    3e8e:	ldr	r6, [r7, #16]
    3e90:	str.w	r9, [r0, #12]
    3e94:	add.w	ip, r4, r3, lsl #2
    3e98:	mov	lr, r4
    3e9a:	add.w	r7, r5, r6, lsl #2
    3e9e:	add.w	r4, r0, #20
    3ea2:	movs	r3, #0
    3ea4:	ldr.w	r1, [lr], #4
    3ea8:	ldr.w	r8, [r5], #4
    3eac:	uxth	r2, r1
    3eae:	uxtah	r3, r3, r8
    3eb2:	lsrs	r1, r1, #16
    3eb4:	subs	r2, r3, r2
    3eb6:	rsb	r3, r1, r8, lsr #16
    3eba:	add.w	r3, r3, r2, asr #16
    3ebe:	uxth	r2, r2
    3ec0:	orr.w	r2, r2, r3, lsl #16
    3ec4:	cmp	ip, lr
    3ec6:	str.w	r2, [r4], #4
    3eca:	mov.w	r3, r3, asr #16
    3ece:	bhi.n	3ea4 <__mdiff+0x70>
    3ed0:	cmp	r7, r5
    3ed2:	bls.n	3f04 <__mdiff+0xd0>
    3ed4:	mov	ip, r4
    3ed6:	mov	r1, r5
    3ed8:	ldr.w	lr, [r1], #4
    3edc:	uxtah	r2, r3, lr
    3ee0:	asrs	r3, r2, #16
    3ee2:	add.w	r3, r3, lr, lsr #16
    3ee6:	uxth	r2, r2
    3ee8:	orr.w	r2, r2, r3, lsl #16
    3eec:	cmp	r7, r1
    3eee:	str.w	r2, [ip], #4
    3ef2:	mov.w	r3, r3, asr #16
    3ef6:	bhi.n	3ed8 <__mdiff+0xa4>
    3ef8:	mvns	r5, r5
    3efa:	add	r5, r7
    3efc:	bic.w	r5, r5, #3
    3f00:	adds	r5, #4
    3f02:	add	r4, r5
    3f04:	subs	r4, #4
    3f06:	cbnz	r2, 3f12 <__mdiff+0xde>
    3f08:	ldr.w	r3, [r4, #-4]!
    3f0c:	subs	r6, #1
    3f0e:	cmp	r3, #0
    3f10:	beq.n	3f08 <__mdiff+0xd4>
    3f12:	str	r6, [r0, #16]
    3f14:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f18:	movs	r1, #0
    3f1a:	bl	39e0 <_Balloc>
    3f1e:	movs	r2, #1
    3f20:	movs	r3, #0
    3f22:	str	r2, [r0, #16]
    3f24:	str	r3, [r0, #20]
    3f26:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f2a:	mov	r4, r5
    3f2c:	mov.w	r9, #0
    3f30:	mov	r5, r2
    3f32:	b.n	3e84 <__mdiff+0x50>
    3f34:	mov	r3, r7
    3f36:	add.w	r4, r7, #20
    3f3a:	add.w	r5, r8, #20
    3f3e:	mov	r7, r8
    3f40:	mov.w	r9, #1
    3f44:	mov	r8, r3
    3f46:	b.n	3e84 <__mdiff+0x50>

00003f48 <__d2b>:
    3f48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3f4c:	vmov	r6, r7, d0
    3f50:	sub	sp, #12
    3f52:	mov	r8, r1
    3f54:	movs	r1, #1
    3f56:	mov	r4, r7
    3f58:	ubfx	r5, r7, #20, #11
    3f5c:	mov	r7, r2
    3f5e:	bl	39e0 <_Balloc>
    3f62:	ubfx	r4, r4, #0, #20
    3f66:	mov	r9, r0
    3f68:	cbz	r5, 3f6e <__d2b+0x26>
    3f6a:	orr.w	r4, r4, #1048576	; 0x100000
    3f6e:	str	r4, [sp, #4]
    3f70:	cbz	r6, 3fba <__d2b+0x72>
    3f72:	add	r0, sp, #8
    3f74:	str.w	r6, [r0, #-8]!
    3f78:	bl	3b00 <__lo0bits>
    3f7c:	cmp	r0, #0
    3f7e:	bne.n	3fea <__d2b+0xa2>
    3f80:	ldmia.w	sp, {r2, r3}
    3f84:	str.w	r2, [r9, #20]
    3f88:	cmp	r3, #0
    3f8a:	ite	eq
    3f8c:	moveq	r1, #1
    3f8e:	movne	r1, #2
    3f90:	str.w	r3, [r9, #24]
    3f94:	str.w	r1, [r9, #16]
    3f98:	cbnz	r5, 3fd2 <__d2b+0x8a>
    3f9a:	add.w	r3, r9, r1, lsl #2
    3f9e:	subw	r0, r0, #1074	; 0x432
    3fa2:	str.w	r0, [r8]
    3fa6:	ldr	r0, [r3, #16]
    3fa8:	bl	3ac0 <__hi0bits>
    3fac:	rsb	r0, r0, r1, lsl #5
    3fb0:	str	r0, [r7, #0]
    3fb2:	mov	r0, r9
    3fb4:	add	sp, #12
    3fb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3fba:	add	r0, sp, #4
    3fbc:	bl	3b00 <__lo0bits>
    3fc0:	ldr	r3, [sp, #4]
    3fc2:	str.w	r3, [r9, #20]
    3fc6:	movs	r1, #1
    3fc8:	adds	r0, #32
    3fca:	str.w	r1, [r9, #16]
    3fce:	cmp	r5, #0
    3fd0:	beq.n	3f9a <__d2b+0x52>
    3fd2:	subw	r5, r5, #1075	; 0x433
    3fd6:	add	r5, r0
    3fd8:	rsb	r0, r0, #53	; 0x35
    3fdc:	str.w	r5, [r8]
    3fe0:	str	r0, [r7, #0]
    3fe2:	mov	r0, r9
    3fe4:	add	sp, #12
    3fe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3fea:	ldmia.w	sp, {r2, r3}
    3fee:	rsb	r1, r0, #32
    3ff2:	lsl.w	r1, r3, r1
    3ff6:	orrs	r2, r1
    3ff8:	lsrs	r3, r0
    3ffa:	str	r3, [sp, #4]
    3ffc:	str.w	r2, [r9, #20]
    4000:	b.n	3f88 <__d2b+0x40>
    4002:	nop

00004004 <_vasnprintf_r>:
    4004:	push	{r4, r5, r6, lr}
    4006:	mov	r5, r2
    4008:	sub	sp, #104	; 0x68
    400a:	ldr	r4, [r2, #0]
    400c:	cbz	r1, 4012 <_vasnprintf_r+0xe>
    400e:	cmp	r4, #0
    4010:	bne.n	4048 <_vasnprintf_r+0x44>
    4012:	movs	r4, #0
    4014:	mov.w	r2, #648	; 0x288
    4018:	strh.w	r2, [sp, #12]
    401c:	str	r4, [sp, #0]
    401e:	str	r4, [sp, #16]
    4020:	mov	r2, r3
    4022:	movw	r6, #65535	; 0xffff
    4026:	ldr	r3, [sp, #120]	; 0x78
    4028:	str	r4, [sp, #8]
    402a:	mov	r1, sp
    402c:	str	r4, [sp, #20]
    402e:	strh.w	r6, [sp, #14]
    4032:	bl	4e78 <_svfprintf_r>
    4036:	cmp	r0, #0
    4038:	blt.n	405e <_vasnprintf_r+0x5a>
    403a:	ldr	r3, [sp, #0]
    403c:	str	r0, [r5, #0]
    403e:	movs	r2, #0
    4040:	strb	r2, [r3, #0]
    4042:	ldr	r0, [sp, #16]
    4044:	add	sp, #104	; 0x68
    4046:	pop	{r4, r5, r6, pc}
    4048:	mov.w	r2, #1544	; 0x608
    404c:	str	r1, [sp, #0]
    404e:	str	r1, [sp, #16]
    4050:	strh.w	r2, [sp, #12]
    4054:	bge.n	4020 <_vasnprintf_r+0x1c>
    4056:	movs	r3, #139	; 0x8b
    4058:	str	r3, [r0, #0]
    405a:	movs	r0, #0
    405c:	b.n	4044 <_vasnprintf_r+0x40>
    405e:	movs	r0, #0
    4060:	b.n	4044 <_vasnprintf_r+0x40>
    4062:	nop

00004064 <_calloc_r>:
    4064:	push	{r4, lr}
    4066:	mul.w	r1, r2, r1
    406a:	bl	2970 <_malloc_r>
    406e:	mov	r4, r0
    4070:	cbz	r0, 40aa <_calloc_r+0x46>
    4072:	ldr.w	r2, [r0, #-4]
    4076:	bic.w	r2, r2, #3
    407a:	subs	r2, #4
    407c:	cmp	r2, #36	; 0x24
    407e:	bhi.n	40b2 <_calloc_r+0x4e>
    4080:	cmp	r2, #19
    4082:	bls.n	40ae <_calloc_r+0x4a>
    4084:	movs	r3, #0
    4086:	cmp	r2, #27
    4088:	str	r3, [r0, #0]
    408a:	str	r3, [r0, #4]
    408c:	bls.n	40bc <_calloc_r+0x58>
    408e:	cmp	r2, #36	; 0x24
    4090:	str	r3, [r0, #8]
    4092:	str	r3, [r0, #12]
    4094:	iteee	ne
    4096:	addne.w	r2, r0, #16
    409a:	streq	r3, [r0, #16]
    409c:	streq	r3, [r0, #20]
    409e:	addeq.w	r2, r0, #24
    40a2:	movs	r3, #0
    40a4:	str	r3, [r2, #0]
    40a6:	str	r3, [r2, #4]
    40a8:	str	r3, [r2, #8]
    40aa:	mov	r0, r4
    40ac:	pop	{r4, pc}
    40ae:	mov	r2, r0
    40b0:	b.n	40a2 <_calloc_r+0x3e>
    40b2:	movs	r1, #0
    40b4:	bl	2fd4 <memset>
    40b8:	mov	r0, r4
    40ba:	pop	{r4, pc}
    40bc:	add.w	r2, r0, #8
    40c0:	b.n	40a2 <_calloc_r+0x3e>
    40c2:	nop

000040c4 <quorem>:
    40c4:	ldr	r2, [r0, #16]
    40c6:	ldr	r3, [r1, #16]
    40c8:	cmp	r3, r2
    40ca:	bgt.w	41e8 <quorem+0x124>
    40ce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40d2:	add.w	r8, r3, #4294967295
    40d6:	add.w	r7, r1, #20
    40da:	add.w	fp, r0, #20
    40de:	ldr.w	r2, [r7, r8, lsl #2]
    40e2:	ldr.w	r3, [fp, r8, lsl #2]
    40e6:	mov.w	r4, r8, lsl #2
    40ea:	sub	sp, #12
    40ec:	adds	r2, #1
    40ee:	udiv	r9, r3, r2
    40f2:	add.w	r3, fp, r4
    40f6:	str	r4, [sp, #0]
    40f8:	add.w	sl, r7, r4
    40fc:	str	r3, [sp, #4]
    40fe:	cmp.w	r9, #0
    4102:	beq.n	4178 <quorem+0xb4>
    4104:	movs	r5, #0
    4106:	mov	ip, r7
    4108:	mov	lr, fp
    410a:	mov	r3, r5
    410c:	ldr.w	r6, [ip], #4
    4110:	ldr.w	r2, [lr]
    4114:	uxth	r4, r6
    4116:	mla	r5, r9, r4, r5
    411a:	lsrs	r6, r6, #16
    411c:	lsrs	r4, r5, #16
    411e:	mla	r4, r9, r6, r4
    4122:	uxth	r5, r5
    4124:	subs	r3, r3, r5
    4126:	uxth	r6, r4
    4128:	uxtah	r3, r3, r2
    412c:	rsb	r6, r6, r2, lsr #16
    4130:	add.w	r6, r6, r3, asr #16
    4134:	uxth	r3, r3
    4136:	orr.w	r3, r3, r6, lsl #16
    413a:	cmp	sl, ip
    413c:	str.w	r3, [lr], #4
    4140:	mov.w	r5, r4, lsr #16
    4144:	mov.w	r3, r6, asr #16
    4148:	bcs.n	410c <quorem+0x48>
    414a:	ldr	r3, [sp, #0]
    414c:	ldr.w	r3, [fp, r3]
    4150:	cbnz	r3, 4178 <quorem+0xb4>
    4152:	ldr	r4, [sp, #4]
    4154:	subs	r3, r4, #4
    4156:	cmp	fp, r3
    4158:	bcs.n	4174 <quorem+0xb0>
    415a:	ldr.w	r3, [r4, #-4]
    415e:	cbnz	r3, 4174 <quorem+0xb0>
    4160:	sub.w	r3, r4, #8
    4164:	b.n	416c <quorem+0xa8>
    4166:	ldr	r2, [r3, #0]
    4168:	subs	r3, #4
    416a:	cbnz	r2, 4174 <quorem+0xb0>
    416c:	cmp	fp, r3
    416e:	add.w	r8, r8, #4294967295
    4172:	bcc.n	4166 <quorem+0xa2>
    4174:	str.w	r8, [r0, #16]
    4178:	mov	r4, r0
    417a:	bl	3df0 <__mcmp>
    417e:	cmp	r0, #0
    4180:	blt.n	41e0 <quorem+0x11c>
    4182:	add.w	r9, r9, #1
    4186:	mov	r5, fp
    4188:	movs	r3, #0
    418a:	ldr.w	r1, [r7], #4
    418e:	ldr	r0, [r5, #0]
    4190:	uxth	r2, r1
    4192:	subs	r2, r3, r2
    4194:	lsrs	r1, r1, #16
    4196:	uxtah	r2, r2, r0
    419a:	rsb	r3, r1, r0, lsr #16
    419e:	add.w	r3, r3, r2, asr #16
    41a2:	uxth	r1, r2
    41a4:	orr.w	r1, r1, r3, lsl #16
    41a8:	cmp	sl, r7
    41aa:	str.w	r1, [r5], #4
    41ae:	mov.w	r3, r3, asr #16
    41b2:	bcs.n	418a <quorem+0xc6>
    41b4:	ldr.w	r2, [fp, r8, lsl #2]
    41b8:	add.w	r3, fp, r8, lsl #2
    41bc:	cbnz	r2, 41e0 <quorem+0x11c>
    41be:	subs	r2, r3, #4
    41c0:	cmp	fp, r2
    41c2:	bcs.n	41dc <quorem+0x118>
    41c4:	ldr.w	r2, [r3, #-4]
    41c8:	cbnz	r2, 41dc <quorem+0x118>
    41ca:	subs	r3, #8
    41cc:	b.n	41d4 <quorem+0x110>
    41ce:	ldr	r2, [r3, #0]
    41d0:	subs	r3, #4
    41d2:	cbnz	r2, 41dc <quorem+0x118>
    41d4:	cmp	fp, r3
    41d6:	add.w	r8, r8, #4294967295
    41da:	bcc.n	41ce <quorem+0x10a>
    41dc:	str.w	r8, [r4, #16]
    41e0:	mov	r0, r9
    41e2:	add	sp, #12
    41e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41e8:	movs	r0, #0
    41ea:	bx	lr
    41ec:	movs	r0, r0
	...

000041f0 <_dtoa_r>:
    41f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41f4:	vmov	r6, r7, d0
    41f8:	sub	sp, #76	; 0x4c
    41fa:	ldr	r5, [r0, #64]	; 0x40
    41fc:	str	r1, [sp, #4]
    41fe:	mov	r4, r0
    4200:	mov	r8, r2
    4202:	str	r3, [sp, #16]
    4204:	vmov	sl, s0
    4208:	mov	fp, r7
    420a:	cbz	r5, 4220 <_dtoa_r+0x30>
    420c:	ldr	r2, [r0, #68]	; 0x44
    420e:	str	r2, [r5, #4]
    4210:	movs	r3, #1
    4212:	lsls	r3, r2
    4214:	str	r3, [r5, #8]
    4216:	mov	r1, r5
    4218:	bl	3a2c <_Bfree>
    421c:	movs	r3, #0
    421e:	str	r3, [r4, #64]	; 0x40
    4220:	cmp.w	fp, #0
    4224:	mov	r6, fp
    4226:	blt.n	4292 <_dtoa_r+0xa2>
    4228:	ldr	r2, [sp, #112]	; 0x70
    422a:	movs	r3, #0
    422c:	str	r3, [r2, #0]
    422e:	ldr	r3, [pc, #784]	; (4540 <_dtoa_r+0x350>)
    4230:	mov	r2, r3
    4232:	ands	r3, r6
    4234:	cmp	r3, r2
    4236:	beq.n	4264 <_dtoa_r+0x74>
    4238:	vmov	d7, sl, fp
    423c:	vcmp.f64	d7, #0.0
    4240:	vmrs	APSR_nzcv, fpscr
    4244:	strd	sl, fp, [sp, #8]
    4248:	bne.n	42a0 <_dtoa_r+0xb0>
    424a:	ldr	r2, [sp, #16]
    424c:	movs	r3, #1
    424e:	str	r3, [r2, #0]
    4250:	ldr	r3, [sp, #116]	; 0x74
    4252:	cmp	r3, #0
    4254:	beq.w	43c6 <_dtoa_r+0x1d6>
    4258:	ldr	r0, [pc, #744]	; (4544 <_dtoa_r+0x354>)
    425a:	str	r0, [r3, #0]
    425c:	subs	r0, #1
    425e:	add	sp, #76	; 0x4c
    4260:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4264:	ldr	r2, [sp, #16]
    4266:	movw	r3, #9999	; 0x270f
    426a:	str	r3, [r2, #0]
    426c:	cmp.w	sl, #0
    4270:	beq.w	4398 <_dtoa_r+0x1a8>
    4274:	ldr	r0, [pc, #720]	; (4548 <_dtoa_r+0x358>)
    4276:	ldr	r3, [sp, #116]	; 0x74
    4278:	cmp	r3, #0
    427a:	beq.n	425e <_dtoa_r+0x6e>
    427c:	ldrb	r3, [r0, #3]
    427e:	cmp	r3, #0
    4280:	beq.w	43ca <_dtoa_r+0x1da>
    4284:	add.w	r3, r0, #8
    4288:	ldr	r2, [sp, #116]	; 0x74
    428a:	str	r3, [r2, #0]
    428c:	add	sp, #76	; 0x4c
    428e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4292:	ldr	r2, [sp, #112]	; 0x70
    4294:	movs	r3, #1
    4296:	bic.w	r6, fp, #2147483648	; 0x80000000
    429a:	str	r3, [r2, #0]
    429c:	mov	fp, r6
    429e:	b.n	422e <_dtoa_r+0x3e>
    42a0:	add	r1, sp, #68	; 0x44
    42a2:	add	r2, sp, #64	; 0x40
    42a4:	vldr	d0, [sp, #8]
    42a8:	mov	r0, r4
    42aa:	bl	3f48 <__d2b>
    42ae:	lsrs	r1, r6, #20
    42b0:	str	r0, [sp, #28]
    42b2:	bne.n	43aa <_dtoa_r+0x1ba>
    42b4:	ldr	r0, [sp, #64]	; 0x40
    42b6:	ldr	r1, [sp, #68]	; 0x44
    42b8:	add	r1, r0
    42ba:	addw	r3, r1, #1074	; 0x432
    42be:	cmp	r3, #32
    42c0:	ble.w	4746 <_dtoa_r+0x556>
    42c4:	rsb	r3, r3, #64	; 0x40
    42c8:	addw	r2, r1, #1042	; 0x412
    42cc:	lsls	r6, r3
    42ce:	lsr.w	r3, sl, r2
    42d2:	orrs	r3, r6
    42d4:	vmov	s15, r3
    42d8:	vcvt.f64.u32	d7, s15
    42dc:	movs	r5, #1
    42de:	vmov	r2, r3, d7
    42e2:	subs	r1, #1
    42e4:	sub.w	r3, r3, #32505856	; 0x1f00000
    42e8:	str	r5, [sp, #40]	; 0x28
    42ea:	vmov	d7, r2, r3
    42ee:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    42f2:	vldr	d4, [pc, #564]	; 4528 <_dtoa_r+0x338>
    42f6:	vsub.f64	d6, d7, d6
    42fa:	vldr	d7, [pc, #564]	; 4530 <_dtoa_r+0x340>
    42fe:	vldr	d5, [pc, #568]	; 4538 <_dtoa_r+0x348>
    4302:	vfma.f64	d7, d6, d4
    4306:	vmov	s13, r1
    430a:	vcvt.f64.s32	d6, s13
    430e:	vfma.f64	d7, d6, d5
    4312:	vcvt.s32.f64	s13, d7
    4316:	vcmpe.f64	d7, #0.0
    431a:	vmrs	APSR_nzcv, fpscr
    431e:	vstr	s13, [sp, #8]
    4322:	bmi.w	455e <_dtoa_r+0x36e>
    4326:	ldr	r5, [sp, #8]
    4328:	cmp	r5, #22
    432a:	bhi.w	4558 <_dtoa_r+0x368>
    432e:	ldr	r3, [pc, #540]	; (454c <_dtoa_r+0x35c>)
    4330:	add.w	r3, r3, r5, lsl #3
    4334:	vldr	d7, [r3]
    4338:	vmov	d6, sl, fp
    433c:	vcmpe.f64	d7, d6
    4340:	vmrs	APSR_nzcv, fpscr
    4344:	ble.w	4754 <_dtoa_r+0x564>
    4348:	subs	r3, r5, #1
    434a:	str	r3, [sp, #8]
    434c:	movs	r3, #0
    434e:	str	r3, [sp, #48]	; 0x30
    4350:	subs	r1, r0, r1
    4352:	subs.w	r9, r1, #1
    4356:	bmi.w	4588 <_dtoa_r+0x398>
    435a:	movs	r3, #0
    435c:	str	r3, [sp, #24]
    435e:	ldr	r3, [sp, #8]
    4360:	cmp	r3, #0
    4362:	blt.w	4576 <_dtoa_r+0x386>
    4366:	add	r9, r3
    4368:	str	r3, [sp, #44]	; 0x2c
    436a:	movs	r3, #0
    436c:	str	r3, [sp, #20]
    436e:	ldr	r3, [sp, #4]
    4370:	cmp	r3, #9
    4372:	bhi.n	43ce <_dtoa_r+0x1de>
    4374:	cmp	r3, #5
    4376:	ble.w	4e38 <_dtoa_r+0xc48>
    437a:	subs	r3, #4
    437c:	str	r3, [sp, #4]
    437e:	movs	r3, #0
    4380:	str	r3, [sp, #56]	; 0x38
    4382:	ldr	r3, [sp, #4]
    4384:	subs	r3, #2
    4386:	cmp	r3, #3
    4388:	bhi.w	4e4a <_dtoa_r+0xc5a>
    438c:	tbh	[pc, r3, lsl #1]
    4390:	.word	0x01e502a9
    4394:	.word	0x03c802b5
    4398:	ldr	r3, [pc, #428]	; (4548 <_dtoa_r+0x358>)
    439a:	ldr	r2, [pc, #436]	; (4550 <_dtoa_r+0x360>)
    439c:	ubfx	r0, r6, #0, #20
    43a0:	cmp	r0, #0
    43a2:	ite	ne
    43a4:	movne	r0, r3
    43a6:	moveq	r0, r2
    43a8:	b.n	4276 <_dtoa_r+0x86>
    43aa:	ldrd	r2, r3, [sp, #8]
    43ae:	ubfx	r0, r3, #0, #20
    43b2:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    43b6:	movs	r5, #0
    43b8:	subw	r1, r1, #1023	; 0x3ff
    43bc:	orr.w	r3, r3, #3145728	; 0x300000
    43c0:	ldr	r0, [sp, #64]	; 0x40
    43c2:	str	r5, [sp, #40]	; 0x28
    43c4:	b.n	42ea <_dtoa_r+0xfa>
    43c6:	ldr	r0, [pc, #396]	; (4554 <_dtoa_r+0x364>)
    43c8:	b.n	425e <_dtoa_r+0x6e>
    43ca:	adds	r3, r0, #3
    43cc:	b.n	4288 <_dtoa_r+0x98>
    43ce:	movs	r1, #0
    43d0:	str	r1, [r4, #68]	; 0x44
    43d2:	mov	r0, r4
    43d4:	mov	r8, r1
    43d6:	str	r1, [sp, #4]
    43d8:	bl	39e0 <_Balloc>
    43dc:	mov.w	r7, #4294967295
    43e0:	movs	r3, #1
    43e2:	str	r0, [sp, #32]
    43e4:	str	r0, [r4, #64]	; 0x40
    43e6:	str	r7, [sp, #52]	; 0x34
    43e8:	str	r3, [sp, #36]	; 0x24
    43ea:	ldr	r3, [sp, #68]	; 0x44
    43ec:	cmp	r3, #0
    43ee:	blt.n	44e6 <_dtoa_r+0x2f6>
    43f0:	ldr	r2, [sp, #8]
    43f2:	cmp	r2, #14
    43f4:	bgt.n	44e6 <_dtoa_r+0x2f6>
    43f6:	ldr	r3, [pc, #340]	; (454c <_dtoa_r+0x35c>)
    43f8:	cmp.w	r8, #0
    43fc:	add.w	r3, r3, r2, lsl #3
    4400:	vldr	d4, [r3]
    4404:	blt.w	4910 <_dtoa_r+0x720>
    4408:	vneg.f64	d2, d4
    440c:	vmov	d7, sl, fp
    4410:	vdiv.f64	d6, d7, d4
    4414:	vcvt.s32.f64	s12, d6
    4418:	ldr	r2, [sp, #32]
    441a:	vmov	r3, s12
    441e:	cmp	r7, #1
    4420:	add.w	r3, r3, #48	; 0x30
    4424:	vcvt.f64.s32	d5, s12
    4428:	add.w	fp, r2, #1
    442c:	strb	r3, [r2, #0]
    442e:	vfma.f64	d7, d2, d5
    4432:	beq.n	447a <_dtoa_r+0x28a>
    4434:	vmov.f64	d3, #36	; 0x41200000  10.0
    4438:	vmul.f64	d7, d7, d3
    443c:	vcmp.f64	d7, #0.0
    4440:	vmrs	APSR_nzcv, fpscr
    4444:	beq.n	44bc <_dtoa_r+0x2cc>
    4446:	ldr	r2, [sp, #32]
    4448:	b.n	4458 <_dtoa_r+0x268>
    444a:	vmul.f64	d7, d7, d3
    444e:	vcmp.f64	d7, #0.0
    4452:	vmrs	APSR_nzcv, fpscr
    4456:	beq.n	44bc <_dtoa_r+0x2cc>
    4458:	vdiv.f64	d6, d7, d4
    445c:	vcvt.s32.f64	s12, d6
    4460:	vmov	r3, s12
    4464:	adds	r3, #48	; 0x30
    4466:	strb.w	r3, [fp], #1
    446a:	rsb	r3, r2, fp
    446e:	cmp	r3, r7
    4470:	vcvt.f64.s32	d5, s12
    4474:	vfma.f64	d7, d2, d5
    4478:	bne.n	444a <_dtoa_r+0x25a>
    447a:	vadd.f64	d7, d7, d7
    447e:	vcmpe.f64	d4, d7
    4482:	vmrs	APSR_nzcv, fpscr
    4486:	bmi.n	449a <_dtoa_r+0x2aa>
    4488:	vcmp.f64	d4, d7
    448c:	vmrs	APSR_nzcv, fpscr
    4490:	bne.n	44bc <_dtoa_r+0x2cc>
    4492:	vmov	r3, s12
    4496:	lsls	r3, r3, #31
    4498:	bpl.n	44bc <_dtoa_r+0x2cc>
    449a:	ldrb.w	r0, [fp, #-1]
    449e:	ldr	r2, [sp, #32]
    44a0:	add.w	r3, fp, #4294967295
    44a4:	b.n	44b0 <_dtoa_r+0x2c0>
    44a6:	cmp	r2, r3
    44a8:	beq.w	4c76 <_dtoa_r+0xa86>
    44ac:	ldrb.w	r0, [r3, #-1]!
    44b0:	cmp	r0, #57	; 0x39
    44b2:	add.w	fp, r3, #1
    44b6:	beq.n	44a6 <_dtoa_r+0x2b6>
    44b8:	adds	r0, #1
    44ba:	strb	r0, [r3, #0]
    44bc:	ldr	r1, [sp, #28]
    44be:	mov	r0, r4
    44c0:	bl	3a2c <_Bfree>
    44c4:	movs	r2, #0
    44c6:	ldr	r3, [sp, #8]
    44c8:	strb.w	r2, [fp]
    44cc:	ldr	r2, [sp, #16]
    44ce:	adds	r3, #1
    44d0:	str	r3, [r2, #0]
    44d2:	ldr	r3, [sp, #116]	; 0x74
    44d4:	cmp	r3, #0
    44d6:	beq.w	4ba6 <_dtoa_r+0x9b6>
    44da:	ldr	r0, [sp, #32]
    44dc:	str.w	fp, [r3]
    44e0:	add	sp, #76	; 0x4c
    44e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44e6:	ldr	r2, [sp, #36]	; 0x24
    44e8:	cmp	r2, #0
    44ea:	beq.n	4594 <_dtoa_r+0x3a4>
    44ec:	ldr	r2, [sp, #4]
    44ee:	cmp	r2, #1
    44f0:	ble.w	4950 <_dtoa_r+0x760>
    44f4:	ldr	r1, [sp, #20]
    44f6:	subs	r2, r7, #1
    44f8:	cmp	r1, r2
    44fa:	blt.w	4bac <_dtoa_r+0x9bc>
    44fe:	subs	r3, r1, r2
    4500:	str	r3, [sp, #56]	; 0x38
    4502:	cmp	r7, #0
    4504:	ldr	r3, [sp, #24]
    4506:	blt.w	4d52 <_dtoa_r+0xb62>
    450a:	str	r3, [sp, #40]	; 0x28
    450c:	mov	r3, r7
    450e:	ldr	r2, [sp, #24]
    4510:	movs	r1, #1
    4512:	add	r2, r3
    4514:	mov	r0, r4
    4516:	str	r2, [sp, #24]
    4518:	add	r9, r3
    451a:	bl	3b5c <__i2b>
    451e:	mov	r6, r0
    4520:	b.n	459e <_dtoa_r+0x3ae>
    4522:	nop
    4524:	nop.w
    4528:	.word	0x636f4361
    452c:	.word	0x3fd287a7
    4530:	.word	0x8b60c8b3
    4534:	.word	0x3fc68a28
    4538:	.word	0x509f79fb
    453c:	.word	0x3fd34413
    4540:	.word	0x7ff00000
    4544:	.word	0x2000068d
    4548:	.word	0x20000688
    454c:	.word	0x20000580
    4550:	.word	0x2000067c
    4554:	.word	0x2000068c
    4558:	movs	r3, #1
    455a:	str	r3, [sp, #48]	; 0x30
    455c:	b.n	4350 <_dtoa_r+0x160>
    455e:	vcvt.f64.s32	d6, s13
    4562:	vcmp.f64	d7, d6
    4566:	vmrs	APSR_nzcv, fpscr
    456a:	beq.w	4326 <_dtoa_r+0x136>
    456e:	ldr	r3, [sp, #8]
    4570:	subs	r3, #1
    4572:	str	r3, [sp, #8]
    4574:	b.n	4326 <_dtoa_r+0x136>
    4576:	ldr	r2, [sp, #24]
    4578:	ldr	r3, [sp, #8]
    457a:	subs	r2, r2, r3
    457c:	negs	r3, r3
    457e:	str	r3, [sp, #20]
    4580:	movs	r3, #0
    4582:	str	r2, [sp, #24]
    4584:	str	r3, [sp, #44]	; 0x2c
    4586:	b.n	436e <_dtoa_r+0x17e>
    4588:	rsb	r3, r9, #0
    458c:	str	r3, [sp, #24]
    458e:	mov.w	r9, #0
    4592:	b.n	435e <_dtoa_r+0x16e>
    4594:	ldr	r3, [sp, #20]
    4596:	str	r3, [sp, #56]	; 0x38
    4598:	ldr	r6, [sp, #36]	; 0x24
    459a:	ldr	r3, [sp, #24]
    459c:	str	r3, [sp, #40]	; 0x28
    459e:	ldr	r1, [sp, #40]	; 0x28
    45a0:	mov	r3, r1
    45a2:	cbz	r1, 45be <_dtoa_r+0x3ce>
    45a4:	cmp.w	r9, #0
    45a8:	ble.n	45be <_dtoa_r+0x3ce>
    45aa:	cmp	r1, r9
    45ac:	ldr	r2, [sp, #24]
    45ae:	it	ge
    45b0:	movge	r3, r9
    45b2:	subs	r2, r2, r3
    45b4:	str	r2, [sp, #24]
    45b6:	subs	r2, r1, r3
    45b8:	str	r2, [sp, #40]	; 0x28
    45ba:	rsb	r9, r3, r9
    45be:	ldr	r3, [sp, #20]
    45c0:	cmp	r3, #0
    45c2:	ble.w	4ac6 <_dtoa_r+0x8d6>
    45c6:	ldr	r2, [sp, #36]	; 0x24
    45c8:	cmp	r2, #0
    45ca:	beq.w	4902 <_dtoa_r+0x712>
    45ce:	ldr	r2, [sp, #56]	; 0x38
    45d0:	cmp	r2, #0
    45d2:	beq.w	4902 <_dtoa_r+0x712>
    45d6:	mov	r1, r6
    45d8:	mov	r0, r4
    45da:	bl	3ca0 <__pow5mult>
    45de:	ldr	r2, [sp, #28]
    45e0:	mov	r1, r0
    45e2:	mov	r6, r0
    45e4:	mov	r0, r4
    45e6:	bl	3b70 <__multiply>
    45ea:	ldr	r1, [sp, #28]
    45ec:	mov	r5, r0
    45ee:	mov	r0, r4
    45f0:	bl	3a2c <_Bfree>
    45f4:	ldr	r3, [sp, #20]
    45f6:	ldr	r2, [sp, #56]	; 0x38
    45f8:	subs	r3, r3, r2
    45fa:	str	r3, [sp, #20]
    45fc:	bne.w	4900 <_dtoa_r+0x710>
    4600:	movs	r1, #1
    4602:	mov	r0, r4
    4604:	bl	3b5c <__i2b>
    4608:	ldr	r3, [sp, #44]	; 0x2c
    460a:	str	r0, [sp, #20]
    460c:	cmp	r3, #0
    460e:	beq.w	496a <_dtoa_r+0x77a>
    4612:	mov	r1, r0
    4614:	mov	r2, r3
    4616:	mov	r0, r4
    4618:	bl	3ca0 <__pow5mult>
    461c:	ldr	r3, [sp, #4]
    461e:	str	r0, [sp, #20]
    4620:	cmp	r3, #1
    4622:	ble.w	4b26 <_dtoa_r+0x936>
    4626:	movs	r3, #0
    4628:	str	r3, [sp, #28]
    462a:	ldr	r2, [sp, #20]
    462c:	ldr	r3, [r2, #16]
    462e:	add.w	r3, r2, r3, lsl #2
    4632:	ldr	r0, [r3, #16]
    4634:	bl	3ac0 <__hi0bits>
    4638:	rsb	r0, r0, #32
    463c:	add	r0, r9
    463e:	ands.w	r0, r0, #31
    4642:	beq.w	4966 <_dtoa_r+0x776>
    4646:	rsb	r3, r0, #32
    464a:	cmp	r3, #4
    464c:	ble.w	4e40 <_dtoa_r+0xc50>
    4650:	rsb	r0, r0, #28
    4654:	ldr	r3, [sp, #24]
    4656:	add	r3, r0
    4658:	str	r3, [sp, #24]
    465a:	ldr	r3, [sp, #40]	; 0x28
    465c:	add	r3, r0
    465e:	str	r3, [sp, #40]	; 0x28
    4660:	add	r9, r0
    4662:	ldr	r3, [sp, #24]
    4664:	cmp	r3, #0
    4666:	ble.n	4674 <_dtoa_r+0x484>
    4668:	mov	r1, r5
    466a:	mov	r2, r3
    466c:	mov	r0, r4
    466e:	bl	3d40 <__lshift>
    4672:	mov	r5, r0
    4674:	cmp.w	r9, #0
    4678:	ble.n	4686 <_dtoa_r+0x496>
    467a:	mov	r2, r9
    467c:	ldr	r1, [sp, #20]
    467e:	mov	r0, r4
    4680:	bl	3d40 <__lshift>
    4684:	str	r0, [sp, #20]
    4686:	ldr	r3, [sp, #48]	; 0x30
    4688:	cmp	r3, #0
    468a:	bne.w	4a90 <_dtoa_r+0x8a0>
    468e:	cmp	r7, #0
    4690:	ble.w	4ad4 <_dtoa_r+0x8e4>
    4694:	ldr	r3, [sp, #36]	; 0x24
    4696:	cmp	r3, #0
    4698:	bne.w	4992 <_dtoa_r+0x7a2>
    469c:	ldr.w	fp, [sp, #32]
    46a0:	ldr.w	sl, [sp, #20]
    46a4:	mov	r8, fp
    46a6:	b.n	46ae <_dtoa_r+0x4be>
    46a8:	bl	3a40 <__multadd>
    46ac:	mov	r5, r0
    46ae:	mov	r1, sl
    46b0:	mov	r0, r5
    46b2:	bl	40c4 <quorem>
    46b6:	add.w	r9, r0, #48	; 0x30
    46ba:	strb.w	r9, [r8], #1
    46be:	rsb	r3, fp, r8
    46c2:	cmp	r3, r7
    46c4:	mov.w	r2, #10
    46c8:	mov.w	r3, #0
    46cc:	mov	r1, r5
    46ce:	mov	r0, r4
    46d0:	blt.n	46a8 <_dtoa_r+0x4b8>
    46d2:	ldr	r3, [sp, #32]
    46d4:	cmp	r7, #1
    46d6:	ite	ge
    46d8:	addge	r3, r3, r7
    46da:	addlt	r3, #1
    46dc:	mov	fp, r3
    46de:	mov.w	sl, #0
    46e2:	mov	r1, r5
    46e4:	movs	r2, #1
    46e6:	mov	r0, r4
    46e8:	bl	3d40 <__lshift>
    46ec:	ldr	r1, [sp, #20]
    46ee:	str	r0, [sp, #28]
    46f0:	bl	3df0 <__mcmp>
    46f4:	cmp	r0, #0
    46f6:	ble.w	4c12 <_dtoa_r+0xa22>
    46fa:	ldrb.w	r2, [fp, #-1]
    46fe:	ldr	r1, [sp, #32]
    4700:	add.w	r3, fp, #4294967295
    4704:	b.n	4710 <_dtoa_r+0x520>
    4706:	cmp	r3, r1
    4708:	beq.w	4b12 <_dtoa_r+0x922>
    470c:	ldrb.w	r2, [r3, #-1]!
    4710:	cmp	r2, #57	; 0x39
    4712:	add.w	fp, r3, #1
    4716:	beq.n	4706 <_dtoa_r+0x516>
    4718:	adds	r2, #1
    471a:	strb	r2, [r3, #0]
    471c:	ldr	r1, [sp, #20]
    471e:	mov	r0, r4
    4720:	bl	3a2c <_Bfree>
    4724:	cmp	r6, #0
    4726:	beq.w	44bc <_dtoa_r+0x2cc>
    472a:	cmp.w	sl, #0
    472e:	beq.n	473c <_dtoa_r+0x54c>
    4730:	cmp	sl, r6
    4732:	beq.n	473c <_dtoa_r+0x54c>
    4734:	mov	r1, sl
    4736:	mov	r0, r4
    4738:	bl	3a2c <_Bfree>
    473c:	mov	r1, r6
    473e:	mov	r0, r4
    4740:	bl	3a2c <_Bfree>
    4744:	b.n	44bc <_dtoa_r+0x2cc>
    4746:	rsb	r3, r3, #32
    474a:	lsl.w	r3, sl, r3
    474e:	vmov	s15, r3
    4752:	b.n	42d8 <_dtoa_r+0xe8>
    4754:	movs	r3, #0
    4756:	str	r3, [sp, #48]	; 0x30
    4758:	b.n	4350 <_dtoa_r+0x160>
    475a:	movs	r3, #0
    475c:	str	r3, [sp, #36]	; 0x24
    475e:	ldr	r3, [sp, #8]
    4760:	add	r3, r8
    4762:	adds	r7, r3, #1
    4764:	cmp	r7, #0
    4766:	str	r3, [sp, #52]	; 0x34
    4768:	ble.w	4bc6 <_dtoa_r+0x9d6>
    476c:	mov	r6, r7
    476e:	mov	r5, r7
    4770:	movs	r1, #0
    4772:	cmp	r6, #23
    4774:	str	r1, [r4, #68]	; 0x44
    4776:	bls.n	478e <_dtoa_r+0x59e>
    4778:	movs	r2, #1
    477a:	movs	r3, #4
    477c:	lsls	r3, r3, #1
    477e:	add.w	r0, r3, #20
    4782:	cmp	r0, r6
    4784:	mov	r1, r2
    4786:	add.w	r2, r2, #1
    478a:	bls.n	477c <_dtoa_r+0x58c>
    478c:	str	r1, [r4, #68]	; 0x44
    478e:	mov	r0, r4
    4790:	bl	39e0 <_Balloc>
    4794:	cmp	r5, #14
    4796:	str	r0, [sp, #32]
    4798:	str	r0, [r4, #64]	; 0x40
    479a:	bhi.w	43ea <_dtoa_r+0x1fa>
    479e:	ldr	r3, [sp, #56]	; 0x38
    47a0:	cmp	r3, #0
    47a2:	beq.w	43ea <_dtoa_r+0x1fa>
    47a6:	ldr	r1, [sp, #8]
    47a8:	cmp	r1, #0
    47aa:	strd	sl, fp, [sp, #56]	; 0x38
    47ae:	ble.w	4c34 <_dtoa_r+0xa44>
    47b2:	ldr	r3, [pc, #792]	; (4acc <_dtoa_r+0x8dc>)
    47b4:	and.w	r2, r1, #15
    47b8:	add.w	r2, r3, r2, lsl #3
    47bc:	asrs	r3, r1, #4
    47be:	lsls	r6, r3, #27
    47c0:	vldr	d6, [r2]
    47c4:	bpl.w	4bbe <_dtoa_r+0x9ce>
    47c8:	ldr	r2, [pc, #772]	; (4ad0 <_dtoa_r+0x8e0>)
    47ca:	vldr	d7, [r2, #32]
    47ce:	vmov	d4, sl, fp
    47d2:	and.w	r3, r3, #15
    47d6:	movs	r1, #3
    47d8:	vdiv.f64	d5, d4, d7
    47dc:	cbz	r3, 47f6 <_dtoa_r+0x606>
    47de:	ldr	r2, [pc, #752]	; (4ad0 <_dtoa_r+0x8e0>)
    47e0:	lsls	r5, r3, #31
    47e2:	bpl.n	47ee <_dtoa_r+0x5fe>
    47e4:	vldr	d7, [r2]
    47e8:	adds	r1, #1
    47ea:	vmul.f64	d6, d6, d7
    47ee:	asrs	r3, r3, #1
    47f0:	add.w	r2, r2, #8
    47f4:	bne.n	47e0 <_dtoa_r+0x5f0>
    47f6:	vdiv.f64	d4, d5, d6
    47fa:	ldr	r3, [sp, #48]	; 0x30
    47fc:	cbz	r3, 480e <_dtoa_r+0x61e>
    47fe:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4802:	vcmpe.f64	d4, d7
    4806:	vmrs	APSR_nzcv, fpscr
    480a:	bmi.w	4d7c <_dtoa_r+0xb8c>
    480e:	vmov	s15, r1
    4812:	vcvt.f64.s32	d6, s15
    4816:	vmov.f64	d7, #28	; 0x40e00000  7.0
    481a:	vfma.f64	d7, d6, d4
    481e:	vmov	r2, r3, d7
    4822:	sub.w	r3, r3, #54525952	; 0x3400000
    4826:	cmp	r7, #0
    4828:	beq.w	4b78 <_dtoa_r+0x988>
    482c:	ldr	r6, [sp, #8]
    482e:	mov	r1, r7
    4830:	ldr	r0, [sp, #36]	; 0x24
    4832:	cmp	r0, #0
    4834:	beq.w	4cd2 <_dtoa_r+0xae2>
    4838:	vmov.f64	d3, #96	; 0x3f000000  0.5
    483c:	ldr	r0, [pc, #652]	; (4acc <_dtoa_r+0x8dc>)
    483e:	ldr	r5, [sp, #32]
    4840:	add.w	r0, r0, r1, lsl #3
    4844:	vldr	d6, [r0, #-8]
    4848:	vcvt.s32.f64	s14, d4
    484c:	vdiv.f64	d5, d3, d6
    4850:	vmov	r0, s14
    4854:	vmov	d6, r2, r3
    4858:	adds	r0, #48	; 0x30
    485a:	uxtb	r0, r0
    485c:	vsub.f64	d5, d5, d6
    4860:	vcvt.f64.s32	d7, s14
    4864:	vsub.f64	d7, d4, d7
    4868:	vcmpe.f64	d5, d7
    486c:	vmrs	APSR_nzcv, fpscr
    4870:	strb	r0, [r5, #0]
    4872:	add.w	fp, r5, #1
    4876:	bgt.n	48de <_dtoa_r+0x6ee>
    4878:	vmov.f64	d3, #112	; 0x3f800000  1.0
    487c:	vsub.f64	d6, d3, d7
    4880:	vcmpe.f64	d5, d6
    4884:	vmrs	APSR_nzcv, fpscr
    4888:	bgt.w	4de8 <_dtoa_r+0xbf8>
    488c:	cmp	r1, #1
    488e:	ble.w	4c2c <_dtoa_r+0xa3c>
    4892:	vmov.f64	d4, #36	; 0x41200000  10.0
    4896:	ldr	r3, [sp, #32]
    4898:	add	r1, r3
    489a:	b.n	48b2 <_dtoa_r+0x6c2>
    489c:	vsub.f64	d6, d3, d7
    48a0:	vcmpe.f64	d6, d5
    48a4:	vmrs	APSR_nzcv, fpscr
    48a8:	bmi.w	4de8 <_dtoa_r+0xbf8>
    48ac:	cmp	fp, r1
    48ae:	beq.w	4c2c <_dtoa_r+0xa3c>
    48b2:	vmul.f64	d7, d7, d4
    48b6:	vmul.f64	d5, d5, d4
    48ba:	vcvt.s32.f64	s12, d7
    48be:	vmov	r3, s12
    48c2:	add.w	r0, r3, #48	; 0x30
    48c6:	uxtb	r0, r0
    48c8:	vcvt.f64.s32	d6, s12
    48cc:	vsub.f64	d7, d7, d6
    48d0:	vcmpe.f64	d7, d5
    48d4:	vmrs	APSR_nzcv, fpscr
    48d8:	strb.w	r0, [fp], #1
    48dc:	bpl.n	489c <_dtoa_r+0x6ac>
    48de:	str	r6, [sp, #8]
    48e0:	b.n	44bc <_dtoa_r+0x2cc>
    48e2:	movs	r3, #0
    48e4:	str	r3, [sp, #36]	; 0x24
    48e6:	cmp.w	r8, #0
    48ea:	ble.w	4bce <_dtoa_r+0x9de>
    48ee:	mov	r6, r8
    48f0:	mov	r5, r8
    48f2:	str.w	r8, [sp, #52]	; 0x34
    48f6:	mov	r7, r8
    48f8:	b.n	4770 <_dtoa_r+0x580>
    48fa:	movs	r3, #1
    48fc:	str	r3, [sp, #36]	; 0x24
    48fe:	b.n	48e6 <_dtoa_r+0x6f6>
    4900:	str	r5, [sp, #28]
    4902:	ldr	r2, [sp, #20]
    4904:	ldr	r1, [sp, #28]
    4906:	mov	r0, r4
    4908:	bl	3ca0 <__pow5mult>
    490c:	mov	r5, r0
    490e:	b.n	4600 <_dtoa_r+0x410>
    4910:	cmp	r7, #0
    4912:	bgt.w	4408 <_dtoa_r+0x218>
    4916:	bne.w	4b9e <_dtoa_r+0x9ae>
    491a:	vmov.f64	d7, #20	; 0x40a00000  5.0
    491e:	vmul.f64	d4, d4, d7
    4922:	vmov	d7, sl, fp
    4926:	vcmpe.f64	d4, d7
    492a:	vmrs	APSR_nzcv, fpscr
    492e:	mov	r6, r7
    4930:	str	r7, [sp, #20]
    4932:	blt.w	4b00 <_dtoa_r+0x910>
    4936:	mvn.w	r3, r8
    493a:	ldr.w	fp, [sp, #32]
    493e:	str	r3, [sp, #8]
    4940:	ldr	r1, [sp, #20]
    4942:	mov	r0, r4
    4944:	bl	3a2c <_Bfree>
    4948:	cmp	r6, #0
    494a:	beq.w	44bc <_dtoa_r+0x2cc>
    494e:	b.n	473c <_dtoa_r+0x54c>
    4950:	ldr	r2, [sp, #40]	; 0x28
    4952:	cmp	r2, #0
    4954:	beq.w	4d5c <_dtoa_r+0xb6c>
    4958:	ldr	r2, [sp, #20]
    495a:	str	r2, [sp, #56]	; 0x38
    495c:	ldr	r2, [sp, #24]
    495e:	str	r2, [sp, #40]	; 0x28
    4960:	addw	r3, r3, #1075	; 0x433
    4964:	b.n	450e <_dtoa_r+0x31e>
    4966:	movs	r0, #28
    4968:	b.n	4654 <_dtoa_r+0x464>
    496a:	ldr	r3, [sp, #4]
    496c:	cmp	r3, #1
    496e:	ble.w	4df2 <_dtoa_r+0xc02>
    4972:	ldr	r3, [sp, #44]	; 0x2c
    4974:	str	r3, [sp, #28]
    4976:	movs	r0, #1
    4978:	b.n	463c <_dtoa_r+0x44c>
    497a:	mov	r1, r6
    497c:	movs	r3, #0
    497e:	movs	r2, #10
    4980:	mov	r0, r4
    4982:	bl	3a40 <__multadd>
    4986:	ldr	r3, [sp, #52]	; 0x34
    4988:	cmp	r3, #0
    498a:	mov	r6, r0
    498c:	ble.w	4e2a <_dtoa_r+0xc3a>
    4990:	mov	r7, r3
    4992:	ldr	r3, [sp, #40]	; 0x28
    4994:	cmp	r3, #0
    4996:	ble.n	49a4 <_dtoa_r+0x7b4>
    4998:	mov	r1, r6
    499a:	mov	r2, r3
    499c:	mov	r0, r4
    499e:	bl	3d40 <__lshift>
    49a2:	mov	r6, r0
    49a4:	ldr	r3, [sp, #28]
    49a6:	cmp	r3, #0
    49a8:	bne.w	4c88 <_dtoa_r+0xa98>
    49ac:	mov	r8, r6
    49ae:	ldr	r3, [sp, #32]
    49b0:	subs	r7, #1
    49b2:	adds	r2, r3, r7
    49b4:	str	r2, [sp, #36]	; 0x24
    49b6:	and.w	r2, sl, #1
    49ba:	str	r2, [sp, #40]	; 0x28
    49bc:	mov	r7, r3
    49be:	ldr.w	fp, [sp, #20]
    49c2:	mov	r0, r5
    49c4:	mov	r1, fp
    49c6:	bl	40c4 <quorem>
    49ca:	mov	r1, r6
    49cc:	mov	sl, r0
    49ce:	mov	r0, r5
    49d0:	bl	3df0 <__mcmp>
    49d4:	mov	r2, r8
    49d6:	mov	r1, fp
    49d8:	mov	r9, r0
    49da:	mov	r0, r4
    49dc:	bl	3e34 <__mdiff>
    49e0:	ldr	r3, [r0, #12]
    49e2:	mov	fp, r0
    49e4:	add.w	r2, sl, #48	; 0x30
    49e8:	cmp	r3, #0
    49ea:	bne.n	4a80 <_dtoa_r+0x890>
    49ec:	mov	r1, r0
    49ee:	mov	r0, r5
    49f0:	str	r2, [sp, #28]
    49f2:	bl	3df0 <__mcmp>
    49f6:	mov	r1, fp
    49f8:	str	r0, [sp, #24]
    49fa:	mov	r0, r4
    49fc:	bl	3a2c <_Bfree>
    4a00:	ldr	r3, [sp, #24]
    4a02:	ldr	r2, [sp, #28]
    4a04:	cbnz	r3, 4a12 <_dtoa_r+0x822>
    4a06:	ldr	r1, [sp, #4]
    4a08:	cbnz	r1, 4a12 <_dtoa_r+0x822>
    4a0a:	ldr	r1, [sp, #40]	; 0x28
    4a0c:	cmp	r1, #0
    4a0e:	beq.w	4dfc <_dtoa_r+0xc0c>
    4a12:	cmp.w	r9, #0
    4a16:	blt.w	4bd8 <_dtoa_r+0x9e8>
    4a1a:	bne.n	4a28 <_dtoa_r+0x838>
    4a1c:	ldr	r1, [sp, #4]
    4a1e:	cbnz	r1, 4a28 <_dtoa_r+0x838>
    4a20:	ldr	r1, [sp, #40]	; 0x28
    4a22:	cmp	r1, #0
    4a24:	beq.w	4bd8 <_dtoa_r+0x9e8>
    4a28:	cmp	r3, #0
    4a2a:	bgt.w	4cb0 <_dtoa_r+0xac0>
    4a2e:	ldr	r3, [sp, #36]	; 0x24
    4a30:	strb	r2, [r7, #0]
    4a32:	add.w	r9, r7, #1
    4a36:	cmp	r7, r3
    4a38:	mov	fp, r9
    4a3a:	beq.w	4cca <_dtoa_r+0xada>
    4a3e:	mov	r1, r5
    4a40:	movs	r3, #0
    4a42:	movs	r2, #10
    4a44:	mov	r0, r4
    4a46:	bl	3a40 <__multadd>
    4a4a:	cmp	r6, r8
    4a4c:	mov	r5, r0
    4a4e:	mov	r1, r6
    4a50:	mov.w	r3, #0
    4a54:	mov.w	r2, #10
    4a58:	mov	r0, r4
    4a5a:	beq.n	4a74 <_dtoa_r+0x884>
    4a5c:	bl	3a40 <__multadd>
    4a60:	mov	r1, r8
    4a62:	mov	r6, r0
    4a64:	movs	r3, #0
    4a66:	movs	r2, #10
    4a68:	mov	r0, r4
    4a6a:	bl	3a40 <__multadd>
    4a6e:	mov	r7, r9
    4a70:	mov	r8, r0
    4a72:	b.n	49be <_dtoa_r+0x7ce>
    4a74:	bl	3a40 <__multadd>
    4a78:	mov	r7, r9
    4a7a:	mov	r6, r0
    4a7c:	mov	r8, r0
    4a7e:	b.n	49be <_dtoa_r+0x7ce>
    4a80:	mov	r1, r0
    4a82:	mov	r0, r4
    4a84:	str	r2, [sp, #24]
    4a86:	bl	3a2c <_Bfree>
    4a8a:	movs	r3, #1
    4a8c:	ldr	r2, [sp, #24]
    4a8e:	b.n	4a12 <_dtoa_r+0x822>
    4a90:	ldr	r1, [sp, #20]
    4a92:	mov	r0, r5
    4a94:	bl	3df0 <__mcmp>
    4a98:	cmp	r0, #0
    4a9a:	bge.w	468e <_dtoa_r+0x49e>
    4a9e:	mov	r1, r5
    4aa0:	ldr	r5, [sp, #8]
    4aa2:	movs	r3, #0
    4aa4:	subs	r5, #1
    4aa6:	movs	r2, #10
    4aa8:	mov	r0, r4
    4aaa:	str	r5, [sp, #8]
    4aac:	bl	3a40 <__multadd>
    4ab0:	ldr	r3, [sp, #36]	; 0x24
    4ab2:	mov	r5, r0
    4ab4:	cmp	r3, #0
    4ab6:	bne.w	497a <_dtoa_r+0x78a>
    4aba:	ldr	r3, [sp, #52]	; 0x34
    4abc:	cmp	r3, #0
    4abe:	ble.w	4e1c <_dtoa_r+0xc2c>
    4ac2:	mov	r7, r3
    4ac4:	b.n	469c <_dtoa_r+0x4ac>
    4ac6:	ldr	r5, [sp, #28]
    4ac8:	b.n	4600 <_dtoa_r+0x410>
    4aca:	nop
    4acc:	.word	0x20000580
    4ad0:	.word	0x20000648
    4ad4:	ldr	r3, [sp, #4]
    4ad6:	cmp	r3, #2
    4ad8:	ble.w	4694 <_dtoa_r+0x4a4>
    4adc:	cmp	r7, #0
    4ade:	bne.w	4db4 <_dtoa_r+0xbc4>
    4ae2:	mov	r3, r7
    4ae4:	ldr	r1, [sp, #20]
    4ae6:	movs	r2, #5
    4ae8:	mov	r0, r4
    4aea:	bl	3a40 <__multadd>
    4aee:	mov	r1, r0
    4af0:	str	r0, [sp, #20]
    4af2:	mov	r0, r5
    4af4:	bl	3df0 <__mcmp>
    4af8:	cmp	r0, #0
    4afa:	str	r5, [sp, #28]
    4afc:	ble.w	4936 <_dtoa_r+0x746>
    4b00:	ldr	r2, [sp, #8]
    4b02:	ldr	r1, [sp, #32]
    4b04:	movs	r3, #49	; 0x31
    4b06:	adds	r2, #1
    4b08:	str	r2, [sp, #8]
    4b0a:	strb	r3, [r1, #0]
    4b0c:	add.w	fp, r1, #1
    4b10:	b.n	4940 <_dtoa_r+0x750>
    4b12:	ldr	r2, [sp, #8]
    4b14:	adds	r2, #1
    4b16:	str	r2, [sp, #8]
    4b18:	ldr	r2, [sp, #32]
    4b1a:	movs	r3, #49	; 0x31
    4b1c:	strb	r3, [r2, #0]
    4b1e:	b.n	471c <_dtoa_r+0x52c>
    4b20:	movs	r3, #1
    4b22:	str	r3, [sp, #36]	; 0x24
    4b24:	b.n	475e <_dtoa_r+0x56e>
    4b26:	cmp.w	sl, #0
    4b2a:	bne.w	4626 <_dtoa_r+0x436>
    4b2e:	ubfx	r3, fp, #0, #20
    4b32:	cmp	r3, #0
    4b34:	bne.w	4d6e <_dtoa_r+0xb7e>
    4b38:	bic.w	r3, fp, #2147483648	; 0x80000000
    4b3c:	lsrs	r3, r3, #20
    4b3e:	lsls	r3, r3, #20
    4b40:	cmp	r3, #0
    4b42:	beq.w	4dee <_dtoa_r+0xbfe>
    4b46:	ldr	r3, [sp, #24]
    4b48:	adds	r3, #1
    4b4a:	str	r3, [sp, #24]
    4b4c:	movs	r3, #1
    4b4e:	add.w	r9, r9, #1
    4b52:	str	r3, [sp, #28]
    4b54:	ldr	r3, [sp, #44]	; 0x2c
    4b56:	movs	r0, #1
    4b58:	cmp	r3, #0
    4b5a:	beq.w	463c <_dtoa_r+0x44c>
    4b5e:	b.n	462a <_dtoa_r+0x43a>
    4b60:	vmov	s15, r1
    4b64:	vcvt.f64.s32	d6, s15
    4b68:	vmov.f64	d7, #28	; 0x40e00000  7.0
    4b6c:	vfma.f64	d7, d4, d6
    4b70:	vmov	r2, r3, d7
    4b74:	sub.w	r3, r3, #54525952	; 0x3400000
    4b78:	vmov	d6, r2, r3
    4b7c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    4b80:	vsub.f64	d7, d4, d7
    4b84:	vcmpe.f64	d7, d6
    4b88:	vmrs	APSR_nzcv, fpscr
    4b8c:	bgt.w	4d4a <_dtoa_r+0xb5a>
    4b90:	vneg.f64	d6, d6
    4b94:	vcmpe.f64	d7, d6
    4b98:	vmrs	APSR_nzcv, fpscr
    4b9c:	bpl.n	4c2c <_dtoa_r+0xa3c>
    4b9e:	movs	r3, #0
    4ba0:	str	r3, [sp, #20]
    4ba2:	mov	r6, r3
    4ba4:	b.n	4936 <_dtoa_r+0x746>
    4ba6:	ldr	r0, [sp, #32]
    4ba8:	b.w	425e <_dtoa_r+0x6e>
    4bac:	ldr	r3, [sp, #20]
    4bae:	ldr	r1, [sp, #44]	; 0x2c
    4bb0:	str	r2, [sp, #20]
    4bb2:	subs	r3, r2, r3
    4bb4:	add	r1, r3
    4bb6:	movs	r3, #0
    4bb8:	str	r1, [sp, #44]	; 0x2c
    4bba:	str	r3, [sp, #56]	; 0x38
    4bbc:	b.n	4502 <_dtoa_r+0x312>
    4bbe:	vldr	d5, [sp, #56]	; 0x38
    4bc2:	movs	r1, #2
    4bc4:	b.n	47dc <_dtoa_r+0x5ec>
    4bc6:	mov	r5, r7
    4bc8:	movs	r1, #0
    4bca:	str	r1, [r4, #68]	; 0x44
    4bcc:	b.n	478e <_dtoa_r+0x59e>
    4bce:	movs	r5, #1
    4bd0:	str	r5, [sp, #52]	; 0x34
    4bd2:	mov	r7, r5
    4bd4:	mov	r8, r5
    4bd6:	b.n	4bc8 <_dtoa_r+0x9d8>
    4bd8:	cmp	r3, #0
    4bda:	mov	r9, r2
    4bdc:	ble.n	4c02 <_dtoa_r+0xa12>
    4bde:	mov	r1, r5
    4be0:	movs	r2, #1
    4be2:	mov	r0, r4
    4be4:	bl	3d40 <__lshift>
    4be8:	ldr	r1, [sp, #20]
    4bea:	mov	r5, r0
    4bec:	bl	3df0 <__mcmp>
    4bf0:	cmp	r0, #0
    4bf2:	ble.w	4e0e <_dtoa_r+0xc1e>
    4bf6:	cmp.w	r9, #57	; 0x39
    4bfa:	beq.w	4db8 <_dtoa_r+0xbc8>
    4bfe:	add.w	r9, sl, #49	; 0x31
    4c02:	mov	sl, r6
    4c04:	strb.w	r9, [r7]
    4c08:	add.w	fp, r7, #1
    4c0c:	mov	r6, r8
    4c0e:	str	r5, [sp, #28]
    4c10:	b.n	471c <_dtoa_r+0x52c>
    4c12:	bne.n	4c1e <_dtoa_r+0xa2e>
    4c14:	tst.w	r9, #1
    4c18:	beq.n	4c1e <_dtoa_r+0xa2e>
    4c1a:	b.n	46fa <_dtoa_r+0x50a>
    4c1c:	mov	fp, r2
    4c1e:	ldrb.w	r3, [fp, #-1]
    4c22:	cmp	r3, #48	; 0x30
    4c24:	add.w	r2, fp, #4294967295
    4c28:	beq.n	4c1c <_dtoa_r+0xa2c>
    4c2a:	b.n	471c <_dtoa_r+0x52c>
    4c2c:	ldrd	sl, fp, [sp, #56]	; 0x38
    4c30:	b.w	43ea <_dtoa_r+0x1fa>
    4c34:	ldr	r3, [sp, #8]
    4c36:	negs	r3, r3
    4c38:	cmp	r3, #0
    4c3a:	beq.w	4d74 <_dtoa_r+0xb84>
    4c3e:	ldr	r2, [pc, #556]	; (4e6c <_dtoa_r+0xc7c>)
    4c40:	and.w	r1, r3, #15
    4c44:	add.w	r2, r2, r1, lsl #3
    4c48:	vldr	d7, [r2]
    4c4c:	vldr	d6, [sp, #56]	; 0x38
    4c50:	asrs	r3, r3, #4
    4c52:	vmul.f64	d4, d6, d7
    4c56:	beq.w	4e26 <_dtoa_r+0xc36>
    4c5a:	ldr	r2, [pc, #532]	; (4e70 <_dtoa_r+0xc80>)
    4c5c:	movs	r1, #2
    4c5e:	lsls	r0, r3, #31
    4c60:	bpl.n	4c6c <_dtoa_r+0xa7c>
    4c62:	vldr	d7, [r2]
    4c66:	adds	r1, #1
    4c68:	vmul.f64	d4, d4, d7
    4c6c:	asrs	r3, r3, #1
    4c6e:	add.w	r2, r2, #8
    4c72:	bne.n	4c5e <_dtoa_r+0xa6e>
    4c74:	b.n	47fa <_dtoa_r+0x60a>
    4c76:	ldr	r1, [sp, #32]
    4c78:	movs	r2, #48	; 0x30
    4c7a:	strb	r2, [r1, #0]
    4c7c:	ldr	r2, [sp, #8]
    4c7e:	ldrb.w	r0, [fp, #-1]
    4c82:	adds	r2, #1
    4c84:	str	r2, [sp, #8]
    4c86:	b.n	44b8 <_dtoa_r+0x2c8>
    4c88:	ldr	r1, [r6, #4]
    4c8a:	mov	r0, r4
    4c8c:	bl	39e0 <_Balloc>
    4c90:	ldr	r3, [r6, #16]
    4c92:	adds	r2, r3, #2
    4c94:	mov	r8, r0
    4c96:	lsls	r2, r2, #2
    4c98:	add.w	r1, r6, #12
    4c9c:	adds	r0, #12
    4c9e:	bl	2640 <memcpy>
    4ca2:	mov	r1, r8
    4ca4:	movs	r2, #1
    4ca6:	mov	r0, r4
    4ca8:	bl	3d40 <__lshift>
    4cac:	mov	r8, r0
    4cae:	b.n	49ae <_dtoa_r+0x7be>
    4cb0:	cmp	r2, #57	; 0x39
    4cb2:	beq.w	4db8 <_dtoa_r+0xbc8>
    4cb6:	add.w	r9, r2, #1
    4cba:	mov	sl, r6
    4cbc:	strb.w	r9, [r7]
    4cc0:	add.w	fp, r7, #1
    4cc4:	mov	r6, r8
    4cc6:	str	r5, [sp, #28]
    4cc8:	b.n	471c <_dtoa_r+0x52c>
    4cca:	mov	sl, r6
    4ccc:	mov	r9, r2
    4cce:	mov	r6, r8
    4cd0:	b.n	46e2 <_dtoa_r+0x4f2>
    4cd2:	ldr	r0, [pc, #408]	; (4e6c <_dtoa_r+0xc7c>)
    4cd4:	vcvt.s32.f64	s12, d4
    4cd8:	subs	r5, r1, #1
    4cda:	add.w	r0, r0, r5, lsl #3
    4cde:	vmov	d7, r2, r3
    4ce2:	vldr	d3, [r0]
    4ce6:	vmov	r3, s12
    4cea:	vmul.f64	d3, d3, d7
    4cee:	ldr	r0, [sp, #32]
    4cf0:	adds	r3, #48	; 0x30
    4cf2:	cmp	r1, #1
    4cf4:	vcvt.f64.s32	d6, s12
    4cf8:	strb	r3, [r0, #0]
    4cfa:	add.w	fp, r0, #1
    4cfe:	vsub.f64	d7, d4, d6
    4d02:	beq.n	4d2e <_dtoa_r+0xb3e>
    4d04:	vmov.f64	d5, #36	; 0x41200000  10.0
    4d08:	ldr	r3, [sp, #32]
    4d0a:	add	r1, r3
    4d0c:	mov	r3, fp
    4d0e:	vmul.f64	d7, d7, d5
    4d12:	vcvt.s32.f64	s12, d7
    4d16:	vmov	r2, s12
    4d1a:	adds	r2, #48	; 0x30
    4d1c:	strb.w	r2, [r3], #1
    4d20:	cmp	r1, r3
    4d22:	vcvt.f64.s32	d6, s12
    4d26:	vsub.f64	d7, d7, d6
    4d2a:	bne.n	4d0e <_dtoa_r+0xb1e>
    4d2c:	add	fp, r5
    4d2e:	vmov.f64	d6, #96	; 0x3f000000  0.5
    4d32:	vadd.f64	d5, d3, d6
    4d36:	vcmpe.f64	d5, d7
    4d3a:	vmrs	APSR_nzcv, fpscr
    4d3e:	bpl.n	4dc8 <_dtoa_r+0xbd8>
    4d40:	str	r6, [sp, #8]
    4d42:	ldrb.w	r0, [fp, #-1]
    4d46:	b.w	449e <_dtoa_r+0x2ae>
    4d4a:	movs	r3, #0
    4d4c:	str	r3, [sp, #20]
    4d4e:	mov	r6, r3
    4d50:	b.n	4b00 <_dtoa_r+0x910>
    4d52:	subs	r3, r3, r7
    4d54:	str	r3, [sp, #40]	; 0x28
    4d56:	movs	r3, #0
    4d58:	b.w	450e <_dtoa_r+0x31e>
    4d5c:	ldr	r2, [sp, #20]
    4d5e:	ldr	r3, [sp, #64]	; 0x40
    4d60:	str	r2, [sp, #56]	; 0x38
    4d62:	ldr	r2, [sp, #24]
    4d64:	str	r2, [sp, #40]	; 0x28
    4d66:	rsb	r3, r3, #54	; 0x36
    4d6a:	b.w	450e <_dtoa_r+0x31e>
    4d6e:	movs	r3, #0
    4d70:	str	r3, [sp, #28]
    4d72:	b.n	4b54 <_dtoa_r+0x964>
    4d74:	vldr	d4, [sp, #56]	; 0x38
    4d78:	movs	r1, #2
    4d7a:	b.n	47fa <_dtoa_r+0x60a>
    4d7c:	cmp	r7, #0
    4d7e:	beq.w	4b60 <_dtoa_r+0x970>
    4d82:	ldr	r0, [sp, #52]	; 0x34
    4d84:	cmp	r0, #0
    4d86:	ble.w	4c2c <_dtoa_r+0xa3c>
    4d8a:	vmov.f64	d5, #36	; 0x41200000  10.0
    4d8e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    4d92:	adds	r1, #1
    4d94:	vmov	s13, r1
    4d98:	vmul.f64	d4, d4, d5
    4d9c:	ldr	r3, [sp, #8]
    4d9e:	vcvt.f64.s32	d6, s13
    4da2:	subs	r6, r3, #1
    4da4:	vfma.f64	d7, d4, d6
    4da8:	vmov	r2, r3, d7
    4dac:	mov	r1, r0
    4dae:	sub.w	r3, r3, #54525952	; 0x3400000
    4db2:	b.n	4830 <_dtoa_r+0x640>
    4db4:	str	r5, [sp, #28]
    4db6:	b.n	4936 <_dtoa_r+0x746>
    4db8:	movs	r2, #57	; 0x39
    4dba:	mov	sl, r6
    4dbc:	str	r5, [sp, #28]
    4dbe:	mov	r6, r8
    4dc0:	strb	r2, [r7, #0]
    4dc2:	add.w	fp, r7, #1
    4dc6:	b.n	46fe <_dtoa_r+0x50e>
    4dc8:	vsub.f64	d6, d6, d3
    4dcc:	vcmpe.f64	d6, d7
    4dd0:	vmrs	APSR_nzcv, fpscr
    4dd4:	bgt.n	4dda <_dtoa_r+0xbea>
    4dd6:	b.n	4c2c <_dtoa_r+0xa3c>
    4dd8:	mov	fp, r2
    4dda:	ldrb.w	r3, [fp, #-1]
    4dde:	cmp	r3, #48	; 0x30
    4de0:	add.w	r2, fp, #4294967295
    4de4:	beq.n	4dd8 <_dtoa_r+0xbe8>
    4de6:	b.n	48de <_dtoa_r+0x6ee>
    4de8:	str	r6, [sp, #8]
    4dea:	b.w	449e <_dtoa_r+0x2ae>
    4dee:	str	r3, [sp, #28]
    4df0:	b.n	4b54 <_dtoa_r+0x964>
    4df2:	cmp.w	sl, #0
    4df6:	bne.w	4972 <_dtoa_r+0x782>
    4dfa:	b.n	4b2e <_dtoa_r+0x93e>
    4dfc:	cmp	r2, #57	; 0x39
    4dfe:	mov	fp, r9
    4e00:	mov	r9, r2
    4e02:	beq.n	4db8 <_dtoa_r+0xbc8>
    4e04:	cmp.w	fp, #0
    4e08:	bgt.w	4bfe <_dtoa_r+0xa0e>
    4e0c:	b.n	4c02 <_dtoa_r+0xa12>
    4e0e:	bne.w	4c02 <_dtoa_r+0xa12>
    4e12:	tst.w	r9, #1
    4e16:	beq.w	4c02 <_dtoa_r+0xa12>
    4e1a:	b.n	4bf6 <_dtoa_r+0xa06>
    4e1c:	ldr	r3, [sp, #4]
    4e1e:	cmp	r3, #2
    4e20:	bgt.n	4e34 <_dtoa_r+0xc44>
    4e22:	ldr	r7, [sp, #52]	; 0x34
    4e24:	b.n	469c <_dtoa_r+0x4ac>
    4e26:	movs	r1, #2
    4e28:	b.n	47fa <_dtoa_r+0x60a>
    4e2a:	ldr	r3, [sp, #4]
    4e2c:	cmp	r3, #2
    4e2e:	bgt.n	4e34 <_dtoa_r+0xc44>
    4e30:	ldr	r7, [sp, #52]	; 0x34
    4e32:	b.n	4992 <_dtoa_r+0x7a2>
    4e34:	ldr	r7, [sp, #52]	; 0x34
    4e36:	b.n	4adc <_dtoa_r+0x8ec>
    4e38:	movs	r3, #1
    4e3a:	str	r3, [sp, #56]	; 0x38
    4e3c:	b.w	4382 <_dtoa_r+0x192>
    4e40:	beq.w	4662 <_dtoa_r+0x472>
    4e44:	rsb	r0, r0, #60	; 0x3c
    4e48:	b.n	4654 <_dtoa_r+0x464>
    4e4a:	movs	r5, #0
    4e4c:	str	r5, [r4, #68]	; 0x44
    4e4e:	mov	r1, r5
    4e50:	mov	r0, r4
    4e52:	bl	39e0 <_Balloc>
    4e56:	mov.w	r7, #4294967295
    4e5a:	movs	r3, #1
    4e5c:	str	r0, [sp, #32]
    4e5e:	mov	r8, r5
    4e60:	str	r0, [r4, #64]	; 0x40
    4e62:	str	r7, [sp, #52]	; 0x34
    4e64:	str	r3, [sp, #36]	; 0x24
    4e66:	b.w	43ea <_dtoa_r+0x1fa>
    4e6a:	nop
    4e6c:	.word	0x20000580
    4e70:	.word	0x20000648
    4e74:	.word	0x00000000

00004e78 <_svfprintf_r>:
    4e78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e7c:	vpush	{d8-d10}
    4e80:	sub	sp, #228	; 0xe4
    4e82:	mov	r4, r1
    4e84:	str	r1, [sp, #12]
    4e86:	mov	sl, r2
    4e88:	str	r3, [sp, #36]	; 0x24
    4e8a:	str	r0, [sp, #20]
    4e8c:	bl	3918 <_localeconv_r>
    4e90:	ldr	r3, [r0, #0]
    4e92:	str	r3, [sp, #64]	; 0x40
    4e94:	mov	r0, r3
    4e96:	bl	3480 <strlen>
    4e9a:	ldrh	r3, [r4, #12]
    4e9c:	str	r0, [sp, #60]	; 0x3c
    4e9e:	lsls	r1, r3, #24
    4ea0:	bpl.n	4eaa <_svfprintf_r+0x32>
    4ea2:	ldr	r3, [r4, #16]
    4ea4:	cmp	r3, #0
    4ea6:	beq.w	5fa4 <_svfprintf_r+0x112c>
    4eaa:	movs	r3, #0
    4eac:	vldr	d8, [pc, #656]	; 5140 <_svfprintf_r+0x2c8>
    4eb0:	vldr	d9, [pc, #660]	; 5148 <_svfprintf_r+0x2d0>
    4eb4:	str	r3, [sp, #52]	; 0x34
    4eb6:	str	r3, [sp, #116]	; 0x74
    4eb8:	str	r3, [sp, #112]	; 0x70
    4eba:	str	r3, [sp, #68]	; 0x44
    4ebc:	str	r3, [sp, #24]
    4ebe:	add	r3, sp, #160	; 0xa0
    4ec0:	str	r3, [sp, #108]	; 0x6c
    4ec2:	mov	r9, r3
    4ec4:	ldrb.w	r3, [sl]
    4ec8:	mov	r4, sl
    4eca:	cbz	r3, 4f08 <_svfprintf_r+0x90>
    4ecc:	cmp	r3, #37	; 0x25
    4ece:	bne.n	4ed6 <_svfprintf_r+0x5e>
    4ed0:	b.n	4f08 <_svfprintf_r+0x90>
    4ed2:	cmp	r3, #37	; 0x25
    4ed4:	beq.n	4ede <_svfprintf_r+0x66>
    4ed6:	ldrb.w	r3, [r4, #1]!
    4eda:	cmp	r3, #0
    4edc:	bne.n	4ed2 <_svfprintf_r+0x5a>
    4ede:	rsb	r5, sl, r4
    4ee2:	cbz	r5, 4f08 <_svfprintf_r+0x90>
    4ee4:	ldr	r3, [sp, #112]	; 0x70
    4ee6:	ldr	r2, [sp, #116]	; 0x74
    4ee8:	str.w	sl, [r9]
    4eec:	adds	r3, #1
    4eee:	add	r2, r5
    4ef0:	cmp	r3, #7
    4ef2:	str.w	r5, [r9, #4]
    4ef6:	str	r2, [sp, #116]	; 0x74
    4ef8:	str	r3, [sp, #112]	; 0x70
    4efa:	bgt.w	5044 <_svfprintf_r+0x1cc>
    4efe:	add.w	r9, r9, #8
    4f02:	ldr	r3, [sp, #24]
    4f04:	add	r3, r5
    4f06:	str	r3, [sp, #24]
    4f08:	ldrb	r3, [r4, #0]
    4f0a:	cmp	r3, #0
    4f0c:	beq.w	5056 <_svfprintf_r+0x1de>
    4f10:	movs	r3, #0
    4f12:	mov	r2, r3
    4f14:	strb.w	r3, [sp, #79]	; 0x4f
    4f18:	mov	r1, r3
    4f1a:	str	r3, [sp, #28]
    4f1c:	mov	fp, r3
    4f1e:	mov.w	r8, #4294967295
    4f22:	ldrb	r3, [r4, #1]
    4f24:	add.w	sl, r4, #1
    4f28:	mov	r5, r8
    4f2a:	add.w	sl, sl, #1
    4f2e:	sub.w	r0, r3, #32
    4f32:	cmp	r0, #88	; 0x58
    4f34:	bhi.w	5728 <_svfprintf_r+0x8b0>
    4f38:	tbh	[pc, r0, lsl #1]
    4f3c:	.word	0x03f60363
    4f40:	.word	0x036b03f6
    4f44:	.word	0x03f603f6
    4f48:	.word	0x03f603f6
    4f4c:	.word	0x03f603f6
    4f50:	.word	0x037e0370
    4f54:	.word	0x005d03f6
    4f58:	.word	0x03f600df
    4f5c:	.word	0x010c00fb
    4f60:	.word	0x010c010c
    4f64:	.word	0x010c010c
    4f68:	.word	0x010c010c
    4f6c:	.word	0x010c010c
    4f70:	.word	0x03f603f6
    4f74:	.word	0x03f603f6
    4f78:	.word	0x03f603f6
    4f7c:	.word	0x03f603f6
    4f80:	.word	0x03f603f6
    4f84:	.word	0x015e011c
    4f88:	.word	0x015e03f6
    4f8c:	.word	0x03f603f6
    4f90:	.word	0x03f603f6
    4f94:	.word	0x03f602a1
    4f98:	.word	0x02a603f6
    4f9c:	.word	0x03f603f6
    4fa0:	.word	0x03f603f6
    4fa4:	.word	0x02d803f6
    4fa8:	.word	0x03f603f6
    4fac:	.word	0x03f60305
    4fb0:	.word	0x03f603f6
    4fb4:	.word	0x03f603f6
    4fb8:	.word	0x03f603f6
    4fbc:	.word	0x03f603f6
    4fc0:	.word	0x034303f6
    4fc4:	.word	0x015e0356
    4fc8:	.word	0x015e015e
    4fcc:	.word	0x0356035e
    4fd0:	.word	0x03f603f6
    4fd4:	.word	0x03f603a4
    4fd8:	.word	0x00a203b1
    4fdc:	.word	0x03c30062
    4fe0:	.word	0x03c803f6
    4fe4:	.word	0x038303f6
    4fe8:	.word	0x03f603f6
    4fec:	.short	0x038b
    4fee:	ldr	r0, [sp, #28]
    4ff0:	str	r3, [sp, #36]	; 0x24
    4ff2:	negs	r0, r0
    4ff4:	str	r0, [sp, #28]
    4ff6:	orr.w	fp, fp, #4
    4ffa:	ldrb.w	r3, [sl]
    4ffe:	b.n	4f2a <_svfprintf_r+0xb2>
    5000:	mov	r8, r5
    5002:	ldr	r0, [sp, #36]	; 0x24
    5004:	movs	r1, #0
    5006:	movs	r3, #48	; 0x30
    5008:	movs	r2, #120	; 0x78
    500a:	cmp	r8, r1
    500c:	strb.w	r3, [sp, #80]	; 0x50
    5010:	ldr	r4, [r0, #0]
    5012:	strb.w	r2, [sp, #81]	; 0x51
    5016:	add.w	r7, r0, #4
    501a:	mov.w	r5, #0
    501e:	strb.w	r1, [sp, #79]	; 0x4f
    5022:	orr.w	r3, fp, #2
    5026:	blt.w	5762 <_svfprintf_r+0x8ea>
    502a:	bic.w	r3, fp, #128	; 0x80
    502e:	orr.w	fp, r3, #2
    5032:	orrs.w	r3, r4, r5
    5036:	str	r7, [sp, #36]	; 0x24
    5038:	beq.w	570e <_svfprintf_r+0x896>
    503c:	mov	r7, r1
    503e:	str	r2, [sp, #48]	; 0x30
    5040:	ldr	r0, [pc, #268]	; (5150 <_svfprintf_r+0x2d8>)
    5042:	b.n	55a2 <_svfprintf_r+0x72a>
    5044:	add	r2, sp, #108	; 0x6c
    5046:	ldr	r1, [sp, #12]
    5048:	ldr	r0, [sp, #20]
    504a:	bl	63e8 <__ssprint_r>
    504e:	cbnz	r0, 5064 <_svfprintf_r+0x1ec>
    5050:	add.w	r9, sp, #160	; 0xa0
    5054:	b.n	4f02 <_svfprintf_r+0x8a>
    5056:	ldr	r3, [sp, #116]	; 0x74
    5058:	cbz	r3, 5064 <_svfprintf_r+0x1ec>
    505a:	ldr	r0, [sp, #20]
    505c:	ldr	r1, [sp, #12]
    505e:	add	r2, sp, #108	; 0x6c
    5060:	bl	63e8 <__ssprint_r>
    5064:	ldr	r3, [sp, #12]
    5066:	ldrh	r3, [r3, #12]
    5068:	tst.w	r3, #64	; 0x40
    506c:	ldr	r3, [sp, #24]
    506e:	it	ne
    5070:	movne.w	r3, #4294967295
    5074:	mov	r0, r3
    5076:	add	sp, #228	; 0xe4
    5078:	vpop	{d8-d10}
    507c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5080:	str	r3, [sp, #48]	; 0x30
    5082:	mov	r8, r5
    5084:	cmp	r2, #0
    5086:	bne.w	63be <_svfprintf_r+0x1546>
    508a:	ands.w	r3, fp, #32
    508e:	beq.w	549e <_svfprintf_r+0x626>
    5092:	ldr	r7, [sp, #36]	; 0x24
    5094:	adds	r7, #7
    5096:	bic.w	r3, r7, #7
    509a:	movs	r7, #0
    509c:	add.w	r2, r3, #8
    50a0:	cmp	r8, r7
    50a2:	str	r2, [sp, #36]	; 0x24
    50a4:	ldrd	r4, r5, [r3]
    50a8:	strb.w	r7, [sp, #79]	; 0x4f
    50ac:	blt.w	5d6c <_svfprintf_r+0xef4>
    50b0:	orrs.w	r3, r4, r5
    50b4:	bic.w	fp, fp, #128	; 0x80
    50b8:	beq.w	5752 <_svfprintf_r+0x8da>
    50bc:	add	r6, sp, #160	; 0xa0
    50be:	lsrs	r2, r4, #3
    50c0:	orr.w	r2, r2, r5, lsl #29
    50c4:	lsrs	r1, r5, #3
    50c6:	and.w	r3, r4, #7
    50ca:	mov	r5, r1
    50cc:	mov	r4, r2
    50ce:	adds	r3, #48	; 0x30
    50d0:	orrs.w	r2, r4, r5
    50d4:	strb.w	r3, [r6, #-1]!
    50d8:	bne.n	50be <_svfprintf_r+0x246>
    50da:	tst.w	fp, #1
    50de:	beq.w	5530 <_svfprintf_r+0x6b8>
    50e2:	cmp	r3, #48	; 0x30
    50e4:	beq.w	5530 <_svfprintf_r+0x6b8>
    50e8:	movs	r2, #48	; 0x30
    50ea:	subs	r3, r6, #1
    50ec:	strb.w	r2, [r6, #-1]
    50f0:	add	r2, sp, #160	; 0xa0
    50f2:	subs	r2, r2, r3
    50f4:	str	r2, [sp, #32]
    50f6:	mov	r6, r3
    50f8:	b.n	5536 <_svfprintf_r+0x6be>
    50fa:	ldrb.w	r3, [sl]
    50fe:	cmp	r3, #42	; 0x2a
    5100:	add.w	r4, sl, #1
    5104:	beq.w	6366 <_svfprintf_r+0x14ee>
    5108:	sub.w	r0, r3, #48	; 0x30
    510c:	cmp	r0, #9
    510e:	it	ls
    5110:	movls	r5, #0
    5112:	bhi.w	62c0 <_svfprintf_r+0x1448>
    5116:	ldrb.w	r3, [r4], #1
    511a:	add.w	r5, r5, r5, lsl #2
    511e:	add.w	r5, r0, r5, lsl #1
    5122:	sub.w	r0, r3, #48	; 0x30
    5126:	cmp	r0, #9
    5128:	bls.n	5116 <_svfprintf_r+0x29e>
    512a:	orr.w	r5, r5, r5, asr #31
    512e:	mov	sl, r4
    5130:	b.n	4f2e <_svfprintf_r+0xb6>
    5132:	orr.w	fp, fp, #128	; 0x80
    5136:	ldrb.w	r3, [sl]
    513a:	b.n	4f2a <_svfprintf_r+0xb2>
    513c:	nop.w
	...
    5148:	.word	0xffffffff
    514c:	.word	0x7fefffff
    5150:	.word	0x200006c4
    5154:	sub.w	r0, r3, #48	; 0x30
    5158:	movs	r3, #0
    515a:	mov	r4, r3
    515c:	ldrb.w	r3, [sl], #1
    5160:	add.w	r4, r4, r4, lsl #2
    5164:	add.w	r4, r0, r4, lsl #1
    5168:	sub.w	r0, r3, #48	; 0x30
    516c:	cmp	r0, #9
    516e:	bls.n	515c <_svfprintf_r+0x2e4>
    5170:	str	r4, [sp, #28]
    5172:	b.n	4f2e <_svfprintf_r+0xb6>
    5174:	str	r3, [sp, #48]	; 0x30
    5176:	mov	r8, r5
    5178:	cmp	r2, #0
    517a:	bne.w	63d6 <_svfprintf_r+0x155e>
    517e:	orr.w	fp, fp, #16
    5182:	tst.w	fp, #32
    5186:	beq.w	5b90 <_svfprintf_r+0xd18>
    518a:	ldr	r7, [sp, #36]	; 0x24
    518c:	adds	r7, #7
    518e:	bic.w	r7, r7, #7
    5192:	ldrd	r2, r3, [r7]
    5196:	add.w	r1, r7, #8
    519a:	str	r1, [sp, #36]	; 0x24
    519c:	mov	r4, r2
    519e:	mov	r5, r3
    51a0:	cmp	r2, #0
    51a2:	sbcs.w	r3, r3, #0
    51a6:	blt.w	5c18 <_svfprintf_r+0xda0>
    51aa:	cmp.w	r8, #0
    51ae:	ldrb.w	r7, [sp, #79]	; 0x4f
    51b2:	blt.w	5520 <_svfprintf_r+0x6a8>
    51b6:	orrs.w	r3, r4, r5
    51ba:	bic.w	fp, fp, #128	; 0x80
    51be:	beq.w	59ae <_svfprintf_r+0xb36>
    51c2:	cmp	r5, #0
    51c4:	it	eq
    51c6:	cmpeq	r4, #10
    51c8:	bcc.w	5528 <_svfprintf_r+0x6b0>
    51cc:	add	r6, sp, #160	; 0xa0
    51ce:	mov	r0, r4
    51d0:	mov	r1, r5
    51d2:	movs	r2, #10
    51d4:	movs	r3, #0
    51d6:	bl	64e8 <__aeabi_uldivmod>
    51da:	adds	r2, #48	; 0x30
    51dc:	strb.w	r2, [r6, #-1]!
    51e0:	mov	r0, r4
    51e2:	mov	r1, r5
    51e4:	movs	r3, #0
    51e6:	movs	r2, #10
    51e8:	bl	64e8 <__aeabi_uldivmod>
    51ec:	mov	r4, r0
    51ee:	mov	r5, r1
    51f0:	orrs.w	r3, r4, r5
    51f4:	bne.n	51ce <_svfprintf_r+0x356>
    51f6:	b.n	5530 <_svfprintf_r+0x6b8>
    51f8:	str	r3, [sp, #48]	; 0x30
    51fa:	mov	r8, r5
    51fc:	cmp	r2, #0
    51fe:	bne.w	63ce <_svfprintf_r+0x1556>
    5202:	ldr	r7, [sp, #36]	; 0x24
    5204:	tst.w	fp, #8
    5208:	add.w	r7, r7, #7
    520c:	beq.w	5e90 <_svfprintf_r+0x1018>
    5210:	bic.w	r3, r7, #7
    5214:	vldr	d8, [r3]
    5218:	add.w	r2, r3, #8
    521c:	str	r2, [sp, #36]	; 0x24
    521e:	vabs.f64	d7, d8
    5222:	vcmp.f64	d7, d9
    5226:	vmrs	APSR_nzcv, fpscr
    522a:	ble.w	5da6 <_svfprintf_r+0xf2e>
    522e:	vcmpe.f64	d8, #0.0
    5232:	vmrs	APSR_nzcv, fpscr
    5236:	bmi.w	61ce <_svfprintf_r+0x1356>
    523a:	ldrb.w	r7, [sp, #79]	; 0x4f
    523e:	ldr	r6, [pc, #668]	; (54dc <_svfprintf_r+0x664>)
    5240:	ldr	r3, [pc, #668]	; (54e0 <_svfprintf_r+0x668>)
    5242:	ldr	r1, [sp, #48]	; 0x30
    5244:	movs	r2, #3
    5246:	mov.w	r8, #0
    524a:	str	r2, [sp, #16]
    524c:	bic.w	fp, fp, #128	; 0x80
    5250:	cmp	r1, #71	; 0x47
    5252:	it	le
    5254:	movle	r6, r3
    5256:	str	r2, [sp, #32]
    5258:	str.w	r8, [sp, #56]	; 0x38
    525c:	cbz	r7, 5264 <_svfprintf_r+0x3ec>
    525e:	ldr	r3, [sp, #16]
    5260:	adds	r3, #1
    5262:	str	r3, [sp, #16]
    5264:	ands.w	r3, fp, #2
    5268:	str	r3, [sp, #40]	; 0x28
    526a:	beq.n	5272 <_svfprintf_r+0x3fa>
    526c:	ldr	r3, [sp, #16]
    526e:	adds	r3, #2
    5270:	str	r3, [sp, #16]
    5272:	ands.w	r3, fp, #132	; 0x84
    5276:	str	r3, [sp, #44]	; 0x2c
    5278:	bne.w	577c <_svfprintf_r+0x904>
    527c:	ldr	r3, [sp, #28]
    527e:	ldr	r2, [sp, #16]
    5280:	subs	r4, r3, r2
    5282:	cmp	r4, #0
    5284:	ble.w	577c <_svfprintf_r+0x904>
    5288:	cmp	r4, #16
    528a:	ldr	r1, [sp, #116]	; 0x74
    528c:	ldr	r2, [sp, #112]	; 0x70
    528e:	ldr	r7, [pc, #596]	; (54e4 <_svfprintf_r+0x66c>)
    5290:	ble.n	52da <_svfprintf_r+0x462>
    5292:	mov	r0, r9
    5294:	movs	r5, #16
    5296:	mov	r9, r8
    5298:	mov	r8, r6
    529a:	ldr	r6, [sp, #20]
    529c:	b.n	52a8 <_svfprintf_r+0x430>
    529e:	subs	r4, #16
    52a0:	cmp	r4, #16
    52a2:	add.w	r0, r0, #8
    52a6:	ble.n	52d4 <_svfprintf_r+0x45c>
    52a8:	adds	r2, #1
    52aa:	adds	r1, #16
    52ac:	cmp	r2, #7
    52ae:	str	r1, [sp, #116]	; 0x74
    52b0:	str	r2, [sp, #112]	; 0x70
    52b2:	str	r7, [r0, #0]
    52b4:	str	r5, [r0, #4]
    52b6:	ble.n	529e <_svfprintf_r+0x426>
    52b8:	add	r2, sp, #108	; 0x6c
    52ba:	ldr	r1, [sp, #12]
    52bc:	mov	r0, r6
    52be:	bl	63e8 <__ssprint_r>
    52c2:	cmp	r0, #0
    52c4:	bne.w	5064 <_svfprintf_r+0x1ec>
    52c8:	subs	r4, #16
    52ca:	cmp	r4, #16
    52cc:	ldr	r1, [sp, #116]	; 0x74
    52ce:	ldr	r2, [sp, #112]	; 0x70
    52d0:	add	r0, sp, #160	; 0xa0
    52d2:	bgt.n	52a8 <_svfprintf_r+0x430>
    52d4:	mov	r6, r8
    52d6:	mov	r8, r9
    52d8:	mov	r9, r0
    52da:	adds	r2, #1
    52dc:	adds	r3, r4, r1
    52de:	cmp	r2, #7
    52e0:	str	r3, [sp, #116]	; 0x74
    52e2:	str	r2, [sp, #112]	; 0x70
    52e4:	str.w	r7, [r9]
    52e8:	str.w	r4, [r9, #4]
    52ec:	bgt.w	5ab4 <_svfprintf_r+0xc3c>
    52f0:	ldrb.w	r7, [sp, #79]	; 0x4f
    52f4:	add.w	r9, r9, #8
    52f8:	cbz	r7, 5318 <_svfprintf_r+0x4a0>
    52fa:	ldr	r2, [sp, #112]	; 0x70
    52fc:	adds	r2, #1
    52fe:	adds	r3, #1
    5300:	add.w	r0, sp, #79	; 0x4f
    5304:	movs	r1, #1
    5306:	cmp	r2, #7
    5308:	str	r3, [sp, #116]	; 0x74
    530a:	str	r2, [sp, #112]	; 0x70
    530c:	stmia.w	r9, {r0, r1}
    5310:	bgt.w	59d2 <_svfprintf_r+0xb5a>
    5314:	add.w	r9, r9, #8
    5318:	ldr	r2, [sp, #40]	; 0x28
    531a:	cbz	r2, 5338 <_svfprintf_r+0x4c0>
    531c:	ldr	r2, [sp, #112]	; 0x70
    531e:	adds	r2, #1
    5320:	adds	r3, #2
    5322:	add	r0, sp, #80	; 0x50
    5324:	movs	r1, #2
    5326:	cmp	r2, #7
    5328:	str	r3, [sp, #116]	; 0x74
    532a:	str	r2, [sp, #112]	; 0x70
    532c:	stmia.w	r9, {r0, r1}
    5330:	bgt.w	59ea <_svfprintf_r+0xb72>
    5334:	add.w	r9, r9, #8
    5338:	ldr	r2, [sp, #44]	; 0x2c
    533a:	cmp	r2, #128	; 0x80
    533c:	beq.w	583c <_svfprintf_r+0x9c4>
    5340:	ldr	r2, [sp, #32]
    5342:	rsb	r4, r2, r8
    5346:	cmp	r4, #0
    5348:	ble.n	53b4 <_svfprintf_r+0x53c>
    534a:	cmp	r4, #16
    534c:	ldr	r2, [sp, #112]	; 0x70
    534e:	ldr	r7, [pc, #408]	; (54e8 <_svfprintf_r+0x670>)
    5350:	ble.n	539a <_svfprintf_r+0x522>
    5352:	mov	r1, r9
    5354:	mov.w	r8, #16
    5358:	mov	r9, r6
    535a:	ldr	r5, [sp, #20]
    535c:	ldr	r6, [sp, #12]
    535e:	b.n	536a <_svfprintf_r+0x4f2>
    5360:	subs	r4, #16
    5362:	cmp	r4, #16
    5364:	add.w	r1, r1, #8
    5368:	ble.n	5396 <_svfprintf_r+0x51e>
    536a:	adds	r2, #1
    536c:	adds	r3, #16
    536e:	cmp	r2, #7
    5370:	str	r3, [sp, #116]	; 0x74
    5372:	str	r2, [sp, #112]	; 0x70
    5374:	stmia.w	r1, {r7, r8}
    5378:	ble.n	5360 <_svfprintf_r+0x4e8>
    537a:	add	r2, sp, #108	; 0x6c
    537c:	mov	r1, r6
    537e:	mov	r0, r5
    5380:	bl	63e8 <__ssprint_r>
    5384:	cmp	r0, #0
    5386:	bne.w	5064 <_svfprintf_r+0x1ec>
    538a:	subs	r4, #16
    538c:	cmp	r4, #16
    538e:	ldr	r3, [sp, #116]	; 0x74
    5390:	ldr	r2, [sp, #112]	; 0x70
    5392:	add	r1, sp, #160	; 0xa0
    5394:	bgt.n	536a <_svfprintf_r+0x4f2>
    5396:	mov	r6, r9
    5398:	mov	r9, r1
    539a:	adds	r2, #1
    539c:	add	r3, r4
    539e:	cmp	r2, #7
    53a0:	str	r3, [sp, #116]	; 0x74
    53a2:	str	r2, [sp, #112]	; 0x70
    53a4:	str.w	r7, [r9]
    53a8:	str.w	r4, [r9, #4]
    53ac:	bgt.w	59ba <_svfprintf_r+0xb42>
    53b0:	add.w	r9, r9, #8
    53b4:	tst.w	fp, #256	; 0x100
    53b8:	bne.w	5780 <_svfprintf_r+0x908>
    53bc:	ldr	r2, [sp, #112]	; 0x70
    53be:	ldr	r0, [sp, #32]
    53c0:	str.w	r6, [r9]
    53c4:	adds	r2, #1
    53c6:	add	r3, r0
    53c8:	cmp	r2, #7
    53ca:	str	r3, [sp, #116]	; 0x74
    53cc:	str.w	r0, [r9, #4]
    53d0:	str	r2, [sp, #112]	; 0x70
    53d2:	bgt.w	595a <_svfprintf_r+0xae2>
    53d6:	add.w	r9, r9, #8
    53da:	tst.w	fp, #4
    53de:	beq.n	545e <_svfprintf_r+0x5e6>
    53e0:	ldr	r2, [sp, #28]
    53e2:	ldr	r1, [sp, #16]
    53e4:	subs	r4, r2, r1
    53e6:	cmp	r4, #0
    53e8:	ble.n	545e <_svfprintf_r+0x5e6>
    53ea:	cmp	r4, #16
    53ec:	ldr	r2, [sp, #112]	; 0x70
    53ee:	ldr	r7, [pc, #244]	; (54e4 <_svfprintf_r+0x66c>)
    53f0:	ble.n	5438 <_svfprintf_r+0x5c0>
    53f2:	movs	r5, #16
    53f4:	ldr	r6, [sp, #20]
    53f6:	ldr.w	r8, [sp, #12]
    53fa:	b.n	5406 <_svfprintf_r+0x58e>
    53fc:	subs	r4, #16
    53fe:	cmp	r4, #16
    5400:	add.w	r9, r9, #8
    5404:	ble.n	5438 <_svfprintf_r+0x5c0>
    5406:	adds	r2, #1
    5408:	adds	r3, #16
    540a:	cmp	r2, #7
    540c:	str	r3, [sp, #116]	; 0x74
    540e:	str	r2, [sp, #112]	; 0x70
    5410:	str.w	r7, [r9]
    5414:	str.w	r5, [r9, #4]
    5418:	ble.n	53fc <_svfprintf_r+0x584>
    541a:	add	r2, sp, #108	; 0x6c
    541c:	mov	r1, r8
    541e:	mov	r0, r6
    5420:	bl	63e8 <__ssprint_r>
    5424:	cmp	r0, #0
    5426:	bne.w	5064 <_svfprintf_r+0x1ec>
    542a:	subs	r4, #16
    542c:	cmp	r4, #16
    542e:	ldr	r3, [sp, #116]	; 0x74
    5430:	ldr	r2, [sp, #112]	; 0x70
    5432:	add.w	r9, sp, #160	; 0xa0
    5436:	bgt.n	5406 <_svfprintf_r+0x58e>
    5438:	adds	r2, #1
    543a:	add	r3, r4
    543c:	cmp	r2, #7
    543e:	str	r3, [sp, #116]	; 0x74
    5440:	str	r2, [sp, #112]	; 0x70
    5442:	str.w	r7, [r9]
    5446:	str.w	r4, [r9, #4]
    544a:	ble.n	545e <_svfprintf_r+0x5e6>
    544c:	add	r2, sp, #108	; 0x6c
    544e:	ldr	r1, [sp, #12]
    5450:	ldr	r0, [sp, #20]
    5452:	bl	63e8 <__ssprint_r>
    5456:	cmp	r0, #0
    5458:	bne.w	5064 <_svfprintf_r+0x1ec>
    545c:	ldr	r3, [sp, #116]	; 0x74
    545e:	ldr	r2, [sp, #24]
    5460:	ldr	r1, [sp, #28]
    5462:	ldr	r0, [sp, #16]
    5464:	cmp	r1, r0
    5466:	ite	ge
    5468:	addge	r2, r2, r1
    546a:	addlt	r2, r2, r0
    546c:	str	r2, [sp, #24]
    546e:	cmp	r3, #0
    5470:	bne.w	5972 <_svfprintf_r+0xafa>
    5474:	movs	r3, #0
    5476:	str	r3, [sp, #112]	; 0x70
    5478:	add.w	r9, sp, #160	; 0xa0
    547c:	b.n	4ec4 <_svfprintf_r+0x4c>
    547e:	orr.w	fp, fp, #8
    5482:	ldrb.w	r3, [sl]
    5486:	b.n	4f2a <_svfprintf_r+0xb2>
    5488:	str	r3, [sp, #48]	; 0x30
    548a:	mov	r8, r5
    548c:	cmp	r2, #0
    548e:	bne.w	63c6 <_svfprintf_r+0x154e>
    5492:	orr.w	fp, fp, #16
    5496:	ands.w	r3, fp, #32
    549a:	bne.w	5092 <_svfprintf_r+0x21a>
    549e:	ands.w	r2, fp, #16
    54a2:	bne.w	5bc8 <_svfprintf_r+0xd50>
    54a6:	ands.w	r3, fp, #64	; 0x40
    54aa:	beq.w	5bc8 <_svfprintf_r+0xd50>
    54ae:	ldr	r1, [sp, #36]	; 0x24
    54b0:	strb.w	r2, [sp, #79]	; 0x4f
    54b4:	mov	r3, r1
    54b6:	cmp.w	r8, #0
    54ba:	add.w	r3, r3, #4
    54be:	ldrh	r4, [r1, #0]
    54c0:	mov.w	r5, #0
    54c4:	blt.w	601e <_svfprintf_r+0x11a6>
    54c8:	orrs.w	r1, r4, r5
    54cc:	bic.w	fp, fp, #128	; 0x80
    54d0:	str	r3, [sp, #36]	; 0x24
    54d2:	beq.w	5752 <_svfprintf_r+0x8da>
    54d6:	mov	r7, r2
    54d8:	b.n	50bc <_svfprintf_r+0x244>
    54da:	nop
    54dc:	.word	0x200006a4
    54e0:	.word	0x200006a0
    54e4:	.word	0x200006e0
    54e8:	.word	0x20000690
    54ec:	str	r3, [sp, #48]	; 0x30
    54ee:	mov	r8, r5
    54f0:	cmp	r2, #0
    54f2:	bne.w	63a8 <_svfprintf_r+0x1530>
    54f6:	orr.w	fp, fp, #16
    54fa:	ands.w	r3, fp, #32
    54fe:	beq.w	5ad0 <_svfprintf_r+0xc58>
    5502:	ldr	r7, [sp, #36]	; 0x24
    5504:	adds	r7, #7
    5506:	bic.w	r3, r7, #7
    550a:	movs	r7, #0
    550c:	add.w	r2, r3, #8
    5510:	cmp	r8, r7
    5512:	str	r2, [sp, #36]	; 0x24
    5514:	ldrd	r4, r5, [r3]
    5518:	strb.w	r7, [sp, #79]	; 0x4f
    551c:	bge.w	51b6 <_svfprintf_r+0x33e>
    5520:	orrs.w	r3, r4, r5
    5524:	bne.w	51c2 <_svfprintf_r+0x34a>
    5528:	add	r6, sp, #224	; 0xe0
    552a:	adds	r4, #48	; 0x30
    552c:	strb.w	r4, [r6, #-65]!
    5530:	add	r3, sp, #160	; 0xa0
    5532:	subs	r3, r3, r6
    5534:	str	r3, [sp, #32]
    5536:	ldr	r3, [sp, #32]
    5538:	cmp	r3, r8
    553a:	it	lt
    553c:	movlt	r3, r8
    553e:	str	r3, [sp, #16]
    5540:	movs	r3, #0
    5542:	str	r3, [sp, #56]	; 0x38
    5544:	b.n	525c <_svfprintf_r+0x3e4>
    5546:	str	r3, [sp, #48]	; 0x30
    5548:	mov	r8, r5
    554a:	cmp	r2, #0
    554c:	bne.w	63a0 <_svfprintf_r+0x1528>
    5550:	tst.w	fp, #32
    5554:	ldr	r0, [pc, #776]	; (5860 <_svfprintf_r+0x9e8>)
    5556:	beq.w	5666 <_svfprintf_r+0x7ee>
    555a:	ldr	r7, [sp, #36]	; 0x24
    555c:	adds	r7, #7
    555e:	bic.w	r3, r7, #7
    5562:	ldrd	r4, r5, [r3]
    5566:	add.w	r2, r3, #8
    556a:	str	r2, [sp, #36]	; 0x24
    556c:	ands.w	r7, fp, #1
    5570:	beq.w	5a02 <_svfprintf_r+0xb8a>
    5574:	orrs.w	r3, r4, r5
    5578:	beq.w	5ec2 <_svfprintf_r+0x104a>
    557c:	movs	r7, #0
    557e:	movs	r3, #48	; 0x30
    5580:	ldrb.w	r2, [sp, #48]	; 0x30
    5584:	strb.w	r3, [sp, #80]	; 0x50
    5588:	cmp	r8, r7
    558a:	strb.w	r2, [sp, #81]	; 0x51
    558e:	strb.w	r7, [sp, #79]	; 0x4f
    5592:	orr.w	r3, fp, #2
    5596:	blt.w	61c8 <_svfprintf_r+0x1350>
    559a:	bic.w	r3, fp, #128	; 0x80
    559e:	orr.w	fp, r3, #2
    55a2:	add	r6, sp, #160	; 0xa0
    55a4:	lsrs	r3, r4, #4
    55a6:	and.w	r1, r4, #15
    55aa:	orr.w	r3, r3, r5, lsl #28
    55ae:	lsrs	r2, r5, #4
    55b0:	mov	r4, r3
    55b2:	mov	r5, r2
    55b4:	ldrb	r3, [r0, r1]
    55b6:	strb.w	r3, [r6, #-1]!
    55ba:	orrs.w	r3, r4, r5
    55be:	bne.n	55a4 <_svfprintf_r+0x72c>
    55c0:	b.n	5530 <_svfprintf_r+0x6b8>
    55c2:	ldr	r1, [sp, #36]	; 0x24
    55c4:	str	r3, [sp, #48]	; 0x30
    55c6:	ldr	r2, [r1, #0]
    55c8:	strb.w	r2, [sp, #120]	; 0x78
    55cc:	movs	r3, #0
    55ce:	mov	r2, r1
    55d0:	mov	r7, r3
    55d2:	strb.w	r3, [sp, #79]	; 0x4f
    55d6:	adds	r2, #4
    55d8:	movs	r3, #1
    55da:	str	r3, [sp, #16]
    55dc:	mov	r8, r7
    55de:	str	r7, [sp, #56]	; 0x38
    55e0:	str	r2, [sp, #36]	; 0x24
    55e2:	str	r3, [sp, #32]
    55e4:	add	r6, sp, #120	; 0x78
    55e6:	b.n	5264 <_svfprintf_r+0x3ec>
    55e8:	str	r3, [sp, #48]	; 0x30
    55ea:	mov	r8, r5
    55ec:	cmp	r2, #0
    55ee:	beq.w	5182 <_svfprintf_r+0x30a>
    55f2:	strb.w	r1, [sp, #79]	; 0x4f
    55f6:	b.n	5182 <_svfprintf_r+0x30a>
    55f8:	orr.w	fp, fp, #64	; 0x40
    55fc:	ldrb.w	r3, [sl]
    5600:	b.n	4f2a <_svfprintf_r+0xb2>
    5602:	ldrb.w	r3, [sl]
    5606:	cmp	r1, #0
    5608:	bne.w	4f2a <_svfprintf_r+0xb2>
    560c:	movs	r2, #1
    560e:	movs	r1, #32
    5610:	b.n	4f2a <_svfprintf_r+0xb2>
    5612:	orr.w	fp, fp, #1
    5616:	ldrb.w	r3, [sl]
    561a:	b.n	4f2a <_svfprintf_r+0xb2>
    561c:	ldr	r4, [sp, #36]	; 0x24
    561e:	ldr	r3, [r4, #0]
    5620:	str	r3, [sp, #28]
    5622:	mov	r0, r3
    5624:	cmp	r0, #0
    5626:	mov	r3, r4
    5628:	add.w	r3, r3, #4
    562c:	blt.w	4fee <_svfprintf_r+0x176>
    5630:	str	r3, [sp, #36]	; 0x24
    5632:	ldrb.w	r3, [sl]
    5636:	b.n	4f2a <_svfprintf_r+0xb2>
    5638:	ldrb.w	r3, [sl]
    563c:	movs	r2, #1
    563e:	movs	r1, #43	; 0x2b
    5640:	b.n	4f2a <_svfprintf_r+0xb2>
    5642:	str	r3, [sp, #48]	; 0x30
    5644:	mov	r8, r5
    5646:	cmp	r2, #0
    5648:	beq.w	54fa <_svfprintf_r+0x682>
    564c:	strb.w	r1, [sp, #79]	; 0x4f
    5650:	b.n	54fa <_svfprintf_r+0x682>
    5652:	str	r3, [sp, #48]	; 0x30
    5654:	mov	r8, r5
    5656:	cmp	r2, #0
    5658:	bne.w	63b0 <_svfprintf_r+0x1538>
    565c:	tst.w	fp, #32
    5660:	ldr	r0, [pc, #512]	; (5864 <_svfprintf_r+0x9ec>)
    5662:	bne.w	555a <_svfprintf_r+0x6e2>
    5666:	ldr	r2, [sp, #36]	; 0x24
    5668:	tst.w	fp, #16
    566c:	mov	r3, r2
    566e:	bne.w	5bf4 <_svfprintf_r+0xd7c>
    5672:	tst.w	fp, #64	; 0x40
    5676:	beq.w	5bf4 <_svfprintf_r+0xd7c>
    567a:	adds	r3, #4
    567c:	ldrh	r4, [r2, #0]
    567e:	str	r3, [sp, #36]	; 0x24
    5680:	movs	r5, #0
    5682:	b.n	556c <_svfprintf_r+0x6f4>
    5684:	ldrb.w	r3, [sl]
    5688:	cmp	r3, #108	; 0x6c
    568a:	ittte	eq
    568c:	ldrbeq.w	r3, [sl, #1]
    5690:	orreq.w	fp, fp, #32
    5694:	addeq.w	sl, sl, #1
    5698:	orrne.w	fp, fp, #16
    569c:	b.n	4f2a <_svfprintf_r+0xb2>
    569e:	cmp	r2, #0
    56a0:	bne.w	6382 <_svfprintf_r+0x150a>
    56a4:	tst.w	fp, #32
    56a8:	beq.w	5d78 <_svfprintf_r+0xf00>
    56ac:	ldr	r2, [sp, #36]	; 0x24
    56ae:	ldr	r1, [sp, #24]
    56b0:	ldr	r3, [r2, #0]
    56b2:	asrs	r5, r1, #31
    56b4:	mov	r0, r1
    56b6:	adds	r2, #4
    56b8:	mov	r1, r5
    56ba:	str	r2, [sp, #36]	; 0x24
    56bc:	strd	r0, r1, [r3]
    56c0:	b.n	4ec4 <_svfprintf_r+0x4c>
    56c2:	orr.w	fp, fp, #32
    56c6:	ldrb.w	r3, [sl]
    56ca:	b.n	4f2a <_svfprintf_r+0xb2>
    56cc:	ldr	r2, [sp, #36]	; 0x24
    56ce:	str	r3, [sp, #48]	; 0x30
    56d0:	ldr	r6, [r2, #0]
    56d2:	movs	r4, #0
    56d4:	strb.w	r4, [sp, #79]	; 0x4f
    56d8:	adds	r7, r2, #4
    56da:	cmp	r6, #0
    56dc:	beq.w	61aa <_svfprintf_r+0x1332>
    56e0:	cmp	r5, #0
    56e2:	blt.w	602a <_svfprintf_r+0x11b2>
    56e6:	mov	r2, r5
    56e8:	mov	r1, r4
    56ea:	mov	r0, r6
    56ec:	bl	3940 <memchr>
    56f0:	cmp	r0, #0
    56f2:	beq.w	628e <_svfprintf_r+0x1416>
    56f6:	subs	r3, r0, r6
    56f8:	str	r3, [sp, #32]
    56fa:	mov	r8, r4
    56fc:	bic.w	r3, r3, r3, asr #31
    5700:	str	r7, [sp, #36]	; 0x24
    5702:	str	r3, [sp, #16]
    5704:	str.w	r8, [sp, #56]	; 0x38
    5708:	ldrb.w	r7, [sp, #79]	; 0x4f
    570c:	b.n	525c <_svfprintf_r+0x3e4>
    570e:	ldr	r0, [pc, #340]	; (5864 <_svfprintf_r+0x9ec>)
    5710:	str	r2, [sp, #48]	; 0x30
    5712:	cmp.w	r8, #0
    5716:	bne.w	5a22 <_svfprintf_r+0xbaa>
    571a:	mov	r7, r8
    571c:	mov.w	r8, #0
    5720:	str.w	r8, [sp, #32]
    5724:	add	r6, sp, #160	; 0xa0
    5726:	b.n	5536 <_svfprintf_r+0x6be>
    5728:	str	r3, [sp, #48]	; 0x30
    572a:	cmp	r2, #0
    572c:	bne.w	638a <_svfprintf_r+0x1512>
    5730:	ldr	r2, [sp, #48]	; 0x30
    5732:	cmp	r2, #0
    5734:	beq.w	5056 <_svfprintf_r+0x1de>
    5738:	movs	r3, #0
    573a:	movs	r1, #1
    573c:	mov	r7, r3
    573e:	str	r1, [sp, #16]
    5740:	strb.w	r2, [sp, #120]	; 0x78
    5744:	strb.w	r3, [sp, #79]	; 0x4f
    5748:	mov	r8, r3
    574a:	str	r3, [sp, #56]	; 0x38
    574c:	str	r1, [sp, #32]
    574e:	add	r6, sp, #120	; 0x78
    5750:	b.n	5264 <_svfprintf_r+0x3ec>
    5752:	cmp.w	r8, #0
    5756:	beq.w	6270 <_svfprintf_r+0x13f8>
    575a:	movs	r7, #0
    575c:	movs	r4, #0
    575e:	movs	r5, #0
    5760:	b.n	50bc <_svfprintf_r+0x244>
    5762:	ldr	r0, [pc, #256]	; (5864 <_svfprintf_r+0x9ec>)
    5764:	str	r2, [sp, #48]	; 0x30
    5766:	mov	fp, r3
    5768:	orrs.w	r3, r4, r5
    576c:	str	r7, [sp, #36]	; 0x24
    576e:	mov.w	r7, #0
    5772:	bne.w	55a2 <_svfprintf_r+0x72a>
    5776:	movs	r4, #0
    5778:	movs	r5, #0
    577a:	b.n	55a2 <_svfprintf_r+0x72a>
    577c:	ldr	r3, [sp, #116]	; 0x74
    577e:	b.n	52f8 <_svfprintf_r+0x480>
    5780:	ldr	r2, [sp, #48]	; 0x30
    5782:	cmp	r2, #101	; 0x65
    5784:	ble.w	58ca <_svfprintf_r+0xa52>
    5788:	vcmp.f64	d8, #0.0
    578c:	vmrs	APSR_nzcv, fpscr
    5790:	bne.w	5a26 <_svfprintf_r+0xbae>
    5794:	ldr	r2, [sp, #112]	; 0x70
    5796:	ldr	r1, [pc, #208]	; (5868 <_svfprintf_r+0x9f0>)
    5798:	str.w	r1, [r9]
    579c:	adds	r2, #1
    579e:	adds	r3, #1
    57a0:	movs	r1, #1
    57a2:	cmp	r2, #7
    57a4:	str	r3, [sp, #116]	; 0x74
    57a6:	str	r2, [sp, #112]	; 0x70
    57a8:	str.w	r1, [r9, #4]
    57ac:	bgt.w	5ed4 <_svfprintf_r+0x105c>
    57b0:	add.w	r9, r9, #8
    57b4:	ldr	r2, [sp, #84]	; 0x54
    57b6:	ldr	r1, [sp, #52]	; 0x34
    57b8:	cmp	r2, r1
    57ba:	blt.n	57c4 <_svfprintf_r+0x94c>
    57bc:	tst.w	fp, #1
    57c0:	beq.w	53da <_svfprintf_r+0x562>
    57c4:	ldr	r2, [sp, #112]	; 0x70
    57c6:	ldr	r0, [sp, #60]	; 0x3c
    57c8:	ldr	r1, [sp, #64]	; 0x40
    57ca:	str.w	r1, [r9]
    57ce:	adds	r2, #1
    57d0:	add	r3, r0
    57d2:	cmp	r2, #7
    57d4:	str	r3, [sp, #116]	; 0x74
    57d6:	str.w	r0, [r9, #4]
    57da:	str	r2, [sp, #112]	; 0x70
    57dc:	bgt.w	5f8c <_svfprintf_r+0x1114>
    57e0:	add.w	r9, r9, #8
    57e4:	ldr	r2, [sp, #52]	; 0x34
    57e6:	subs	r4, r2, #1
    57e8:	cmp	r4, #0
    57ea:	ble.w	53da <_svfprintf_r+0x562>
    57ee:	cmp	r4, #16
    57f0:	ldr	r2, [sp, #112]	; 0x70
    57f2:	ldr	r7, [pc, #120]	; (586c <_svfprintf_r+0x9f4>)
    57f4:	ble.w	5bb0 <_svfprintf_r+0xd38>
    57f8:	movs	r5, #16
    57fa:	ldr	r6, [sp, #20]
    57fc:	ldr.w	r8, [sp, #12]
    5800:	b.n	580e <_svfprintf_r+0x996>
    5802:	add.w	r9, r9, #8
    5806:	subs	r4, #16
    5808:	cmp	r4, #16
    580a:	ble.w	5bb0 <_svfprintf_r+0xd38>
    580e:	adds	r2, #1
    5810:	adds	r3, #16
    5812:	cmp	r2, #7
    5814:	str	r3, [sp, #116]	; 0x74
    5816:	str	r2, [sp, #112]	; 0x70
    5818:	str.w	r7, [r9]
    581c:	str.w	r5, [r9, #4]
    5820:	ble.n	5802 <_svfprintf_r+0x98a>
    5822:	add	r2, sp, #108	; 0x6c
    5824:	mov	r1, r8
    5826:	mov	r0, r6
    5828:	bl	63e8 <__ssprint_r>
    582c:	cmp	r0, #0
    582e:	bne.w	5064 <_svfprintf_r+0x1ec>
    5832:	ldr	r3, [sp, #116]	; 0x74
    5834:	ldr	r2, [sp, #112]	; 0x70
    5836:	add.w	r9, sp, #160	; 0xa0
    583a:	b.n	5806 <_svfprintf_r+0x98e>
    583c:	ldr	r2, [sp, #28]
    583e:	ldr	r1, [sp, #16]
    5840:	subs	r4, r2, r1
    5842:	cmp	r4, #0
    5844:	ble.w	5340 <_svfprintf_r+0x4c8>
    5848:	cmp	r4, #16
    584a:	ldr	r2, [sp, #112]	; 0x70
    584c:	ldr	r7, [pc, #28]	; (586c <_svfprintf_r+0x9f4>)
    584e:	ble.n	58ae <_svfprintf_r+0xa36>
    5850:	mov	r1, r9
    5852:	movs	r5, #16
    5854:	mov	r9, r8
    5856:	mov	r0, r3
    5858:	mov	r8, r6
    585a:	ldr	r6, [sp, #20]
    585c:	b.n	587a <_svfprintf_r+0xa02>
    585e:	nop
    5860:	.word	0x200006b0
    5864:	.word	0x200006c4
    5868:	.word	0x2000068c
    586c:	.word	0x20000690
    5870:	subs	r4, #16
    5872:	cmp	r4, #16
    5874:	add.w	r1, r1, #8
    5878:	ble.n	58a6 <_svfprintf_r+0xa2e>
    587a:	adds	r2, #1
    587c:	adds	r0, #16
    587e:	cmp	r2, #7
    5880:	str	r0, [sp, #116]	; 0x74
    5882:	str	r2, [sp, #112]	; 0x70
    5884:	str	r7, [r1, #0]
    5886:	str	r5, [r1, #4]
    5888:	ble.n	5870 <_svfprintf_r+0x9f8>
    588a:	add	r2, sp, #108	; 0x6c
    588c:	ldr	r1, [sp, #12]
    588e:	mov	r0, r6
    5890:	bl	63e8 <__ssprint_r>
    5894:	cmp	r0, #0
    5896:	bne.w	5064 <_svfprintf_r+0x1ec>
    589a:	subs	r4, #16
    589c:	cmp	r4, #16
    589e:	ldr	r0, [sp, #116]	; 0x74
    58a0:	ldr	r2, [sp, #112]	; 0x70
    58a2:	add	r1, sp, #160	; 0xa0
    58a4:	bgt.n	587a <_svfprintf_r+0xa02>
    58a6:	mov	r6, r8
    58a8:	mov	r3, r0
    58aa:	mov	r8, r9
    58ac:	mov	r9, r1
    58ae:	adds	r2, #1
    58b0:	add	r3, r4
    58b2:	cmp	r2, #7
    58b4:	str	r3, [sp, #116]	; 0x74
    58b6:	str	r2, [sp, #112]	; 0x70
    58b8:	str.w	r7, [r9]
    58bc:	str.w	r4, [r9, #4]
    58c0:	bgt.w	5d50 <_svfprintf_r+0xed8>
    58c4:	add.w	r9, r9, #8
    58c8:	b.n	5340 <_svfprintf_r+0x4c8>
    58ca:	ldr	r2, [sp, #52]	; 0x34
    58cc:	str.w	r6, [r9]
    58d0:	cmp	r2, #1
    58d2:	ldr	r2, [sp, #112]	; 0x70
    58d4:	add.w	r3, r3, #1
    58d8:	add.w	r2, r2, #1
    58dc:	mov.w	r1, #1
    58e0:	str	r3, [sp, #116]	; 0x74
    58e2:	str	r2, [sp, #112]	; 0x70
    58e4:	str.w	r1, [r9, #4]
    58e8:	ble.w	5d0c <_svfprintf_r+0xe94>
    58ec:	cmp	r2, #7
    58ee:	bgt.w	5d1c <_svfprintf_r+0xea4>
    58f2:	add.w	r9, r9, #8
    58f6:	ldr	r0, [sp, #60]	; 0x3c
    58f8:	ldr	r1, [sp, #64]	; 0x40
    58fa:	str.w	r1, [r9]
    58fe:	adds	r2, #1
    5900:	add	r3, r0
    5902:	cmp	r2, #7
    5904:	str	r3, [sp, #116]	; 0x74
    5906:	str	r2, [sp, #112]	; 0x70
    5908:	str.w	r0, [r9, #4]
    590c:	bgt.w	5d36 <_svfprintf_r+0xebe>
    5910:	add.w	r9, r9, #8
    5914:	vcmp.f64	d8, #0.0
    5918:	vmrs	APSR_nzcv, fpscr
    591c:	ldr	r1, [sp, #52]	; 0x34
    591e:	beq.w	5b0c <_svfprintf_r+0xc94>
    5922:	subs	r1, #1
    5924:	adds	r2, #1
    5926:	adds	r6, #1
    5928:	add	r3, r1
    592a:	cmp	r2, #7
    592c:	str.w	r6, [r9]
    5930:	str	r2, [sp, #112]	; 0x70
    5932:	str	r3, [sp, #116]	; 0x74
    5934:	str.w	r1, [r9, #4]
    5938:	bgt.w	5b76 <_svfprintf_r+0xcfe>
    593c:	add.w	r9, r9, #8
    5940:	ldr	r0, [sp, #68]	; 0x44
    5942:	str.w	r0, [r9, #4]
    5946:	adds	r2, #1
    5948:	add	r3, r0
    594a:	add	r1, sp, #92	; 0x5c
    594c:	cmp	r2, #7
    594e:	str	r3, [sp, #116]	; 0x74
    5950:	str	r2, [sp, #112]	; 0x70
    5952:	str.w	r1, [r9]
    5956:	ble.w	53d6 <_svfprintf_r+0x55e>
    595a:	add	r2, sp, #108	; 0x6c
    595c:	ldr	r1, [sp, #12]
    595e:	ldr	r0, [sp, #20]
    5960:	bl	63e8 <__ssprint_r>
    5964:	cmp	r0, #0
    5966:	bne.w	5064 <_svfprintf_r+0x1ec>
    596a:	ldr	r3, [sp, #116]	; 0x74
    596c:	add.w	r9, sp, #160	; 0xa0
    5970:	b.n	53da <_svfprintf_r+0x562>
    5972:	add	r2, sp, #108	; 0x6c
    5974:	ldr	r1, [sp, #12]
    5976:	ldr	r0, [sp, #20]
    5978:	bl	63e8 <__ssprint_r>
    597c:	cmp	r0, #0
    597e:	beq.w	5474 <_svfprintf_r+0x5fc>
    5982:	b.w	5064 <_svfprintf_r+0x1ec>
    5986:	ldr	r1, [sp, #36]	; 0x24
    5988:	cmp.w	r8, #0
    598c:	ldr	r4, [r1, #0]
    598e:	strb.w	r3, [sp, #79]	; 0x4f
    5992:	add.w	r7, r1, #4
    5996:	mov.w	r5, #0
    599a:	blt.w	6080 <_svfprintf_r+0x1208>
    599e:	orrs.w	r2, r4, r5
    59a2:	str	r7, [sp, #36]	; 0x24
    59a4:	bic.w	fp, fp, #128	; 0x80
    59a8:	mov	r7, r3
    59aa:	bne.w	51c2 <_svfprintf_r+0x34a>
    59ae:	cmp.w	r8, #0
    59b2:	beq.w	571c <_svfprintf_r+0x8a4>
    59b6:	movs	r4, #0
    59b8:	b.n	5528 <_svfprintf_r+0x6b0>
    59ba:	add	r2, sp, #108	; 0x6c
    59bc:	ldr	r1, [sp, #12]
    59be:	ldr	r0, [sp, #20]
    59c0:	bl	63e8 <__ssprint_r>
    59c4:	cmp	r0, #0
    59c6:	bne.w	5064 <_svfprintf_r+0x1ec>
    59ca:	ldr	r3, [sp, #116]	; 0x74
    59cc:	add.w	r9, sp, #160	; 0xa0
    59d0:	b.n	53b4 <_svfprintf_r+0x53c>
    59d2:	add	r2, sp, #108	; 0x6c
    59d4:	ldr	r1, [sp, #12]
    59d6:	ldr	r0, [sp, #20]
    59d8:	bl	63e8 <__ssprint_r>
    59dc:	cmp	r0, #0
    59de:	bne.w	5064 <_svfprintf_r+0x1ec>
    59e2:	ldr	r3, [sp, #116]	; 0x74
    59e4:	add.w	r9, sp, #160	; 0xa0
    59e8:	b.n	5318 <_svfprintf_r+0x4a0>
    59ea:	add	r2, sp, #108	; 0x6c
    59ec:	ldr	r1, [sp, #12]
    59ee:	ldr	r0, [sp, #20]
    59f0:	bl	63e8 <__ssprint_r>
    59f4:	cmp	r0, #0
    59f6:	bne.w	5064 <_svfprintf_r+0x1ec>
    59fa:	ldr	r3, [sp, #116]	; 0x74
    59fc:	add.w	r9, sp, #160	; 0xa0
    5a00:	b.n	5338 <_svfprintf_r+0x4c0>
    5a02:	cmp.w	r8, #0
    5a06:	strb.w	r7, [sp, #79]	; 0x4f
    5a0a:	blt.w	5eec <_svfprintf_r+0x1074>
    5a0e:	orrs.w	r3, r4, r5
    5a12:	bic.w	fp, fp, #128	; 0x80
    5a16:	bne.w	55a2 <_svfprintf_r+0x72a>
    5a1a:	cmp.w	r8, #0
    5a1e:	beq.w	571a <_svfprintf_r+0x8a2>
    5a22:	movs	r7, #0
    5a24:	b.n	5776 <_svfprintf_r+0x8fe>
    5a26:	ldr	r4, [sp, #84]	; 0x54
    5a28:	cmp	r4, #0
    5a2a:	ble.w	5ef0 <_svfprintf_r+0x1078>
    5a2e:	ldr	r2, [sp, #56]	; 0x38
    5a30:	ldr	r1, [sp, #52]	; 0x34
    5a32:	cmp	r2, r1
    5a34:	it	ge
    5a36:	movge	r2, r1
    5a38:	cmp	r2, #0
    5a3a:	mov	r4, r2
    5a3c:	ble.n	5a5a <_svfprintf_r+0xbe2>
    5a3e:	ldr	r2, [sp, #112]	; 0x70
    5a40:	str.w	r6, [r9]
    5a44:	adds	r2, #1
    5a46:	add	r3, r4
    5a48:	cmp	r2, #7
    5a4a:	str	r3, [sp, #116]	; 0x74
    5a4c:	str.w	r4, [r9, #4]
    5a50:	str	r2, [sp, #112]	; 0x70
    5a52:	bgt.w	613a <_svfprintf_r+0x12c2>
    5a56:	add.w	r9, r9, #8
    5a5a:	ldr	r2, [sp, #56]	; 0x38
    5a5c:	cmp	r4, #0
    5a5e:	it	ge
    5a60:	subge	r2, r2, r4
    5a62:	cmp	r2, #0
    5a64:	mov	r4, r2
    5a66:	ble.w	5c4c <_svfprintf_r+0xdd4>
    5a6a:	cmp	r4, #16
    5a6c:	ldr	r2, [sp, #112]	; 0x70
    5a6e:	ldr	r7, [pc, #772]	; (5d74 <_svfprintf_r+0xefc>)
    5a70:	ble.w	5ea6 <_svfprintf_r+0x102e>
    5a74:	mov	r1, r9
    5a76:	movs	r5, #16
    5a78:	mov	r9, r6
    5a7a:	ldr.w	r8, [sp, #20]
    5a7e:	ldr	r6, [sp, #12]
    5a80:	b.n	5a8c <_svfprintf_r+0xc14>
    5a82:	adds	r1, #8
    5a84:	subs	r4, #16
    5a86:	cmp	r4, #16
    5a88:	ble.w	5ea2 <_svfprintf_r+0x102a>
    5a8c:	adds	r2, #1
    5a8e:	adds	r3, #16
    5a90:	cmp	r2, #7
    5a92:	str	r3, [sp, #116]	; 0x74
    5a94:	str	r2, [sp, #112]	; 0x70
    5a96:	str	r7, [r1, #0]
    5a98:	str	r5, [r1, #4]
    5a9a:	ble.n	5a82 <_svfprintf_r+0xc0a>
    5a9c:	add	r2, sp, #108	; 0x6c
    5a9e:	mov	r1, r6
    5aa0:	mov	r0, r8
    5aa2:	bl	63e8 <__ssprint_r>
    5aa6:	cmp	r0, #0
    5aa8:	bne.w	5064 <_svfprintf_r+0x1ec>
    5aac:	ldr	r3, [sp, #116]	; 0x74
    5aae:	ldr	r2, [sp, #112]	; 0x70
    5ab0:	add	r1, sp, #160	; 0xa0
    5ab2:	b.n	5a84 <_svfprintf_r+0xc0c>
    5ab4:	add	r2, sp, #108	; 0x6c
    5ab6:	ldr	r1, [sp, #12]
    5ab8:	ldr	r0, [sp, #20]
    5aba:	bl	63e8 <__ssprint_r>
    5abe:	cmp	r0, #0
    5ac0:	bne.w	5064 <_svfprintf_r+0x1ec>
    5ac4:	ldrb.w	r7, [sp, #79]	; 0x4f
    5ac8:	ldr	r3, [sp, #116]	; 0x74
    5aca:	add.w	r9, sp, #160	; 0xa0
    5ace:	b.n	52f8 <_svfprintf_r+0x480>
    5ad0:	ands.w	r2, fp, #16
    5ad4:	bne.w	5986 <_svfprintf_r+0xb0e>
    5ad8:	ands.w	r3, fp, #64	; 0x40
    5adc:	beq.w	5986 <_svfprintf_r+0xb0e>
    5ae0:	ldr	r1, [sp, #36]	; 0x24
    5ae2:	strb.w	r2, [sp, #79]	; 0x4f
    5ae6:	mov	r3, r1
    5ae8:	cmp.w	r8, #0
    5aec:	add.w	r3, r3, #4
    5af0:	ldrh	r4, [r1, #0]
    5af2:	mov.w	r5, #0
    5af6:	blt.w	6022 <_svfprintf_r+0x11aa>
    5afa:	orrs.w	r1, r4, r5
    5afe:	bic.w	fp, fp, #128	; 0x80
    5b02:	str	r3, [sp, #36]	; 0x24
    5b04:	mov	r7, r2
    5b06:	bne.w	51c2 <_svfprintf_r+0x34a>
    5b0a:	b.n	59ae <_svfprintf_r+0xb36>
    5b0c:	subs	r4, r1, #1
    5b0e:	cmp	r4, #0
    5b10:	ble.w	5940 <_svfprintf_r+0xac8>
    5b14:	cmp	r4, #16
    5b16:	ldr	r7, [pc, #604]	; (5d74 <_svfprintf_r+0xefc>)
    5b18:	ble.n	5b60 <_svfprintf_r+0xce8>
    5b1a:	movs	r5, #16
    5b1c:	ldr	r6, [sp, #20]
    5b1e:	ldr.w	r8, [sp, #12]
    5b22:	b.n	5b2e <_svfprintf_r+0xcb6>
    5b24:	subs	r4, #16
    5b26:	cmp	r4, #16
    5b28:	add.w	r9, r9, #8
    5b2c:	ble.n	5b60 <_svfprintf_r+0xce8>
    5b2e:	adds	r2, #1
    5b30:	adds	r3, #16
    5b32:	cmp	r2, #7
    5b34:	str	r3, [sp, #116]	; 0x74
    5b36:	str	r2, [sp, #112]	; 0x70
    5b38:	str.w	r7, [r9]
    5b3c:	str.w	r5, [r9, #4]
    5b40:	ble.n	5b24 <_svfprintf_r+0xcac>
    5b42:	add	r2, sp, #108	; 0x6c
    5b44:	mov	r1, r8
    5b46:	mov	r0, r6
    5b48:	bl	63e8 <__ssprint_r>
    5b4c:	cmp	r0, #0
    5b4e:	bne.w	5064 <_svfprintf_r+0x1ec>
    5b52:	subs	r4, #16
    5b54:	cmp	r4, #16
    5b56:	ldr	r3, [sp, #116]	; 0x74
    5b58:	ldr	r2, [sp, #112]	; 0x70
    5b5a:	add.w	r9, sp, #160	; 0xa0
    5b5e:	bgt.n	5b2e <_svfprintf_r+0xcb6>
    5b60:	adds	r2, #1
    5b62:	add	r3, r4
    5b64:	cmp	r2, #7
    5b66:	str	r3, [sp, #116]	; 0x74
    5b68:	str	r2, [sp, #112]	; 0x70
    5b6a:	str.w	r7, [r9]
    5b6e:	str.w	r4, [r9, #4]
    5b72:	ble.w	593c <_svfprintf_r+0xac4>
    5b76:	add	r2, sp, #108	; 0x6c
    5b78:	ldr	r1, [sp, #12]
    5b7a:	ldr	r0, [sp, #20]
    5b7c:	bl	63e8 <__ssprint_r>
    5b80:	cmp	r0, #0
    5b82:	bne.w	5064 <_svfprintf_r+0x1ec>
    5b86:	ldr	r3, [sp, #116]	; 0x74
    5b88:	ldr	r2, [sp, #112]	; 0x70
    5b8a:	add.w	r9, sp, #160	; 0xa0
    5b8e:	b.n	5940 <_svfprintf_r+0xac8>
    5b90:	tst.w	fp, #16
    5b94:	bne.n	5bfe <_svfprintf_r+0xd86>
    5b96:	tst.w	fp, #64	; 0x40
    5b9a:	beq.n	5bfe <_svfprintf_r+0xd86>
    5b9c:	ldr	r1, [sp, #36]	; 0x24
    5b9e:	ldrsh.w	r4, [r1]
    5ba2:	adds	r1, #4
    5ba4:	asrs	r5, r4, #31
    5ba6:	mov	r2, r4
    5ba8:	mov	r3, r5
    5baa:	str	r1, [sp, #36]	; 0x24
    5bac:	b.w	51a0 <_svfprintf_r+0x328>
    5bb0:	adds	r2, #1
    5bb2:	add	r3, r4
    5bb4:	cmp	r2, #7
    5bb6:	str	r3, [sp, #116]	; 0x74
    5bb8:	str	r2, [sp, #112]	; 0x70
    5bba:	str.w	r7, [r9]
    5bbe:	str.w	r4, [r9, #4]
    5bc2:	ble.w	53d6 <_svfprintf_r+0x55e>
    5bc6:	b.n	595a <_svfprintf_r+0xae2>
    5bc8:	ldr	r1, [sp, #36]	; 0x24
    5bca:	cmp.w	r8, #0
    5bce:	ldr	r4, [r1, #0]
    5bd0:	strb.w	r3, [sp, #79]	; 0x4f
    5bd4:	add.w	r7, r1, #4
    5bd8:	mov.w	r5, #0
    5bdc:	blt.w	5d6a <_svfprintf_r+0xef2>
    5be0:	orrs.w	r2, r4, r5
    5be4:	bic.w	fp, fp, #128	; 0x80
    5be8:	str	r7, [sp, #36]	; 0x24
    5bea:	beq.w	5752 <_svfprintf_r+0x8da>
    5bee:	mov	r7, r3
    5bf0:	b.w	50bc <_svfprintf_r+0x244>
    5bf4:	ldr	r4, [r3, #0]
    5bf6:	adds	r3, #4
    5bf8:	str	r3, [sp, #36]	; 0x24
    5bfa:	movs	r5, #0
    5bfc:	b.n	556c <_svfprintf_r+0x6f4>
    5bfe:	ldr	r2, [sp, #36]	; 0x24
    5c00:	ldr	r4, [r2, #0]
    5c02:	mov	r3, r2
    5c04:	adds	r3, #4
    5c06:	asrs	r5, r4, #31
    5c08:	mov	r2, r4
    5c0a:	str	r3, [sp, #36]	; 0x24
    5c0c:	cmp	r2, #0
    5c0e:	mov	r3, r5
    5c10:	sbcs.w	r3, r3, #0
    5c14:	bge.w	51aa <_svfprintf_r+0x332>
    5c18:	negs	r4, r4
    5c1a:	mov.w	r7, #45	; 0x2d
    5c1e:	sbc.w	r5, r5, r5, lsl #1
    5c22:	cmp.w	r8, #0
    5c26:	strb.w	r7, [sp, #79]	; 0x4f
    5c2a:	blt.w	51c2 <_svfprintf_r+0x34a>
    5c2e:	bic.w	fp, fp, #128	; 0x80
    5c32:	b.w	51c2 <_svfprintf_r+0x34a>
    5c36:	add	r2, sp, #108	; 0x6c
    5c38:	ldr	r1, [sp, #12]
    5c3a:	ldr	r0, [sp, #20]
    5c3c:	bl	63e8 <__ssprint_r>
    5c40:	cmp	r0, #0
    5c42:	bne.w	5064 <_svfprintf_r+0x1ec>
    5c46:	ldr	r3, [sp, #116]	; 0x74
    5c48:	add.w	r9, sp, #160	; 0xa0
    5c4c:	ldr	r1, [sp, #56]	; 0x38
    5c4e:	ldr	r2, [sp, #84]	; 0x54
    5c50:	add	r1, r6
    5c52:	mov	r5, r1
    5c54:	ldr	r1, [sp, #52]	; 0x34
    5c56:	cmp	r2, r1
    5c58:	blt.n	5cea <_svfprintf_r+0xe72>
    5c5a:	tst.w	fp, #1
    5c5e:	bne.n	5cea <_svfprintf_r+0xe72>
    5c60:	ldr	r0, [sp, #52]	; 0x34
    5c62:	add	r6, r0
    5c64:	subs	r4, r6, r5
    5c66:	subs	r2, r0, r2
    5c68:	cmp	r4, r2
    5c6a:	it	ge
    5c6c:	movge	r4, r2
    5c6e:	cmp	r4, #0
    5c70:	mov	r6, r4
    5c72:	ble.n	5c90 <_svfprintf_r+0xe18>
    5c74:	ldr	r1, [sp, #112]	; 0x70
    5c76:	str.w	r5, [r9]
    5c7a:	adds	r1, #1
    5c7c:	add	r3, r4
    5c7e:	cmp	r1, #7
    5c80:	str	r3, [sp, #116]	; 0x74
    5c82:	str.w	r4, [r9, #4]
    5c86:	str	r1, [sp, #112]	; 0x70
    5c88:	bgt.w	618c <_svfprintf_r+0x1314>
    5c8c:	add.w	r9, r9, #8
    5c90:	cmp	r6, #0
    5c92:	ite	ge
    5c94:	subge	r4, r2, r6
    5c96:	movlt	r4, r2
    5c98:	cmp	r4, #0
    5c9a:	ble.w	53da <_svfprintf_r+0x562>
    5c9e:	cmp	r4, #16
    5ca0:	ldr	r2, [sp, #112]	; 0x70
    5ca2:	ldr	r7, [pc, #208]	; (5d74 <_svfprintf_r+0xefc>)
    5ca4:	ble.n	5bb0 <_svfprintf_r+0xd38>
    5ca6:	movs	r5, #16
    5ca8:	ldr	r6, [sp, #20]
    5caa:	ldr.w	r8, [sp, #12]
    5cae:	b.n	5cbc <_svfprintf_r+0xe44>
    5cb0:	add.w	r9, r9, #8
    5cb4:	subs	r4, #16
    5cb6:	cmp	r4, #16
    5cb8:	ble.w	5bb0 <_svfprintf_r+0xd38>
    5cbc:	adds	r2, #1
    5cbe:	adds	r3, #16
    5cc0:	cmp	r2, #7
    5cc2:	str	r3, [sp, #116]	; 0x74
    5cc4:	str	r2, [sp, #112]	; 0x70
    5cc6:	str.w	r7, [r9]
    5cca:	str.w	r5, [r9, #4]
    5cce:	ble.n	5cb0 <_svfprintf_r+0xe38>
    5cd0:	add	r2, sp, #108	; 0x6c
    5cd2:	mov	r1, r8
    5cd4:	mov	r0, r6
    5cd6:	bl	63e8 <__ssprint_r>
    5cda:	cmp	r0, #0
    5cdc:	bne.w	5064 <_svfprintf_r+0x1ec>
    5ce0:	ldr	r3, [sp, #116]	; 0x74
    5ce2:	ldr	r2, [sp, #112]	; 0x70
    5ce4:	add.w	r9, sp, #160	; 0xa0
    5ce8:	b.n	5cb4 <_svfprintf_r+0xe3c>
    5cea:	ldr	r1, [sp, #112]	; 0x70
    5cec:	ldr	r4, [sp, #60]	; 0x3c
    5cee:	ldr	r0, [sp, #64]	; 0x40
    5cf0:	str.w	r0, [r9]
    5cf4:	adds	r1, #1
    5cf6:	add	r3, r4
    5cf8:	cmp	r1, #7
    5cfa:	str	r3, [sp, #116]	; 0x74
    5cfc:	str.w	r4, [r9, #4]
    5d00:	str	r1, [sp, #112]	; 0x70
    5d02:	bgt.w	6152 <_svfprintf_r+0x12da>
    5d06:	add.w	r9, r9, #8
    5d0a:	b.n	5c60 <_svfprintf_r+0xde8>
    5d0c:	tst.w	fp, #1
    5d10:	bne.w	58ec <_svfprintf_r+0xa74>
    5d14:	cmp	r2, #7
    5d16:	ble.w	593c <_svfprintf_r+0xac4>
    5d1a:	b.n	5b76 <_svfprintf_r+0xcfe>
    5d1c:	add	r2, sp, #108	; 0x6c
    5d1e:	ldr	r1, [sp, #12]
    5d20:	ldr	r0, [sp, #20]
    5d22:	bl	63e8 <__ssprint_r>
    5d26:	cmp	r0, #0
    5d28:	bne.w	5064 <_svfprintf_r+0x1ec>
    5d2c:	ldr	r3, [sp, #116]	; 0x74
    5d2e:	ldr	r2, [sp, #112]	; 0x70
    5d30:	add.w	r9, sp, #160	; 0xa0
    5d34:	b.n	58f6 <_svfprintf_r+0xa7e>
    5d36:	add	r2, sp, #108	; 0x6c
    5d38:	ldr	r1, [sp, #12]
    5d3a:	ldr	r0, [sp, #20]
    5d3c:	bl	63e8 <__ssprint_r>
    5d40:	cmp	r0, #0
    5d42:	bne.w	5064 <_svfprintf_r+0x1ec>
    5d46:	ldr	r3, [sp, #116]	; 0x74
    5d48:	ldr	r2, [sp, #112]	; 0x70
    5d4a:	add.w	r9, sp, #160	; 0xa0
    5d4e:	b.n	5914 <_svfprintf_r+0xa9c>
    5d50:	add	r2, sp, #108	; 0x6c
    5d52:	ldr	r1, [sp, #12]
    5d54:	ldr	r0, [sp, #20]
    5d56:	bl	63e8 <__ssprint_r>
    5d5a:	cmp	r0, #0
    5d5c:	bne.w	5064 <_svfprintf_r+0x1ec>
    5d60:	ldr	r3, [sp, #116]	; 0x74
    5d62:	add.w	r9, sp, #160	; 0xa0
    5d66:	b.w	5340 <_svfprintf_r+0x4c8>
    5d6a:	str	r7, [sp, #36]	; 0x24
    5d6c:	movs	r7, #0
    5d6e:	b.w	50bc <_svfprintf_r+0x244>
    5d72:	nop
    5d74:	.word	0x20000690
    5d78:	tst.w	fp, #16
    5d7c:	bne.n	5d96 <_svfprintf_r+0xf1e>
    5d7e:	tst.w	fp, #64	; 0x40
    5d82:	beq.n	5d96 <_svfprintf_r+0xf1e>
    5d84:	ldr	r2, [sp, #36]	; 0x24
    5d86:	ldr	r3, [r2, #0]
    5d88:	adds	r2, #4
    5d8a:	str	r2, [sp, #36]	; 0x24
    5d8c:	ldrh.w	r2, [sp, #24]
    5d90:	strh	r2, [r3, #0]
    5d92:	b.w	4ec4 <_svfprintf_r+0x4c>
    5d96:	ldr	r2, [sp, #36]	; 0x24
    5d98:	ldr	r3, [r2, #0]
    5d9a:	adds	r2, #4
    5d9c:	str	r2, [sp, #36]	; 0x24
    5d9e:	ldr	r2, [sp, #24]
    5da0:	str	r2, [r3, #0]
    5da2:	b.w	4ec4 <_svfprintf_r+0x4c>
    5da6:	vcmp.f64	d8, d8
    5daa:	vmrs	APSR_nzcv, fpscr
    5dae:	bvs.w	62ee <_svfprintf_r+0x1476>
    5db2:	ldr	r3, [sp, #48]	; 0x30
    5db4:	cmp.w	r8, #4294967295
    5db8:	bic.w	r5, r3, #32
    5dbc:	beq.w	620a <_svfprintf_r+0x1392>
    5dc0:	cmp	r5, #71	; 0x47
    5dc2:	beq.w	6012 <_svfprintf_r+0x119a>
    5dc6:	orr.w	r3, fp, #256	; 0x100
    5dca:	str	r3, [sp, #40]	; 0x28
    5dcc:	vmov	r3, s17
    5dd0:	cmp	r3, #0
    5dd2:	blt.w	6210 <_svfprintf_r+0x1398>
    5dd6:	vmov.f64	d10, d8
    5dda:	movs	r7, #0
    5ddc:	ldr	r3, [sp, #48]	; 0x30
    5dde:	cmp	r3, #102	; 0x66
    5de0:	beq.w	61e8 <_svfprintf_r+0x1370>
    5de4:	cmp	r3, #70	; 0x46
    5de6:	beq.w	5fc2 <_svfprintf_r+0x114a>
    5dea:	vmov.f64	d0, d10
    5dee:	cmp	r5, #69	; 0x45
    5df0:	ite	eq
    5df2:	addeq.w	r4, r8, #1
    5df6:	movne	r4, r8
    5df8:	add	r2, sp, #100	; 0x64
    5dfa:	add	r3, sp, #88	; 0x58
    5dfc:	str	r2, [sp, #4]
    5dfe:	str	r3, [sp, #0]
    5e00:	mov	r2, r4
    5e02:	add	r3, sp, #84	; 0x54
    5e04:	movs	r1, #2
    5e06:	ldr	r0, [sp, #20]
    5e08:	bl	41f0 <_dtoa_r>
    5e0c:	ldr	r3, [sp, #48]	; 0x30
    5e0e:	cmp	r3, #103	; 0x67
    5e10:	mov	r6, r0
    5e12:	bne.w	6232 <_svfprintf_r+0x13ba>
    5e16:	tst.w	fp, #1
    5e1a:	beq.w	62ea <_svfprintf_r+0x1472>
    5e1e:	adds	r1, r6, r4
    5e20:	vcmp.f64	d10, #0.0
    5e24:	vmrs	APSR_nzcv, fpscr
    5e28:	beq.w	6136 <_svfprintf_r+0x12be>
    5e2c:	ldr	r3, [sp, #100]	; 0x64
    5e2e:	cmp	r1, r3
    5e30:	bls.n	5e40 <_svfprintf_r+0xfc8>
    5e32:	movs	r0, #48	; 0x30
    5e34:	adds	r2, r3, #1
    5e36:	str	r2, [sp, #100]	; 0x64
    5e38:	strb	r0, [r3, #0]
    5e3a:	ldr	r3, [sp, #100]	; 0x64
    5e3c:	cmp	r1, r3
    5e3e:	bhi.n	5e34 <_svfprintf_r+0xfbc>
    5e40:	subs	r3, r3, r6
    5e42:	cmp	r5, #71	; 0x47
    5e44:	str	r3, [sp, #52]	; 0x34
    5e46:	beq.w	6088 <_svfprintf_r+0x1210>
    5e4a:	ldr	r3, [sp, #48]	; 0x30
    5e4c:	cmp	r3, #101	; 0x65
    5e4e:	ble.w	6250 <_svfprintf_r+0x13d8>
    5e52:	ldr	r3, [sp, #48]	; 0x30
    5e54:	cmp	r3, #102	; 0x66
    5e56:	ldr	r3, [sp, #84]	; 0x54
    5e58:	beq.w	6254 <_svfprintf_r+0x13dc>
    5e5c:	str	r3, [sp, #56]	; 0x38
    5e5e:	ldr	r2, [sp, #56]	; 0x38
    5e60:	ldr	r1, [sp, #52]	; 0x34
    5e62:	cmp	r2, r1
    5e64:	blt.w	6218 <_svfprintf_r+0x13a0>
    5e68:	tst.w	fp, #1
    5e6c:	bne.w	62d8 <_svfprintf_r+0x1460>
    5e70:	bic.w	r3, r2, r2, asr #31
    5e74:	str	r2, [sp, #32]
    5e76:	movs	r2, #103	; 0x67
    5e78:	str	r2, [sp, #48]	; 0x30
    5e7a:	cmp	r7, #0
    5e7c:	bne.w	606c <_svfprintf_r+0x11f4>
    5e80:	mov	r8, r7
    5e82:	str	r3, [sp, #16]
    5e84:	ldr.w	fp, [sp, #40]	; 0x28
    5e88:	ldrb.w	r7, [sp, #79]	; 0x4f
    5e8c:	b.w	525c <_svfprintf_r+0x3e4>
    5e90:	bic.w	r7, r7, #7
    5e94:	add.w	r3, r7, #8
    5e98:	vldr	d8, [r7]
    5e9c:	str	r3, [sp, #36]	; 0x24
    5e9e:	b.w	521e <_svfprintf_r+0x3a6>
    5ea2:	mov	r6, r9
    5ea4:	mov	r9, r1
    5ea6:	adds	r2, #1
    5ea8:	add	r3, r4
    5eaa:	cmp	r2, #7
    5eac:	str	r3, [sp, #116]	; 0x74
    5eae:	str	r2, [sp, #112]	; 0x70
    5eb0:	str.w	r7, [r9]
    5eb4:	str.w	r4, [r9, #4]
    5eb8:	bgt.w	5c36 <_svfprintf_r+0xdbe>
    5ebc:	add.w	r9, r9, #8
    5ec0:	b.n	5c4c <_svfprintf_r+0xdd4>
    5ec2:	movs	r7, #0
    5ec4:	cmp	r8, r7
    5ec6:	strb.w	r7, [sp, #79]	; 0x4f
    5eca:	blt.w	5776 <_svfprintf_r+0x8fe>
    5ece:	bic.w	fp, fp, #128	; 0x80
    5ed2:	b.n	5712 <_svfprintf_r+0x89a>
    5ed4:	add	r2, sp, #108	; 0x6c
    5ed6:	ldr	r1, [sp, #12]
    5ed8:	ldr	r0, [sp, #20]
    5eda:	bl	63e8 <__ssprint_r>
    5ede:	cmp	r0, #0
    5ee0:	bne.w	5064 <_svfprintf_r+0x1ec>
    5ee4:	ldr	r3, [sp, #116]	; 0x74
    5ee6:	add.w	r9, sp, #160	; 0xa0
    5eea:	b.n	57b4 <_svfprintf_r+0x93c>
    5eec:	ldr	r7, [sp, #36]	; 0x24
    5eee:	b.n	5768 <_svfprintf_r+0x8f0>
    5ef0:	ldr	r2, [sp, #112]	; 0x70
    5ef2:	ldr	r1, [pc, #740]	; (61d8 <_svfprintf_r+0x1360>)
    5ef4:	str.w	r1, [r9]
    5ef8:	adds	r2, #1
    5efa:	adds	r3, #1
    5efc:	movs	r1, #1
    5efe:	cmp	r2, #7
    5f00:	str	r3, [sp, #116]	; 0x74
    5f02:	str	r2, [sp, #112]	; 0x70
    5f04:	str.w	r1, [r9, #4]
    5f08:	bgt.n	5ff8 <_svfprintf_r+0x1180>
    5f0a:	add.w	r9, r9, #8
    5f0e:	cbnz	r4, 5f1c <_svfprintf_r+0x10a4>
    5f10:	ldr	r2, [sp, #52]	; 0x34
    5f12:	cbnz	r2, 5f1c <_svfprintf_r+0x10a4>
    5f14:	tst.w	fp, #1
    5f18:	beq.w	53da <_svfprintf_r+0x562>
    5f1c:	ldr	r2, [sp, #112]	; 0x70
    5f1e:	ldr	r0, [sp, #60]	; 0x3c
    5f20:	ldr	r1, [sp, #64]	; 0x40
    5f22:	str.w	r1, [r9]
    5f26:	adds	r2, #1
    5f28:	add	r3, r0
    5f2a:	cmp	r2, #7
    5f2c:	str	r3, [sp, #116]	; 0x74
    5f2e:	str.w	r0, [r9, #4]
    5f32:	str	r2, [sp, #112]	; 0x70
    5f34:	bgt.w	62a4 <_svfprintf_r+0x142c>
    5f38:	add.w	r9, r9, #8
    5f3c:	negs	r4, r4
    5f3e:	cmp	r4, #0
    5f40:	ble.w	6052 <_svfprintf_r+0x11da>
    5f44:	cmp	r4, #16
    5f46:	ldr	r7, [pc, #660]	; (61dc <_svfprintf_r+0x1364>)
    5f48:	ble.w	6170 <_svfprintf_r+0x12f8>
    5f4c:	mov	r1, r9
    5f4e:	movs	r5, #16
    5f50:	mov	r9, r6
    5f52:	ldr.w	r8, [sp, #20]
    5f56:	ldr	r6, [sp, #12]
    5f58:	b.n	5f64 <_svfprintf_r+0x10ec>
    5f5a:	adds	r1, #8
    5f5c:	subs	r4, #16
    5f5e:	cmp	r4, #16
    5f60:	ble.w	616c <_svfprintf_r+0x12f4>
    5f64:	adds	r2, #1
    5f66:	adds	r3, #16
    5f68:	cmp	r2, #7
    5f6a:	str	r3, [sp, #116]	; 0x74
    5f6c:	str	r2, [sp, #112]	; 0x70
    5f6e:	str	r7, [r1, #0]
    5f70:	str	r5, [r1, #4]
    5f72:	ble.n	5f5a <_svfprintf_r+0x10e2>
    5f74:	add	r2, sp, #108	; 0x6c
    5f76:	mov	r1, r6
    5f78:	mov	r0, r8
    5f7a:	bl	63e8 <__ssprint_r>
    5f7e:	cmp	r0, #0
    5f80:	bne.w	5064 <_svfprintf_r+0x1ec>
    5f84:	ldr	r3, [sp, #116]	; 0x74
    5f86:	ldr	r2, [sp, #112]	; 0x70
    5f88:	add	r1, sp, #160	; 0xa0
    5f8a:	b.n	5f5c <_svfprintf_r+0x10e4>
    5f8c:	add	r2, sp, #108	; 0x6c
    5f8e:	ldr	r1, [sp, #12]
    5f90:	ldr	r0, [sp, #20]
    5f92:	bl	63e8 <__ssprint_r>
    5f96:	cmp	r0, #0
    5f98:	bne.w	5064 <_svfprintf_r+0x1ec>
    5f9c:	ldr	r3, [sp, #116]	; 0x74
    5f9e:	add.w	r9, sp, #160	; 0xa0
    5fa2:	b.n	57e4 <_svfprintf_r+0x96c>
    5fa4:	movs	r1, #64	; 0x40
    5fa6:	ldr	r0, [sp, #20]
    5fa8:	bl	2970 <_malloc_r>
    5fac:	ldr	r2, [sp, #12]
    5fae:	str	r0, [r2, #0]
    5fb0:	str	r0, [r2, #16]
    5fb2:	cmp	r0, #0
    5fb4:	beq.w	6392 <_svfprintf_r+0x151a>
    5fb8:	ldr	r2, [sp, #12]
    5fba:	movs	r3, #64	; 0x40
    5fbc:	str	r3, [r2, #20]
    5fbe:	b.w	4eaa <_svfprintf_r+0x32>
    5fc2:	add	r2, sp, #100	; 0x64
    5fc4:	add	r3, sp, #88	; 0x58
    5fc6:	str	r2, [sp, #4]
    5fc8:	str	r3, [sp, #0]
    5fca:	mov	r2, r8
    5fcc:	add	r3, sp, #84	; 0x54
    5fce:	movs	r1, #3
    5fd0:	vmov.f64	d0, d10
    5fd4:	ldr	r0, [sp, #20]
    5fd6:	bl	41f0 <_dtoa_r>
    5fda:	mov	r4, r8
    5fdc:	mov	r6, r0
    5fde:	ldr	r3, [sp, #48]	; 0x30
    5fe0:	cmp	r3, #70	; 0x46
    5fe2:	add.w	r1, r6, r4
    5fe6:	bne.w	5e20 <_svfprintf_r+0xfa8>
    5fea:	ldrb	r3, [r6, #0]
    5fec:	cmp	r3, #48	; 0x30
    5fee:	beq.w	630c <_svfprintf_r+0x1494>
    5ff2:	ldr	r4, [sp, #84]	; 0x54
    5ff4:	add	r1, r4
    5ff6:	b.n	5e20 <_svfprintf_r+0xfa8>
    5ff8:	add	r2, sp, #108	; 0x6c
    5ffa:	ldr	r1, [sp, #12]
    5ffc:	ldr	r0, [sp, #20]
    5ffe:	bl	63e8 <__ssprint_r>
    6002:	cmp	r0, #0
    6004:	bne.w	5064 <_svfprintf_r+0x1ec>
    6008:	ldr	r4, [sp, #84]	; 0x54
    600a:	ldr	r3, [sp, #116]	; 0x74
    600c:	add.w	r9, sp, #160	; 0xa0
    6010:	b.n	5f0e <_svfprintf_r+0x1096>
    6012:	cmp.w	r8, #0
    6016:	it	eq
    6018:	moveq.w	r8, #1
    601c:	b.n	5dc6 <_svfprintf_r+0xf4e>
    601e:	str	r3, [sp, #36]	; 0x24
    6020:	b.n	5d6c <_svfprintf_r+0xef4>
    6022:	str	r3, [sp, #36]	; 0x24
    6024:	mov	r7, r2
    6026:	b.w	5520 <_svfprintf_r+0x6a8>
    602a:	mov	r0, r6
    602c:	bl	3480 <strlen>
    6030:	mov	r8, r4
    6032:	mov	r3, r0
    6034:	str	r0, [sp, #32]
    6036:	b.w	56fc <_svfprintf_r+0x884>
    603a:	add	r2, sp, #108	; 0x6c
    603c:	ldr	r1, [sp, #12]
    603e:	ldr	r0, [sp, #20]
    6040:	bl	63e8 <__ssprint_r>
    6044:	cmp	r0, #0
    6046:	bne.w	5064 <_svfprintf_r+0x1ec>
    604a:	ldr	r3, [sp, #116]	; 0x74
    604c:	ldr	r2, [sp, #112]	; 0x70
    604e:	add.w	r9, sp, #160	; 0xa0
    6052:	ldr	r0, [sp, #52]	; 0x34
    6054:	str.w	r6, [r9]
    6058:	adds	r2, #1
    605a:	add	r3, r0
    605c:	cmp	r2, #7
    605e:	str	r3, [sp, #116]	; 0x74
    6060:	str	r2, [sp, #112]	; 0x70
    6062:	str.w	r0, [r9, #4]
    6066:	ble.w	53d6 <_svfprintf_r+0x55e>
    606a:	b.n	595a <_svfprintf_r+0xae2>
    606c:	movs	r7, #45	; 0x2d
    606e:	str	r3, [sp, #16]
    6070:	ldr.w	fp, [sp, #40]	; 0x28
    6074:	strb.w	r7, [sp, #79]	; 0x4f
    6078:	mov.w	r8, #0
    607c:	b.w	525e <_svfprintf_r+0x3e6>
    6080:	str	r7, [sp, #36]	; 0x24
    6082:	mov	r7, r3
    6084:	b.w	5520 <_svfprintf_r+0x6a8>
    6088:	ldr	r3, [sp, #84]	; 0x54
    608a:	adds	r2, r3, #3
    608c:	blt.n	6094 <_svfprintf_r+0x121c>
    608e:	cmp	r8, r3
    6090:	bge.w	5e5c <_svfprintf_r+0xfe4>
    6094:	ldr	r2, [sp, #48]	; 0x30
    6096:	subs	r2, #2
    6098:	str	r2, [sp, #48]	; 0x30
    609a:	subs	r3, #1
    609c:	cmp	r3, #0
    609e:	ldrb.w	r2, [sp, #48]	; 0x30
    60a2:	str	r3, [sp, #84]	; 0x54
    60a4:	it	lt
    60a6:	neglt	r3, r3
    60a8:	strb.w	r2, [sp, #92]	; 0x5c
    60ac:	ite	lt
    60ae:	movlt	r2, #45	; 0x2d
    60b0:	movge	r2, #43	; 0x2b
    60b2:	cmp	r3, #9
    60b4:	strb.w	r2, [sp, #93]	; 0x5d
    60b8:	ble.w	62c8 <_svfprintf_r+0x1450>
    60bc:	add.w	r0, sp, #107	; 0x6b
    60c0:	mov	r4, r0
    60c2:	ldr	r2, [pc, #284]	; (61e0 <_svfprintf_r+0x1368>)
    60c4:	smull	r2, r1, r2, r3
    60c8:	asrs	r2, r3, #31
    60ca:	rsb	r2, r2, r1, asr #2
    60ce:	add.w	r1, r2, r2, lsl #2
    60d2:	sub.w	r3, r3, r1, lsl #1
    60d6:	add.w	r1, r3, #48	; 0x30
    60da:	cmp	r2, #9
    60dc:	mov	r3, r2
    60de:	strb.w	r1, [r4, #-1]!
    60e2:	bgt.n	60c2 <_svfprintf_r+0x124a>
    60e4:	mov	r1, r4
    60e6:	adds	r3, #48	; 0x30
    60e8:	uxtb	r2, r3
    60ea:	strb.w	r2, [r1, #-1]!
    60ee:	cmp	r0, r1
    60f0:	bls.w	63b8 <_svfprintf_r+0x1540>
    60f4:	add.w	r1, sp, #94	; 0x5e
    60f8:	mov	r3, r4
    60fa:	b.n	6100 <_svfprintf_r+0x1288>
    60fc:	ldrb.w	r2, [r3], #1
    6100:	strb.w	r2, [r1], #1
    6104:	cmp	r0, r3
    6106:	bne.n	60fc <_svfprintf_r+0x1284>
    6108:	adds	r3, r0, #1
    610a:	subs	r3, r3, r4
    610c:	add.w	r2, sp, #94	; 0x5e
    6110:	add	r3, r2
    6112:	add	r2, sp, #92	; 0x5c
    6114:	subs	r3, r3, r2
    6116:	ldr	r2, [sp, #52]	; 0x34
    6118:	str	r3, [sp, #68]	; 0x44
    611a:	cmp	r2, #1
    611c:	add	r3, r2
    611e:	str	r3, [sp, #32]
    6120:	ble.w	6322 <_svfprintf_r+0x14aa>
    6124:	ldr	r3, [sp, #32]
    6126:	ldr	r2, [sp, #60]	; 0x3c
    6128:	add	r3, r2
    612a:	movs	r2, #0
    612c:	str	r3, [sp, #32]
    612e:	str	r2, [sp, #56]	; 0x38
    6130:	bic.w	r3, r3, r3, asr #31
    6134:	b.n	5e7a <_svfprintf_r+0x1002>
    6136:	mov	r3, r1
    6138:	b.n	5e40 <_svfprintf_r+0xfc8>
    613a:	add	r2, sp, #108	; 0x6c
    613c:	ldr	r1, [sp, #12]
    613e:	ldr	r0, [sp, #20]
    6140:	bl	63e8 <__ssprint_r>
    6144:	cmp	r0, #0
    6146:	bne.w	5064 <_svfprintf_r+0x1ec>
    614a:	ldr	r3, [sp, #116]	; 0x74
    614c:	add.w	r9, sp, #160	; 0xa0
    6150:	b.n	5a5a <_svfprintf_r+0xbe2>
    6152:	add	r2, sp, #108	; 0x6c
    6154:	ldr	r1, [sp, #12]
    6156:	ldr	r0, [sp, #20]
    6158:	bl	63e8 <__ssprint_r>
    615c:	cmp	r0, #0
    615e:	bne.w	5064 <_svfprintf_r+0x1ec>
    6162:	ldr	r2, [sp, #84]	; 0x54
    6164:	ldr	r3, [sp, #116]	; 0x74
    6166:	add.w	r9, sp, #160	; 0xa0
    616a:	b.n	5c60 <_svfprintf_r+0xde8>
    616c:	mov	r6, r9
    616e:	mov	r9, r1
    6170:	adds	r2, #1
    6172:	add	r3, r4
    6174:	cmp	r2, #7
    6176:	str	r3, [sp, #116]	; 0x74
    6178:	str	r2, [sp, #112]	; 0x70
    617a:	str.w	r7, [r9]
    617e:	str.w	r4, [r9, #4]
    6182:	bgt.w	603a <_svfprintf_r+0x11c2>
    6186:	add.w	r9, r9, #8
    618a:	b.n	6052 <_svfprintf_r+0x11da>
    618c:	add	r2, sp, #108	; 0x6c
    618e:	ldr	r1, [sp, #12]
    6190:	ldr	r0, [sp, #20]
    6192:	bl	63e8 <__ssprint_r>
    6196:	cmp	r0, #0
    6198:	bne.w	5064 <_svfprintf_r+0x1ec>
    619c:	ldr	r2, [sp, #84]	; 0x54
    619e:	ldr	r1, [sp, #52]	; 0x34
    61a0:	ldr	r3, [sp, #116]	; 0x74
    61a2:	subs	r2, r1, r2
    61a4:	add.w	r9, sp, #160	; 0xa0
    61a8:	b.n	5c90 <_svfprintf_r+0xe18>
    61aa:	cmp	r5, #6
    61ac:	mov	r3, r5
    61ae:	it	cs
    61b0:	movcs	r3, #6
    61b2:	str	r3, [sp, #32]
    61b4:	bic.w	r3, r3, r3, asr #31
    61b8:	mov	r8, r6
    61ba:	str	r7, [sp, #36]	; 0x24
    61bc:	str	r6, [sp, #56]	; 0x38
    61be:	mov	r7, r6
    61c0:	str	r3, [sp, #16]
    61c2:	ldr	r6, [pc, #32]	; (61e4 <_svfprintf_r+0x136c>)
    61c4:	b.w	525c <_svfprintf_r+0x3e4>
    61c8:	mov	fp, r3
    61ca:	b.w	55a2 <_svfprintf_r+0x72a>
    61ce:	movs	r7, #45	; 0x2d
    61d0:	strb.w	r7, [sp, #79]	; 0x4f
    61d4:	b.w	523e <_svfprintf_r+0x3c6>
    61d8:	.word	0x2000068c
    61dc:	.word	0x20000690
    61e0:	.word	0x66666667
    61e4:	.word	0x200006d8
    61e8:	add	r2, sp, #100	; 0x64
    61ea:	add	r3, sp, #88	; 0x58
    61ec:	str	r2, [sp, #4]
    61ee:	str	r3, [sp, #0]
    61f0:	movs	r1, #3
    61f2:	add	r3, sp, #84	; 0x54
    61f4:	mov	r2, r8
    61f6:	vmov.f64	d0, d10
    61fa:	ldr	r0, [sp, #20]
    61fc:	bl	41f0 <_dtoa_r>
    6200:	mov	r4, r8
    6202:	mov	r6, r0
    6204:	add.w	r1, r0, r8
    6208:	b.n	5fea <_svfprintf_r+0x1172>
    620a:	mov.w	r8, #6
    620e:	b.n	5dc6 <_svfprintf_r+0xf4e>
    6210:	vneg.f64	d10, d8
    6214:	movs	r7, #45	; 0x2d
    6216:	b.n	5ddc <_svfprintf_r+0xf64>
    6218:	ldr	r2, [sp, #60]	; 0x3c
    621a:	ldr	r3, [sp, #52]	; 0x34
    621c:	add	r3, r2
    621e:	ldr	r2, [sp, #56]	; 0x38
    6220:	str	r3, [sp, #32]
    6222:	cmp	r2, #0
    6224:	ble.w	6334 <_svfprintf_r+0x14bc>
    6228:	movs	r2, #103	; 0x67
    622a:	bic.w	r3, r3, r3, asr #31
    622e:	str	r2, [sp, #48]	; 0x30
    6230:	b.n	5e7a <_svfprintf_r+0x1002>
    6232:	ldr	r3, [sp, #48]	; 0x30
    6234:	cmp	r3, #71	; 0x47
    6236:	bne.w	5e1e <_svfprintf_r+0xfa6>
    623a:	tst.w	fp, #1
    623e:	bne.w	5fde <_svfprintf_r+0x1166>
    6242:	ldr	r3, [sp, #100]	; 0x64
    6244:	cmp	r5, #71	; 0x47
    6246:	sub.w	r3, r3, r6
    624a:	str	r3, [sp, #52]	; 0x34
    624c:	beq.w	6088 <_svfprintf_r+0x1210>
    6250:	ldr	r3, [sp, #84]	; 0x54
    6252:	b.n	609a <_svfprintf_r+0x1222>
    6254:	cmp	r3, #0
    6256:	mov	r2, r3
    6258:	str	r3, [sp, #56]	; 0x38
    625a:	ble.n	6344 <_svfprintf_r+0x14cc>
    625c:	cmp.w	r8, #0
    6260:	bne.n	62fa <_svfprintf_r+0x1482>
    6262:	tst.w	fp, #1
    6266:	bne.n	62fa <_svfprintf_r+0x1482>
    6268:	bic.w	r3, r3, r3, asr #31
    626c:	str	r2, [sp, #32]
    626e:	b.n	5e7a <_svfprintf_r+0x1002>
    6270:	tst.w	fp, #1
    6274:	mov	r7, r8
    6276:	beq.n	6284 <_svfprintf_r+0x140c>
    6278:	add	r6, sp, #224	; 0xe0
    627a:	movs	r3, #48	; 0x30
    627c:	strb.w	r3, [r6, #-65]!
    6280:	b.w	5530 <_svfprintf_r+0x6b8>
    6284:	str.w	r8, [sp, #32]
    6288:	add	r6, sp, #160	; 0xa0
    628a:	b.w	5536 <_svfprintf_r+0x6be>
    628e:	bic.w	r3, r5, r5, asr #31
    6292:	str	r7, [sp, #36]	; 0x24
    6294:	str	r3, [sp, #16]
    6296:	str	r5, [sp, #32]
    6298:	mov	r8, r0
    629a:	str	r0, [sp, #56]	; 0x38
    629c:	ldrb.w	r7, [sp, #79]	; 0x4f
    62a0:	b.w	525c <_svfprintf_r+0x3e4>
    62a4:	add	r2, sp, #108	; 0x6c
    62a6:	ldr	r1, [sp, #12]
    62a8:	ldr	r0, [sp, #20]
    62aa:	bl	63e8 <__ssprint_r>
    62ae:	cmp	r0, #0
    62b0:	bne.w	5064 <_svfprintf_r+0x1ec>
    62b4:	ldr	r4, [sp, #84]	; 0x54
    62b6:	ldr	r3, [sp, #116]	; 0x74
    62b8:	ldr	r2, [sp, #112]	; 0x70
    62ba:	add.w	r9, sp, #160	; 0xa0
    62be:	b.n	5f3c <_svfprintf_r+0x10c4>
    62c0:	mov	sl, r4
    62c2:	movs	r5, #0
    62c4:	b.w	4f2e <_svfprintf_r+0xb6>
    62c8:	adds	r3, #48	; 0x30
    62ca:	movs	r2, #48	; 0x30
    62cc:	strb.w	r3, [sp, #95]	; 0x5f
    62d0:	strb.w	r2, [sp, #94]	; 0x5e
    62d4:	add	r3, sp, #96	; 0x60
    62d6:	b.n	6112 <_svfprintf_r+0x129a>
    62d8:	ldr	r2, [sp, #60]	; 0x3c
    62da:	ldr	r3, [sp, #56]	; 0x38
    62dc:	add	r3, r2
    62de:	movs	r2, #103	; 0x67
    62e0:	str	r3, [sp, #32]
    62e2:	str	r2, [sp, #48]	; 0x30
    62e4:	bic.w	r3, r3, r3, asr #31
    62e8:	b.n	5e7a <_svfprintf_r+0x1002>
    62ea:	ldr	r3, [sp, #100]	; 0x64
    62ec:	b.n	5e40 <_svfprintf_r+0xfc8>
    62ee:	ldr	r6, [pc, #240]	; (63e0 <_svfprintf_r+0x1568>)
    62f0:	ldr	r3, [pc, #240]	; (63e4 <_svfprintf_r+0x156c>)
    62f2:	ldrb.w	r7, [sp, #79]	; 0x4f
    62f6:	b.w	5242 <_svfprintf_r+0x3ca>
    62fa:	ldr	r3, [sp, #56]	; 0x38
    62fc:	ldr	r2, [sp, #60]	; 0x3c
    62fe:	adds	r5, r3, r2
    6300:	add.w	r3, r5, r8
    6304:	str	r3, [sp, #32]
    6306:	bic.w	r3, r3, r3, asr #31
    630a:	b.n	5e7a <_svfprintf_r+0x1002>
    630c:	vcmp.f64	d10, #0.0
    6310:	vmrs	APSR_nzcv, fpscr
    6314:	beq.w	5ff2 <_svfprintf_r+0x117a>
    6318:	rsb	r4, r4, #1
    631c:	str	r4, [sp, #84]	; 0x54
    631e:	add	r1, r4
    6320:	b.n	5e20 <_svfprintf_r+0xfa8>
    6322:	ands.w	r3, fp, #1
    6326:	bne.w	6124 <_svfprintf_r+0x12ac>
    632a:	str	r3, [sp, #56]	; 0x38
    632c:	ldr	r3, [sp, #32]
    632e:	bic.w	r3, r3, r3, asr #31
    6332:	b.n	5e7a <_svfprintf_r+0x1002>
    6334:	ldr	r3, [sp, #56]	; 0x38
    6336:	ldr	r2, [sp, #32]
    6338:	rsb	r3, r3, #1
    633c:	add	r2, r3
    633e:	mov	r3, r2
    6340:	str	r2, [sp, #32]
    6342:	b.n	6228 <_svfprintf_r+0x13b0>
    6344:	cmp.w	r8, #0
    6348:	bne.n	6350 <_svfprintf_r+0x14d8>
    634a:	tst.w	fp, #1
    634e:	beq.n	6360 <_svfprintf_r+0x14e8>
    6350:	ldr	r3, [sp, #60]	; 0x3c
    6352:	adds	r5, r3, #1
    6354:	add.w	r3, r5, r8
    6358:	str	r3, [sp, #32]
    635a:	bic.w	r3, r3, r3, asr #31
    635e:	b.n	5e7a <_svfprintf_r+0x1002>
    6360:	movs	r3, #1
    6362:	str	r3, [sp, #32]
    6364:	b.n	5e7a <_svfprintf_r+0x1002>
    6366:	ldr	r0, [sp, #36]	; 0x24
    6368:	ldrb.w	r3, [sl, #1]
    636c:	ldr	r5, [r0, #0]
    636e:	adds	r0, #4
    6370:	cmp	r5, #0
    6372:	str	r0, [sp, #36]	; 0x24
    6374:	mov	sl, r4
    6376:	bge.w	4f2a <_svfprintf_r+0xb2>
    637a:	mov.w	r5, #4294967295
    637e:	b.w	4f2a <_svfprintf_r+0xb2>
    6382:	strb.w	r1, [sp, #79]	; 0x4f
    6386:	b.w	56a4 <_svfprintf_r+0x82c>
    638a:	strb.w	r1, [sp, #79]	; 0x4f
    638e:	b.w	5730 <_svfprintf_r+0x8b8>
    6392:	ldr	r2, [sp, #20]
    6394:	movs	r3, #12
    6396:	str	r3, [r2, #0]
    6398:	mov.w	r0, #4294967295
    639c:	b.w	5076 <_svfprintf_r+0x1fe>
    63a0:	strb.w	r1, [sp, #79]	; 0x4f
    63a4:	b.w	5550 <_svfprintf_r+0x6d8>
    63a8:	strb.w	r1, [sp, #79]	; 0x4f
    63ac:	b.w	54f6 <_svfprintf_r+0x67e>
    63b0:	strb.w	r1, [sp, #79]	; 0x4f
    63b4:	b.w	565c <_svfprintf_r+0x7e4>
    63b8:	add.w	r3, sp, #94	; 0x5e
    63bc:	b.n	6112 <_svfprintf_r+0x129a>
    63be:	strb.w	r1, [sp, #79]	; 0x4f
    63c2:	b.w	508a <_svfprintf_r+0x212>
    63c6:	strb.w	r1, [sp, #79]	; 0x4f
    63ca:	b.w	5492 <_svfprintf_r+0x61a>
    63ce:	strb.w	r1, [sp, #79]	; 0x4f
    63d2:	b.w	5202 <_svfprintf_r+0x38a>
    63d6:	strb.w	r1, [sp, #79]	; 0x4f
    63da:	b.w	517e <_svfprintf_r+0x306>
    63de:	nop
    63e0:	.word	0x200006ac
    63e4:	.word	0x200006a8

000063e8 <__ssprint_r>:
    63e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63ec:	ldr	r3, [r2, #8]
    63ee:	sub	sp, #12
    63f0:	mov	r8, r2
    63f2:	cmp	r3, #0
    63f4:	beq.n	64dc <__ssprint_r+0xf4>
    63f6:	mov	fp, r0
    63f8:	mov.w	r9, #0
    63fc:	ldr	r6, [r2, #0]
    63fe:	ldr	r0, [r1, #0]
    6400:	ldr	r3, [r1, #8]
    6402:	mov	r5, r1
    6404:	mov	r4, r9
    6406:	cmp	r4, #0
    6408:	beq.n	6496 <__ssprint_r+0xae>
    640a:	cmp	r4, r3
    640c:	mov	r7, r3
    640e:	mov	sl, r3
    6410:	bcc.n	64a0 <__ssprint_r+0xb8>
    6412:	ldrh	r3, [r5, #12]
    6414:	tst.w	r3, #1152	; 0x480
    6418:	beq.n	6476 <__ssprint_r+0x8e>
    641a:	ldr	r7, [r5, #20]
    641c:	ldr	r1, [r5, #16]
    641e:	add.w	r7, r7, r7, lsl #1
    6422:	rsb	sl, r1, r0
    6426:	add.w	r7, r7, r7, lsr #31
    642a:	adds	r0, r4, #1
    642c:	asrs	r7, r7, #1
    642e:	add	r0, sl
    6430:	cmp	r0, r7
    6432:	mov	r2, r7
    6434:	itt	hi
    6436:	movhi	r7, r0
    6438:	movhi	r2, r7
    643a:	lsls	r3, r3, #21
    643c:	bpl.n	64a6 <__ssprint_r+0xbe>
    643e:	mov	r1, r2
    6440:	mov	r0, fp
    6442:	bl	2970 <_malloc_r>
    6446:	cmp	r0, #0
    6448:	beq.n	64ba <__ssprint_r+0xd2>
    644a:	mov	r2, sl
    644c:	ldr	r1, [r5, #16]
    644e:	str	r0, [sp, #4]
    6450:	bl	2640 <memcpy>
    6454:	ldrh	r2, [r5, #12]
    6456:	ldr	r3, [sp, #4]
    6458:	bic.w	r2, r2, #1152	; 0x480
    645c:	orr.w	r2, r2, #128	; 0x80
    6460:	strh	r2, [r5, #12]
    6462:	rsb	r2, sl, r7
    6466:	add.w	r0, r3, sl
    646a:	str	r7, [r5, #20]
    646c:	str	r3, [r5, #16]
    646e:	str	r0, [r5, #0]
    6470:	str	r2, [r5, #8]
    6472:	mov	r7, r4
    6474:	mov	sl, r4
    6476:	mov	r2, sl
    6478:	mov	r1, r9
    647a:	bl	2f0c <memmove>
    647e:	ldr.w	r2, [r8, #8]
    6482:	ldr	r3, [r5, #8]
    6484:	ldr	r0, [r5, #0]
    6486:	subs	r3, r3, r7
    6488:	add	r0, sl
    648a:	subs	r4, r2, r4
    648c:	str	r3, [r5, #8]
    648e:	str	r0, [r5, #0]
    6490:	str.w	r4, [r8, #8]
    6494:	cbz	r4, 64dc <__ssprint_r+0xf4>
    6496:	ldr.w	r9, [r6]
    649a:	ldr	r4, [r6, #4]
    649c:	adds	r6, #8
    649e:	b.n	6406 <__ssprint_r+0x1e>
    64a0:	mov	r7, r4
    64a2:	mov	sl, r4
    64a4:	b.n	6476 <__ssprint_r+0x8e>
    64a6:	mov	r0, fp
    64a8:	bl	3078 <_realloc_r>
    64ac:	mov	r3, r0
    64ae:	cmp	r0, #0
    64b0:	bne.n	6462 <__ssprint_r+0x7a>
    64b2:	ldr	r1, [r5, #16]
    64b4:	mov	r0, fp
    64b6:	bl	3748 <_free_r>
    64ba:	movs	r3, #12
    64bc:	str.w	r3, [fp]
    64c0:	ldrh	r3, [r5, #12]
    64c2:	movs	r2, #0
    64c4:	orr.w	r3, r3, #64	; 0x40
    64c8:	mov.w	r0, #4294967295
    64cc:	strh	r3, [r5, #12]
    64ce:	str.w	r2, [r8, #8]
    64d2:	str.w	r2, [r8, #4]
    64d6:	add	sp, #12
    64d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64dc:	movs	r0, #0
    64de:	str.w	r0, [r8, #4]
    64e2:	add	sp, #12
    64e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000064e8 <__aeabi_uldivmod>:
    64e8:	cbnz	r3, 6500 <__aeabi_uldivmod+0x18>
    64ea:	cbnz	r2, 6500 <__aeabi_uldivmod+0x18>
    64ec:	cmp	r1, #0
    64ee:	it	eq
    64f0:	cmpeq	r0, #0
    64f2:	itt	ne
    64f4:	movne.w	r1, #4294967295
    64f8:	movne.w	r0, #4294967295
    64fc:	b.w	67fc <__aeabi_idiv0>
    6500:	sub.w	ip, sp, #8
    6504:	strd	ip, lr, [sp, #-16]!
    6508:	bl	6518 <__udivmoddi4>
    650c:	ldr.w	lr, [sp, #4]
    6510:	ldrd	r2, r3, [sp, #8]
    6514:	add	sp, #16
    6516:	bx	lr

00006518 <__udivmoddi4>:
    6518:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    651c:	mov	ip, r1
    651e:	mov	r6, r1
    6520:	mov	r4, r0
    6522:	ldr	r5, [sp, #32]
    6524:	cmp	r3, #0
    6526:	bne.n	65ca <__udivmoddi4+0xb2>
    6528:	cmp	r2, r1
    652a:	mov	r7, r2
    652c:	bls.n	6608 <__udivmoddi4+0xf0>
    652e:	clz	lr, r2
    6532:	cmp.w	lr, #0
    6536:	beq.n	6550 <__udivmoddi4+0x38>
    6538:	rsb	r4, lr, #32
    653c:	lsr.w	r4, r0, r4
    6540:	lsl.w	r6, r1, lr
    6544:	orr.w	ip, r4, r6
    6548:	lsl.w	r7, r2, lr
    654c:	lsl.w	r4, r0, lr
    6550:	mov.w	r9, r7, lsr #16
    6554:	lsrs	r2, r4, #16
    6556:	udiv	r0, ip, r9
    655a:	uxth.w	r8, r7
    655e:	mls	r6, r9, r0, ip
    6562:	orr.w	r6, r2, r6, lsl #16
    6566:	mul.w	r3, r0, r8
    656a:	cmp	r3, r6
    656c:	bls.n	6582 <__udivmoddi4+0x6a>
    656e:	adds	r6, r6, r7
    6570:	add.w	r2, r0, #4294967295
    6574:	bcs.w	67bc <__udivmoddi4+0x2a4>
    6578:	cmp	r3, r6
    657a:	bls.w	67bc <__udivmoddi4+0x2a4>
    657e:	subs	r0, #2
    6580:	add	r6, r7
    6582:	subs	r6, r6, r3
    6584:	uxth	r2, r4
    6586:	udiv	r3, r6, r9
    658a:	mls	r6, r9, r3, r6
    658e:	orr.w	r4, r2, r6, lsl #16
    6592:	mul.w	r8, r3, r8
    6596:	cmp	r8, r4
    6598:	bls.n	65ae <__udivmoddi4+0x96>
    659a:	adds	r4, r4, r7
    659c:	add.w	r2, r3, #4294967295
    65a0:	bcs.w	67b8 <__udivmoddi4+0x2a0>
    65a4:	cmp	r8, r4
    65a6:	bls.w	67b8 <__udivmoddi4+0x2a0>
    65aa:	subs	r3, #2
    65ac:	add	r4, r7
    65ae:	rsb	r4, r8, r4
    65b2:	orr.w	r0, r3, r0, lsl #16
    65b6:	movs	r1, #0
    65b8:	cmp	r5, #0
    65ba:	beq.n	6682 <__udivmoddi4+0x16a>
    65bc:	lsr.w	r4, r4, lr
    65c0:	movs	r3, #0
    65c2:	str	r4, [r5, #0]
    65c4:	str	r3, [r5, #4]
    65c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65ca:	cmp	r3, r1
    65cc:	bls.n	65de <__udivmoddi4+0xc6>
    65ce:	cmp	r5, #0
    65d0:	beq.n	667e <__udivmoddi4+0x166>
    65d2:	movs	r1, #0
    65d4:	stmia.w	r5, {r0, r6}
    65d8:	mov	r0, r1
    65da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65de:	clz	r1, r3
    65e2:	cmp	r1, #0
    65e4:	bne.w	6708 <__udivmoddi4+0x1f0>
    65e8:	cmp	r3, r6
    65ea:	bcc.n	65f2 <__udivmoddi4+0xda>
    65ec:	cmp	r2, r0
    65ee:	bhi.w	67e2 <__udivmoddi4+0x2ca>
    65f2:	subs	r4, r0, r2
    65f4:	sbc.w	r6, r6, r3
    65f8:	movs	r0, #1
    65fa:	mov	ip, r6
    65fc:	cmp	r5, #0
    65fe:	beq.n	6682 <__udivmoddi4+0x16a>
    6600:	stmia.w	r5, {r4, ip}
    6604:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6608:	cbnz	r2, 6610 <__udivmoddi4+0xf8>
    660a:	movs	r7, #1
    660c:	udiv	r7, r7, r2
    6610:	clz	lr, r7
    6614:	cmp.w	lr, #0
    6618:	bne.n	6686 <__udivmoddi4+0x16e>
    661a:	subs	r3, r6, r7
    661c:	mov.w	r8, r7, lsr #16
    6620:	uxth.w	ip, r7
    6624:	movs	r1, #1
    6626:	udiv	r0, r3, r8
    662a:	lsrs	r2, r4, #16
    662c:	mls	r6, r8, r0, r3
    6630:	orr.w	r6, r2, r6, lsl #16
    6634:	mul.w	r3, ip, r0
    6638:	cmp	r3, r6
    663a:	bls.n	664c <__udivmoddi4+0x134>
    663c:	adds	r6, r6, r7
    663e:	add.w	r2, r0, #4294967295
    6642:	bcs.n	664a <__udivmoddi4+0x132>
    6644:	cmp	r3, r6
    6646:	bhi.w	67e6 <__udivmoddi4+0x2ce>
    664a:	mov	r0, r2
    664c:	subs	r6, r6, r3
    664e:	uxth	r2, r4
    6650:	udiv	r3, r6, r8
    6654:	mls	r6, r8, r3, r6
    6658:	orr.w	r4, r2, r6, lsl #16
    665c:	mul.w	ip, ip, r3
    6660:	cmp	ip, r4
    6662:	bls.n	6674 <__udivmoddi4+0x15c>
    6664:	adds	r4, r4, r7
    6666:	add.w	r2, r3, #4294967295
    666a:	bcs.n	6672 <__udivmoddi4+0x15a>
    666c:	cmp	ip, r4
    666e:	bhi.w	67dc <__udivmoddi4+0x2c4>
    6672:	mov	r3, r2
    6674:	rsb	r4, ip, r4
    6678:	orr.w	r0, r3, r0, lsl #16
    667c:	b.n	65b8 <__udivmoddi4+0xa0>
    667e:	mov	r1, r5
    6680:	mov	r0, r5
    6682:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6686:	rsb	r1, lr, #32
    668a:	lsl.w	r3, r6, lr
    668e:	lsl.w	r7, r7, lr
    6692:	lsr.w	r9, r0, r1
    6696:	mov.w	r8, r7, lsr #16
    669a:	lsrs	r6, r1
    669c:	orr.w	r9, r9, r3
    66a0:	udiv	sl, r6, r8
    66a4:	mov.w	r4, r9, lsr #16
    66a8:	mls	r6, r8, sl, r6
    66ac:	uxth.w	ip, r7
    66b0:	orr.w	r3, r4, r6, lsl #16
    66b4:	mul.w	r2, sl, ip
    66b8:	cmp	r2, r3
    66ba:	lsl.w	r4, r0, lr
    66be:	bls.n	66d6 <__udivmoddi4+0x1be>
    66c0:	adds	r3, r3, r7
    66c2:	add.w	r1, sl, #4294967295
    66c6:	bcs.w	67d8 <__udivmoddi4+0x2c0>
    66ca:	cmp	r2, r3
    66cc:	bls.w	67d8 <__udivmoddi4+0x2c0>
    66d0:	sub.w	sl, sl, #2
    66d4:	add	r3, r7
    66d6:	subs	r3, r3, r2
    66d8:	uxth.w	r9, r9
    66dc:	udiv	r1, r3, r8
    66e0:	mls	r3, r8, r1, r3
    66e4:	orr.w	r3, r9, r3, lsl #16
    66e8:	mul.w	r6, r1, ip
    66ec:	cmp	r6, r3
    66ee:	bls.n	6700 <__udivmoddi4+0x1e8>
    66f0:	adds	r3, r3, r7
    66f2:	add.w	r2, r1, #4294967295
    66f6:	bcs.n	67d0 <__udivmoddi4+0x2b8>
    66f8:	cmp	r6, r3
    66fa:	bls.n	67d0 <__udivmoddi4+0x2b8>
    66fc:	subs	r1, #2
    66fe:	add	r3, r7
    6700:	subs	r3, r3, r6
    6702:	orr.w	r1, r1, sl, lsl #16
    6706:	b.n	6626 <__udivmoddi4+0x10e>
    6708:	rsb	lr, r1, #32
    670c:	lsr.w	r4, r2, lr
    6710:	lsls	r3, r1
    6712:	orrs	r3, r4
    6714:	lsr.w	r7, r0, lr
    6718:	lsl.w	r4, r6, r1
    671c:	mov.w	ip, r3, lsr #16
    6720:	lsr.w	r6, r6, lr
    6724:	orrs	r4, r7
    6726:	udiv	r9, r6, ip
    672a:	lsrs	r7, r4, #16
    672c:	mls	r6, ip, r9, r6
    6730:	uxth.w	r8, r3
    6734:	orr.w	r6, r7, r6, lsl #16
    6738:	mul.w	r7, r9, r8
    673c:	cmp	r7, r6
    673e:	lsl.w	r2, r2, r1
    6742:	lsl.w	sl, r0, r1
    6746:	bls.n	675a <__udivmoddi4+0x242>
    6748:	adds	r6, r6, r3
    674a:	add.w	r0, r9, #4294967295
    674e:	bcs.n	67d4 <__udivmoddi4+0x2bc>
    6750:	cmp	r7, r6
    6752:	bls.n	67d4 <__udivmoddi4+0x2bc>
    6754:	sub.w	r9, r9, #2
    6758:	add	r6, r3
    675a:	subs	r6, r6, r7
    675c:	uxth	r0, r4
    675e:	udiv	r4, r6, ip
    6762:	mls	r6, ip, r4, r6
    6766:	orr.w	r7, r0, r6, lsl #16
    676a:	mul.w	r8, r4, r8
    676e:	cmp	r8, r7
    6770:	bls.n	6782 <__udivmoddi4+0x26a>
    6772:	adds	r7, r7, r3
    6774:	add.w	r0, r4, #4294967295
    6778:	bcs.n	67cc <__udivmoddi4+0x2b4>
    677a:	cmp	r8, r7
    677c:	bls.n	67cc <__udivmoddi4+0x2b4>
    677e:	subs	r4, #2
    6780:	add	r7, r3
    6782:	orr.w	r0, r4, r9, lsl #16
    6786:	rsb	r7, r8, r7
    678a:	umull	r8, r9, r0, r2
    678e:	cmp	r7, r9
    6790:	mov	r4, r8
    6792:	mov	r6, r9
    6794:	bcc.n	67c0 <__udivmoddi4+0x2a8>
    6796:	beq.n	67ec <__udivmoddi4+0x2d4>
    6798:	cbz	r5, 67f4 <__udivmoddi4+0x2dc>
    679a:	subs.w	r3, sl, r4
    679e:	sbc.w	r7, r7, r6
    67a2:	lsl.w	lr, r7, lr
    67a6:	lsrs	r3, r1
    67a8:	lsrs	r7, r1
    67aa:	orr.w	r3, lr, r3
    67ae:	stmia.w	r5, {r3, r7}
    67b2:	movs	r1, #0
    67b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67b8:	mov	r3, r2
    67ba:	b.n	65ae <__udivmoddi4+0x96>
    67bc:	mov	r0, r2
    67be:	b.n	6582 <__udivmoddi4+0x6a>
    67c0:	subs.w	r4, r8, r2
    67c4:	sbc.w	r6, r9, r3
    67c8:	subs	r0, #1
    67ca:	b.n	6798 <__udivmoddi4+0x280>
    67cc:	mov	r4, r0
    67ce:	b.n	6782 <__udivmoddi4+0x26a>
    67d0:	mov	r1, r2
    67d2:	b.n	6700 <__udivmoddi4+0x1e8>
    67d4:	mov	r9, r0
    67d6:	b.n	675a <__udivmoddi4+0x242>
    67d8:	mov	sl, r1
    67da:	b.n	66d6 <__udivmoddi4+0x1be>
    67dc:	subs	r3, #2
    67de:	add	r4, r7
    67e0:	b.n	6674 <__udivmoddi4+0x15c>
    67e2:	mov	r0, r1
    67e4:	b.n	65fc <__udivmoddi4+0xe4>
    67e6:	subs	r0, #2
    67e8:	add	r6, r7
    67ea:	b.n	664c <__udivmoddi4+0x134>
    67ec:	cmp	sl, r8
    67ee:	bcc.n	67c0 <__udivmoddi4+0x2a8>
    67f0:	mov	r6, r7
    67f2:	b.n	6798 <__udivmoddi4+0x280>
    67f4:	mov	r1, r5
    67f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67fa:	nop

000067fc <__aeabi_idiv0>:
    67fc:	bx	lr
    67fe:	nop

00006800 <___init_veneer>:
    6800:	ldr.w	pc, [pc]	; 6804 <___init_veneer+0x4>
    6804:	.word	0x600016e9
	...

Disassembly of section .fini:

00006810 <_fini>:
    6810:	push	{r3, r4, r5, r6, r7, lr}
    6812:	nop
