
.vsteensy/build/01_HelloEncoder.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`.M......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	6000133c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	600016f0 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016b0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013a0 <usb_init>
	analog_init();
600011e4:	bl	6000148c <analog_init>
	pwm_init();
600011e8:	bl	600016b8 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e4 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600016e0 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	600016d0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600016c8 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001700
60001220:	.word	0x00002ad0
60001224:	.word	0x20000000
60001228:	.word	0x600041dc
6000122c:	.word	0x20000bf0
60001230:	.word	0x20000bf0
60001234:	.word	0x200032c0
60001238:	.word	0xe000ed88
6000123c:	.word	0x20000ffc
60001240:	.word	0x00000b05
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x000008f5
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x000009f9
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20000c48
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20000c50
60001290:	.word	0x20001000
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_32M	(SCB_MPU_RASR_SIZE(24) | SCB_MPU_RASR_ENABLE)
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	ldr	r2, [pc, #100]	; (60001304 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	ldr	r3, [pc, #100]	; (60001308 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	ldr	r0, [pc, #96]	; (6000130c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	ldr	r6, [pc, #96]	; (60001310 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	ldr	r5, [pc, #100]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b2:	ldr	r7, [pc, #100]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	ldr	r6, [pc, #92]	; (6000131c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012be:	ldr	r5, [pc, #96]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012c0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c4:	ldr	r7, [pc, #92]	; (60001324 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	ldr	r6, [pc, #92]	; (60001328 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012ca:	ldr	r5, [pc, #96]	; (6000132c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012cc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ce:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d0:	ldr	r7, [pc, #92]	; (60001330 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r6, [pc, #92]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d6:	ldr	r5, [pc, #96]	; (60001338 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012da:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012dc:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012de:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012e0:	dsb	sy
	asm("isb");
600012e4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012e8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012ec:	dsb	sy
	asm("isb");
600012f0:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600012f4:	ldr.w	r3, [r2, #-136]
600012f8:	orr.w	r3, r3, #196608	; 0x30000
600012fc:	str.w	r3, [r2, #-136]
60001300:	pop	{r4, r5, r6, r7, pc}
60001302:	nop
60001304:	.word	0xe000ed9c
60001308:	.word	0xe000eda0
6000130c:	.word	0xe000ed94
60001310:	.word	0x03080025
60001314:	.word	0x00200011
60001318:	.word	0x07020021
6000131c:	.word	0x20000012
60001320:	.word	0x13080025
60001324:	.word	0x20200013
60001328:	.word	0x130b0027
6000132c:	.word	0x40000014
60001330:	.word	0x13100033
60001334:	.word	0x60000015
60001338:	.word	0x070b002f

6000133c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000133c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000133e:	ldr	r2, [pc, #92]	; (6000139c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001340:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001342:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001346:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000134a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000134e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001352:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001356:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001358:	tst.w	r3, #2
6000135c:	beq.n	6000136c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000135e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001360:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001362:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001364:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001366:	tst.w	r3, #2
6000136a:	bne.n	6000135e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000136c:	tst.w	r3, #8192	; 0x2000
60001370:	bne.n	60001376 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001372:	str	r5, [r2, #20]
			continue;
60001374:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001376:	tst.w	r3, #4096	; 0x1000
6000137a:	bne.n	60001380 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000137c:	str	r6, [r2, #20]
			continue;
6000137e:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001380:	cmp	r3, #0
60001382:	bge.n	60001356 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001384:	tst.w	r3, #65536	; 0x10000
60001388:	beq.n	6000138e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000138a:	str	r1, [r2, #24]
			continue;
6000138c:	b.n	60001356 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000138e:	lsls	r3, r3, #25
60001390:	bmi.n	60001396 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001392:	str	r7, [r2, #20]
			continue;
60001394:	b.n	60001356 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001396:	pop	{r4, r5, r6, r7}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400d8000

600013a0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a0:	ldr	r3, [pc, #192]	; (60001464 <usb_init+0xc4>)
600013a2:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600013a6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013ac:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013b0:	bl	600016d8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b4:	ldr	r1, [pc, #176]	; (60001468 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013b6:	ldr	r0, [pc, #180]	; (6000146c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013bc:	ldr	r4, [pc, #176]	; (60001470 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013be:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013c2:	ldr	r3, [pc, #176]	; (60001474 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013c4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013c8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013cc:	ldr	r2, [r4, #0]
600013ce:	ands	r3, r2
600013d0:	cbnz	r3, 600013da <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013d2:	ldr.w	r3, [r0, #424]	; 0x1a8
600013d6:	lsls	r2, r3, #30
600013d8:	beq.n	60001410 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013da:	ldr	r3, [pc, #144]	; (6000146c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013dc:	mov.w	r1, #2147483648	; 0x80000000
600013e0:	ldr	r2, [pc, #140]	; (60001470 <usb_init+0xd0>)
600013e2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013e4:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013e6:	ldr.w	r1, [r3, #320]	; 0x140
600013ea:	orr.w	r1, r1, #2
600013ee:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013f2:	ldr.w	r3, [r2, #320]	; 0x140
600013f6:	lsls	r3, r3, #30
600013f8:	bmi.n	600013f2 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600013fa:	mov.w	r0, #131072	; 0x20000
600013fe:	ldr	r1, [pc, #120]	; (60001478 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001400:	ldr	r3, [pc, #108]	; (60001470 <usb_init+0xd0>)
60001402:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001406:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001408:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000140a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000140c:	bl	600016c0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001410:	ldr	r5, [pc, #104]	; (6000147c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001412:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001414:	ldr	r3, [pc, #88]	; (60001470 <usb_init+0xd0>)
60001416:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000141a:	ldr	r4, [pc, #80]	; (6000146c <usb_init+0xcc>)
6000141c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000141e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001420:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001422:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001424:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001426:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000142a:	mov.w	r2, #640	; 0x280
6000142e:	bl	600016e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001432:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001436:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000143a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000143e:	ldr	r2, [pc, #64]	; (60001480 <usb_init+0xe0>)
60001440:	ldr	r1, [pc, #64]	; (60001484 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001442:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001444:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001446:	str.w	r5, [r4, #344]	; 0x158
6000144a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000144e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001452:	ldr	r2, [pc, #52]	; (60001488 <usb_init+0xe8>)
60001454:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001458:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000145a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000145c:	str.w	r3, [r4, #320]	; 0x140
60001460:	pop	{r4, r5, r6, pc}
60001462:	nop
60001464:	.word	0x400d8000
60001468:	.word	0x400fc000
6000146c:	.word	0x402e0000
60001470:	.word	0x400d9000
60001474:	.word	0x001e1c00
60001478:	.word	0xe000e28c
6000147c:	.word	0x20003000
60001480:	.word	0x20001000
60001484:	.word	0x00001459
60001488:	.word	0xe000e10c

6000148c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000148c:	ldr	r3, [pc, #68]	; (600014d4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148e:	ldr	r1, [pc, #72]	; (600014d8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001490:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001492:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001494:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001498:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000149a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000149c:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014a2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a4:	orr.w	r0, r0, #768	; 0x300
600014a8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014aa:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014ac:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ae:	ldr	r3, [r2, #72]	; 0x48
600014b0:	lsls	r3, r3, #24
600014b2:	bmi.n	600014ae <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014b4:	ldr	r3, [pc, #36]	; (600014dc <analog_init+0x50>)
600014b6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014ba:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014bc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014be:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014c0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014c2:	ldr	r3, [r2, #72]	; 0x48
600014c4:	ands.w	r3, r3, #128	; 0x80
600014c8:	bne.n	600014c2 <analog_init+0x36>
	calibrating = 0;
600014ca:	ldr	r2, [pc, #20]	; (600014e0 <analog_init+0x54>)
600014cc:	strb	r3, [r2, #0]
}
600014ce:	pop	{r4, r5}
600014d0:	bx	lr
600014d2:	nop
600014d4:	.word	0x400fc000
600014d8:	.word	0x400c4000
600014dc:	.word	0x400c8000
600014e0:	.word	0x20000e99

600014e4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e4:	ldr	r2, [pc, #216]	; (600015c0 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014e6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014e8:	ldr	r1, [pc, #216]	; (600015c4 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ea:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ee:	ldr	r3, [r2, #0]
600014f0:	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

FLASHMEM void tempmon_init(void)
{
600014f4:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014f8:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014fc:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #212]	; 600015d8 <tempmon_init+0xf4>
60001504:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001506:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150a:	ldr	r7, [pc, #188]	; (600015c8 <tempmon_init+0xe4>)
6000150c:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001514:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	vmov	s15, r0
60001528:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000152c:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000152e:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001532:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001536:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153a:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000153c:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001540:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001544:	ldr	r5, [pc, #132]	; (600015cc <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001546:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001550:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001554:	ldr	r6, [pc, #120]	; (600015d0 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001556:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155a:	ldr	r1, [pc, #120]	; (600015d4 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000155c:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155e:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001560:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001564:	vmov	s15, r3
60001568:	vcvt.f32.u32	s15, s15
6000156c:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001570:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001578:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000157c:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001580:	vmov	r3, s11
60001584:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158c:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001590:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001592:	and.w	r1, r1, r0, lsl #16
60001596:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159e:	orrs	r3, r1
600015a0:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a4:	vmov	r3, s15
600015a8:	ldr.w	r1, [r2, #272]	; 0x110
600015ac:	ubfx	r3, r3, #0, #12
600015b0:	orrs	r3, r1
600015b2:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015b6:	ldr	r3, [r2, #0]
600015b8:	orr.w	r3, r3, #2
600015bc:	str	r3, [r2, #0]
600015be:	pop	{r4, r5, r6, r7, pc}
600015c0:	.word	0x400d8180
600015c4:	.word	0x401f4400
600015c8:	.word	0x20000ea4
600015cc:	.word	0x20000ea0
600015d0:	.word	0x20000ea8
600015d4:	.word	0x0fff0000
600015d8:	.word	0x20000e9c

600015dc <usb_string_product_name_default>:
600015dc:	..U.S.B. .S.e.r.
600015ec:	i.a.l...

600015f4 <usb_string_manufacturer_name_default>:
600015f4:	..T.e.e.n.s.y.d.
60001604:	u.i.n.o.

6000160c <string0>:
6000160c:	....

60001610 <usb_config_descriptor_12>:
60001610:	..C.....2.......
60001620:	...$....$....$..
60001630:	.$..............
60001640:	.........@......
60001650:	@...

60001654 <usb_config_descriptor_480>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	................
60001694:	....

60001698 <qualifier_descriptor>:
60001698:	.......@....

600016a4 <_init>:
600016a4:	push	{r3, r4, r5, r6, r7, lr}
600016a6:	nop
600016a8:	pop	{r3, r4, r5, r6, r7}
600016aa:	pop	{r3}
600016ac:	mov	lr, r3
600016ae:	bx	lr

600016b0 <__startup_early_hook_veneer>:
600016b0:	ldr.w	pc, [pc]	; 600016b4 <__startup_early_hook_veneer+0x4>
600016b4:	.word	0x00000b1d

600016b8 <__pwm_init_veneer>:
600016b8:	ldr.w	pc, [pc]	; 600016bc <__pwm_init_veneer+0x4>
600016bc:	.word	0x00001c3d

600016c0 <__delay_veneer>:
600016c0:	ldr.w	pc, [pc]	; 600016c4 <__delay_veneer+0x4>
600016c4:	.word	0x00000619

600016c8 <__main_veneer>:
600016c8:	ldr.w	pc, [pc]	; 600016cc <__main_veneer+0x4>
600016cc:	.word	0x00000765

600016d0 <____libc_init_array_veneer>:
600016d0:	ldr.w	pc, [pc]	; 600016d4 <____libc_init_array_veneer+0x4>
600016d4:	.word	0x0000211d

600016d8 <__usb_init_serialnumber_veneer>:
600016d8:	ldr.w	pc, [pc]	; 600016dc <__usb_init_serialnumber_veneer+0x4>
600016dc:	.word	0x00001ef5

600016e0 <__startup_late_hook_veneer>:
600016e0:	ldr.w	pc, [pc]	; 600016e4 <__startup_late_hook_veneer+0x4>
600016e4:	.word	0x00000b21

600016e8 <__memset_veneer>:
600016e8:	ldr.w	pc, [pc]	; 600016ec <__memset_veneer+0x4>
600016ec:	.word	0x000026ed

600016f0 <__set_arm_clock_veneer>:
600016f0:	ldr.w	pc, [pc]	; 600016f4 <__set_arm_clock_veneer+0x4>
600016f4:	.word	0x00000355

600016f8 <__init_array_start>:
600016f8:	.word	0x00000045
600016fc:	.word	0x000001ed

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	.short	0xb933
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	lsrs	r0, r6, #15
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	cmp	r2, #212	; 0xd4
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	.word	0xbf004718
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r6, #15
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	.word	0x00002ad4
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	lsrs	r0, r6, #15
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <EncPlex::Encoder::~Encoder()>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
      7c:	ldr	r3, [r0, #24]
#include "core_pins.h"

namespace EncPlex
{
    // Simple Encoder implementation which reads phase A and B from two digital pins
    class Encoder : public EncoderBase
      7e:	.short	0xb510
      80:	mov	r4, r0
      82:	.short	0xb123
	_M_manager(_M_functor, _M_functor, __destroy_functor);
      84:	add.w	r1, r0, #16
      88:	movs	r2, #3
      8a:	.short	0x4608
      8c:	blx	r3
      8e:	.short	0x4620
      90:	pop	{r4, pc}
      92:	.short	0xbf00

00000094 <setup>:
//using namespace pins;

EncPlex::Encoder enc1(0, 1, INPUT_PULLUP);

void setup()
{
      94:	push	{r4, lr}
    pinMode(LED_BUILTIN, OUTPUT);
      96:	movs	r1, #1
        setStepsPerDetent(4);
    }

    void Encoder::begin()
    {
        pinMode(pinA, mode);
      98:	.word	0x200d4c0a
      9c:	bl	6e4 <pinMode>
    pinMode(14, OUTPUT);
      a0:	.word	0x200e2101
      a4:	bl	6e4 <pinMode>
      a8:	.word	0x1034f894
      ac:	ldrb.w	r0, [r4, #44]	; 0x2c
      b0:	.word	0xfb18f000
        pinMode(pinB, mode);
      b4:	ldrb.w	r1, [r4, #52]	; 0x34
      b8:	.word	0x0030f894
    enc1.begin();

    // pin<0>().slowSlewRateEnable(true);
    // pin<1>().slowSlewRateEnable(true);
}
      bc:	ldmia.w	sp!, {r4, lr}
      c0:	b.w	6e4 <pinMode>
      c4:	.word	0x20000c0c

000000c8 <loop>:

elapsedMillis stopwatch;

void loop()
{
      c8:	ldr	r3, [pc, #256]	; (1cc <loop+0x104>)
      ca:	.short	0x4a41
      cc:	ldrb.w	r1, [r3, #44]	; 0x2c
      d0:	.word	0x3030f893
      d4:	lsls	r1, r1, #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
      d6:	.short	0x483f
      d8:	lsls	r3, r3, #4
      da:	.short	0xf852
      dc:	stmia	r0!, {r0}
      de:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e2:	.short	0x1854
      e4:	adds	r1, r2, r3
      e6:	.short	0xb083
      e8:	movs	r6, #5
      ea:	.short	0xf8df
      ec:	strh	r4, [r7, #6]
      ee:	.short	0xf852
      f0:	b.n	fa <loop+0x32>
      f2:	.short	0x68e5
      f4:	ldr	r7, [r1, #12]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
      f6:	.short	0xf8df
      f8:	str	r0, [sp, #928]	; 0x3a0
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
      fa:	ldr.w	r3, [ip, #8]
      fe:	ldr.w	r2, [lr, #8]
     102:	ands	r3, r5
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     104:	ldr	r4, [r0, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     106:	ldr.w	r1, [r8]
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     10a:	.short	0x9301
     10c:	it	ne
     10e:	.short	0xf04f
     110:	lsrs	r1, r0, #8

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     112:	umullne	r3, r1, r9, r1
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     116:	it	eq
     118:	moveq.w	sl, #0
     11c:	ands	r2, r7

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     11e:	mov.w	r1, r1, lsr #18
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     122:	ite	ne
     124:	movne.w	fp, #1
     128:	moveq.w	fp, #0

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     12c:	.word	0x68030049
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     130:	subs	r3, r3, r4
     132:	.short	0x4299
     134:	bhi.n	12e <loop+0x66>
			return (CORE_PIN33_PINREG & CORE_PIN33_BITMASK) ? 1 : 0;
		} else {
			return 0;
		}
	} else {
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
     136:	.short	0xf8dc
     138:	adds	r0, #8
     13a:	ldr.w	r1, [lr, #8]
            a1 = digitalReadFast(pinA);
            b1 = digitalReadFast(pinB);
            delayMicroseconds(2);
            a2 = digitalReadFast(pinA);
            b2 = digitalReadFast(pinB);
            if ((a1 == a2) && (b1 == b2)) break;
     13e:	.short	0x422b
     140:	ite	ne
     142:	movne	r3, #1
     144:	.word	0x45532300
     148:	bne.n	156 <loop+0x8e>
     14a:	.short	0x4239
     14c:	ite	ne
     14e:	movne	r3, #1
     150:	.word	0x455b2300
     154:	beq.n	170 <loop+0xa8>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     156:	.short	0x6804
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     158:	ldr.w	r1, [r8]
     15c:	.word	0x3101fba9
     160:	lsrs	r1, r1, #18
     162:	.short	0x0049
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     164:	ldr	r3, [r0, #0]
     166:	.short	0x1b1b
     168:	cmp	r1, r3
     16a:	bhi.n	164 <loop+0x9c>	; unpredictable <IT:eq>
    // Inline implementation ===============================================

    void Encoder::Encoder::tick()
    {
        int a1, a2, b1, b2;
        for (unsigned i = 0; i < 5; i++)
     16c:	.word	0xd1c43e01
            b2 = digitalReadFast(pinB);
            if ((a1 == a2) && (b1 == b2)) break;
            delayMicroseconds(2);
        }

        update(!a1, !b1);
     170:	ldr	r3, [sp, #4]
     172:	.short	0xfab2
     174:			; <UNDEFINED> instruction: 0xf2824e15
     178:	clz	r1, r3
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     17c:	ldr	r5, [pc, #88]	; (1d8 <loop+0x110>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     17e:	ldr	r4, [pc, #92]	; (1dc <loop+0x114>)
     180:	lsrs	r2, r2, #5
     182:	lsrs	r1, r1, #5
     184:	mov	r0, r6
     186:	bl	288 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>
     18a:	ldr	r3, [r5, #0]
    enc1.tick();

    if(stopwatch > 50)
     18c:	ldr	r2, [r4, #0]
     18e:	subs	r3, r3, r2
     190:	cmp	r3, #50	; 0x32
     192:	bhi.n	1b8 <loop+0xf0>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     194:	ldr	r2, [pc, #60]	; (1d4 <loop+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     196:	movs	r3, #100	; 0x64
     198:	ldr	r4, [pc, #68]	; (1e0 <loop+0x118>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     19a:	ldr	r0, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     19c:	ldr.w	r1, [r8]
     1a0:	umull	r4, r1, r4, r1
     1a4:	lsrs	r1, r1, #18
     1a6:	mul.w	r1, r3, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     1aa:	ldr	r3, [r2, #0]
     1ac:	subs	r3, r3, r0
     1ae:	cmp	r1, r3
     1b0:	bhi.n	1aa <loop+0xe2>
    {
        Serial.println(enc1.read());
        stopwatch = 0;
    }
    delayMicroseconds(100);
     1b2:	add	sp, #12
     1b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
     1b8:	ldr	r1, [r6, #0]
     1ba:	ldr	r0, [pc, #40]	; (1e4 <loop+0x11c>)
     1bc:	bl	aec <Print::print(long)>
     1c0:	ldr	r0, [pc, #32]	; (1e4 <loop+0x11c>)
     1c2:	bl	a4c <Print::println()>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     1c6:	ldr	r3, [r5, #0]
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
     1c8:	str	r3, [r4, #0]
     1ca:	b.n	194 <loop+0xcc>
     1cc:	.word	0x20000c0c
     1d0:	.word	0x20000038
     1d4:	.word	0xe0001004
     1d8:	.word	0x20000c50
     1dc:	.word	0x20000c44
     1e0:	.word	0x431bde83
     1e4:	.word	0x20000364
     1e8:	.word	0x2000035c

000001ec <_GLOBAL__sub_I_enc1>:
     1ec:	push	{r3, r4, r5, lr}
    }

    Encoder::Encoder(int _pinA, int _pinB, int _mode)
        : pinA(_pinA), pinB(_pinB), mode(_mode)
     1ee:	ldr	r4, [pc, #68]	; (234 <_GLOBAL__sub_I_enc1+0x48>)
     1f0:	movs	r5, #1
     1f2:	mov	r0, r4
     1f4:	bl	248 <EncPlex::EncoderBase::EncoderBase()>
     1f8:	movs	r3, #2
     1fa:	movs	r2, #0
     1fc:	str	r5, [r4, #48]	; 0x30
        setStepsPerDetent(4);
    }

    void Encoder::begin()
    {
        pinMode(pinA, mode);
     1fe:	mov	r1, r3

        update(!a1, !b1);
    }

    Encoder::Encoder(int _pinA, int _pinB, int _mode)
        : pinA(_pinA), pinB(_pinB), mode(_mode)
     200:	str	r3, [r4, #52]	; 0x34
        setStepsPerDetent(4);
    }

    void Encoder::begin()
    {
        pinMode(pinA, mode);
     202:	mov	r0, r2

        update(!a1, !b1);
    }

    Encoder::Encoder(int _pinA, int _pinB, int _mode)
        : pinA(_pinA), pinB(_pinB), mode(_mode)
     204:	str	r2, [r4, #44]	; 0x2c
        setStepsPerDetent(4);
    }

    void Encoder::begin()
    {
        pinMode(pinA, mode);
     206:	bl	6e4 <pinMode>
        pinMode(pinB, mode);
     20a:	ldrb.w	r1, [r4, #52]	; 0x34
     20e:	ldrb.w	r0, [r4, #48]	; 0x30
     212:	bl	6e4 <pinMode>

    Encoder::Encoder(int _pinA, int _pinB, int _mode)
        : pinA(_pinA), pinB(_pinB), mode(_mode)
    {
        begin();
        setStepsPerDetent(4);
     216:	mov	r0, r4
     218:	movs	r1, #4
     21a:	bl	268 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)>
#include "EncPlex.h"
//#include "pins.h"

//using namespace pins;

EncPlex::Encoder enc1(0, 1, INPUT_PULLUP);
     21e:	ldr	r2, [pc, #24]	; (238 <_GLOBAL__sub_I_enc1+0x4c>)
     220:	mov	r0, r4
     222:	ldr	r1, [pc, #24]	; (23c <_GLOBAL__sub_I_enc1+0x50>)
     224:	bl	20f8 <__aeabi_atexit>
     228:	ldr	r2, [pc, #20]	; (240 <_GLOBAL__sub_I_enc1+0x54>)
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
     22a:	ldr	r3, [pc, #24]	; (244 <_GLOBAL__sub_I_enc1+0x58>)
     22c:	ldr	r2, [r2, #0]
     22e:	str	r2, [r3, #0]
     230:	pop	{r3, r4, r5, pc}
     232:	nop
     234:	.word	0x20000c0c
     238:	.word	0x20000354
     23c:	.word	0x0000007d
     240:	.word	0x20000c50
     244:	.word	0x20000c44

00000248 <EncPlex::EncoderBase::EncoderBase()>:
#include <algorithm>

namespace EncPlex
{

    EncoderBase::EncoderBase()
     248:	movs	r2, #0
            this->maxVal = max;
        }
        else
        {
            this->minVal = INT32_MIN;
            this->maxVal = INT32_MAX;
     24a:	mvn.w	r1, #2147483648	; 0x80000000
#include <algorithm>

namespace EncPlex
{

    EncoderBase::EncoderBase()
     24e:	push	{r4, r5}
     250:	movs	r5, #4
            this->minVal = min;
            this->maxVal = max;
        }
        else
        {
            this->minVal = INT32_MIN;
     252:	mov.w	r4, #2147483648	; 0x80000000
            this->maxVal = INT32_MAX;
     256:	str	r1, [r0, #8]
#include <algorithm>

namespace EncPlex
{

    EncoderBase::EncoderBase()
     258:	str	r5, [r0, #36]	; 0x24
            this->minVal = min;
            this->maxVal = max;
        }
        else
        {
            this->minVal = INT32_MIN;
     25a:	str	r4, [r0, #4]
#include <algorithm>

namespace EncPlex
{

    EncoderBase::EncoderBase()
     25c:	str	r2, [r0, #0]
     25e:	strb	r2, [r0, #12]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
     260:	str	r2, [r0, #24]
     262:	str	r2, [r0, #32]
    {
        setLimits(0, 0);
    }
     264:	pop	{r4, r5}
     266:	bx	lr

00000268 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)>:
        value = val;
    }

    void EncoderBase::setStepsPerDetent(unsigned spd)
    {
        if(stepsPerDetent == 4)
     268:	ldr	r3, [r0, #36]	; 0x24
     26a:	cmp	r3, #4
     26c:	beq.n	27a <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)+0x12>
            stateMachine = &stateMachineFull;
        else if (stepsPerDetent == 2)
     26e:	cmp	r3, #2
     270:	beq.n	274 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)+0xc>
     272:	bx	lr
            stateMachine = &stateMachineHalf;
     274:	ldr	r3, [pc, #8]	; (280 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)+0x18>)
     276:	str	r3, [r0, #40]	; 0x28
     278:	bx	lr
    }

    void EncoderBase::setStepsPerDetent(unsigned spd)
    {
        if(stepsPerDetent == 4)
            stateMachine = &stateMachineFull;
     27a:	ldr	r3, [pc, #8]	; (284 <EncPlex::EncoderBase::setStepsPerDetent(unsigned int)+0x1c>)
     27c:	str	r3, [r0, #40]	; 0x28
     27e:	bx	lr
     280:	.word	0x2000001c
     284:	.word	0x20000000

00000288 <EncPlex::EncoderBase::update(unsigned long, unsigned long)>:
    };



    bool EncoderBase::update(uint32_t phaseA, uint32_t phaseB) // http://www.buxtronix.net/2011/10/rotary-encoders-done-properly.html
    {
     288:	push	{r4, r5, r6, r7}
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
			} else if (pin == 14) {
				CORE_PIN14_PORTSET = CORE_PIN14_BITMASK;
     28a:	mov.w	r6, #1107296256	; 0x42000000
     28e:	mov.w	r7, #262144	; 0x40000

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     292:	ldr	r4, [pc, #176]	; (344 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xbc>)
     294:	movs	r3, #50	; 0x32
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     296:	ldr	r5, [pc, #176]	; (348 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xc0>)
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
			} else if (pin == 14) {
				CORE_PIN14_PORTSET = CORE_PIN14_BITMASK;
     298:	str.w	r7, [r6, #132]	; 0x84
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     29c:	ldr	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     29e:	ldr	r7, [r4, #0]
     2a0:	ldr	r4, [pc, #168]	; (34c <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xc4>)
     2a2:	lsrs	r7, r7, #16
     2a4:	mul.w	r3, r3, r7
     2a8:	lsrs	r3, r3, #1
     2aa:	umull	r3, r4, r4, r3
     2ae:	lsrs	r4, r4, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     2b0:	ldr	r3, [r5, #0]
     2b2:	subs	r3, r3, r6
     2b4:	cmp	r4, r3
     2b6:	bhi.n	2b0 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x28>
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
			} else if (pin == 14) {
				CORE_PIN14_PORTCLEAR = CORE_PIN14_BITMASK;
     2b8:	mov.w	r4, #1107296256	; 0x42000000
     2bc:	mov.w	r5, #262144	; 0x40000
        digitalWriteFast(14, HIGH);
        delayNanoseconds(50);
        digitalWriteFast(14, LOW);

        state = (*stateMachine)[state][phaseA << 1|phaseB];    // get next state depending on the inputs
     2c0:	orr.w	r2, r2, r1, lsl #1
     2c4:	ldr	r3, [r0, #40]	; 0x28
     2c6:	str.w	r5, [r4, #136]	; 0x88
     2ca:	ldrb	r1, [r0, #12]
     2cc:	add.w	r3, r3, r1, lsl #2
     2d0:	ldrb	r3, [r3, r2]
        uint8_t direction = state & 0xF0;                      // set if we need to count up / down or got an error
        state &=  0x0F;                                        // remove the direction info from state
     2d2:	and.w	r2, r3, #15
        digitalWriteFast(14, HIGH);
        delayNanoseconds(50);
        digitalWriteFast(14, LOW);

        state = (*stateMachine)[state][phaseA << 1|phaseB];    // get next state depending on the inputs
        uint8_t direction = state & 0xF0;                      // set if we need to count up / down or got an error
     2d6:	and.w	r3, r3, #240	; 0xf0
        state &=  0x0F;                                        // remove the direction info from state

        if(direction == UP)
     2da:	cmp	r3, #16
        delayNanoseconds(50);
        digitalWriteFast(14, LOW);

        state = (*stateMachine)[state][phaseA << 1|phaseB];    // get next state depending on the inputs
        uint8_t direction = state & 0xF0;                      // set if we need to count up / down or got an error
        state &=  0x0F;                                        // remove the direction info from state
     2dc:	strb	r2, [r0, #12]

        if(direction == UP)
     2de:	beq.n	2f0 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x68>
            }
            value = maxVal;
            return false;
        }

        if (direction == DOWN)
     2e0:	cmp	r3, #32
     2e2:	beq.n	304 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x7c>
            }
            value = minVal;
            return false;
        }

        if(direction == ERR)
     2e4:	cmp	r3, #48	; 0x30
     2e6:	beq.n	316 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x8e>
            // digitalWriteFast(LED_BUILTIN, HIGH);
            // delayNanoseconds(50);
            // digitalWriteFast(LED_BUILTIN, LOW);
        }

        return false;
     2e8:	movs	r3, #0
    }
     2ea:	mov	r0, r3
     2ec:	pop	{r4, r5, r6, r7}
     2ee:	bx	lr
        uint8_t direction = state & 0xF0;                      // set if we need to count up / down or got an error
        state &=  0x0F;                                        // remove the direction info from state

        if(direction == UP)
        {
            if(value < maxVal)
     2f0:	ldr	r3, [r0, #0]
     2f2:	ldr	r2, [r0, #8]
     2f4:	cmp	r3, r2
     2f6:	bge.n	30c <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x84>
            {
                value++;
     2f8:	adds	r2, r3, #1
                return true;
     2fa:	movs	r3, #1

        if(direction == UP)
        {
            if(value < maxVal)
            {
                value++;
     2fc:	str	r2, [r0, #0]
            // delayNanoseconds(50);
            // digitalWriteFast(LED_BUILTIN, LOW);
        }

        return false;
    }
     2fe:	mov	r0, r3
     300:	pop	{r4, r5, r6, r7}
     302:	bx	lr
            return false;
        }

        if (direction == DOWN)
        {
            if(value > minVal)
     304:	ldr	r3, [r0, #0]
     306:	ldr	r2, [r0, #4]
     308:	cmp	r3, r2
     30a:	bgt.n	328 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xa0>
            {
                value--;
                return true;
            }
            value = minVal;
            return false;
     30c:	movs	r3, #0
            if(value > minVal)
            {
                value--;
                return true;
            }
            value = minVal;
     30e:	str	r2, [r0, #0]
            // delayNanoseconds(50);
            // digitalWriteFast(LED_BUILTIN, LOW);
        }

        return false;
    }
     310:	pop	{r4, r5, r6, r7}
     312:	mov	r0, r3
     314:	bx	lr
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     316:	ldr	r2, [pc, #56]	; (350 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xc8>)
     318:	ldr	r3, [r2, #8]
     31a:	ands.w	r3, r3, #8
     31e:	bne.n	334 <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0xac>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     320:	movs	r1, #8
     322:	str.w	r1, [r2, #132]	; 0x84
     326:	b.n	2ea <EncPlex::EncoderBase::update(unsigned long, unsigned long)+0x62>

        if (direction == DOWN)
        {
            if(value > minVal)
            {
                value--;
     328:	subs	r2, r3, #1
                return true;
     32a:	movs	r3, #1

        if (direction == DOWN)
        {
            if(value > minVal)
            {
                value--;
     32c:	str	r2, [r0, #0]
            // delayNanoseconds(50);
            // digitalWriteFast(LED_BUILTIN, LOW);
        }

        return false;
    }
     32e:	mov	r0, r3
     330:	pop	{r4, r5, r6, r7}
     332:	bx	lr
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     334:	movs	r1, #8
            // digitalWriteFast(LED_BUILTIN, HIGH);
            // delayNanoseconds(50);
            // digitalWriteFast(LED_BUILTIN, LOW);
        }

        return false;
     336:	movs	r3, #0
     338:	str.w	r1, [r2, #136]	; 0x88
    }
     33c:	mov	r0, r3
     33e:	pop	{r4, r5, r6, r7}
     340:	bx	lr
     342:	nop
     344:	.word	0x2000035c
     348:	.word	0xe0001004
     34c:	.word	0x08972311
     350:	.word	0x42004000

00000354 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     354:	ldr	r2, [pc, #600]	; (5b0 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     356:	ldr	r3, [pc, #604]	; (5b4 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     358:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     35a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     35e:	ldr	r4, [pc, #600]	; (5b8 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     360:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     364:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     366:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     368:	bls.n	3a4 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     36a:	ldr	r3, [pc, #592]	; (5bc <set_arm_clock+0x268>)
     36c:	cmp	r0, r3
     36e:	bls.w	59c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     372:	ldr	r3, [pc, #588]	; (5c0 <set_arm_clock+0x26c>)
     374:	movw	r5, #1575	; 0x627
     378:	ldr	r7, [pc, #584]	; (5c4 <set_arm_clock+0x270>)
     37a:	add	r3, r0
     37c:	ldr	r4, [pc, #584]	; (5c8 <set_arm_clock+0x274>)
     37e:	lsrs	r2, r3, #8
     380:	umull	r3, r2, r7, r2
     384:	lsrs	r3, r2, #7
     386:	add.w	r3, r3, r3, lsl #2
     38a:	add.w	r2, r3, r3, lsl #2
     38e:	addw	r3, r2, #1250	; 0x4e2
     392:	cmp	r3, r5
     394:	it	cs
     396:	movcs	r3, r5
     398:	sub.w	r3, r3, #800	; 0x320
     39c:	umull	r3, r5, r4, r3
     3a0:	lsrs	r5, r5, #3
     3a2:	b.n	3ae <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     3a4:	ldr	r5, [pc, #548]	; (5cc <set_arm_clock+0x278>)
     3a6:	cmp	r0, r5
     3a8:	ite	ls
     3aa:	movls	r5, #6
     3ac:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     3ae:	ldr	r2, [pc, #516]	; (5b4 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     3b0:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     3b4:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     3b8:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     3ba:	orr.w	r3, r3, #192	; 0xc0
     3be:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     3c2:	bcs.n	3da <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     3c4:	ldr	r3, [pc, #496]	; (5b8 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     3c6:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     3ca:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     3cc:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     3ce:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     3d0:	ldr	r3, [r2, #0]
     3d2:	cmp	r3, #0
     3d4:	bge.n	3d0 <set_arm_clock+0x7c>
     3d6:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     3da:	ands.w	r3, lr, #33554432	; 0x2000000
     3de:	bne.n	444 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     3e0:	ldr	r4, [pc, #492]	; (5d0 <set_arm_clock+0x27c>)
     3e2:	ldr	r2, [pc, #496]	; (5d4 <set_arm_clock+0x280>)
     3e4:	ldr.w	ip, [r4, #16]
     3e8:	mov	r4, r2
     3ea:	and.w	r2, ip, r2
     3ee:	cmp	r2, r4
     3f0:	itet	eq
     3f2:	moveq.w	r3, #402653184	; 0x18000000
     3f6:	movne.w	r2, #4096	; 0x1000
     3fa:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     3fc:	eor.w	r4, lr, r3
     400:	tst.w	r4, #939524096	; 0x38000000
     404:	beq.n	418 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     406:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     40a:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     40e:	ldr	r4, [pc, #420]	; (5b4 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     410:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     414:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     418:	eor.w	r3, r1, r2
     41c:	tst.w	r3, #12288	; 0x3000
     420:	beq.n	434 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     422:	ldr	r3, [pc, #400]	; (5b4 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     424:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     428:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     42a:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     42c:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     42e:	ldr	r3, [r2, #72]	; 0x48
     430:	lsls	r4, r3, #28
     432:	bmi.n	42e <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     434:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     438:	ldr	r2, [pc, #376]	; (5b4 <set_arm_clock+0x260>)
     43a:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     43e:	ldr	r3, [r2, #72]	; 0x48
     440:	lsls	r1, r3, #26
     442:	bmi.n	43e <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     444:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     446:	ldr	r4, [pc, #400]	; (5d8 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     448:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     44a:	mul.w	r3, r1, r2
     44e:	mul.w	r3, r0, r3
     452:	cmp	r3, r4
     454:	bhi.n	46a <set_arm_clock+0x116>
		if (div_arm < 8) {
     456:	cmp	r2, #7
     458:	bhi.w	586 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     45c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     45e:	mul.w	r3, r1, r2
     462:	mul.w	r3, r0, r3
     466:	cmp	r3, r4
     468:	bls.n	456 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     46a:	ldr	r0, [pc, #368]	; (5dc <set_arm_clock+0x288>)
     46c:	ldr	r4, [pc, #368]	; (5e0 <set_arm_clock+0x28c>)
     46e:	add	r0, r3
     470:	umull	r0, r3, r4, r0
     474:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     476:	cmp	r3, #108	; 0x6c
     478:	bhi.w	592 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     47c:	cmp	r3, #53	; 0x35
     47e:	bhi.w	5a0 <set_arm_clock+0x24c>
     482:	ldr.w	r8, [pc, #392]	; 60c <set_arm_clock+0x2b8>
     486:	movs	r3, #54	; 0x36
     488:	ldr	r0, [pc, #344]	; (5e4 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     48a:	ldr.w	ip, [pc, #324]	; 5d0 <set_arm_clock+0x27c>
     48e:	ldr	r4, [pc, #344]	; (5e8 <set_arm_clock+0x294>)
     490:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     494:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     498:	and.w	r4, r9, r4
     49c:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     49e:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     4a2:	beq.n	4bc <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     4a4:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     4a8:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     4ac:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     4ae:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     4b2:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     4b6:	ldr	r3, [r4, #0]
     4b8:	cmp	r3, #0
     4ba:	bge.n	4b6 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     4bc:	ldr.w	ip, [pc, #244]	; 5b4 <set_arm_clock+0x260>
     4c0:	subs	r2, #1
     4c2:	ldr.w	r3, [ip, #16]
     4c6:	and.w	r3, r3, #7
     4ca:	cmp	r3, r2
     4cc:	beq.n	4de <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     4ce:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     4d2:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     4d4:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     4d8:	ldr	r3, [r4, #72]	; 0x48
     4da:	lsls	r3, r3, #15
     4dc:	bmi.n	4d8 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     4de:	subs	r1, #1
     4e0:	lsls	r1, r1, #10
     4e2:	eor.w	r3, lr, r1
     4e6:	tst.w	r3, #7168	; 0x1c00
     4ea:	beq.n	506 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     4ec:	ldr	r3, [pc, #196]	; (5b4 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     4ee:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     4f2:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     4f6:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     4f8:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     4fc:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     500:	ldr	r3, [r2, #72]	; 0x48
     502:	lsls	r1, r3, #30
     504:	bmi.n	500 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     506:	ldr	r3, [pc, #228]	; (5ec <set_arm_clock+0x298>)
     508:	ldr	r1, [pc, #228]	; (5f0 <set_arm_clock+0x29c>)
     50a:	add	r3, r0
     50c:	lsrs	r3, r3, #7
     50e:	umull	r3, r1, r1, r3
     512:	lsrs	r1, r1, #12
     514:	cmp	r1, #4
     516:	it	cs
     518:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     51a:	subs	r3, r1, #1
     51c:	lsls	r3, r3, #8
     51e:	eor.w	r2, lr, r3
     522:	tst.w	r2, #768	; 0x300
     526:	beq.n	538 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     528:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     52c:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     530:	ldr	r2, [pc, #128]	; (5b4 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     532:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     536:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     538:	ldr	r3, [pc, #120]	; (5b4 <set_arm_clock+0x260>)
     53a:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     53c:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     53e:	bic.w	r4, r4, #33554432	; 0x2000000
     542:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     544:	ldr	r3, [r2, #72]	; 0x48
     546:	lsls	r3, r3, #26
     548:	bmi.n	544 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     54a:	ldr	r3, [pc, #168]	; (5f4 <set_arm_clock+0x2a0>)
     54c:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     550:	ldr	r4, [pc, #164]	; (5f8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     552:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     554:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     558:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     55a:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     55e:	ldr	r4, [pc, #156]	; (5fc <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     560:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     564:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     568:	ldr	r2, [pc, #148]	; (600 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     56a:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     56c:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     56e:	bcs.n	582 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     570:	ldr	r3, [pc, #68]	; (5b8 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     572:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     576:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     578:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     57a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     57c:	ldr	r3, [r2, #0]
     57e:	cmp	r3, #0
     580:	bge.n	57c <set_arm_clock+0x228>
	}

	return frequency;
}
     582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     586:	cmp	r1, #4
     588:	bhi.w	46a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     58c:	adds	r1, #1
				div_arm = 1;
     58e:	movs	r2, #1
     590:	b.n	44a <set_arm_clock+0xf6>
     592:	ldr.w	r8, [pc, #124]	; 610 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     596:	movs	r3, #108	; 0x6c
     598:	ldr	r0, [pc, #104]	; (604 <set_arm_clock+0x2b0>)
     59a:	b.n	48a <set_arm_clock+0x136>
     59c:	movs	r5, #18
     59e:	b.n	3ae <set_arm_clock+0x5a>
     5a0:	ldr	r0, [pc, #100]	; (608 <set_arm_clock+0x2b4>)
     5a2:	ldr.w	r8, [pc, #112]	; 614 <set_arm_clock+0x2c0>
     5a6:	mul.w	r0, r0, r3
     5aa:	orr.w	r8, r3, r8
     5ae:	b.n	48a <set_arm_clock+0x136>
     5b0:	.word	0x1f78a400
     5b4:	.word	0x400fc000
     5b8:	.word	0x40080000
     5bc:	.word	0x23c34600
     5c0:	.word	0xdc3cba00
     5c4:	.word	0x004cb223
     5c8:	.word	0x51eb851f
     5cc:	.word	0x016e3600
     5d0:	.word	0x400d8000
     5d4:	.word	0x80003040
     5d8:	.word	0x269fb1ff
     5dc:	.word	0x005b8d80
     5e0:	.word	0x165e9f81
     5e4:	.word	0x269fb200
     5e8:	.word	0x8001307f
     5ec:	.word	0x08f0d17f
     5f0:	.word	0x00e5109f
     5f4:	.word	0x431bde83
     5f8:	.word	0x2000035c
     5fc:	.word	0x20000358
     600:	.word	0x20000c4c
     604:	.word	0x4d3f6400
     608:	.word	0x00b71b00
     60c:	.word	0x80002036
     610:	.word	0x8000206c
     614:	.word	0x80002000

00000618 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     618:	cmp	r0, #0
     61a:	beq.n	6cc <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     61c:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     61e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     622:	sub	sp, #20
     624:	mov	fp, r0
     626:	ldr	r4, [pc, #168]	; (6d0 <delay+0xb8>)
     628:	ldr	r5, [pc, #168]	; (6d4 <delay+0xbc>)
     62a:	ldr	r6, [pc, #172]	; (6d8 <delay+0xc0>)
     62c:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     630:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     634:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     636:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     638:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     63c:	cmp	r1, #0
     63e:	bne.n	630 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     640:	ldr	r7, [pc, #152]	; (6dc <delay+0xc4>)
     642:	strd	r8, r9, [sp, #8]
     646:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     648:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     64a:	ldr	r2, [pc, #148]	; (6e0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     64c:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     650:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     652:	ldr	r2, [r2, #0]
     654:	movs	r7, #1
     656:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     65a:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     65e:	mov	r8, r3
	if (frac > 1000) frac = 1000;
     660:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     662:	cmp	r3, r1
     664:	it	eq
     666:	cmpeq	r2, r8
     668:	ite	cs
     66a:	movcs	sl, r8
     66c:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     66e:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     672:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     676:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     678:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     67a:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     67e:	cmp	r3, #0
     680:	bne.n	672 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     682:	ldr	r0, [sp, #4]
     684:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     686:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     688:	ldr	r0, [pc, #84]	; (6e0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     68a:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     68e:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     690:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     694:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     698:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     69c:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6a0:	mov	r8, r1
	if (frac > 1000) frac = 1000;
     6a2:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6a4:	cmp	r1, r3
     6a6:	it	eq
     6a8:	cmpeq	r0, r8
     6aa:	ite	cs
     6ac:	movcs	r3, r8
     6ae:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     6b0:	add	r2, r3
     6b2:	cmp	r2, lr
     6b4:	bcc.n	6c6 <delay+0xae>
			if (--msec == 0) return;
     6b6:	subs.w	fp, fp, #1
			start += 1000;
     6ba:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     6be:	bne.n	672 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     6c0:	add	sp, #20
     6c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     6c6:	bl	774 <yield>
	}
     6ca:	b.n	672 <delay+0x5a>
     6cc:	bx	lr
     6ce:	nop
     6d0:	.word	0x20000f00
     6d4:	.word	0x20000c50
     6d8:	.word	0x20000c48
     6dc:	.word	0xe0001004
     6e0:	.word	0x20000c4c

000006e4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     6e4:	cmp	r0, #39	; 0x27
     6e6:	bhi.n	722 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     6e8:	lsls	r0, r0, #4
     6ea:	ldr	r2, [pc, #104]	; (754 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     6ec:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     6ee:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     6f2:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     6f4:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     6f6:	beq.n	724 <pinMode+0x40>
     6f8:	cmp	r1, #4
     6fa:	beq.n	724 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     6fc:	ldr	r4, [r3, #12]
     6fe:	ldr	r2, [r0, #4]
     700:	bic.w	r2, r2, r4
     704:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     706:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     708:	cbz	r1, 746 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     70a:	cmp	r1, #2
     70c:	beq.n	74c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     70e:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     710:	ldr	r3, [r3, #4]
}
     712:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     716:	ite	eq
     718:	ldreq	r1, [pc, #60]	; (758 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     71a:	ldrne	r1, [pc, #64]	; (75c <pinMode+0x78>)
     71c:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     71e:	movs	r2, #21
     720:	str	r2, [r3, #0]
}
     722:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     724:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     726:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     728:	ldr	r4, [r0, #4]
     72a:	orr.w	r2, r2, r4
     72e:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     730:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     732:	beq.n	746 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     734:	movw	r1, #2104	; 0x838
     738:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     73a:	ldr	r3, [r3, #4]
     73c:	movs	r2, #21
}
     73e:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     742:	str	r2, [r3, #0]
}
     744:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     746:	movs	r1, #56	; 0x38
     748:	str	r1, [r2, #0]
     74a:	b.n	73a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     74c:	ldr	r1, [pc, #16]	; (760 <pinMode+0x7c>)
     74e:	str	r1, [r2, #0]
     750:	b.n	73a <pinMode+0x56>
     752:	nop
     754:	.word	0x20000038
     758:	.word	0x00013038
     75c:	.word	0x00010038
     760:	.word	0x0001f038

00000764 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     764:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     766:	bl	94 <setup>
	while (1) {
		loop();
     76a:	bl	c8 <loop>
		yield();
     76e:	bl	774 <yield>
     772:	b.n	76a <main+0x6>

00000774 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
     774:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
     776:	ldr	r4, [pc, #132]	; (7fc <yield+0x88>)
     778:	ldrb	r3, [r4, #0]
     77a:	cbnz	r3, 79e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     77c:	ldr	r3, [pc, #128]	; (800 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     77e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     780:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     782:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     784:	cbnz	r3, 7ce <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     786:	ldr	r3, [pc, #124]	; (804 <yield+0x90>)
     788:	ldrb	r3, [r3, #0]
     78a:	cmp	r3, #0
     78c:	bne.n	7e2 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
     78e:	ldr	r3, [pc, #120]	; (808 <yield+0x94>)

	running = 0;
     790:	movs	r1, #0
     792:	ldr	r2, [r3, #0]
     794:	strb	r1, [r4, #0]
     796:	cbz	r2, 79e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     798:	mrs	r2, IPSR
		if (ipsr != 0) return;
     79c:	cbz	r2, 7a0 <yield+0x2c>
     79e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     7a0:	mrs	r0, PRIMASK
		__disable_irq();
     7a4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
     7a6:	ldr	r2, [r3, #0]
		if (first == nullptr) {
     7a8:	cbz	r2, 7e8 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
     7aa:	ldr	r4, [pc, #96]	; (80c <yield+0x98>)
     7ac:	ldrb	r1, [r4, #0]
     7ae:	cbnz	r1, 7e8 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     7b0:	movs	r6, #1
		firstYield = first->_next;
     7b2:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     7b4:	strb	r6, [r4, #0]
		firstYield = first->_next;
     7b6:	str	r5, [r3, #0]
		if (firstYield) {
     7b8:	cbz	r5, 7f0 <yield+0x7c>
			firstYield->_prev = nullptr;
     7ba:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     7bc:	cbnz	r0, 7c0 <yield+0x4c>
     7be:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     7c0:	movs	r5, #0
		(*(first->_function))(*first);
     7c2:	ldr	r3, [r2, #8]
     7c4:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     7c6:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
     7c8:	blx	r3
		runningFromYield = false;
     7ca:	strb	r5, [r4, #0]
     7cc:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     7ce:	bl	1150 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     7d2:	cmp	r0, #0
     7d4:	beq.n	786 <yield+0x12>
     7d6:	bl	a40 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     7da:	ldr	r3, [pc, #40]	; (804 <yield+0x90>)
     7dc:	ldrb	r3, [r3, #0]
     7de:	cmp	r3, #0
     7e0:	beq.n	78e <yield+0x1a>
     7e2:	bl	1f4c <HardwareSerial::processSerialEvents()>
     7e6:	b.n	78e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     7e8:	cmp	r0, #0
     7ea:	bne.n	79e <yield+0x2a>
     7ec:	cpsie	i
     7ee:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
     7f0:	ldr	r3, [pc, #28]	; (810 <yield+0x9c>)
     7f2:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     7f4:	cmp	r0, #0
     7f6:	bne.n	7c0 <yield+0x4c>
     7f8:	b.n	7be <yield+0x4a>
     7fa:	nop
     7fc:	.word	0x20000c54
     800:	.word	0x20000360
     804:	.word	0x20000ec8
     808:	.word	0x20000c68
     80c:	.word	0x20000c6c
     810:	.word	0x20000c64

00000814 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
     814:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     816:	mrs	r2, PRIMASK
		__disable_irq();
     81a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
     81c:	ldrb	r3, [r0, #29]
     81e:	cbnz	r3, 82e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
     820:	ldrb	r1, [r0, #28]
     822:	cmp	r1, #1
     824:	beq.n	838 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
     826:	cmp	r1, #3
     828:	beq.n	84c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
     82a:	movs	r3, #1
     82c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     82e:	cbnz	r2, 832 <EventResponder::triggerEventNotImmediate()+0x1e>
     830:	cpsie	i
	}
	enableInterrupts(irq);
}
     832:	ldr.w	r4, [sp], #4
     836:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
     838:	ldr	r4, [pc, #68]	; (880 <EventResponder::triggerEventNotImmediate()+0x6c>)
     83a:	ldr	r1, [r4, #0]
     83c:	cbz	r1, 868 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     83e:	ldr	r1, [pc, #68]	; (884 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
     840:	str	r3, [r0, #20]
				_prev = lastYield;
     842:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
     844:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     846:	str	r3, [r0, #24]
				_prev->_next = this;
     848:	str	r0, [r3, #20]
     84a:	b.n	82a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
     84c:	ldr	r4, [pc, #56]	; (888 <EventResponder::triggerEventNotImmediate()+0x74>)
     84e:	ldr	r1, [r4, #0]
     850:	cbz	r1, 874 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     852:	ldr	r1, [pc, #56]	; (88c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
     854:	str	r3, [r0, #20]
				_prev = lastInterrupt;
     856:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
     858:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     85a:	str	r3, [r0, #24]
				_prev->_next = this;
     85c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
     85e:	ldr	r3, [pc, #48]	; (890 <EventResponder::triggerEventNotImmediate()+0x7c>)
     860:	mov.w	r1, #268435456	; 0x10000000
     864:	str	r1, [r3, #0]
     866:	b.n	82a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
     868:	ldr	r3, [pc, #24]	; (884 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
     86a:	str	r1, [r0, #20]
				_prev = nullptr;
     86c:	str	r1, [r0, #24]
				firstYield = this;
     86e:	str	r0, [r4, #0]
				lastYield = this;
     870:	str	r0, [r3, #0]
     872:	b.n	82a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
     874:	ldr	r3, [pc, #20]	; (88c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
     876:	str	r1, [r0, #20]
				_prev = nullptr;
     878:	str	r1, [r0, #24]
				firstInterrupt = this;
     87a:	str	r0, [r4, #0]
				lastInterrupt = this;
     87c:	str	r0, [r3, #0]
     87e:	b.n	85e <EventResponder::triggerEventNotImmediate()+0x4a>
     880:	.word	0x20000c68
     884:	.word	0x20000c64
     888:	.word	0x20000c58
     88c:	.word	0x20000c5c
     890:	.word	0xe000ed04

00000894 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
     894:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     896:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     898:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     89a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     89c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     89e:	beq.n	8a8 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
     8a0:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     8a4:	b.w	814 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     8a8:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
     8aa:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     8ae:	bx	r3

000008b0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
     8b0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     8b2:	mrs	r1, PRIMASK
		__disable_irq();
     8b6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     8b8:	ldr	r4, [pc, #48]	; (8ec <EventResponder::runFromInterrupt()+0x3c>)
     8ba:	ldr	r3, [r4, #0]
		if (first) {
     8bc:	cbz	r3, 8e2 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     8be:	ldr	r6, [pc, #48]	; (8f0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
     8c0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
     8c2:	ldr	r2, [r3, #20]
     8c4:	str	r2, [r4, #0]
			if (firstInterrupt) {
     8c6:	cbz	r2, 8e8 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
     8c8:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     8ca:	cbnz	r1, 8ce <EventResponder::runFromInterrupt()+0x1e>
     8cc:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
     8ce:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
     8d0:	mov	r0, r3
     8d2:	ldr	r3, [r3, #8]
     8d4:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     8d6:	mrs	r1, PRIMASK
		__disable_irq();
     8da:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     8dc:	ldr	r3, [r4, #0]
		if (first) {
     8de:	cmp	r3, #0
     8e0:	bne.n	8c2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     8e2:	cbnz	r1, 8e6 <EventResponder::runFromInterrupt()+0x36>
     8e4:	cpsie	i
     8e6:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     8e8:	str	r2, [r6, #0]
     8ea:	b.n	8ca <EventResponder::runFromInterrupt()+0x1a>
     8ec:	.word	0x20000c58
     8f0:	.word	0x20000c5c

000008f4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
     8f4:	b.w	8b0 <EventResponder::runFromInterrupt()>

000008f8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
     8f8:	ldr	r2, [pc, #96]	; (95c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
     8fa:	push	{r4, r5}
	if (listActive == nullptr) {
     8fc:	ldr	r4, [r2, #0]
     8fe:	cmp	r4, #0
     900:	beq.n	954 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
     902:	ldr	r3, [r0, #0]
     904:	ldr	r1, [r4, #0]
     906:	cmp	r3, r1
     908:	bcs.n	92a <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     90a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
     90c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
     90e:	str	r4, [r0, #8]
		_prev = nullptr;
     910:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     912:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
     914:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
     916:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     918:	movs	r3, #2
}
     91a:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     91c:	strb	r3, [r0, #20]
}
     91e:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
     920:	str	r3, [r0, #0]
     922:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
     924:	ldr	r1, [r2, #0]
     926:	cmp	r3, r1
     928:	bcc.n	93c <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     92a:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     92c:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     92e:	cmp	r2, #0
     930:	bne.n	920 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
     932:	str	r2, [r0, #8]
		_prev = timer;
     934:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     936:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
     938:	str	r0, [r4, #8]
     93a:	b.n	918 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     93c:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
     93e:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
     940:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
     942:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     944:	str	r5, [r0, #12]
				timer->_prev = this;
     946:	str	r0, [r4, #12]
				_prev->_next = this;
     948:	ldr	r1, [r0, #12]
     94a:	str	r0, [r1, #8]
				timer->_ms -= _ms;
     94c:	str	r3, [r4, #0]
				_state = TimerActive;
     94e:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
     950:	pop	{r4, r5}
     952:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
     954:	str	r4, [r0, #8]
		_prev = nullptr;
     956:	str	r4, [r0, #12]
		listActive = this;
     958:	str	r0, [r2, #0]
     95a:	b.n	918 <MillisTimer::addToActiveList()+0x20>
     95c:	.word	0x20000c60

00000960 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
     960:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
     962:	ldr	r6, [pc, #136]	; (9ec <MillisTimer::runFromTimer()+0x8c>)
     964:	ldr	r4, [r6, #0]
	while (timer) {
     966:	cbz	r4, 9b4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     968:	ldr	r3, [r4, #0]
     96a:	cmp	r3, #0
     96c:	bne.n	9e4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
     96e:	mov	r5, r3
     970:	ldr	r7, [pc, #124]	; (9f0 <MillisTimer::runFromTimer()+0x90>)
     972:	b.n	97e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
     974:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     976:	cbz	r4, 9b4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     978:	ldr	r3, [r4, #0]
     97a:	cmp	r3, #0
     97c:	bne.n	9e4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
     97e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
     980:	cbz	r3, 984 <MillisTimer::runFromTimer()+0x24>
     982:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
     984:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
     986:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     988:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
     98a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     98c:	ldr	r3, [r3, #0]
     98e:	cmp	r3, r7
     990:	bne.n	9d6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     992:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     994:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     996:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     998:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
     99a:	beq.n	9de <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     99c:	bl	814 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
     9a0:	ldr	r3, [r4, #4]
     9a2:	cmp	r3, #0
     9a4:	beq.n	974 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
     9a6:	str	r3, [r4, #0]
				timer->addToActiveList();
     9a8:	mov	r0, r4
     9aa:	bl	8f8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
     9ae:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     9b0:	cmp	r4, #0
     9b2:	bne.n	978 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     9b4:	mrs	r3, PRIMASK
		__disable_irq();
     9b8:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     9ba:	ldr	r2, [pc, #56]	; (9f4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     9bc:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     9be:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     9c0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
     9c2:	cbnz	r3, 9c6 <MillisTimer::runFromTimer()+0x66>
     9c4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
     9c6:	cbz	r0, 9d4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
     9c8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
     9ca:	bl	8f8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
     9ce:	mov	r0, r4
     9d0:	cmp	r0, #0
     9d2:	bne.n	9c8 <MillisTimer::runFromTimer()+0x68>
     9d4:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     9d6:	mov	r2, r4
     9d8:	movs	r1, #0
     9da:	blx	r3
     9dc:	b.n	9a0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     9de:	ldr	r3, [r0, #8]
     9e0:	blx	r3
     9e2:	b.n	9a0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
     9e4:	subs	r3, #1
     9e6:	str	r3, [r4, #0]
			break;
     9e8:	b.n	9b4 <MillisTimer::runFromTimer()+0x54>
     9ea:	nop
     9ec:	.word	0x20000c60
     9f0:	.word	0x00000895
     9f4:	.word	0x20000c70

000009f8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     9f8:	ldr	r2, [pc, #16]	; (a0c <systick_isr+0x14>)
     9fa:	ldr	r3, [pc, #20]	; (a10 <systick_isr+0x18>)
     9fc:	ldr	r1, [r2, #0]
	systick_millis_count++;
     9fe:	ldr	r2, [pc, #20]	; (a14 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     a00:	str	r1, [r3, #0]
	systick_millis_count++;
     a02:	ldr	r3, [r2, #0]
     a04:	adds	r3, #1
     a06:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
     a08:	b.w	960 <MillisTimer::runFromTimer()>
     a0c:	.word	0xe0001004
     a10:	.word	0x20000c48
     a14:	.word	0x20000c50

00000a18 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
     a18:	b.w	115c <usb_serial_flush_input>

00000a1c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     a1c:	b.w	110c <usb_serial_peekchar>

00000a20 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     a20:	b.w	11d0 <usb_serial_getchar>

00000a24 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     a24:	b.w	1150 <usb_serial_available>

00000a28 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     a28:	b.w	1280 <usb_serial_flush_output>

00000a2c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
     a2c:	b.w	1234 <usb_serial_write_buffer_free>

00000a30 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     a30:	mov	r0, r1
     a32:	mov	r1, r2
     a34:	b.w	121c <usb_serial_write>

00000a38 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     a38:	mov	r0, r1
     a3a:	b.w	11f0 <usb_serial_putchar>
     a3e:	nop

00000a40 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
     a40:	ldr	r3, [pc, #4]	; (a48 <serialEvent()+0x8>)
     a42:	movs	r2, #0
     a44:	strb	r2, [r3, #0]
     a46:	bx	lr
     a48:	.word	0x20000360

00000a4c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     a4c:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
     a4e:	ldr	r4, [pc, #24]	; (a68 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     a50:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
     a52:	ldr	r3, [r0, #0]
     a54:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     a56:	ldrh	r4, [r4, #0]
	return write(buf, 2);
     a58:	add	r1, sp, #4
     a5a:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     a5c:	strh.w	r4, [sp, #4]
	return write(buf, 2);
     a60:	blx	r3
}
     a62:	add	sp, #8
     a64:	pop	{r4, pc}
     a66:	nop
     a68:	.word	0x200002e0

00000a6c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
     a6c:	push	{r4, r5, r6, r7, lr}
     a6e:	mov	r6, r0
     a70:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
     a72:	cmp	r2, #0
     a74:	beq.n	ade <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
     a76:	cmp	r2, #1
     a78:	it	eq
     a7a:	moveq	r2, #10
	}


	if (n == 0) {
     a7c:	cbz	r1, ad4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
     a7e:	movs	r5, #33	; 0x21
     a80:	b.n	a84 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
     a82:	uxtb	r5, r7
     a84:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
     a86:	udiv	r4, r1, r2
     a8a:	mls	r1, r2, r4, r1
     a8e:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     a90:	cmp	r1, #9
     a92:	add.w	r1, r0, #55	; 0x37
     a96:	add.w	r0, r0, #48	; 0x30
     a9a:	it	hi
     a9c:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
     a9e:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     aa0:	add	r4, sp, #40	; 0x28
     aa2:	it	ls
     aa4:	uxtbls	r0, r0
     aa6:	add	r4, r5
     aa8:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
     aac:	cmp	r1, #0
     aae:	bne.n	a82 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
     ab0:	cbz	r3, ac0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
     ab2:	subs	r5, #1
		buf[i] = '-';
     ab4:	add	r3, sp, #40	; 0x28
     ab6:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
     ab8:	uxtb	r5, r5
		buf[i] = '-';
     aba:	add	r3, r5
     abc:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
     ac0:	ldr	r3, [r6, #0]
     ac2:	add	r1, sp, #4
     ac4:	rsb	r2, r5, #34	; 0x22
     ac8:	mov	r0, r6
     aca:	add	r1, r5
     acc:	ldr	r3, [r3, #4]
     ace:	blx	r3
}
     ad0:	add	sp, #44	; 0x2c
     ad2:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
     ad4:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
     ad6:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
     ad8:	strb.w	r2, [sp, #37]	; 0x25
     adc:	b.n	ab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
     ade:	ldr	r3, [r0, #0]
     ae0:	uxtb	r1, r1
     ae2:	ldr	r3, [r3, #0]
     ae4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
     ae6:	add	sp, #44	; 0x2c
     ae8:	pop	{r4, r5, r6, r7, pc}
     aea:	nop

00000aec <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
     aec:	cmp	r1, #0
     aee:	blt.n	af8 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
     af0:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
     af2:	movs	r2, #10
     af4:	b.w	a6c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
     af8:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
     afa:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
     afc:	movs	r2, #10
     afe:	b.w	a6c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     b02:	nop

00000b04 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     b04:	movs	r0, #4
     b06:	mov	r1, lr
     b08:	tst	r0, r1
     b0a:	beq.n	b14 <_MSP>
     b0c:	mrs	r0, PSP
     b10:	b.w	b24 <HardFault_HandlerC>

00000b14 <_MSP>:
     b14:	mrs	r0, MSP
     b18:	b.w	b24 <HardFault_HandlerC>

00000b1c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     b1c:	bx	lr
     b1e:	nop

00000b20 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     b20:	bx	lr
     b22:	nop

00000b24 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b24:	ldr	r3, [pc, #108]	; (b94 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     b26:	movs	r1, #5
     b28:	ldr	r2, [pc, #108]	; (b98 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     b2a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     b2c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     b2e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     b32:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     b34:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     b38:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b3a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     b3c:	ldr	r4, [pc, #92]	; (b9c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b3e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     b40:	ldr	r0, [pc, #92]	; (ba0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b42:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     b44:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     b48:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     b4c:	ldr	r3, [r4, #0]
     b4e:	cmp	r3, r0
     b50:	bls.n	b58 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     b52:	ldr	r0, [pc, #80]	; (ba4 <HardFault_HandlerC+0x80>)
     b54:	bl	354 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     b58:	ldr	r5, [pc, #56]	; (b94 <HardFault_HandlerC+0x70>)
     b5a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     b5c:	movs	r0, #0
     b5e:	ldr	r2, [pc, #72]	; (ba8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     b60:	ldr	r1, [pc, #72]	; (bac <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     b62:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     b66:	str	r0, [sp, #4]
     b68:	ldr	r3, [sp, #4]
     b6a:	cmp	r3, r2
     b6c:	bhi.n	b7a <HardFault_HandlerC+0x56>
     b6e:	ldr	r3, [sp, #4]
     b70:	adds	r3, #1
     b72:	str	r3, [sp, #4]
     b74:	ldr	r3, [sp, #4]
     b76:	cmp	r3, r2
     b78:	bls.n	b6e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     b7a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     b7e:	str	r0, [sp, #4]
     b80:	ldr	r3, [sp, #4]
     b82:	cmp	r3, r1
     b84:	bhi.n	b62 <HardFault_HandlerC+0x3e>
     b86:	ldr	r3, [sp, #4]
     b88:	adds	r3, #1
     b8a:	str	r3, [sp, #4]
     b8c:	ldr	r3, [sp, #4]
     b8e:	cmp	r3, r1
     b90:	bls.n	b86 <HardFault_HandlerC+0x62>
     b92:	b.n	b62 <HardFault_HandlerC+0x3e>
     b94:	.word	0x401bc000
     b98:	.word	0x401f8000
     b9c:	.word	0x2000035c
     ba0:	.word	0x23c345ff
     ba4:	.word	0x11e1a300
     ba8:	.word	0x000f423f
     bac:	.word	0x0089543f

00000bb0 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
     bb0:	ldr	r2, [pc, #36]	; (bd8 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
     bb2:	push	{r3, lr}
        char *prev = __brkval;
     bb4:	ldr	r3, [r2, #0]
        if (incr != 0) {
     bb6:	cbz	r0, bc2 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
     bb8:	add	r0, r3
     bba:	ldr	r1, [pc, #32]	; (bdc <_sbrk+0x2c>)
     bbc:	cmp	r0, r1
     bbe:	bhi.n	bc6 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
     bc0:	str	r0, [r2, #0]
        }
        return prev;
}
     bc2:	mov	r0, r3
     bc4:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     bc6:	bl	2110 <__errno>
     bca:	movs	r2, #12
                        return (void *)-1;
     bcc:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     bd0:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
     bd2:	mov	r0, r3
     bd4:	pop	{r3, pc}
     bd6:	nop
     bd8:	.word	0x20000374
     bdc:	.word	0x20280000

00000be0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     be0:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     be2:	ldr	r1, [pc, #80]	; (c34 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     be4:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     be8:	ldr	r5, [pc, #76]	; (c38 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     bea:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     bec:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     bf0:	ldr	r6, [pc, #72]	; (c3c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     bf2:	ldr	r2, [pc, #76]	; (c40 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     bf4:	add.w	r5, r5, r0, lsl #5
     bf8:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     bfa:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     bfc:	mov	r0, r5
     bfe:	ldrh	r2, [r6, #0]
     c00:	bl	1bbc <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     c04:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     c06:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     c0a:	add	r1, r4
	asm("dsb");
     c0c:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     c10:	ldr	r2, [pc, #48]	; (c44 <rx_queue_transfer+0x64>)
     c12:	str	r3, [r2, #0]
		location += 32;
     c14:	adds	r3, #32
	} while (location < end_addr);
     c16:	cmp	r1, r3
     c18:	bhi.n	c12 <rx_queue_transfer+0x32>
	asm("dsb");
     c1a:	dsb	sy
	asm("isb");
     c1e:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     c22:	movs	r0, #3
     c24:	mov	r1, r5
     c26:	bl	1c14 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     c2a:	ldr	r3, [pc, #28]	; (c48 <rx_queue_transfer+0x68>)
     c2c:	mov.w	r2, #131072	; 0x20000
     c30:	str	r2, [r3, #0]
     c32:	pop	{r3, r4, r5, r6, r7, pc}
     c34:	.word	0x20200000
     c38:	.word	0x20000ca0
     c3c:	.word	0x20000dae
     c40:	.word	0xe000e18c
     c44:	.word	0xe000ef5c
     c48:	.word	0xe000e10c

00000c4c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     c4c:	ldr	r2, [pc, #144]	; (ce0 <rx_event+0x94>)
     c4e:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     c50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     c54:	ubfx	r3, r3, #16, #15
     c58:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     c5a:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     c5c:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     c5e:	cmp	r4, #0
     c60:	ble.n	cd4 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     c62:	ldr	r1, [pc, #128]	; (ce4 <rx_event+0x98>)
		if (head != rx_tail) {
     c64:	ldr	r2, [pc, #128]	; (ce8 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     c66:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     c68:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     c6a:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     c6c:	ldr	r0, [pc, #124]	; (cec <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     c6e:	ldr	r6, [pc, #128]	; (cf0 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     c70:	cmp	r3, r2
     c72:	beq.n	c84 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     c74:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     c78:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     c7c:	rsb	r2, r7, #512	; 0x200
     c80:	cmp	r4, r2
     c82:	bls.n	caa <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     c84:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     c86:	movs	r2, #0
     c88:	ldr	r7, [pc, #104]	; (cf4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     c8a:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     c8c:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     c90:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     c94:	ldr	r6, [pc, #96]	; (cf8 <rx_event+0xac>)
     c96:	ite	ls
     c98:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     c9a:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     c9c:	strb	r2, [r1, #0]
		rx_available += len;
     c9e:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     ca0:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     ca2:	add	r4, r2
     ca4:	str	r4, [r6, #0]
     ca6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     caa:	ldr	r3, [pc, #80]	; (cfc <rx_event+0xb0>)
     cac:	add.w	r0, r7, r8, lsl #9
     cb0:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     cb2:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     cb4:	add.w	r1, r3, r5, lsl #9
     cb8:	add	r0, r3
     cba:	bl	1f74 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     cbe:	ldr	r2, [pc, #56]	; (cf8 <rx_event+0xac>)
				rx_queue_transfer(i);
     cc0:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     cc2:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     cc6:	ldr	r3, [r2, #0]
     cc8:	add	r4, r3
     cca:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     ccc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     cd0:	b.w	be0 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     cd4:	mov	r0, r5
	}
}
     cd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     cda:	b.w	be0 <rx_queue_transfer>
     cde:	nop
     ce0:	.word	0x20000dae
     ce4:	.word	0x20000dc4
     ce8:	.word	0x20000da0
     cec:	.word	0x20000da4
     cf0:	.word	0x20000db0
     cf4:	.word	0x20000c74
     cf8:	.word	0x20000dc0
     cfc:	.word	0x20200000

00000d00 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     d00:	ldr	r3, [pc, #120]	; (d7c <usb_serial_flush_callback+0x7c>)
     d02:	ldrb	r2, [r3, #0]
     d04:	cbnz	r2, d1e <usb_serial_flush_callback+0x1e>
     d06:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     d0a:	ldr	r2, [pc, #116]	; (d80 <usb_serial_flush_callback+0x80>)
     d0c:	ldrb	r2, [r2, #0]
     d0e:	cbz	r2, d1e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     d10:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     d14:	ldr	r5, [pc, #108]	; (d84 <usb_serial_flush_callback+0x84>)
     d16:	ldrh	r2, [r5, #0]
     d18:	cbnz	r2, d20 <usb_serial_flush_callback+0x20>
     d1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d1e:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     d20:	ldr	r6, [pc, #100]	; (d88 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     d22:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     d26:	ldr	r7, [pc, #100]	; (d8c <usb_serial_flush_callback+0x8c>)
     d28:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     d2a:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     d2c:	ldr	r4, [pc, #96]	; (d90 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     d2e:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     d32:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     d36:	mov	r0, r7
     d38:	mov	r1, r4
     d3a:	bl	1bbc <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     d3e:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     d42:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     d46:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     d4a:	ldr	r3, [pc, #72]	; (d94 <usb_serial_flush_callback+0x94>)
     d4c:	str	r1, [r3, #0]
		location += 32;
     d4e:	adds	r1, #32
	} while (location < end_addr);
     d50:	cmp	r2, r1
     d52:	bhi.n	d4c <usb_serial_flush_callback+0x4c>
	asm("dsb");
     d54:	dsb	sy
	asm("isb");
     d58:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     d5c:	movs	r0, #4
     d5e:	mov	r1, r7
     d60:	bl	1bec <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     d64:	ldrb	r3, [r6, #0]
     d66:	ldr	r2, [pc, #32]	; (d88 <usb_serial_flush_callback+0x88>)
     d68:	adds	r3, #1
     d6a:	uxtb	r3, r3
     d6c:	cmp	r3, #3
     d6e:	it	hi
     d70:	movhi	r3, #0
     d72:	strb	r3, [r2, #0]
	tx_available = 0;
     d74:	movs	r3, #0
     d76:	strh	r3, [r5, #0]
     d78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d7c:	.word	0x20000c86
     d80:	.word	0x20000e98
     d84:	.word	0x20000dc6
     d88:	.word	0x20000c87
     d8c:	.word	0x20000de0
     d90:	.word	0x20201000
     d94:	.word	0xe000ef70

00000d98 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     d98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d9c:	sub	sp, #20
     d9e:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     da0:	str	r1, [sp, #4]
     da2:	cmp	r1, #0
     da4:	beq.w	eec <usb_serial_write.part.1+0x154>
     da8:	movs	r3, #0
     daa:	ldr.w	r8, [pc, #348]	; f08 <usb_serial_write.part.1+0x170>
     dae:	ldr.w	r9, [pc, #332]	; efc <usb_serial_write.part.1+0x164>
     db2:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     db4:	ldr	r6, [pc, #312]	; (ef0 <usb_serial_write.part.1+0x158>)
     db6:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     dba:	ldr.w	sl, [pc, #336]	; f0c <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     dbe:	ldr.w	fp, [pc, #336]	; f10 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     dc2:	ldr	r2, [pc, #304]	; (ef4 <usb_serial_write.part.1+0x15c>)
     dc4:	ldrb	r4, [r2, #0]
     dc6:	ldr	r2, [pc, #304]	; (ef8 <usb_serial_write.part.1+0x160>)
     dc8:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     dcc:	cmp	r3, #0
     dce:	bne.n	eae <usb_serial_write.part.1+0x116>
     dd0:	mov	r5, r3
     dd2:	mov	r4, r3
     dd4:	b.n	e00 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     dd6:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     dda:	cbnz	r4, dde <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     ddc:	ldr	r5, [r6, #0]
     dde:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     de0:	cmp	r3, #0
     de2:	bne.n	ea2 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     de4:	ldr	r3, [r6, #0]
     de6:	subs	r3, r3, r5
     de8:	cmp	r3, #120	; 0x78
     dea:	bhi.n	ee0 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     dec:	ldrb.w	r3, [sl]
     df0:	cmp	r3, #0
     df2:	beq.n	ea2 <usb_serial_write.part.1+0x10a>
			yield();
     df4:	bl	774 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     df8:	ldrh.w	r3, [r8]
     dfc:	cmp	r3, #0
     dfe:	bne.n	eaa <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     e00:	mov	r0, r7
     e02:	bl	1c38 <usb_transfer_status>
			if (!(status & 0x80)) {
     e06:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     e0a:	ldr	r2, [pc, #240]	; (efc <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     e0c:	bne.n	dd6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     e0e:	mov.w	r3, #2048	; 0x800
     e12:	ldr	r2, [pc, #224]	; (ef4 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     e14:	strb.w	r0, [r9]
     e18:	ldrb	r4, [r2, #0]
     e1a:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     e1c:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     e20:	lsls	r4, r4, #11
		if (size >= tx_available) {
     e22:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     e24:	ldr	r1, [pc, #216]	; (f00 <usb_serial_write.part.1+0x168>)
     e26:	add	r0, r4
		if (size >= tx_available) {
     e28:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     e2a:	add	r0, r1
		if (size >= tx_available) {
     e2c:	bcc.n	eb6 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     e2e:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     e30:	ldr	r1, [sp, #8]
     e32:	bl	1f74 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     e36:	movs	r3, #0
     e38:	mov	r1, r4
     e3a:	mov.w	r2, #2048	; 0x800
     e3e:	mov	r0, r7
     e40:	bl	1bbc <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     e44:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     e48:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     e4c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     e50:	str.w	r3, [fp]
		location += 32;
     e54:	adds	r3, #32
	} while (location < end_addr);
     e56:	cmp	r4, r3
     e58:	bhi.n	e50 <usb_serial_write.part.1+0xb8>
	asm("dsb");
     e5a:	dsb	sy
	asm("isb");
     e5e:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     e62:	movs	r0, #4
     e64:	mov	r1, r7
     e66:	bl	1bec <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     e6a:	ldr	r3, [pc, #136]	; (ef4 <usb_serial_write.part.1+0x15c>)
     e6c:	ldr	r2, [pc, #132]	; (ef4 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     e6e:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     e70:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     e72:	ldr	r0, [pc, #144]	; (f04 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     e74:	adds	r3, #1
     e76:	uxtb	r3, r3
     e78:	cmp	r3, #3
     e7a:	it	hi
     e7c:	movhi	r3, #0
     e7e:	strb	r3, [r2, #0]
			size -= tx_available;
     e80:	ldrh.w	r2, [r8]
			sent += tx_available;
     e84:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     e86:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     e8a:	add	r3, r2
     e8c:	str	r3, [sp, #0]
			data += tx_available;
     e8e:	ldr	r3, [sp, #8]
     e90:	add	r3, r2
     e92:	str	r3, [sp, #8]
     e94:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     e96:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     e9a:	ldr	r1, [sp, #4]
     e9c:	subs	r2, r1, r2
     e9e:	str	r2, [sp, #4]
     ea0:	bne.n	dc2 <usb_serial_write.part.1+0x2a>
     ea2:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     ea4:	add	sp, #20
     ea6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eaa:	ldr	r2, [pc, #72]	; (ef4 <usb_serial_write.part.1+0x15c>)
     eac:	ldrb	r4, [r2, #0]
     eae:	mov	r2, r3
     eb0:	rsb	r0, r3, #2048	; 0x800
     eb4:	b.n	e20 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     eb6:	ldr	r4, [sp, #4]
     eb8:	ldr	r1, [sp, #8]
     eba:	mov	r2, r4
     ebc:	str	r3, [sp, #12]
     ebe:	bl	1f74 <memcpy>
			tx_available -= size;
     ec2:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     ec4:	ldr	r2, [pc, #60]	; (f04 <usb_serial_write.part.1+0x16c>)
     ec6:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     eca:	subs	r3, r3, r4
     ecc:	strh.w	r3, [r8]
     ed0:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     ed2:	str.w	r1, [r2, #132]	; 0x84
     ed6:	mov	r0, r3
     ed8:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     eda:	add	sp, #20
     edc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     ee0:	movs	r3, #1
				return sent;
     ee2:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     ee4:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     ee6:	add	sp, #20
     ee8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     eec:	ldr	r0, [sp, #4]
     eee:	b.n	ea4 <usb_serial_write.part.1+0x10c>
     ef0:	.word	0x20000c50
     ef4:	.word	0x20000c87
     ef8:	.word	0x20000de0
     efc:	.word	0x20000dc5
     f00:	.word	0x20201000
     f04:	.word	0x402e0000
     f08:	.word	0x20000dc6
     f0c:	.word	0x20000e98
     f10:	.word	0xe000ef70

00000f14 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     f14:	bx	lr
     f16:	nop

00000f18 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     f18:	ldr	r3, [pc, #196]	; (fe0 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     f1a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     f1e:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     f20:	ldr	r7, [pc, #192]	; (fe4 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     f22:	cmp	r3, #0
     f24:	beq.n	fd0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     f26:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     f2a:	ldr.w	r8, [pc, #236]	; 1018 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     f2e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     f30:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     f34:	movs	r1, #0
     f36:	movs	r2, #128	; 0x80
     f38:	ldr	r0, [pc, #172]	; (fe8 <usb_serial_configure+0xd0>)
	tx_head = 0;
     f3a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     f3c:	ldr	r6, [pc, #172]	; (fec <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     f3e:	bl	26ec <memset>
	tx_head = 0;
     f42:	ldr	r4, [pc, #172]	; (ff0 <usb_serial_configure+0xd8>)
	tx_available = 0;
     f44:	ldr	r3, [pc, #172]	; (ff4 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f46:	mov	r1, r5
     f48:	mov.w	r2, #256	; 0x100
     f4c:	ldr	r0, [pc, #168]	; (ff8 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     f4e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     f50:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     f52:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f54:	bl	26ec <memset>
	memset(rx_count, 0, sizeof(rx_count));
     f58:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f5a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     f5c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f5e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     f60:	str	r5, [r6, #8]
     f62:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     f64:	ldr	r1, [pc, #148]	; (ffc <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     f66:	ldr	r6, [pc, #152]	; (1000 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     f68:	ldr	r0, [pc, #152]	; (1004 <usb_serial_configure+0xec>)
	rx_available = 0;
     f6a:	ldr.w	lr, [pc, #176]	; 101c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     f6e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f70:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     f72:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f74:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     f76:	str	r5, [r6, #0]
     f78:	str	r5, [r6, #4]
     f7a:	str	r5, [r6, #8]
     f7c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     f7e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f82:	bl	1b54 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     f86:	ldrh.w	r1, [r8]
     f8a:	mov	r2, r5
     f8c:	ldr	r3, [pc, #120]	; (1008 <usb_serial_configure+0xf0>)
     f8e:	movs	r0, #3
     f90:	bl	1af0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     f94:	mov	r3, r5
     f96:	ldrh	r1, [r7, #0]
     f98:	movs	r2, #1
     f9a:	movs	r0, #4
     f9c:	bl	1b54 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     fa0:	mov	r0, r4
     fa2:	adds	r4, #1
     fa4:	bl	be0 <rx_queue_transfer>
     fa8:	cmp	r4, #8
     faa:	bne.n	fa0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     fac:	ldr	r3, [pc, #92]	; (100c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     fae:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     fb0:	ldr	r0, [pc, #92]	; (1010 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     fb2:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     fb4:	ldr	r4, [pc, #92]	; (1014 <usb_serial_configure+0xfc>)
     fb6:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     fb8:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     fbc:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     fc0:	ldr.w	r2, [r3, #328]	; 0x148
     fc4:	orr.w	r2, r2, #16777216	; 0x1000000
     fc8:	str.w	r2, [r3, #328]	; 0x148
     fcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     fd0:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     fd2:	ldr.w	r8, [pc, #68]	; 1018 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     fd6:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     fd8:	strh.w	r3, [r8]
     fdc:	b.n	f34 <usb_serial_configure+0x1c>
     fde:	nop
     fe0:	.word	0x20000e70
     fe4:	.word	0x20000c84
     fe8:	.word	0x20000de0
     fec:	.word	0x20000db0
     ff0:	.word	0x20000c87
     ff4:	.word	0x20000dc6
     ff8:	.word	0x20000ca0
     ffc:	.word	0x20000dc4
    1000:	.word	0x20000c74
    1004:	.word	0x20000da0
    1008:	.word	0x00000c4d
    100c:	.word	0x402e0000
    1010:	.word	0x20000e60
    1014:	.word	0x00000d01
    1018:	.word	0x20000dae
    101c:	.word	0x20000dc0

00001020 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1020:	ldr	r3, [pc, #196]	; (10e8 <usb_serial_read+0xc8>)
    1022:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1026:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    102a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    102c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    102e:	ldr	r3, [pc, #188]	; (10ec <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1030:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1032:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1034:	cmp	r1, #0
    1036:	beq.n	10e0 <usb_serial_read+0xc0>
    1038:	ldr	r3, [pc, #180]	; (10f0 <usb_serial_read+0xd0>)
    103a:	uxtb	r4, r4
    103c:	ldrb	r3, [r3, #0]
    103e:	cmp	r4, r3
    1040:	beq.n	10e4 <usb_serial_read+0xc4>
    1042:	mov	sl, r0
    1044:	movs	r7, #0
    1046:	ldr.w	fp, [pc, #192]	; 1108 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    104a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    104c:	ldr	r3, [pc, #164]	; (10f4 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    104e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1052:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1054:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1056:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    1058:	ldr	r3, [pc, #156]	; (10f8 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    105a:	it	cs
    105c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    105e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1060:	ldr	r3, [pc, #144]	; (10f4 <usb_serial_read+0xd4>)
    1062:	ldrh.w	lr, [r3, r5, lsl #1]
    1066:	ldr	r3, [pc, #148]	; (10fc <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1068:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    106c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1070:	ldr	r3, [pc, #140]	; (1100 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1072:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1076:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1078:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    107a:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    107c:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    107e:	bcs.n	10b4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1080:	add.w	r1, lr, r5, lsl #9
    1084:	mov	r2, r8
    1086:	add	r1, r3
    1088:	bl	1f74 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    108c:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    108e:	ldr.w	r1, [fp]
    1092:	mov	r0, r9
			rx_index[i] += len;
    1094:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1098:	rsb	r1, r8, r1
			rx_index[i] += len;
    109c:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    109e:	str.w	r1, [fp]
			rx_index[i] += len;
    10a2:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    10a6:	ldr	r3, [pc, #92]	; (1104 <usb_serial_read+0xe4>)
    10a8:	mov.w	r2, #131072	; 0x20000
    10ac:	str	r2, [r3, #0]
	return count;
}
    10ae:	add	sp, #12
    10b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    10b4:	bl	1f74 <memcpy>
			p += avail;
			rx_available -= avail;
    10b8:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    10bc:	uxtb	r3, r4
			rx_queue_transfer(i);
    10be:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    10c0:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    10c2:	add	sl, r6
			rx_available -= avail;
    10c4:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    10c8:	ldr	r2, [pc, #32]	; (10ec <usb_serial_read+0xcc>)
    10ca:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    10cc:	bl	be0 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    10d0:	cmp	r9, r7
    10d2:	bls.n	10dc <usb_serial_read+0xbc>
    10d4:	ldr	r3, [pc, #24]	; (10f0 <usb_serial_read+0xd0>)
    10d6:	ldrb	r3, [r3, #0]
    10d8:	cmp	r4, r3
    10da:	bne.n	104a <usb_serial_read+0x2a>
    10dc:	mov	r0, r7
    10de:	b.n	10a6 <usb_serial_read+0x86>
    10e0:	mov	r0, r1
    10e2:	b.n	10a6 <usb_serial_read+0x86>
    10e4:	movs	r0, #0
    10e6:	b.n	10a6 <usb_serial_read+0x86>
    10e8:	.word	0xe000e18c
    10ec:	.word	0x20000da0
    10f0:	.word	0x20000dc4
    10f4:	.word	0x20000c74
    10f8:	.word	0x20000da4
    10fc:	.word	0x20000db0
    1100:	.word	0x20200000
    1104:	.word	0xe000e10c
    1108:	.word	0x20000dc0

0000110c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    110c:	ldr	r3, [pc, #44]	; (113c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    110e:	ldr	r2, [pc, #48]	; (1140 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1110:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    1112:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1114:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1116:	cmp	r3, r2
    1118:	beq.n	1136 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    111a:	adds	r3, #1
	uint32_t i = rx_list[tail];
    111c:	ldr	r0, [pc, #36]	; (1144 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    111e:	ldr	r2, [pc, #40]	; (1148 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1120:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1122:	ldr	r1, [pc, #40]	; (114c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1124:	it	cs
    1126:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1128:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    112a:	ldrh.w	r1, [r1, r3, lsl #1]
    112e:	add.w	r3, r2, r3, lsl #9
    1132:	ldrb	r0, [r3, r1]
    1134:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    1136:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    113a:	bx	lr
    113c:	.word	0x20000da0
    1140:	.word	0x20000dc4
    1144:	.word	0x20000da4
    1148:	.word	0x20200000
    114c:	.word	0x20000c74

00001150 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    1150:	ldr	r3, [pc, #4]	; (1158 <usb_serial_available+0x8>)
    1152:	ldr	r0, [r3, #0]
}
    1154:	bx	lr
    1156:	nop
    1158:	.word	0x20000dc0

0000115c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    115c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1160:	ldr	r6, [pc, #84]	; (11b8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    1162:	ldr	r5, [pc, #88]	; (11bc <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1164:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    1166:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1168:	uxtb	r4, r4
	while (tail != rx_head) {
    116a:	cmp	r4, r3
    116c:	beq.n	11b2 <usb_serial_flush_input+0x56>
    116e:	ldr.w	r9, [pc, #84]	; 11c4 <usb_serial_flush_input+0x68>
    1172:	ldr.w	fp, [pc, #84]	; 11c8 <usb_serial_flush_input+0x6c>
    1176:	ldr.w	r8, [pc, #84]	; 11cc <usb_serial_flush_input+0x70>
    117a:	ldr	r7, [pc, #68]	; (11c0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    117c:	adds	r4, #1
    117e:	cmp	r4, #8
    1180:	uxtb.w	sl, r4
    1184:	bls.n	118a <usb_serial_flush_input+0x2e>
    1186:	movs	r4, #0
    1188:	mov	sl, r4
		uint32_t i = rx_list[tail];
    118a:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    118e:	ldr.w	r2, [fp]
    1192:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    1196:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1198:	ldrh.w	r1, [r7, r1, lsl #1]
    119c:	subs	r3, r3, r1
    119e:	subs	r3, r2, r3
    11a0:	str.w	r3, [fp]
		rx_queue_transfer(i);
    11a4:	bl	be0 <rx_queue_transfer>
		rx_tail = tail;
    11a8:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    11ac:	ldrb	r3, [r5, #0]
    11ae:	cmp	r4, r3
    11b0:	bne.n	117c <usb_serial_flush_input+0x20>
    11b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b6:	nop
    11b8:	.word	0x20000da0
    11bc:	.word	0x20000dc4
    11c0:	.word	0x20000c74
    11c4:	.word	0x20000da4
    11c8:	.word	0x20000dc0
    11cc:	.word	0x20000db0

000011d0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    11d0:	push	{lr}
    11d2:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    11d4:	movs	r1, #1
    11d6:	add.w	r0, sp, #7
    11da:	bl	1020 <usb_serial_read>
    11de:	cbz	r0, 11ea <usb_serial_getchar+0x1a>
    11e0:	ldrb.w	r0, [sp, #7]
	return -1;
}
    11e4:	add	sp, #12
    11e6:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    11ea:	mov.w	r0, #4294967295
    11ee:	b.n	11e4 <usb_serial_getchar+0x14>

000011f0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    11f0:	ldr	r3, [pc, #36]	; (1218 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    11f2:	push	{lr}
    11f4:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    11f6:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    11f8:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    11fc:	cbnz	r3, 1208 <usb_serial_putchar+0x18>
    11fe:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    1202:	add	sp, #12
    1204:	ldr.w	pc, [sp], #4
    1208:	movs	r1, #1
    120a:	add.w	r0, sp, #7
    120e:	bl	d98 <usb_serial_write.part.1>
    1212:	add	sp, #12
    1214:	ldr.w	pc, [sp], #4
    1218:	.word	0x20000e98

0000121c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    121c:	ldr	r3, [pc, #16]	; (1230 <usb_serial_write+0x14>)
    121e:	ldrb	r3, [r3, #0]
    1220:	and.w	r2, r3, #255	; 0xff
    1224:	cbz	r3, 122a <usb_serial_write+0xe>
    1226:	b.w	d98 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    122a:	mov	r0, r2
    122c:	bx	lr
    122e:	nop
    1230:	.word	0x20000e98

00001234 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    1234:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1238:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    123a:	ldr.w	r8, [pc, #64]	; 127c <usb_serial_write_buffer_free+0x48>
    123e:	movs	r3, #1
    1240:	ldr	r5, [pc, #48]	; (1274 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    1242:	mov	r7, r4
    1244:	ldr	r6, [pc, #48]	; (1278 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    1246:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    124a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    124c:	mov	r0, r5
    124e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1250:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1252:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1256:	beq.n	1264 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1258:	bl	1c38 <usb_transfer_status>
    125c:	lsls	r3, r0, #24
    125e:	it	pl
    1260:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1264:	cmp	r4, #4
    1266:	bne.n	124a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1268:	movs	r3, #0
	return sum;
}
    126a:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    126c:	strb.w	r3, [r8]
	return sum;
}
    1270:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1274:	.word	0x20000de0
    1278:	.word	0x20000c87
    127c:	.word	0x20000c86

00001280 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    1280:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    1284:	ldr	r3, [pc, #124]	; (1304 <usb_serial_flush_output+0x84>)
    1286:	ldrb	r3, [r3, #0]
    1288:	cbz	r3, 1290 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    128a:	ldr	r5, [pc, #124]	; (1308 <usb_serial_flush_output+0x88>)
    128c:	ldrh	r2, [r5, #0]
    128e:	cbnz	r2, 1294 <usb_serial_flush_output+0x14>
    1290:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1294:	ldr.w	r8, [pc, #132]	; 131c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1298:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    129c:	ldr	r6, [pc, #108]	; (130c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    129e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    12a2:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    12a6:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    12a8:	ldr	r4, [pc, #100]	; (1310 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    12aa:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    12ac:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    12b0:	ldr	r7, [pc, #96]	; (1314 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    12b2:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    12b6:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    12b8:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    12bc:	mov	r1, r4
    12be:	bl	1bbc <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    12c2:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    12c6:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    12ca:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    12ce:	ldr	r3, [pc, #72]	; (1318 <usb_serial_flush_output+0x98>)
    12d0:	str	r1, [r3, #0]
		location += 32;
    12d2:	adds	r1, #32
	} while (location < end_addr);
    12d4:	cmp	r2, r1
    12d6:	bhi.n	12d0 <usb_serial_flush_output+0x50>
	asm("dsb");
    12d8:	dsb	sy
	asm("isb");
    12dc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    12e0:	movs	r0, #4
    12e2:	mov	r1, r6
    12e4:	bl	1bec <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    12e8:	ldrb.w	r3, [r8]
    12ec:	ldr	r2, [pc, #44]	; (131c <usb_serial_flush_output+0x9c>)
    12ee:	adds	r3, #1
    12f0:	uxtb	r3, r3
    12f2:	cmp	r3, #3
    12f4:	it	hi
    12f6:	movhi	r3, #0
    12f8:	strb	r3, [r2, #0]
	tx_available = 0;
    12fa:	movs	r3, #0
    12fc:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    12fe:	strb	r3, [r7, #0]
    1300:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1304:	.word	0x20000e98
    1308:	.word	0x20000dc6
    130c:	.word	0x20000de0
    1310:	.word	0x20201000
    1314:	.word	0x20000c86
    1318:	.word	0xe000ef70
    131c:	.word	0x20000c87

00001320 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1320:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    1322:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1324:	cbz	r3, 132e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1326:	ldr	r3, [r2, #4]
    1328:	orr.w	r3, r3, #32768	; 0x8000
    132c:	str	r3, [r2, #4]
	}
	__disable_irq();
    132e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1330:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1332:	cbz	r4, 135c <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1334:	ldr	r3, [pc, #64]	; (1378 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    1336:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1338:	ldr.w	r4, [r3, #432]	; 0x1b0
    133c:	tst	r4, r1
    133e:	bne.n	1370 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1340:	ldr.w	r4, [r3, #320]	; 0x140
    1344:	orr.w	r4, r4, #16384	; 0x4000
    1348:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    134c:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    1350:	ldr.w	r4, [r3, #320]	; 0x140
    1354:	lsls	r4, r4, #17
    1356:	bpl.n	1340 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1358:	tst	r1, r5
    135a:	bne.n	1370 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    135c:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    135e:	ldr	r4, [pc, #24]	; (1378 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1360:	str	r2, [r0, #8]
	endpoint->status = 0;
    1362:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1364:	ldr.w	r3, [r4, #432]	; 0x1b0
    1368:	orrs	r1, r3
    136a:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    136e:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    1370:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1372:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1374:	pop	{r4, r5}
    1376:	bx	lr
    1378:	.word	0x402e0000

0000137c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    137c:	push	{r4, r5, r6, lr}
    137e:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1380:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1382:	cbz	r0, 13aa <run_callbacks+0x2e>
    1384:	mov	r2, r0
    1386:	movs	r4, #0
    1388:	b.n	1392 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    138a:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    138c:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    138e:	cmp	r2, #1
    1390:	beq.n	13ac <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1392:	ldr	r3, [r2, #4]
    1394:	ands.w	r3, r3, #128	; 0x80
    1398:	beq.n	138a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    139a:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    139c:	cbz	r4, 13aa <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    139e:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    13a0:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    13a2:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    13a4:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    13a6:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    13a8:	bne.n	139e <run_callbacks+0x22>
    13aa:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    13ac:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    13ae:	str	r3, [r6, #52]	; 0x34
			break;
    13b0:	b.n	139c <run_callbacks+0x20>
    13b2:	nop

000013b4 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    13b4:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    13b6:	cbnz	r1, 13f6 <endpoint0_transmit.constprop.1+0x42>
    13b8:	ldr	r4, [pc, #136]	; (1444 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13ba:	ldr	r1, [pc, #140]	; (1448 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    13bc:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    13be:	ldr	r3, [pc, #140]	; (144c <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13c0:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    13c2:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    13c4:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13c6:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    13c8:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    13ca:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    13cc:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    13ce:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    13d2:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    13d4:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    13d8:	ldr	r5, [pc, #116]	; (1450 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    13da:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    13de:	ldr.w	r1, [r3, #432]	; 0x1b0
    13e2:	orr.w	r1, r1, #1
    13e6:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    13ea:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    13ec:	ldr.w	r3, [r2, #432]	; 0x1b0
    13f0:	cmp	r3, #0
    13f2:	bne.n	13ec <endpoint0_transmit.constprop.1+0x38>
}
    13f4:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    13f6:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    13f8:	ldr	r3, [pc, #88]	; (1454 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    13fa:	ldr	r5, [pc, #80]	; (144c <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    13fc:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    13fe:	ldr	r4, [pc, #68]	; (1444 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1400:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1404:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1406:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1408:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    140a:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    140e:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1410:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1414:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1416:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    141a:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    141e:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    1422:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1424:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1426:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    142a:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    142e:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1432:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1434:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1436:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    143a:	ldr.w	r3, [r2, #432]	; 0x1b0
    143e:	cmp	r3, #0
    1440:	bne.n	143a <endpoint0_transmit.constprop.1+0x86>
    1442:	b.n	13ba <endpoint0_transmit.constprop.1+0x6>
    1444:	.word	0x20003000
    1448:	.word	0x20002020
    144c:	.word	0x402e0000
    1450:	.word	0x20000e74
    1454:	.word	0x20002000

00001458 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    1458:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    145c:	ldr	r4, [pc, #752]	; (1750 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    145e:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1460:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1464:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1468:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    146c:	beq.n	152c <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    146e:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1472:	cmp	r3, #0
    1474:	beq.n	1522 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1476:	mov.w	fp, #65537	; 0x10001
    147a:	ldr.w	r9, [pc, #764]	; 1778 <isr+0x320>
    147e:	ldr	r6, [pc, #724]	; (1754 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1480:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1482:	mov	sl, fp
    1484:	ldr	r0, [r6, #40]	; 0x28
    1486:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1488:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    148c:	ldr.w	r3, [r4, #320]	; 0x140
    1490:	orr.w	r3, r3, #8192	; 0x2000
    1494:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1498:	ldr.w	r3, [r4, #320]	; 0x140
    149c:	lsls	r7, r3, #18
    149e:	bpl.n	148c <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    14a0:	ldr.w	r3, [r5, #320]	; 0x140
    14a4:	bic.w	r3, r3, #8192	; 0x2000
    14a8:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    14ac:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    14b0:	ldr.w	r3, [r4, #436]	; 0x1b4
    14b4:	ands.w	r3, r3, #65537	; 0x10001
    14b8:	bne.n	14b0 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    14ba:	uxth	r1, r0
    14bc:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    14c0:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    14c4:	cmp	r1, r7
    14c6:	bhi.w	1614 <isr+0x1bc>
    14ca:	cmp.w	r1, #1664	; 0x680
    14ce:	bcs.w	18a8 <isr+0x450>
    14d2:	cmp.w	r1, #258	; 0x102
    14d6:	beq.w	17ae <isr+0x356>
    14da:	bhi.w	16a6 <isr+0x24e>
    14de:	cmp	r1, #128	; 0x80
    14e0:	beq.w	1794 <isr+0x33c>
    14e4:	cmp	r1, #130	; 0x82
    14e6:	bne.w	1696 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    14ea:	uxth	r2, r2
    14ec:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    14f0:	cmp	r1, #7
    14f2:	bhi.w	1696 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    14f6:	lsls	r1, r1, #2
    14f8:	ldr	r0, [pc, #604]	; (1758 <isr+0x300>)
		reply_buffer[0] = 0;
    14fa:	ldr	r7, [pc, #608]	; (175c <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    14fc:	add	r0, r1
    14fe:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1500:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1502:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1504:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1506:	bpl.w	1926 <isr+0x4ce>
    150a:	lsls	r2, r1, #15
    150c:	bpl.n	1512 <isr+0xba>
			reply_buffer[0] = 1;
    150e:	movs	r3, #1
    1510:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1512:	movs	r1, #2
    1514:	ldr	r0, [pc, #580]	; (175c <isr+0x304>)
    1516:	bl	13b4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    151a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    151e:	cmp	r3, #0
    1520:	bne.n	1484 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1522:	ldr	r2, [pc, #556]	; (1750 <isr+0x2f8>)
    1524:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1528:	cmp	r3, #0
    152a:	bne.n	15ce <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    152c:	tst.w	r8, #64	; 0x40
    1530:	beq.n	1564 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1532:	ldr	r3, [pc, #540]	; (1750 <isr+0x2f8>)
    1534:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1538:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    153a:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    153e:	ldr.w	r1, [r3, #444]	; 0x1bc
    1542:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1546:	ldr.w	r4, [r2, #432]	; 0x1b0
    154a:	ldr	r3, [pc, #516]	; (1750 <isr+0x2f8>)
    154c:	cmp	r4, #0
    154e:	bne.n	1546 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1550:	mov.w	r2, #4294967295
    1554:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1558:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    155c:	bl	f14 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    1560:	ldr	r3, [pc, #508]	; (1760 <isr+0x308>)
    1562:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1564:	tst.w	r8, #16777216	; 0x1000000
    1568:	beq.n	1572 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    156a:	ldr	r3, [pc, #504]	; (1764 <isr+0x30c>)
    156c:	ldr	r3, [r3, #0]
    156e:	cbz	r3, 1572 <isr+0x11a>
    1570:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    1572:	tst.w	r8, #33554432	; 0x2000000
    1576:	beq.n	1580 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1578:	ldr	r3, [pc, #492]	; (1768 <isr+0x310>)
    157a:	ldr	r3, [r3, #0]
    157c:	cbz	r3, 1580 <isr+0x128>
    157e:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    1580:	tst.w	r8, #4
    1584:	beq.n	1598 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1586:	ldr	r3, [pc, #456]	; (1750 <isr+0x2f8>)
    1588:	ldr.w	r3, [r3, #388]	; 0x184
    158c:	ands.w	r3, r3, #512	; 0x200
    1590:	beq.n	160e <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    1592:	ldr	r3, [pc, #472]	; (176c <isr+0x314>)
    1594:	movs	r2, #1
    1596:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1598:	ldr	r3, [pc, #436]	; (1750 <isr+0x2f8>)
    159a:	ldr.w	r2, [r3, #328]	; 0x148
    159e:	lsls	r2, r2, #24
    15a0:	bpl.n	15c8 <isr+0x170>
    15a2:	tst.w	r8, #128	; 0x80
    15a6:	beq.n	15c8 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    15a8:	ldr	r1, [pc, #452]	; (1770 <isr+0x318>)
    15aa:	ldrb	r2, [r1, #0]
    15ac:	cbz	r2, 15c8 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    15ae:	subs	r2, #1
    15b0:	uxtb	r2, r2
    15b2:	strb	r2, [r1, #0]
    15b4:	cbnz	r2, 15c8 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    15b6:	ldr	r1, [pc, #444]	; (1774 <isr+0x31c>)
    15b8:	ldrb	r2, [r1, #0]
    15ba:	and.w	r2, r2, #251	; 0xfb
    15be:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    15c0:	cmp	r2, #0
    15c2:	beq.w	1a2a <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    15c6:	bkpt	0x00fb
		#endif
		#ifdef MULTITOUCH_INTERFACE
		usb_touchscreen_update_callback();
		#endif
	}
}
    15c8:	add	sp, #12
    15ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    15ce:	ldr	r1, [pc, #424]	; (1778 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    15d0:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    15d4:	ldr	r0, [r1, #0]
    15d6:	tst	r3, r0
    15d8:	bne.w	19b2 <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    15dc:	ldr	r2, [pc, #384]	; (1760 <isr+0x308>)
    15de:	ldr	r4, [r2, #0]
			if (completestatus) {
    15e0:	ands	r4, r3
    15e2:	beq.n	152c <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    15e4:	lsls	r3, r4, #29
    15e6:	bmi.w	1a48 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    15ea:	lsls	r7, r4, #13
    15ec:	bmi.w	1a40 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    15f0:	lsls	r6, r4, #28
    15f2:	bmi.w	1a58 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    15f6:	lsls	r5, r4, #12
    15f8:	bmi.w	1a50 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    15fc:	lsls	r0, r4, #27
    15fe:	bmi.w	1a38 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    1602:	lsls	r1, r4, #11
    1604:	bpl.n	152c <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1606:	ldr	r0, [pc, #372]	; (177c <isr+0x324>)
    1608:	bl	137c <run_callbacks>
    160c:	b.n	152c <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    160e:	ldr	r2, [pc, #348]	; (176c <isr+0x314>)
    1610:	strb	r3, [r2, #0]
    1612:	b.n	1598 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1614:	movw	r7, #8225	; 0x2021
    1618:	cmp	r1, r7
    161a:	beq.n	168e <isr+0x236>
    161c:	bhi.n	16fe <isr+0x2a6>
    161e:	cmp.w	r1, #2176	; 0x880
    1622:	beq.w	188c <isr+0x434>
    1626:	cmp.w	r1, #2304	; 0x900
    162a:	bne.n	1696 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    162c:	ubfx	r0, r0, #16, #8
    1630:	ldr	r2, [pc, #332]	; (1780 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1632:	ldr	r1, [pc, #336]	; (1784 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1634:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1636:	ldr	r7, [pc, #336]	; (1788 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1638:	ldr	r2, [pc, #336]	; (178c <isr+0x334>)
    163a:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    163c:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1640:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1644:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    1648:	bl	f18 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    164c:	ldr	r2, [pc, #320]	; (1790 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    164e:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1650:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1652:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1654:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1656:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1658:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    165a:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    165e:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1660:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1664:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1666:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    166a:	ldr.w	r2, [r5, #432]	; 0x1b0
    166e:	orr.w	r2, r2, #65536	; 0x10000
    1672:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1676:	ldr	r2, [pc, #256]	; (1778 <isr+0x320>)
    1678:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    167a:	ldr.w	r3, [r4, #432]	; 0x1b0
    167e:	cmp	r3, #0
    1680:	bne.n	167a <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1682:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1686:	cmp	r3, #0
    1688:	bne.w	1484 <isr+0x2c>
    168c:	b.n	1522 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    168e:	lsrs	r1, r2, #16
    1690:	cmp	r1, #7
    1692:	beq.w	192e <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1696:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    169a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    169e:	cmp	r3, #0
    16a0:	bne.w	1484 <isr+0x2c>
    16a4:	b.n	1522 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    16a6:	movw	r7, #770	; 0x302
    16aa:	cmp	r1, r7
    16ac:	beq.w	1826 <isr+0x3ce>
    16b0:	cmp.w	r1, #1280	; 0x500
    16b4:	bne.n	1696 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16b6:	ldr	r2, [pc, #216]	; (1790 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16b8:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16ba:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    16bc:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16be:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    16c0:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    16c2:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    16c6:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    16c8:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    16cc:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    16ce:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    16d2:	ldr.w	r3, [r5, #432]	; 0x1b0
    16d6:	orr.w	r3, r3, #65536	; 0x10000
    16da:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    16de:	ldr.w	r3, [r4, #432]	; 0x1b0
    16e2:	cmp	r3, #0
    16e4:	bne.n	16de <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    16e6:	lsrs	r3, r0, #16
    16e8:	lsls	r3, r3, #25
    16ea:	orr.w	r3, r3, #16777216	; 0x1000000
    16ee:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    16f2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    16f6:	cmp	r3, #0
    16f8:	bne.w	1484 <isr+0x2c>
    16fc:	b.n	1522 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    16fe:	movw	r3, #8737	; 0x2221
    1702:	cmp	r1, r3
    1704:	beq.w	1814 <isr+0x3bc>
    1708:	movw	r3, #8993	; 0x2321
    170c:	cmp	r1, r3
    170e:	bne.n	1696 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1710:	ldr	r3, [pc, #124]	; (1790 <isr+0x338>)
    1712:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1714:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1716:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1718:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    171a:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    171c:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1720:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1722:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1726:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1728:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    172a:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    172e:	ldr.w	r3, [r4, #432]	; 0x1b0
    1732:	orr.w	r3, r3, #65536	; 0x10000
    1736:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    173a:	ldr.w	r3, [r4, #432]	; 0x1b0
    173e:	cmp	r3, #0
    1740:	bne.n	173a <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1742:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1746:	cmp	r3, #0
    1748:	bne.w	1484 <isr+0x2c>
    174c:	b.n	1522 <isr+0xca>
    174e:	nop
    1750:	.word	0x402e0000
    1754:	.word	0x20003000
    1758:	.word	0x402e01c0
    175c:	.word	0x20000e88
    1760:	.word	0x20000e64
    1764:	.word	0x20000e60
    1768:	.word	0x20000e6c
    176c:	.word	0x20000e70
    1770:	.word	0x20000e78
    1774:	.word	0x20000e68
    1778:	.word	0x20000e74
    177c:	.word	0x20003240
    1780:	.word	0x20000e98
    1784:	.word	0x000200c8
    1788:	.word	0x00cc0002
    178c:	.word	0x00c80002
    1790:	.word	0x20002020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1794:	ldr	r2, [pc, #744]	; (1a80 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    1796:	movs	r1, #2
    1798:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    179a:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    179c:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    179e:	bl	13b4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    17a2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    17a6:	cmp	r3, #0
    17a8:	bne.w	1484 <isr+0x2c>
    17ac:	b.n	1522 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    17ae:	uxth	r2, r2
    17b0:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    17b4:	cmp	r3, #7
    17b6:	bhi.w	1696 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    17ba:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    17be:	mov.w	r3, r3, lsl #2
    17c2:	ldr	r2, [pc, #704]	; (1a84 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17c4:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    17c8:	add	r2, r3
    17ca:	ldr	r3, [r2, #0]
    17cc:	ite	ne
    17ce:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    17d2:	biceq.w	r3, r3, #1
    17d6:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17d8:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    17da:	ldr	r3, [pc, #684]	; (1a88 <isr+0x630>)
    17dc:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    17de:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17e0:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17e2:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    17e6:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17e8:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    17ec:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    17ee:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    17f0:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    17f4:	ldr.w	r3, [r4, #432]	; 0x1b0
    17f8:	orr.w	r3, r3, #65536	; 0x10000
    17fc:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1800:	ldr.w	r3, [r4, #432]	; 0x1b0
    1804:	cmp	r3, #0
    1806:	bne.n	1800 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1808:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    180c:	cmp	r3, #0
    180e:	bne.w	1484 <isr+0x2c>
    1812:	b.n	1522 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1814:	ldr	r3, [pc, #628]	; (1a8c <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    1816:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    181a:	ldr	r2, [pc, #628]	; (1a90 <isr+0x638>)
    181c:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    181e:	ldr	r3, [pc, #628]	; (1a94 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1820:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    1822:	strb	r0, [r3, #0]
    1824:	b.n	1710 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1826:	uxth	r2, r2
    1828:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    182c:	cmp	r3, #7
    182e:	bhi.w	1696 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1832:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1836:	mov.w	r3, r3, lsl #2
    183a:	ldr	r2, [pc, #584]	; (1a84 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    183c:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1840:	add	r2, r3
    1842:	ldr	r3, [r2, #0]
    1844:	ite	ne
    1846:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    184a:	orreq.w	r3, r3, #1
    184e:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1850:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1852:	ldr	r3, [pc, #564]	; (1a88 <isr+0x630>)
    1854:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1856:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1858:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    185a:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    185e:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1860:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1864:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1866:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1868:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    186c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1870:	orr.w	r3, r3, #65536	; 0x10000
    1874:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1878:	ldr.w	r3, [r4, #432]	; 0x1b0
    187c:	cmp	r3, #0
    187e:	bne.n	1878 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1880:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1884:	cmp	r3, #0
    1886:	bne.w	1484 <isr+0x2c>
    188a:	b.n	1522 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    188c:	ldr	r2, [pc, #520]	; (1a98 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    188e:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1890:	ldr	r3, [pc, #492]	; (1a80 <isr+0x628>)
    1892:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1894:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1896:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1898:	bl	13b4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    189c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    18a0:	cmp	r3, #0
    18a2:	bne.w	1484 <isr+0x2c>
    18a6:	b.n	1522 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    18a8:	ldr	r3, [pc, #496]	; (1a9c <isr+0x644>)
    18aa:	ldr	r1, [r3, #4]
    18ac:	cmp	r1, #0
    18ae:	beq.w	1696 <isr+0x23e>
    18b2:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    18b4:	uxth.w	lr, r2
    18b8:	b.n	18c4 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    18ba:	adds	r3, #12
    18bc:	ldr	r1, [r3, #4]
    18be:	cmp	r1, #0
    18c0:	beq.w	1696 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    18c4:	ldrh	r7, [r3, #0]
    18c6:	cmp	r7, r0
    18c8:	bne.n	18ba <isr+0x462>
    18ca:	ldrh	r7, [r3, #2]
    18cc:	cmp	r7, lr
    18ce:	bne.n	18ba <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    18d0:	lsrs	r7, r0, #8
    18d2:	cmp	r7, #3
    18d4:	beq.w	1ae4 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    18d8:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    18da:	lsrs	r2, r2, #16
    18dc:	cmp	r3, r2
    18de:	it	cs
    18e0:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    18e2:	cmp.w	r0, #512	; 0x200
    18e6:	beq.w	1a60 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    18ea:	cmp.w	r0, #1792	; 0x700
    18ee:	beq.w	1a04 <isr+0x5ac>
    18f2:	ldr	r7, [pc, #428]	; (1aa0 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    18f4:	mov	r2, r3
    18f6:	str	r3, [sp, #4]
    18f8:	mov	r0, r7
    18fa:	bl	1f74 <memcpy>
    18fe:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1900:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1904:	add	r7, r3
	asm("dsb");
    1906:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    190a:	ldr	r1, [pc, #408]	; (1aa4 <isr+0x64c>)
    190c:	str	r2, [r1, #0]
		location += 32;
    190e:	adds	r2, #32
	} while (location < end_addr);
    1910:	cmp	r7, r2
    1912:	bhi.n	190a <isr+0x4b2>
	asm("dsb");
    1914:	dsb	sy
	asm("isb");
    1918:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    191c:	ldr	r0, [pc, #384]	; (1aa0 <isr+0x648>)
    191e:	mov	r1, r3
    1920:	bl	13b4 <endpoint0_transmit.constprop.1>
    1924:	b.n	151a <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1926:	lsls	r3, r1, #31
    1928:	bpl.w	1512 <isr+0xba>
    192c:	b.n	150e <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    192e:	ldr	r7, [pc, #376]	; (1aa8 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1930:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1934:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1936:	ldr	r1, [pc, #372]	; (1aac <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1938:	ldr	r3, [pc, #372]	; (1ab0 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    193a:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    193c:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1940:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1942:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    1946:	ldr	r1, [pc, #364]	; (1ab4 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1948:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    194a:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    194e:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1952:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1956:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1958:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    195c:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1960:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1964:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1966:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1968:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    196c:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    196e:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1970:	ldr.w	r3, [r4, #432]	; 0x1b0
    1974:	cmp	r3, #0
    1976:	bne.n	1970 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    1978:	ldr	r2, [pc, #268]	; (1a88 <isr+0x630>)
    197a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    197c:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1980:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1982:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1984:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1988:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    198a:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    198e:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1990:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1994:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1996:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    199a:	ldr.w	r3, [r5, #432]	; 0x1b0
    199e:	orrs	r3, r0
    19a0:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    19a4:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    19a8:	ldr.w	r3, [r4, #432]	; 0x1b0
    19ac:	cmp	r3, #0
    19ae:	bne.n	19a8 <isr+0x550>
    19b0:	b.n	151a <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    19b2:	ldr	r4, [pc, #244]	; (1aa8 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    19b4:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    19b8:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    19ba:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    19bc:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    19be:	cmp	r4, r0
    19c0:	bne.w	15dc <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    19c4:	ldr	r1, [pc, #236]	; (1ab4 <isr+0x65c>)
    19c6:	ldr	r4, [pc, #240]	; (1ab8 <isr+0x660>)
    19c8:	ldmia	r1, {r0, r1}
    19ca:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    19cc:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    19ce:	str	r0, [r4, #0]
    19d0:	strh	r1, [r4, #4]
    19d2:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    19d4:	bne.w	15dc <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    19d8:	cpsid	i
	sof_usage |= (1 << interface);
    19da:	ldr	r0, [pc, #224]	; (1abc <isr+0x664>)
    19dc:	ldrb	r1, [r0, #0]
    19de:	orr.w	r1, r1, #4
    19e2:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    19e4:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    19e8:	lsls	r0, r1, #24
    19ea:	bmi.n	19fa <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    19ec:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    19f0:	movs	r0, #128	; 0x80
    19f2:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    19f6:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    19fa:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    19fc:	ldr	r2, [pc, #192]	; (1ac0 <isr+0x668>)
    19fe:	movs	r1, #80	; 0x50
    1a00:	strb	r1, [r2, #0]
    1a02:	b.n	15dc <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1a04:	ldr	r0, [pc, #188]	; (1ac4 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1a06:	mov	r2, r3
    1a08:	ldr	r7, [pc, #148]	; (1aa0 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1a0a:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1a0e:	ldr	r1, [pc, #184]	; (1ac8 <isr+0x670>)
    1a10:	ldr	r0, [pc, #184]	; (1acc <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1a12:	str	r3, [sp, #4]
    1a14:	cmp.w	lr, #0
    1a18:	it	eq
    1a1a:	moveq	r1, r0
    1a1c:	mov	r0, r7
    1a1e:	bl	1f74 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1a22:	movs	r2, #7
    1a24:	ldr	r3, [sp, #4]
    1a26:	strb	r2, [r7, #1]
    1a28:	b.n	1900 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1a2a:	ldr.w	r2, [r3, #328]	; 0x148
    1a2e:	bic.w	r2, r2, #128	; 0x80
    1a32:	str.w	r2, [r3, #328]	; 0x148
    1a36:	b.n	15c6 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1a38:	ldr	r0, [pc, #148]	; (1ad0 <isr+0x678>)
    1a3a:	bl	137c <run_callbacks>
    1a3e:	b.n	1602 <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1a40:	ldr	r0, [pc, #144]	; (1ad4 <isr+0x67c>)
    1a42:	bl	137c <run_callbacks>
    1a46:	b.n	15f0 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1a48:	ldr	r0, [pc, #140]	; (1ad8 <isr+0x680>)
    1a4a:	bl	137c <run_callbacks>
    1a4e:	b.n	15ea <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1a50:	ldr	r0, [pc, #136]	; (1adc <isr+0x684>)
    1a52:	bl	137c <run_callbacks>
    1a56:	b.n	15fc <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1a58:	ldr	r0, [pc, #132]	; (1ae0 <isr+0x688>)
    1a5a:	bl	137c <run_callbacks>
    1a5e:	b.n	15f6 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1a60:	ldr	r0, [pc, #96]	; (1ac4 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1a62:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1a64:	ldr	r1, [pc, #100]	; (1acc <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1a66:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1a68:	ldr	r0, [pc, #92]	; (1ac8 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1a6a:	str	r3, [sp, #4]
    1a6c:	cmp	r7, #0
    1a6e:	it	eq
    1a70:	moveq	r1, r0
    1a72:	ldr	r0, [pc, #44]	; (1aa0 <isr+0x648>)
    1a74:	bl	1f74 <memcpy>
    1a78:	ldr	r7, [pc, #36]	; (1aa0 <isr+0x648>)
    1a7a:	ldr	r3, [sp, #4]
    1a7c:	b.n	1900 <isr+0x4a8>
    1a7e:	nop
    1a80:	.word	0x20000e88
    1a84:	.word	0x402e01c0
    1a88:	.word	0x20002020
    1a8c:	.word	0x20000c50
    1a90:	.word	0x200012c8
    1a94:	.word	0x20000dc8
    1a98:	.word	0x20000e98
    1a9c:	.word	0x200002e4
    1aa0:	.word	0x20203000
    1aa4:	.word	0xe000ef70
    1aa8:	.word	0x20000e80
    1aac:	.word	0x00070080
    1ab0:	.word	0x20002000
    1ab4:	.word	0x20000e90
    1ab8:	.word	0x200012c0
    1abc:	.word	0x20000e68
    1ac0:	.word	0x20000e78
    1ac4:	.word	0x20000e70
    1ac8:	.word	0x60001610
    1acc:	.word	0x60001654
    1ad0:	.word	0x20003200
    1ad4:	.word	0x20003140
    1ad8:	.word	0x20003100
    1adc:	.word	0x200031c0
    1ae0:	.word	0x20003180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1ae4:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1ae6:	ldrb	r3, [r1, #0]
    1ae8:	cmp	r3, r2
    1aea:	it	cs
    1aec:	movcs	r3, r2
    1aee:	b.n	18ea <isr+0x492>

00001af0 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1af0:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1af2:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1af6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1afa:	ite	ne
    1afc:	movne	r7, #0
    1afe:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1b02:	cmp	r2, #2
    1b04:	bls.n	1b0a <usb_config_rx+0x1a>
    1b06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1b0a:	mov.w	sl, r0, lsl #7
    1b0e:	ldr.w	r9, [pc, #64]	; 1b50 <usb_config_rx+0x60>
    1b12:	mov	r5, r1
    1b14:	mov	r4, r0
    1b16:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1b1a:	movs	r1, #0
    1b1c:	movs	r2, #64	; 0x40
    1b1e:	mov	r8, r3
    1b20:	mov	r0, r6
    1b22:	bl	26ec <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1b26:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1b28:	orr.w	r1, r7, r5, lsl #16
    1b2c:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1b30:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1b34:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1b36:	cmp.w	r8, #0
    1b3a:	beq.n	1b06 <usb_config_rx+0x16>
    1b3c:	ldr	r3, [pc, #12]	; (1b4c <usb_config_rx+0x5c>)
    1b3e:	lsls	r0, r4
    1b40:	ldr	r4, [r3, #0]
    1b42:	orrs	r0, r4
    1b44:	str	r0, [r3, #0]
    1b46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b4a:	nop
    1b4c:	.word	0x20000e64
    1b50:	.word	0x20003000

00001b54 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1b54:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1b56:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1b5a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1b5e:	ite	ne
    1b60:	movne	r7, #0
    1b62:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1b66:	cmp	r2, #2
    1b68:	bls.n	1b6e <usb_config_tx+0x1a>
    1b6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1b6e:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1b70:	lsls	r5, r0, #7
    1b72:	ldr.w	r9, [pc, #68]	; 1bb8 <usb_config_tx+0x64>
    1b76:	mov	r8, r1
    1b78:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1b7a:	movs	r1, #0
    1b7c:	mov	r4, r0
    1b7e:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1b80:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1b84:	mov	r0, sl
    1b86:	bl	26ec <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1b8a:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1b8c:	orr.w	r1, r7, r8, lsl #16
    1b90:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1b94:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1b98:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1b9c:	cmp	r6, #0
    1b9e:	beq.n	1b6a <usb_config_tx+0x16>
    1ba0:	add.w	r0, r4, #16
    1ba4:	ldr	r3, [pc, #12]	; (1bb4 <usb_config_tx+0x60>)
    1ba6:	lsls	r2, r0
    1ba8:	ldr	r0, [r3, #0]
    1baa:	orrs	r2, r0
    1bac:	str	r2, [r3, #0]
    1bae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bb2:	nop
    1bb4:	.word	0x20000e64
    1bb8:	.word	0x20003000

00001bbc <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1bbc:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1bbe:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1bc0:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1bc2:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1bc6:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1bc8:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1bca:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1bcc:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1bd0:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1bd4:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1bd8:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1bdc:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1bde:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1be0:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1be2:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1be4:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1be6:	pop	{r4, r5, r6, r7}
    1be8:	bx	lr
    1bea:	nop

00001bec <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1bec:	subs	r3, r0, #2
    1bee:	cmp	r3, #2
    1bf0:	bls.n	1bf4 <usb_transmit+0x8>
    1bf2:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1bf4:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1bf6:	ldr	r3, [pc, #24]	; (1c10 <usb_transmit+0x24>)
    1bf8:	add.w	r4, r0, #16
    1bfc:	movs	r5, #1
    1bfe:	mov	r2, r1
    1c00:	add.w	r0, r3, r0, lsl #7
    1c04:	lsl.w	r1, r5, r4
}
    1c08:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1c0a:	b.w	1320 <schedule_transfer>
    1c0e:	nop
    1c10:	.word	0x20003040

00001c14 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1c14:	subs	r3, r0, #2
    1c16:	cmp	r3, #2
    1c18:	bls.n	1c1c <usb_receive+0x8>
    1c1a:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1c1c:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1c1e:	ldr	r3, [pc, #20]	; (1c34 <usb_receive+0x20>)
    1c20:	movs	r4, #1
    1c22:	mov	r2, r1
    1c24:	lsl.w	r1, r4, r0
    1c28:	add.w	r0, r3, r0, lsl #7
}
    1c2c:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1c30:	b.w	1320 <schedule_transfer>
    1c34:	.word	0x20003000

00001c38 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1c38:	ldr	r0, [r0, #4]
#endif
}
    1c3a:	bx	lr

00001c3c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c3c:	ldr	r0, [pc, #656]	; (1ed0 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1c3e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c42:	ldr	r3, [pc, #656]	; (1ed4 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c44:	ldr	r2, [r0, #120]	; 0x78
    1c46:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1c4a:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c4c:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1c4e:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c50:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c54:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c58:	ldr	r4, [pc, #636]	; (1ed8 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c5a:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c5e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1c60:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c64:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1c66:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c68:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c6c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1c70:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1c74:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1c78:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1c7c:	ldrh.w	r0, [r3, #392]	; 0x188
    1c80:	uxth	r0, r0
    1c82:	orr.w	r0, r0, #240	; 0xf0
    1c86:	strh.w	r0, [r3, #392]	; 0x188
    1c8a:	add.w	r0, r1, r1, lsl #1
    1c8e:	ldr	r3, [pc, #580]	; (1ed4 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1c90:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1c92:	movs	r5, #0
    1c94:	lsls	r0, r0, #5
    1c96:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c98:	cmp	r1, #4
    1c9a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c9c:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1ca0:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1ca2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1ca4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1ca6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1ca8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1caa:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1cac:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1cae:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1cb0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1cb2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cb4:	bne.n	1c8a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cb6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cba:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1cbe:	ldr	r3, [pc, #540]	; (1edc <pwm_init+0x2a0>)
    1cc0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cc4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cc6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1cc8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1ccc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cce:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1cd2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cd6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1cda:	ldrh.w	r0, [r4, #392]	; 0x188
    1cde:	uxth	r0, r0
    1ce0:	orr.w	r0, r0, #3840	; 0xf00
    1ce4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1ce8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1cec:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cf0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1cf4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1cf8:	ldrh.w	r0, [r3, #392]	; 0x188
    1cfc:	uxth	r0, r0
    1cfe:	orr.w	r0, r0, #240	; 0xf0
    1d02:	strh.w	r0, [r3, #392]	; 0x188
    1d06:	add.w	r0, r1, r1, lsl #1
    1d0a:	ldr	r3, [pc, #464]	; (1edc <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1d0c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d0e:	movs	r5, #0
    1d10:	lsls	r0, r0, #5
    1d12:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d14:	cmp	r1, #4
    1d16:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d18:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d1a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1d1e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1d20:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1d22:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1d24:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1d26:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1d28:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1d2a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1d2c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1d2e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d30:	bne.n	1d06 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d32:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d36:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d3a:	ldr	r3, [pc, #420]	; (1ee0 <pwm_init+0x2a4>)
    1d3c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d40:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d42:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d44:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d48:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d4a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d4e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d52:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1d56:	ldrh.w	r0, [r4, #392]	; 0x188
    1d5a:	uxth	r0, r0
    1d5c:	orr.w	r0, r0, #3840	; 0xf00
    1d60:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d64:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1d68:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d6c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1d70:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1d74:	ldrh.w	r0, [r3, #392]	; 0x188
    1d78:	uxth	r0, r0
    1d7a:	orr.w	r0, r0, #240	; 0xf0
    1d7e:	strh.w	r0, [r3, #392]	; 0x188
    1d82:	add.w	r0, r1, r1, lsl #1
    1d86:	ldr	r3, [pc, #344]	; (1ee0 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    1d88:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d8a:	movs	r5, #0
    1d8c:	lsls	r0, r0, #5
    1d8e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d90:	cmp	r1, #4
    1d92:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d94:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d96:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1d9a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1d9c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1d9e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1da0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1da2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1da4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1da6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1da8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1daa:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1dac:	bne.n	1d82 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dae:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1db2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1db6:	ldr	r3, [pc, #300]	; (1ee4 <pwm_init+0x2a8>)
    1db8:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dbc:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1dbe:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1dc0:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1dc4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dc6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1dca:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dce:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1dd2:	ldrh.w	r0, [r4, #392]	; 0x188
    1dd6:	uxth	r0, r0
    1dd8:	orr.w	r0, r0, #3840	; 0xf00
    1ddc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1de0:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1de4:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1de8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1dec:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1df0:	ldrh.w	r0, [r3, #392]	; 0x188
    1df4:	uxth	r0, r0
    1df6:	orr.w	r0, r0, #240	; 0xf0
    1dfa:	strh.w	r0, [r3, #392]	; 0x188
    1dfe:	add.w	r0, r1, r1, lsl #1
    1e02:	ldr	r3, [pc, #224]	; (1ee4 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    1e04:	adds	r1, #1
    1e06:	lsls	r0, r0, #5
    1e08:	mov	r4, r3
    1e0a:	cmp	r1, #4
    1e0c:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1e0e:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1e10:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1e14:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1e16:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1e18:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1e1a:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1e1c:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    1e1e:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1e20:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1e22:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1e24:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1e26:	bne.n	1dfe <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e28:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e2c:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e2e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e30:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e34:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e36:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e3a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e3c:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e40:	orrs	r3, r7
    1e42:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1e46:	ldrh.w	r3, [r4, #392]	; 0x188
    1e4a:	uxth	r3, r3
    1e4c:	orr.w	r3, r3, #3840	; 0xf00
    1e50:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e54:	lsls	r0, r2, #5
    1e56:	ldr	r3, [pc, #144]	; (1ee8 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e58:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1e5a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e5c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1e5e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1e60:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e62:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e64:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e66:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1e6a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1e6c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e6e:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e70:	bne.n	1e54 <pwm_init+0x218>
    1e72:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e74:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e76:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e7a:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e7e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e80:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e84:	lsls	r0, r2, #5
    1e86:	ldr	r3, [pc, #100]	; (1eec <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e88:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1e8a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e8c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1e8e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1e90:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e92:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e94:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e96:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1e98:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1e9a:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e9c:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e9e:	bne.n	1e84 <pwm_init+0x248>
    1ea0:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1ea2:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1ea4:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1ea8:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1eac:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1eae:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1eb2:	lsls	r0, r2, #5
    1eb4:	ldr	r3, [pc, #56]	; (1ef0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1eb6:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1eb8:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1eba:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1ebc:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1ebe:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1ec0:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1ec2:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1ec4:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1ec6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1ec8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1eca:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ecc:	bne.n	1eb2 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1ece:	pop	{r4, r5, r6, r7, pc}
    1ed0:	.word	0x400fc000
    1ed4:	.word	0x403dc000
    1ed8:	.word	0xfc030000
    1edc:	.word	0x403e0000
    1ee0:	.word	0x403e4000
    1ee4:	.word	0x403e8000
    1ee8:	.word	0x401dc000
    1eec:	.word	0x401e0000
    1ef0:	.word	0x401e4000

00001ef4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1ef4:	ldr	r2, [pc, #72]	; (1f40 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1ef6:	ldr	r3, [pc, #76]	; (1f44 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1ef8:	ldr.w	r0, [r2, #544]	; 0x220
    1efc:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1f00:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1f02:	push	{r4, lr}
    1f04:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1f06:	bhi.n	1f0e <usb_init_serialnumber+0x1a>
    1f08:	add.w	r0, r0, r0, lsl #2
    1f0c:	lsls	r0, r0, #1
    1f0e:	ldr	r4, [pc, #56]	; (1f48 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1f10:	add	r1, sp, #4
    1f12:	movs	r2, #10
    1f14:	bl	20a8 <ultoa>
    1f18:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1f1a:	movs	r3, #0
    1f1c:	mov	r0, r4
		char c = buf[i];
    1f1e:	ldrb.w	r2, [r1], #1
    1f22:	adds	r3, #1
		if (!c) break;
    1f24:	cbz	r2, 1f36 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1f26:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1f28:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1f2c:	bne.n	1f1e <usb_init_serialnumber+0x2a>
    1f2e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1f30:	strb	r3, [r4, #0]
}
    1f32:	add	sp, #16
    1f34:	pop	{r4, pc}
    1f36:	lsls	r3, r3, #1
    1f38:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1f3a:	strb	r3, [r4, #0]
}
    1f3c:	add	sp, #16
    1f3e:	pop	{r4, pc}
    1f40:	.word	0x401f4400
    1f44:	.word	0x0098967f
    1f48:	.word	0x2000038c

00001f4c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    1f4c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    1f4e:	ldr	r3, [pc, #28]	; (1f6c <HardwareSerial::processSerialEvents()+0x20>)
    1f50:	ldrb	r4, [r3, #0]
    1f52:	cbz	r4, 1f68 <HardwareSerial::processSerialEvents()+0x1c>
    1f54:	ldr	r5, [pc, #24]	; (1f70 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    1f56:	ldr.w	r3, [r5, #4]!
    1f5a:	cmp	r3, #0
    1f5c:	beq.n	1f56 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    1f5e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    1f60:	subs	r3, r4, #1
    1f62:	ands.w	r4, r3, #255	; 0xff
    1f66:	bne.n	1f56 <HardwareSerial::processSerialEvents()+0xa>
    1f68:	pop	{r3, r4, r5, pc}
    1f6a:	nop
    1f6c:	.word	0x20000ec8
    1f70:	.word	0x20000ea8

00001f74 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1f74:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1f76:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1f7a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1f7e:	bne.n	205c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1f80:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1f82:	bcc.n	2008 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1f84:	ldr.w	r3, [r1], #4
    1f88:	str.w	r3, [r0], #4
    1f8c:	ldr.w	r3, [r1], #4
    1f90:	str.w	r3, [r0], #4
    1f94:	ldr.w	r3, [r1], #4
    1f98:	str.w	r3, [r0], #4
    1f9c:	ldr.w	r3, [r1], #4
    1fa0:	str.w	r3, [r0], #4
    1fa4:	ldr.w	r3, [r1], #4
    1fa8:	str.w	r3, [r0], #4
    1fac:	ldr.w	r3, [r1], #4
    1fb0:	str.w	r3, [r0], #4
    1fb4:	ldr.w	r3, [r1], #4
    1fb8:	str.w	r3, [r0], #4
    1fbc:	ldr.w	r3, [r1], #4
    1fc0:	str.w	r3, [r0], #4
    1fc4:	ldr.w	r3, [r1], #4
    1fc8:	str.w	r3, [r0], #4
    1fcc:	ldr.w	r3, [r1], #4
    1fd0:	str.w	r3, [r0], #4
    1fd4:	ldr.w	r3, [r1], #4
    1fd8:	str.w	r3, [r0], #4
    1fdc:	ldr.w	r3, [r1], #4
    1fe0:	str.w	r3, [r0], #4
    1fe4:	ldr.w	r3, [r1], #4
    1fe8:	str.w	r3, [r0], #4
    1fec:	ldr.w	r3, [r1], #4
    1ff0:	str.w	r3, [r0], #4
    1ff4:	ldr.w	r3, [r1], #4
    1ff8:	str.w	r3, [r0], #4
    1ffc:	ldr.w	r3, [r1], #4
    2000:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2004:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2006:	bcs.n	1f84 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2008:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    200a:	bcc.n	2030 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    200c:	ldr.w	r3, [r1], #4
    2010:	str.w	r3, [r0], #4
    2014:	ldr.w	r3, [r1], #4
    2018:	str.w	r3, [r0], #4
    201c:	ldr.w	r3, [r1], #4
    2020:	str.w	r3, [r0], #4
    2024:	ldr.w	r3, [r1], #4
    2028:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    202c:	subs	r2, #16
	bhs	.Lmid_block_loop
    202e:	bcs.n	200c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2030:	adds	r2, #12
	blo	.Lcopy_less_than_4
    2032:	bcc.n	2040 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2034:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2038:	str.w	r3, [r0], #4
	subs	r2, #4
    203c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    203e:	bcs.n	2034 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2040:	adds	r2, #4
	beq	.Ldone
    2042:	beq.n	2056 <memcpy+0xe2>

	lsls	r2, r2, #31
    2044:	lsls	r2, r2, #31
	itt ne
    2046:	itt	ne
	ldrbne  r3, [r1], #1
    2048:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    204c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2050:	bcc.n	2056 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2052:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2054:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2056:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2058:	bx	lr
    205a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    205c:	cmp	r2, #8
	blo	.Lbyte_copy
    205e:	bcc.n	2088 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2060:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2062:	beq.n	1f80 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2064:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2068:	beq.n	1f80 <memcpy+0xc>

	rsb	r3, #4
    206a:	rsb	r3, r3, #4
	subs	r2, r3
    206e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    2070:	lsls	r3, r3, #31
	itt ne
    2072:	itt	ne
	ldrbne  r3, [r1], #1
    2074:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2078:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    207c:	bcc.n	1f80 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    207e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2082:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2086:	b.n	1f80 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2088:	subs	r2, #4
	blo	.Lcopy_less_than_4
    208a:	bcc.n	2040 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    208c:	subs	r2, #1
	ldrb    r3, [r1], #1
    208e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2092:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2096:	bcs.n	208c <memcpy+0x118>

	ldrb	r3, [r1]
    2098:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    209a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    209c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    209e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    20a0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    20a2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    20a4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    20a6:	bx	lr

000020a8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    20a8:	push	{r4, r5, r6, r7}
    20aa:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    20ac:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    20ae:	mov	r7, r6
    20b0:	b.n	20b4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    20b2:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    20b4:	udiv	r3, r0, r2
    20b8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    20bc:	add.w	r4, r0, #55	; 0x37
    20c0:	cmp	r0, #9
    20c2:	add.w	r0, r0, #48	; 0x30
    20c6:	uxtb	r4, r4
    20c8:	it	ls
    20ca:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    20cc:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    20ce:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    20d2:	cmp	r3, #0
    20d4:	bne.n	20b2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    20d6:	adds	r2, r1, r5
    20d8:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    20da:	cbz	r5, 20f0 <ultoa+0x48>
    20dc:	adds	r3, #1
		t = buf[j];
    20de:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    20e2:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    20e4:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    20e6:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    20e8:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    20ea:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    20ee:	blt.n	20dc <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    20f0:	mov	r0, r1
    20f2:	pop	{r4, r5, r6, r7}
    20f4:	bx	lr
    20f6:	nop

000020f8 <__aeabi_atexit>:
    20f8:	mov	r3, r1
    20fa:	mov	r1, r0
    20fc:	mov	r0, r3
    20fe:	b.w	2104 <__cxa_atexit>
    2102:	nop

00002104 <__cxa_atexit>:
    2104:	mov	r3, r2
    2106:	mov	r2, r1
    2108:	mov	r1, r0
    210a:	movs	r0, #2
    210c:	b.w	27b4 <__register_exitproc>

00002110 <__errno>:
    2110:	ldr	r3, [pc, #4]	; (2118 <__errno+0x8>)
    2112:	ldr	r0, [r3, #0]
    2114:	bx	lr
    2116:	nop
    2118:	.word	0x200007d0

0000211c <__libc_init_array>:
    211c:	push	{r4, r5, r6, lr}
    211e:	ldr	r6, [pc, #60]	; (215c <__libc_init_array+0x40>)
    2120:	ldr	r5, [pc, #60]	; (2160 <__libc_init_array+0x44>)
    2122:	subs	r6, r6, r5
    2124:	asrs	r6, r6, #2
    2126:	it	ne
    2128:	movne	r4, #0
    212a:	beq.n	2138 <__libc_init_array+0x1c>
    212c:	adds	r4, #1
    212e:	ldr.w	r3, [r5], #4
    2132:	blx	r3
    2134:	cmp	r6, r4
    2136:	bne.n	212c <__libc_init_array+0x10>
    2138:	ldr	r6, [pc, #40]	; (2164 <__libc_init_array+0x48>)
    213a:	ldr	r5, [pc, #44]	; (2168 <__libc_init_array+0x4c>)
    213c:	subs	r6, r6, r5
    213e:	bl	2ac8 <___init_veneer>
    2142:	asrs	r6, r6, #2
    2144:	it	ne
    2146:	movne	r4, #0
    2148:	beq.n	2158 <__libc_init_array+0x3c>
    214a:	adds	r4, #1
    214c:	ldr.w	r3, [r5], #4
    2150:	blx	r3
    2152:	cmp	r6, r4
    2154:	bne.n	214a <__libc_init_array+0x2e>
    2156:	pop	{r4, r5, r6, pc}
    2158:	pop	{r4, r5, r6, pc}
    215a:	nop
    215c:	.word	0x600016f8
    2160:	.word	0x600016f8
    2164:	.word	0x60001700
    2168:	.word	0x600016f8

0000216c <malloc>:
    216c:	ldr	r3, [pc, #8]	; (2178 <malloc+0xc>)
    216e:	mov	r1, r0
    2170:	ldr	r0, [r3, #0]
    2172:	b.w	217c <_malloc_r>
    2176:	nop
    2178:	.word	0x200007d0

0000217c <_malloc_r>:
    217c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2180:	add.w	r5, r1, #11
    2184:	cmp	r5, #22
    2186:	sub	sp, #12
    2188:	mov	r6, r0
    218a:	bls.w	22cc <_malloc_r+0x150>
    218e:	bics.w	r5, r5, #7
    2192:	bmi.w	2314 <_malloc_r+0x198>
    2196:	cmp	r1, r5
    2198:	bhi.w	2314 <_malloc_r+0x198>
    219c:	bl	2788 <__malloc_lock>
    21a0:	cmp.w	r5, #504	; 0x1f8
    21a4:	bcc.w	26e0 <_malloc_r+0x564>
    21a8:	lsrs	r3, r5, #9
    21aa:	beq.w	2322 <_malloc_r+0x1a6>
    21ae:	cmp	r3, #4
    21b0:	bhi.w	24ba <_malloc_r+0x33e>
    21b4:	lsrs	r0, r5, #6
    21b6:	add.w	lr, r0, #57	; 0x39
    21ba:	mov.w	r3, lr, lsl #1
    21be:	adds	r0, #56	; 0x38
    21c0:	ldr	r7, [pc, #784]	; (24d4 <_malloc_r+0x358>)
    21c2:	add.w	r3, r7, r3, lsl #2
    21c6:	sub.w	r1, r3, #8
    21ca:	ldr	r4, [r3, #4]
    21cc:	cmp	r1, r4
    21ce:	bne.n	21e0 <_malloc_r+0x64>
    21d0:	b.n	232c <_malloc_r+0x1b0>
    21d2:	cmp	r2, #0
    21d4:	bge.w	2330 <_malloc_r+0x1b4>
    21d8:	ldr	r4, [r4, #12]
    21da:	cmp	r1, r4
    21dc:	beq.w	232c <_malloc_r+0x1b0>
    21e0:	ldr	r3, [r4, #4]
    21e2:	bic.w	r3, r3, #3
    21e6:	subs	r2, r3, r5
    21e8:	cmp	r2, #15
    21ea:	ble.n	21d2 <_malloc_r+0x56>
    21ec:	ldr	r1, [pc, #740]	; (24d4 <_malloc_r+0x358>)
    21ee:	ldr	r4, [r7, #16]
    21f0:	add.w	lr, r1, #8
    21f4:	cmp	r4, lr
    21f6:	beq.w	2560 <_malloc_r+0x3e4>
    21fa:	ldr	r3, [r4, #4]
    21fc:	bic.w	r3, r3, #3
    2200:	subs	r2, r3, r5
    2202:	cmp	r2, #15
    2204:	bgt.w	253a <_malloc_r+0x3be>
    2208:	cmp	r2, #0
    220a:	str.w	lr, [r1, #20]
    220e:	str.w	lr, [r1, #16]
    2212:	bge.w	2352 <_malloc_r+0x1d6>
    2216:	cmp.w	r3, #512	; 0x200
    221a:	bcs.w	24ec <_malloc_r+0x370>
    221e:	lsrs	r3, r3, #3
    2220:	add.w	ip, r3, #1
    2224:	movs	r2, #1
    2226:	asrs	r3, r3, #2
    2228:	lsl.w	r3, r2, r3
    222c:	ldr	r2, [r1, #4]
    222e:	ldr.w	r8, [r1, ip, lsl #3]
    2232:	str.w	r8, [r4, #8]
    2236:	add.w	r9, r1, ip, lsl #3
    223a:	orrs	r2, r3
    223c:	sub.w	r3, r9, #8
    2240:	str	r3, [r4, #12]
    2242:	str	r2, [r1, #4]
    2244:	str.w	r4, [r1, ip, lsl #3]
    2248:	str.w	r4, [r8, #12]
    224c:	asrs	r3, r0, #2
    224e:	movs	r4, #1
    2250:	lsls	r4, r3
    2252:	cmp	r4, r2
    2254:	bhi.w	236c <_malloc_r+0x1f0>
    2258:	tst	r4, r2
    225a:	bne.n	226a <_malloc_r+0xee>
    225c:	bic.w	r0, r0, #3
    2260:	lsls	r4, r4, #1
    2262:	tst	r4, r2
    2264:	add.w	r0, r0, #4
    2268:	beq.n	2260 <_malloc_r+0xe4>
    226a:	add.w	r9, r7, r0, lsl #3
    226e:	mov	ip, r9
    2270:	mov	r8, r0
    2272:	ldr.w	r1, [ip, #12]
    2276:	cmp	ip, r1
    2278:	bne.n	228a <_malloc_r+0x10e>
    227a:	b.n	2564 <_malloc_r+0x3e8>
    227c:	cmp	r2, #0
    227e:	bge.w	2584 <_malloc_r+0x408>
    2282:	ldr	r1, [r1, #12]
    2284:	cmp	ip, r1
    2286:	beq.w	2564 <_malloc_r+0x3e8>
    228a:	ldr	r3, [r1, #4]
    228c:	bic.w	r3, r3, #3
    2290:	subs	r2, r3, r5
    2292:	cmp	r2, #15
    2294:	ble.n	227c <_malloc_r+0x100>
    2296:	mov	r4, r1
    2298:	ldr.w	ip, [r1, #12]
    229c:	ldr.w	r8, [r4, #8]!
    22a0:	adds	r3, r1, r5
    22a2:	orr.w	r5, r5, #1
    22a6:	str	r5, [r1, #4]
    22a8:	orr.w	r1, r2, #1
    22ac:	str.w	ip, [r8, #12]
    22b0:	mov	r0, r6
    22b2:	str.w	r8, [ip, #8]
    22b6:	str	r3, [r7, #20]
    22b8:	str	r3, [r7, #16]
    22ba:	str.w	lr, [r3, #12]
    22be:	str.w	lr, [r3, #8]
    22c2:	str	r1, [r3, #4]
    22c4:	str	r2, [r3, r2]
    22c6:	bl	278c <__malloc_unlock>
    22ca:	b.n	230c <_malloc_r+0x190>
    22cc:	cmp	r1, #16
    22ce:	bhi.n	2314 <_malloc_r+0x198>
    22d0:	bl	2788 <__malloc_lock>
    22d4:	movs	r5, #16
    22d6:	movs	r3, #6
    22d8:	movs	r0, #2
    22da:	ldr	r7, [pc, #504]	; (24d4 <_malloc_r+0x358>)
    22dc:	add.w	r3, r7, r3, lsl #2
    22e0:	sub.w	r2, r3, #8
    22e4:	ldr	r4, [r3, #4]
    22e6:	cmp	r4, r2
    22e8:	beq.w	2576 <_malloc_r+0x3fa>
    22ec:	ldr	r3, [r4, #4]
    22ee:	ldr	r1, [r4, #12]
    22f0:	ldr	r5, [r4, #8]
    22f2:	bic.w	r3, r3, #3
    22f6:	add	r3, r4
    22f8:	mov	r0, r6
    22fa:	ldr	r2, [r3, #4]
    22fc:	str	r1, [r5, #12]
    22fe:	orr.w	r2, r2, #1
    2302:	str	r5, [r1, #8]
    2304:	str	r2, [r3, #4]
    2306:	bl	278c <__malloc_unlock>
    230a:	adds	r4, #8
    230c:	mov	r0, r4
    230e:	add	sp, #12
    2310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2314:	movs	r4, #0
    2316:	movs	r3, #12
    2318:	mov	r0, r4
    231a:	str	r3, [r6, #0]
    231c:	add	sp, #12
    231e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2322:	movs	r3, #128	; 0x80
    2324:	mov.w	lr, #64	; 0x40
    2328:	movs	r0, #63	; 0x3f
    232a:	b.n	21c0 <_malloc_r+0x44>
    232c:	mov	r0, lr
    232e:	b.n	21ec <_malloc_r+0x70>
    2330:	add	r3, r4
    2332:	ldr	r1, [r4, #12]
    2334:	ldr	r2, [r3, #4]
    2336:	ldr	r5, [r4, #8]
    2338:	orr.w	r2, r2, #1
    233c:	str	r1, [r5, #12]
    233e:	mov	r0, r6
    2340:	str	r5, [r1, #8]
    2342:	str	r2, [r3, #4]
    2344:	bl	278c <__malloc_unlock>
    2348:	adds	r4, #8
    234a:	mov	r0, r4
    234c:	add	sp, #12
    234e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2352:	add	r3, r4
    2354:	mov	r0, r6
    2356:	ldr	r2, [r3, #4]
    2358:	orr.w	r2, r2, #1
    235c:	str	r2, [r3, #4]
    235e:	bl	278c <__malloc_unlock>
    2362:	adds	r4, #8
    2364:	mov	r0, r4
    2366:	add	sp, #12
    2368:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    236c:	ldr	r4, [r7, #8]
    236e:	ldr	r3, [r4, #4]
    2370:	bic.w	r8, r3, #3
    2374:	cmp	r8, r5
    2376:	bcc.n	2382 <_malloc_r+0x206>
    2378:	rsb	r3, r5, r8
    237c:	cmp	r3, #15
    237e:	bgt.w	249a <_malloc_r+0x31e>
    2382:	ldr	r3, [pc, #340]	; (24d8 <_malloc_r+0x35c>)
    2384:	ldr.w	r9, [pc, #352]	; 24e8 <_malloc_r+0x36c>
    2388:	ldr	r2, [r3, #0]
    238a:	ldr.w	r3, [r9]
    238e:	adds	r3, #1
    2390:	add	r2, r5
    2392:	add.w	sl, r4, r8
    2396:	beq.w	265a <_malloc_r+0x4de>
    239a:	add.w	r2, r2, #4096	; 0x1000
    239e:	adds	r2, #15
    23a0:	bic.w	r2, r2, #4080	; 0xff0
    23a4:	bic.w	r2, r2, #15
    23a8:	mov	r1, r2
    23aa:	mov	r0, r6
    23ac:	str	r2, [sp, #4]
    23ae:	bl	2790 <_sbrk_r>
    23b2:	cmp.w	r0, #4294967295
    23b6:	mov	fp, r0
    23b8:	ldr	r2, [sp, #4]
    23ba:	beq.w	266e <_malloc_r+0x4f2>
    23be:	cmp	sl, r0
    23c0:	bhi.w	25bc <_malloc_r+0x440>
    23c4:	ldr	r3, [pc, #276]	; (24dc <_malloc_r+0x360>)
    23c6:	ldr	r1, [r3, #0]
    23c8:	cmp	sl, fp
    23ca:	add	r1, r2
    23cc:	str	r1, [r3, #0]
    23ce:	beq.w	2678 <_malloc_r+0x4fc>
    23d2:	ldr.w	r0, [r9]
    23d6:	ldr.w	lr, [pc, #272]	; 24e8 <_malloc_r+0x36c>
    23da:	adds	r0, #1
    23dc:	ittet	ne
    23de:	rsbne	sl, sl, fp
    23e2:	addne	r1, sl
    23e4:	streq.w	fp, [lr]
    23e8:	strne	r1, [r3, #0]
    23ea:	ands.w	r1, fp, #7
    23ee:	beq.w	2620 <_malloc_r+0x4a4>
    23f2:	rsb	r0, r1, #8
    23f6:	rsb	r1, r1, #4096	; 0x1000
    23fa:	add	fp, r0
    23fc:	adds	r1, #8
    23fe:	add	r2, fp
    2400:	ubfx	r2, r2, #0, #12
    2404:	rsb	r9, r2, r1
    2408:	mov	r1, r9
    240a:	mov	r0, r6
    240c:	str	r3, [sp, #4]
    240e:	bl	2790 <_sbrk_r>
    2412:	adds	r3, r0, #1
    2414:	ldr	r3, [sp, #4]
    2416:	beq.w	2698 <_malloc_r+0x51c>
    241a:	rsb	r2, fp, r0
    241e:	add	r2, r9
    2420:	orr.w	r2, r2, #1
    2424:	ldr	r1, [r3, #0]
    2426:	str.w	fp, [r7, #8]
    242a:	add	r1, r9
    242c:	cmp	r4, r7
    242e:	str.w	r2, [fp, #4]
    2432:	str	r1, [r3, #0]
    2434:	ldr.w	r9, [pc, #164]	; 24dc <_malloc_r+0x360>
    2438:	beq.n	2468 <_malloc_r+0x2ec>
    243a:	cmp.w	r8, #15
    243e:	bls.w	263c <_malloc_r+0x4c0>
    2442:	ldr	r2, [r4, #4]
    2444:	sub.w	r3, r8, #12
    2448:	bic.w	r3, r3, #7
    244c:	adds	r0, r4, r3
    244e:	and.w	r2, r2, #1
    2452:	mov.w	lr, #5
    2456:	orrs	r2, r3
    2458:	cmp	r3, #15
    245a:	str	r2, [r4, #4]
    245c:	str.w	lr, [r0, #4]
    2460:	str.w	lr, [r0, #8]
    2464:	bhi.w	26a0 <_malloc_r+0x524>
    2468:	ldr	r3, [pc, #116]	; (24e0 <_malloc_r+0x364>)
    246a:	ldr	r4, [r7, #8]
    246c:	ldr	r2, [r3, #0]
    246e:	cmp	r1, r2
    2470:	it	hi
    2472:	strhi	r1, [r3, #0]
    2474:	ldr	r3, [pc, #108]	; (24e4 <_malloc_r+0x368>)
    2476:	ldr	r2, [r3, #0]
    2478:	cmp	r1, r2
    247a:	ldr	r2, [r4, #4]
    247c:	it	hi
    247e:	strhi	r1, [r3, #0]
    2480:	bic.w	r2, r2, #3
    2484:	cmp	r5, r2
    2486:	sub.w	r3, r2, r5
    248a:	bhi.n	2490 <_malloc_r+0x314>
    248c:	cmp	r3, #15
    248e:	bgt.n	249a <_malloc_r+0x31e>
    2490:	mov	r0, r6
    2492:	bl	278c <__malloc_unlock>
    2496:	movs	r4, #0
    2498:	b.n	230c <_malloc_r+0x190>
    249a:	adds	r2, r4, r5
    249c:	orr.w	r3, r3, #1
    24a0:	orr.w	r5, r5, #1
    24a4:	str	r5, [r4, #4]
    24a6:	mov	r0, r6
    24a8:	str	r2, [r7, #8]
    24aa:	str	r3, [r2, #4]
    24ac:	bl	278c <__malloc_unlock>
    24b0:	adds	r4, #8
    24b2:	mov	r0, r4
    24b4:	add	sp, #12
    24b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24ba:	cmp	r3, #20
    24bc:	bls.n	25a2 <_malloc_r+0x426>
    24be:	cmp	r3, #84	; 0x54
    24c0:	bhi.w	260c <_malloc_r+0x490>
    24c4:	lsrs	r0, r5, #12
    24c6:	add.w	lr, r0, #111	; 0x6f
    24ca:	mov.w	r3, lr, lsl #1
    24ce:	adds	r0, #110	; 0x6e
    24d0:	b.n	21c0 <_malloc_r+0x44>
    24d2:	nop
    24d4:	.word	0x200007d4
    24d8:	.word	0x20000ed4
    24dc:	.word	0x20000ed8
    24e0:	.word	0x20000ed0
    24e4:	.word	0x20000ecc
    24e8:	.word	0x20000be0
    24ec:	lsrs	r2, r3, #9
    24ee:	cmp	r2, #4
    24f0:	bls.n	25b0 <_malloc_r+0x434>
    24f2:	cmp	r2, #20
    24f4:	bhi.w	265e <_malloc_r+0x4e2>
    24f8:	add.w	r1, r2, #92	; 0x5c
    24fc:	lsls	r1, r1, #1
    24fe:	adds	r2, #91	; 0x5b
    2500:	add.w	ip, r7, r1, lsl #2
    2504:	ldr.w	r1, [r7, r1, lsl #2]
    2508:	ldr.w	r8, [pc, #476]	; 26e8 <_malloc_r+0x56c>
    250c:	sub.w	ip, ip, #8
    2510:	cmp	ip, r1
    2512:	beq.w	2626 <_malloc_r+0x4aa>
    2516:	ldr	r2, [r1, #4]
    2518:	bic.w	r2, r2, #3
    251c:	cmp	r3, r2
    251e:	bcs.n	2526 <_malloc_r+0x3aa>
    2520:	ldr	r1, [r1, #8]
    2522:	cmp	ip, r1
    2524:	bne.n	2516 <_malloc_r+0x39a>
    2526:	ldr.w	ip, [r1, #12]
    252a:	ldr	r2, [r7, #4]
    252c:	str.w	ip, [r4, #12]
    2530:	str	r1, [r4, #8]
    2532:	str.w	r4, [ip, #8]
    2536:	str	r4, [r1, #12]
    2538:	b.n	224c <_malloc_r+0xd0>
    253a:	adds	r3, r4, r5
    253c:	orr.w	r7, r2, #1
    2540:	orr.w	r5, r5, #1
    2544:	str	r5, [r4, #4]
    2546:	mov	r0, r6
    2548:	str	r3, [r1, #20]
    254a:	str	r3, [r1, #16]
    254c:	str.w	lr, [r3, #12]
    2550:	str.w	lr, [r3, #8]
    2554:	str	r7, [r3, #4]
    2556:	str	r2, [r3, r2]
    2558:	adds	r4, #8
    255a:	bl	278c <__malloc_unlock>
    255e:	b.n	230c <_malloc_r+0x190>
    2560:	ldr	r2, [r1, #4]
    2562:	b.n	224c <_malloc_r+0xd0>
    2564:	add.w	r8, r8, #1
    2568:	tst.w	r8, #3
    256c:	add.w	ip, ip, #8
    2570:	bne.w	2272 <_malloc_r+0xf6>
    2574:	b.n	25d8 <_malloc_r+0x45c>
    2576:	ldr	r4, [r3, #12]
    2578:	cmp	r3, r4
    257a:	it	eq
    257c:	addeq	r0, #2
    257e:	beq.w	21ec <_malloc_r+0x70>
    2582:	b.n	22ec <_malloc_r+0x170>
    2584:	add	r3, r1
    2586:	mov	r4, r1
    2588:	ldr	r2, [r3, #4]
    258a:	ldr	r1, [r1, #12]
    258c:	ldr.w	r5, [r4, #8]!
    2590:	orr.w	r2, r2, #1
    2594:	str	r2, [r3, #4]
    2596:	mov	r0, r6
    2598:	str	r1, [r5, #12]
    259a:	str	r5, [r1, #8]
    259c:	bl	278c <__malloc_unlock>
    25a0:	b.n	230c <_malloc_r+0x190>
    25a2:	add.w	lr, r3, #92	; 0x5c
    25a6:	add.w	r0, r3, #91	; 0x5b
    25aa:	mov.w	r3, lr, lsl #1
    25ae:	b.n	21c0 <_malloc_r+0x44>
    25b0:	lsrs	r2, r3, #6
    25b2:	add.w	r1, r2, #57	; 0x39
    25b6:	lsls	r1, r1, #1
    25b8:	adds	r2, #56	; 0x38
    25ba:	b.n	2500 <_malloc_r+0x384>
    25bc:	cmp	r4, r7
    25be:	ldr	r3, [pc, #296]	; (26e8 <_malloc_r+0x56c>)
    25c0:	beq.w	23c4 <_malloc_r+0x248>
    25c4:	ldr	r4, [r3, #8]
    25c6:	ldr	r2, [r4, #4]
    25c8:	bic.w	r2, r2, #3
    25cc:	b.n	2484 <_malloc_r+0x308>
    25ce:	ldr.w	r3, [r9], #-8
    25d2:	cmp	r9, r3
    25d4:	bne.w	26dc <_malloc_r+0x560>
    25d8:	tst.w	r0, #3
    25dc:	add.w	r0, r0, #4294967295
    25e0:	bne.n	25ce <_malloc_r+0x452>
    25e2:	ldr	r3, [r7, #4]
    25e4:	bic.w	r3, r3, r4
    25e8:	str	r3, [r7, #4]
    25ea:	lsls	r4, r4, #1
    25ec:	cmp	r4, r3
    25ee:	bhi.w	236c <_malloc_r+0x1f0>
    25f2:	cmp	r4, #0
    25f4:	beq.w	236c <_malloc_r+0x1f0>
    25f8:	tst	r4, r3
    25fa:	mov	r0, r8
    25fc:	bne.w	226a <_malloc_r+0xee>
    2600:	lsls	r4, r4, #1
    2602:	tst	r4, r3
    2604:	add.w	r0, r0, #4
    2608:	beq.n	2600 <_malloc_r+0x484>
    260a:	b.n	226a <_malloc_r+0xee>
    260c:	cmp.w	r3, #340	; 0x154
    2610:	bhi.n	2644 <_malloc_r+0x4c8>
    2612:	lsrs	r0, r5, #15
    2614:	add.w	lr, r0, #120	; 0x78
    2618:	mov.w	r3, lr, lsl #1
    261c:	adds	r0, #119	; 0x77
    261e:	b.n	21c0 <_malloc_r+0x44>
    2620:	mov.w	r1, #4096	; 0x1000
    2624:	b.n	23fe <_malloc_r+0x282>
    2626:	movs	r1, #1
    2628:	ldr.w	r3, [r8, #4]
    262c:	asrs	r2, r2, #2
    262e:	lsl.w	r2, r1, r2
    2632:	orrs	r2, r3
    2634:	str.w	r2, [r8, #4]
    2638:	mov	r1, ip
    263a:	b.n	252c <_malloc_r+0x3b0>
    263c:	movs	r3, #1
    263e:	str.w	r3, [fp, #4]
    2642:	b.n	2490 <_malloc_r+0x314>
    2644:	movw	r2, #1364	; 0x554
    2648:	cmp	r3, r2
    264a:	bhi.n	268e <_malloc_r+0x512>
    264c:	lsrs	r0, r5, #18
    264e:	add.w	lr, r0, #125	; 0x7d
    2652:	mov.w	r3, lr, lsl #1
    2656:	adds	r0, #124	; 0x7c
    2658:	b.n	21c0 <_malloc_r+0x44>
    265a:	adds	r2, #16
    265c:	b.n	23a8 <_malloc_r+0x22c>
    265e:	cmp	r2, #84	; 0x54
    2660:	bhi.n	26b0 <_malloc_r+0x534>
    2662:	lsrs	r2, r3, #12
    2664:	add.w	r1, r2, #111	; 0x6f
    2668:	lsls	r1, r1, #1
    266a:	adds	r2, #110	; 0x6e
    266c:	b.n	2500 <_malloc_r+0x384>
    266e:	ldr	r4, [r7, #8]
    2670:	ldr	r2, [r4, #4]
    2672:	bic.w	r2, r2, #3
    2676:	b.n	2484 <_malloc_r+0x308>
    2678:	ubfx	r0, sl, #0, #12
    267c:	cmp	r0, #0
    267e:	bne.w	23d2 <_malloc_r+0x256>
    2682:	add	r2, r8
    2684:	ldr	r3, [r7, #8]
    2686:	orr.w	r2, r2, #1
    268a:	str	r2, [r3, #4]
    268c:	b.n	2468 <_malloc_r+0x2ec>
    268e:	movs	r3, #254	; 0xfe
    2690:	mov.w	lr, #127	; 0x7f
    2694:	movs	r0, #126	; 0x7e
    2696:	b.n	21c0 <_malloc_r+0x44>
    2698:	movs	r2, #1
    269a:	mov.w	r9, #0
    269e:	b.n	2424 <_malloc_r+0x2a8>
    26a0:	add.w	r1, r4, #8
    26a4:	mov	r0, r6
    26a6:	bl	28f4 <_free_r>
    26aa:	ldr.w	r1, [r9]
    26ae:	b.n	2468 <_malloc_r+0x2ec>
    26b0:	cmp.w	r2, #340	; 0x154
    26b4:	bhi.n	26c2 <_malloc_r+0x546>
    26b6:	lsrs	r2, r3, #15
    26b8:	add.w	r1, r2, #120	; 0x78
    26bc:	lsls	r1, r1, #1
    26be:	adds	r2, #119	; 0x77
    26c0:	b.n	2500 <_malloc_r+0x384>
    26c2:	movw	r1, #1364	; 0x554
    26c6:	cmp	r2, r1
    26c8:	bhi.n	26d6 <_malloc_r+0x55a>
    26ca:	lsrs	r2, r3, #18
    26cc:	add.w	r1, r2, #125	; 0x7d
    26d0:	lsls	r1, r1, #1
    26d2:	adds	r2, #124	; 0x7c
    26d4:	b.n	2500 <_malloc_r+0x384>
    26d6:	movs	r1, #254	; 0xfe
    26d8:	movs	r2, #126	; 0x7e
    26da:	b.n	2500 <_malloc_r+0x384>
    26dc:	ldr	r3, [r7, #4]
    26de:	b.n	25ea <_malloc_r+0x46e>
    26e0:	lsrs	r0, r5, #3
    26e2:	adds	r3, r0, #1
    26e4:	lsls	r3, r3, #1
    26e6:	b.n	22da <_malloc_r+0x15e>
    26e8:	.word	0x200007d4

000026ec <memset>:
    26ec:	push	{r4, r5, r6}
    26ee:	lsls	r4, r0, #30
    26f0:	beq.n	2780 <memset+0x94>
    26f2:	subs	r4, r2, #1
    26f4:	cmp	r2, #0
    26f6:	beq.n	277c <memset+0x90>
    26f8:	uxtb	r5, r1
    26fa:	mov	r3, r0
    26fc:	b.n	2704 <memset+0x18>
    26fe:	subs	r2, r4, #1
    2700:	cbz	r4, 277c <memset+0x90>
    2702:	mov	r4, r2
    2704:	strb.w	r5, [r3], #1
    2708:	lsls	r2, r3, #30
    270a:	bne.n	26fe <memset+0x12>
    270c:	cmp	r4, #3
    270e:	bls.n	276e <memset+0x82>
    2710:	uxtb	r5, r1
    2712:	orr.w	r5, r5, r5, lsl #8
    2716:	cmp	r4, #15
    2718:	orr.w	r5, r5, r5, lsl #16
    271c:	bls.n	2752 <memset+0x66>
    271e:	add.w	r2, r3, #16
    2722:	mov	r6, r4
    2724:	subs	r6, #16
    2726:	cmp	r6, #15
    2728:	str.w	r5, [r2, #-16]
    272c:	str.w	r5, [r2, #-12]
    2730:	str.w	r5, [r2, #-8]
    2734:	str.w	r5, [r2, #-4]
    2738:	add.w	r2, r2, #16
    273c:	bhi.n	2724 <memset+0x38>
    273e:	sub.w	r2, r4, #16
    2742:	bic.w	r2, r2, #15
    2746:	and.w	r4, r4, #15
    274a:	adds	r2, #16
    274c:	cmp	r4, #3
    274e:	add	r3, r2
    2750:	bls.n	276e <memset+0x82>
    2752:	mov	r6, r3
    2754:	mov	r2, r4
    2756:	subs	r2, #4
    2758:	cmp	r2, #3
    275a:	str.w	r5, [r6], #4
    275e:	bhi.n	2756 <memset+0x6a>
    2760:	subs	r2, r4, #4
    2762:	bic.w	r2, r2, #3
    2766:	adds	r2, #4
    2768:	add	r3, r2
    276a:	and.w	r4, r4, #3
    276e:	cbz	r4, 277c <memset+0x90>
    2770:	uxtb	r1, r1
    2772:	add	r4, r3
    2774:	strb.w	r1, [r3], #1
    2778:	cmp	r3, r4
    277a:	bne.n	2774 <memset+0x88>
    277c:	pop	{r4, r5, r6}
    277e:	bx	lr
    2780:	mov	r4, r2
    2782:	mov	r3, r0
    2784:	b.n	270c <memset+0x20>
    2786:	nop

00002788 <__malloc_lock>:
    2788:	bx	lr
    278a:	nop

0000278c <__malloc_unlock>:
    278c:	bx	lr
    278e:	nop

00002790 <_sbrk_r>:
    2790:	push	{r3, r4, r5, lr}
    2792:	ldr	r4, [pc, #28]	; (27b0 <_sbrk_r+0x20>)
    2794:	movs	r3, #0
    2796:	mov	r5, r0
    2798:	mov	r0, r1
    279a:	str	r3, [r4, #0]
    279c:	bl	bb0 <_sbrk>
    27a0:	adds	r3, r0, #1
    27a2:	beq.n	27a6 <_sbrk_r+0x16>
    27a4:	pop	{r3, r4, r5, pc}
    27a6:	ldr	r3, [r4, #0]
    27a8:	cmp	r3, #0
    27aa:	beq.n	27a4 <_sbrk_r+0x14>
    27ac:	str	r3, [r5, #0]
    27ae:	pop	{r3, r4, r5, pc}
    27b0:	.word	0x20003280

000027b4 <__register_exitproc>:
    27b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27b8:	ldr	r4, [pc, #148]	; (2850 <__register_exitproc+0x9c>)
    27ba:	ldr	r5, [r4, #0]
    27bc:	ldr.w	r4, [r5, #328]	; 0x148
    27c0:	mov	r6, r0
    27c2:	mov	r8, r1
    27c4:	mov	sl, r2
    27c6:	mov	r9, r3
    27c8:	cbz	r4, 283c <__register_exitproc+0x88>
    27ca:	ldr	r0, [r4, #4]
    27cc:	cmp	r0, #31
    27ce:	bgt.n	2800 <__register_exitproc+0x4c>
    27d0:	adds	r3, r0, #1
    27d2:	cbz	r6, 27f2 <__register_exitproc+0x3e>
    27d4:	add.w	r5, r4, r0, lsl #2
    27d8:	movs	r2, #1
    27da:	str.w	sl, [r5, #136]	; 0x88
    27de:	ldr.w	r1, [r4, #392]	; 0x188
    27e2:	lsls	r2, r0
    27e4:	orrs	r1, r2
    27e6:	cmp	r6, #2
    27e8:	str.w	r1, [r4, #392]	; 0x188
    27ec:	str.w	r9, [r5, #264]	; 0x108
    27f0:	beq.n	2830 <__register_exitproc+0x7c>
    27f2:	adds	r0, #2
    27f4:	str	r3, [r4, #4]
    27f6:	str.w	r8, [r4, r0, lsl #2]
    27fa:	movs	r0, #0
    27fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2800:	ldr	r3, [pc, #80]	; (2854 <__register_exitproc+0xa0>)
    2802:	cbz	r3, 2846 <__register_exitproc+0x92>
    2804:	mov.w	r0, #400	; 0x190
    2808:	bl	216c <malloc>
    280c:	mov	r4, r0
    280e:	cbz	r0, 2846 <__register_exitproc+0x92>
    2810:	ldr.w	r3, [r5, #328]	; 0x148
    2814:	movs	r7, #0
    2816:	stmia.w	r0, {r3, r7}
    281a:	str.w	r4, [r5, #328]	; 0x148
    281e:	mov	r0, r7
    2820:	movs	r3, #1
    2822:	str.w	r7, [r4, #392]	; 0x188
    2826:	str.w	r7, [r4, #396]	; 0x18c
    282a:	cmp	r6, #0
    282c:	beq.n	27f2 <__register_exitproc+0x3e>
    282e:	b.n	27d4 <__register_exitproc+0x20>
    2830:	ldr.w	r1, [r4, #396]	; 0x18c
    2834:	orrs	r2, r1
    2836:	str.w	r2, [r4, #396]	; 0x18c
    283a:	b.n	27f2 <__register_exitproc+0x3e>
    283c:	add.w	r4, r5, #332	; 0x14c
    2840:	str.w	r4, [r5, #328]	; 0x148
    2844:	b.n	27ca <__register_exitproc+0x16>
    2846:	mov.w	r0, #4294967295
    284a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    284e:	nop
    2850:	.word	0x20000350
    2854:	.word	0x0000216d

00002858 <_malloc_trim_r>:
    2858:	push	{r3, r4, r5, r6, r7, lr}
    285a:	ldr	r7, [pc, #140]	; (28e8 <_malloc_trim_r+0x90>)
    285c:	mov	r4, r1
    285e:	mov	r6, r0
    2860:	bl	2788 <__malloc_lock>
    2864:	ldr	r3, [r7, #8]
    2866:	ldr	r5, [r3, #4]
    2868:	bic.w	r5, r5, #3
    286c:	subs	r1, r5, r4
    286e:	addw	r1, r1, #4079	; 0xfef
    2872:	bic.w	r1, r1, #4080	; 0xff0
    2876:	bic.w	r1, r1, #15
    287a:	sub.w	r4, r1, #4096	; 0x1000
    287e:	cmp.w	r4, #4096	; 0x1000
    2882:	blt.n	2894 <_malloc_trim_r+0x3c>
    2884:	movs	r1, #0
    2886:	mov	r0, r6
    2888:	bl	2790 <_sbrk_r>
    288c:	ldr	r3, [r7, #8]
    288e:	add	r3, r5
    2890:	cmp	r0, r3
    2892:	beq.n	289e <_malloc_trim_r+0x46>
    2894:	mov	r0, r6
    2896:	bl	278c <__malloc_unlock>
    289a:	movs	r0, #0
    289c:	pop	{r3, r4, r5, r6, r7, pc}
    289e:	negs	r1, r4
    28a0:	mov	r0, r6
    28a2:	bl	2790 <_sbrk_r>
    28a6:	adds	r0, #1
    28a8:	beq.n	28c6 <_malloc_trim_r+0x6e>
    28aa:	ldr	r3, [pc, #64]	; (28ec <_malloc_trim_r+0x94>)
    28ac:	ldr	r2, [r7, #8]
    28ae:	ldr	r1, [r3, #0]
    28b0:	subs	r5, r5, r4
    28b2:	orr.w	r5, r5, #1
    28b6:	mov	r0, r6
    28b8:	subs	r1, r1, r4
    28ba:	str	r5, [r2, #4]
    28bc:	str	r1, [r3, #0]
    28be:	bl	278c <__malloc_unlock>
    28c2:	movs	r0, #1
    28c4:	pop	{r3, r4, r5, r6, r7, pc}
    28c6:	movs	r1, #0
    28c8:	mov	r0, r6
    28ca:	bl	2790 <_sbrk_r>
    28ce:	ldr	r2, [r7, #8]
    28d0:	subs	r3, r0, r2
    28d2:	cmp	r3, #15
    28d4:	ble.n	2894 <_malloc_trim_r+0x3c>
    28d6:	ldr	r4, [pc, #24]	; (28f0 <_malloc_trim_r+0x98>)
    28d8:	ldr	r1, [pc, #16]	; (28ec <_malloc_trim_r+0x94>)
    28da:	ldr	r4, [r4, #0]
    28dc:	orr.w	r3, r3, #1
    28e0:	subs	r0, r0, r4
    28e2:	str	r3, [r2, #4]
    28e4:	str	r0, [r1, #0]
    28e6:	b.n	2894 <_malloc_trim_r+0x3c>
    28e8:	.word	0x200007d4
    28ec:	.word	0x20000ed8
    28f0:	.word	0x20000be0

000028f4 <_free_r>:
    28f4:	cmp	r1, #0
    28f6:	beq.n	2984 <_free_r+0x90>
    28f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28fc:	mov	r5, r1
    28fe:	mov	r8, r0
    2900:	bl	2788 <__malloc_lock>
    2904:	ldr.w	r7, [r5, #-4]
    2908:	ldr	r1, [pc, #424]	; (2ab4 <_free_r+0x1c0>)
    290a:	bic.w	r3, r7, #1
    290e:	sub.w	r4, r5, #8
    2912:	adds	r2, r4, r3
    2914:	ldr	r6, [r1, #8]
    2916:	ldr	r0, [r2, #4]
    2918:	cmp	r2, r6
    291a:	bic.w	r0, r0, #3
    291e:	beq.n	29e6 <_free_r+0xf2>
    2920:	lsls	r6, r7, #31
    2922:	str	r0, [r2, #4]
    2924:	bmi.n	293e <_free_r+0x4a>
    2926:	ldr.w	r7, [r5, #-8]
    292a:	subs	r4, r4, r7
    292c:	add.w	lr, r1, #8
    2930:	ldr	r5, [r4, #8]
    2932:	cmp	r5, lr
    2934:	add	r3, r7
    2936:	beq.n	2a18 <_free_r+0x124>
    2938:	ldr	r7, [r4, #12]
    293a:	str	r7, [r5, #12]
    293c:	str	r5, [r7, #8]
    293e:	adds	r5, r2, r0
    2940:	ldr	r5, [r5, #4]
    2942:	lsls	r5, r5, #31
    2944:	bpl.n	29cc <_free_r+0xd8>
    2946:	orr.w	r2, r3, #1
    294a:	str	r2, [r4, #4]
    294c:	str	r3, [r4, r3]
    294e:	cmp.w	r3, #512	; 0x200
    2952:	bcs.n	2986 <_free_r+0x92>
    2954:	lsrs	r3, r3, #3
    2956:	adds	r2, r3, #1
    2958:	ldr	r5, [r1, #4]
    295a:	ldr.w	r7, [r1, r2, lsl #3]
    295e:	str	r7, [r4, #8]
    2960:	movs	r0, #1
    2962:	asrs	r3, r3, #2
    2964:	lsl.w	r3, r0, r3
    2968:	add.w	r0, r1, r2, lsl #3
    296c:	orrs	r5, r3
    296e:	subs	r0, #8
    2970:	str	r0, [r4, #12]
    2972:	str	r5, [r1, #4]
    2974:	str.w	r4, [r1, r2, lsl #3]
    2978:	str	r4, [r7, #12]
    297a:	mov	r0, r8
    297c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2980:	b.w	278c <__malloc_unlock>
    2984:	bx	lr
    2986:	lsrs	r2, r3, #9
    2988:	cmp	r2, #4
    298a:	bhi.n	2a34 <_free_r+0x140>
    298c:	lsrs	r2, r3, #6
    298e:	add.w	r7, r2, #57	; 0x39
    2992:	lsls	r7, r7, #1
    2994:	add.w	r5, r2, #56	; 0x38
    2998:	add.w	r0, r1, r7, lsl #2
    299c:	ldr.w	r2, [r1, r7, lsl #2]
    29a0:	ldr	r1, [pc, #272]	; (2ab4 <_free_r+0x1c0>)
    29a2:	subs	r0, #8
    29a4:	cmp	r0, r2
    29a6:	beq.n	2a44 <_free_r+0x150>
    29a8:	ldr	r1, [r2, #4]
    29aa:	bic.w	r1, r1, #3
    29ae:	cmp	r3, r1
    29b0:	bcs.n	29b8 <_free_r+0xc4>
    29b2:	ldr	r2, [r2, #8]
    29b4:	cmp	r0, r2
    29b6:	bne.n	29a8 <_free_r+0xb4>
    29b8:	ldr	r0, [r2, #12]
    29ba:	str	r0, [r4, #12]
    29bc:	str	r2, [r4, #8]
    29be:	str	r4, [r0, #8]
    29c0:	str	r4, [r2, #12]
    29c2:	mov	r0, r8
    29c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29c8:	b.w	278c <__malloc_unlock>
    29cc:	ldr	r5, [r2, #8]
    29ce:	ldr	r7, [pc, #232]	; (2ab8 <_free_r+0x1c4>)
    29d0:	cmp	r5, r7
    29d2:	add	r3, r0
    29d4:	beq.n	2a56 <_free_r+0x162>
    29d6:	ldr	r0, [r2, #12]
    29d8:	str	r0, [r5, #12]
    29da:	orr.w	r2, r3, #1
    29de:	str	r5, [r0, #8]
    29e0:	str	r2, [r4, #4]
    29e2:	str	r3, [r4, r3]
    29e4:	b.n	294e <_free_r+0x5a>
    29e6:	lsls	r7, r7, #31
    29e8:	add	r3, r0
    29ea:	bmi.n	29fc <_free_r+0x108>
    29ec:	ldr.w	r2, [r5, #-8]
    29f0:	subs	r4, r4, r2
    29f2:	add	r3, r2
    29f4:	ldr	r0, [r4, #8]
    29f6:	ldr	r2, [r4, #12]
    29f8:	str	r2, [r0, #12]
    29fa:	str	r0, [r2, #8]
    29fc:	ldr	r2, [pc, #188]	; (2abc <_free_r+0x1c8>)
    29fe:	ldr	r2, [r2, #0]
    2a00:	orr.w	r0, r3, #1
    2a04:	cmp	r3, r2
    2a06:	str	r0, [r4, #4]
    2a08:	str	r4, [r1, #8]
    2a0a:	bcc.n	297a <_free_r+0x86>
    2a0c:	ldr	r3, [pc, #176]	; (2ac0 <_free_r+0x1cc>)
    2a0e:	mov	r0, r8
    2a10:	ldr	r1, [r3, #0]
    2a12:	bl	2858 <_malloc_trim_r>
    2a16:	b.n	297a <_free_r+0x86>
    2a18:	adds	r1, r2, r0
    2a1a:	ldr	r1, [r1, #4]
    2a1c:	lsls	r1, r1, #31
    2a1e:	bmi.n	2aaa <_free_r+0x1b6>
    2a20:	ldr	r1, [r2, #8]
    2a22:	ldr	r2, [r2, #12]
    2a24:	str	r2, [r1, #12]
    2a26:	add	r3, r0
    2a28:	orr.w	r0, r3, #1
    2a2c:	str	r1, [r2, #8]
    2a2e:	str	r0, [r4, #4]
    2a30:	str	r3, [r4, r3]
    2a32:	b.n	297a <_free_r+0x86>
    2a34:	cmp	r2, #20
    2a36:	bhi.n	2a68 <_free_r+0x174>
    2a38:	add.w	r7, r2, #92	; 0x5c
    2a3c:	lsls	r7, r7, #1
    2a3e:	add.w	r5, r2, #91	; 0x5b
    2a42:	b.n	2998 <_free_r+0xa4>
    2a44:	asrs	r2, r5, #2
    2a46:	ldr	r3, [r1, #4]
    2a48:	movs	r5, #1
    2a4a:	lsl.w	r2, r5, r2
    2a4e:	orrs	r3, r2
    2a50:	str	r3, [r1, #4]
    2a52:	mov	r2, r0
    2a54:	b.n	29ba <_free_r+0xc6>
    2a56:	orr.w	r2, r3, #1
    2a5a:	str	r4, [r1, #20]
    2a5c:	str	r4, [r1, #16]
    2a5e:	str	r5, [r4, #12]
    2a60:	str	r5, [r4, #8]
    2a62:	str	r2, [r4, #4]
    2a64:	str	r3, [r4, r3]
    2a66:	b.n	297a <_free_r+0x86>
    2a68:	cmp	r2, #84	; 0x54
    2a6a:	bhi.n	2a7a <_free_r+0x186>
    2a6c:	lsrs	r2, r3, #12
    2a6e:	add.w	r7, r2, #111	; 0x6f
    2a72:	lsls	r7, r7, #1
    2a74:	add.w	r5, r2, #110	; 0x6e
    2a78:	b.n	2998 <_free_r+0xa4>
    2a7a:	cmp.w	r2, #340	; 0x154
    2a7e:	bhi.n	2a8e <_free_r+0x19a>
    2a80:	lsrs	r2, r3, #15
    2a82:	add.w	r7, r2, #120	; 0x78
    2a86:	lsls	r7, r7, #1
    2a88:	add.w	r5, r2, #119	; 0x77
    2a8c:	b.n	2998 <_free_r+0xa4>
    2a8e:	movw	r0, #1364	; 0x554
    2a92:	cmp	r2, r0
    2a94:	bhi.n	2aa4 <_free_r+0x1b0>
    2a96:	lsrs	r2, r3, #18
    2a98:	add.w	r7, r2, #125	; 0x7d
    2a9c:	lsls	r7, r7, #1
    2a9e:	add.w	r5, r2, #124	; 0x7c
    2aa2:	b.n	2998 <_free_r+0xa4>
    2aa4:	movs	r7, #254	; 0xfe
    2aa6:	movs	r5, #126	; 0x7e
    2aa8:	b.n	2998 <_free_r+0xa4>
    2aaa:	orr.w	r2, r3, #1
    2aae:	str	r2, [r4, #4]
    2ab0:	str	r3, [r4, r3]
    2ab2:	b.n	297a <_free_r+0x86>
    2ab4:	.word	0x200007d4
    2ab8:	.word	0x200007dc
    2abc:	.word	0x20000bdc
    2ac0:	.word	0x20000ed4
    2ac4:	.word	0x00000000

00002ac8 <___init_veneer>:
    2ac8:	ldr.w	pc, [pc]	; 2acc <___init_veneer+0x4>
    2acc:	.word	0x600016a5

Disassembly of section .fini:

00002ad0 <_fini>:
    2ad0:	push	{r3, r4, r5, r6, r7, lr}
    2ad2:	nop
