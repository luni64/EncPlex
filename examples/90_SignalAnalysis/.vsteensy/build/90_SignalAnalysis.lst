
.vsteensy/build/90_SignalAnalysis.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001428 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	600016f0 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016c0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	6000129c <usb_init>
	analog_init();
600011e4:	bl	6000148c <analog_init>
	pwm_init();
600011e8:	bl	600016e0 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e4 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600016d0 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	600016c8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600016d8 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001700
60001220:	.word	0x00005d60
60001224:	.word	0x20000000
60001228:	.word	0x6000746c
6000122c:	.word	0x20000fa0
60001230:	.word	0x20000fa0
60001234:	.word	0x20020700
60001238:	.word	0xe000ed88
6000123c:	.word	0x200203fc
60001240:	.word	0x00001b05
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00001849
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x0000194d
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x2001e69c
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x2001e6a4
60001290:	.word	0x20020400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	600016b0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	600016b8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #640	; 0x280
6000132a:	bl	600016e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20020000
6000137c:	.word	0x20020400
60001380:	.word	0x00000d31
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_32M	(SCB_MPU_RASR_SIZE(24) | SCB_MPU_RASR_ENABLE)
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000138a:	ldr	r2, [pc, #100]	; (600013f0 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000138e:	ldr	r3, [pc, #100]	; (600013f4 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001390:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r0, [pc, #96]	; (600013f8 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001398:	ldr	r6, [pc, #96]	; (600013fc <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
6000139a:	ldr	r5, [pc, #100]	; (60001400 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139c:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000139e:	ldr	r7, [pc, #100]	; (60001404 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013a0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013a4:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013a6:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013a8:	ldr	r6, [pc, #92]	; (60001408 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013aa:	ldr	r5, [pc, #96]	; (6000140c <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013ac:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013ae:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b0:	ldr	r7, [pc, #92]	; (60001410 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013b2:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013b4:	ldr	r6, [pc, #92]	; (60001414 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013b6:	ldr	r5, [pc, #96]	; (60001418 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013ba:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013bc:	ldr	r7, [pc, #92]	; (6000141c <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013be:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c0:	ldr	r6, [pc, #92]	; (60001420 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c2:	ldr	r5, [pc, #96]	; (60001424 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013c4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c8:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ca:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013cc:	dsb	sy
	asm("isb");
600013d0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013d4:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013d8:	dsb	sy
	asm("isb");
600013dc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013e0:	ldr.w	r3, [r2, #-136]
600013e4:	orr.w	r3, r3, #196608	; 0x30000
600013e8:	str.w	r3, [r2, #-136]
600013ec:	pop	{r4, r5, r6, r7, pc}
600013ee:	nop
600013f0:	.word	0xe000ed9c
600013f4:	.word	0xe000eda0
600013f8:	.word	0xe000ed94
600013fc:	.word	0x03080025
60001400:	.word	0x00200011
60001404:	.word	0x07020021
60001408:	.word	0x20000012
6000140c:	.word	0x13080025
60001410:	.word	0x20200013
60001414:	.word	0x130b0027
60001418:	.word	0x40000014
6000141c:	.word	0x13100033
60001420:	.word	0x60000015
60001424:	.word	0x070b002f

60001428 <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
60001428:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000142a:	ldr	r2, [pc, #92]	; (60001488 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000142c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000142e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001432:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001436:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000143a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000143e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001442:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001444:	tst.w	r3, #2
60001448:	beq.n	60001458 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000144a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000144c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000144e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001450:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001452:	tst.w	r3, #2
60001456:	bne.n	6000144a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001458:	tst.w	r3, #8192	; 0x2000
6000145c:	bne.n	60001462 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145e:	str	r5, [r2, #20]
			continue;
60001460:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001462:	tst.w	r3, #4096	; 0x1000
60001466:	bne.n	6000146c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001468:	str	r6, [r2, #20]
			continue;
6000146a:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000146c:	cmp	r3, #0
6000146e:	bge.n	60001442 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001470:	tst.w	r3, #65536	; 0x10000
60001474:	beq.n	6000147a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001476:	str	r1, [r2, #24]
			continue;
60001478:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000147a:	lsls	r3, r3, #25
6000147c:	bmi.n	60001482 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000147e:	str	r7, [r2, #20]
			continue;
60001480:	b.n	60001442 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001482:	pop	{r4, r5, r6, r7}
60001484:	bx	lr
60001486:	nop
60001488:	.word	0x400d8000

6000148c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000148c:	ldr	r3, [pc, #68]	; (600014d4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148e:	ldr	r1, [pc, #72]	; (600014d8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001490:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001492:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001494:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001498:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000149a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000149c:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014a2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a4:	orr.w	r0, r0, #768	; 0x300
600014a8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014aa:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014ac:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ae:	ldr	r3, [r2, #72]	; 0x48
600014b0:	lsls	r3, r3, #24
600014b2:	bmi.n	600014ae <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014b4:	ldr	r3, [pc, #36]	; (600014dc <analog_init+0x50>)
600014b6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014ba:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014bc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014be:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014c0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014c2:	ldr	r3, [r2, #72]	; 0x48
600014c4:	ands.w	r3, r3, #128	; 0x80
600014c8:	bne.n	600014c2 <analog_init+0x36>
	calibrating = 0;
600014ca:	ldr	r2, [pc, #20]	; (600014e0 <analog_init+0x54>)
600014cc:	strb	r3, [r2, #0]
}
600014ce:	pop	{r4, r5}
600014d0:	bx	lr
600014d2:	nop
600014d4:	.word	0x400fc000
600014d8:	.word	0x400c4000
600014dc:	.word	0x400c8000
600014e0:	.word	0x2001e6c8

600014e4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e4:	ldr	r2, [pc, #216]	; (600015c0 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014e6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014e8:	ldr	r1, [pc, #216]	; (600015c4 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ea:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ee:	ldr	r3, [r2, #0]
600014f0:	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

FLASHMEM void tempmon_init(void)
{
600014f4:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014f8:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014fc:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #212]	; 600015d8 <tempmon_init+0xf4>
60001504:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001506:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150a:	ldr	r7, [pc, #188]	; (600015c8 <tempmon_init+0xe4>)
6000150c:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001514:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	vmov	s15, r0
60001528:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000152c:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000152e:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001532:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001536:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153a:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000153c:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001540:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001544:	ldr	r5, [pc, #132]	; (600015cc <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001546:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001550:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001554:	ldr	r6, [pc, #120]	; (600015d0 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001556:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155a:	ldr	r1, [pc, #120]	; (600015d4 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000155c:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155e:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001560:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001564:	vmov	s15, r3
60001568:	vcvt.f32.u32	s15, s15
6000156c:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001570:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001578:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000157c:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001580:	vmov	r3, s11
60001584:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158c:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001590:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001592:	and.w	r1, r1, r0, lsl #16
60001596:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159e:	orrs	r3, r1
600015a0:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a4:	vmov	r3, s15
600015a8:	ldr.w	r1, [r2, #272]	; 0x110
600015ac:	ubfx	r3, r3, #0, #12
600015b0:	orrs	r3, r1
600015b2:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015b6:	ldr	r3, [r2, #0]
600015b8:	orr.w	r3, r3, #2
600015bc:	str	r3, [r2, #0]
600015be:	pop	{r4, r5, r6, r7, pc}
600015c0:	.word	0x400d8180
600015c4:	.word	0x401f4400
600015c8:	.word	0x2001e6d4
600015cc:	.word	0x2001e6d0
600015d0:	.word	0x2001e6d8
600015d4:	.word	0x0fff0000
600015d8:	.word	0x2001e6cc

600015dc <usb_string_product_name_default>:
600015dc:	..U.S.B. .S.e.r.
600015ec:	i.a.l...

600015f4 <usb_string_manufacturer_name_default>:
600015f4:	..T.e.e.n.s.y.d.
60001604:	u.i.n.o.

6000160c <string0>:
6000160c:	....

60001610 <usb_config_descriptor_12>:
60001610:	..C.....2.......
60001620:	...$....$....$..
60001630:	.$..............
60001640:	.........@......
60001650:	@...

60001654 <usb_config_descriptor_480>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	................
60001694:	....

60001698 <qualifier_descriptor>:
60001698:	.......@....

600016a4 <_init>:
600016a4:	push	{r3, r4, r5, r6, r7, lr}
600016a6:	nop
600016a8:	pop	{r3, r4, r5, r6, r7}
600016aa:	pop	{r3}
600016ac:	mov	lr, r3
600016ae:	bx	lr

600016b0 <__usb_init_serialnumber_veneer>:
600016b0:	ldr.w	pc, [pc]	; 600016b4 <__usb_init_serialnumber_veneer+0x4>
600016b4:	.word	0x00001661

600016b8 <__delay_veneer>:
600016b8:	ldr.w	pc, [pc]	; 600016bc <__delay_veneer+0x4>
600016bc:	.word	0x00001515

600016c0 <__startup_early_hook_veneer>:
600016c0:	ldr.w	pc, [pc]	; 600016c4 <__startup_early_hook_veneer+0x4>
600016c4:	.word	0x00001b1d

600016c8 <____libc_init_array_veneer>:
600016c8:	ldr.w	pc, [pc]	; 600016cc <____libc_init_array_veneer+0x4>
600016cc:	.word	0x00001f1d

600016d0 <__startup_late_hook_veneer>:
600016d0:	ldr.w	pc, [pc]	; 600016d4 <__startup_late_hook_veneer+0x4>
600016d4:	.word	0x00001b21

600016d8 <__main_veneer>:
600016d8:	ldr.w	pc, [pc]	; 600016dc <__main_veneer+0x4>
600016dc:	.word	0x000016b9

600016e0 <__pwm_init_veneer>:
600016e0:	ldr.w	pc, [pc]	; 600016e4 <__pwm_init_veneer+0x4>
600016e4:	.word	0x00001c31

600016e8 <__memset_veneer>:
600016e8:	ldr.w	pc, [pc]	; 600016ec <__memset_veneer+0x4>
600016ec:	.word	0x000025d1

600016f0 <__set_arm_clock_veneer>:
600016f0:	ldr.w	pc, [pc]	; 600016f4 <__set_arm_clock_veneer+0x4>
600016f4:	.word	0x00000935

600016f8 <__init_array_start>:
600016f8:	.word	0x00000045

600016fc <__init_array_end>:
600016fc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	lsrs	r0, r4, #30
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	ldrb	r4, [r4, r5]
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	nop
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r4, #30
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	ldrb	r4, [r4, r5]
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	lsrs	r0, r4, #30
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
	...

00000080 <setup>:
      80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      84:	ldr	r2, [pc, #288]	; (1a8 <setup+0x128>)
      86:	ldr	r1, [pc, #292]	; (1ac <setup+0x12c>)
    unsigned phaseA;
    unsigned phaseB;
} data[bufSize];

void setup()
{
      88:	ldr	r5, [pc, #292]	; (1b0 <setup+0x130>)
      8a:	ldr	r4, [pc, #296]	; (1b4 <setup+0x134>)
      8c:	.word	0x8b06ed2d
      90:	sub	sp, #12
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      92:	.short	0x7813
      94:	cmp	r3, #0
      96:	.short	0xd0fc
      98:	ldrb	r3, [r1, #0]
      9a:	.short	0x07db
      9c:	bpl.n	92 <setup+0x12>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      9e:	ldr	r3, [r5, #0]
      a0:	.word	0x1a1b6820
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      a4:	cmp	r3, #14
      a6:	bls.n	92 <setup+0x12>
    while (!Serial) {}

    pinMode(LED_BUILTIN, OUTPUT);
      a8:	movs	r1, #1
      aa:	.short	0x200d
      ac:	bl	15e0 <pinMode>
    pinMode(0, INPUT_PULLUP);
      b0:	movs	r1, #2
      b2:	.short	0x2000
    pinMode(1, INPUT_PULLUP);

    data[0].cycles = ARM_DWT_CYCCNT;
      b4:	ldr	r4, [pc, #256]	; (1b8 <setup+0x138>)
void setup()
{
    while (!Serial) {}

    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(0, INPUT_PULLUP);
      b6:	bl	15e0 <pinMode>
    pinMode(1, INPUT_PULLUP);
      ba:	movs	r1, #2
      bc:	movs	r0, #1
    data[0].phaseB = digitalReadFast(1);

    //noInterrupts();

    unsigned i = 0;
    while (i < bufSize)
      be:	movw	r8, #10000	; 0x2710
{
    while (!Serial) {}

    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(0, INPUT_PULLUP);
    pinMode(1, INPUT_PULLUP);
      c2:	bl	15e0 <pinMode>

    data[0].cycles = ARM_DWT_CYCCNT;
      c6:	.short	0x4a3d
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
      c8:	mov.w	r3, #1107296256	; 0x42000000
      cc:	.word	0x46946811
      d0:	mov	r6, r3
    data[0].phaseA = digitalReadFast(0);
    data[0].phaseB = digitalReadFast(1);

    //noInterrupts();

    unsigned i = 0;
      d2:	.short	0x2200

    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(0, INPUT_PULLUP);
    pinMode(1, INPUT_PULLUP);

    data[0].cycles = ARM_DWT_CYCCNT;
      d4:	str	r1, [r4, #0]
      d6:	.short	0x6899
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
      d8:	ldr	r3, [r3, #8]
    data[0].phaseA = digitalReadFast(0);
      da:	.short	0xf3c1
      dc:	lsls	r0, r0, #7
    data[0].phaseB = digitalReadFast(1);
      de:	.short	0xf3c3
      e0:	lsls	r0, r0, #14
    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(0, INPUT_PULLUP);
    pinMode(1, INPUT_PULLUP);

    data[0].cycles = ARM_DWT_CYCCNT;
    data[0].phaseA = digitalReadFast(0);
      e2:	str	r1, [r4, #4]
    data[0].phaseB = digitalReadFast(1);
      e4:	.word	0xe00860a3
        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
            data[i].phaseA = A;
            data[i].phaseB = B;
            i++;
      e8:	adds	r2, #1
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
      ea:	.short	0xf844
      ec:	b.n	13a <setup+0xba>
            data[i].phaseA = A;
      ee:	str.w	r1, [r9, #4]
    data[0].phaseB = digitalReadFast(1);

    //noInterrupts();

    unsigned i = 0;
    while (i < bufSize)
      f2:	cmp	r2, r8

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
            data[i].phaseA = A;
            data[i].phaseB = B;
      f4:	str.w	r0, [r9, #8]
    data[0].phaseB = digitalReadFast(1);

    //noInterrupts();

    unsigned i = 0;
    while (i < bufSize)
      f8:	beq.n	12c <setup+0xac>
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
      fa:	subs	r3, r2, #1
    //noInterrupts();

    unsigned i = 0;
    while (i < bufSize)
    {
        unsigned cycles = ARM_DWT_CYCCNT;
      fc:	ldr.w	lr, [ip]
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
     100:	.word	0xeb0268b1
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
     104:	lsls	r2, r0, #21
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
     106:	add.w	r3, r3, r3, lsl #1
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
     10a:	ldr	r0, [r6, #8]

    unsigned i = 0;
    while (i < bufSize)
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
     10c:	ubfx	r1, r1, #3, #1
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
     110:	add.w	r9, r4, r5, lsl #2
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
     114:	add.w	r3, r4, r3, lsl #2
    unsigned i = 0;
    while (i < bufSize)
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);
     118:	ubfx	r0, r0, #2, #1

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
     11c:	ldr	r7, [r3, #4]
     11e:	cmp	r1, r7
     120:	.word	0x689bd1e2
     124:	cmp	r0, r3
     126:	.short	0xd1df
    data[0].phaseB = digitalReadFast(1);

    //noInterrupts();

    unsigned i = 0;
    while (i < bufSize)
     128:	cmp	r2, r8
     12a:	.short	0xd1e6
     12c:	vldr	d10, [pc, #96]	; 190 <setup+0x110>
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     130:	vldr	d9, [pc, #100]	; 198 <setup+0x118>
     134:	.word	0x8b1aed9f
     138:	ldr	r4, [pc, #132]	; (1c0 <setup+0x140>)
     13a:	ldr	r5, [pc, #136]	; (1c4 <setup+0x144>)
     13c:	.word	0x1c0cf854
     140:	adds	r4, #12
     142:	.short	0xf854
     144:	subs	r4, #12
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     146:	ldr.w	r2, [r4, #-4]
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     14a:	.short	0x1a5b
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     14c:	ldr	r0, [pc, #120]	; (1c8 <setup+0x148>)
     14e:	.short	0x491f
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     150:	vmov	s14, r3
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     154:	.word	0x3c08f854
     158:	str	r2, [sp, #4]
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     15a:	vcvt.f64.u32	d7, s14
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     15e:	.short	0x9300
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     160:	vmul.f64	d7, d7, d9
     164:	.word	0x6b08ee87
     168:	vadd.f64	d7, d6, d10
     16c:	vcvt.f32.f64	s14, d7
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     170:	.word	0xaac7eeb7
     174:	vmov	r2, r3, d10
     178:	.word	0xfc1af001
    //interrupts();


    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
     17c:	cmp	r4, r5
     17e:	bne.n	13c <setup+0xbc>
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
    }
}
     180:	.word	0xecbdb003
     184:	ldrh	r6, [r0, #24]
     186:	.short	0xe8bd
     188:	strh	r0, [r6, #30]
     18a:	.short	0xbf00
     18c:	nop.w
	...
     19c:	ands	r0, r0
     19e:	.short	0x408f
     1a0:	movs	r0, r0
     1a2:	.short	0x0000
     1a4:	b.n	4ee <usb_serial_write.part.1+0x142>
     1a6:	.short	0x41c1
     1a8:	b.n	fffffedc <_flexram_bank_config+0x55555431>
     1aa:	.short	0x2001
     1ac:	b.n	fffffd40 <_flexram_bank_config+0x55555295>
     1ae:	.short	0x2001
     1b0:	b.n	fffffefc <_flexram_bank_config+0x55555451>
     1b2:	.short	0x2001
     1b4:	b.n	28 <_teensy_model_identifier+0x4>
     1b6:	movs	r0, #1
     1b8:	.word	0x20000fbc
     1bc:	asrs	r4, r0, #32
     1be:	.short	0xe000
     1c0:	lsrs	r0, r1, #31
     1c2:	.short	0x2000
     1c4:	b.n	fffffac0 <_flexram_bank_config+0x55555015>
     1c6:	.short	0x2001
     1c8:	lsls	r4, r3, #23
     1ca:	.short	0x2000
     1cc:	movs	r0, r0
     1ce:	movs	r0, #0

000001d0 <loop>:
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     1d0:	.word	0x689a4b07
     1d4:	lsls	r2, r2, #28
     1d6:	.short	0xd405
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     1d8:	movs	r2, #8

void loop()
{
    digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
    delay(200);
     1da:	.short	0x20c8
     1dc:	str.w	r2, [r3, #132]	; 0x84
     1e0:	.word	0xb998f001
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     1e4:	movs	r2, #8
     1e6:	.short	0x20c8
     1e8:	str.w	r2, [r3, #136]	; 0x88
     1ec:	b.w	1514 <delay>
     1f0:	.word	0x42004000

000001f4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     1f4:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     1f6:	ldr	r1, [pc, #80]	; (248 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     1f8:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     1fc:	ldr	r5, [pc, #76]	; (24c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     1fe:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     200:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     204:	ldr	r6, [pc, #72]	; (250 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     206:	ldr	r2, [pc, #76]	; (254 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     208:	add.w	r5, r5, r0, lsl #5
     20c:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     20e:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     210:	mov	r0, r5
     212:	ldrh	r2, [r6, #0]
     214:	bl	1494 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     218:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     21a:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     21e:	add	r1, r4
	asm("dsb");
     220:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     224:	ldr	r2, [pc, #48]	; (258 <rx_queue_transfer+0x64>)
     226:	str	r3, [r2, #0]
		location += 32;
     228:	adds	r3, #32
	} while (location < end_addr);
     22a:	cmp	r1, r3
     22c:	bhi.n	226 <rx_queue_transfer+0x32>
	asm("dsb");
     22e:	dsb	sy
	asm("isb");
     232:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     236:	movs	r0, #3
     238:	mov	r1, r5
     23a:	bl	14ec <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     23e:	ldr	r3, [pc, #28]	; (25c <rx_queue_transfer+0x68>)
     240:	mov.w	r2, #131072	; 0x20000
     244:	str	r2, [r3, #0]
     246:	pop	{r3, r4, r5, r6, r7, pc}
     248:	.word	0x20200000
     24c:	.word	0x2001e4a0
     250:	.word	0x2001e5ae
     254:	.word	0xe000e18c
     258:	.word	0xe000ef5c
     25c:	.word	0xe000e10c

00000260 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     260:	ldr	r2, [pc, #144]	; (2f4 <rx_event+0x94>)
     262:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     264:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     268:	ubfx	r3, r3, #16, #15
     26c:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     26e:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     270:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     272:	cmp	r4, #0
     274:	ble.n	2e8 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     276:	ldr	r1, [pc, #128]	; (2f8 <rx_event+0x98>)
		if (head != rx_tail) {
     278:	ldr	r2, [pc, #128]	; (2fc <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     27a:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     27c:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     27e:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     280:	ldr	r0, [pc, #124]	; (300 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     282:	ldr	r6, [pc, #128]	; (304 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     284:	cmp	r3, r2
     286:	beq.n	298 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     288:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     28c:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     290:	rsb	r2, r7, #512	; 0x200
     294:	cmp	r4, r2
     296:	bls.n	2be <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     298:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     29a:	movs	r2, #0
     29c:	ldr	r7, [pc, #104]	; (308 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     29e:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     2a0:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     2a4:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     2a8:	ldr	r6, [pc, #96]	; (30c <rx_event+0xac>)
     2aa:	ite	ls
     2ac:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     2ae:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     2b0:	strb	r2, [r1, #0]
		rx_available += len;
     2b2:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     2b4:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     2b6:	add	r4, r2
     2b8:	str	r4, [r6, #0]
     2ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     2be:	ldr	r3, [pc, #80]	; (310 <rx_event+0xb0>)
     2c0:	add.w	r0, r7, r8, lsl #9
     2c4:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     2c6:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     2c8:	add.w	r1, r3, r5, lsl #9
     2cc:	add	r0, r3
     2ce:	bl	19d0 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     2d2:	ldr	r2, [pc, #56]	; (30c <rx_event+0xac>)
				rx_queue_transfer(i);
     2d4:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     2d6:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     2da:	ldr	r3, [r2, #0]
     2dc:	add	r4, r3
     2de:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     2e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     2e4:	b.w	1f4 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     2e8:	mov	r0, r5
	}
}
     2ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     2ee:	b.w	1f4 <rx_queue_transfer>
     2f2:	nop
     2f4:	.word	0x2001e5ae
     2f8:	.word	0x2001e5c4
     2fc:	.word	0x2001e5a0
     300:	.word	0x2001e5a4
     304:	.word	0x2001e5b0
     308:	.word	0x2001e47c
     30c:	.word	0x2001e5c0
     310:	.word	0x20200000

00000314 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     314:	ldr	r3, [pc, #120]	; (390 <usb_serial_flush_callback+0x7c>)
     316:	ldrb	r2, [r3, #0]
     318:	cbnz	r2, 332 <usb_serial_flush_callback+0x1e>
     31a:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     31e:	ldr	r2, [pc, #116]	; (394 <usb_serial_flush_callback+0x80>)
     320:	ldrb	r2, [r2, #0]
     322:	cbz	r2, 332 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     324:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     328:	ldr	r5, [pc, #108]	; (398 <usb_serial_flush_callback+0x84>)
     32a:	ldrh	r2, [r5, #0]
     32c:	cbnz	r2, 334 <usb_serial_flush_callback+0x20>
     32e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     332:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     334:	ldr	r6, [pc, #100]	; (39c <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     336:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     33a:	ldr	r7, [pc, #100]	; (3a0 <usb_serial_flush_callback+0x8c>)
     33c:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     33e:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     340:	ldr	r4, [pc, #96]	; (3a4 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     342:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     346:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     34a:	mov	r0, r7
     34c:	mov	r1, r4
     34e:	bl	1494 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     352:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     356:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     35a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     35e:	ldr	r3, [pc, #72]	; (3a8 <usb_serial_flush_callback+0x94>)
     360:	str	r1, [r3, #0]
		location += 32;
     362:	adds	r1, #32
	} while (location < end_addr);
     364:	cmp	r2, r1
     366:	bhi.n	360 <usb_serial_flush_callback+0x4c>
	asm("dsb");
     368:	dsb	sy
	asm("isb");
     36c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     370:	movs	r0, #4
     372:	mov	r1, r7
     374:	bl	14c4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     378:	ldrb	r3, [r6, #0]
     37a:	ldr	r2, [pc, #32]	; (39c <usb_serial_flush_callback+0x88>)
     37c:	adds	r3, #1
     37e:	uxtb	r3, r3
     380:	cmp	r3, #3
     382:	it	hi
     384:	movhi	r3, #0
     386:	strb	r3, [r2, #0]
	tx_available = 0;
     388:	movs	r3, #0
     38a:	strh	r3, [r5, #0]
     38c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     390:	.word	0x2001e48e
     394:	.word	0x2001e698
     398:	.word	0x2001e5c6
     39c:	.word	0x2001e48f
     3a0:	.word	0x2001e5e0
     3a4:	.word	0x20201000
     3a8:	.word	0xe000ef70

000003ac <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     3ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3b0:	sub	sp, #20
     3b2:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     3b4:	str	r1, [sp, #4]
     3b6:	cmp	r1, #0
     3b8:	beq.w	500 <usb_serial_write.part.1+0x154>
     3bc:	movs	r3, #0
     3be:	ldr.w	r8, [pc, #348]	; 51c <usb_serial_write.part.1+0x170>
     3c2:	ldr.w	r9, [pc, #332]	; 510 <usb_serial_write.part.1+0x164>
     3c6:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     3c8:	ldr	r6, [pc, #312]	; (504 <usb_serial_write.part.1+0x158>)
     3ca:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     3ce:	ldr.w	sl, [pc, #336]	; 520 <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     3d2:	ldr.w	fp, [pc, #336]	; 524 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     3d6:	ldr	r2, [pc, #304]	; (508 <usb_serial_write.part.1+0x15c>)
     3d8:	ldrb	r4, [r2, #0]
     3da:	ldr	r2, [pc, #304]	; (50c <usb_serial_write.part.1+0x160>)
     3dc:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     3e0:	cmp	r3, #0
     3e2:	bne.n	4c2 <usb_serial_write.part.1+0x116>
     3e4:	mov	r5, r3
     3e6:	mov	r4, r3
     3e8:	b.n	414 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     3ea:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     3ee:	cbnz	r4, 3f2 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     3f0:	ldr	r5, [r6, #0]
     3f2:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     3f4:	cmp	r3, #0
     3f6:	bne.n	4b6 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     3f8:	ldr	r3, [r6, #0]
     3fa:	subs	r3, r3, r5
     3fc:	cmp	r3, #120	; 0x78
     3fe:	bhi.n	4f4 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     400:	ldrb.w	r3, [sl]
     404:	cmp	r3, #0
     406:	beq.n	4b6 <usb_serial_write.part.1+0x10a>
			yield();
     408:	bl	16c8 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     40c:	ldrh.w	r3, [r8]
     410:	cmp	r3, #0
     412:	bne.n	4be <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     414:	mov	r0, r7
     416:	bl	1510 <usb_transfer_status>
			if (!(status & 0x80)) {
     41a:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     41e:	ldr	r2, [pc, #240]	; (510 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     420:	bne.n	3ea <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     422:	mov.w	r3, #2048	; 0x800
     426:	ldr	r2, [pc, #224]	; (508 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     428:	strb.w	r0, [r9]
     42c:	ldrb	r4, [r2, #0]
     42e:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     430:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     434:	lsls	r4, r4, #11
		if (size >= tx_available) {
     436:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     438:	ldr	r1, [pc, #216]	; (514 <usb_serial_write.part.1+0x168>)
     43a:	add	r0, r4
		if (size >= tx_available) {
     43c:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     43e:	add	r0, r1
		if (size >= tx_available) {
     440:	bcc.n	4ca <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     442:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     444:	ldr	r1, [sp, #8]
     446:	bl	19d0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     44a:	movs	r3, #0
     44c:	mov	r1, r4
     44e:	mov.w	r2, #2048	; 0x800
     452:	mov	r0, r7
     454:	bl	1494 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     458:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     45c:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     460:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     464:	str.w	r3, [fp]
		location += 32;
     468:	adds	r3, #32
	} while (location < end_addr);
     46a:	cmp	r4, r3
     46c:	bhi.n	464 <usb_serial_write.part.1+0xb8>
	asm("dsb");
     46e:	dsb	sy
	asm("isb");
     472:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     476:	movs	r0, #4
     478:	mov	r1, r7
     47a:	bl	14c4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     47e:	ldr	r3, [pc, #136]	; (508 <usb_serial_write.part.1+0x15c>)
     480:	ldr	r2, [pc, #132]	; (508 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     482:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     484:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     486:	ldr	r0, [pc, #144]	; (518 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     488:	adds	r3, #1
     48a:	uxtb	r3, r3
     48c:	cmp	r3, #3
     48e:	it	hi
     490:	movhi	r3, #0
     492:	strb	r3, [r2, #0]
			size -= tx_available;
     494:	ldrh.w	r2, [r8]
			sent += tx_available;
     498:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     49a:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     49e:	add	r3, r2
     4a0:	str	r3, [sp, #0]
			data += tx_available;
     4a2:	ldr	r3, [sp, #8]
     4a4:	add	r3, r2
     4a6:	str	r3, [sp, #8]
     4a8:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     4aa:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     4ae:	ldr	r1, [sp, #4]
     4b0:	subs	r2, r1, r2
     4b2:	str	r2, [sp, #4]
     4b4:	bne.n	3d6 <usb_serial_write.part.1+0x2a>
     4b6:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     4b8:	add	sp, #20
     4ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4be:	ldr	r2, [pc, #72]	; (508 <usb_serial_write.part.1+0x15c>)
     4c0:	ldrb	r4, [r2, #0]
     4c2:	mov	r2, r3
     4c4:	rsb	r0, r3, #2048	; 0x800
     4c8:	b.n	434 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     4ca:	ldr	r4, [sp, #4]
     4cc:	ldr	r1, [sp, #8]
     4ce:	mov	r2, r4
     4d0:	str	r3, [sp, #12]
     4d2:	bl	19d0 <memcpy>
			tx_available -= size;
     4d6:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     4d8:	ldr	r2, [pc, #60]	; (518 <usb_serial_write.part.1+0x16c>)
     4da:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     4de:	subs	r3, r3, r4
     4e0:	strh.w	r3, [r8]
     4e4:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     4e6:	str.w	r1, [r2, #132]	; 0x84
     4ea:	mov	r0, r3
     4ec:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     4ee:	add	sp, #20
     4f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     4f4:	movs	r3, #1
				return sent;
     4f6:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     4f8:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     4fa:	add	sp, #20
     4fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     500:	ldr	r0, [sp, #4]
     502:	b.n	4b8 <usb_serial_write.part.1+0x10c>
     504:	.word	0x2001e6a4
     508:	.word	0x2001e48f
     50c:	.word	0x2001e5e0
     510:	.word	0x2001e5c5
     514:	.word	0x20201000
     518:	.word	0x402e0000
     51c:	.word	0x2001e5c6
     520:	.word	0x2001e698
     524:	.word	0xe000ef70

00000528 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     528:	bx	lr
     52a:	nop

0000052c <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     52c:	ldr	r3, [pc, #196]	; (5f4 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     52e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     532:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     534:	ldr	r7, [pc, #192]	; (5f8 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     536:	cmp	r3, #0
     538:	beq.n	5e4 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     53a:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     53e:	ldr.w	r8, [pc, #236]	; 62c <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     542:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     544:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     548:	movs	r1, #0
     54a:	movs	r2, #128	; 0x80
     54c:	ldr	r0, [pc, #172]	; (5fc <usb_serial_configure+0xd0>)
	tx_head = 0;
     54e:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     550:	ldr	r6, [pc, #172]	; (600 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     552:	bl	25d0 <memset>
	tx_head = 0;
     556:	ldr	r4, [pc, #172]	; (604 <usb_serial_configure+0xd8>)
	tx_available = 0;
     558:	ldr	r3, [pc, #172]	; (608 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     55a:	mov	r1, r5
     55c:	mov.w	r2, #256	; 0x100
     560:	ldr	r0, [pc, #168]	; (60c <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     562:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     564:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     566:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     568:	bl	25d0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
     56c:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     56e:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     570:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     572:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     574:	str	r5, [r6, #8]
     576:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     578:	ldr	r1, [pc, #148]	; (610 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     57a:	ldr	r6, [pc, #152]	; (614 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     57c:	ldr	r0, [pc, #152]	; (618 <usb_serial_configure+0xec>)
	rx_available = 0;
     57e:	ldr.w	lr, [pc, #176]	; 630 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     582:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     584:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     586:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     588:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     58a:	str	r5, [r6, #0]
     58c:	str	r5, [r6, #4]
     58e:	str	r5, [r6, #8]
     590:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     592:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     596:	bl	142c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     59a:	ldrh.w	r1, [r8]
     59e:	mov	r2, r5
     5a0:	ldr	r3, [pc, #120]	; (61c <usb_serial_configure+0xf0>)
     5a2:	movs	r0, #3
     5a4:	bl	13c8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     5a8:	mov	r3, r5
     5aa:	ldrh	r1, [r7, #0]
     5ac:	movs	r2, #1
     5ae:	movs	r0, #4
     5b0:	bl	142c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     5b4:	mov	r0, r4
     5b6:	adds	r4, #1
     5b8:	bl	1f4 <rx_queue_transfer>
     5bc:	cmp	r4, #8
     5be:	bne.n	5b4 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     5c0:	ldr	r3, [pc, #92]	; (620 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     5c2:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     5c4:	ldr	r0, [pc, #92]	; (624 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     5c6:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     5c8:	ldr	r4, [pc, #92]	; (628 <usb_serial_configure+0xfc>)
     5ca:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     5cc:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     5d0:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     5d4:	ldr.w	r2, [r3, #328]	; 0x148
     5d8:	orr.w	r2, r2, #16777216	; 0x1000000
     5dc:	str.w	r2, [r3, #328]	; 0x148
     5e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     5e4:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     5e6:	ldr.w	r8, [pc, #68]	; 62c <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     5ea:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     5ec:	strh.w	r3, [r8]
     5f0:	b.n	548 <usb_serial_configure+0x1c>
     5f2:	nop
     5f4:	.word	0x2001e670
     5f8:	.word	0x2001e48c
     5fc:	.word	0x2001e5e0
     600:	.word	0x2001e5b0
     604:	.word	0x2001e48f
     608:	.word	0x2001e5c6
     60c:	.word	0x2001e4a0
     610:	.word	0x2001e5c4
     614:	.word	0x2001e47c
     618:	.word	0x2001e5a0
     61c:	.word	0x00000261
     620:	.word	0x402e0000
     624:	.word	0x2001e660
     628:	.word	0x00000315
     62c:	.word	0x2001e5ae
     630:	.word	0x2001e5c0

00000634 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     634:	ldr	r3, [pc, #196]	; (6fc <usb_serial_read+0xc8>)
     636:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     63a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     63e:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     640:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     642:	ldr	r3, [pc, #188]	; (700 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     644:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     646:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     648:	cmp	r1, #0
     64a:	beq.n	6f4 <usb_serial_read+0xc0>
     64c:	ldr	r3, [pc, #180]	; (704 <usb_serial_read+0xd0>)
     64e:	uxtb	r4, r4
     650:	ldrb	r3, [r3, #0]
     652:	cmp	r4, r3
     654:	beq.n	6f8 <usb_serial_read+0xc4>
     656:	mov	sl, r0
     658:	movs	r7, #0
     65a:	ldr.w	fp, [pc, #192]	; 71c <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
     65e:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     660:	ldr	r3, [pc, #164]	; (708 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
     662:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     666:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     668:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     66a:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
     66c:	ldr	r3, [pc, #156]	; (70c <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     66e:	it	cs
     670:	movcs	r4, #0
		uint32_t i = rx_list[tail];
     672:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     674:	ldr	r3, [pc, #144]	; (708 <usb_serial_read+0xd4>)
     676:	ldrh.w	lr, [r3, r5, lsl #1]
     67a:	ldr	r3, [pc, #148]	; (710 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     67c:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     680:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     684:	ldr	r3, [pc, #140]	; (714 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     686:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     68a:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     68c:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     68e:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
     690:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     692:	bcs.n	6c8 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
     694:	add.w	r1, lr, r5, lsl #9
     698:	mov	r2, r8
     69a:	add	r1, r3
     69c:	bl	19d0 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
     6a0:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6a2:	ldr.w	r1, [fp]
     6a6:	mov	r0, r9
			rx_index[i] += len;
     6a8:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6ac:	rsb	r1, r8, r1
			rx_index[i] += len;
     6b0:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6b2:	str.w	r1, [fp]
			rx_index[i] += len;
     6b6:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
     6ba:	ldr	r3, [pc, #92]	; (718 <usb_serial_read+0xe4>)
     6bc:	mov.w	r2, #131072	; 0x20000
     6c0:	str	r2, [r3, #0]
	return count;
}
     6c2:	add	sp, #12
     6c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6c8:	bl	19d0 <memcpy>
			p += avail;
			rx_available -= avail;
     6cc:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     6d0:	uxtb	r3, r4
			rx_queue_transfer(i);
     6d2:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
     6d4:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
     6d6:	add	sl, r6
			rx_available -= avail;
     6d8:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     6dc:	ldr	r2, [pc, #32]	; (700 <usb_serial_read+0xcc>)
     6de:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
     6e0:	bl	1f4 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     6e4:	cmp	r9, r7
     6e6:	bls.n	6f0 <usb_serial_read+0xbc>
     6e8:	ldr	r3, [pc, #24]	; (704 <usb_serial_read+0xd0>)
     6ea:	ldrb	r3, [r3, #0]
     6ec:	cmp	r4, r3
     6ee:	bne.n	65e <usb_serial_read+0x2a>
     6f0:	mov	r0, r7
     6f2:	b.n	6ba <usb_serial_read+0x86>
     6f4:	mov	r0, r1
     6f6:	b.n	6ba <usb_serial_read+0x86>
     6f8:	movs	r0, #0
     6fa:	b.n	6ba <usb_serial_read+0x86>
     6fc:	.word	0xe000e18c
     700:	.word	0x2001e5a0
     704:	.word	0x2001e5c4
     708:	.word	0x2001e47c
     70c:	.word	0x2001e5a4
     710:	.word	0x2001e5b0
     714:	.word	0x20200000
     718:	.word	0xe000e10c
     71c:	.word	0x2001e5c0

00000720 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     720:	ldr	r3, [pc, #44]	; (750 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
     722:	ldr	r2, [pc, #48]	; (754 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     724:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
     726:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     728:	uxtb	r3, r3
	if (tail == rx_head) return -1;
     72a:	cmp	r3, r2
     72c:	beq.n	74a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
     72e:	adds	r3, #1
	uint32_t i = rx_list[tail];
     730:	ldr	r0, [pc, #36]	; (758 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     732:	ldr	r2, [pc, #40]	; (75c <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     734:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     736:	ldr	r1, [pc, #40]	; (760 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     738:	it	cs
     73a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
     73c:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     73e:	ldrh.w	r1, [r1, r3, lsl #1]
     742:	add.w	r3, r2, r3, lsl #9
     746:	ldrb	r0, [r3, r1]
     748:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
     74a:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
     74e:	bx	lr
     750:	.word	0x2001e5a0
     754:	.word	0x2001e5c4
     758:	.word	0x2001e5a4
     75c:	.word	0x20200000
     760:	.word	0x2001e47c

00000764 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
     764:	ldr	r3, [pc, #4]	; (76c <usb_serial_available+0x8>)
     766:	ldr	r0, [r3, #0]
}
     768:	bx	lr
     76a:	nop
     76c:	.word	0x2001e5c0

00000770 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
     770:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
     774:	ldr	r6, [pc, #84]	; (7cc <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
     776:	ldr	r5, [pc, #88]	; (7d0 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     778:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
     77a:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     77c:	uxtb	r4, r4
	while (tail != rx_head) {
     77e:	cmp	r4, r3
     780:	beq.n	7c6 <usb_serial_flush_input+0x56>
     782:	ldr.w	r9, [pc, #84]	; 7d8 <usb_serial_flush_input+0x68>
     786:	ldr.w	fp, [pc, #84]	; 7dc <usb_serial_flush_input+0x6c>
     78a:	ldr.w	r8, [pc, #84]	; 7e0 <usb_serial_flush_input+0x70>
     78e:	ldr	r7, [pc, #68]	; (7d4 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
     790:	adds	r4, #1
     792:	cmp	r4, #8
     794:	uxtb.w	sl, r4
     798:	bls.n	79e <usb_serial_flush_input+0x2e>
     79a:	movs	r4, #0
     79c:	mov	sl, r4
		uint32_t i = rx_list[tail];
     79e:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
     7a2:	ldr.w	r2, [fp]
     7a6:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
     7aa:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
     7ac:	ldrh.w	r1, [r7, r1, lsl #1]
     7b0:	subs	r3, r3, r1
     7b2:	subs	r3, r2, r3
     7b4:	str.w	r3, [fp]
		rx_queue_transfer(i);
     7b8:	bl	1f4 <rx_queue_transfer>
		rx_tail = tail;
     7bc:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
     7c0:	ldrb	r3, [r5, #0]
     7c2:	cmp	r4, r3
     7c4:	bne.n	790 <usb_serial_flush_input+0x20>
     7c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7ca:	nop
     7cc:	.word	0x2001e5a0
     7d0:	.word	0x2001e5c4
     7d4:	.word	0x2001e47c
     7d8:	.word	0x2001e5a4
     7dc:	.word	0x2001e5c0
     7e0:	.word	0x2001e5b0

000007e4 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     7e4:	push	{lr}
     7e6:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
     7e8:	movs	r1, #1
     7ea:	add.w	r0, sp, #7
     7ee:	bl	634 <usb_serial_read>
     7f2:	cbz	r0, 7fe <usb_serial_getchar+0x1a>
     7f4:	ldrb.w	r0, [sp, #7]
	return -1;
}
     7f8:	add	sp, #12
     7fa:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
     7fe:	mov.w	r0, #4294967295
     802:	b.n	7f8 <usb_serial_getchar+0x14>

00000804 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     804:	ldr	r3, [pc, #36]	; (82c <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     806:	push	{lr}
     808:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     80a:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     80c:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     810:	cbnz	r3, 81c <usb_serial_putchar+0x18>
     812:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     816:	add	sp, #12
     818:	ldr.w	pc, [sp], #4
     81c:	movs	r1, #1
     81e:	add.w	r0, sp, #7
     822:	bl	3ac <usb_serial_write.part.1>
     826:	add	sp, #12
     828:	ldr.w	pc, [sp], #4
     82c:	.word	0x2001e698

00000830 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     830:	ldr	r3, [pc, #16]	; (844 <usb_serial_write+0x14>)
     832:	ldrb	r3, [r3, #0]
     834:	and.w	r2, r3, #255	; 0xff
     838:	cbz	r3, 83e <usb_serial_write+0xe>
     83a:	b.w	3ac <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     83e:	mov	r0, r2
     840:	bx	lr
     842:	nop
     844:	.word	0x2001e698

00000848 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     848:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     84c:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     84e:	ldr.w	r8, [pc, #64]	; 890 <usb_serial_write_buffer_free+0x48>
     852:	movs	r3, #1
     854:	ldr	r5, [pc, #48]	; (888 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     856:	mov	r7, r4
     858:	ldr	r6, [pc, #48]	; (88c <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     85a:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     85e:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     860:	mov	r0, r5
     862:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     864:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     866:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     86a:	beq.n	878 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     86c:	bl	1510 <usb_transfer_status>
     870:	lsls	r3, r0, #24
     872:	it	pl
     874:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     878:	cmp	r4, #4
     87a:	bne.n	85e <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     87c:	movs	r3, #0
	return sum;
}
     87e:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     880:	strb.w	r3, [r8]
	return sum;
}
     884:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     888:	.word	0x2001e5e0
     88c:	.word	0x2001e48f
     890:	.word	0x2001e48e

00000894 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     894:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
     898:	ldr	r3, [pc, #124]	; (918 <usb_serial_flush_output+0x84>)
     89a:	ldrb	r3, [r3, #0]
     89c:	cbz	r3, 8a4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
     89e:	ldr	r5, [pc, #124]	; (91c <usb_serial_flush_output+0x88>)
     8a0:	ldrh	r2, [r5, #0]
     8a2:	cbnz	r2, 8a8 <usb_serial_flush_output+0x14>
     8a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8a8:	ldr.w	r8, [pc, #132]	; 930 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     8ac:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8b0:	ldr	r6, [pc, #108]	; (920 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8b2:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     8b6:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8ba:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     8bc:	ldr	r4, [pc, #100]	; (924 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8be:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8c0:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8c4:	ldr	r7, [pc, #96]	; (928 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     8c6:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8ca:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8cc:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8d0:	mov	r1, r4
     8d2:	bl	1494 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     8d6:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     8da:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     8de:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     8e2:	ldr	r3, [pc, #72]	; (92c <usb_serial_flush_output+0x98>)
     8e4:	str	r1, [r3, #0]
		location += 32;
     8e6:	adds	r1, #32
	} while (location < end_addr);
     8e8:	cmp	r2, r1
     8ea:	bhi.n	8e4 <usb_serial_flush_output+0x50>
	asm("dsb");
     8ec:	dsb	sy
	asm("isb");
     8f0:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     8f4:	movs	r0, #4
     8f6:	mov	r1, r6
     8f8:	bl	14c4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     8fc:	ldrb.w	r3, [r8]
     900:	ldr	r2, [pc, #44]	; (930 <usb_serial_flush_output+0x9c>)
     902:	adds	r3, #1
     904:	uxtb	r3, r3
     906:	cmp	r3, #3
     908:	it	hi
     90a:	movhi	r3, #0
     90c:	strb	r3, [r2, #0]
	tx_available = 0;
     90e:	movs	r3, #0
     910:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
     912:	strb	r3, [r7, #0]
     914:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     918:	.word	0x2001e698
     91c:	.word	0x2001e5c6
     920:	.word	0x2001e5e0
     924:	.word	0x20201000
     928:	.word	0x2001e48e
     92c:	.word	0xe000ef70
     930:	.word	0x2001e48f

00000934 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     934:	ldr	r2, [pc, #600]	; (b90 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     936:	ldr	r3, [pc, #604]	; (b94 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     938:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     93a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     93e:	ldr	r4, [pc, #600]	; (b98 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     940:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     944:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     946:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     948:	bls.n	984 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     94a:	ldr	r3, [pc, #592]	; (b9c <set_arm_clock+0x268>)
     94c:	cmp	r0, r3
     94e:	bls.w	b7c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     952:	ldr	r3, [pc, #588]	; (ba0 <set_arm_clock+0x26c>)
     954:	movw	r5, #1575	; 0x627
     958:	ldr	r7, [pc, #584]	; (ba4 <set_arm_clock+0x270>)
     95a:	add	r3, r0
     95c:	ldr	r4, [pc, #584]	; (ba8 <set_arm_clock+0x274>)
     95e:	lsrs	r2, r3, #8
     960:	umull	r3, r2, r7, r2
     964:	lsrs	r3, r2, #7
     966:	add.w	r3, r3, r3, lsl #2
     96a:	add.w	r2, r3, r3, lsl #2
     96e:	addw	r3, r2, #1250	; 0x4e2
     972:	cmp	r3, r5
     974:	it	cs
     976:	movcs	r3, r5
     978:	sub.w	r3, r3, #800	; 0x320
     97c:	umull	r3, r5, r4, r3
     980:	lsrs	r5, r5, #3
     982:	b.n	98e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     984:	ldr	r5, [pc, #548]	; (bac <set_arm_clock+0x278>)
     986:	cmp	r0, r5
     988:	ite	ls
     98a:	movls	r5, #6
     98c:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     98e:	ldr	r2, [pc, #516]	; (b94 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     990:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     994:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     998:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     99a:	orr.w	r3, r3, #192	; 0xc0
     99e:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     9a2:	bcs.n	9ba <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     9a4:	ldr	r3, [pc, #496]	; (b98 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     9a6:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     9aa:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     9ac:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     9ae:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     9b0:	ldr	r3, [r2, #0]
     9b2:	cmp	r3, #0
     9b4:	bge.n	9b0 <set_arm_clock+0x7c>
     9b6:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     9ba:	ands.w	r3, lr, #33554432	; 0x2000000
     9be:	bne.n	a24 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     9c0:	ldr	r4, [pc, #492]	; (bb0 <set_arm_clock+0x27c>)
     9c2:	ldr	r2, [pc, #496]	; (bb4 <set_arm_clock+0x280>)
     9c4:	ldr.w	ip, [r4, #16]
     9c8:	mov	r4, r2
     9ca:	and.w	r2, ip, r2
     9ce:	cmp	r2, r4
     9d0:	itet	eq
     9d2:	moveq.w	r3, #402653184	; 0x18000000
     9d6:	movne.w	r2, #4096	; 0x1000
     9da:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     9dc:	eor.w	r4, lr, r3
     9e0:	tst.w	r4, #939524096	; 0x38000000
     9e4:	beq.n	9f8 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     9e6:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     9ea:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     9ee:	ldr	r4, [pc, #420]	; (b94 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     9f0:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     9f4:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     9f8:	eor.w	r3, r1, r2
     9fc:	tst.w	r3, #12288	; 0x3000
     a00:	beq.n	a14 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     a02:	ldr	r3, [pc, #400]	; (b94 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     a04:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     a08:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     a0a:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     a0c:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     a0e:	ldr	r3, [r2, #72]	; 0x48
     a10:	lsls	r4, r3, #28
     a12:	bmi.n	a0e <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     a14:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     a18:	ldr	r2, [pc, #376]	; (b94 <set_arm_clock+0x260>)
     a1a:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     a1e:	ldr	r3, [r2, #72]	; 0x48
     a20:	lsls	r1, r3, #26
     a22:	bmi.n	a1e <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     a24:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     a26:	ldr	r4, [pc, #400]	; (bb8 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     a28:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     a2a:	mul.w	r3, r1, r2
     a2e:	mul.w	r3, r0, r3
     a32:	cmp	r3, r4
     a34:	bhi.n	a4a <set_arm_clock+0x116>
		if (div_arm < 8) {
     a36:	cmp	r2, #7
     a38:	bhi.w	b66 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     a3c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     a3e:	mul.w	r3, r1, r2
     a42:	mul.w	r3, r0, r3
     a46:	cmp	r3, r4
     a48:	bls.n	a36 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     a4a:	ldr	r0, [pc, #368]	; (bbc <set_arm_clock+0x288>)
     a4c:	ldr	r4, [pc, #368]	; (bc0 <set_arm_clock+0x28c>)
     a4e:	add	r0, r3
     a50:	umull	r0, r3, r4, r0
     a54:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     a56:	cmp	r3, #108	; 0x6c
     a58:	bhi.w	b72 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     a5c:	cmp	r3, #53	; 0x35
     a5e:	bhi.w	b80 <set_arm_clock+0x24c>
     a62:	ldr.w	r8, [pc, #392]	; bec <set_arm_clock+0x2b8>
     a66:	movs	r3, #54	; 0x36
     a68:	ldr	r0, [pc, #344]	; (bc4 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     a6a:	ldr.w	ip, [pc, #324]	; bb0 <set_arm_clock+0x27c>
     a6e:	ldr	r4, [pc, #344]	; (bc8 <set_arm_clock+0x294>)
     a70:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     a74:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     a78:	and.w	r4, r9, r4
     a7c:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     a7e:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     a82:	beq.n	a9c <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     a84:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     a88:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     a8c:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     a8e:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     a92:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     a96:	ldr	r3, [r4, #0]
     a98:	cmp	r3, #0
     a9a:	bge.n	a96 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     a9c:	ldr.w	ip, [pc, #244]	; b94 <set_arm_clock+0x260>
     aa0:	subs	r2, #1
     aa2:	ldr.w	r3, [ip, #16]
     aa6:	and.w	r3, r3, #7
     aaa:	cmp	r3, r2
     aac:	beq.n	abe <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     aae:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     ab2:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     ab4:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     ab8:	ldr	r3, [r4, #72]	; 0x48
     aba:	lsls	r3, r3, #15
     abc:	bmi.n	ab8 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     abe:	subs	r1, #1
     ac0:	lsls	r1, r1, #10
     ac2:	eor.w	r3, lr, r1
     ac6:	tst.w	r3, #7168	; 0x1c00
     aca:	beq.n	ae6 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     acc:	ldr	r3, [pc, #196]	; (b94 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     ace:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     ad2:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     ad6:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     ad8:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     adc:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     ae0:	ldr	r3, [r2, #72]	; 0x48
     ae2:	lsls	r1, r3, #30
     ae4:	bmi.n	ae0 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     ae6:	ldr	r3, [pc, #228]	; (bcc <set_arm_clock+0x298>)
     ae8:	ldr	r1, [pc, #228]	; (bd0 <set_arm_clock+0x29c>)
     aea:	add	r3, r0
     aec:	lsrs	r3, r3, #7
     aee:	umull	r3, r1, r1, r3
     af2:	lsrs	r1, r1, #12
     af4:	cmp	r1, #4
     af6:	it	cs
     af8:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     afa:	subs	r3, r1, #1
     afc:	lsls	r3, r3, #8
     afe:	eor.w	r2, lr, r3
     b02:	tst.w	r2, #768	; 0x300
     b06:	beq.n	b18 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     b08:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     b0c:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     b10:	ldr	r2, [pc, #128]	; (b94 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     b12:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     b16:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     b18:	ldr	r3, [pc, #120]	; (b94 <set_arm_clock+0x260>)
     b1a:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     b1c:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     b1e:	bic.w	r4, r4, #33554432	; 0x2000000
     b22:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     b24:	ldr	r3, [r2, #72]	; 0x48
     b26:	lsls	r3, r3, #26
     b28:	bmi.n	b24 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b2a:	ldr	r3, [pc, #168]	; (bd4 <set_arm_clock+0x2a0>)
     b2c:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     b30:	ldr	r4, [pc, #164]	; (bd8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     b32:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b34:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     b38:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b3a:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b3e:	ldr	r4, [pc, #156]	; (bdc <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b40:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b44:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b48:	ldr	r2, [pc, #148]	; (be0 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b4a:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b4c:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     b4e:	bcs.n	b62 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     b50:	ldr	r3, [pc, #68]	; (b98 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     b52:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     b56:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     b58:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     b5a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     b5c:	ldr	r3, [r2, #0]
     b5e:	cmp	r3, #0
     b60:	bge.n	b5c <set_arm_clock+0x228>
	}

	return frequency;
}
     b62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     b66:	cmp	r1, #4
     b68:	bhi.w	a4a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     b6c:	adds	r1, #1
				div_arm = 1;
     b6e:	movs	r2, #1
     b70:	b.n	a2a <set_arm_clock+0xf6>
     b72:	ldr.w	r8, [pc, #124]	; bf0 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     b76:	movs	r3, #108	; 0x6c
     b78:	ldr	r0, [pc, #104]	; (be4 <set_arm_clock+0x2b0>)
     b7a:	b.n	a6a <set_arm_clock+0x136>
     b7c:	movs	r5, #18
     b7e:	b.n	98e <set_arm_clock+0x5a>
     b80:	ldr	r0, [pc, #100]	; (be8 <set_arm_clock+0x2b4>)
     b82:	ldr.w	r8, [pc, #112]	; bf4 <set_arm_clock+0x2c0>
     b86:	mul.w	r0, r0, r3
     b8a:	orr.w	r8, r3, r8
     b8e:	b.n	a6a <set_arm_clock+0x136>
     b90:	.word	0x1f78a400
     b94:	.word	0x400fc000
     b98:	.word	0x40080000
     b9c:	.word	0x23c34600
     ba0:	.word	0xdc3cba00
     ba4:	.word	0x004cb223
     ba8:	.word	0x51eb851f
     bac:	.word	0x016e3600
     bb0:	.word	0x400d8000
     bb4:	.word	0x80003040
     bb8:	.word	0x269fb1ff
     bbc:	.word	0x005b8d80
     bc0:	.word	0x165e9f81
     bc4:	.word	0x269fb200
     bc8:	.word	0x8001307f
     bcc:	.word	0x08f0d17f
     bd0:	.word	0x00e5109f
     bd4:	.word	0x431bde83
     bd8:	.word	0x200005ac
     bdc:	.word	0x200005a8
     be0:	.word	0x2001e6a0
     be4:	.word	0x4d3f6400
     be8:	.word	0x00b71b00
     bec:	.word	0x80002036
     bf0:	.word	0x8000206c
     bf4:	.word	0x80002000

00000bf8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     bf8:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     bfa:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     bfc:	cbz	r3, c06 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     bfe:	ldr	r3, [r2, #4]
     c00:	orr.w	r3, r3, #32768	; 0x8000
     c04:	str	r3, [r2, #4]
	}
	__disable_irq();
     c06:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     c08:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     c0a:	cbz	r4, c34 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     c0c:	ldr	r3, [pc, #64]	; (c50 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     c0e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     c10:	ldr.w	r4, [r3, #432]	; 0x1b0
     c14:	tst	r4, r1
     c16:	bne.n	c48 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     c18:	ldr.w	r4, [r3, #320]	; 0x140
     c1c:	orr.w	r4, r4, #16384	; 0x4000
     c20:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     c24:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
     c28:	ldr.w	r4, [r3, #320]	; 0x140
     c2c:	lsls	r4, r4, #17
     c2e:	bpl.n	c18 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     c30:	tst	r1, r5
     c32:	bne.n	c48 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     c34:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     c36:	ldr	r4, [pc, #24]	; (c50 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     c38:	str	r2, [r0, #8]
	endpoint->status = 0;
     c3a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     c3c:	ldr.w	r3, [r4, #432]	; 0x1b0
     c40:	orrs	r1, r3
     c42:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     c46:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     c48:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     c4a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     c4c:	pop	{r4, r5}
     c4e:	bx	lr
     c50:	.word	0x402e0000

00000c54 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     c54:	push	{r4, r5, r6, lr}
     c56:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     c58:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
     c5a:	cbz	r0, c82 <run_callbacks+0x2e>
     c5c:	mov	r2, r0
     c5e:	movs	r4, #0
     c60:	b.n	c6a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     c62:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     c64:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     c66:	cmp	r2, #1
     c68:	beq.n	c84 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     c6a:	ldr	r3, [r2, #4]
     c6c:	ands.w	r3, r3, #128	; 0x80
     c70:	beq.n	c62 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     c72:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     c74:	cbz	r4, c82 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     c76:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     c78:	ldr	r5, [r0, #0]
		ep->callback_function(first);
     c7a:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     c7c:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     c7e:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     c80:	bne.n	c76 <run_callbacks+0x22>
     c82:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
     c84:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
     c86:	str	r3, [r6, #52]	; 0x34
			break;
     c88:	b.n	c74 <run_callbacks+0x20>
     c8a:	nop

00000c8c <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     c8c:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     c8e:	cbnz	r1, cce <endpoint0_transmit.constprop.1+0x42>
     c90:	ldr	r4, [pc, #136]	; (d1c <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c92:	ldr	r1, [pc, #140]	; (d20 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     c94:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     c96:	ldr	r3, [pc, #140]	; (d24 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c98:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     c9a:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     c9c:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c9e:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     ca0:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ca2:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     ca4:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ca6:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     caa:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     cac:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     cb0:	ldr	r5, [pc, #116]	; (d28 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     cb2:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     cb6:	ldr.w	r1, [r3, #432]	; 0x1b0
     cba:	orr.w	r1, r1, #1
     cbe:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     cc2:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
     cc4:	ldr.w	r3, [r2, #432]	; 0x1b0
     cc8:	cmp	r3, #0
     cca:	bne.n	cc4 <endpoint0_transmit.constprop.1+0x38>
}
     ccc:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     cce:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     cd0:	ldr	r3, [pc, #88]	; (d2c <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     cd2:	ldr	r5, [pc, #80]	; (d24 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     cd4:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     cd6:	ldr	r4, [pc, #68]	; (d1c <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     cd8:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     cdc:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     cde:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     ce0:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     ce2:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     ce6:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     ce8:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     cec:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     cee:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     cf2:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     cf6:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     cfa:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     cfc:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     cfe:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     d02:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     d06:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     d0a:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     d0c:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     d0e:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     d12:	ldr.w	r3, [r2, #432]	; 0x1b0
     d16:	cmp	r3, #0
     d18:	bne.n	d12 <endpoint0_transmit.constprop.1+0x86>
     d1a:	b.n	c92 <endpoint0_transmit.constprop.1+0x6>
     d1c:	.word	0x20020000
     d20:	.word	0x2001f020
     d24:	.word	0x402e0000
     d28:	.word	0x2001e674
     d2c:	.word	0x2001f000

00000d30 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
     d30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     d34:	ldr	r4, [pc, #752]	; (1028 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
     d36:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     d38:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     d3c:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
     d40:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     d44:	beq.n	e04 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     d46:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     d4a:	cmp	r3, #0
     d4c:	beq.n	dfa <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     d4e:	mov.w	fp, #65537	; 0x10001
     d52:	ldr.w	r9, [pc, #764]	; 1050 <isr+0x320>
     d56:	ldr	r6, [pc, #724]	; (102c <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     d58:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     d5a:	mov	sl, fp
     d5c:	ldr	r0, [r6, #40]	; 0x28
     d5e:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     d60:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     d64:	ldr.w	r3, [r4, #320]	; 0x140
     d68:	orr.w	r3, r3, #8192	; 0x2000
     d6c:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     d70:	ldr.w	r3, [r4, #320]	; 0x140
     d74:	lsls	r7, r3, #18
     d76:	bpl.n	d64 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     d78:	ldr.w	r3, [r5, #320]	; 0x140
     d7c:	bic.w	r3, r3, #8192	; 0x2000
     d80:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     d84:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     d88:	ldr.w	r3, [r4, #436]	; 0x1b4
     d8c:	ands.w	r3, r3, #65537	; 0x10001
     d90:	bne.n	d88 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     d92:	uxth	r1, r0
     d94:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
     d98:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     d9c:	cmp	r1, r7
     d9e:	bhi.w	eec <isr+0x1bc>
     da2:	cmp.w	r1, #1664	; 0x680
     da6:	bcs.w	1180 <isr+0x450>
     daa:	cmp.w	r1, #258	; 0x102
     dae:	beq.w	1086 <isr+0x356>
     db2:	bhi.w	f7e <isr+0x24e>
     db6:	cmp	r1, #128	; 0x80
     db8:	beq.w	106c <isr+0x33c>
     dbc:	cmp	r1, #130	; 0x82
     dbe:	bne.w	f6e <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
     dc2:	uxth	r2, r2
     dc4:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
     dc8:	cmp	r1, #7
     dca:	bhi.w	f6e <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     dce:	lsls	r1, r1, #2
     dd0:	ldr	r0, [pc, #604]	; (1030 <isr+0x300>)
		reply_buffer[0] = 0;
     dd2:	ldr	r7, [pc, #608]	; (1034 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     dd4:	add	r0, r1
     dd6:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     dd8:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
     dda:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
     ddc:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     dde:	bpl.w	11fe <isr+0x4ce>
     de2:	lsls	r2, r1, #15
     de4:	bpl.n	dea <isr+0xba>
			reply_buffer[0] = 1;
     de6:	movs	r3, #1
     de8:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
     dea:	movs	r1, #2
     dec:	ldr	r0, [pc, #580]	; (1034 <isr+0x304>)
     dee:	bl	c8c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     df2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     df6:	cmp	r3, #0
     df8:	bne.n	d5c <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     dfa:	ldr	r2, [pc, #556]	; (1028 <isr+0x2f8>)
     dfc:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     e00:	cmp	r3, #0
     e02:	bne.n	ea6 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
     e04:	tst.w	r8, #64	; 0x40
     e08:	beq.n	e3c <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     e0a:	ldr	r3, [pc, #540]	; (1028 <isr+0x2f8>)
     e0c:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     e10:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     e12:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     e16:	ldr.w	r1, [r3, #444]	; 0x1bc
     e1a:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     e1e:	ldr.w	r4, [r2, #432]	; 0x1b0
     e22:	ldr	r3, [pc, #516]	; (1028 <isr+0x2f8>)
     e24:	cmp	r4, #0
     e26:	bne.n	e1e <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     e28:	mov.w	r2, #4294967295
     e2c:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     e30:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
     e34:	bl	528 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
     e38:	ldr	r3, [pc, #508]	; (1038 <isr+0x308>)
     e3a:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
     e3c:	tst.w	r8, #16777216	; 0x1000000
     e40:	beq.n	e4a <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     e42:	ldr	r3, [pc, #504]	; (103c <isr+0x30c>)
     e44:	ldr	r3, [r3, #0]
     e46:	cbz	r3, e4a <isr+0x11a>
     e48:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
     e4a:	tst.w	r8, #33554432	; 0x2000000
     e4e:	beq.n	e58 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     e50:	ldr	r3, [pc, #492]	; (1040 <isr+0x310>)
     e52:	ldr	r3, [r3, #0]
     e54:	cbz	r3, e58 <isr+0x128>
     e56:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
     e58:	tst.w	r8, #4
     e5c:	beq.n	e70 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     e5e:	ldr	r3, [pc, #456]	; (1028 <isr+0x2f8>)
     e60:	ldr.w	r3, [r3, #388]	; 0x184
     e64:	ands.w	r3, r3, #512	; 0x200
     e68:	beq.n	ee6 <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
     e6a:	ldr	r3, [pc, #472]	; (1044 <isr+0x314>)
     e6c:	movs	r2, #1
     e6e:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     e70:	ldr	r3, [pc, #436]	; (1028 <isr+0x2f8>)
     e72:	ldr.w	r2, [r3, #328]	; 0x148
     e76:	lsls	r2, r2, #24
     e78:	bpl.n	ea0 <isr+0x170>
     e7a:	tst.w	r8, #128	; 0x80
     e7e:	beq.n	ea0 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
     e80:	ldr	r1, [pc, #452]	; (1048 <isr+0x318>)
     e82:	ldrb	r2, [r1, #0]
     e84:	cbz	r2, ea0 <isr+0x170>
			if (--usb_reboot_timer == 0) {
     e86:	subs	r2, #1
     e88:	uxtb	r2, r2
     e8a:	strb	r2, [r1, #0]
     e8c:	cbnz	r2, ea0 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
     e8e:	ldr	r1, [pc, #444]	; (104c <isr+0x31c>)
     e90:	ldrb	r2, [r1, #0]
     e92:	and.w	r2, r2, #251	; 0xfb
     e96:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
     e98:	cmp	r2, #0
     e9a:	beq.w	1302 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
     e9e:	bkpt	0x00fb
		#endif
		#ifdef MULTITOUCH_INTERFACE
		usb_touchscreen_update_callback();
		#endif
	}
}
     ea0:	add	sp, #12
     ea2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     ea6:	ldr	r1, [pc, #424]	; (1050 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     ea8:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     eac:	ldr	r0, [r1, #0]
     eae:	tst	r3, r0
     eb0:	bne.w	128a <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
     eb4:	ldr	r2, [pc, #384]	; (1038 <isr+0x308>)
     eb6:	ldr	r4, [r2, #0]
			if (completestatus) {
     eb8:	ands	r4, r3
     eba:	beq.n	e04 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     ebc:	lsls	r3, r4, #29
     ebe:	bmi.w	1320 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     ec2:	lsls	r7, r4, #13
     ec4:	bmi.w	1318 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     ec8:	lsls	r6, r4, #28
     eca:	bmi.w	1330 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     ece:	lsls	r5, r4, #12
     ed0:	bmi.w	1328 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     ed4:	lsls	r0, r4, #27
     ed6:	bmi.w	1310 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     eda:	lsls	r1, r4, #11
     edc:	bpl.n	e04 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
     ede:	ldr	r0, [pc, #372]	; (1054 <isr+0x324>)
     ee0:	bl	c54 <run_callbacks>
     ee4:	b.n	e04 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
     ee6:	ldr	r2, [pc, #348]	; (1044 <isr+0x314>)
     ee8:	strb	r3, [r2, #0]
     eea:	b.n	e70 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     eec:	movw	r7, #8225	; 0x2021
     ef0:	cmp	r1, r7
     ef2:	beq.n	f66 <isr+0x236>
     ef4:	bhi.n	fd6 <isr+0x2a6>
     ef6:	cmp.w	r1, #2176	; 0x880
     efa:	beq.w	1164 <isr+0x434>
     efe:	cmp.w	r1, #2304	; 0x900
     f02:	bne.n	f6e <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     f04:	ubfx	r0, r0, #16, #8
     f08:	ldr	r2, [pc, #332]	; (1058 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     f0a:	ldr	r1, [pc, #336]	; (105c <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     f0c:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     f0e:	ldr	r7, [pc, #336]	; (1060 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     f10:	ldr	r2, [pc, #336]	; (1064 <isr+0x334>)
     f12:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     f14:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     f18:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     f1c:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
     f20:	bl	52c <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f24:	ldr	r2, [pc, #320]	; (1068 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     f26:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f28:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f2a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     f2c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f2e:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f30:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f32:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     f36:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f38:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     f3c:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f3e:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     f42:	ldr.w	r2, [r5, #432]	; 0x1b0
     f46:	orr.w	r2, r2, #65536	; 0x10000
     f4a:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     f4e:	ldr	r2, [pc, #256]	; (1050 <isr+0x320>)
     f50:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
     f52:	ldr.w	r3, [r4, #432]	; 0x1b0
     f56:	cmp	r3, #0
     f58:	bne.n	f52 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     f5a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     f5e:	cmp	r3, #0
     f60:	bne.w	d5c <isr+0x2c>
     f64:	b.n	dfa <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
     f66:	lsrs	r1, r2, #16
     f68:	cmp	r1, #7
     f6a:	beq.w	1206 <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     f6e:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     f72:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     f76:	cmp	r3, #0
     f78:	bne.w	d5c <isr+0x2c>
     f7c:	b.n	dfa <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     f7e:	movw	r7, #770	; 0x302
     f82:	cmp	r1, r7
     f84:	beq.w	10fe <isr+0x3ce>
     f88:	cmp.w	r1, #1280	; 0x500
     f8c:	bne.n	f6e <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f8e:	ldr	r2, [pc, #216]	; (1068 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f90:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f92:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     f94:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f96:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f98:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f9a:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     f9e:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fa0:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     fa4:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fa6:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     faa:	ldr.w	r3, [r5, #432]	; 0x1b0
     fae:	orr.w	r3, r3, #65536	; 0x10000
     fb2:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     fb6:	ldr.w	r3, [r4, #432]	; 0x1b0
     fba:	cmp	r3, #0
     fbc:	bne.n	fb6 <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     fbe:	lsrs	r3, r0, #16
     fc0:	lsls	r3, r3, #25
     fc2:	orr.w	r3, r3, #16777216	; 0x1000000
     fc6:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     fca:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     fce:	cmp	r3, #0
     fd0:	bne.w	d5c <isr+0x2c>
     fd4:	b.n	dfa <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     fd6:	movw	r3, #8737	; 0x2221
     fda:	cmp	r1, r3
     fdc:	beq.w	10ec <isr+0x3bc>
     fe0:	movw	r3, #8993	; 0x2321
     fe4:	cmp	r1, r3
     fe6:	bne.n	f6e <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fe8:	ldr	r3, [pc, #124]	; (1068 <isr+0x338>)
     fea:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     fec:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fee:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     ff0:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ff2:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ff4:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     ff8:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ffa:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     ffe:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1000:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1002:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1006:	ldr.w	r3, [r4, #432]	; 0x1b0
    100a:	orr.w	r3, r3, #65536	; 0x10000
    100e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1012:	ldr.w	r3, [r4, #432]	; 0x1b0
    1016:	cmp	r3, #0
    1018:	bne.n	1012 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    101a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    101e:	cmp	r3, #0
    1020:	bne.w	d5c <isr+0x2c>
    1024:	b.n	dfa <isr+0xca>
    1026:	nop
    1028:	.word	0x402e0000
    102c:	.word	0x20020000
    1030:	.word	0x402e01c0
    1034:	.word	0x2001e688
    1038:	.word	0x2001e664
    103c:	.word	0x2001e660
    1040:	.word	0x2001e66c
    1044:	.word	0x2001e670
    1048:	.word	0x2001e678
    104c:	.word	0x2001e668
    1050:	.word	0x2001e674
    1054:	.word	0x20020240
    1058:	.word	0x2001e698
    105c:	.word	0x000200c8
    1060:	.word	0x00cc0002
    1064:	.word	0x00c80002
    1068:	.word	0x2001f020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    106c:	ldr	r2, [pc, #744]	; (1358 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    106e:	movs	r1, #2
    1070:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1072:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1074:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1076:	bl	c8c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    107a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    107e:	cmp	r3, #0
    1080:	bne.w	d5c <isr+0x2c>
    1084:	b.n	dfa <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1086:	uxth	r2, r2
    1088:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    108c:	cmp	r3, #7
    108e:	bhi.w	f6e <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1092:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1096:	mov.w	r3, r3, lsl #2
    109a:	ldr	r2, [pc, #704]	; (135c <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    109c:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    10a0:	add	r2, r3
    10a2:	ldr	r3, [r2, #0]
    10a4:	ite	ne
    10a6:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    10aa:	biceq.w	r3, r3, #1
    10ae:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    10b0:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    10b2:	ldr	r3, [pc, #684]	; (1360 <isr+0x630>)
    10b4:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    10b6:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    10b8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    10ba:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    10be:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    10c0:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    10c4:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    10c6:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    10c8:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    10cc:	ldr.w	r3, [r4, #432]	; 0x1b0
    10d0:	orr.w	r3, r3, #65536	; 0x10000
    10d4:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    10d8:	ldr.w	r3, [r4, #432]	; 0x1b0
    10dc:	cmp	r3, #0
    10de:	bne.n	10d8 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    10e0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    10e4:	cmp	r3, #0
    10e6:	bne.w	d5c <isr+0x2c>
    10ea:	b.n	dfa <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    10ec:	ldr	r3, [pc, #628]	; (1364 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    10ee:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    10f2:	ldr	r2, [pc, #628]	; (1368 <isr+0x638>)
    10f4:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    10f6:	ldr	r3, [pc, #628]	; (136c <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    10f8:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    10fa:	strb	r0, [r3, #0]
    10fc:	b.n	fe8 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    10fe:	uxth	r2, r2
    1100:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1104:	cmp	r3, #7
    1106:	bhi.w	f6e <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    110a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    110e:	mov.w	r3, r3, lsl #2
    1112:	ldr	r2, [pc, #584]	; (135c <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1114:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1118:	add	r2, r3
    111a:	ldr	r3, [r2, #0]
    111c:	ite	ne
    111e:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1122:	orreq.w	r3, r3, #1
    1126:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1128:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    112a:	ldr	r3, [pc, #564]	; (1360 <isr+0x630>)
    112c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    112e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1130:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1132:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1136:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1138:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    113c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    113e:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1140:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1144:	ldr.w	r3, [r4, #432]	; 0x1b0
    1148:	orr.w	r3, r3, #65536	; 0x10000
    114c:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1150:	ldr.w	r3, [r4, #432]	; 0x1b0
    1154:	cmp	r3, #0
    1156:	bne.n	1150 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1158:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    115c:	cmp	r3, #0
    115e:	bne.w	d5c <isr+0x2c>
    1162:	b.n	dfa <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1164:	ldr	r2, [pc, #520]	; (1370 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1166:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1168:	ldr	r3, [pc, #492]	; (1358 <isr+0x628>)
    116a:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    116c:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    116e:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1170:	bl	c8c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1174:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1178:	cmp	r3, #0
    117a:	bne.w	d5c <isr+0x2c>
    117e:	b.n	dfa <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1180:	ldr	r3, [pc, #496]	; (1374 <isr+0x644>)
    1182:	ldr	r1, [r3, #4]
    1184:	cmp	r1, #0
    1186:	beq.w	f6e <isr+0x23e>
    118a:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    118c:	uxth.w	lr, r2
    1190:	b.n	119c <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1192:	adds	r3, #12
    1194:	ldr	r1, [r3, #4]
    1196:	cmp	r1, #0
    1198:	beq.w	f6e <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    119c:	ldrh	r7, [r3, #0]
    119e:	cmp	r7, r0
    11a0:	bne.n	1192 <isr+0x462>
    11a2:	ldrh	r7, [r3, #2]
    11a4:	cmp	r7, lr
    11a6:	bne.n	1192 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    11a8:	lsrs	r7, r0, #8
    11aa:	cmp	r7, #3
    11ac:	beq.w	13bc <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    11b0:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    11b2:	lsrs	r2, r2, #16
    11b4:	cmp	r3, r2
    11b6:	it	cs
    11b8:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    11ba:	cmp.w	r0, #512	; 0x200
    11be:	beq.w	1338 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    11c2:	cmp.w	r0, #1792	; 0x700
    11c6:	beq.w	12dc <isr+0x5ac>
    11ca:	ldr	r7, [pc, #428]	; (1378 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    11cc:	mov	r2, r3
    11ce:	str	r3, [sp, #4]
    11d0:	mov	r0, r7
    11d2:	bl	19d0 <memcpy>
    11d6:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    11d8:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    11dc:	add	r7, r3
	asm("dsb");
    11de:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    11e2:	ldr	r1, [pc, #408]	; (137c <isr+0x64c>)
    11e4:	str	r2, [r1, #0]
		location += 32;
    11e6:	adds	r2, #32
	} while (location < end_addr);
    11e8:	cmp	r7, r2
    11ea:	bhi.n	11e2 <isr+0x4b2>
	asm("dsb");
    11ec:	dsb	sy
	asm("isb");
    11f0:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    11f4:	ldr	r0, [pc, #384]	; (1378 <isr+0x648>)
    11f6:	mov	r1, r3
    11f8:	bl	c8c <endpoint0_transmit.constprop.1>
    11fc:	b.n	df2 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    11fe:	lsls	r3, r1, #31
    1200:	bpl.w	dea <isr+0xba>
    1204:	b.n	de6 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1206:	ldr	r7, [pc, #376]	; (1380 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1208:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    120c:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    120e:	ldr	r1, [pc, #372]	; (1384 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1210:	ldr	r3, [pc, #372]	; (1388 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1212:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1214:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1218:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    121a:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    121e:	ldr	r1, [pc, #364]	; (138c <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1220:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1222:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1226:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    122a:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    122e:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1230:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1234:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1238:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    123c:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    123e:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1240:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1244:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1246:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1248:	ldr.w	r3, [r4, #432]	; 0x1b0
    124c:	cmp	r3, #0
    124e:	bne.n	1248 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    1250:	ldr	r2, [pc, #268]	; (1360 <isr+0x630>)
    1252:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1254:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1258:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    125a:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    125c:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1260:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1262:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1266:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1268:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    126c:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    126e:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1272:	ldr.w	r3, [r5, #432]	; 0x1b0
    1276:	orrs	r3, r0
    1278:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    127c:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1280:	ldr.w	r3, [r4, #432]	; 0x1b0
    1284:	cmp	r3, #0
    1286:	bne.n	1280 <isr+0x550>
    1288:	b.n	df2 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    128a:	ldr	r4, [pc, #244]	; (1380 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    128c:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1290:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1292:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1294:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1296:	cmp	r4, r0
    1298:	bne.w	eb4 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    129c:	ldr	r1, [pc, #236]	; (138c <isr+0x65c>)
    129e:	ldr	r4, [pc, #240]	; (1390 <isr+0x660>)
    12a0:	ldmia	r1, {r0, r1}
    12a2:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    12a4:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    12a6:	str	r0, [r4, #0]
    12a8:	strh	r1, [r4, #4]
    12aa:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    12ac:	bne.w	eb4 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    12b0:	cpsid	i
	sof_usage |= (1 << interface);
    12b2:	ldr	r0, [pc, #224]	; (1394 <isr+0x664>)
    12b4:	ldrb	r1, [r0, #0]
    12b6:	orr.w	r1, r1, #4
    12ba:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    12bc:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    12c0:	lsls	r0, r1, #24
    12c2:	bmi.n	12d2 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    12c4:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    12c8:	movs	r0, #128	; 0x80
    12ca:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    12ce:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    12d2:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    12d4:	ldr	r2, [pc, #192]	; (1398 <isr+0x668>)
    12d6:	movs	r1, #80	; 0x50
    12d8:	strb	r1, [r2, #0]
    12da:	b.n	eb4 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    12dc:	ldr	r0, [pc, #188]	; (139c <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    12de:	mov	r2, r3
    12e0:	ldr	r7, [pc, #148]	; (1378 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    12e2:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    12e6:	ldr	r1, [pc, #184]	; (13a0 <isr+0x670>)
    12e8:	ldr	r0, [pc, #184]	; (13a4 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    12ea:	str	r3, [sp, #4]
    12ec:	cmp.w	lr, #0
    12f0:	it	eq
    12f2:	moveq	r1, r0
    12f4:	mov	r0, r7
    12f6:	bl	19d0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    12fa:	movs	r2, #7
    12fc:	ldr	r3, [sp, #4]
    12fe:	strb	r2, [r7, #1]
    1300:	b.n	11d8 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1302:	ldr.w	r2, [r3, #328]	; 0x148
    1306:	bic.w	r2, r2, #128	; 0x80
    130a:	str.w	r2, [r3, #328]	; 0x148
    130e:	b.n	e9e <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1310:	ldr	r0, [pc, #148]	; (13a8 <isr+0x678>)
    1312:	bl	c54 <run_callbacks>
    1316:	b.n	eda <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1318:	ldr	r0, [pc, #144]	; (13ac <isr+0x67c>)
    131a:	bl	c54 <run_callbacks>
    131e:	b.n	ec8 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1320:	ldr	r0, [pc, #140]	; (13b0 <isr+0x680>)
    1322:	bl	c54 <run_callbacks>
    1326:	b.n	ec2 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1328:	ldr	r0, [pc, #136]	; (13b4 <isr+0x684>)
    132a:	bl	c54 <run_callbacks>
    132e:	b.n	ed4 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1330:	ldr	r0, [pc, #132]	; (13b8 <isr+0x688>)
    1332:	bl	c54 <run_callbacks>
    1336:	b.n	ece <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1338:	ldr	r0, [pc, #96]	; (139c <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    133a:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    133c:	ldr	r1, [pc, #100]	; (13a4 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    133e:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1340:	ldr	r0, [pc, #92]	; (13a0 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1342:	str	r3, [sp, #4]
    1344:	cmp	r7, #0
    1346:	it	eq
    1348:	moveq	r1, r0
    134a:	ldr	r0, [pc, #44]	; (1378 <isr+0x648>)
    134c:	bl	19d0 <memcpy>
    1350:	ldr	r7, [pc, #36]	; (1378 <isr+0x648>)
    1352:	ldr	r3, [sp, #4]
    1354:	b.n	11d8 <isr+0x4a8>
    1356:	nop
    1358:	.word	0x2001e688
    135c:	.word	0x402e01c0
    1360:	.word	0x2001f020
    1364:	.word	0x2001e6a4
    1368:	.word	0x2001e738
    136c:	.word	0x2001e5c8
    1370:	.word	0x2001e698
    1374:	.word	0x2000028c
    1378:	.word	0x20203000
    137c:	.word	0xe000ef70
    1380:	.word	0x2001e680
    1384:	.word	0x00070080
    1388:	.word	0x2001f000
    138c:	.word	0x2001e690
    1390:	.word	0x2001e730
    1394:	.word	0x2001e668
    1398:	.word	0x2001e678
    139c:	.word	0x2001e670
    13a0:	.word	0x60001610
    13a4:	.word	0x60001654
    13a8:	.word	0x20020200
    13ac:	.word	0x20020140
    13b0:	.word	0x20020100
    13b4:	.word	0x200201c0
    13b8:	.word	0x20020180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    13bc:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    13be:	ldrb	r3, [r1, #0]
    13c0:	cmp	r3, r2
    13c2:	it	cs
    13c4:	movcs	r3, r2
    13c6:	b.n	11c2 <isr+0x492>

000013c8 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    13c8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    13ca:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    13ce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    13d2:	ite	ne
    13d4:	movne	r7, #0
    13d6:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    13da:	cmp	r2, #2
    13dc:	bls.n	13e2 <usb_config_rx+0x1a>
    13de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    13e2:	mov.w	sl, r0, lsl #7
    13e6:	ldr.w	r9, [pc, #64]	; 1428 <usb_config_rx+0x60>
    13ea:	mov	r5, r1
    13ec:	mov	r4, r0
    13ee:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    13f2:	movs	r1, #0
    13f4:	movs	r2, #64	; 0x40
    13f6:	mov	r8, r3
    13f8:	mov	r0, r6
    13fa:	bl	25d0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    13fe:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1400:	orr.w	r1, r7, r5, lsl #16
    1404:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1408:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    140c:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    140e:	cmp.w	r8, #0
    1412:	beq.n	13de <usb_config_rx+0x16>
    1414:	ldr	r3, [pc, #12]	; (1424 <usb_config_rx+0x5c>)
    1416:	lsls	r0, r4
    1418:	ldr	r4, [r3, #0]
    141a:	orrs	r0, r4
    141c:	str	r0, [r3, #0]
    141e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1422:	nop
    1424:	.word	0x2001e664
    1428:	.word	0x20020000

0000142c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    142c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    142e:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1432:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1436:	ite	ne
    1438:	movne	r7, #0
    143a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    143e:	cmp	r2, #2
    1440:	bls.n	1446 <usb_config_tx+0x1a>
    1442:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1446:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1448:	lsls	r5, r0, #7
    144a:	ldr.w	r9, [pc, #68]	; 1490 <usb_config_tx+0x64>
    144e:	mov	r8, r1
    1450:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1452:	movs	r1, #0
    1454:	mov	r4, r0
    1456:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1458:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    145c:	mov	r0, sl
    145e:	bl	25d0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1462:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1464:	orr.w	r1, r7, r8, lsl #16
    1468:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    146c:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1470:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1474:	cmp	r6, #0
    1476:	beq.n	1442 <usb_config_tx+0x16>
    1478:	add.w	r0, r4, #16
    147c:	ldr	r3, [pc, #12]	; (148c <usb_config_tx+0x60>)
    147e:	lsls	r2, r0
    1480:	ldr	r0, [r3, #0]
    1482:	orrs	r2, r0
    1484:	str	r2, [r3, #0]
    1486:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    148a:	nop
    148c:	.word	0x2001e664
    1490:	.word	0x20020000

00001494 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1494:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1496:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1498:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    149a:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    149e:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    14a0:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    14a2:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    14a4:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    14a8:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    14ac:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    14b0:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    14b4:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    14b6:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    14b8:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    14ba:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    14bc:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    14be:	pop	{r4, r5, r6, r7}
    14c0:	bx	lr
    14c2:	nop

000014c4 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    14c4:	subs	r3, r0, #2
    14c6:	cmp	r3, #2
    14c8:	bls.n	14cc <usb_transmit+0x8>
    14ca:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    14cc:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    14ce:	ldr	r3, [pc, #24]	; (14e8 <usb_transmit+0x24>)
    14d0:	add.w	r4, r0, #16
    14d4:	movs	r5, #1
    14d6:	mov	r2, r1
    14d8:	add.w	r0, r3, r0, lsl #7
    14dc:	lsl.w	r1, r5, r4
}
    14e0:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    14e2:	b.w	bf8 <schedule_transfer>
    14e6:	nop
    14e8:	.word	0x20020040

000014ec <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    14ec:	subs	r3, r0, #2
    14ee:	cmp	r3, #2
    14f0:	bls.n	14f4 <usb_receive+0x8>
    14f2:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    14f4:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    14f6:	ldr	r3, [pc, #20]	; (150c <usb_receive+0x20>)
    14f8:	movs	r4, #1
    14fa:	mov	r2, r1
    14fc:	lsl.w	r1, r4, r0
    1500:	add.w	r0, r3, r0, lsl #7
}
    1504:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1508:	b.w	bf8 <schedule_transfer>
    150c:	.word	0x20020000

00001510 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1510:	ldr	r0, [r0, #4]
#endif
}
    1512:	bx	lr

00001514 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1514:	cmp	r0, #0
    1516:	beq.n	15c8 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1518:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    151a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    151e:	sub	sp, #20
    1520:	mov	fp, r0
    1522:	ldr	r4, [pc, #168]	; (15cc <delay+0xb8>)
    1524:	ldr	r5, [pc, #168]	; (15d0 <delay+0xbc>)
    1526:	ldr	r6, [pc, #172]	; (15d4 <delay+0xc0>)
    1528:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    152c:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1530:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    1532:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1534:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1538:	cmp	r1, #0
    153a:	bne.n	152c <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    153c:	ldr	r7, [pc, #152]	; (15d8 <delay+0xc4>)
    153e:	strd	r8, r9, [sp, #8]
    1542:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1544:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1546:	ldr	r2, [pc, #148]	; (15dc <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1548:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    154c:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    154e:	ldr	r2, [r2, #0]
    1550:	movs	r7, #1
    1552:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    1556:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    155a:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    155c:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    155e:	cmp	r3, r1
    1560:	it	eq
    1562:	cmpeq	r2, r8
    1564:	ite	cs
    1566:	movcs	sl, r8
    1568:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    156a:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    156e:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1572:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1574:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1576:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    157a:	cmp	r3, #0
    157c:	bne.n	156e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    157e:	ldr	r0, [sp, #4]
    1580:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1582:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1584:	ldr	r0, [pc, #84]	; (15dc <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1586:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    158a:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    158c:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1590:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    1594:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1598:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    159c:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    159e:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    15a0:	cmp	r1, r3
    15a2:	it	eq
    15a4:	cmpeq	r0, r8
    15a6:	ite	cs
    15a8:	movcs	r3, r8
    15aa:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    15ac:	add	r2, r3
    15ae:	cmp	r2, lr
    15b0:	bcc.n	15c2 <delay+0xae>
			if (--msec == 0) return;
    15b2:	subs.w	fp, fp, #1
			start += 1000;
    15b6:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    15ba:	bne.n	156e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    15bc:	add	sp, #20
    15be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    15c2:	bl	16c8 <yield>
	}
    15c6:	b.n	156e <delay+0x5a>
    15c8:	bx	lr
    15ca:	nop
    15cc:	.word	0x20020280
    15d0:	.word	0x2001e6a4
    15d4:	.word	0x2001e69c
    15d8:	.word	0xe0001004
    15dc:	.word	0x2001e6a0

000015e0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    15e0:	cmp	r0, #39	; 0x27
    15e2:	bhi.n	161e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    15e4:	lsls	r0, r0, #4
    15e6:	ldr	r2, [pc, #104]	; (1650 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    15e8:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    15ea:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    15ee:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    15f0:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    15f2:	beq.n	1620 <pinMode+0x40>
    15f4:	cmp	r1, #4
    15f6:	beq.n	1620 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    15f8:	ldr	r4, [r3, #12]
    15fa:	ldr	r2, [r0, #4]
    15fc:	bic.w	r2, r2, r4
    1600:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1602:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1604:	cbz	r1, 1642 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1606:	cmp	r1, #2
    1608:	beq.n	1648 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    160a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    160c:	ldr	r3, [r3, #4]
}
    160e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1612:	ite	eq
    1614:	ldreq	r1, [pc, #60]	; (1654 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1616:	ldrne	r1, [pc, #64]	; (1658 <pinMode+0x78>)
    1618:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    161a:	movs	r2, #21
    161c:	str	r2, [r3, #0]
}
    161e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1620:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    1622:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1624:	ldr	r4, [r0, #4]
    1626:	orr.w	r2, r2, r4
    162a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    162c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    162e:	beq.n	1642 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1630:	movw	r1, #2104	; 0x838
    1634:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1636:	ldr	r3, [r3, #4]
    1638:	movs	r2, #21
}
    163a:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    163e:	str	r2, [r3, #0]
}
    1640:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1642:	movs	r1, #56	; 0x38
    1644:	str	r1, [r2, #0]
    1646:	b.n	1636 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1648:	ldr	r1, [pc, #16]	; (165c <pinMode+0x7c>)
    164a:	str	r1, [r2, #0]
    164c:	b.n	1636 <pinMode+0x56>
    164e:	nop
    1650:	.word	0x2000000c
    1654:	.word	0x00013038
    1658:	.word	0x00010038
    165c:	.word	0x0001f038

00001660 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1660:	ldr	r2, [pc, #72]	; (16ac <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1662:	ldr	r3, [pc, #76]	; (16b0 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1664:	ldr.w	r0, [r2, #544]	; 0x220
    1668:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    166c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    166e:	push	{r4, lr}
    1670:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1672:	bhi.n	167a <usb_init_serialnumber+0x1a>
    1674:	add.w	r0, r0, r0, lsl #2
    1678:	lsls	r0, r0, #1
    167a:	ldr	r4, [pc, #56]	; (16b4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    167c:	add	r1, sp, #4
    167e:	movs	r2, #10
    1680:	bl	1be0 <ultoa>
    1684:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1686:	movs	r3, #0
    1688:	mov	r0, r4
		char c = buf[i];
    168a:	ldrb.w	r2, [r1], #1
    168e:	adds	r3, #1
		if (!c) break;
    1690:	cbz	r2, 16a2 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1692:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1694:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1698:	bne.n	168a <usb_init_serialnumber+0x2a>
    169a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    169c:	strb	r3, [r4, #0]
}
    169e:	add	sp, #16
    16a0:	pop	{r4, pc}
    16a2:	lsls	r3, r3, #1
    16a4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    16a6:	strb	r3, [r4, #0]
}
    16a8:	add	sp, #16
    16aa:	pop	{r4, pc}
    16ac:	.word	0x401f4400
    16b0:	.word	0x0098967f
    16b4:	.word	0x200005c4

000016b8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    16b8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    16ba:	bl	80 <setup>
	while (1) {
		loop();
    16be:	bl	1d0 <loop>
		yield();
    16c2:	bl	16c8 <yield>
    16c6:	b.n	16be <main+0x6>

000016c8 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    16c8:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    16ca:	ldr	r4, [pc, #132]	; (1750 <yield+0x88>)
    16cc:	ldrb	r3, [r4, #0]
    16ce:	cbnz	r3, 16f2 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    16d0:	ldr	r3, [pc, #128]	; (1754 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    16d2:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    16d4:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    16d6:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    16d8:	cbnz	r3, 1722 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    16da:	ldr	r3, [pc, #124]	; (1758 <yield+0x90>)
    16dc:	ldrb	r3, [r3, #0]
    16de:	cmp	r3, #0
    16e0:	bne.n	1736 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    16e2:	ldr	r3, [pc, #120]	; (175c <yield+0x94>)

	running = 0;
    16e4:	movs	r1, #0
    16e6:	ldr	r2, [r3, #0]
    16e8:	strb	r1, [r4, #0]
    16ea:	cbz	r2, 16f2 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    16ec:	mrs	r2, IPSR
		if (ipsr != 0) return;
    16f0:	cbz	r2, 16f4 <yield+0x2c>
    16f2:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    16f4:	mrs	r0, PRIMASK
		__disable_irq();
    16f8:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    16fa:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    16fc:	cbz	r2, 173c <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    16fe:	ldr	r4, [pc, #96]	; (1760 <yield+0x98>)
    1700:	ldrb	r1, [r4, #0]
    1702:	cbnz	r1, 173c <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1704:	movs	r6, #1
		firstYield = first->_next;
    1706:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1708:	strb	r6, [r4, #0]
		firstYield = first->_next;
    170a:	str	r5, [r3, #0]
		if (firstYield) {
    170c:	cbz	r5, 1744 <yield+0x7c>
			firstYield->_prev = nullptr;
    170e:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1710:	cbnz	r0, 1714 <yield+0x4c>
    1712:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1714:	movs	r5, #0
		(*(first->_function))(*first);
    1716:	ldr	r3, [r2, #8]
    1718:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    171a:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    171c:	blx	r3
		runningFromYield = false;
    171e:	strb	r5, [r4, #0]
    1720:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1722:	bl	764 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1726:	cmp	r0, #0
    1728:	beq.n	16da <yield+0x12>
    172a:	bl	1994 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    172e:	ldr	r3, [pc, #40]	; (1758 <yield+0x90>)
    1730:	ldrb	r3, [r3, #0]
    1732:	cmp	r3, #0
    1734:	beq.n	16e2 <yield+0x1a>
    1736:	bl	1ee8 <HardwareSerial::processSerialEvents()>
    173a:	b.n	16e2 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    173c:	cmp	r0, #0
    173e:	bne.n	16f2 <yield+0x2a>
    1740:	cpsie	i
    1742:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    1744:	ldr	r3, [pc, #28]	; (1764 <yield+0x9c>)
    1746:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1748:	cmp	r0, #0
    174a:	bne.n	1714 <yield+0x4c>
    174c:	b.n	1712 <yield+0x4a>
    174e:	nop
    1750:	.word	0x2001e6a8
    1754:	.word	0x200005da
    1758:	.word	0x2001e6f8
    175c:	.word	0x2001e6bc
    1760:	.word	0x2001e6c0
    1764:	.word	0x2001e6b8

00001768 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    1768:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    176a:	mrs	r2, PRIMASK
		__disable_irq();
    176e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    1770:	ldrb	r3, [r0, #29]
    1772:	cbnz	r3, 1782 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    1774:	ldrb	r1, [r0, #28]
    1776:	cmp	r1, #1
    1778:	beq.n	178c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    177a:	cmp	r1, #3
    177c:	beq.n	17a0 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    177e:	movs	r3, #1
    1780:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1782:	cbnz	r2, 1786 <EventResponder::triggerEventNotImmediate()+0x1e>
    1784:	cpsie	i
	}
	enableInterrupts(irq);
}
    1786:	ldr.w	r4, [sp], #4
    178a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    178c:	ldr	r4, [pc, #68]	; (17d4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    178e:	ldr	r1, [r4, #0]
    1790:	cbz	r1, 17bc <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    1792:	ldr	r1, [pc, #68]	; (17d8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    1794:	str	r3, [r0, #20]
				_prev = lastYield;
    1796:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    1798:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    179a:	str	r3, [r0, #24]
				_prev->_next = this;
    179c:	str	r0, [r3, #20]
    179e:	b.n	177e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    17a0:	ldr	r4, [pc, #56]	; (17dc <EventResponder::triggerEventNotImmediate()+0x74>)
    17a2:	ldr	r1, [r4, #0]
    17a4:	cbz	r1, 17c8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    17a6:	ldr	r1, [pc, #56]	; (17e0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    17a8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    17aa:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    17ac:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    17ae:	str	r3, [r0, #24]
				_prev->_next = this;
    17b0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    17b2:	ldr	r3, [pc, #48]	; (17e4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    17b4:	mov.w	r1, #268435456	; 0x10000000
    17b8:	str	r1, [r3, #0]
    17ba:	b.n	177e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    17bc:	ldr	r3, [pc, #24]	; (17d8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    17be:	str	r1, [r0, #20]
				_prev = nullptr;
    17c0:	str	r1, [r0, #24]
				firstYield = this;
    17c2:	str	r0, [r4, #0]
				lastYield = this;
    17c4:	str	r0, [r3, #0]
    17c6:	b.n	177e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    17c8:	ldr	r3, [pc, #20]	; (17e0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    17ca:	str	r1, [r0, #20]
				_prev = nullptr;
    17cc:	str	r1, [r0, #24]
				firstInterrupt = this;
    17ce:	str	r0, [r4, #0]
				lastInterrupt = this;
    17d0:	str	r0, [r3, #0]
    17d2:	b.n	17b2 <EventResponder::triggerEventNotImmediate()+0x4a>
    17d4:	.word	0x2001e6bc
    17d8:	.word	0x2001e6b8
    17dc:	.word	0x2001e6ac
    17e0:	.word	0x2001e6b0
    17e4:	.word	0xe000ed04

000017e8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    17e8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    17ea:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    17ec:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    17ee:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    17f0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    17f2:	beq.n	17fc <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    17f4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    17f8:	b.w	1768 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    17fc:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    17fe:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1802:	bx	r3

00001804 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1804:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1806:	mrs	r1, PRIMASK
		__disable_irq();
    180a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    180c:	ldr	r4, [pc, #48]	; (1840 <EventResponder::runFromInterrupt()+0x3c>)
    180e:	ldr	r3, [r4, #0]
		if (first) {
    1810:	cbz	r3, 1836 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1812:	ldr	r6, [pc, #48]	; (1844 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1814:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1816:	ldr	r2, [r3, #20]
    1818:	str	r2, [r4, #0]
			if (firstInterrupt) {
    181a:	cbz	r2, 183c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    181c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    181e:	cbnz	r1, 1822 <EventResponder::runFromInterrupt()+0x1e>
    1820:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    1822:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    1824:	mov	r0, r3
    1826:	ldr	r3, [r3, #8]
    1828:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    182a:	mrs	r1, PRIMASK
		__disable_irq();
    182e:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1830:	ldr	r3, [r4, #0]
		if (first) {
    1832:	cmp	r3, #0
    1834:	bne.n	1816 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1836:	cbnz	r1, 183a <EventResponder::runFromInterrupt()+0x36>
    1838:	cpsie	i
    183a:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    183c:	str	r2, [r6, #0]
    183e:	b.n	181e <EventResponder::runFromInterrupt()+0x1a>
    1840:	.word	0x2001e6ac
    1844:	.word	0x2001e6b0

00001848 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    1848:	b.w	1804 <EventResponder::runFromInterrupt()>

0000184c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    184c:	ldr	r2, [pc, #96]	; (18b0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    184e:	push	{r4, r5}
	if (listActive == nullptr) {
    1850:	ldr	r4, [r2, #0]
    1852:	cmp	r4, #0
    1854:	beq.n	18a8 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    1856:	ldr	r3, [r0, #0]
    1858:	ldr	r1, [r4, #0]
    185a:	cmp	r3, r1
    185c:	bcs.n	187e <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    185e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    1860:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    1862:	str	r4, [r0, #8]
		_prev = nullptr;
    1864:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    1866:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    1868:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    186a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    186c:	movs	r3, #2
}
    186e:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    1870:	strb	r3, [r0, #20]
}
    1872:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    1874:	str	r3, [r0, #0]
    1876:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    1878:	ldr	r1, [r2, #0]
    187a:	cmp	r3, r1
    187c:	bcc.n	1890 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    187e:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    1880:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    1882:	cmp	r2, #0
    1884:	bne.n	1874 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    1886:	str	r2, [r0, #8]
		_prev = timer;
    1888:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    188a:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    188c:	str	r0, [r4, #8]
    188e:	b.n	186c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    1890:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    1892:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    1894:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    1896:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    1898:	str	r5, [r0, #12]
				timer->_prev = this;
    189a:	str	r0, [r4, #12]
				_prev->_next = this;
    189c:	ldr	r1, [r0, #12]
    189e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    18a0:	str	r3, [r4, #0]
				_state = TimerActive;
    18a2:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    18a4:	pop	{r4, r5}
    18a6:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    18a8:	str	r4, [r0, #8]
		_prev = nullptr;
    18aa:	str	r4, [r0, #12]
		listActive = this;
    18ac:	str	r0, [r2, #0]
    18ae:	b.n	186c <MillisTimer::addToActiveList()+0x20>
    18b0:	.word	0x2001e6b4

000018b4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    18b4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    18b6:	ldr	r6, [pc, #136]	; (1940 <MillisTimer::runFromTimer()+0x8c>)
    18b8:	ldr	r4, [r6, #0]
	while (timer) {
    18ba:	cbz	r4, 1908 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    18bc:	ldr	r3, [r4, #0]
    18be:	cmp	r3, #0
    18c0:	bne.n	1938 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    18c2:	mov	r5, r3
    18c4:	ldr	r7, [pc, #124]	; (1944 <MillisTimer::runFromTimer()+0x90>)
    18c6:	b.n	18d2 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    18c8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    18ca:	cbz	r4, 1908 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    18cc:	ldr	r3, [r4, #0]
    18ce:	cmp	r3, #0
    18d0:	bne.n	1938 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    18d2:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    18d4:	cbz	r3, 18d8 <MillisTimer::runFromTimer()+0x24>
    18d6:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    18d8:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    18da:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    18dc:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    18de:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    18e0:	ldr	r3, [r3, #0]
    18e2:	cmp	r3, r7
    18e4:	bne.n	192a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    18e6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    18e8:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    18ea:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    18ec:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    18ee:	beq.n	1932 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    18f0:	bl	1768 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    18f4:	ldr	r3, [r4, #4]
    18f6:	cmp	r3, #0
    18f8:	beq.n	18c8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    18fa:	str	r3, [r4, #0]
				timer->addToActiveList();
    18fc:	mov	r0, r4
    18fe:	bl	184c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    1902:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1904:	cmp	r4, #0
    1906:	bne.n	18cc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1908:	mrs	r3, PRIMASK
		__disable_irq();
    190c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    190e:	ldr	r2, [pc, #56]	; (1948 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1910:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    1912:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1914:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    1916:	cbnz	r3, 191a <MillisTimer::runFromTimer()+0x66>
    1918:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    191a:	cbz	r0, 1928 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    191c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    191e:	bl	184c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    1922:	mov	r0, r4
    1924:	cmp	r0, #0
    1926:	bne.n	191c <MillisTimer::runFromTimer()+0x68>
    1928:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    192a:	mov	r2, r4
    192c:	movs	r1, #0
    192e:	blx	r3
    1930:	b.n	18f4 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1932:	ldr	r3, [r0, #8]
    1934:	blx	r3
    1936:	b.n	18f4 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    1938:	subs	r3, #1
    193a:	str	r3, [r4, #0]
			break;
    193c:	b.n	1908 <MillisTimer::runFromTimer()+0x54>
    193e:	nop
    1940:	.word	0x2001e6b4
    1944:	.word	0x000017e9
    1948:	.word	0x2001e6c4

0000194c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    194c:	ldr	r2, [pc, #16]	; (1960 <systick_isr+0x14>)
    194e:	ldr	r3, [pc, #20]	; (1964 <systick_isr+0x18>)
    1950:	ldr	r1, [r2, #0]
	systick_millis_count++;
    1952:	ldr	r2, [pc, #20]	; (1968 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1954:	str	r1, [r3, #0]
	systick_millis_count++;
    1956:	ldr	r3, [r2, #0]
    1958:	adds	r3, #1
    195a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    195c:	b.w	18b4 <MillisTimer::runFromTimer()>
    1960:	.word	0xe0001004
    1964:	.word	0x2001e69c
    1968:	.word	0x2001e6a4

0000196c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    196c:	b.w	770 <usb_serial_flush_input>

00001970 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    1970:	b.w	720 <usb_serial_peekchar>

00001974 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1974:	b.w	7e4 <usb_serial_getchar>

00001978 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1978:	b.w	764 <usb_serial_available>

0000197c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    197c:	b.w	894 <usb_serial_flush_output>

00001980 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1980:	b.w	848 <usb_serial_write_buffer_free>

00001984 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1984:	mov	r0, r1
    1986:	mov	r1, r2
    1988:	b.w	830 <usb_serial_write>

0000198c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    198c:	mov	r0, r1
    198e:	b.w	804 <usb_serial_putchar>
    1992:	nop

00001994 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    1994:	ldr	r3, [pc, #4]	; (199c <serialEvent()+0x8>)
    1996:	movs	r2, #0
    1998:	strb	r2, [r3, #0]
    199a:	bx	lr
    199c:	.word	0x200005da

000019a0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    19a0:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    19a2:	push	{r4, lr}
    19a4:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    19a6:	ldr	r3, [r3, #4]
    19a8:	blx	r3
	return len;
}
    19aa:	mov	r0, r4
    19ac:	pop	{r4, pc}
    19ae:	nop

000019b0 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    19b0:	push	{r1, r2, r3}
    19b2:	push	{lr}
    19b4:	sub	sp, #8
    19b6:	add	r3, sp, #12
    19b8:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    19bc:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    19be:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    19c0:	bl	2ba8 <vdprintf>
#endif
}
    19c4:	add	sp, #8
    19c6:	ldr.w	lr, [sp], #4
    19ca:	add	sp, #12
    19cc:	bx	lr
    19ce:	nop

000019d0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    19d0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    19d2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    19d6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    19da:	bne.n	1ab8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    19dc:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    19de:	bcc.n	1a64 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    19e0:	ldr.w	r3, [r1], #4
    19e4:	str.w	r3, [r0], #4
    19e8:	ldr.w	r3, [r1], #4
    19ec:	str.w	r3, [r0], #4
    19f0:	ldr.w	r3, [r1], #4
    19f4:	str.w	r3, [r0], #4
    19f8:	ldr.w	r3, [r1], #4
    19fc:	str.w	r3, [r0], #4
    1a00:	ldr.w	r3, [r1], #4
    1a04:	str.w	r3, [r0], #4
    1a08:	ldr.w	r3, [r1], #4
    1a0c:	str.w	r3, [r0], #4
    1a10:	ldr.w	r3, [r1], #4
    1a14:	str.w	r3, [r0], #4
    1a18:	ldr.w	r3, [r1], #4
    1a1c:	str.w	r3, [r0], #4
    1a20:	ldr.w	r3, [r1], #4
    1a24:	str.w	r3, [r0], #4
    1a28:	ldr.w	r3, [r1], #4
    1a2c:	str.w	r3, [r0], #4
    1a30:	ldr.w	r3, [r1], #4
    1a34:	str.w	r3, [r0], #4
    1a38:	ldr.w	r3, [r1], #4
    1a3c:	str.w	r3, [r0], #4
    1a40:	ldr.w	r3, [r1], #4
    1a44:	str.w	r3, [r0], #4
    1a48:	ldr.w	r3, [r1], #4
    1a4c:	str.w	r3, [r0], #4
    1a50:	ldr.w	r3, [r1], #4
    1a54:	str.w	r3, [r0], #4
    1a58:	ldr.w	r3, [r1], #4
    1a5c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1a60:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1a62:	bcs.n	19e0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1a64:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1a66:	bcc.n	1a8c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1a68:	ldr.w	r3, [r1], #4
    1a6c:	str.w	r3, [r0], #4
    1a70:	ldr.w	r3, [r1], #4
    1a74:	str.w	r3, [r0], #4
    1a78:	ldr.w	r3, [r1], #4
    1a7c:	str.w	r3, [r0], #4
    1a80:	ldr.w	r3, [r1], #4
    1a84:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1a88:	subs	r2, #16
	bhs	.Lmid_block_loop
    1a8a:	bcs.n	1a68 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1a8c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    1a8e:	bcc.n	1a9c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1a90:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1a94:	str.w	r3, [r0], #4
	subs	r2, #4
    1a98:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1a9a:	bcs.n	1a90 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1a9c:	adds	r2, #4
	beq	.Ldone
    1a9e:	beq.n	1ab2 <memcpy+0xe2>

	lsls	r2, r2, #31
    1aa0:	lsls	r2, r2, #31
	itt ne
    1aa2:	itt	ne
	ldrbne  r3, [r1], #1
    1aa4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1aa8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1aac:	bcc.n	1ab2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1aae:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1ab0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1ab2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1ab4:	bx	lr
    1ab6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1ab8:	cmp	r2, #8
	blo	.Lbyte_copy
    1aba:	bcc.n	1ae4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1abc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1abe:	beq.n	19dc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1ac0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1ac4:	beq.n	19dc <memcpy+0xc>

	rsb	r3, #4
    1ac6:	rsb	r3, r3, #4
	subs	r2, r3
    1aca:	subs	r2, r2, r3

	lsls    r3, r3, #31
    1acc:	lsls	r3, r3, #31
	itt ne
    1ace:	itt	ne
	ldrbne  r3, [r1], #1
    1ad0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1ad4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1ad8:	bcc.n	19dc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1ada:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1ade:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1ae2:	b.n	19dc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1ae4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    1ae6:	bcc.n	1a9c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1ae8:	subs	r2, #1
	ldrb    r3, [r1], #1
    1aea:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1aee:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1af2:	bcs.n	1ae8 <memcpy+0x118>

	ldrb	r3, [r1]
    1af4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1af6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1af8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1afa:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1afc:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1afe:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1b00:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1b02:	bx	lr

00001b04 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1b04:	movs	r0, #4
    1b06:	mov	r1, lr
    1b08:	tst	r0, r1
    1b0a:	beq.n	1b14 <_MSP>
    1b0c:	mrs	r0, PSP
    1b10:	b.w	1b24 <HardFault_HandlerC>

00001b14 <_MSP>:
    1b14:	mrs	r0, MSP
    1b18:	b.w	1b24 <HardFault_HandlerC>

00001b1c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1b1c:	bx	lr
    1b1e:	nop

00001b20 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1b20:	bx	lr
    1b22:	nop

00001b24 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1b24:	ldr	r3, [pc, #108]	; (1b94 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1b26:	movs	r1, #5
    1b28:	ldr	r2, [pc, #108]	; (1b98 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1b2a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1b2c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1b2e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1b32:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1b34:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1b38:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1b3a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1b3c:	ldr	r4, [pc, #92]	; (1b9c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1b3e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1b40:	ldr	r0, [pc, #92]	; (1ba0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1b42:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1b44:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1b48:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1b4c:	ldr	r3, [r4, #0]
    1b4e:	cmp	r3, r0
    1b50:	bls.n	1b58 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1b52:	ldr	r0, [pc, #80]	; (1ba4 <HardFault_HandlerC+0x80>)
    1b54:	bl	934 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1b58:	ldr	r5, [pc, #56]	; (1b94 <HardFault_HandlerC+0x70>)
    1b5a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1b5c:	movs	r0, #0
    1b5e:	ldr	r2, [pc, #72]	; (1ba8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1b60:	ldr	r1, [pc, #72]	; (1bac <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1b62:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1b66:	str	r0, [sp, #4]
    1b68:	ldr	r3, [sp, #4]
    1b6a:	cmp	r3, r2
    1b6c:	bhi.n	1b7a <HardFault_HandlerC+0x56>
    1b6e:	ldr	r3, [sp, #4]
    1b70:	adds	r3, #1
    1b72:	str	r3, [sp, #4]
    1b74:	ldr	r3, [sp, #4]
    1b76:	cmp	r3, r2
    1b78:	bls.n	1b6e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1b7a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1b7e:	str	r0, [sp, #4]
    1b80:	ldr	r3, [sp, #4]
    1b82:	cmp	r3, r1
    1b84:	bhi.n	1b62 <HardFault_HandlerC+0x3e>
    1b86:	ldr	r3, [sp, #4]
    1b88:	adds	r3, #1
    1b8a:	str	r3, [sp, #4]
    1b8c:	ldr	r3, [sp, #4]
    1b8e:	cmp	r3, r1
    1b90:	bls.n	1b86 <HardFault_HandlerC+0x62>
    1b92:	b.n	1b62 <HardFault_HandlerC+0x3e>
    1b94:	.word	0x401bc000
    1b98:	.word	0x401f8000
    1b9c:	.word	0x200005ac
    1ba0:	.word	0x23c345ff
    1ba4:	.word	0x11e1a300
    1ba8:	.word	0x000f423f
    1bac:	.word	0x0089543f

00001bb0 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    1bb0:	ldr	r2, [pc, #36]	; (1bd8 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    1bb2:	push	{r3, lr}
        char *prev = __brkval;
    1bb4:	ldr	r3, [r2, #0]
        if (incr != 0) {
    1bb6:	cbz	r0, 1bc2 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    1bb8:	add	r0, r3
    1bba:	ldr	r1, [pc, #32]	; (1bdc <_sbrk+0x2c>)
    1bbc:	cmp	r0, r1
    1bbe:	bhi.n	1bc6 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    1bc0:	str	r0, [r2, #0]
        }
        return prev;
}
    1bc2:	mov	r0, r3
    1bc4:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1bc6:	bl	1f10 <__errno>
    1bca:	movs	r2, #12
                        return (void *)-1;
    1bcc:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1bd0:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1bd2:	mov	r0, r3
    1bd4:	pop	{r3, pc}
    1bd6:	nop
    1bd8:	.word	0x200005ec
    1bdc:	.word	0x20280000

00001be0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1be0:	push	{r4, r5, r6, r7}
    1be2:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    1be4:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1be6:	mov	r7, r6
    1be8:	b.n	1bec <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1bea:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1bec:	udiv	r3, r0, r2
    1bf0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1bf4:	add.w	r4, r0, #55	; 0x37
    1bf8:	cmp	r0, #9
    1bfa:	add.w	r0, r0, #48	; 0x30
    1bfe:	uxtb	r4, r4
    1c00:	it	ls
    1c02:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    1c04:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1c06:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    1c0a:	cmp	r3, #0
    1c0c:	bne.n	1bea <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    1c0e:	adds	r2, r1, r5
    1c10:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    1c12:	cbz	r5, 1c28 <ultoa+0x48>
    1c14:	adds	r3, #1
		t = buf[j];
    1c16:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    1c1a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1c1c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    1c1e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1c20:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    1c22:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1c26:	blt.n	1c14 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    1c28:	mov	r0, r1
    1c2a:	pop	{r4, r5, r6, r7}
    1c2c:	bx	lr
    1c2e:	nop

00001c30 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c30:	ldr	r0, [pc, #656]	; (1ec4 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1c32:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c36:	ldr	r3, [pc, #656]	; (1ec8 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c38:	ldr	r2, [r0, #120]	; 0x78
    1c3a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1c3e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c40:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1c42:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c44:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c48:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c4c:	ldr	r4, [pc, #636]	; (1ecc <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c4e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c52:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1c54:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c58:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1c5a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c5c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c60:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1c64:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1c68:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1c6c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1c70:	ldrh.w	r0, [r3, #392]	; 0x188
    1c74:	uxth	r0, r0
    1c76:	orr.w	r0, r0, #240	; 0xf0
    1c7a:	strh.w	r0, [r3, #392]	; 0x188
    1c7e:	add.w	r0, r1, r1, lsl #1
    1c82:	ldr	r3, [pc, #580]	; (1ec8 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1c84:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1c86:	movs	r5, #0
    1c88:	lsls	r0, r0, #5
    1c8a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c8c:	cmp	r1, #4
    1c8e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c90:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1c94:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1c96:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1c98:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1c9a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1c9c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1c9e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1ca0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1ca2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1ca4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1ca6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1ca8:	bne.n	1c7e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1caa:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cae:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1cb2:	ldr	r3, [pc, #540]	; (1ed0 <pwm_init+0x2a0>)
    1cb4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cb8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cba:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1cbc:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1cc0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cc2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1cc6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cca:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1cce:	ldrh.w	r0, [r4, #392]	; 0x188
    1cd2:	uxth	r0, r0
    1cd4:	orr.w	r0, r0, #3840	; 0xf00
    1cd8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1cdc:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1ce0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1ce4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1ce8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1cec:	ldrh.w	r0, [r3, #392]	; 0x188
    1cf0:	uxth	r0, r0
    1cf2:	orr.w	r0, r0, #240	; 0xf0
    1cf6:	strh.w	r0, [r3, #392]	; 0x188
    1cfa:	add.w	r0, r1, r1, lsl #1
    1cfe:	ldr	r3, [pc, #464]	; (1ed0 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1d00:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d02:	movs	r5, #0
    1d04:	lsls	r0, r0, #5
    1d06:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d08:	cmp	r1, #4
    1d0a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d0c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d0e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1d12:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1d14:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1d16:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1d18:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1d1a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1d1c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1d1e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1d20:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1d22:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d24:	bne.n	1cfa <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d26:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d2a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d2e:	ldr	r3, [pc, #420]	; (1ed4 <pwm_init+0x2a4>)
    1d30:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d34:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d36:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d38:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d3c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d3e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d42:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d46:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1d4a:	ldrh.w	r0, [r4, #392]	; 0x188
    1d4e:	uxth	r0, r0
    1d50:	orr.w	r0, r0, #3840	; 0xf00
    1d54:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d58:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1d5c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d60:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1d64:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1d68:	ldrh.w	r0, [r3, #392]	; 0x188
    1d6c:	uxth	r0, r0
    1d6e:	orr.w	r0, r0, #240	; 0xf0
    1d72:	strh.w	r0, [r3, #392]	; 0x188
    1d76:	add.w	r0, r1, r1, lsl #1
    1d7a:	ldr	r3, [pc, #344]	; (1ed4 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    1d7c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d7e:	movs	r5, #0
    1d80:	lsls	r0, r0, #5
    1d82:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d84:	cmp	r1, #4
    1d86:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d88:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d8a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1d8e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1d90:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1d92:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1d94:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1d96:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1d98:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1d9a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1d9c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1d9e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1da0:	bne.n	1d76 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1da2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1da6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1daa:	ldr	r3, [pc, #300]	; (1ed8 <pwm_init+0x2a8>)
    1dac:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1db0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1db2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1db4:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1db8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dba:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1dbe:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dc2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1dc6:	ldrh.w	r0, [r4, #392]	; 0x188
    1dca:	uxth	r0, r0
    1dcc:	orr.w	r0, r0, #3840	; 0xf00
    1dd0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1dd4:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1dd8:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1ddc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1de0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1de4:	ldrh.w	r0, [r3, #392]	; 0x188
    1de8:	uxth	r0, r0
    1dea:	orr.w	r0, r0, #240	; 0xf0
    1dee:	strh.w	r0, [r3, #392]	; 0x188
    1df2:	add.w	r0, r1, r1, lsl #1
    1df6:	ldr	r3, [pc, #224]	; (1ed8 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    1df8:	adds	r1, #1
    1dfa:	lsls	r0, r0, #5
    1dfc:	mov	r4, r3
    1dfe:	cmp	r1, #4
    1e00:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1e02:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1e04:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1e08:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1e0a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1e0c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1e0e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1e10:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    1e12:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1e14:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1e16:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1e18:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1e1a:	bne.n	1df2 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e1c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e20:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e22:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e24:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e28:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e2a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e2e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e30:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e34:	orrs	r3, r7
    1e36:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1e3a:	ldrh.w	r3, [r4, #392]	; 0x188
    1e3e:	uxth	r3, r3
    1e40:	orr.w	r3, r3, #3840	; 0xf00
    1e44:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e48:	lsls	r0, r2, #5
    1e4a:	ldr	r3, [pc, #144]	; (1edc <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e4c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1e4e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e50:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1e52:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1e54:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e56:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e58:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e5a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1e5e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1e60:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e62:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e64:	bne.n	1e48 <pwm_init+0x218>
    1e66:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e68:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e6a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e6e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e72:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e74:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e78:	lsls	r0, r2, #5
    1e7a:	ldr	r3, [pc, #100]	; (1ee0 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e7c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1e7e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e80:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1e82:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1e84:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e86:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e88:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e8a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1e8c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1e8e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e90:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e92:	bne.n	1e78 <pwm_init+0x248>
    1e94:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e96:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e98:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e9c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1ea0:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1ea2:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1ea6:	lsls	r0, r2, #5
    1ea8:	ldr	r3, [pc, #56]	; (1ee4 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1eaa:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1eac:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1eae:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1eb0:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1eb2:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1eb4:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1eb6:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1eb8:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1eba:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1ebc:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1ebe:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ec0:	bne.n	1ea6 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1ec2:	pop	{r4, r5, r6, r7, pc}
    1ec4:	.word	0x400fc000
    1ec8:	.word	0x403dc000
    1ecc:	.word	0xfc030000
    1ed0:	.word	0x403e0000
    1ed4:	.word	0x403e4000
    1ed8:	.word	0x403e8000
    1edc:	.word	0x401dc000
    1ee0:	.word	0x401e0000
    1ee4:	.word	0x401e4000

00001ee8 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    1ee8:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    1eea:	ldr	r3, [pc, #28]	; (1f08 <HardwareSerial::processSerialEvents()+0x20>)
    1eec:	ldrb	r4, [r3, #0]
    1eee:	cbz	r4, 1f04 <HardwareSerial::processSerialEvents()+0x1c>
    1ef0:	ldr	r5, [pc, #24]	; (1f0c <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    1ef2:	ldr.w	r3, [r5, #4]!
    1ef6:	cmp	r3, #0
    1ef8:	beq.n	1ef2 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    1efa:	blx	r3
			if (--handlers_still_to_process == 0) return;
    1efc:	subs	r3, r4, #1
    1efe:	ands.w	r4, r3, #255	; 0xff
    1f02:	bne.n	1ef2 <HardwareSerial::processSerialEvents()+0xa>
    1f04:	pop	{r3, r4, r5, pc}
    1f06:	nop
    1f08:	.word	0x2001e6f8
    1f0c:	.word	0x2001e6d8

00001f10 <__errno>:
    1f10:	ldr	r3, [pc, #4]	; (1f18 <__errno+0x8>)
    1f12:	ldr	r0, [r3, #0]
    1f14:	bx	lr
    1f16:	nop
    1f18:	.word	0x20000a18

00001f1c <__libc_init_array>:
    1f1c:	push	{r4, r5, r6, lr}
    1f1e:	ldr	r6, [pc, #60]	; (1f5c <__libc_init_array+0x40>)
    1f20:	ldr	r5, [pc, #60]	; (1f60 <__libc_init_array+0x44>)
    1f22:	subs	r6, r6, r5
    1f24:	asrs	r6, r6, #2
    1f26:	it	ne
    1f28:	movne	r4, #0
    1f2a:	beq.n	1f38 <__libc_init_array+0x1c>
    1f2c:	adds	r4, #1
    1f2e:	ldr.w	r3, [r5], #4
    1f32:	blx	r3
    1f34:	cmp	r6, r4
    1f36:	bne.n	1f2c <__libc_init_array+0x10>
    1f38:	ldr	r6, [pc, #40]	; (1f64 <__libc_init_array+0x48>)
    1f3a:	ldr	r5, [pc, #44]	; (1f68 <__libc_init_array+0x4c>)
    1f3c:	subs	r6, r6, r5
    1f3e:	bl	5d50 <___init_veneer>
    1f42:	asrs	r6, r6, #2
    1f44:	it	ne
    1f46:	movne	r4, #0
    1f48:	beq.n	1f58 <__libc_init_array+0x3c>
    1f4a:	adds	r4, #1
    1f4c:	ldr.w	r3, [r5], #4
    1f50:	blx	r3
    1f52:	cmp	r6, r4
    1f54:	bne.n	1f4a <__libc_init_array+0x2e>
    1f56:	pop	{r4, r5, r6, pc}
    1f58:	pop	{r4, r5, r6, pc}
    1f5a:	nop
    1f5c:	.word	0x600016f8
    1f60:	.word	0x600016f8
    1f64:	.word	0x600016fc
    1f68:	.word	0x600016f8

00001f6c <_malloc_r>:
    1f6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f70:	add.w	r5, r1, #11
    1f74:	cmp	r5, #22
    1f76:	sub	sp, #12
    1f78:	mov	r6, r0
    1f7a:	bls.w	20bc <_malloc_r+0x150>
    1f7e:	bics.w	r5, r5, #7
    1f82:	bmi.w	2104 <_malloc_r+0x198>
    1f86:	cmp	r1, r5
    1f88:	bhi.w	2104 <_malloc_r+0x198>
    1f8c:	bl	266c <__malloc_lock>
    1f90:	cmp.w	r5, #504	; 0x1f8
    1f94:	bcc.w	24d0 <_malloc_r+0x564>
    1f98:	lsrs	r3, r5, #9
    1f9a:	beq.w	2112 <_malloc_r+0x1a6>
    1f9e:	cmp	r3, #4
    1fa0:	bhi.w	22aa <_malloc_r+0x33e>
    1fa4:	lsrs	r0, r5, #6
    1fa6:	add.w	lr, r0, #57	; 0x39
    1faa:	mov.w	r3, lr, lsl #1
    1fae:	adds	r0, #56	; 0x38
    1fb0:	ldr	r7, [pc, #784]	; (22c4 <_malloc_r+0x358>)
    1fb2:	add.w	r3, r7, r3, lsl #2
    1fb6:	sub.w	r1, r3, #8
    1fba:	ldr	r4, [r3, #4]
    1fbc:	cmp	r1, r4
    1fbe:	bne.n	1fd0 <_malloc_r+0x64>
    1fc0:	b.n	211c <_malloc_r+0x1b0>
    1fc2:	cmp	r2, #0
    1fc4:	bge.w	2120 <_malloc_r+0x1b4>
    1fc8:	ldr	r4, [r4, #12]
    1fca:	cmp	r1, r4
    1fcc:	beq.w	211c <_malloc_r+0x1b0>
    1fd0:	ldr	r3, [r4, #4]
    1fd2:	bic.w	r3, r3, #3
    1fd6:	subs	r2, r3, r5
    1fd8:	cmp	r2, #15
    1fda:	ble.n	1fc2 <_malloc_r+0x56>
    1fdc:	ldr	r1, [pc, #740]	; (22c4 <_malloc_r+0x358>)
    1fde:	ldr	r4, [r7, #16]
    1fe0:	add.w	lr, r1, #8
    1fe4:	cmp	r4, lr
    1fe6:	beq.w	2350 <_malloc_r+0x3e4>
    1fea:	ldr	r3, [r4, #4]
    1fec:	bic.w	r3, r3, #3
    1ff0:	subs	r2, r3, r5
    1ff2:	cmp	r2, #15
    1ff4:	bgt.w	232a <_malloc_r+0x3be>
    1ff8:	cmp	r2, #0
    1ffa:	str.w	lr, [r1, #20]
    1ffe:	str.w	lr, [r1, #16]
    2002:	bge.w	2142 <_malloc_r+0x1d6>
    2006:	cmp.w	r3, #512	; 0x200
    200a:	bcs.w	22dc <_malloc_r+0x370>
    200e:	lsrs	r3, r3, #3
    2010:	add.w	ip, r3, #1
    2014:	movs	r2, #1
    2016:	asrs	r3, r3, #2
    2018:	lsl.w	r3, r2, r3
    201c:	ldr	r2, [r1, #4]
    201e:	ldr.w	r8, [r1, ip, lsl #3]
    2022:	str.w	r8, [r4, #8]
    2026:	add.w	r9, r1, ip, lsl #3
    202a:	orrs	r2, r3
    202c:	sub.w	r3, r9, #8
    2030:	str	r3, [r4, #12]
    2032:	str	r2, [r1, #4]
    2034:	str.w	r4, [r1, ip, lsl #3]
    2038:	str.w	r4, [r8, #12]
    203c:	asrs	r3, r0, #2
    203e:	movs	r4, #1
    2040:	lsls	r4, r3
    2042:	cmp	r4, r2
    2044:	bhi.w	215c <_malloc_r+0x1f0>
    2048:	tst	r4, r2
    204a:	bne.n	205a <_malloc_r+0xee>
    204c:	bic.w	r0, r0, #3
    2050:	lsls	r4, r4, #1
    2052:	tst	r4, r2
    2054:	add.w	r0, r0, #4
    2058:	beq.n	2050 <_malloc_r+0xe4>
    205a:	add.w	r9, r7, r0, lsl #3
    205e:	mov	ip, r9
    2060:	mov	r8, r0
    2062:	ldr.w	r1, [ip, #12]
    2066:	cmp	ip, r1
    2068:	bne.n	207a <_malloc_r+0x10e>
    206a:	b.n	2354 <_malloc_r+0x3e8>
    206c:	cmp	r2, #0
    206e:	bge.w	2374 <_malloc_r+0x408>
    2072:	ldr	r1, [r1, #12]
    2074:	cmp	ip, r1
    2076:	beq.w	2354 <_malloc_r+0x3e8>
    207a:	ldr	r3, [r1, #4]
    207c:	bic.w	r3, r3, #3
    2080:	subs	r2, r3, r5
    2082:	cmp	r2, #15
    2084:	ble.n	206c <_malloc_r+0x100>
    2086:	mov	r4, r1
    2088:	ldr.w	ip, [r1, #12]
    208c:	ldr.w	r8, [r4, #8]!
    2090:	adds	r3, r1, r5
    2092:	orr.w	r5, r5, #1
    2096:	str	r5, [r1, #4]
    2098:	orr.w	r1, r2, #1
    209c:	str.w	ip, [r8, #12]
    20a0:	mov	r0, r6
    20a2:	str.w	r8, [ip, #8]
    20a6:	str	r3, [r7, #20]
    20a8:	str	r3, [r7, #16]
    20aa:	str.w	lr, [r3, #12]
    20ae:	str.w	lr, [r3, #8]
    20b2:	str	r1, [r3, #4]
    20b4:	str	r2, [r3, r2]
    20b6:	bl	2670 <__malloc_unlock>
    20ba:	b.n	20fc <_malloc_r+0x190>
    20bc:	cmp	r1, #16
    20be:	bhi.n	2104 <_malloc_r+0x198>
    20c0:	bl	266c <__malloc_lock>
    20c4:	movs	r5, #16
    20c6:	movs	r3, #6
    20c8:	movs	r0, #2
    20ca:	ldr	r7, [pc, #504]	; (22c4 <_malloc_r+0x358>)
    20cc:	add.w	r3, r7, r3, lsl #2
    20d0:	sub.w	r2, r3, #8
    20d4:	ldr	r4, [r3, #4]
    20d6:	cmp	r4, r2
    20d8:	beq.w	2366 <_malloc_r+0x3fa>
    20dc:	ldr	r3, [r4, #4]
    20de:	ldr	r1, [r4, #12]
    20e0:	ldr	r5, [r4, #8]
    20e2:	bic.w	r3, r3, #3
    20e6:	add	r3, r4
    20e8:	mov	r0, r6
    20ea:	ldr	r2, [r3, #4]
    20ec:	str	r1, [r5, #12]
    20ee:	orr.w	r2, r2, #1
    20f2:	str	r5, [r1, #8]
    20f4:	str	r2, [r3, #4]
    20f6:	bl	2670 <__malloc_unlock>
    20fa:	adds	r4, #8
    20fc:	mov	r0, r4
    20fe:	add	sp, #12
    2100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2104:	movs	r4, #0
    2106:	movs	r3, #12
    2108:	mov	r0, r4
    210a:	str	r3, [r6, #0]
    210c:	add	sp, #12
    210e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2112:	movs	r3, #128	; 0x80
    2114:	mov.w	lr, #64	; 0x40
    2118:	movs	r0, #63	; 0x3f
    211a:	b.n	1fb0 <_malloc_r+0x44>
    211c:	mov	r0, lr
    211e:	b.n	1fdc <_malloc_r+0x70>
    2120:	add	r3, r4
    2122:	ldr	r1, [r4, #12]
    2124:	ldr	r2, [r3, #4]
    2126:	ldr	r5, [r4, #8]
    2128:	orr.w	r2, r2, #1
    212c:	str	r1, [r5, #12]
    212e:	mov	r0, r6
    2130:	str	r5, [r1, #8]
    2132:	str	r2, [r3, #4]
    2134:	bl	2670 <__malloc_unlock>
    2138:	adds	r4, #8
    213a:	mov	r0, r4
    213c:	add	sp, #12
    213e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2142:	add	r3, r4
    2144:	mov	r0, r6
    2146:	ldr	r2, [r3, #4]
    2148:	orr.w	r2, r2, #1
    214c:	str	r2, [r3, #4]
    214e:	bl	2670 <__malloc_unlock>
    2152:	adds	r4, #8
    2154:	mov	r0, r4
    2156:	add	sp, #12
    2158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    215c:	ldr	r4, [r7, #8]
    215e:	ldr	r3, [r4, #4]
    2160:	bic.w	r8, r3, #3
    2164:	cmp	r8, r5
    2166:	bcc.n	2172 <_malloc_r+0x206>
    2168:	rsb	r3, r5, r8
    216c:	cmp	r3, #15
    216e:	bgt.w	228a <_malloc_r+0x31e>
    2172:	ldr	r3, [pc, #340]	; (22c8 <_malloc_r+0x35c>)
    2174:	ldr.w	r9, [pc, #352]	; 22d8 <_malloc_r+0x36c>
    2178:	ldr	r2, [r3, #0]
    217a:	ldr.w	r3, [r9]
    217e:	adds	r3, #1
    2180:	add	r2, r5
    2182:	add.w	sl, r4, r8
    2186:	beq.w	244a <_malloc_r+0x4de>
    218a:	add.w	r2, r2, #4096	; 0x1000
    218e:	adds	r2, #15
    2190:	bic.w	r2, r2, #4080	; 0xff0
    2194:	bic.w	r2, r2, #15
    2198:	mov	r1, r2
    219a:	mov	r0, r6
    219c:	str	r2, [sp, #4]
    219e:	bl	2a54 <_sbrk_r>
    21a2:	cmp.w	r0, #4294967295
    21a6:	mov	fp, r0
    21a8:	ldr	r2, [sp, #4]
    21aa:	beq.w	245e <_malloc_r+0x4f2>
    21ae:	cmp	sl, r0
    21b0:	bhi.w	23ac <_malloc_r+0x440>
    21b4:	ldr	r3, [pc, #276]	; (22cc <_malloc_r+0x360>)
    21b6:	ldr	r1, [r3, #0]
    21b8:	cmp	sl, fp
    21ba:	add	r1, r2
    21bc:	str	r1, [r3, #0]
    21be:	beq.w	2468 <_malloc_r+0x4fc>
    21c2:	ldr.w	r0, [r9]
    21c6:	ldr.w	lr, [pc, #272]	; 22d8 <_malloc_r+0x36c>
    21ca:	adds	r0, #1
    21cc:	ittet	ne
    21ce:	rsbne	sl, sl, fp
    21d2:	addne	r1, sl
    21d4:	streq.w	fp, [lr]
    21d8:	strne	r1, [r3, #0]
    21da:	ands.w	r1, fp, #7
    21de:	beq.w	2410 <_malloc_r+0x4a4>
    21e2:	rsb	r0, r1, #8
    21e6:	rsb	r1, r1, #4096	; 0x1000
    21ea:	add	fp, r0
    21ec:	adds	r1, #8
    21ee:	add	r2, fp
    21f0:	ubfx	r2, r2, #0, #12
    21f4:	rsb	r9, r2, r1
    21f8:	mov	r1, r9
    21fa:	mov	r0, r6
    21fc:	str	r3, [sp, #4]
    21fe:	bl	2a54 <_sbrk_r>
    2202:	adds	r3, r0, #1
    2204:	ldr	r3, [sp, #4]
    2206:	beq.w	2488 <_malloc_r+0x51c>
    220a:	rsb	r2, fp, r0
    220e:	add	r2, r9
    2210:	orr.w	r2, r2, #1
    2214:	ldr	r1, [r3, #0]
    2216:	str.w	fp, [r7, #8]
    221a:	add	r1, r9
    221c:	cmp	r4, r7
    221e:	str.w	r2, [fp, #4]
    2222:	str	r1, [r3, #0]
    2224:	ldr.w	r9, [pc, #164]	; 22cc <_malloc_r+0x360>
    2228:	beq.n	2258 <_malloc_r+0x2ec>
    222a:	cmp.w	r8, #15
    222e:	bls.w	242c <_malloc_r+0x4c0>
    2232:	ldr	r2, [r4, #4]
    2234:	sub.w	r3, r8, #12
    2238:	bic.w	r3, r3, #7
    223c:	adds	r0, r4, r3
    223e:	and.w	r2, r2, #1
    2242:	mov.w	lr, #5
    2246:	orrs	r2, r3
    2248:	cmp	r3, #15
    224a:	str	r2, [r4, #4]
    224c:	str.w	lr, [r0, #4]
    2250:	str.w	lr, [r0, #8]
    2254:	bhi.w	2490 <_malloc_r+0x524>
    2258:	ldr	r3, [pc, #116]	; (22d0 <_malloc_r+0x364>)
    225a:	ldr	r4, [r7, #8]
    225c:	ldr	r2, [r3, #0]
    225e:	cmp	r1, r2
    2260:	it	hi
    2262:	strhi	r1, [r3, #0]
    2264:	ldr	r3, [pc, #108]	; (22d4 <_malloc_r+0x368>)
    2266:	ldr	r2, [r3, #0]
    2268:	cmp	r1, r2
    226a:	ldr	r2, [r4, #4]
    226c:	it	hi
    226e:	strhi	r1, [r3, #0]
    2270:	bic.w	r2, r2, #3
    2274:	cmp	r5, r2
    2276:	sub.w	r3, r2, r5
    227a:	bhi.n	2280 <_malloc_r+0x314>
    227c:	cmp	r3, #15
    227e:	bgt.n	228a <_malloc_r+0x31e>
    2280:	mov	r0, r6
    2282:	bl	2670 <__malloc_unlock>
    2286:	movs	r4, #0
    2288:	b.n	20fc <_malloc_r+0x190>
    228a:	adds	r2, r4, r5
    228c:	orr.w	r3, r3, #1
    2290:	orr.w	r5, r5, #1
    2294:	str	r5, [r4, #4]
    2296:	mov	r0, r6
    2298:	str	r2, [r7, #8]
    229a:	str	r3, [r2, #4]
    229c:	bl	2670 <__malloc_unlock>
    22a0:	adds	r4, #8
    22a2:	mov	r0, r4
    22a4:	add	sp, #12
    22a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22aa:	cmp	r3, #20
    22ac:	bls.n	2392 <_malloc_r+0x426>
    22ae:	cmp	r3, #84	; 0x54
    22b0:	bhi.w	23fc <_malloc_r+0x490>
    22b4:	lsrs	r0, r5, #12
    22b6:	add.w	lr, r0, #111	; 0x6f
    22ba:	mov.w	r3, lr, lsl #1
    22be:	adds	r0, #110	; 0x6e
    22c0:	b.n	1fb0 <_malloc_r+0x44>
    22c2:	nop
    22c4:	.word	0x20000b88
    22c8:	.word	0x2001e704
    22cc:	.word	0x2001e708
    22d0:	.word	0x2001e700
    22d4:	.word	0x2001e6fc
    22d8:	.word	0x20000f94
    22dc:	lsrs	r2, r3, #9
    22de:	cmp	r2, #4
    22e0:	bls.n	23a0 <_malloc_r+0x434>
    22e2:	cmp	r2, #20
    22e4:	bhi.w	244e <_malloc_r+0x4e2>
    22e8:	add.w	r1, r2, #92	; 0x5c
    22ec:	lsls	r1, r1, #1
    22ee:	adds	r2, #91	; 0x5b
    22f0:	add.w	ip, r7, r1, lsl #2
    22f4:	ldr.w	r1, [r7, r1, lsl #2]
    22f8:	ldr.w	r8, [pc, #476]	; 24d8 <_malloc_r+0x56c>
    22fc:	sub.w	ip, ip, #8
    2300:	cmp	ip, r1
    2302:	beq.w	2416 <_malloc_r+0x4aa>
    2306:	ldr	r2, [r1, #4]
    2308:	bic.w	r2, r2, #3
    230c:	cmp	r3, r2
    230e:	bcs.n	2316 <_malloc_r+0x3aa>
    2310:	ldr	r1, [r1, #8]
    2312:	cmp	ip, r1
    2314:	bne.n	2306 <_malloc_r+0x39a>
    2316:	ldr.w	ip, [r1, #12]
    231a:	ldr	r2, [r7, #4]
    231c:	str.w	ip, [r4, #12]
    2320:	str	r1, [r4, #8]
    2322:	str.w	r4, [ip, #8]
    2326:	str	r4, [r1, #12]
    2328:	b.n	203c <_malloc_r+0xd0>
    232a:	adds	r3, r4, r5
    232c:	orr.w	r7, r2, #1
    2330:	orr.w	r5, r5, #1
    2334:	str	r5, [r4, #4]
    2336:	mov	r0, r6
    2338:	str	r3, [r1, #20]
    233a:	str	r3, [r1, #16]
    233c:	str.w	lr, [r3, #12]
    2340:	str.w	lr, [r3, #8]
    2344:	str	r7, [r3, #4]
    2346:	str	r2, [r3, r2]
    2348:	adds	r4, #8
    234a:	bl	2670 <__malloc_unlock>
    234e:	b.n	20fc <_malloc_r+0x190>
    2350:	ldr	r2, [r1, #4]
    2352:	b.n	203c <_malloc_r+0xd0>
    2354:	add.w	r8, r8, #1
    2358:	tst.w	r8, #3
    235c:	add.w	ip, ip, #8
    2360:	bne.w	2062 <_malloc_r+0xf6>
    2364:	b.n	23c8 <_malloc_r+0x45c>
    2366:	ldr	r4, [r3, #12]
    2368:	cmp	r3, r4
    236a:	it	eq
    236c:	addeq	r0, #2
    236e:	beq.w	1fdc <_malloc_r+0x70>
    2372:	b.n	20dc <_malloc_r+0x170>
    2374:	add	r3, r1
    2376:	mov	r4, r1
    2378:	ldr	r2, [r3, #4]
    237a:	ldr	r1, [r1, #12]
    237c:	ldr.w	r5, [r4, #8]!
    2380:	orr.w	r2, r2, #1
    2384:	str	r2, [r3, #4]
    2386:	mov	r0, r6
    2388:	str	r1, [r5, #12]
    238a:	str	r5, [r1, #8]
    238c:	bl	2670 <__malloc_unlock>
    2390:	b.n	20fc <_malloc_r+0x190>
    2392:	add.w	lr, r3, #92	; 0x5c
    2396:	add.w	r0, r3, #91	; 0x5b
    239a:	mov.w	r3, lr, lsl #1
    239e:	b.n	1fb0 <_malloc_r+0x44>
    23a0:	lsrs	r2, r3, #6
    23a2:	add.w	r1, r2, #57	; 0x39
    23a6:	lsls	r1, r1, #1
    23a8:	adds	r2, #56	; 0x38
    23aa:	b.n	22f0 <_malloc_r+0x384>
    23ac:	cmp	r4, r7
    23ae:	ldr	r3, [pc, #296]	; (24d8 <_malloc_r+0x56c>)
    23b0:	beq.w	21b4 <_malloc_r+0x248>
    23b4:	ldr	r4, [r3, #8]
    23b6:	ldr	r2, [r4, #4]
    23b8:	bic.w	r2, r2, #3
    23bc:	b.n	2274 <_malloc_r+0x308>
    23be:	ldr.w	r3, [r9], #-8
    23c2:	cmp	r9, r3
    23c4:	bne.w	24cc <_malloc_r+0x560>
    23c8:	tst.w	r0, #3
    23cc:	add.w	r0, r0, #4294967295
    23d0:	bne.n	23be <_malloc_r+0x452>
    23d2:	ldr	r3, [r7, #4]
    23d4:	bic.w	r3, r3, r4
    23d8:	str	r3, [r7, #4]
    23da:	lsls	r4, r4, #1
    23dc:	cmp	r4, r3
    23de:	bhi.w	215c <_malloc_r+0x1f0>
    23e2:	cmp	r4, #0
    23e4:	beq.w	215c <_malloc_r+0x1f0>
    23e8:	tst	r4, r3
    23ea:	mov	r0, r8
    23ec:	bne.w	205a <_malloc_r+0xee>
    23f0:	lsls	r4, r4, #1
    23f2:	tst	r4, r3
    23f4:	add.w	r0, r0, #4
    23f8:	beq.n	23f0 <_malloc_r+0x484>
    23fa:	b.n	205a <_malloc_r+0xee>
    23fc:	cmp.w	r3, #340	; 0x154
    2400:	bhi.n	2434 <_malloc_r+0x4c8>
    2402:	lsrs	r0, r5, #15
    2404:	add.w	lr, r0, #120	; 0x78
    2408:	mov.w	r3, lr, lsl #1
    240c:	adds	r0, #119	; 0x77
    240e:	b.n	1fb0 <_malloc_r+0x44>
    2410:	mov.w	r1, #4096	; 0x1000
    2414:	b.n	21ee <_malloc_r+0x282>
    2416:	movs	r1, #1
    2418:	ldr.w	r3, [r8, #4]
    241c:	asrs	r2, r2, #2
    241e:	lsl.w	r2, r1, r2
    2422:	orrs	r2, r3
    2424:	str.w	r2, [r8, #4]
    2428:	mov	r1, ip
    242a:	b.n	231c <_malloc_r+0x3b0>
    242c:	movs	r3, #1
    242e:	str.w	r3, [fp, #4]
    2432:	b.n	2280 <_malloc_r+0x314>
    2434:	movw	r2, #1364	; 0x554
    2438:	cmp	r3, r2
    243a:	bhi.n	247e <_malloc_r+0x512>
    243c:	lsrs	r0, r5, #18
    243e:	add.w	lr, r0, #125	; 0x7d
    2442:	mov.w	r3, lr, lsl #1
    2446:	adds	r0, #124	; 0x7c
    2448:	b.n	1fb0 <_malloc_r+0x44>
    244a:	adds	r2, #16
    244c:	b.n	2198 <_malloc_r+0x22c>
    244e:	cmp	r2, #84	; 0x54
    2450:	bhi.n	24a0 <_malloc_r+0x534>
    2452:	lsrs	r2, r3, #12
    2454:	add.w	r1, r2, #111	; 0x6f
    2458:	lsls	r1, r1, #1
    245a:	adds	r2, #110	; 0x6e
    245c:	b.n	22f0 <_malloc_r+0x384>
    245e:	ldr	r4, [r7, #8]
    2460:	ldr	r2, [r4, #4]
    2462:	bic.w	r2, r2, #3
    2466:	b.n	2274 <_malloc_r+0x308>
    2468:	ubfx	r0, sl, #0, #12
    246c:	cmp	r0, #0
    246e:	bne.w	21c2 <_malloc_r+0x256>
    2472:	add	r2, r8
    2474:	ldr	r3, [r7, #8]
    2476:	orr.w	r2, r2, #1
    247a:	str	r2, [r3, #4]
    247c:	b.n	2258 <_malloc_r+0x2ec>
    247e:	movs	r3, #254	; 0xfe
    2480:	mov.w	lr, #127	; 0x7f
    2484:	movs	r0, #126	; 0x7e
    2486:	b.n	1fb0 <_malloc_r+0x44>
    2488:	movs	r2, #1
    248a:	mov.w	r9, #0
    248e:	b.n	2214 <_malloc_r+0x2a8>
    2490:	add.w	r1, r4, #8
    2494:	mov	r0, r6
    2496:	bl	2ca4 <_free_r>
    249a:	ldr.w	r1, [r9]
    249e:	b.n	2258 <_malloc_r+0x2ec>
    24a0:	cmp.w	r2, #340	; 0x154
    24a4:	bhi.n	24b2 <_malloc_r+0x546>
    24a6:	lsrs	r2, r3, #15
    24a8:	add.w	r1, r2, #120	; 0x78
    24ac:	lsls	r1, r1, #1
    24ae:	adds	r2, #119	; 0x77
    24b0:	b.n	22f0 <_malloc_r+0x384>
    24b2:	movw	r1, #1364	; 0x554
    24b6:	cmp	r2, r1
    24b8:	bhi.n	24c6 <_malloc_r+0x55a>
    24ba:	lsrs	r2, r3, #18
    24bc:	add.w	r1, r2, #125	; 0x7d
    24c0:	lsls	r1, r1, #1
    24c2:	adds	r2, #124	; 0x7c
    24c4:	b.n	22f0 <_malloc_r+0x384>
    24c6:	movs	r1, #254	; 0xfe
    24c8:	movs	r2, #126	; 0x7e
    24ca:	b.n	22f0 <_malloc_r+0x384>
    24cc:	ldr	r3, [r7, #4]
    24ce:	b.n	23da <_malloc_r+0x46e>
    24d0:	lsrs	r0, r5, #3
    24d2:	adds	r3, r0, #1
    24d4:	lsls	r3, r3, #1
    24d6:	b.n	20ca <_malloc_r+0x15e>
    24d8:	.word	0x20000b88

000024dc <__ascii_mbtowc>:
    24dc:	sub	sp, #8
    24de:	cbz	r1, 24f4 <__ascii_mbtowc+0x18>
    24e0:	cbz	r2, 24fa <__ascii_mbtowc+0x1e>
    24e2:	cbz	r3, 2500 <__ascii_mbtowc+0x24>
    24e4:	ldrb	r3, [r2, #0]
    24e6:	str	r3, [r1, #0]
    24e8:	ldrb	r2, [r2, #0]
    24ea:	adds	r0, r2, #0
    24ec:	it	ne
    24ee:	movne	r0, #1
    24f0:	add	sp, #8
    24f2:	bx	lr
    24f4:	add	r1, sp, #4
    24f6:	cmp	r2, #0
    24f8:	bne.n	24e2 <__ascii_mbtowc+0x6>
    24fa:	mov	r0, r2
    24fc:	add	sp, #8
    24fe:	bx	lr
    2500:	mvn.w	r0, #1
    2504:	b.n	24f0 <__ascii_mbtowc+0x14>
    2506:	nop

00002508 <memmove>:
    2508:	cmp	r0, r1
    250a:	push	{r4, r5, r6, r7, lr}
    250c:	bls.n	252a <memmove+0x22>
    250e:	adds	r3, r1, r2
    2510:	cmp	r0, r3
    2512:	bcs.n	252a <memmove+0x22>
    2514:	adds	r1, r0, r2
    2516:	cmp	r2, #0
    2518:	beq.n	25be <memmove+0xb6>
    251a:	subs	r2, r3, r2
    251c:	ldrb.w	r4, [r3, #-1]!
    2520:	strb.w	r4, [r1, #-1]!
    2524:	cmp	r3, r2
    2526:	bne.n	251c <memmove+0x14>
    2528:	pop	{r4, r5, r6, r7, pc}
    252a:	cmp	r2, #15
    252c:	bls.n	25c0 <memmove+0xb8>
    252e:	orr.w	r3, r1, r0
    2532:	lsls	r3, r3, #30
    2534:	bne.n	25c4 <memmove+0xbc>
    2536:	add.w	r4, r0, #16
    253a:	add.w	r3, r1, #16
    253e:	mov	r5, r2
    2540:	ldr.w	r6, [r3, #-16]
    2544:	str.w	r6, [r4, #-16]
    2548:	ldr.w	r6, [r3, #-12]
    254c:	str.w	r6, [r4, #-12]
    2550:	ldr.w	r6, [r3, #-8]
    2554:	str.w	r6, [r4, #-8]
    2558:	subs	r5, #16
    255a:	ldr.w	r6, [r3, #-4]
    255e:	str.w	r6, [r4, #-4]
    2562:	cmp	r5, #15
    2564:	add.w	r3, r3, #16
    2568:	add.w	r4, r4, #16
    256c:	bhi.n	2540 <memmove+0x38>
    256e:	sub.w	r3, r2, #16
    2572:	bic.w	r3, r3, #15
    2576:	and.w	lr, r2, #15
    257a:	adds	r3, #16
    257c:	cmp.w	lr, #3
    2580:	add	r1, r3
    2582:	add	r3, r0
    2584:	bls.n	25ca <memmove+0xc2>
    2586:	subs	r6, r3, #4
    2588:	mov	r5, r1
    258a:	mov	r4, lr
    258c:	subs	r4, #4
    258e:	ldr.w	r7, [r5], #4
    2592:	str.w	r7, [r6, #4]!
    2596:	cmp	r4, #3
    2598:	bhi.n	258c <memmove+0x84>
    259a:	sub.w	r4, lr, #4
    259e:	bic.w	r4, r4, #3
    25a2:	adds	r4, #4
    25a4:	add	r3, r4
    25a6:	add	r1, r4
    25a8:	and.w	r2, r2, #3
    25ac:	cbz	r2, 25c8 <memmove+0xc0>
    25ae:	subs	r3, #1
    25b0:	add	r2, r1
    25b2:	ldrb.w	r4, [r1], #1
    25b6:	strb.w	r4, [r3, #1]!
    25ba:	cmp	r2, r1
    25bc:	bne.n	25b2 <memmove+0xaa>
    25be:	pop	{r4, r5, r6, r7, pc}
    25c0:	mov	r3, r0
    25c2:	b.n	25ac <memmove+0xa4>
    25c4:	mov	r3, r0
    25c6:	b.n	25ae <memmove+0xa6>
    25c8:	pop	{r4, r5, r6, r7, pc}
    25ca:	mov	r2, lr
    25cc:	b.n	25ac <memmove+0xa4>
    25ce:	nop

000025d0 <memset>:
    25d0:	push	{r4, r5, r6}
    25d2:	lsls	r4, r0, #30
    25d4:	beq.n	2664 <memset+0x94>
    25d6:	subs	r4, r2, #1
    25d8:	cmp	r2, #0
    25da:	beq.n	2660 <memset+0x90>
    25dc:	uxtb	r5, r1
    25de:	mov	r3, r0
    25e0:	b.n	25e8 <memset+0x18>
    25e2:	subs	r2, r4, #1
    25e4:	cbz	r4, 2660 <memset+0x90>
    25e6:	mov	r4, r2
    25e8:	strb.w	r5, [r3], #1
    25ec:	lsls	r2, r3, #30
    25ee:	bne.n	25e2 <memset+0x12>
    25f0:	cmp	r4, #3
    25f2:	bls.n	2652 <memset+0x82>
    25f4:	uxtb	r5, r1
    25f6:	orr.w	r5, r5, r5, lsl #8
    25fa:	cmp	r4, #15
    25fc:	orr.w	r5, r5, r5, lsl #16
    2600:	bls.n	2636 <memset+0x66>
    2602:	add.w	r2, r3, #16
    2606:	mov	r6, r4
    2608:	subs	r6, #16
    260a:	cmp	r6, #15
    260c:	str.w	r5, [r2, #-16]
    2610:	str.w	r5, [r2, #-12]
    2614:	str.w	r5, [r2, #-8]
    2618:	str.w	r5, [r2, #-4]
    261c:	add.w	r2, r2, #16
    2620:	bhi.n	2608 <memset+0x38>
    2622:	sub.w	r2, r4, #16
    2626:	bic.w	r2, r2, #15
    262a:	and.w	r4, r4, #15
    262e:	adds	r2, #16
    2630:	cmp	r4, #3
    2632:	add	r3, r2
    2634:	bls.n	2652 <memset+0x82>
    2636:	mov	r6, r3
    2638:	mov	r2, r4
    263a:	subs	r2, #4
    263c:	cmp	r2, #3
    263e:	str.w	r5, [r6], #4
    2642:	bhi.n	263a <memset+0x6a>
    2644:	subs	r2, r4, #4
    2646:	bic.w	r2, r2, #3
    264a:	adds	r2, #4
    264c:	add	r3, r2
    264e:	and.w	r4, r4, #3
    2652:	cbz	r4, 2660 <memset+0x90>
    2654:	uxtb	r1, r1
    2656:	add	r4, r3
    2658:	strb.w	r1, [r3], #1
    265c:	cmp	r3, r4
    265e:	bne.n	2658 <memset+0x88>
    2660:	pop	{r4, r5, r6}
    2662:	bx	lr
    2664:	mov	r4, r2
    2666:	mov	r3, r0
    2668:	b.n	25f0 <memset+0x20>
    266a:	nop

0000266c <__malloc_lock>:
    266c:	bx	lr
    266e:	nop

00002670 <__malloc_unlock>:
    2670:	bx	lr
    2672:	nop

00002674 <_realloc_r>:
    2674:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2678:	mov	r7, r2
    267a:	sub	sp, #12
    267c:	cmp	r1, #0
    267e:	beq.w	2804 <_realloc_r+0x190>
    2682:	mov	r6, r1
    2684:	mov	r9, r0
    2686:	add.w	r5, r7, #11
    268a:	bl	266c <__malloc_lock>
    268e:	ldr.w	lr, [r6, #-4]
    2692:	cmp	r5, #22
    2694:	bic.w	r4, lr, #3
    2698:	sub.w	r8, r6, #8
    269c:	bhi.n	2720 <_realloc_r+0xac>
    269e:	movs	r2, #16
    26a0:	mov	r5, r2
    26a2:	cmp	r7, r5
    26a4:	bhi.n	272a <_realloc_r+0xb6>
    26a6:	cmp	r4, r2
    26a8:	bge.n	2796 <_realloc_r+0x122>
    26aa:	ldr	r3, [pc, #804]	; (29d0 <_realloc_r+0x35c>)
    26ac:	ldr	r1, [r3, #8]
    26ae:	add.w	r0, r8, r4
    26b2:	cmp	r0, r1
    26b4:	ldr	r1, [r0, #4]
    26b6:	beq.w	286c <_realloc_r+0x1f8>
    26ba:	bic.w	r3, r1, #1
    26be:	add	r3, r0
    26c0:	ldr	r3, [r3, #4]
    26c2:	lsls	r3, r3, #31
    26c4:	bpl.n	27c2 <_realloc_r+0x14e>
    26c6:	tst.w	lr, #1
    26ca:	beq.n	2738 <_realloc_r+0xc4>
    26cc:	mov	r1, r7
    26ce:	mov	r0, r9
    26d0:	bl	1f6c <_malloc_r>
    26d4:	mov	r7, r0
    26d6:	cbz	r0, 2712 <_realloc_r+0x9e>
    26d8:	ldr.w	r3, [r6, #-4]
    26dc:	bic.w	r3, r3, #1
    26e0:	add	r3, r8
    26e2:	sub.w	r2, r0, #8
    26e6:	cmp	r2, r3
    26e8:	beq.w	2974 <_realloc_r+0x300>
    26ec:	subs	r2, r4, #4
    26ee:	cmp	r2, #36	; 0x24
    26f0:	bhi.w	2956 <_realloc_r+0x2e2>
    26f4:	cmp	r2, #19
    26f6:	bhi.w	2902 <_realloc_r+0x28e>
    26fa:	mov	r3, r0
    26fc:	mov	r2, r6
    26fe:	ldr	r1, [r2, #0]
    2700:	str	r1, [r3, #0]
    2702:	ldr	r1, [r2, #4]
    2704:	str	r1, [r3, #4]
    2706:	ldr	r2, [r2, #8]
    2708:	str	r2, [r3, #8]
    270a:	mov	r1, r6
    270c:	mov	r0, r9
    270e:	bl	2ca4 <_free_r>
    2712:	mov	r0, r9
    2714:	bl	2670 <__malloc_unlock>
    2718:	mov	r0, r7
    271a:	add	sp, #12
    271c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2720:	bic.w	r5, r5, #7
    2724:	cmp	r5, #0
    2726:	mov	r2, r5
    2728:	bge.n	26a2 <_realloc_r+0x2e>
    272a:	movs	r3, #12
    272c:	movs	r0, #0
    272e:	str.w	r3, [r9]
    2732:	add	sp, #12
    2734:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2738:	ldr.w	r3, [r6, #-8]
    273c:	rsb	sl, r3, r8
    2740:	ldr.w	r3, [sl, #4]
    2744:	bic.w	ip, r3, #3
    2748:	add.w	r3, r4, ip
    274c:	cmp	r3, r2
    274e:	blt.n	26cc <_realloc_r+0x58>
    2750:	mov	r7, sl
    2752:	ldr.w	r1, [sl, #12]
    2756:	ldr.w	r0, [r7, #8]!
    275a:	subs	r2, r4, #4
    275c:	cmp	r2, #36	; 0x24
    275e:	str	r1, [r0, #12]
    2760:	str	r0, [r1, #8]
    2762:	bhi.w	2994 <_realloc_r+0x320>
    2766:	cmp	r2, #19
    2768:	bls.w	2990 <_realloc_r+0x31c>
    276c:	ldr	r1, [r6, #0]
    276e:	str.w	r1, [sl, #8]
    2772:	ldr	r1, [r6, #4]
    2774:	str.w	r1, [sl, #12]
    2778:	cmp	r2, #27
    277a:	bhi.w	29d4 <_realloc_r+0x360>
    277e:	adds	r6, #8
    2780:	add.w	r2, sl, #16
    2784:	ldr	r1, [r6, #0]
    2786:	str	r1, [r2, #0]
    2788:	ldr	r1, [r6, #4]
    278a:	str	r1, [r2, #4]
    278c:	ldr	r1, [r6, #8]
    278e:	str	r1, [r2, #8]
    2790:	mov	r6, r7
    2792:	mov	r4, r3
    2794:	mov	r8, sl
    2796:	subs	r3, r4, r5
    2798:	cmp	r3, #15
    279a:	bhi.n	27d8 <_realloc_r+0x164>
    279c:	ldr.w	r3, [r8, #4]
    27a0:	and.w	r3, r3, #1
    27a4:	orrs	r3, r4
    27a6:	add	r4, r8
    27a8:	str.w	r3, [r8, #4]
    27ac:	ldr	r3, [r4, #4]
    27ae:	orr.w	r3, r3, #1
    27b2:	str	r3, [r4, #4]
    27b4:	mov	r0, r9
    27b6:	bl	2670 <__malloc_unlock>
    27ba:	mov	r0, r6
    27bc:	add	sp, #12
    27be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27c2:	bic.w	r1, r1, #3
    27c6:	add	r1, r4
    27c8:	cmp	r1, r2
    27ca:	blt.n	2810 <_realloc_r+0x19c>
    27cc:	ldr	r3, [r0, #12]
    27ce:	ldr	r2, [r0, #8]
    27d0:	mov	r4, r1
    27d2:	str	r3, [r2, #12]
    27d4:	str	r2, [r3, #8]
    27d6:	b.n	2796 <_realloc_r+0x122>
    27d8:	ldr.w	r2, [r8, #4]
    27dc:	add.w	r1, r8, r5
    27e0:	and.w	r2, r2, #1
    27e4:	orrs	r5, r2
    27e6:	orr.w	r2, r3, #1
    27ea:	add	r3, r1
    27ec:	str.w	r5, [r8, #4]
    27f0:	str	r2, [r1, #4]
    27f2:	ldr	r2, [r3, #4]
    27f4:	orr.w	r2, r2, #1
    27f8:	adds	r1, #8
    27fa:	str	r2, [r3, #4]
    27fc:	mov	r0, r9
    27fe:	bl	2ca4 <_free_r>
    2802:	b.n	27b4 <_realloc_r+0x140>
    2804:	mov	r1, r2
    2806:	add	sp, #12
    2808:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    280c:	b.w	1f6c <_malloc_r>
    2810:	tst.w	lr, #1
    2814:	bne.w	26cc <_realloc_r+0x58>
    2818:	ldr.w	r3, [r6, #-8]
    281c:	rsb	sl, r3, r8
    2820:	ldr.w	r3, [sl, #4]
    2824:	bic.w	ip, r3, #3
    2828:	add.w	lr, r1, ip
    282c:	cmp	lr, r2
    282e:	blt.n	2748 <_realloc_r+0xd4>
    2830:	ldr	r3, [r0, #12]
    2832:	ldr	r2, [r0, #8]
    2834:	mov	r7, sl
    2836:	str	r3, [r2, #12]
    2838:	str	r2, [r3, #8]
    283a:	ldr.w	r1, [r7, #8]!
    283e:	ldr.w	r3, [sl, #12]
    2842:	str	r3, [r1, #12]
    2844:	subs	r2, r4, #4
    2846:	cmp	r2, #36	; 0x24
    2848:	str	r1, [r3, #8]
    284a:	bhi.w	2980 <_realloc_r+0x30c>
    284e:	cmp	r2, #19
    2850:	bls.n	2918 <_realloc_r+0x2a4>
    2852:	ldr	r3, [r6, #0]
    2854:	str.w	r3, [sl, #8]
    2858:	ldr	r3, [r6, #4]
    285a:	str.w	r3, [sl, #12]
    285e:	cmp	r2, #27
    2860:	bhi.w	29a4 <_realloc_r+0x330>
    2864:	adds	r6, #8
    2866:	add.w	r3, sl, #16
    286a:	b.n	291a <_realloc_r+0x2a6>
    286c:	bic.w	fp, r1, #3
    2870:	add	fp, r4
    2872:	add.w	r0, r5, #16
    2876:	cmp	fp, r0
    2878:	bge.n	292e <_realloc_r+0x2ba>
    287a:	tst.w	lr, #1
    287e:	bne.w	26cc <_realloc_r+0x58>
    2882:	ldr.w	r1, [r6, #-8]
    2886:	rsb	sl, r1, r8
    288a:	ldr.w	r1, [sl, #4]
    288e:	bic.w	ip, r1, #3
    2892:	add	fp, ip
    2894:	cmp	r0, fp
    2896:	bgt.w	2748 <_realloc_r+0xd4>
    289a:	mov	r7, sl
    289c:	ldr.w	r1, [sl, #12]
    28a0:	ldr.w	r0, [r7, #8]!
    28a4:	subs	r2, r4, #4
    28a6:	cmp	r2, #36	; 0x24
    28a8:	str	r1, [r0, #12]
    28aa:	str	r0, [r1, #8]
    28ac:	bhi.w	2a18 <_realloc_r+0x3a4>
    28b0:	cmp	r2, #19
    28b2:	bls.w	2a00 <_realloc_r+0x38c>
    28b6:	ldr	r1, [r6, #0]
    28b8:	str.w	r1, [sl, #8]
    28bc:	ldr	r1, [r6, #4]
    28be:	str.w	r1, [sl, #12]
    28c2:	cmp	r2, #27
    28c4:	bhi.w	2a26 <_realloc_r+0x3b2>
    28c8:	adds	r6, #8
    28ca:	add.w	r2, sl, #16
    28ce:	ldr	r1, [r6, #0]
    28d0:	str	r1, [r2, #0]
    28d2:	ldr	r1, [r6, #4]
    28d4:	str	r1, [r2, #4]
    28d6:	ldr	r1, [r6, #8]
    28d8:	str	r1, [r2, #8]
    28da:	add.w	r1, sl, r5
    28de:	rsb	r2, r5, fp
    28e2:	orr.w	r2, r2, #1
    28e6:	str	r1, [r3, #8]
    28e8:	str	r2, [r1, #4]
    28ea:	ldr.w	r3, [sl, #4]
    28ee:	and.w	r3, r3, #1
    28f2:	orrs	r5, r3
    28f4:	mov	r0, r9
    28f6:	str.w	r5, [sl, #4]
    28fa:	bl	2670 <__malloc_unlock>
    28fe:	mov	r0, r7
    2900:	b.n	27bc <_realloc_r+0x148>
    2902:	ldr	r3, [r6, #0]
    2904:	str	r3, [r0, #0]
    2906:	ldr	r3, [r6, #4]
    2908:	str	r3, [r0, #4]
    290a:	cmp	r2, #27
    290c:	bhi.n	295e <_realloc_r+0x2ea>
    290e:	add.w	r3, r0, #8
    2912:	add.w	r2, r6, #8
    2916:	b.n	26fe <_realloc_r+0x8a>
    2918:	mov	r3, r7
    291a:	ldr	r2, [r6, #0]
    291c:	str	r2, [r3, #0]
    291e:	ldr	r2, [r6, #4]
    2920:	str	r2, [r3, #4]
    2922:	ldr	r2, [r6, #8]
    2924:	str	r2, [r3, #8]
    2926:	mov	r6, r7
    2928:	mov	r4, lr
    292a:	mov	r8, sl
    292c:	b.n	2796 <_realloc_r+0x122>
    292e:	add.w	r1, r8, r5
    2932:	rsb	fp, r5, fp
    2936:	orr.w	r2, fp, #1
    293a:	str	r1, [r3, #8]
    293c:	str	r2, [r1, #4]
    293e:	ldr.w	r3, [r6, #-4]
    2942:	and.w	r3, r3, #1
    2946:	orrs	r5, r3
    2948:	mov	r0, r9
    294a:	str.w	r5, [r6, #-4]
    294e:	bl	2670 <__malloc_unlock>
    2952:	mov	r0, r6
    2954:	b.n	27bc <_realloc_r+0x148>
    2956:	mov	r1, r6
    2958:	bl	2508 <memmove>
    295c:	b.n	270a <_realloc_r+0x96>
    295e:	ldr	r3, [r6, #8]
    2960:	str	r3, [r0, #8]
    2962:	ldr	r3, [r6, #12]
    2964:	str	r3, [r0, #12]
    2966:	cmp	r2, #36	; 0x24
    2968:	beq.n	29bc <_realloc_r+0x348>
    296a:	add.w	r3, r0, #16
    296e:	add.w	r2, r6, #16
    2972:	b.n	26fe <_realloc_r+0x8a>
    2974:	ldr.w	r3, [r0, #-4]
    2978:	bic.w	r3, r3, #3
    297c:	add	r4, r3
    297e:	b.n	2796 <_realloc_r+0x122>
    2980:	mov	r1, r6
    2982:	mov	r0, r7
    2984:	mov	r4, lr
    2986:	mov	r8, sl
    2988:	bl	2508 <memmove>
    298c:	mov	r6, r7
    298e:	b.n	2796 <_realloc_r+0x122>
    2990:	mov	r2, r7
    2992:	b.n	2784 <_realloc_r+0x110>
    2994:	mov	r1, r6
    2996:	mov	r0, r7
    2998:	mov	r4, r3
    299a:	mov	r8, sl
    299c:	bl	2508 <memmove>
    29a0:	mov	r6, r7
    29a2:	b.n	2796 <_realloc_r+0x122>
    29a4:	ldr	r3, [r6, #8]
    29a6:	str.w	r3, [sl, #16]
    29aa:	ldr	r3, [r6, #12]
    29ac:	str.w	r3, [sl, #20]
    29b0:	cmp	r2, #36	; 0x24
    29b2:	beq.n	29ec <_realloc_r+0x378>
    29b4:	adds	r6, #16
    29b6:	add.w	r3, sl, #24
    29ba:	b.n	291a <_realloc_r+0x2a6>
    29bc:	ldr	r3, [r6, #16]
    29be:	str	r3, [r0, #16]
    29c0:	ldr	r3, [r6, #20]
    29c2:	str	r3, [r0, #20]
    29c4:	add.w	r2, r6, #24
    29c8:	add.w	r3, r0, #24
    29cc:	b.n	26fe <_realloc_r+0x8a>
    29ce:	nop
    29d0:	.word	0x20000b88
    29d4:	ldr	r1, [r6, #8]
    29d6:	str.w	r1, [sl, #16]
    29da:	ldr	r1, [r6, #12]
    29dc:	str.w	r1, [sl, #20]
    29e0:	cmp	r2, #36	; 0x24
    29e2:	beq.n	2a04 <_realloc_r+0x390>
    29e4:	adds	r6, #16
    29e6:	add.w	r2, sl, #24
    29ea:	b.n	2784 <_realloc_r+0x110>
    29ec:	ldr	r3, [r6, #16]
    29ee:	str.w	r3, [sl, #24]
    29f2:	ldr	r3, [r6, #20]
    29f4:	str.w	r3, [sl, #28]
    29f8:	adds	r6, #24
    29fa:	add.w	r3, sl, #32
    29fe:	b.n	291a <_realloc_r+0x2a6>
    2a00:	mov	r2, r7
    2a02:	b.n	28ce <_realloc_r+0x25a>
    2a04:	ldr	r2, [r6, #16]
    2a06:	str.w	r2, [sl, #24]
    2a0a:	ldr	r2, [r6, #20]
    2a0c:	str.w	r2, [sl, #28]
    2a10:	adds	r6, #24
    2a12:	add.w	r2, sl, #32
    2a16:	b.n	2784 <_realloc_r+0x110>
    2a18:	mov	r1, r6
    2a1a:	mov	r0, r7
    2a1c:	str	r3, [sp, #4]
    2a1e:	bl	2508 <memmove>
    2a22:	ldr	r3, [sp, #4]
    2a24:	b.n	28da <_realloc_r+0x266>
    2a26:	ldr	r1, [r6, #8]
    2a28:	str.w	r1, [sl, #16]
    2a2c:	ldr	r1, [r6, #12]
    2a2e:	str.w	r1, [sl, #20]
    2a32:	cmp	r2, #36	; 0x24
    2a34:	beq.n	2a3e <_realloc_r+0x3ca>
    2a36:	adds	r6, #16
    2a38:	add.w	r2, sl, #24
    2a3c:	b.n	28ce <_realloc_r+0x25a>
    2a3e:	ldr	r2, [r6, #16]
    2a40:	str.w	r2, [sl, #24]
    2a44:	ldr	r2, [r6, #20]
    2a46:	str.w	r2, [sl, #28]
    2a4a:	adds	r6, #24
    2a4c:	add.w	r2, sl, #32
    2a50:	b.n	28ce <_realloc_r+0x25a>
    2a52:	nop

00002a54 <_sbrk_r>:
    2a54:	push	{r3, r4, r5, lr}
    2a56:	ldr	r4, [pc, #28]	; (2a74 <_sbrk_r+0x20>)
    2a58:	movs	r3, #0
    2a5a:	mov	r5, r0
    2a5c:	mov	r0, r1
    2a5e:	str	r3, [r4, #0]
    2a60:	bl	1bb0 <_sbrk>
    2a64:	adds	r3, r0, #1
    2a66:	beq.n	2a6a <_sbrk_r+0x16>
    2a68:	pop	{r3, r4, r5, pc}
    2a6a:	ldr	r3, [r4, #0]
    2a6c:	cmp	r3, #0
    2a6e:	beq.n	2a68 <_sbrk_r+0x14>
    2a70:	str	r3, [r5, #0]
    2a72:	pop	{r3, r4, r5, pc}
    2a74:	.word	0x200206c0
	...

00002a80 <strlen>:
    2a80:	pld	[r0]
    2a84:	strd	r4, r5, [sp, #-8]!
    2a88:	bic.w	r1, r0, #7
    2a8c:	mvn.w	ip, #0
    2a90:	ands.w	r4, r0, #7
    2a94:	pld	[r1, #32]
    2a98:	bne.w	2b2e <strlen+0xae>
    2a9c:	mov.w	r4, #0
    2aa0:	mvn.w	r0, #7
    2aa4:	ldrd	r2, r3, [r1]
    2aa8:	pld	[r1, #64]	; 0x40
    2aac:	add.w	r0, r0, #8
    2ab0:	uadd8	r2, r2, ip
    2ab4:	sel	r2, r4, ip
    2ab8:	uadd8	r3, r3, ip
    2abc:	sel	r3, r2, ip
    2ac0:	cbnz	r3, 2b16 <strlen+0x96>
    2ac2:	ldrd	r2, r3, [r1, #8]
    2ac6:	uadd8	r2, r2, ip
    2aca:	add.w	r0, r0, #8
    2ace:	sel	r2, r4, ip
    2ad2:	uadd8	r3, r3, ip
    2ad6:	sel	r3, r2, ip
    2ada:	cbnz	r3, 2b16 <strlen+0x96>
    2adc:	ldrd	r2, r3, [r1, #16]
    2ae0:	uadd8	r2, r2, ip
    2ae4:	add.w	r0, r0, #8
    2ae8:	sel	r2, r4, ip
    2aec:	uadd8	r3, r3, ip
    2af0:	sel	r3, r2, ip
    2af4:	cbnz	r3, 2b16 <strlen+0x96>
    2af6:	ldrd	r2, r3, [r1, #24]
    2afa:	add.w	r1, r1, #32
    2afe:	uadd8	r2, r2, ip
    2b02:	add.w	r0, r0, #8
    2b06:	sel	r2, r4, ip
    2b0a:	uadd8	r3, r3, ip
    2b0e:	sel	r3, r2, ip
    2b12:	cmp	r3, #0
    2b14:	beq.n	2aa4 <strlen+0x24>
    2b16:	cmp	r2, #0
    2b18:	itt	eq
    2b1a:	addeq	r0, #4
    2b1c:	moveq	r2, r3
    2b1e:	rev	r2, r2
    2b20:	clz	r2, r2
    2b24:	ldrd	r4, r5, [sp], #8
    2b28:	add.w	r0, r0, r2, lsr #3
    2b2c:	bx	lr
    2b2e:	ldrd	r2, r3, [r1]
    2b32:	and.w	r5, r4, #3
    2b36:	rsb	r0, r4, #0
    2b3a:	mov.w	r5, r5, lsl #3
    2b3e:	tst.w	r4, #4
    2b42:	pld	[r1, #64]	; 0x40
    2b46:	lsl.w	r5, ip, r5
    2b4a:	orn	r2, r2, r5
    2b4e:	itt	ne
    2b50:	ornne	r3, r3, r5
    2b54:	movne	r2, ip
    2b56:	mov.w	r4, #0
    2b5a:	b.n	2ab0 <strlen+0x30>

00002b5c <_vdprintf_r>:
    2b5c:	push	{r4, r5, r6, r7, lr}
    2b5e:	sub.w	sp, sp, #532	; 0x214
    2b62:	add	r5, sp, #16
    2b64:	str	r3, [sp, #0]
    2b66:	mov	r7, r1
    2b68:	mov	r3, r2
    2b6a:	mov.w	r4, #512	; 0x200
    2b6e:	add	r2, sp, #12
    2b70:	mov	r1, r5
    2b72:	str	r4, [sp, #12]
    2b74:	mov	r6, r0
    2b76:	bl	3554 <_vasnprintf_r>
    2b7a:	cbz	r0, 2ba0 <_vdprintf_r+0x44>
    2b7c:	mov	r4, r0
    2b7e:	mov	r2, r0
    2b80:	mov	r1, r7
    2b82:	ldr	r3, [sp, #12]
    2b84:	mov	r0, r6
    2b86:	bl	2bdc <_write_r>
    2b8a:	cmp	r4, r5
    2b8c:	str	r0, [sp, #12]
    2b8e:	beq.n	2b9a <_vdprintf_r+0x3e>
    2b90:	mov	r0, r6
    2b92:	mov	r1, r4
    2b94:	bl	2ca4 <_free_r>
    2b98:	ldr	r0, [sp, #12]
    2b9a:	add.w	sp, sp, #532	; 0x214
    2b9e:	pop	{r4, r5, r6, r7, pc}
    2ba0:	mov.w	r0, #4294967295
    2ba4:	b.n	2b9a <_vdprintf_r+0x3e>
    2ba6:	nop

00002ba8 <vdprintf>:
    2ba8:	push	{r4}
    2baa:	ldr	r4, [pc, #16]	; (2bbc <vdprintf+0x14>)
    2bac:	mov	r3, r2
    2bae:	mov	r2, r1
    2bb0:	mov	r1, r0
    2bb2:	ldr	r0, [r4, #0]
    2bb4:	ldr.w	r4, [sp], #4
    2bb8:	b.w	2b5c <_vdprintf_r>
    2bbc:	.word	0x20000a18

00002bc0 <__ascii_wctomb>:
    2bc0:	cbz	r1, 2bcc <__ascii_wctomb+0xc>
    2bc2:	cmp	r2, #255	; 0xff
    2bc4:	bhi.n	2bd0 <__ascii_wctomb+0x10>
    2bc6:	strb	r2, [r1, #0]
    2bc8:	movs	r0, #1
    2bca:	bx	lr
    2bcc:	mov	r0, r1
    2bce:	bx	lr
    2bd0:	movs	r3, #138	; 0x8a
    2bd2:	str	r3, [r0, #0]
    2bd4:	mov.w	r0, #4294967295
    2bd8:	bx	lr
    2bda:	nop

00002bdc <_write_r>:
    2bdc:	push	{r4, r5, r6, lr}
    2bde:	mov	r5, r1
    2be0:	ldr	r4, [pc, #32]	; (2c04 <_write_r+0x28>)
    2be2:	mov	r1, r2
    2be4:	mov	r6, r0
    2be6:	mov	r2, r3
    2be8:	mov	r0, r5
    2bea:	movs	r3, #0
    2bec:	str	r3, [r4, #0]
    2bee:	bl	19a0 <_write>
    2bf2:	adds	r3, r0, #1
    2bf4:	beq.n	2bf8 <_write_r+0x1c>
    2bf6:	pop	{r4, r5, r6, pc}
    2bf8:	ldr	r3, [r4, #0]
    2bfa:	cmp	r3, #0
    2bfc:	beq.n	2bf6 <_write_r+0x1a>
    2bfe:	str	r3, [r6, #0]
    2c00:	pop	{r4, r5, r6, pc}
    2c02:	nop
    2c04:	.word	0x200206c0

00002c08 <_malloc_trim_r>:
    2c08:	push	{r3, r4, r5, r6, r7, lr}
    2c0a:	ldr	r7, [pc, #140]	; (2c98 <_malloc_trim_r+0x90>)
    2c0c:	mov	r4, r1
    2c0e:	mov	r6, r0
    2c10:	bl	266c <__malloc_lock>
    2c14:	ldr	r3, [r7, #8]
    2c16:	ldr	r5, [r3, #4]
    2c18:	bic.w	r5, r5, #3
    2c1c:	subs	r1, r5, r4
    2c1e:	addw	r1, r1, #4079	; 0xfef
    2c22:	bic.w	r1, r1, #4080	; 0xff0
    2c26:	bic.w	r1, r1, #15
    2c2a:	sub.w	r4, r1, #4096	; 0x1000
    2c2e:	cmp.w	r4, #4096	; 0x1000
    2c32:	blt.n	2c44 <_malloc_trim_r+0x3c>
    2c34:	movs	r1, #0
    2c36:	mov	r0, r6
    2c38:	bl	2a54 <_sbrk_r>
    2c3c:	ldr	r3, [r7, #8]
    2c3e:	add	r3, r5
    2c40:	cmp	r0, r3
    2c42:	beq.n	2c4e <_malloc_trim_r+0x46>
    2c44:	mov	r0, r6
    2c46:	bl	2670 <__malloc_unlock>
    2c4a:	movs	r0, #0
    2c4c:	pop	{r3, r4, r5, r6, r7, pc}
    2c4e:	negs	r1, r4
    2c50:	mov	r0, r6
    2c52:	bl	2a54 <_sbrk_r>
    2c56:	adds	r0, #1
    2c58:	beq.n	2c76 <_malloc_trim_r+0x6e>
    2c5a:	ldr	r3, [pc, #64]	; (2c9c <_malloc_trim_r+0x94>)
    2c5c:	ldr	r2, [r7, #8]
    2c5e:	ldr	r1, [r3, #0]
    2c60:	subs	r5, r5, r4
    2c62:	orr.w	r5, r5, #1
    2c66:	mov	r0, r6
    2c68:	subs	r1, r1, r4
    2c6a:	str	r5, [r2, #4]
    2c6c:	str	r1, [r3, #0]
    2c6e:	bl	2670 <__malloc_unlock>
    2c72:	movs	r0, #1
    2c74:	pop	{r3, r4, r5, r6, r7, pc}
    2c76:	movs	r1, #0
    2c78:	mov	r0, r6
    2c7a:	bl	2a54 <_sbrk_r>
    2c7e:	ldr	r2, [r7, #8]
    2c80:	subs	r3, r0, r2
    2c82:	cmp	r3, #15
    2c84:	ble.n	2c44 <_malloc_trim_r+0x3c>
    2c86:	ldr	r4, [pc, #24]	; (2ca0 <_malloc_trim_r+0x98>)
    2c88:	ldr	r1, [pc, #16]	; (2c9c <_malloc_trim_r+0x94>)
    2c8a:	ldr	r4, [r4, #0]
    2c8c:	orr.w	r3, r3, #1
    2c90:	subs	r0, r0, r4
    2c92:	str	r3, [r2, #4]
    2c94:	str	r0, [r1, #0]
    2c96:	b.n	2c44 <_malloc_trim_r+0x3c>
    2c98:	.word	0x20000b88
    2c9c:	.word	0x2001e708
    2ca0:	.word	0x20000f94

00002ca4 <_free_r>:
    2ca4:	cmp	r1, #0
    2ca6:	beq.n	2d34 <_free_r+0x90>
    2ca8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cac:	mov	r5, r1
    2cae:	mov	r8, r0
    2cb0:	bl	266c <__malloc_lock>
    2cb4:	ldr.w	r7, [r5, #-4]
    2cb8:	ldr	r1, [pc, #424]	; (2e64 <_free_r+0x1c0>)
    2cba:	bic.w	r3, r7, #1
    2cbe:	sub.w	r4, r5, #8
    2cc2:	adds	r2, r4, r3
    2cc4:	ldr	r6, [r1, #8]
    2cc6:	ldr	r0, [r2, #4]
    2cc8:	cmp	r2, r6
    2cca:	bic.w	r0, r0, #3
    2cce:	beq.n	2d96 <_free_r+0xf2>
    2cd0:	lsls	r6, r7, #31
    2cd2:	str	r0, [r2, #4]
    2cd4:	bmi.n	2cee <_free_r+0x4a>
    2cd6:	ldr.w	r7, [r5, #-8]
    2cda:	subs	r4, r4, r7
    2cdc:	add.w	lr, r1, #8
    2ce0:	ldr	r5, [r4, #8]
    2ce2:	cmp	r5, lr
    2ce4:	add	r3, r7
    2ce6:	beq.n	2dc8 <_free_r+0x124>
    2ce8:	ldr	r7, [r4, #12]
    2cea:	str	r7, [r5, #12]
    2cec:	str	r5, [r7, #8]
    2cee:	adds	r5, r2, r0
    2cf0:	ldr	r5, [r5, #4]
    2cf2:	lsls	r5, r5, #31
    2cf4:	bpl.n	2d7c <_free_r+0xd8>
    2cf6:	orr.w	r2, r3, #1
    2cfa:	str	r2, [r4, #4]
    2cfc:	str	r3, [r4, r3]
    2cfe:	cmp.w	r3, #512	; 0x200
    2d02:	bcs.n	2d36 <_free_r+0x92>
    2d04:	lsrs	r3, r3, #3
    2d06:	adds	r2, r3, #1
    2d08:	ldr	r5, [r1, #4]
    2d0a:	ldr.w	r7, [r1, r2, lsl #3]
    2d0e:	str	r7, [r4, #8]
    2d10:	movs	r0, #1
    2d12:	asrs	r3, r3, #2
    2d14:	lsl.w	r3, r0, r3
    2d18:	add.w	r0, r1, r2, lsl #3
    2d1c:	orrs	r5, r3
    2d1e:	subs	r0, #8
    2d20:	str	r0, [r4, #12]
    2d22:	str	r5, [r1, #4]
    2d24:	str.w	r4, [r1, r2, lsl #3]
    2d28:	str	r4, [r7, #12]
    2d2a:	mov	r0, r8
    2d2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2d30:	b.w	2670 <__malloc_unlock>
    2d34:	bx	lr
    2d36:	lsrs	r2, r3, #9
    2d38:	cmp	r2, #4
    2d3a:	bhi.n	2de4 <_free_r+0x140>
    2d3c:	lsrs	r2, r3, #6
    2d3e:	add.w	r7, r2, #57	; 0x39
    2d42:	lsls	r7, r7, #1
    2d44:	add.w	r5, r2, #56	; 0x38
    2d48:	add.w	r0, r1, r7, lsl #2
    2d4c:	ldr.w	r2, [r1, r7, lsl #2]
    2d50:	ldr	r1, [pc, #272]	; (2e64 <_free_r+0x1c0>)
    2d52:	subs	r0, #8
    2d54:	cmp	r0, r2
    2d56:	beq.n	2df4 <_free_r+0x150>
    2d58:	ldr	r1, [r2, #4]
    2d5a:	bic.w	r1, r1, #3
    2d5e:	cmp	r3, r1
    2d60:	bcs.n	2d68 <_free_r+0xc4>
    2d62:	ldr	r2, [r2, #8]
    2d64:	cmp	r0, r2
    2d66:	bne.n	2d58 <_free_r+0xb4>
    2d68:	ldr	r0, [r2, #12]
    2d6a:	str	r0, [r4, #12]
    2d6c:	str	r2, [r4, #8]
    2d6e:	str	r4, [r0, #8]
    2d70:	str	r4, [r2, #12]
    2d72:	mov	r0, r8
    2d74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2d78:	b.w	2670 <__malloc_unlock>
    2d7c:	ldr	r5, [r2, #8]
    2d7e:	ldr	r7, [pc, #232]	; (2e68 <_free_r+0x1c4>)
    2d80:	cmp	r5, r7
    2d82:	add	r3, r0
    2d84:	beq.n	2e06 <_free_r+0x162>
    2d86:	ldr	r0, [r2, #12]
    2d88:	str	r0, [r5, #12]
    2d8a:	orr.w	r2, r3, #1
    2d8e:	str	r5, [r0, #8]
    2d90:	str	r2, [r4, #4]
    2d92:	str	r3, [r4, r3]
    2d94:	b.n	2cfe <_free_r+0x5a>
    2d96:	lsls	r7, r7, #31
    2d98:	add	r3, r0
    2d9a:	bmi.n	2dac <_free_r+0x108>
    2d9c:	ldr.w	r2, [r5, #-8]
    2da0:	subs	r4, r4, r2
    2da2:	add	r3, r2
    2da4:	ldr	r0, [r4, #8]
    2da6:	ldr	r2, [r4, #12]
    2da8:	str	r2, [r0, #12]
    2daa:	str	r0, [r2, #8]
    2dac:	ldr	r2, [pc, #188]	; (2e6c <_free_r+0x1c8>)
    2dae:	ldr	r2, [r2, #0]
    2db0:	orr.w	r0, r3, #1
    2db4:	cmp	r3, r2
    2db6:	str	r0, [r4, #4]
    2db8:	str	r4, [r1, #8]
    2dba:	bcc.n	2d2a <_free_r+0x86>
    2dbc:	ldr	r3, [pc, #176]	; (2e70 <_free_r+0x1cc>)
    2dbe:	mov	r0, r8
    2dc0:	ldr	r1, [r3, #0]
    2dc2:	bl	2c08 <_malloc_trim_r>
    2dc6:	b.n	2d2a <_free_r+0x86>
    2dc8:	adds	r1, r2, r0
    2dca:	ldr	r1, [r1, #4]
    2dcc:	lsls	r1, r1, #31
    2dce:	bmi.n	2e5a <_free_r+0x1b6>
    2dd0:	ldr	r1, [r2, #8]
    2dd2:	ldr	r2, [r2, #12]
    2dd4:	str	r2, [r1, #12]
    2dd6:	add	r3, r0
    2dd8:	orr.w	r0, r3, #1
    2ddc:	str	r1, [r2, #8]
    2dde:	str	r0, [r4, #4]
    2de0:	str	r3, [r4, r3]
    2de2:	b.n	2d2a <_free_r+0x86>
    2de4:	cmp	r2, #20
    2de6:	bhi.n	2e18 <_free_r+0x174>
    2de8:	add.w	r7, r2, #92	; 0x5c
    2dec:	lsls	r7, r7, #1
    2dee:	add.w	r5, r2, #91	; 0x5b
    2df2:	b.n	2d48 <_free_r+0xa4>
    2df4:	asrs	r2, r5, #2
    2df6:	ldr	r3, [r1, #4]
    2df8:	movs	r5, #1
    2dfa:	lsl.w	r2, r5, r2
    2dfe:	orrs	r3, r2
    2e00:	str	r3, [r1, #4]
    2e02:	mov	r2, r0
    2e04:	b.n	2d6a <_free_r+0xc6>
    2e06:	orr.w	r2, r3, #1
    2e0a:	str	r4, [r1, #20]
    2e0c:	str	r4, [r1, #16]
    2e0e:	str	r5, [r4, #12]
    2e10:	str	r5, [r4, #8]
    2e12:	str	r2, [r4, #4]
    2e14:	str	r3, [r4, r3]
    2e16:	b.n	2d2a <_free_r+0x86>
    2e18:	cmp	r2, #84	; 0x54
    2e1a:	bhi.n	2e2a <_free_r+0x186>
    2e1c:	lsrs	r2, r3, #12
    2e1e:	add.w	r7, r2, #111	; 0x6f
    2e22:	lsls	r7, r7, #1
    2e24:	add.w	r5, r2, #110	; 0x6e
    2e28:	b.n	2d48 <_free_r+0xa4>
    2e2a:	cmp.w	r2, #340	; 0x154
    2e2e:	bhi.n	2e3e <_free_r+0x19a>
    2e30:	lsrs	r2, r3, #15
    2e32:	add.w	r7, r2, #120	; 0x78
    2e36:	lsls	r7, r7, #1
    2e38:	add.w	r5, r2, #119	; 0x77
    2e3c:	b.n	2d48 <_free_r+0xa4>
    2e3e:	movw	r0, #1364	; 0x554
    2e42:	cmp	r2, r0
    2e44:	bhi.n	2e54 <_free_r+0x1b0>
    2e46:	lsrs	r2, r3, #18
    2e48:	add.w	r7, r2, #125	; 0x7d
    2e4c:	lsls	r7, r7, #1
    2e4e:	add.w	r5, r2, #124	; 0x7c
    2e52:	b.n	2d48 <_free_r+0xa4>
    2e54:	movs	r7, #254	; 0xfe
    2e56:	movs	r5, #126	; 0x7e
    2e58:	b.n	2d48 <_free_r+0xa4>
    2e5a:	orr.w	r2, r3, #1
    2e5e:	str	r2, [r4, #4]
    2e60:	str	r3, [r4, r3]
    2e62:	b.n	2d2a <_free_r+0x86>
    2e64:	.word	0x20000b88
    2e68:	.word	0x20000b90
    2e6c:	.word	0x20000f90
    2e70:	.word	0x2001e704

00002e74 <_localeconv_r>:
    2e74:	ldr	r2, [pc, #16]	; (2e88 <_localeconv_r+0x14>)
    2e76:	ldr	r3, [pc, #20]	; (2e8c <_localeconv_r+0x18>)
    2e78:	ldr	r2, [r2, #0]
    2e7a:	ldr	r0, [r2, #52]	; 0x34
    2e7c:	cmp	r0, #0
    2e7e:	it	eq
    2e80:	moveq	r0, r3
    2e82:	adds	r0, #240	; 0xf0
    2e84:	bx	lr
    2e86:	nop
    2e88:	.word	0x20000a18
    2e8c:	.word	0x20000a1c

00002e90 <memchr>:
    2e90:	and.w	r1, r1, #255	; 0xff
    2e94:	cmp	r2, #16
    2e96:	blt.n	2ef0 <memchr+0x60>
    2e98:	tst.w	r0, #7
    2e9c:	beq.n	2eb0 <memchr+0x20>
    2e9e:	ldrb.w	r3, [r0], #1
    2ea2:	subs	r2, #1
    2ea4:	cmp	r3, r1
    2ea6:	beq.n	2f04 <memchr+0x74>
    2ea8:	tst.w	r0, #7
    2eac:	cbz	r2, 2f00 <memchr+0x70>
    2eae:	bne.n	2e9e <memchr+0xe>
    2eb0:	push	{r4, r5, r6, r7}
    2eb2:	orr.w	r1, r1, r1, lsl #8
    2eb6:	orr.w	r1, r1, r1, lsl #16
    2eba:	bic.w	r4, r2, #7
    2ebe:	mvns.w	r7, #0
    2ec2:	movs	r3, #0
    2ec4:	ldrd	r5, r6, [r0], #8
    2ec8:	subs	r4, #8
    2eca:	eor.w	r5, r5, r1
    2ece:	eor.w	r6, r6, r1
    2ed2:	uadd8	r5, r5, r7
    2ed6:	sel	r5, r3, r7
    2eda:	uadd8	r6, r6, r7
    2ede:	sel	r6, r5, r7
    2ee2:	cbnz	r6, 2f08 <memchr+0x78>
    2ee4:	bne.n	2ec4 <memchr+0x34>
    2ee6:	pop	{r4, r5, r6, r7}
    2ee8:	and.w	r1, r1, #255	; 0xff
    2eec:	and.w	r2, r2, #7
    2ef0:	cbz	r2, 2f00 <memchr+0x70>
    2ef2:	ldrb.w	r3, [r0], #1
    2ef6:	subs	r2, #1
    2ef8:	eor.w	r3, r3, r1
    2efc:	cbz	r3, 2f04 <memchr+0x74>
    2efe:	bne.n	2ef2 <memchr+0x62>
    2f00:	movs	r0, #0
    2f02:	bx	lr
    2f04:	subs	r0, #1
    2f06:	bx	lr
    2f08:	cmp	r5, #0
    2f0a:	itte	eq
    2f0c:	moveq	r5, r6
    2f0e:	subeq	r0, #3
    2f10:	subne	r0, #7
    2f12:	tst.w	r5, #1
    2f16:	bne.n	2f28 <memchr+0x98>
    2f18:	adds	r0, #1
    2f1a:	tst.w	r5, #256	; 0x100
    2f1e:	ittt	eq
    2f20:	addeq	r0, #1
    2f22:	tsteq.w	r5, #98304	; 0x18000
    2f26:	addeq	r0, #1
    2f28:	pop	{r4, r5, r6, r7}
    2f2a:	subs	r0, #1
    2f2c:	bx	lr
    2f2e:	nop

00002f30 <_Balloc>:
    2f30:	ldr	r3, [r0, #76]	; 0x4c
    2f32:	push	{r4, r5, r6, lr}
    2f34:	mov	r5, r0
    2f36:	mov	r4, r1
    2f38:	cbz	r3, 2f4e <_Balloc+0x1e>
    2f3a:	ldr.w	r0, [r3, r4, lsl #2]
    2f3e:	cbz	r0, 2f62 <_Balloc+0x32>
    2f40:	ldr	r2, [r0, #0]
    2f42:	str.w	r2, [r3, r4, lsl #2]
    2f46:	movs	r3, #0
    2f48:	str	r3, [r0, #16]
    2f4a:	str	r3, [r0, #12]
    2f4c:	pop	{r4, r5, r6, pc}
    2f4e:	movs	r2, #33	; 0x21
    2f50:	movs	r1, #4
    2f52:	bl	35b4 <_calloc_r>
    2f56:	str	r0, [r5, #76]	; 0x4c
    2f58:	mov	r3, r0
    2f5a:	cmp	r0, #0
    2f5c:	bne.n	2f3a <_Balloc+0xa>
    2f5e:	movs	r0, #0
    2f60:	pop	{r4, r5, r6, pc}
    2f62:	movs	r1, #1
    2f64:	lsl.w	r6, r1, r4
    2f68:	adds	r2, r6, #5
    2f6a:	mov	r0, r5
    2f6c:	lsls	r2, r2, #2
    2f6e:	bl	35b4 <_calloc_r>
    2f72:	cmp	r0, #0
    2f74:	beq.n	2f5e <_Balloc+0x2e>
    2f76:	str	r4, [r0, #4]
    2f78:	str	r6, [r0, #8]
    2f7a:	b.n	2f46 <_Balloc+0x16>

00002f7c <_Bfree>:
    2f7c:	cbz	r1, 2f8c <_Bfree+0x10>
    2f7e:	ldr	r3, [r0, #76]	; 0x4c
    2f80:	ldr	r2, [r1, #4]
    2f82:	ldr.w	r0, [r3, r2, lsl #2]
    2f86:	str	r0, [r1, #0]
    2f88:	str.w	r1, [r3, r2, lsl #2]
    2f8c:	bx	lr
    2f8e:	nop

00002f90 <__multadd>:
    2f90:	push	{r4, r5, r6, r7, lr}
    2f92:	ldr	r4, [r1, #16]
    2f94:	sub	sp, #12
    2f96:	mov	r5, r1
    2f98:	mov	r6, r0
    2f9a:	add.w	lr, r1, #20
    2f9e:	movs	r7, #0
    2fa0:	ldr.w	r0, [lr]
    2fa4:	uxth	r1, r0
    2fa6:	mla	r1, r2, r1, r3
    2faa:	lsrs	r3, r1, #16
    2fac:	lsrs	r0, r0, #16
    2fae:	mla	r3, r2, r0, r3
    2fb2:	uxth	r1, r1
    2fb4:	adds	r7, #1
    2fb6:	add.w	r1, r1, r3, lsl #16
    2fba:	cmp	r4, r7
    2fbc:	str.w	r1, [lr], #4
    2fc0:	mov.w	r3, r3, lsr #16
    2fc4:	bgt.n	2fa0 <__multadd+0x10>
    2fc6:	cbz	r3, 2fd8 <__multadd+0x48>
    2fc8:	ldr	r2, [r5, #8]
    2fca:	cmp	r4, r2
    2fcc:	bge.n	2fde <__multadd+0x4e>
    2fce:	add.w	r2, r5, r4, lsl #2
    2fd2:	adds	r4, #1
    2fd4:	str	r3, [r2, #20]
    2fd6:	str	r4, [r5, #16]
    2fd8:	mov	r0, r5
    2fda:	add	sp, #12
    2fdc:	pop	{r4, r5, r6, r7, pc}
    2fde:	ldr	r1, [r5, #4]
    2fe0:	str	r3, [sp, #4]
    2fe2:	adds	r1, #1
    2fe4:	mov	r0, r6
    2fe6:	bl	2f30 <_Balloc>
    2fea:	ldr	r2, [r5, #16]
    2fec:	adds	r2, #2
    2fee:	add.w	r1, r5, #12
    2ff2:	mov	r7, r0
    2ff4:	lsls	r2, r2, #2
    2ff6:	adds	r0, #12
    2ff8:	bl	19d0 <memcpy>
    2ffc:	ldr	r2, [r6, #76]	; 0x4c
    2ffe:	ldr	r1, [r5, #4]
    3000:	ldr	r3, [sp, #4]
    3002:	ldr.w	r0, [r2, r1, lsl #2]
    3006:	str	r0, [r5, #0]
    3008:	str.w	r5, [r2, r1, lsl #2]
    300c:	mov	r5, r7
    300e:	b.n	2fce <__multadd+0x3e>

00003010 <__hi0bits>:
    3010:	lsrs	r3, r0, #16
    3012:	lsls	r3, r3, #16
    3014:	cbnz	r3, 3044 <__hi0bits+0x34>
    3016:	lsls	r0, r0, #16
    3018:	movs	r3, #16
    301a:	tst.w	r0, #4278190080	; 0xff000000
    301e:	itt	eq
    3020:	lsleq	r0, r0, #8
    3022:	addeq	r3, #8
    3024:	tst.w	r0, #4026531840	; 0xf0000000
    3028:	itt	eq
    302a:	lsleq	r0, r0, #4
    302c:	addeq	r3, #4
    302e:	tst.w	r0, #3221225472	; 0xc0000000
    3032:	itt	eq
    3034:	lsleq	r0, r0, #2
    3036:	addeq	r3, #2
    3038:	cmp	r0, #0
    303a:	blt.n	304c <__hi0bits+0x3c>
    303c:	lsls	r2, r0, #1
    303e:	bmi.n	3048 <__hi0bits+0x38>
    3040:	movs	r0, #32
    3042:	bx	lr
    3044:	movs	r3, #0
    3046:	b.n	301a <__hi0bits+0xa>
    3048:	adds	r0, r3, #1
    304a:	bx	lr
    304c:	mov	r0, r3
    304e:	bx	lr

00003050 <__lo0bits>:
    3050:	ldr	r3, [r0, #0]
    3052:	ands.w	r2, r3, #7
    3056:	beq.n	3068 <__lo0bits+0x18>
    3058:	lsls	r1, r3, #31
    305a:	bmi.n	309e <__lo0bits+0x4e>
    305c:	lsls	r2, r3, #30
    305e:	bmi.n	30a2 <__lo0bits+0x52>
    3060:	lsrs	r3, r3, #2
    3062:	str	r3, [r0, #0]
    3064:	movs	r0, #2
    3066:	bx	lr
    3068:	uxth	r1, r3
    306a:	cbnz	r1, 3070 <__lo0bits+0x20>
    306c:	lsrs	r3, r3, #16
    306e:	movs	r2, #16
    3070:	tst.w	r3, #255	; 0xff
    3074:	itt	eq
    3076:	lsreq	r3, r3, #8
    3078:	addeq	r2, #8
    307a:	lsls	r1, r3, #28
    307c:	itt	eq
    307e:	lsreq	r3, r3, #4
    3080:	addeq	r2, #4
    3082:	lsls	r1, r3, #30
    3084:	itt	eq
    3086:	lsreq	r3, r3, #2
    3088:	addeq	r2, #2
    308a:	lsls	r1, r3, #31
    308c:	bmi.n	3098 <__lo0bits+0x48>
    308e:	lsrs	r3, r3, #1
    3090:	bne.n	3096 <__lo0bits+0x46>
    3092:	movs	r0, #32
    3094:	bx	lr
    3096:	adds	r2, #1
    3098:	str	r3, [r0, #0]
    309a:	mov	r0, r2
    309c:	bx	lr
    309e:	movs	r0, #0
    30a0:	bx	lr
    30a2:	lsrs	r3, r3, #1
    30a4:	str	r3, [r0, #0]
    30a6:	movs	r0, #1
    30a8:	bx	lr
    30aa:	nop

000030ac <__i2b>:
    30ac:	push	{r4, lr}
    30ae:	mov	r4, r1
    30b0:	movs	r1, #1
    30b2:	bl	2f30 <_Balloc>
    30b6:	movs	r2, #1
    30b8:	str	r4, [r0, #20]
    30ba:	str	r2, [r0, #16]
    30bc:	pop	{r4, pc}
    30be:	nop

000030c0 <__multiply>:
    30c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30c4:	ldr	r5, [r1, #16]
    30c6:	ldr	r7, [r2, #16]
    30c8:	cmp	r5, r7
    30ca:	sub	sp, #12
    30cc:	mov	r4, r1
    30ce:	mov	r6, r2
    30d0:	bge.n	30dc <__multiply+0x1c>
    30d2:	mov	r2, r5
    30d4:	mov	r4, r6
    30d6:	mov	r5, r7
    30d8:	mov	r6, r1
    30da:	mov	r7, r2
    30dc:	ldr	r3, [r4, #8]
    30de:	ldr	r1, [r4, #4]
    30e0:	add.w	r8, r5, r7
    30e4:	cmp	r8, r3
    30e6:	it	gt
    30e8:	addgt	r1, #1
    30ea:	bl	2f30 <_Balloc>
    30ee:	add.w	ip, r0, #20
    30f2:	add.w	r9, ip, r8, lsl #2
    30f6:	cmp	ip, r9
    30f8:	str	r0, [sp, #0]
    30fa:	bcs.n	3108 <__multiply+0x48>
    30fc:	mov	r3, ip
    30fe:	movs	r1, #0
    3100:	str.w	r1, [r3], #4
    3104:	cmp	r9, r3
    3106:	bhi.n	3100 <__multiply+0x40>
    3108:	add.w	r2, r6, #20
    310c:	add.w	sl, r2, r7, lsl #2
    3110:	add.w	r3, r4, #20
    3114:	cmp	r2, sl
    3116:	add.w	lr, r3, r5, lsl #2
    311a:	bcs.n	31c6 <__multiply+0x106>
    311c:	str.w	r9, [sp, #4]
    3120:	mov	r9, r3
    3122:	ldr.w	r3, [r2], #4
    3126:	uxth.w	fp, r3
    312a:	cmp.w	fp, #0
    312e:	beq.n	3172 <__multiply+0xb2>
    3130:	movs	r0, #0
    3132:	mov	r7, r9
    3134:	mov	r6, ip
    3136:	mov	r5, r0
    3138:	b.n	313c <__multiply+0x7c>
    313a:	mov	r6, r3
    313c:	ldr.w	r4, [r7], #4
    3140:	ldr	r0, [r6, #0]
    3142:	uxth	r1, r4
    3144:	uxth	r3, r0
    3146:	mla	r1, fp, r1, r3
    314a:	lsrs	r4, r4, #16
    314c:	lsrs	r0, r0, #16
    314e:	adds	r3, r1, r5
    3150:	mla	r0, fp, r4, r0
    3154:	add.w	r0, r0, r3, lsr #16
    3158:	uxth	r1, r3
    315a:	mov	r3, r6
    315c:	orr.w	r1, r1, r0, lsl #16
    3160:	cmp	lr, r7
    3162:	mov.w	r5, r0, lsr #16
    3166:	str.w	r1, [r3], #4
    316a:	bhi.n	313a <__multiply+0x7a>
    316c:	str	r5, [r6, #4]
    316e:	ldr.w	r3, [r2, #-4]
    3172:	movs.w	fp, r3, lsr #16
    3176:	beq.n	31ba <__multiply+0xfa>
    3178:	ldr.w	r3, [ip]
    317c:	mov	r7, ip
    317e:	mov	r0, r3
    3180:	mov	r5, r9
    3182:	movs	r1, #0
    3184:	b.n	3188 <__multiply+0xc8>
    3186:	mov	r7, r6
    3188:	ldrh	r4, [r5, #0]
    318a:	lsrs	r0, r0, #16
    318c:	mla	r0, fp, r4, r0
    3190:	add	r1, r0
    3192:	uxth	r4, r3
    3194:	mov	r6, r7
    3196:	orr.w	r3, r4, r1, lsl #16
    319a:	str.w	r3, [r6], #4
    319e:	ldr	r0, [r7, #4]
    31a0:	ldr.w	r4, [r5], #4
    31a4:	uxth	r3, r0
    31a6:	lsrs	r4, r4, #16
    31a8:	mla	r4, fp, r4, r3
    31ac:	add.w	r3, r4, r1, lsr #16
    31b0:	cmp	lr, r5
    31b2:	mov.w	r1, r3, lsr #16
    31b6:	bhi.n	3186 <__multiply+0xc6>
    31b8:	str	r3, [r7, #4]
    31ba:	cmp	sl, r2
    31bc:	add.w	ip, ip, #4
    31c0:	bhi.n	3122 <__multiply+0x62>
    31c2:	ldr.w	r9, [sp, #4]
    31c6:	cmp.w	r8, #0
    31ca:	ble.n	31e4 <__multiply+0x124>
    31cc:	ldr.w	r3, [r9, #-4]
    31d0:	sub.w	r9, r9, #4
    31d4:	cbz	r3, 31de <__multiply+0x11e>
    31d6:	b.n	31e4 <__multiply+0x124>
    31d8:	ldr.w	r3, [r9, #-4]!
    31dc:	cbnz	r3, 31e4 <__multiply+0x124>
    31de:	subs.w	r8, r8, #1
    31e2:	bne.n	31d8 <__multiply+0x118>
    31e4:	ldr	r0, [sp, #0]
    31e6:	str.w	r8, [r0, #16]
    31ea:	add	sp, #12
    31ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000031f0 <__pow5mult>:
    31f0:	ands.w	r3, r2, #3
    31f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31f8:	mov	r4, r2
    31fa:	mov	r7, r0
    31fc:	bne.n	325c <__pow5mult+0x6c>
    31fe:	mov	r6, r1
    3200:	asrs	r4, r4, #2
    3202:	beq.n	323e <__pow5mult+0x4e>
    3204:	ldr	r5, [r7, #72]	; 0x48
    3206:	cbz	r5, 326e <__pow5mult+0x7e>
    3208:	lsls	r3, r4, #31
    320a:	mov.w	r8, #0
    320e:	bmi.n	321e <__pow5mult+0x2e>
    3210:	asrs	r4, r4, #1
    3212:	beq.n	323e <__pow5mult+0x4e>
    3214:	ldr	r0, [r5, #0]
    3216:	cbz	r0, 3244 <__pow5mult+0x54>
    3218:	mov	r5, r0
    321a:	lsls	r3, r4, #31
    321c:	bpl.n	3210 <__pow5mult+0x20>
    321e:	mov	r2, r5
    3220:	mov	r1, r6
    3222:	mov	r0, r7
    3224:	bl	30c0 <__multiply>
    3228:	cbz	r6, 3258 <__pow5mult+0x68>
    322a:	ldr	r2, [r6, #4]
    322c:	ldr	r3, [r7, #76]	; 0x4c
    322e:	asrs	r4, r4, #1
    3230:	ldr.w	r1, [r3, r2, lsl #2]
    3234:	str	r1, [r6, #0]
    3236:	str.w	r6, [r3, r2, lsl #2]
    323a:	mov	r6, r0
    323c:	bne.n	3214 <__pow5mult+0x24>
    323e:	mov	r0, r6
    3240:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3244:	mov	r2, r5
    3246:	mov	r1, r5
    3248:	mov	r0, r7
    324a:	bl	30c0 <__multiply>
    324e:	str	r0, [r5, #0]
    3250:	str.w	r8, [r0]
    3254:	mov	r5, r0
    3256:	b.n	321a <__pow5mult+0x2a>
    3258:	mov	r6, r0
    325a:	b.n	3210 <__pow5mult+0x20>
    325c:	subs	r2, r3, #1
    325e:	ldr	r5, [pc, #44]	; (328c <__pow5mult+0x9c>)
    3260:	movs	r3, #0
    3262:	ldr.w	r2, [r5, r2, lsl #2]
    3266:	bl	2f90 <__multadd>
    326a:	mov	r6, r0
    326c:	b.n	3200 <__pow5mult+0x10>
    326e:	movs	r1, #1
    3270:	mov	r0, r7
    3272:	bl	2f30 <_Balloc>
    3276:	movw	r1, #625	; 0x271
    327a:	movs	r2, #1
    327c:	movs	r3, #0
    327e:	str	r1, [r0, #20]
    3280:	str	r2, [r0, #16]
    3282:	mov	r5, r0
    3284:	str	r0, [r7, #72]	; 0x48
    3286:	str	r3, [r0, #0]
    3288:	b.n	3208 <__pow5mult+0x18>
    328a:	nop
    328c:	.word	0x20000528

00003290 <__lshift>:
    3290:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3294:	mov	r9, r2
    3296:	ldr	r2, [r1, #16]
    3298:	ldr	r3, [r1, #8]
    329a:	mov.w	r4, r9, asr #5
    329e:	add.w	r8, r4, r2
    32a2:	add.w	r5, r8, #1
    32a6:	cmp	r5, r3
    32a8:	mov	r6, r1
    32aa:	mov	sl, r0
    32ac:	ldr	r1, [r1, #4]
    32ae:	ble.n	32ba <__lshift+0x2a>
    32b0:	lsls	r3, r3, #1
    32b2:	cmp	r5, r3
    32b4:	add.w	r1, r1, #1
    32b8:	bgt.n	32b0 <__lshift+0x20>
    32ba:	mov	r0, sl
    32bc:	bl	2f30 <_Balloc>
    32c0:	cmp	r4, #0
    32c2:	add.w	r2, r0, #20
    32c6:	ble.n	333a <__lshift+0xaa>
    32c8:	add.w	r3, r2, r4, lsl #2
    32cc:	movs	r1, #0
    32ce:	str.w	r1, [r2], #4
    32d2:	cmp	r3, r2
    32d4:	bne.n	32ce <__lshift+0x3e>
    32d6:	ldr	r4, [r6, #16]
    32d8:	add.w	r1, r6, #20
    32dc:	ands.w	r9, r9, #31
    32e0:	add.w	lr, r1, r4, lsl #2
    32e4:	beq.n	332a <__lshift+0x9a>
    32e6:	rsb	r2, r9, #32
    32ea:	movs	r4, #0
    32ec:	ldr	r7, [r1, #0]
    32ee:	lsl.w	ip, r7, r9
    32f2:	orr.w	r4, ip, r4
    32f6:	mov	ip, r3
    32f8:	str.w	r4, [r3], #4
    32fc:	ldr.w	r4, [r1], #4
    3300:	cmp	lr, r1
    3302:	lsr.w	r4, r4, r2
    3306:	bhi.n	32ec <__lshift+0x5c>
    3308:	str.w	r4, [ip, #4]
    330c:	cbz	r4, 3312 <__lshift+0x82>
    330e:	add.w	r5, r8, #2
    3312:	ldr.w	r3, [sl, #76]	; 0x4c
    3316:	ldr	r2, [r6, #4]
    3318:	subs	r5, #1
    331a:	ldr.w	r1, [r3, r2, lsl #2]
    331e:	str	r5, [r0, #16]
    3320:	str	r1, [r6, #0]
    3322:	str.w	r6, [r3, r2, lsl #2]
    3326:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    332a:	subs	r3, #4
    332c:	ldr.w	r2, [r1], #4
    3330:	str.w	r2, [r3, #4]!
    3334:	cmp	lr, r1
    3336:	bhi.n	332c <__lshift+0x9c>
    3338:	b.n	3312 <__lshift+0x82>
    333a:	mov	r3, r2
    333c:	b.n	32d6 <__lshift+0x46>
    333e:	nop

00003340 <__mcmp>:
    3340:	ldr	r2, [r0, #16]
    3342:	ldr	r3, [r1, #16]
    3344:	subs	r2, r2, r3
    3346:	bne.n	3370 <__mcmp+0x30>
    3348:	lsls	r3, r3, #2
    334a:	adds	r0, #20
    334c:	adds	r1, #20
    334e:	add	r1, r3
    3350:	push	{r4}
    3352:	add	r3, r0
    3354:	b.n	335a <__mcmp+0x1a>
    3356:	cmp	r0, r3
    3358:	bcs.n	3374 <__mcmp+0x34>
    335a:	ldr.w	r4, [r3, #-4]!
    335e:	ldr.w	r2, [r1, #-4]!
    3362:	cmp	r4, r2
    3364:	beq.n	3356 <__mcmp+0x16>
    3366:	bcc.n	337c <__mcmp+0x3c>
    3368:	movs	r0, #1
    336a:	ldr.w	r4, [sp], #4
    336e:	bx	lr
    3370:	mov	r0, r2
    3372:	bx	lr
    3374:	movs	r0, #0
    3376:	ldr.w	r4, [sp], #4
    337a:	bx	lr
    337c:	mov.w	r0, #4294967295
    3380:	b.n	336a <__mcmp+0x2a>
    3382:	nop

00003384 <__mdiff>:
    3384:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3388:	ldr	r3, [r1, #16]
    338a:	mov	r7, r1
    338c:	ldr	r1, [r2, #16]
    338e:	subs	r3, r3, r1
    3390:	cmp	r3, #0
    3392:	mov	r8, r2
    3394:	bne.n	33c6 <__mdiff+0x42>
    3396:	lsls	r1, r1, #2
    3398:	add.w	r2, r7, #20
    339c:	add.w	r5, r8, #20
    33a0:	adds	r3, r2, r1
    33a2:	add	r1, r5
    33a4:	b.n	33aa <__mdiff+0x26>
    33a6:	cmp	r2, r3
    33a8:	bcs.n	3468 <__mdiff+0xe4>
    33aa:	ldr.w	r6, [r3, #-4]!
    33ae:	ldr.w	r4, [r1, #-4]!
    33b2:	cmp	r6, r4
    33b4:	beq.n	33a6 <__mdiff+0x22>
    33b6:	bcs.n	347a <__mdiff+0xf6>
    33b8:	mov	r3, r7
    33ba:	mov	r4, r2
    33bc:	mov	r7, r8
    33be:	mov.w	r9, #1
    33c2:	mov	r8, r3
    33c4:	b.n	33d4 <__mdiff+0x50>
    33c6:	blt.n	3484 <__mdiff+0x100>
    33c8:	add.w	r5, r7, #20
    33cc:	add.w	r4, r2, #20
    33d0:	mov.w	r9, #0
    33d4:	ldr	r1, [r7, #4]
    33d6:	bl	2f30 <_Balloc>
    33da:	ldr.w	r3, [r8, #16]
    33de:	ldr	r6, [r7, #16]
    33e0:	str.w	r9, [r0, #12]
    33e4:	add.w	ip, r4, r3, lsl #2
    33e8:	mov	lr, r4
    33ea:	add.w	r7, r5, r6, lsl #2
    33ee:	add.w	r4, r0, #20
    33f2:	movs	r3, #0
    33f4:	ldr.w	r1, [lr], #4
    33f8:	ldr.w	r8, [r5], #4
    33fc:	uxth	r2, r1
    33fe:	uxtah	r3, r3, r8
    3402:	lsrs	r1, r1, #16
    3404:	subs	r2, r3, r2
    3406:	rsb	r3, r1, r8, lsr #16
    340a:	add.w	r3, r3, r2, asr #16
    340e:	uxth	r2, r2
    3410:	orr.w	r2, r2, r3, lsl #16
    3414:	cmp	ip, lr
    3416:	str.w	r2, [r4], #4
    341a:	mov.w	r3, r3, asr #16
    341e:	bhi.n	33f4 <__mdiff+0x70>
    3420:	cmp	r7, r5
    3422:	bls.n	3454 <__mdiff+0xd0>
    3424:	mov	ip, r4
    3426:	mov	r1, r5
    3428:	ldr.w	lr, [r1], #4
    342c:	uxtah	r2, r3, lr
    3430:	asrs	r3, r2, #16
    3432:	add.w	r3, r3, lr, lsr #16
    3436:	uxth	r2, r2
    3438:	orr.w	r2, r2, r3, lsl #16
    343c:	cmp	r7, r1
    343e:	str.w	r2, [ip], #4
    3442:	mov.w	r3, r3, asr #16
    3446:	bhi.n	3428 <__mdiff+0xa4>
    3448:	mvns	r5, r5
    344a:	add	r5, r7
    344c:	bic.w	r5, r5, #3
    3450:	adds	r5, #4
    3452:	add	r4, r5
    3454:	subs	r4, #4
    3456:	cbnz	r2, 3462 <__mdiff+0xde>
    3458:	ldr.w	r3, [r4, #-4]!
    345c:	subs	r6, #1
    345e:	cmp	r3, #0
    3460:	beq.n	3458 <__mdiff+0xd4>
    3462:	str	r6, [r0, #16]
    3464:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3468:	movs	r1, #0
    346a:	bl	2f30 <_Balloc>
    346e:	movs	r2, #1
    3470:	movs	r3, #0
    3472:	str	r2, [r0, #16]
    3474:	str	r3, [r0, #20]
    3476:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    347a:	mov	r4, r5
    347c:	mov.w	r9, #0
    3480:	mov	r5, r2
    3482:	b.n	33d4 <__mdiff+0x50>
    3484:	mov	r3, r7
    3486:	add.w	r4, r7, #20
    348a:	add.w	r5, r8, #20
    348e:	mov	r7, r8
    3490:	mov.w	r9, #1
    3494:	mov	r8, r3
    3496:	b.n	33d4 <__mdiff+0x50>

00003498 <__d2b>:
    3498:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    349c:	vmov	r6, r7, d0
    34a0:	sub	sp, #12
    34a2:	mov	r8, r1
    34a4:	movs	r1, #1
    34a6:	mov	r4, r7
    34a8:	ubfx	r5, r7, #20, #11
    34ac:	mov	r7, r2
    34ae:	bl	2f30 <_Balloc>
    34b2:	ubfx	r4, r4, #0, #20
    34b6:	mov	r9, r0
    34b8:	cbz	r5, 34be <__d2b+0x26>
    34ba:	orr.w	r4, r4, #1048576	; 0x100000
    34be:	str	r4, [sp, #4]
    34c0:	cbz	r6, 350a <__d2b+0x72>
    34c2:	add	r0, sp, #8
    34c4:	str.w	r6, [r0, #-8]!
    34c8:	bl	3050 <__lo0bits>
    34cc:	cmp	r0, #0
    34ce:	bne.n	353a <__d2b+0xa2>
    34d0:	ldmia.w	sp, {r2, r3}
    34d4:	str.w	r2, [r9, #20]
    34d8:	cmp	r3, #0
    34da:	ite	eq
    34dc:	moveq	r1, #1
    34de:	movne	r1, #2
    34e0:	str.w	r3, [r9, #24]
    34e4:	str.w	r1, [r9, #16]
    34e8:	cbnz	r5, 3522 <__d2b+0x8a>
    34ea:	add.w	r3, r9, r1, lsl #2
    34ee:	subw	r0, r0, #1074	; 0x432
    34f2:	str.w	r0, [r8]
    34f6:	ldr	r0, [r3, #16]
    34f8:	bl	3010 <__hi0bits>
    34fc:	rsb	r0, r0, r1, lsl #5
    3500:	str	r0, [r7, #0]
    3502:	mov	r0, r9
    3504:	add	sp, #12
    3506:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    350a:	add	r0, sp, #4
    350c:	bl	3050 <__lo0bits>
    3510:	ldr	r3, [sp, #4]
    3512:	str.w	r3, [r9, #20]
    3516:	movs	r1, #1
    3518:	adds	r0, #32
    351a:	str.w	r1, [r9, #16]
    351e:	cmp	r5, #0
    3520:	beq.n	34ea <__d2b+0x52>
    3522:	subw	r5, r5, #1075	; 0x433
    3526:	add	r5, r0
    3528:	rsb	r0, r0, #53	; 0x35
    352c:	str.w	r5, [r8]
    3530:	str	r0, [r7, #0]
    3532:	mov	r0, r9
    3534:	add	sp, #12
    3536:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    353a:	ldmia.w	sp, {r2, r3}
    353e:	rsb	r1, r0, #32
    3542:	lsl.w	r1, r3, r1
    3546:	orrs	r2, r1
    3548:	lsrs	r3, r0
    354a:	str	r3, [sp, #4]
    354c:	str.w	r2, [r9, #20]
    3550:	b.n	34d8 <__d2b+0x40>
    3552:	nop

00003554 <_vasnprintf_r>:
    3554:	push	{r4, r5, r6, lr}
    3556:	mov	r5, r2
    3558:	sub	sp, #104	; 0x68
    355a:	ldr	r4, [r2, #0]
    355c:	cbz	r1, 3562 <_vasnprintf_r+0xe>
    355e:	cmp	r4, #0
    3560:	bne.n	3598 <_vasnprintf_r+0x44>
    3562:	movs	r4, #0
    3564:	mov.w	r2, #648	; 0x288
    3568:	strh.w	r2, [sp, #12]
    356c:	str	r4, [sp, #0]
    356e:	str	r4, [sp, #16]
    3570:	mov	r2, r3
    3572:	movw	r6, #65535	; 0xffff
    3576:	ldr	r3, [sp, #120]	; 0x78
    3578:	str	r4, [sp, #8]
    357a:	mov	r1, sp
    357c:	str	r4, [sp, #20]
    357e:	strh.w	r6, [sp, #14]
    3582:	bl	43c8 <_svfprintf_r>
    3586:	cmp	r0, #0
    3588:	blt.n	35ae <_vasnprintf_r+0x5a>
    358a:	ldr	r3, [sp, #0]
    358c:	str	r0, [r5, #0]
    358e:	movs	r2, #0
    3590:	strb	r2, [r3, #0]
    3592:	ldr	r0, [sp, #16]
    3594:	add	sp, #104	; 0x68
    3596:	pop	{r4, r5, r6, pc}
    3598:	mov.w	r2, #1544	; 0x608
    359c:	str	r1, [sp, #0]
    359e:	str	r1, [sp, #16]
    35a0:	strh.w	r2, [sp, #12]
    35a4:	bge.n	3570 <_vasnprintf_r+0x1c>
    35a6:	movs	r3, #139	; 0x8b
    35a8:	str	r3, [r0, #0]
    35aa:	movs	r0, #0
    35ac:	b.n	3594 <_vasnprintf_r+0x40>
    35ae:	movs	r0, #0
    35b0:	b.n	3594 <_vasnprintf_r+0x40>
    35b2:	nop

000035b4 <_calloc_r>:
    35b4:	push	{r4, lr}
    35b6:	mul.w	r1, r2, r1
    35ba:	bl	1f6c <_malloc_r>
    35be:	mov	r4, r0
    35c0:	cbz	r0, 35fa <_calloc_r+0x46>
    35c2:	ldr.w	r2, [r0, #-4]
    35c6:	bic.w	r2, r2, #3
    35ca:	subs	r2, #4
    35cc:	cmp	r2, #36	; 0x24
    35ce:	bhi.n	3602 <_calloc_r+0x4e>
    35d0:	cmp	r2, #19
    35d2:	bls.n	35fe <_calloc_r+0x4a>
    35d4:	movs	r3, #0
    35d6:	cmp	r2, #27
    35d8:	str	r3, [r0, #0]
    35da:	str	r3, [r0, #4]
    35dc:	bls.n	360c <_calloc_r+0x58>
    35de:	cmp	r2, #36	; 0x24
    35e0:	str	r3, [r0, #8]
    35e2:	str	r3, [r0, #12]
    35e4:	iteee	ne
    35e6:	addne.w	r2, r0, #16
    35ea:	streq	r3, [r0, #16]
    35ec:	streq	r3, [r0, #20]
    35ee:	addeq.w	r2, r0, #24
    35f2:	movs	r3, #0
    35f4:	str	r3, [r2, #0]
    35f6:	str	r3, [r2, #4]
    35f8:	str	r3, [r2, #8]
    35fa:	mov	r0, r4
    35fc:	pop	{r4, pc}
    35fe:	mov	r2, r0
    3600:	b.n	35f2 <_calloc_r+0x3e>
    3602:	movs	r1, #0
    3604:	bl	25d0 <memset>
    3608:	mov	r0, r4
    360a:	pop	{r4, pc}
    360c:	add.w	r2, r0, #8
    3610:	b.n	35f2 <_calloc_r+0x3e>
    3612:	nop

00003614 <quorem>:
    3614:	ldr	r2, [r0, #16]
    3616:	ldr	r3, [r1, #16]
    3618:	cmp	r3, r2
    361a:	bgt.w	3738 <quorem+0x124>
    361e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3622:	add.w	r8, r3, #4294967295
    3626:	add.w	r7, r1, #20
    362a:	add.w	fp, r0, #20
    362e:	ldr.w	r2, [r7, r8, lsl #2]
    3632:	ldr.w	r3, [fp, r8, lsl #2]
    3636:	mov.w	r4, r8, lsl #2
    363a:	sub	sp, #12
    363c:	adds	r2, #1
    363e:	udiv	r9, r3, r2
    3642:	add.w	r3, fp, r4
    3646:	str	r4, [sp, #0]
    3648:	add.w	sl, r7, r4
    364c:	str	r3, [sp, #4]
    364e:	cmp.w	r9, #0
    3652:	beq.n	36c8 <quorem+0xb4>
    3654:	movs	r5, #0
    3656:	mov	ip, r7
    3658:	mov	lr, fp
    365a:	mov	r3, r5
    365c:	ldr.w	r6, [ip], #4
    3660:	ldr.w	r2, [lr]
    3664:	uxth	r4, r6
    3666:	mla	r5, r9, r4, r5
    366a:	lsrs	r6, r6, #16
    366c:	lsrs	r4, r5, #16
    366e:	mla	r4, r9, r6, r4
    3672:	uxth	r5, r5
    3674:	subs	r3, r3, r5
    3676:	uxth	r6, r4
    3678:	uxtah	r3, r3, r2
    367c:	rsb	r6, r6, r2, lsr #16
    3680:	add.w	r6, r6, r3, asr #16
    3684:	uxth	r3, r3
    3686:	orr.w	r3, r3, r6, lsl #16
    368a:	cmp	sl, ip
    368c:	str.w	r3, [lr], #4
    3690:	mov.w	r5, r4, lsr #16
    3694:	mov.w	r3, r6, asr #16
    3698:	bcs.n	365c <quorem+0x48>
    369a:	ldr	r3, [sp, #0]
    369c:	ldr.w	r3, [fp, r3]
    36a0:	cbnz	r3, 36c8 <quorem+0xb4>
    36a2:	ldr	r4, [sp, #4]
    36a4:	subs	r3, r4, #4
    36a6:	cmp	fp, r3
    36a8:	bcs.n	36c4 <quorem+0xb0>
    36aa:	ldr.w	r3, [r4, #-4]
    36ae:	cbnz	r3, 36c4 <quorem+0xb0>
    36b0:	sub.w	r3, r4, #8
    36b4:	b.n	36bc <quorem+0xa8>
    36b6:	ldr	r2, [r3, #0]
    36b8:	subs	r3, #4
    36ba:	cbnz	r2, 36c4 <quorem+0xb0>
    36bc:	cmp	fp, r3
    36be:	add.w	r8, r8, #4294967295
    36c2:	bcc.n	36b6 <quorem+0xa2>
    36c4:	str.w	r8, [r0, #16]
    36c8:	mov	r4, r0
    36ca:	bl	3340 <__mcmp>
    36ce:	cmp	r0, #0
    36d0:	blt.n	3730 <quorem+0x11c>
    36d2:	add.w	r9, r9, #1
    36d6:	mov	r5, fp
    36d8:	movs	r3, #0
    36da:	ldr.w	r1, [r7], #4
    36de:	ldr	r0, [r5, #0]
    36e0:	uxth	r2, r1
    36e2:	subs	r2, r3, r2
    36e4:	lsrs	r1, r1, #16
    36e6:	uxtah	r2, r2, r0
    36ea:	rsb	r3, r1, r0, lsr #16
    36ee:	add.w	r3, r3, r2, asr #16
    36f2:	uxth	r1, r2
    36f4:	orr.w	r1, r1, r3, lsl #16
    36f8:	cmp	sl, r7
    36fa:	str.w	r1, [r5], #4
    36fe:	mov.w	r3, r3, asr #16
    3702:	bcs.n	36da <quorem+0xc6>
    3704:	ldr.w	r2, [fp, r8, lsl #2]
    3708:	add.w	r3, fp, r8, lsl #2
    370c:	cbnz	r2, 3730 <quorem+0x11c>
    370e:	subs	r2, r3, #4
    3710:	cmp	fp, r2
    3712:	bcs.n	372c <quorem+0x118>
    3714:	ldr.w	r2, [r3, #-4]
    3718:	cbnz	r2, 372c <quorem+0x118>
    371a:	subs	r3, #8
    371c:	b.n	3724 <quorem+0x110>
    371e:	ldr	r2, [r3, #0]
    3720:	subs	r3, #4
    3722:	cbnz	r2, 372c <quorem+0x118>
    3724:	cmp	fp, r3
    3726:	add.w	r8, r8, #4294967295
    372a:	bcc.n	371e <quorem+0x10a>
    372c:	str.w	r8, [r4, #16]
    3730:	mov	r0, r9
    3732:	add	sp, #12
    3734:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3738:	movs	r0, #0
    373a:	bx	lr
    373c:	movs	r0, r0
	...

00003740 <_dtoa_r>:
    3740:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3744:	vmov	r6, r7, d0
    3748:	sub	sp, #76	; 0x4c
    374a:	ldr	r5, [r0, #64]	; 0x40
    374c:	str	r1, [sp, #4]
    374e:	mov	r4, r0
    3750:	mov	r8, r2
    3752:	str	r3, [sp, #16]
    3754:	vmov	sl, s0
    3758:	mov	fp, r7
    375a:	cbz	r5, 3770 <_dtoa_r+0x30>
    375c:	ldr	r2, [r0, #68]	; 0x44
    375e:	str	r2, [r5, #4]
    3760:	movs	r3, #1
    3762:	lsls	r3, r2
    3764:	str	r3, [r5, #8]
    3766:	mov	r1, r5
    3768:	bl	2f7c <_Bfree>
    376c:	movs	r3, #0
    376e:	str	r3, [r4, #64]	; 0x40
    3770:	cmp.w	fp, #0
    3774:	mov	r6, fp
    3776:	blt.n	37e2 <_dtoa_r+0xa2>
    3778:	ldr	r2, [sp, #112]	; 0x70
    377a:	movs	r3, #0
    377c:	str	r3, [r2, #0]
    377e:	ldr	r3, [pc, #784]	; (3a90 <_dtoa_r+0x350>)
    3780:	mov	r2, r3
    3782:	ands	r3, r6
    3784:	cmp	r3, r2
    3786:	beq.n	37b4 <_dtoa_r+0x74>
    3788:	vmov	d7, sl, fp
    378c:	vcmp.f64	d7, #0.0
    3790:	vmrs	APSR_nzcv, fpscr
    3794:	strd	sl, fp, [sp, #8]
    3798:	bne.n	37f0 <_dtoa_r+0xb0>
    379a:	ldr	r2, [sp, #16]
    379c:	movs	r3, #1
    379e:	str	r3, [r2, #0]
    37a0:	ldr	r3, [sp, #116]	; 0x74
    37a2:	cmp	r3, #0
    37a4:	beq.w	3916 <_dtoa_r+0x1d6>
    37a8:	ldr	r0, [pc, #744]	; (3a94 <_dtoa_r+0x354>)
    37aa:	str	r0, [r3, #0]
    37ac:	subs	r0, #1
    37ae:	add	sp, #76	; 0x4c
    37b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37b4:	ldr	r2, [sp, #16]
    37b6:	movw	r3, #9999	; 0x270f
    37ba:	str	r3, [r2, #0]
    37bc:	cmp.w	sl, #0
    37c0:	beq.w	38e8 <_dtoa_r+0x1a8>
    37c4:	ldr	r0, [pc, #720]	; (3a98 <_dtoa_r+0x358>)
    37c6:	ldr	r3, [sp, #116]	; 0x74
    37c8:	cmp	r3, #0
    37ca:	beq.n	37ae <_dtoa_r+0x6e>
    37cc:	ldrb	r3, [r0, #3]
    37ce:	cmp	r3, #0
    37d0:	beq.w	391a <_dtoa_r+0x1da>
    37d4:	add.w	r3, r0, #8
    37d8:	ldr	r2, [sp, #116]	; 0x74
    37da:	str	r3, [r2, #0]
    37dc:	add	sp, #76	; 0x4c
    37de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37e2:	ldr	r2, [sp, #112]	; 0x70
    37e4:	movs	r3, #1
    37e6:	bic.w	r6, fp, #2147483648	; 0x80000000
    37ea:	str	r3, [r2, #0]
    37ec:	mov	fp, r6
    37ee:	b.n	377e <_dtoa_r+0x3e>
    37f0:	add	r1, sp, #68	; 0x44
    37f2:	add	r2, sp, #64	; 0x40
    37f4:	vldr	d0, [sp, #8]
    37f8:	mov	r0, r4
    37fa:	bl	3498 <__d2b>
    37fe:	lsrs	r1, r6, #20
    3800:	str	r0, [sp, #28]
    3802:	bne.n	38fa <_dtoa_r+0x1ba>
    3804:	ldr	r0, [sp, #64]	; 0x40
    3806:	ldr	r1, [sp, #68]	; 0x44
    3808:	add	r1, r0
    380a:	addw	r3, r1, #1074	; 0x432
    380e:	cmp	r3, #32
    3810:	ble.w	3c96 <_dtoa_r+0x556>
    3814:	rsb	r3, r3, #64	; 0x40
    3818:	addw	r2, r1, #1042	; 0x412
    381c:	lsls	r6, r3
    381e:	lsr.w	r3, sl, r2
    3822:	orrs	r3, r6
    3824:	vmov	s15, r3
    3828:	vcvt.f64.u32	d7, s15
    382c:	movs	r5, #1
    382e:	vmov	r2, r3, d7
    3832:	subs	r1, #1
    3834:	sub.w	r3, r3, #32505856	; 0x1f00000
    3838:	str	r5, [sp, #40]	; 0x28
    383a:	vmov	d7, r2, r3
    383e:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    3842:	vldr	d4, [pc, #564]	; 3a78 <_dtoa_r+0x338>
    3846:	vsub.f64	d6, d7, d6
    384a:	vldr	d7, [pc, #564]	; 3a80 <_dtoa_r+0x340>
    384e:	vldr	d5, [pc, #568]	; 3a88 <_dtoa_r+0x348>
    3852:	vfma.f64	d7, d6, d4
    3856:	vmov	s13, r1
    385a:	vcvt.f64.s32	d6, s13
    385e:	vfma.f64	d7, d6, d5
    3862:	vcvt.s32.f64	s13, d7
    3866:	vcmpe.f64	d7, #0.0
    386a:	vmrs	APSR_nzcv, fpscr
    386e:	vstr	s13, [sp, #8]
    3872:	bmi.w	3aae <_dtoa_r+0x36e>
    3876:	ldr	r5, [sp, #8]
    3878:	cmp	r5, #22
    387a:	bhi.w	3aa8 <_dtoa_r+0x368>
    387e:	ldr	r3, [pc, #540]	; (3a9c <_dtoa_r+0x35c>)
    3880:	add.w	r3, r3, r5, lsl #3
    3884:	vldr	d7, [r3]
    3888:	vmov	d6, sl, fp
    388c:	vcmpe.f64	d7, d6
    3890:	vmrs	APSR_nzcv, fpscr
    3894:	ble.w	3ca4 <_dtoa_r+0x564>
    3898:	subs	r3, r5, #1
    389a:	str	r3, [sp, #8]
    389c:	movs	r3, #0
    389e:	str	r3, [sp, #48]	; 0x30
    38a0:	subs	r1, r0, r1
    38a2:	subs.w	r9, r1, #1
    38a6:	bmi.w	3ad8 <_dtoa_r+0x398>
    38aa:	movs	r3, #0
    38ac:	str	r3, [sp, #24]
    38ae:	ldr	r3, [sp, #8]
    38b0:	cmp	r3, #0
    38b2:	blt.w	3ac6 <_dtoa_r+0x386>
    38b6:	add	r9, r3
    38b8:	str	r3, [sp, #44]	; 0x2c
    38ba:	movs	r3, #0
    38bc:	str	r3, [sp, #20]
    38be:	ldr	r3, [sp, #4]
    38c0:	cmp	r3, #9
    38c2:	bhi.n	391e <_dtoa_r+0x1de>
    38c4:	cmp	r3, #5
    38c6:	ble.w	4388 <_dtoa_r+0xc48>
    38ca:	subs	r3, #4
    38cc:	str	r3, [sp, #4]
    38ce:	movs	r3, #0
    38d0:	str	r3, [sp, #56]	; 0x38
    38d2:	ldr	r3, [sp, #4]
    38d4:	subs	r3, #2
    38d6:	cmp	r3, #3
    38d8:	bhi.w	439a <_dtoa_r+0xc5a>
    38dc:	tbh	[pc, r3, lsl #1]
    38e0:	.word	0x01e502a9
    38e4:	.word	0x03c802b5
    38e8:	ldr	r3, [pc, #428]	; (3a98 <_dtoa_r+0x358>)
    38ea:	ldr	r2, [pc, #436]	; (3aa0 <_dtoa_r+0x360>)
    38ec:	ubfx	r0, r6, #0, #20
    38f0:	cmp	r0, #0
    38f2:	ite	ne
    38f4:	movne	r0, r3
    38f6:	moveq	r0, r2
    38f8:	b.n	37c6 <_dtoa_r+0x86>
    38fa:	ldrd	r2, r3, [sp, #8]
    38fe:	ubfx	r0, r3, #0, #20
    3902:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    3906:	movs	r5, #0
    3908:	subw	r1, r1, #1023	; 0x3ff
    390c:	orr.w	r3, r3, #3145728	; 0x300000
    3910:	ldr	r0, [sp, #64]	; 0x40
    3912:	str	r5, [sp, #40]	; 0x28
    3914:	b.n	383a <_dtoa_r+0xfa>
    3916:	ldr	r0, [pc, #396]	; (3aa4 <_dtoa_r+0x364>)
    3918:	b.n	37ae <_dtoa_r+0x6e>
    391a:	adds	r3, r0, #3
    391c:	b.n	37d8 <_dtoa_r+0x98>
    391e:	movs	r1, #0
    3920:	str	r1, [r4, #68]	; 0x44
    3922:	mov	r0, r4
    3924:	mov	r8, r1
    3926:	str	r1, [sp, #4]
    3928:	bl	2f30 <_Balloc>
    392c:	mov.w	r7, #4294967295
    3930:	movs	r3, #1
    3932:	str	r0, [sp, #32]
    3934:	str	r0, [r4, #64]	; 0x40
    3936:	str	r7, [sp, #52]	; 0x34
    3938:	str	r3, [sp, #36]	; 0x24
    393a:	ldr	r3, [sp, #68]	; 0x44
    393c:	cmp	r3, #0
    393e:	blt.n	3a36 <_dtoa_r+0x2f6>
    3940:	ldr	r2, [sp, #8]
    3942:	cmp	r2, #14
    3944:	bgt.n	3a36 <_dtoa_r+0x2f6>
    3946:	ldr	r3, [pc, #340]	; (3a9c <_dtoa_r+0x35c>)
    3948:	cmp.w	r8, #0
    394c:	add.w	r3, r3, r2, lsl #3
    3950:	vldr	d4, [r3]
    3954:	blt.w	3e60 <_dtoa_r+0x720>
    3958:	vneg.f64	d2, d4
    395c:	vmov	d7, sl, fp
    3960:	vdiv.f64	d6, d7, d4
    3964:	vcvt.s32.f64	s12, d6
    3968:	ldr	r2, [sp, #32]
    396a:	vmov	r3, s12
    396e:	cmp	r7, #1
    3970:	add.w	r3, r3, #48	; 0x30
    3974:	vcvt.f64.s32	d5, s12
    3978:	add.w	fp, r2, #1
    397c:	strb	r3, [r2, #0]
    397e:	vfma.f64	d7, d2, d5
    3982:	beq.n	39ca <_dtoa_r+0x28a>
    3984:	vmov.f64	d3, #36	; 0x41200000  10.0
    3988:	vmul.f64	d7, d7, d3
    398c:	vcmp.f64	d7, #0.0
    3990:	vmrs	APSR_nzcv, fpscr
    3994:	beq.n	3a0c <_dtoa_r+0x2cc>
    3996:	ldr	r2, [sp, #32]
    3998:	b.n	39a8 <_dtoa_r+0x268>
    399a:	vmul.f64	d7, d7, d3
    399e:	vcmp.f64	d7, #0.0
    39a2:	vmrs	APSR_nzcv, fpscr
    39a6:	beq.n	3a0c <_dtoa_r+0x2cc>
    39a8:	vdiv.f64	d6, d7, d4
    39ac:	vcvt.s32.f64	s12, d6
    39b0:	vmov	r3, s12
    39b4:	adds	r3, #48	; 0x30
    39b6:	strb.w	r3, [fp], #1
    39ba:	rsb	r3, r2, fp
    39be:	cmp	r3, r7
    39c0:	vcvt.f64.s32	d5, s12
    39c4:	vfma.f64	d7, d2, d5
    39c8:	bne.n	399a <_dtoa_r+0x25a>
    39ca:	vadd.f64	d7, d7, d7
    39ce:	vcmpe.f64	d4, d7
    39d2:	vmrs	APSR_nzcv, fpscr
    39d6:	bmi.n	39ea <_dtoa_r+0x2aa>
    39d8:	vcmp.f64	d4, d7
    39dc:	vmrs	APSR_nzcv, fpscr
    39e0:	bne.n	3a0c <_dtoa_r+0x2cc>
    39e2:	vmov	r3, s12
    39e6:	lsls	r3, r3, #31
    39e8:	bpl.n	3a0c <_dtoa_r+0x2cc>
    39ea:	ldrb.w	r0, [fp, #-1]
    39ee:	ldr	r2, [sp, #32]
    39f0:	add.w	r3, fp, #4294967295
    39f4:	b.n	3a00 <_dtoa_r+0x2c0>
    39f6:	cmp	r2, r3
    39f8:	beq.w	41c6 <_dtoa_r+0xa86>
    39fc:	ldrb.w	r0, [r3, #-1]!
    3a00:	cmp	r0, #57	; 0x39
    3a02:	add.w	fp, r3, #1
    3a06:	beq.n	39f6 <_dtoa_r+0x2b6>
    3a08:	adds	r0, #1
    3a0a:	strb	r0, [r3, #0]
    3a0c:	ldr	r1, [sp, #28]
    3a0e:	mov	r0, r4
    3a10:	bl	2f7c <_Bfree>
    3a14:	movs	r2, #0
    3a16:	ldr	r3, [sp, #8]
    3a18:	strb.w	r2, [fp]
    3a1c:	ldr	r2, [sp, #16]
    3a1e:	adds	r3, #1
    3a20:	str	r3, [r2, #0]
    3a22:	ldr	r3, [sp, #116]	; 0x74
    3a24:	cmp	r3, #0
    3a26:	beq.w	40f6 <_dtoa_r+0x9b6>
    3a2a:	ldr	r0, [sp, #32]
    3a2c:	str.w	fp, [r3]
    3a30:	add	sp, #76	; 0x4c
    3a32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a36:	ldr	r2, [sp, #36]	; 0x24
    3a38:	cmp	r2, #0
    3a3a:	beq.n	3ae4 <_dtoa_r+0x3a4>
    3a3c:	ldr	r2, [sp, #4]
    3a3e:	cmp	r2, #1
    3a40:	ble.w	3ea0 <_dtoa_r+0x760>
    3a44:	ldr	r1, [sp, #20]
    3a46:	subs	r2, r7, #1
    3a48:	cmp	r1, r2
    3a4a:	blt.w	40fc <_dtoa_r+0x9bc>
    3a4e:	subs	r3, r1, r2
    3a50:	str	r3, [sp, #56]	; 0x38
    3a52:	cmp	r7, #0
    3a54:	ldr	r3, [sp, #24]
    3a56:	blt.w	42a2 <_dtoa_r+0xb62>
    3a5a:	str	r3, [sp, #40]	; 0x28
    3a5c:	mov	r3, r7
    3a5e:	ldr	r2, [sp, #24]
    3a60:	movs	r1, #1
    3a62:	add	r2, r3
    3a64:	mov	r0, r4
    3a66:	str	r2, [sp, #24]
    3a68:	add	r9, r3
    3a6a:	bl	30ac <__i2b>
    3a6e:	mov	r6, r0
    3a70:	b.n	3aee <_dtoa_r+0x3ae>
    3a72:	nop
    3a74:	nop.w
    3a78:	.word	0x636f4361
    3a7c:	.word	0x3fd287a7
    3a80:	.word	0x8b60c8b3
    3a84:	.word	0x3fc68a28
    3a88:	.word	0x509f79fb
    3a8c:	.word	0x3fd34413
    3a90:	.word	0x7ff00000
    3a94:	.word	0x20000545
    3a98:	.word	0x20000540
    3a9c:	.word	0x20000438
    3aa0:	.word	0x20000534
    3aa4:	.word	0x20000544
    3aa8:	movs	r3, #1
    3aaa:	str	r3, [sp, #48]	; 0x30
    3aac:	b.n	38a0 <_dtoa_r+0x160>
    3aae:	vcvt.f64.s32	d6, s13
    3ab2:	vcmp.f64	d7, d6
    3ab6:	vmrs	APSR_nzcv, fpscr
    3aba:	beq.w	3876 <_dtoa_r+0x136>
    3abe:	ldr	r3, [sp, #8]
    3ac0:	subs	r3, #1
    3ac2:	str	r3, [sp, #8]
    3ac4:	b.n	3876 <_dtoa_r+0x136>
    3ac6:	ldr	r2, [sp, #24]
    3ac8:	ldr	r3, [sp, #8]
    3aca:	subs	r2, r2, r3
    3acc:	negs	r3, r3
    3ace:	str	r3, [sp, #20]
    3ad0:	movs	r3, #0
    3ad2:	str	r2, [sp, #24]
    3ad4:	str	r3, [sp, #44]	; 0x2c
    3ad6:	b.n	38be <_dtoa_r+0x17e>
    3ad8:	rsb	r3, r9, #0
    3adc:	str	r3, [sp, #24]
    3ade:	mov.w	r9, #0
    3ae2:	b.n	38ae <_dtoa_r+0x16e>
    3ae4:	ldr	r3, [sp, #20]
    3ae6:	str	r3, [sp, #56]	; 0x38
    3ae8:	ldr	r6, [sp, #36]	; 0x24
    3aea:	ldr	r3, [sp, #24]
    3aec:	str	r3, [sp, #40]	; 0x28
    3aee:	ldr	r1, [sp, #40]	; 0x28
    3af0:	mov	r3, r1
    3af2:	cbz	r1, 3b0e <_dtoa_r+0x3ce>
    3af4:	cmp.w	r9, #0
    3af8:	ble.n	3b0e <_dtoa_r+0x3ce>
    3afa:	cmp	r1, r9
    3afc:	ldr	r2, [sp, #24]
    3afe:	it	ge
    3b00:	movge	r3, r9
    3b02:	subs	r2, r2, r3
    3b04:	str	r2, [sp, #24]
    3b06:	subs	r2, r1, r3
    3b08:	str	r2, [sp, #40]	; 0x28
    3b0a:	rsb	r9, r3, r9
    3b0e:	ldr	r3, [sp, #20]
    3b10:	cmp	r3, #0
    3b12:	ble.w	4016 <_dtoa_r+0x8d6>
    3b16:	ldr	r2, [sp, #36]	; 0x24
    3b18:	cmp	r2, #0
    3b1a:	beq.w	3e52 <_dtoa_r+0x712>
    3b1e:	ldr	r2, [sp, #56]	; 0x38
    3b20:	cmp	r2, #0
    3b22:	beq.w	3e52 <_dtoa_r+0x712>
    3b26:	mov	r1, r6
    3b28:	mov	r0, r4
    3b2a:	bl	31f0 <__pow5mult>
    3b2e:	ldr	r2, [sp, #28]
    3b30:	mov	r1, r0
    3b32:	mov	r6, r0
    3b34:	mov	r0, r4
    3b36:	bl	30c0 <__multiply>
    3b3a:	ldr	r1, [sp, #28]
    3b3c:	mov	r5, r0
    3b3e:	mov	r0, r4
    3b40:	bl	2f7c <_Bfree>
    3b44:	ldr	r3, [sp, #20]
    3b46:	ldr	r2, [sp, #56]	; 0x38
    3b48:	subs	r3, r3, r2
    3b4a:	str	r3, [sp, #20]
    3b4c:	bne.w	3e50 <_dtoa_r+0x710>
    3b50:	movs	r1, #1
    3b52:	mov	r0, r4
    3b54:	bl	30ac <__i2b>
    3b58:	ldr	r3, [sp, #44]	; 0x2c
    3b5a:	str	r0, [sp, #20]
    3b5c:	cmp	r3, #0
    3b5e:	beq.w	3eba <_dtoa_r+0x77a>
    3b62:	mov	r1, r0
    3b64:	mov	r2, r3
    3b66:	mov	r0, r4
    3b68:	bl	31f0 <__pow5mult>
    3b6c:	ldr	r3, [sp, #4]
    3b6e:	str	r0, [sp, #20]
    3b70:	cmp	r3, #1
    3b72:	ble.w	4076 <_dtoa_r+0x936>
    3b76:	movs	r3, #0
    3b78:	str	r3, [sp, #28]
    3b7a:	ldr	r2, [sp, #20]
    3b7c:	ldr	r3, [r2, #16]
    3b7e:	add.w	r3, r2, r3, lsl #2
    3b82:	ldr	r0, [r3, #16]
    3b84:	bl	3010 <__hi0bits>
    3b88:	rsb	r0, r0, #32
    3b8c:	add	r0, r9
    3b8e:	ands.w	r0, r0, #31
    3b92:	beq.w	3eb6 <_dtoa_r+0x776>
    3b96:	rsb	r3, r0, #32
    3b9a:	cmp	r3, #4
    3b9c:	ble.w	4390 <_dtoa_r+0xc50>
    3ba0:	rsb	r0, r0, #28
    3ba4:	ldr	r3, [sp, #24]
    3ba6:	add	r3, r0
    3ba8:	str	r3, [sp, #24]
    3baa:	ldr	r3, [sp, #40]	; 0x28
    3bac:	add	r3, r0
    3bae:	str	r3, [sp, #40]	; 0x28
    3bb0:	add	r9, r0
    3bb2:	ldr	r3, [sp, #24]
    3bb4:	cmp	r3, #0
    3bb6:	ble.n	3bc4 <_dtoa_r+0x484>
    3bb8:	mov	r1, r5
    3bba:	mov	r2, r3
    3bbc:	mov	r0, r4
    3bbe:	bl	3290 <__lshift>
    3bc2:	mov	r5, r0
    3bc4:	cmp.w	r9, #0
    3bc8:	ble.n	3bd6 <_dtoa_r+0x496>
    3bca:	mov	r2, r9
    3bcc:	ldr	r1, [sp, #20]
    3bce:	mov	r0, r4
    3bd0:	bl	3290 <__lshift>
    3bd4:	str	r0, [sp, #20]
    3bd6:	ldr	r3, [sp, #48]	; 0x30
    3bd8:	cmp	r3, #0
    3bda:	bne.w	3fe0 <_dtoa_r+0x8a0>
    3bde:	cmp	r7, #0
    3be0:	ble.w	4024 <_dtoa_r+0x8e4>
    3be4:	ldr	r3, [sp, #36]	; 0x24
    3be6:	cmp	r3, #0
    3be8:	bne.w	3ee2 <_dtoa_r+0x7a2>
    3bec:	ldr.w	fp, [sp, #32]
    3bf0:	ldr.w	sl, [sp, #20]
    3bf4:	mov	r8, fp
    3bf6:	b.n	3bfe <_dtoa_r+0x4be>
    3bf8:	bl	2f90 <__multadd>
    3bfc:	mov	r5, r0
    3bfe:	mov	r1, sl
    3c00:	mov	r0, r5
    3c02:	bl	3614 <quorem>
    3c06:	add.w	r9, r0, #48	; 0x30
    3c0a:	strb.w	r9, [r8], #1
    3c0e:	rsb	r3, fp, r8
    3c12:	cmp	r3, r7
    3c14:	mov.w	r2, #10
    3c18:	mov.w	r3, #0
    3c1c:	mov	r1, r5
    3c1e:	mov	r0, r4
    3c20:	blt.n	3bf8 <_dtoa_r+0x4b8>
    3c22:	ldr	r3, [sp, #32]
    3c24:	cmp	r7, #1
    3c26:	ite	ge
    3c28:	addge	r3, r3, r7
    3c2a:	addlt	r3, #1
    3c2c:	mov	fp, r3
    3c2e:	mov.w	sl, #0
    3c32:	mov	r1, r5
    3c34:	movs	r2, #1
    3c36:	mov	r0, r4
    3c38:	bl	3290 <__lshift>
    3c3c:	ldr	r1, [sp, #20]
    3c3e:	str	r0, [sp, #28]
    3c40:	bl	3340 <__mcmp>
    3c44:	cmp	r0, #0
    3c46:	ble.w	4162 <_dtoa_r+0xa22>
    3c4a:	ldrb.w	r2, [fp, #-1]
    3c4e:	ldr	r1, [sp, #32]
    3c50:	add.w	r3, fp, #4294967295
    3c54:	b.n	3c60 <_dtoa_r+0x520>
    3c56:	cmp	r3, r1
    3c58:	beq.w	4062 <_dtoa_r+0x922>
    3c5c:	ldrb.w	r2, [r3, #-1]!
    3c60:	cmp	r2, #57	; 0x39
    3c62:	add.w	fp, r3, #1
    3c66:	beq.n	3c56 <_dtoa_r+0x516>
    3c68:	adds	r2, #1
    3c6a:	strb	r2, [r3, #0]
    3c6c:	ldr	r1, [sp, #20]
    3c6e:	mov	r0, r4
    3c70:	bl	2f7c <_Bfree>
    3c74:	cmp	r6, #0
    3c76:	beq.w	3a0c <_dtoa_r+0x2cc>
    3c7a:	cmp.w	sl, #0
    3c7e:	beq.n	3c8c <_dtoa_r+0x54c>
    3c80:	cmp	sl, r6
    3c82:	beq.n	3c8c <_dtoa_r+0x54c>
    3c84:	mov	r1, sl
    3c86:	mov	r0, r4
    3c88:	bl	2f7c <_Bfree>
    3c8c:	mov	r1, r6
    3c8e:	mov	r0, r4
    3c90:	bl	2f7c <_Bfree>
    3c94:	b.n	3a0c <_dtoa_r+0x2cc>
    3c96:	rsb	r3, r3, #32
    3c9a:	lsl.w	r3, sl, r3
    3c9e:	vmov	s15, r3
    3ca2:	b.n	3828 <_dtoa_r+0xe8>
    3ca4:	movs	r3, #0
    3ca6:	str	r3, [sp, #48]	; 0x30
    3ca8:	b.n	38a0 <_dtoa_r+0x160>
    3caa:	movs	r3, #0
    3cac:	str	r3, [sp, #36]	; 0x24
    3cae:	ldr	r3, [sp, #8]
    3cb0:	add	r3, r8
    3cb2:	adds	r7, r3, #1
    3cb4:	cmp	r7, #0
    3cb6:	str	r3, [sp, #52]	; 0x34
    3cb8:	ble.w	4116 <_dtoa_r+0x9d6>
    3cbc:	mov	r6, r7
    3cbe:	mov	r5, r7
    3cc0:	movs	r1, #0
    3cc2:	cmp	r6, #23
    3cc4:	str	r1, [r4, #68]	; 0x44
    3cc6:	bls.n	3cde <_dtoa_r+0x59e>
    3cc8:	movs	r2, #1
    3cca:	movs	r3, #4
    3ccc:	lsls	r3, r3, #1
    3cce:	add.w	r0, r3, #20
    3cd2:	cmp	r0, r6
    3cd4:	mov	r1, r2
    3cd6:	add.w	r2, r2, #1
    3cda:	bls.n	3ccc <_dtoa_r+0x58c>
    3cdc:	str	r1, [r4, #68]	; 0x44
    3cde:	mov	r0, r4
    3ce0:	bl	2f30 <_Balloc>
    3ce4:	cmp	r5, #14
    3ce6:	str	r0, [sp, #32]
    3ce8:	str	r0, [r4, #64]	; 0x40
    3cea:	bhi.w	393a <_dtoa_r+0x1fa>
    3cee:	ldr	r3, [sp, #56]	; 0x38
    3cf0:	cmp	r3, #0
    3cf2:	beq.w	393a <_dtoa_r+0x1fa>
    3cf6:	ldr	r1, [sp, #8]
    3cf8:	cmp	r1, #0
    3cfa:	strd	sl, fp, [sp, #56]	; 0x38
    3cfe:	ble.w	4184 <_dtoa_r+0xa44>
    3d02:	ldr	r3, [pc, #792]	; (401c <_dtoa_r+0x8dc>)
    3d04:	and.w	r2, r1, #15
    3d08:	add.w	r2, r3, r2, lsl #3
    3d0c:	asrs	r3, r1, #4
    3d0e:	lsls	r6, r3, #27
    3d10:	vldr	d6, [r2]
    3d14:	bpl.w	410e <_dtoa_r+0x9ce>
    3d18:	ldr	r2, [pc, #772]	; (4020 <_dtoa_r+0x8e0>)
    3d1a:	vldr	d7, [r2, #32]
    3d1e:	vmov	d4, sl, fp
    3d22:	and.w	r3, r3, #15
    3d26:	movs	r1, #3
    3d28:	vdiv.f64	d5, d4, d7
    3d2c:	cbz	r3, 3d46 <_dtoa_r+0x606>
    3d2e:	ldr	r2, [pc, #752]	; (4020 <_dtoa_r+0x8e0>)
    3d30:	lsls	r5, r3, #31
    3d32:	bpl.n	3d3e <_dtoa_r+0x5fe>
    3d34:	vldr	d7, [r2]
    3d38:	adds	r1, #1
    3d3a:	vmul.f64	d6, d6, d7
    3d3e:	asrs	r3, r3, #1
    3d40:	add.w	r2, r2, #8
    3d44:	bne.n	3d30 <_dtoa_r+0x5f0>
    3d46:	vdiv.f64	d4, d5, d6
    3d4a:	ldr	r3, [sp, #48]	; 0x30
    3d4c:	cbz	r3, 3d5e <_dtoa_r+0x61e>
    3d4e:	vmov.f64	d7, #112	; 0x3f800000  1.0
    3d52:	vcmpe.f64	d4, d7
    3d56:	vmrs	APSR_nzcv, fpscr
    3d5a:	bmi.w	42cc <_dtoa_r+0xb8c>
    3d5e:	vmov	s15, r1
    3d62:	vcvt.f64.s32	d6, s15
    3d66:	vmov.f64	d7, #28	; 0x40e00000  7.0
    3d6a:	vfma.f64	d7, d6, d4
    3d6e:	vmov	r2, r3, d7
    3d72:	sub.w	r3, r3, #54525952	; 0x3400000
    3d76:	cmp	r7, #0
    3d78:	beq.w	40c8 <_dtoa_r+0x988>
    3d7c:	ldr	r6, [sp, #8]
    3d7e:	mov	r1, r7
    3d80:	ldr	r0, [sp, #36]	; 0x24
    3d82:	cmp	r0, #0
    3d84:	beq.w	4222 <_dtoa_r+0xae2>
    3d88:	vmov.f64	d3, #96	; 0x3f000000  0.5
    3d8c:	ldr	r0, [pc, #652]	; (401c <_dtoa_r+0x8dc>)
    3d8e:	ldr	r5, [sp, #32]
    3d90:	add.w	r0, r0, r1, lsl #3
    3d94:	vldr	d6, [r0, #-8]
    3d98:	vcvt.s32.f64	s14, d4
    3d9c:	vdiv.f64	d5, d3, d6
    3da0:	vmov	r0, s14
    3da4:	vmov	d6, r2, r3
    3da8:	adds	r0, #48	; 0x30
    3daa:	uxtb	r0, r0
    3dac:	vsub.f64	d5, d5, d6
    3db0:	vcvt.f64.s32	d7, s14
    3db4:	vsub.f64	d7, d4, d7
    3db8:	vcmpe.f64	d5, d7
    3dbc:	vmrs	APSR_nzcv, fpscr
    3dc0:	strb	r0, [r5, #0]
    3dc2:	add.w	fp, r5, #1
    3dc6:	bgt.n	3e2e <_dtoa_r+0x6ee>
    3dc8:	vmov.f64	d3, #112	; 0x3f800000  1.0
    3dcc:	vsub.f64	d6, d3, d7
    3dd0:	vcmpe.f64	d5, d6
    3dd4:	vmrs	APSR_nzcv, fpscr
    3dd8:	bgt.w	4338 <_dtoa_r+0xbf8>
    3ddc:	cmp	r1, #1
    3dde:	ble.w	417c <_dtoa_r+0xa3c>
    3de2:	vmov.f64	d4, #36	; 0x41200000  10.0
    3de6:	ldr	r3, [sp, #32]
    3de8:	add	r1, r3
    3dea:	b.n	3e02 <_dtoa_r+0x6c2>
    3dec:	vsub.f64	d6, d3, d7
    3df0:	vcmpe.f64	d6, d5
    3df4:	vmrs	APSR_nzcv, fpscr
    3df8:	bmi.w	4338 <_dtoa_r+0xbf8>
    3dfc:	cmp	fp, r1
    3dfe:	beq.w	417c <_dtoa_r+0xa3c>
    3e02:	vmul.f64	d7, d7, d4
    3e06:	vmul.f64	d5, d5, d4
    3e0a:	vcvt.s32.f64	s12, d7
    3e0e:	vmov	r3, s12
    3e12:	add.w	r0, r3, #48	; 0x30
    3e16:	uxtb	r0, r0
    3e18:	vcvt.f64.s32	d6, s12
    3e1c:	vsub.f64	d7, d7, d6
    3e20:	vcmpe.f64	d7, d5
    3e24:	vmrs	APSR_nzcv, fpscr
    3e28:	strb.w	r0, [fp], #1
    3e2c:	bpl.n	3dec <_dtoa_r+0x6ac>
    3e2e:	str	r6, [sp, #8]
    3e30:	b.n	3a0c <_dtoa_r+0x2cc>
    3e32:	movs	r3, #0
    3e34:	str	r3, [sp, #36]	; 0x24
    3e36:	cmp.w	r8, #0
    3e3a:	ble.w	411e <_dtoa_r+0x9de>
    3e3e:	mov	r6, r8
    3e40:	mov	r5, r8
    3e42:	str.w	r8, [sp, #52]	; 0x34
    3e46:	mov	r7, r8
    3e48:	b.n	3cc0 <_dtoa_r+0x580>
    3e4a:	movs	r3, #1
    3e4c:	str	r3, [sp, #36]	; 0x24
    3e4e:	b.n	3e36 <_dtoa_r+0x6f6>
    3e50:	str	r5, [sp, #28]
    3e52:	ldr	r2, [sp, #20]
    3e54:	ldr	r1, [sp, #28]
    3e56:	mov	r0, r4
    3e58:	bl	31f0 <__pow5mult>
    3e5c:	mov	r5, r0
    3e5e:	b.n	3b50 <_dtoa_r+0x410>
    3e60:	cmp	r7, #0
    3e62:	bgt.w	3958 <_dtoa_r+0x218>
    3e66:	bne.w	40ee <_dtoa_r+0x9ae>
    3e6a:	vmov.f64	d7, #20	; 0x40a00000  5.0
    3e6e:	vmul.f64	d4, d4, d7
    3e72:	vmov	d7, sl, fp
    3e76:	vcmpe.f64	d4, d7
    3e7a:	vmrs	APSR_nzcv, fpscr
    3e7e:	mov	r6, r7
    3e80:	str	r7, [sp, #20]
    3e82:	blt.w	4050 <_dtoa_r+0x910>
    3e86:	mvn.w	r3, r8
    3e8a:	ldr.w	fp, [sp, #32]
    3e8e:	str	r3, [sp, #8]
    3e90:	ldr	r1, [sp, #20]
    3e92:	mov	r0, r4
    3e94:	bl	2f7c <_Bfree>
    3e98:	cmp	r6, #0
    3e9a:	beq.w	3a0c <_dtoa_r+0x2cc>
    3e9e:	b.n	3c8c <_dtoa_r+0x54c>
    3ea0:	ldr	r2, [sp, #40]	; 0x28
    3ea2:	cmp	r2, #0
    3ea4:	beq.w	42ac <_dtoa_r+0xb6c>
    3ea8:	ldr	r2, [sp, #20]
    3eaa:	str	r2, [sp, #56]	; 0x38
    3eac:	ldr	r2, [sp, #24]
    3eae:	str	r2, [sp, #40]	; 0x28
    3eb0:	addw	r3, r3, #1075	; 0x433
    3eb4:	b.n	3a5e <_dtoa_r+0x31e>
    3eb6:	movs	r0, #28
    3eb8:	b.n	3ba4 <_dtoa_r+0x464>
    3eba:	ldr	r3, [sp, #4]
    3ebc:	cmp	r3, #1
    3ebe:	ble.w	4342 <_dtoa_r+0xc02>
    3ec2:	ldr	r3, [sp, #44]	; 0x2c
    3ec4:	str	r3, [sp, #28]
    3ec6:	movs	r0, #1
    3ec8:	b.n	3b8c <_dtoa_r+0x44c>
    3eca:	mov	r1, r6
    3ecc:	movs	r3, #0
    3ece:	movs	r2, #10
    3ed0:	mov	r0, r4
    3ed2:	bl	2f90 <__multadd>
    3ed6:	ldr	r3, [sp, #52]	; 0x34
    3ed8:	cmp	r3, #0
    3eda:	mov	r6, r0
    3edc:	ble.w	437a <_dtoa_r+0xc3a>
    3ee0:	mov	r7, r3
    3ee2:	ldr	r3, [sp, #40]	; 0x28
    3ee4:	cmp	r3, #0
    3ee6:	ble.n	3ef4 <_dtoa_r+0x7b4>
    3ee8:	mov	r1, r6
    3eea:	mov	r2, r3
    3eec:	mov	r0, r4
    3eee:	bl	3290 <__lshift>
    3ef2:	mov	r6, r0
    3ef4:	ldr	r3, [sp, #28]
    3ef6:	cmp	r3, #0
    3ef8:	bne.w	41d8 <_dtoa_r+0xa98>
    3efc:	mov	r8, r6
    3efe:	ldr	r3, [sp, #32]
    3f00:	subs	r7, #1
    3f02:	adds	r2, r3, r7
    3f04:	str	r2, [sp, #36]	; 0x24
    3f06:	and.w	r2, sl, #1
    3f0a:	str	r2, [sp, #40]	; 0x28
    3f0c:	mov	r7, r3
    3f0e:	ldr.w	fp, [sp, #20]
    3f12:	mov	r0, r5
    3f14:	mov	r1, fp
    3f16:	bl	3614 <quorem>
    3f1a:	mov	r1, r6
    3f1c:	mov	sl, r0
    3f1e:	mov	r0, r5
    3f20:	bl	3340 <__mcmp>
    3f24:	mov	r2, r8
    3f26:	mov	r1, fp
    3f28:	mov	r9, r0
    3f2a:	mov	r0, r4
    3f2c:	bl	3384 <__mdiff>
    3f30:	ldr	r3, [r0, #12]
    3f32:	mov	fp, r0
    3f34:	add.w	r2, sl, #48	; 0x30
    3f38:	cmp	r3, #0
    3f3a:	bne.n	3fd0 <_dtoa_r+0x890>
    3f3c:	mov	r1, r0
    3f3e:	mov	r0, r5
    3f40:	str	r2, [sp, #28]
    3f42:	bl	3340 <__mcmp>
    3f46:	mov	r1, fp
    3f48:	str	r0, [sp, #24]
    3f4a:	mov	r0, r4
    3f4c:	bl	2f7c <_Bfree>
    3f50:	ldr	r3, [sp, #24]
    3f52:	ldr	r2, [sp, #28]
    3f54:	cbnz	r3, 3f62 <_dtoa_r+0x822>
    3f56:	ldr	r1, [sp, #4]
    3f58:	cbnz	r1, 3f62 <_dtoa_r+0x822>
    3f5a:	ldr	r1, [sp, #40]	; 0x28
    3f5c:	cmp	r1, #0
    3f5e:	beq.w	434c <_dtoa_r+0xc0c>
    3f62:	cmp.w	r9, #0
    3f66:	blt.w	4128 <_dtoa_r+0x9e8>
    3f6a:	bne.n	3f78 <_dtoa_r+0x838>
    3f6c:	ldr	r1, [sp, #4]
    3f6e:	cbnz	r1, 3f78 <_dtoa_r+0x838>
    3f70:	ldr	r1, [sp, #40]	; 0x28
    3f72:	cmp	r1, #0
    3f74:	beq.w	4128 <_dtoa_r+0x9e8>
    3f78:	cmp	r3, #0
    3f7a:	bgt.w	4200 <_dtoa_r+0xac0>
    3f7e:	ldr	r3, [sp, #36]	; 0x24
    3f80:	strb	r2, [r7, #0]
    3f82:	add.w	r9, r7, #1
    3f86:	cmp	r7, r3
    3f88:	mov	fp, r9
    3f8a:	beq.w	421a <_dtoa_r+0xada>
    3f8e:	mov	r1, r5
    3f90:	movs	r3, #0
    3f92:	movs	r2, #10
    3f94:	mov	r0, r4
    3f96:	bl	2f90 <__multadd>
    3f9a:	cmp	r6, r8
    3f9c:	mov	r5, r0
    3f9e:	mov	r1, r6
    3fa0:	mov.w	r3, #0
    3fa4:	mov.w	r2, #10
    3fa8:	mov	r0, r4
    3faa:	beq.n	3fc4 <_dtoa_r+0x884>
    3fac:	bl	2f90 <__multadd>
    3fb0:	mov	r1, r8
    3fb2:	mov	r6, r0
    3fb4:	movs	r3, #0
    3fb6:	movs	r2, #10
    3fb8:	mov	r0, r4
    3fba:	bl	2f90 <__multadd>
    3fbe:	mov	r7, r9
    3fc0:	mov	r8, r0
    3fc2:	b.n	3f0e <_dtoa_r+0x7ce>
    3fc4:	bl	2f90 <__multadd>
    3fc8:	mov	r7, r9
    3fca:	mov	r6, r0
    3fcc:	mov	r8, r0
    3fce:	b.n	3f0e <_dtoa_r+0x7ce>
    3fd0:	mov	r1, r0
    3fd2:	mov	r0, r4
    3fd4:	str	r2, [sp, #24]
    3fd6:	bl	2f7c <_Bfree>
    3fda:	movs	r3, #1
    3fdc:	ldr	r2, [sp, #24]
    3fde:	b.n	3f62 <_dtoa_r+0x822>
    3fe0:	ldr	r1, [sp, #20]
    3fe2:	mov	r0, r5
    3fe4:	bl	3340 <__mcmp>
    3fe8:	cmp	r0, #0
    3fea:	bge.w	3bde <_dtoa_r+0x49e>
    3fee:	mov	r1, r5
    3ff0:	ldr	r5, [sp, #8]
    3ff2:	movs	r3, #0
    3ff4:	subs	r5, #1
    3ff6:	movs	r2, #10
    3ff8:	mov	r0, r4
    3ffa:	str	r5, [sp, #8]
    3ffc:	bl	2f90 <__multadd>
    4000:	ldr	r3, [sp, #36]	; 0x24
    4002:	mov	r5, r0
    4004:	cmp	r3, #0
    4006:	bne.w	3eca <_dtoa_r+0x78a>
    400a:	ldr	r3, [sp, #52]	; 0x34
    400c:	cmp	r3, #0
    400e:	ble.w	436c <_dtoa_r+0xc2c>
    4012:	mov	r7, r3
    4014:	b.n	3bec <_dtoa_r+0x4ac>
    4016:	ldr	r5, [sp, #28]
    4018:	b.n	3b50 <_dtoa_r+0x410>
    401a:	nop
    401c:	.word	0x20000438
    4020:	.word	0x20000500
    4024:	ldr	r3, [sp, #4]
    4026:	cmp	r3, #2
    4028:	ble.w	3be4 <_dtoa_r+0x4a4>
    402c:	cmp	r7, #0
    402e:	bne.w	4304 <_dtoa_r+0xbc4>
    4032:	mov	r3, r7
    4034:	ldr	r1, [sp, #20]
    4036:	movs	r2, #5
    4038:	mov	r0, r4
    403a:	bl	2f90 <__multadd>
    403e:	mov	r1, r0
    4040:	str	r0, [sp, #20]
    4042:	mov	r0, r5
    4044:	bl	3340 <__mcmp>
    4048:	cmp	r0, #0
    404a:	str	r5, [sp, #28]
    404c:	ble.w	3e86 <_dtoa_r+0x746>
    4050:	ldr	r2, [sp, #8]
    4052:	ldr	r1, [sp, #32]
    4054:	movs	r3, #49	; 0x31
    4056:	adds	r2, #1
    4058:	str	r2, [sp, #8]
    405a:	strb	r3, [r1, #0]
    405c:	add.w	fp, r1, #1
    4060:	b.n	3e90 <_dtoa_r+0x750>
    4062:	ldr	r2, [sp, #8]
    4064:	adds	r2, #1
    4066:	str	r2, [sp, #8]
    4068:	ldr	r2, [sp, #32]
    406a:	movs	r3, #49	; 0x31
    406c:	strb	r3, [r2, #0]
    406e:	b.n	3c6c <_dtoa_r+0x52c>
    4070:	movs	r3, #1
    4072:	str	r3, [sp, #36]	; 0x24
    4074:	b.n	3cae <_dtoa_r+0x56e>
    4076:	cmp.w	sl, #0
    407a:	bne.w	3b76 <_dtoa_r+0x436>
    407e:	ubfx	r3, fp, #0, #20
    4082:	cmp	r3, #0
    4084:	bne.w	42be <_dtoa_r+0xb7e>
    4088:	bic.w	r3, fp, #2147483648	; 0x80000000
    408c:	lsrs	r3, r3, #20
    408e:	lsls	r3, r3, #20
    4090:	cmp	r3, #0
    4092:	beq.w	433e <_dtoa_r+0xbfe>
    4096:	ldr	r3, [sp, #24]
    4098:	adds	r3, #1
    409a:	str	r3, [sp, #24]
    409c:	movs	r3, #1
    409e:	add.w	r9, r9, #1
    40a2:	str	r3, [sp, #28]
    40a4:	ldr	r3, [sp, #44]	; 0x2c
    40a6:	movs	r0, #1
    40a8:	cmp	r3, #0
    40aa:	beq.w	3b8c <_dtoa_r+0x44c>
    40ae:	b.n	3b7a <_dtoa_r+0x43a>
    40b0:	vmov	s15, r1
    40b4:	vcvt.f64.s32	d6, s15
    40b8:	vmov.f64	d7, #28	; 0x40e00000  7.0
    40bc:	vfma.f64	d7, d4, d6
    40c0:	vmov	r2, r3, d7
    40c4:	sub.w	r3, r3, #54525952	; 0x3400000
    40c8:	vmov	d6, r2, r3
    40cc:	vmov.f64	d7, #20	; 0x40a00000  5.0
    40d0:	vsub.f64	d7, d4, d7
    40d4:	vcmpe.f64	d7, d6
    40d8:	vmrs	APSR_nzcv, fpscr
    40dc:	bgt.w	429a <_dtoa_r+0xb5a>
    40e0:	vneg.f64	d6, d6
    40e4:	vcmpe.f64	d7, d6
    40e8:	vmrs	APSR_nzcv, fpscr
    40ec:	bpl.n	417c <_dtoa_r+0xa3c>
    40ee:	movs	r3, #0
    40f0:	str	r3, [sp, #20]
    40f2:	mov	r6, r3
    40f4:	b.n	3e86 <_dtoa_r+0x746>
    40f6:	ldr	r0, [sp, #32]
    40f8:	b.w	37ae <_dtoa_r+0x6e>
    40fc:	ldr	r3, [sp, #20]
    40fe:	ldr	r1, [sp, #44]	; 0x2c
    4100:	str	r2, [sp, #20]
    4102:	subs	r3, r2, r3
    4104:	add	r1, r3
    4106:	movs	r3, #0
    4108:	str	r1, [sp, #44]	; 0x2c
    410a:	str	r3, [sp, #56]	; 0x38
    410c:	b.n	3a52 <_dtoa_r+0x312>
    410e:	vldr	d5, [sp, #56]	; 0x38
    4112:	movs	r1, #2
    4114:	b.n	3d2c <_dtoa_r+0x5ec>
    4116:	mov	r5, r7
    4118:	movs	r1, #0
    411a:	str	r1, [r4, #68]	; 0x44
    411c:	b.n	3cde <_dtoa_r+0x59e>
    411e:	movs	r5, #1
    4120:	str	r5, [sp, #52]	; 0x34
    4122:	mov	r7, r5
    4124:	mov	r8, r5
    4126:	b.n	4118 <_dtoa_r+0x9d8>
    4128:	cmp	r3, #0
    412a:	mov	r9, r2
    412c:	ble.n	4152 <_dtoa_r+0xa12>
    412e:	mov	r1, r5
    4130:	movs	r2, #1
    4132:	mov	r0, r4
    4134:	bl	3290 <__lshift>
    4138:	ldr	r1, [sp, #20]
    413a:	mov	r5, r0
    413c:	bl	3340 <__mcmp>
    4140:	cmp	r0, #0
    4142:	ble.w	435e <_dtoa_r+0xc1e>
    4146:	cmp.w	r9, #57	; 0x39
    414a:	beq.w	4308 <_dtoa_r+0xbc8>
    414e:	add.w	r9, sl, #49	; 0x31
    4152:	mov	sl, r6
    4154:	strb.w	r9, [r7]
    4158:	add.w	fp, r7, #1
    415c:	mov	r6, r8
    415e:	str	r5, [sp, #28]
    4160:	b.n	3c6c <_dtoa_r+0x52c>
    4162:	bne.n	416e <_dtoa_r+0xa2e>
    4164:	tst.w	r9, #1
    4168:	beq.n	416e <_dtoa_r+0xa2e>
    416a:	b.n	3c4a <_dtoa_r+0x50a>
    416c:	mov	fp, r2
    416e:	ldrb.w	r3, [fp, #-1]
    4172:	cmp	r3, #48	; 0x30
    4174:	add.w	r2, fp, #4294967295
    4178:	beq.n	416c <_dtoa_r+0xa2c>
    417a:	b.n	3c6c <_dtoa_r+0x52c>
    417c:	ldrd	sl, fp, [sp, #56]	; 0x38
    4180:	b.w	393a <_dtoa_r+0x1fa>
    4184:	ldr	r3, [sp, #8]
    4186:	negs	r3, r3
    4188:	cmp	r3, #0
    418a:	beq.w	42c4 <_dtoa_r+0xb84>
    418e:	ldr	r2, [pc, #556]	; (43bc <_dtoa_r+0xc7c>)
    4190:	and.w	r1, r3, #15
    4194:	add.w	r2, r2, r1, lsl #3
    4198:	vldr	d7, [r2]
    419c:	vldr	d6, [sp, #56]	; 0x38
    41a0:	asrs	r3, r3, #4
    41a2:	vmul.f64	d4, d6, d7
    41a6:	beq.w	4376 <_dtoa_r+0xc36>
    41aa:	ldr	r2, [pc, #532]	; (43c0 <_dtoa_r+0xc80>)
    41ac:	movs	r1, #2
    41ae:	lsls	r0, r3, #31
    41b0:	bpl.n	41bc <_dtoa_r+0xa7c>
    41b2:	vldr	d7, [r2]
    41b6:	adds	r1, #1
    41b8:	vmul.f64	d4, d4, d7
    41bc:	asrs	r3, r3, #1
    41be:	add.w	r2, r2, #8
    41c2:	bne.n	41ae <_dtoa_r+0xa6e>
    41c4:	b.n	3d4a <_dtoa_r+0x60a>
    41c6:	ldr	r1, [sp, #32]
    41c8:	movs	r2, #48	; 0x30
    41ca:	strb	r2, [r1, #0]
    41cc:	ldr	r2, [sp, #8]
    41ce:	ldrb.w	r0, [fp, #-1]
    41d2:	adds	r2, #1
    41d4:	str	r2, [sp, #8]
    41d6:	b.n	3a08 <_dtoa_r+0x2c8>
    41d8:	ldr	r1, [r6, #4]
    41da:	mov	r0, r4
    41dc:	bl	2f30 <_Balloc>
    41e0:	ldr	r3, [r6, #16]
    41e2:	adds	r2, r3, #2
    41e4:	mov	r8, r0
    41e6:	lsls	r2, r2, #2
    41e8:	add.w	r1, r6, #12
    41ec:	adds	r0, #12
    41ee:	bl	19d0 <memcpy>
    41f2:	mov	r1, r8
    41f4:	movs	r2, #1
    41f6:	mov	r0, r4
    41f8:	bl	3290 <__lshift>
    41fc:	mov	r8, r0
    41fe:	b.n	3efe <_dtoa_r+0x7be>
    4200:	cmp	r2, #57	; 0x39
    4202:	beq.w	4308 <_dtoa_r+0xbc8>
    4206:	add.w	r9, r2, #1
    420a:	mov	sl, r6
    420c:	strb.w	r9, [r7]
    4210:	add.w	fp, r7, #1
    4214:	mov	r6, r8
    4216:	str	r5, [sp, #28]
    4218:	b.n	3c6c <_dtoa_r+0x52c>
    421a:	mov	sl, r6
    421c:	mov	r9, r2
    421e:	mov	r6, r8
    4220:	b.n	3c32 <_dtoa_r+0x4f2>
    4222:	ldr	r0, [pc, #408]	; (43bc <_dtoa_r+0xc7c>)
    4224:	vcvt.s32.f64	s12, d4
    4228:	subs	r5, r1, #1
    422a:	add.w	r0, r0, r5, lsl #3
    422e:	vmov	d7, r2, r3
    4232:	vldr	d3, [r0]
    4236:	vmov	r3, s12
    423a:	vmul.f64	d3, d3, d7
    423e:	ldr	r0, [sp, #32]
    4240:	adds	r3, #48	; 0x30
    4242:	cmp	r1, #1
    4244:	vcvt.f64.s32	d6, s12
    4248:	strb	r3, [r0, #0]
    424a:	add.w	fp, r0, #1
    424e:	vsub.f64	d7, d4, d6
    4252:	beq.n	427e <_dtoa_r+0xb3e>
    4254:	vmov.f64	d5, #36	; 0x41200000  10.0
    4258:	ldr	r3, [sp, #32]
    425a:	add	r1, r3
    425c:	mov	r3, fp
    425e:	vmul.f64	d7, d7, d5
    4262:	vcvt.s32.f64	s12, d7
    4266:	vmov	r2, s12
    426a:	adds	r2, #48	; 0x30
    426c:	strb.w	r2, [r3], #1
    4270:	cmp	r1, r3
    4272:	vcvt.f64.s32	d6, s12
    4276:	vsub.f64	d7, d7, d6
    427a:	bne.n	425e <_dtoa_r+0xb1e>
    427c:	add	fp, r5
    427e:	vmov.f64	d6, #96	; 0x3f000000  0.5
    4282:	vadd.f64	d5, d3, d6
    4286:	vcmpe.f64	d5, d7
    428a:	vmrs	APSR_nzcv, fpscr
    428e:	bpl.n	4318 <_dtoa_r+0xbd8>
    4290:	str	r6, [sp, #8]
    4292:	ldrb.w	r0, [fp, #-1]
    4296:	b.w	39ee <_dtoa_r+0x2ae>
    429a:	movs	r3, #0
    429c:	str	r3, [sp, #20]
    429e:	mov	r6, r3
    42a0:	b.n	4050 <_dtoa_r+0x910>
    42a2:	subs	r3, r3, r7
    42a4:	str	r3, [sp, #40]	; 0x28
    42a6:	movs	r3, #0
    42a8:	b.w	3a5e <_dtoa_r+0x31e>
    42ac:	ldr	r2, [sp, #20]
    42ae:	ldr	r3, [sp, #64]	; 0x40
    42b0:	str	r2, [sp, #56]	; 0x38
    42b2:	ldr	r2, [sp, #24]
    42b4:	str	r2, [sp, #40]	; 0x28
    42b6:	rsb	r3, r3, #54	; 0x36
    42ba:	b.w	3a5e <_dtoa_r+0x31e>
    42be:	movs	r3, #0
    42c0:	str	r3, [sp, #28]
    42c2:	b.n	40a4 <_dtoa_r+0x964>
    42c4:	vldr	d4, [sp, #56]	; 0x38
    42c8:	movs	r1, #2
    42ca:	b.n	3d4a <_dtoa_r+0x60a>
    42cc:	cmp	r7, #0
    42ce:	beq.w	40b0 <_dtoa_r+0x970>
    42d2:	ldr	r0, [sp, #52]	; 0x34
    42d4:	cmp	r0, #0
    42d6:	ble.w	417c <_dtoa_r+0xa3c>
    42da:	vmov.f64	d5, #36	; 0x41200000  10.0
    42de:	vmov.f64	d7, #28	; 0x40e00000  7.0
    42e2:	adds	r1, #1
    42e4:	vmov	s13, r1
    42e8:	vmul.f64	d4, d4, d5
    42ec:	ldr	r3, [sp, #8]
    42ee:	vcvt.f64.s32	d6, s13
    42f2:	subs	r6, r3, #1
    42f4:	vfma.f64	d7, d4, d6
    42f8:	vmov	r2, r3, d7
    42fc:	mov	r1, r0
    42fe:	sub.w	r3, r3, #54525952	; 0x3400000
    4302:	b.n	3d80 <_dtoa_r+0x640>
    4304:	str	r5, [sp, #28]
    4306:	b.n	3e86 <_dtoa_r+0x746>
    4308:	movs	r2, #57	; 0x39
    430a:	mov	sl, r6
    430c:	str	r5, [sp, #28]
    430e:	mov	r6, r8
    4310:	strb	r2, [r7, #0]
    4312:	add.w	fp, r7, #1
    4316:	b.n	3c4e <_dtoa_r+0x50e>
    4318:	vsub.f64	d6, d6, d3
    431c:	vcmpe.f64	d6, d7
    4320:	vmrs	APSR_nzcv, fpscr
    4324:	bgt.n	432a <_dtoa_r+0xbea>
    4326:	b.n	417c <_dtoa_r+0xa3c>
    4328:	mov	fp, r2
    432a:	ldrb.w	r3, [fp, #-1]
    432e:	cmp	r3, #48	; 0x30
    4330:	add.w	r2, fp, #4294967295
    4334:	beq.n	4328 <_dtoa_r+0xbe8>
    4336:	b.n	3e2e <_dtoa_r+0x6ee>
    4338:	str	r6, [sp, #8]
    433a:	b.w	39ee <_dtoa_r+0x2ae>
    433e:	str	r3, [sp, #28]
    4340:	b.n	40a4 <_dtoa_r+0x964>
    4342:	cmp.w	sl, #0
    4346:	bne.w	3ec2 <_dtoa_r+0x782>
    434a:	b.n	407e <_dtoa_r+0x93e>
    434c:	cmp	r2, #57	; 0x39
    434e:	mov	fp, r9
    4350:	mov	r9, r2
    4352:	beq.n	4308 <_dtoa_r+0xbc8>
    4354:	cmp.w	fp, #0
    4358:	bgt.w	414e <_dtoa_r+0xa0e>
    435c:	b.n	4152 <_dtoa_r+0xa12>
    435e:	bne.w	4152 <_dtoa_r+0xa12>
    4362:	tst.w	r9, #1
    4366:	beq.w	4152 <_dtoa_r+0xa12>
    436a:	b.n	4146 <_dtoa_r+0xa06>
    436c:	ldr	r3, [sp, #4]
    436e:	cmp	r3, #2
    4370:	bgt.n	4384 <_dtoa_r+0xc44>
    4372:	ldr	r7, [sp, #52]	; 0x34
    4374:	b.n	3bec <_dtoa_r+0x4ac>
    4376:	movs	r1, #2
    4378:	b.n	3d4a <_dtoa_r+0x60a>
    437a:	ldr	r3, [sp, #4]
    437c:	cmp	r3, #2
    437e:	bgt.n	4384 <_dtoa_r+0xc44>
    4380:	ldr	r7, [sp, #52]	; 0x34
    4382:	b.n	3ee2 <_dtoa_r+0x7a2>
    4384:	ldr	r7, [sp, #52]	; 0x34
    4386:	b.n	402c <_dtoa_r+0x8ec>
    4388:	movs	r3, #1
    438a:	str	r3, [sp, #56]	; 0x38
    438c:	b.w	38d2 <_dtoa_r+0x192>
    4390:	beq.w	3bb2 <_dtoa_r+0x472>
    4394:	rsb	r0, r0, #60	; 0x3c
    4398:	b.n	3ba4 <_dtoa_r+0x464>
    439a:	movs	r5, #0
    439c:	str	r5, [r4, #68]	; 0x44
    439e:	mov	r1, r5
    43a0:	mov	r0, r4
    43a2:	bl	2f30 <_Balloc>
    43a6:	mov.w	r7, #4294967295
    43aa:	movs	r3, #1
    43ac:	str	r0, [sp, #32]
    43ae:	mov	r8, r5
    43b0:	str	r0, [r4, #64]	; 0x40
    43b2:	str	r7, [sp, #52]	; 0x34
    43b4:	str	r3, [sp, #36]	; 0x24
    43b6:	b.w	393a <_dtoa_r+0x1fa>
    43ba:	nop
    43bc:	.word	0x20000438
    43c0:	.word	0x20000500
    43c4:	.word	0x00000000

000043c8 <_svfprintf_r>:
    43c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43cc:	vpush	{d8-d10}
    43d0:	sub	sp, #228	; 0xe4
    43d2:	mov	r4, r1
    43d4:	str	r1, [sp, #12]
    43d6:	mov	sl, r2
    43d8:	str	r3, [sp, #36]	; 0x24
    43da:	str	r0, [sp, #20]
    43dc:	bl	2e74 <_localeconv_r>
    43e0:	ldr	r3, [r0, #0]
    43e2:	str	r3, [sp, #64]	; 0x40
    43e4:	mov	r0, r3
    43e6:	bl	2a80 <strlen>
    43ea:	ldrh	r3, [r4, #12]
    43ec:	str	r0, [sp, #60]	; 0x3c
    43ee:	lsls	r1, r3, #24
    43f0:	bpl.n	43fa <_svfprintf_r+0x32>
    43f2:	ldr	r3, [r4, #16]
    43f4:	cmp	r3, #0
    43f6:	beq.w	54f4 <_svfprintf_r+0x112c>
    43fa:	movs	r3, #0
    43fc:	vldr	d8, [pc, #656]	; 4690 <_svfprintf_r+0x2c8>
    4400:	vldr	d9, [pc, #660]	; 4698 <_svfprintf_r+0x2d0>
    4404:	str	r3, [sp, #52]	; 0x34
    4406:	str	r3, [sp, #116]	; 0x74
    4408:	str	r3, [sp, #112]	; 0x70
    440a:	str	r3, [sp, #68]	; 0x44
    440c:	str	r3, [sp, #24]
    440e:	add	r3, sp, #160	; 0xa0
    4410:	str	r3, [sp, #108]	; 0x6c
    4412:	mov	r9, r3
    4414:	ldrb.w	r3, [sl]
    4418:	mov	r4, sl
    441a:	cbz	r3, 4458 <_svfprintf_r+0x90>
    441c:	cmp	r3, #37	; 0x25
    441e:	bne.n	4426 <_svfprintf_r+0x5e>
    4420:	b.n	4458 <_svfprintf_r+0x90>
    4422:	cmp	r3, #37	; 0x25
    4424:	beq.n	442e <_svfprintf_r+0x66>
    4426:	ldrb.w	r3, [r4, #1]!
    442a:	cmp	r3, #0
    442c:	bne.n	4422 <_svfprintf_r+0x5a>
    442e:	rsb	r5, sl, r4
    4432:	cbz	r5, 4458 <_svfprintf_r+0x90>
    4434:	ldr	r3, [sp, #112]	; 0x70
    4436:	ldr	r2, [sp, #116]	; 0x74
    4438:	str.w	sl, [r9]
    443c:	adds	r3, #1
    443e:	add	r2, r5
    4440:	cmp	r3, #7
    4442:	str.w	r5, [r9, #4]
    4446:	str	r2, [sp, #116]	; 0x74
    4448:	str	r3, [sp, #112]	; 0x70
    444a:	bgt.w	4594 <_svfprintf_r+0x1cc>
    444e:	add.w	r9, r9, #8
    4452:	ldr	r3, [sp, #24]
    4454:	add	r3, r5
    4456:	str	r3, [sp, #24]
    4458:	ldrb	r3, [r4, #0]
    445a:	cmp	r3, #0
    445c:	beq.w	45a6 <_svfprintf_r+0x1de>
    4460:	movs	r3, #0
    4462:	mov	r2, r3
    4464:	strb.w	r3, [sp, #79]	; 0x4f
    4468:	mov	r1, r3
    446a:	str	r3, [sp, #28]
    446c:	mov	fp, r3
    446e:	mov.w	r8, #4294967295
    4472:	ldrb	r3, [r4, #1]
    4474:	add.w	sl, r4, #1
    4478:	mov	r5, r8
    447a:	add.w	sl, sl, #1
    447e:	sub.w	r0, r3, #32
    4482:	cmp	r0, #88	; 0x58
    4484:	bhi.w	4c78 <_svfprintf_r+0x8b0>
    4488:	tbh	[pc, r0, lsl #1]
    448c:	.word	0x03f60363
    4490:	.word	0x036b03f6
    4494:	.word	0x03f603f6
    4498:	.word	0x03f603f6
    449c:	.word	0x03f603f6
    44a0:	.word	0x037e0370
    44a4:	.word	0x005d03f6
    44a8:	.word	0x03f600df
    44ac:	.word	0x010c00fb
    44b0:	.word	0x010c010c
    44b4:	.word	0x010c010c
    44b8:	.word	0x010c010c
    44bc:	.word	0x010c010c
    44c0:	.word	0x03f603f6
    44c4:	.word	0x03f603f6
    44c8:	.word	0x03f603f6
    44cc:	.word	0x03f603f6
    44d0:	.word	0x03f603f6
    44d4:	.word	0x015e011c
    44d8:	.word	0x015e03f6
    44dc:	.word	0x03f603f6
    44e0:	.word	0x03f603f6
    44e4:	.word	0x03f602a1
    44e8:	.word	0x02a603f6
    44ec:	.word	0x03f603f6
    44f0:	.word	0x03f603f6
    44f4:	.word	0x02d803f6
    44f8:	.word	0x03f603f6
    44fc:	.word	0x03f60305
    4500:	.word	0x03f603f6
    4504:	.word	0x03f603f6
    4508:	.word	0x03f603f6
    450c:	.word	0x03f603f6
    4510:	.word	0x034303f6
    4514:	.word	0x015e0356
    4518:	.word	0x015e015e
    451c:	.word	0x0356035e
    4520:	.word	0x03f603f6
    4524:	.word	0x03f603a4
    4528:	.word	0x00a203b1
    452c:	.word	0x03c30062
    4530:	.word	0x03c803f6
    4534:	.word	0x038303f6
    4538:	.word	0x03f603f6
    453c:	.short	0x038b
    453e:	ldr	r0, [sp, #28]
    4540:	str	r3, [sp, #36]	; 0x24
    4542:	negs	r0, r0
    4544:	str	r0, [sp, #28]
    4546:	orr.w	fp, fp, #4
    454a:	ldrb.w	r3, [sl]
    454e:	b.n	447a <_svfprintf_r+0xb2>
    4550:	mov	r8, r5
    4552:	ldr	r0, [sp, #36]	; 0x24
    4554:	movs	r1, #0
    4556:	movs	r3, #48	; 0x30
    4558:	movs	r2, #120	; 0x78
    455a:	cmp	r8, r1
    455c:	strb.w	r3, [sp, #80]	; 0x50
    4560:	ldr	r4, [r0, #0]
    4562:	strb.w	r2, [sp, #81]	; 0x51
    4566:	add.w	r7, r0, #4
    456a:	mov.w	r5, #0
    456e:	strb.w	r1, [sp, #79]	; 0x4f
    4572:	orr.w	r3, fp, #2
    4576:	blt.w	4cb2 <_svfprintf_r+0x8ea>
    457a:	bic.w	r3, fp, #128	; 0x80
    457e:	orr.w	fp, r3, #2
    4582:	orrs.w	r3, r4, r5
    4586:	str	r7, [sp, #36]	; 0x24
    4588:	beq.w	4c5e <_svfprintf_r+0x896>
    458c:	mov	r7, r1
    458e:	str	r2, [sp, #48]	; 0x30
    4590:	ldr	r0, [pc, #268]	; (46a0 <_svfprintf_r+0x2d8>)
    4592:	b.n	4af2 <_svfprintf_r+0x72a>
    4594:	add	r2, sp, #108	; 0x6c
    4596:	ldr	r1, [sp, #12]
    4598:	ldr	r0, [sp, #20]
    459a:	bl	5938 <__ssprint_r>
    459e:	cbnz	r0, 45b4 <_svfprintf_r+0x1ec>
    45a0:	add.w	r9, sp, #160	; 0xa0
    45a4:	b.n	4452 <_svfprintf_r+0x8a>
    45a6:	ldr	r3, [sp, #116]	; 0x74
    45a8:	cbz	r3, 45b4 <_svfprintf_r+0x1ec>
    45aa:	ldr	r0, [sp, #20]
    45ac:	ldr	r1, [sp, #12]
    45ae:	add	r2, sp, #108	; 0x6c
    45b0:	bl	5938 <__ssprint_r>
    45b4:	ldr	r3, [sp, #12]
    45b6:	ldrh	r3, [r3, #12]
    45b8:	tst.w	r3, #64	; 0x40
    45bc:	ldr	r3, [sp, #24]
    45be:	it	ne
    45c0:	movne.w	r3, #4294967295
    45c4:	mov	r0, r3
    45c6:	add	sp, #228	; 0xe4
    45c8:	vpop	{d8-d10}
    45cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45d0:	str	r3, [sp, #48]	; 0x30
    45d2:	mov	r8, r5
    45d4:	cmp	r2, #0
    45d6:	bne.w	590e <_svfprintf_r+0x1546>
    45da:	ands.w	r3, fp, #32
    45de:	beq.w	49ee <_svfprintf_r+0x626>
    45e2:	ldr	r7, [sp, #36]	; 0x24
    45e4:	adds	r7, #7
    45e6:	bic.w	r3, r7, #7
    45ea:	movs	r7, #0
    45ec:	add.w	r2, r3, #8
    45f0:	cmp	r8, r7
    45f2:	str	r2, [sp, #36]	; 0x24
    45f4:	ldrd	r4, r5, [r3]
    45f8:	strb.w	r7, [sp, #79]	; 0x4f
    45fc:	blt.w	52bc <_svfprintf_r+0xef4>
    4600:	orrs.w	r3, r4, r5
    4604:	bic.w	fp, fp, #128	; 0x80
    4608:	beq.w	4ca2 <_svfprintf_r+0x8da>
    460c:	add	r6, sp, #160	; 0xa0
    460e:	lsrs	r2, r4, #3
    4610:	orr.w	r2, r2, r5, lsl #29
    4614:	lsrs	r1, r5, #3
    4616:	and.w	r3, r4, #7
    461a:	mov	r5, r1
    461c:	mov	r4, r2
    461e:	adds	r3, #48	; 0x30
    4620:	orrs.w	r2, r4, r5
    4624:	strb.w	r3, [r6, #-1]!
    4628:	bne.n	460e <_svfprintf_r+0x246>
    462a:	tst.w	fp, #1
    462e:	beq.w	4a80 <_svfprintf_r+0x6b8>
    4632:	cmp	r3, #48	; 0x30
    4634:	beq.w	4a80 <_svfprintf_r+0x6b8>
    4638:	movs	r2, #48	; 0x30
    463a:	subs	r3, r6, #1
    463c:	strb.w	r2, [r6, #-1]
    4640:	add	r2, sp, #160	; 0xa0
    4642:	subs	r2, r2, r3
    4644:	str	r2, [sp, #32]
    4646:	mov	r6, r3
    4648:	b.n	4a86 <_svfprintf_r+0x6be>
    464a:	ldrb.w	r3, [sl]
    464e:	cmp	r3, #42	; 0x2a
    4650:	add.w	r4, sl, #1
    4654:	beq.w	58b6 <_svfprintf_r+0x14ee>
    4658:	sub.w	r0, r3, #48	; 0x30
    465c:	cmp	r0, #9
    465e:	it	ls
    4660:	movls	r5, #0
    4662:	bhi.w	5810 <_svfprintf_r+0x1448>
    4666:	ldrb.w	r3, [r4], #1
    466a:	add.w	r5, r5, r5, lsl #2
    466e:	add.w	r5, r0, r5, lsl #1
    4672:	sub.w	r0, r3, #48	; 0x30
    4676:	cmp	r0, #9
    4678:	bls.n	4666 <_svfprintf_r+0x29e>
    467a:	orr.w	r5, r5, r5, asr #31
    467e:	mov	sl, r4
    4680:	b.n	447e <_svfprintf_r+0xb6>
    4682:	orr.w	fp, fp, #128	; 0x80
    4686:	ldrb.w	r3, [sl]
    468a:	b.n	447a <_svfprintf_r+0xb2>
    468c:	nop.w
	...
    4698:	.word	0xffffffff
    469c:	.word	0x7fefffff
    46a0:	.word	0x2000057c
    46a4:	sub.w	r0, r3, #48	; 0x30
    46a8:	movs	r3, #0
    46aa:	mov	r4, r3
    46ac:	ldrb.w	r3, [sl], #1
    46b0:	add.w	r4, r4, r4, lsl #2
    46b4:	add.w	r4, r0, r4, lsl #1
    46b8:	sub.w	r0, r3, #48	; 0x30
    46bc:	cmp	r0, #9
    46be:	bls.n	46ac <_svfprintf_r+0x2e4>
    46c0:	str	r4, [sp, #28]
    46c2:	b.n	447e <_svfprintf_r+0xb6>
    46c4:	str	r3, [sp, #48]	; 0x30
    46c6:	mov	r8, r5
    46c8:	cmp	r2, #0
    46ca:	bne.w	5926 <_svfprintf_r+0x155e>
    46ce:	orr.w	fp, fp, #16
    46d2:	tst.w	fp, #32
    46d6:	beq.w	50e0 <_svfprintf_r+0xd18>
    46da:	ldr	r7, [sp, #36]	; 0x24
    46dc:	adds	r7, #7
    46de:	bic.w	r7, r7, #7
    46e2:	ldrd	r2, r3, [r7]
    46e6:	add.w	r1, r7, #8
    46ea:	str	r1, [sp, #36]	; 0x24
    46ec:	mov	r4, r2
    46ee:	mov	r5, r3
    46f0:	cmp	r2, #0
    46f2:	sbcs.w	r3, r3, #0
    46f6:	blt.w	5168 <_svfprintf_r+0xda0>
    46fa:	cmp.w	r8, #0
    46fe:	ldrb.w	r7, [sp, #79]	; 0x4f
    4702:	blt.w	4a70 <_svfprintf_r+0x6a8>
    4706:	orrs.w	r3, r4, r5
    470a:	bic.w	fp, fp, #128	; 0x80
    470e:	beq.w	4efe <_svfprintf_r+0xb36>
    4712:	cmp	r5, #0
    4714:	it	eq
    4716:	cmpeq	r4, #10
    4718:	bcc.w	4a78 <_svfprintf_r+0x6b0>
    471c:	add	r6, sp, #160	; 0xa0
    471e:	mov	r0, r4
    4720:	mov	r1, r5
    4722:	movs	r2, #10
    4724:	movs	r3, #0
    4726:	bl	5a38 <__aeabi_uldivmod>
    472a:	adds	r2, #48	; 0x30
    472c:	strb.w	r2, [r6, #-1]!
    4730:	mov	r0, r4
    4732:	mov	r1, r5
    4734:	movs	r3, #0
    4736:	movs	r2, #10
    4738:	bl	5a38 <__aeabi_uldivmod>
    473c:	mov	r4, r0
    473e:	mov	r5, r1
    4740:	orrs.w	r3, r4, r5
    4744:	bne.n	471e <_svfprintf_r+0x356>
    4746:	b.n	4a80 <_svfprintf_r+0x6b8>
    4748:	str	r3, [sp, #48]	; 0x30
    474a:	mov	r8, r5
    474c:	cmp	r2, #0
    474e:	bne.w	591e <_svfprintf_r+0x1556>
    4752:	ldr	r7, [sp, #36]	; 0x24
    4754:	tst.w	fp, #8
    4758:	add.w	r7, r7, #7
    475c:	beq.w	53e0 <_svfprintf_r+0x1018>
    4760:	bic.w	r3, r7, #7
    4764:	vldr	d8, [r3]
    4768:	add.w	r2, r3, #8
    476c:	str	r2, [sp, #36]	; 0x24
    476e:	vabs.f64	d7, d8
    4772:	vcmp.f64	d7, d9
    4776:	vmrs	APSR_nzcv, fpscr
    477a:	ble.w	52f6 <_svfprintf_r+0xf2e>
    477e:	vcmpe.f64	d8, #0.0
    4782:	vmrs	APSR_nzcv, fpscr
    4786:	bmi.w	571e <_svfprintf_r+0x1356>
    478a:	ldrb.w	r7, [sp, #79]	; 0x4f
    478e:	ldr	r6, [pc, #668]	; (4a2c <_svfprintf_r+0x664>)
    4790:	ldr	r3, [pc, #668]	; (4a30 <_svfprintf_r+0x668>)
    4792:	ldr	r1, [sp, #48]	; 0x30
    4794:	movs	r2, #3
    4796:	mov.w	r8, #0
    479a:	str	r2, [sp, #16]
    479c:	bic.w	fp, fp, #128	; 0x80
    47a0:	cmp	r1, #71	; 0x47
    47a2:	it	le
    47a4:	movle	r6, r3
    47a6:	str	r2, [sp, #32]
    47a8:	str.w	r8, [sp, #56]	; 0x38
    47ac:	cbz	r7, 47b4 <_svfprintf_r+0x3ec>
    47ae:	ldr	r3, [sp, #16]
    47b0:	adds	r3, #1
    47b2:	str	r3, [sp, #16]
    47b4:	ands.w	r3, fp, #2
    47b8:	str	r3, [sp, #40]	; 0x28
    47ba:	beq.n	47c2 <_svfprintf_r+0x3fa>
    47bc:	ldr	r3, [sp, #16]
    47be:	adds	r3, #2
    47c0:	str	r3, [sp, #16]
    47c2:	ands.w	r3, fp, #132	; 0x84
    47c6:	str	r3, [sp, #44]	; 0x2c
    47c8:	bne.w	4ccc <_svfprintf_r+0x904>
    47cc:	ldr	r3, [sp, #28]
    47ce:	ldr	r2, [sp, #16]
    47d0:	subs	r4, r3, r2
    47d2:	cmp	r4, #0
    47d4:	ble.w	4ccc <_svfprintf_r+0x904>
    47d8:	cmp	r4, #16
    47da:	ldr	r1, [sp, #116]	; 0x74
    47dc:	ldr	r2, [sp, #112]	; 0x70
    47de:	ldr	r7, [pc, #596]	; (4a34 <_svfprintf_r+0x66c>)
    47e0:	ble.n	482a <_svfprintf_r+0x462>
    47e2:	mov	r0, r9
    47e4:	movs	r5, #16
    47e6:	mov	r9, r8
    47e8:	mov	r8, r6
    47ea:	ldr	r6, [sp, #20]
    47ec:	b.n	47f8 <_svfprintf_r+0x430>
    47ee:	subs	r4, #16
    47f0:	cmp	r4, #16
    47f2:	add.w	r0, r0, #8
    47f6:	ble.n	4824 <_svfprintf_r+0x45c>
    47f8:	adds	r2, #1
    47fa:	adds	r1, #16
    47fc:	cmp	r2, #7
    47fe:	str	r1, [sp, #116]	; 0x74
    4800:	str	r2, [sp, #112]	; 0x70
    4802:	str	r7, [r0, #0]
    4804:	str	r5, [r0, #4]
    4806:	ble.n	47ee <_svfprintf_r+0x426>
    4808:	add	r2, sp, #108	; 0x6c
    480a:	ldr	r1, [sp, #12]
    480c:	mov	r0, r6
    480e:	bl	5938 <__ssprint_r>
    4812:	cmp	r0, #0
    4814:	bne.w	45b4 <_svfprintf_r+0x1ec>
    4818:	subs	r4, #16
    481a:	cmp	r4, #16
    481c:	ldr	r1, [sp, #116]	; 0x74
    481e:	ldr	r2, [sp, #112]	; 0x70
    4820:	add	r0, sp, #160	; 0xa0
    4822:	bgt.n	47f8 <_svfprintf_r+0x430>
    4824:	mov	r6, r8
    4826:	mov	r8, r9
    4828:	mov	r9, r0
    482a:	adds	r2, #1
    482c:	adds	r3, r4, r1
    482e:	cmp	r2, #7
    4830:	str	r3, [sp, #116]	; 0x74
    4832:	str	r2, [sp, #112]	; 0x70
    4834:	str.w	r7, [r9]
    4838:	str.w	r4, [r9, #4]
    483c:	bgt.w	5004 <_svfprintf_r+0xc3c>
    4840:	ldrb.w	r7, [sp, #79]	; 0x4f
    4844:	add.w	r9, r9, #8
    4848:	cbz	r7, 4868 <_svfprintf_r+0x4a0>
    484a:	ldr	r2, [sp, #112]	; 0x70
    484c:	adds	r2, #1
    484e:	adds	r3, #1
    4850:	add.w	r0, sp, #79	; 0x4f
    4854:	movs	r1, #1
    4856:	cmp	r2, #7
    4858:	str	r3, [sp, #116]	; 0x74
    485a:	str	r2, [sp, #112]	; 0x70
    485c:	stmia.w	r9, {r0, r1}
    4860:	bgt.w	4f22 <_svfprintf_r+0xb5a>
    4864:	add.w	r9, r9, #8
    4868:	ldr	r2, [sp, #40]	; 0x28
    486a:	cbz	r2, 4888 <_svfprintf_r+0x4c0>
    486c:	ldr	r2, [sp, #112]	; 0x70
    486e:	adds	r2, #1
    4870:	adds	r3, #2
    4872:	add	r0, sp, #80	; 0x50
    4874:	movs	r1, #2
    4876:	cmp	r2, #7
    4878:	str	r3, [sp, #116]	; 0x74
    487a:	str	r2, [sp, #112]	; 0x70
    487c:	stmia.w	r9, {r0, r1}
    4880:	bgt.w	4f3a <_svfprintf_r+0xb72>
    4884:	add.w	r9, r9, #8
    4888:	ldr	r2, [sp, #44]	; 0x2c
    488a:	cmp	r2, #128	; 0x80
    488c:	beq.w	4d8c <_svfprintf_r+0x9c4>
    4890:	ldr	r2, [sp, #32]
    4892:	rsb	r4, r2, r8
    4896:	cmp	r4, #0
    4898:	ble.n	4904 <_svfprintf_r+0x53c>
    489a:	cmp	r4, #16
    489c:	ldr	r2, [sp, #112]	; 0x70
    489e:	ldr	r7, [pc, #408]	; (4a38 <_svfprintf_r+0x670>)
    48a0:	ble.n	48ea <_svfprintf_r+0x522>
    48a2:	mov	r1, r9
    48a4:	mov.w	r8, #16
    48a8:	mov	r9, r6
    48aa:	ldr	r5, [sp, #20]
    48ac:	ldr	r6, [sp, #12]
    48ae:	b.n	48ba <_svfprintf_r+0x4f2>
    48b0:	subs	r4, #16
    48b2:	cmp	r4, #16
    48b4:	add.w	r1, r1, #8
    48b8:	ble.n	48e6 <_svfprintf_r+0x51e>
    48ba:	adds	r2, #1
    48bc:	adds	r3, #16
    48be:	cmp	r2, #7
    48c0:	str	r3, [sp, #116]	; 0x74
    48c2:	str	r2, [sp, #112]	; 0x70
    48c4:	stmia.w	r1, {r7, r8}
    48c8:	ble.n	48b0 <_svfprintf_r+0x4e8>
    48ca:	add	r2, sp, #108	; 0x6c
    48cc:	mov	r1, r6
    48ce:	mov	r0, r5
    48d0:	bl	5938 <__ssprint_r>
    48d4:	cmp	r0, #0
    48d6:	bne.w	45b4 <_svfprintf_r+0x1ec>
    48da:	subs	r4, #16
    48dc:	cmp	r4, #16
    48de:	ldr	r3, [sp, #116]	; 0x74
    48e0:	ldr	r2, [sp, #112]	; 0x70
    48e2:	add	r1, sp, #160	; 0xa0
    48e4:	bgt.n	48ba <_svfprintf_r+0x4f2>
    48e6:	mov	r6, r9
    48e8:	mov	r9, r1
    48ea:	adds	r2, #1
    48ec:	add	r3, r4
    48ee:	cmp	r2, #7
    48f0:	str	r3, [sp, #116]	; 0x74
    48f2:	str	r2, [sp, #112]	; 0x70
    48f4:	str.w	r7, [r9]
    48f8:	str.w	r4, [r9, #4]
    48fc:	bgt.w	4f0a <_svfprintf_r+0xb42>
    4900:	add.w	r9, r9, #8
    4904:	tst.w	fp, #256	; 0x100
    4908:	bne.w	4cd0 <_svfprintf_r+0x908>
    490c:	ldr	r2, [sp, #112]	; 0x70
    490e:	ldr	r0, [sp, #32]
    4910:	str.w	r6, [r9]
    4914:	adds	r2, #1
    4916:	add	r3, r0
    4918:	cmp	r2, #7
    491a:	str	r3, [sp, #116]	; 0x74
    491c:	str.w	r0, [r9, #4]
    4920:	str	r2, [sp, #112]	; 0x70
    4922:	bgt.w	4eaa <_svfprintf_r+0xae2>
    4926:	add.w	r9, r9, #8
    492a:	tst.w	fp, #4
    492e:	beq.n	49ae <_svfprintf_r+0x5e6>
    4930:	ldr	r2, [sp, #28]
    4932:	ldr	r1, [sp, #16]
    4934:	subs	r4, r2, r1
    4936:	cmp	r4, #0
    4938:	ble.n	49ae <_svfprintf_r+0x5e6>
    493a:	cmp	r4, #16
    493c:	ldr	r2, [sp, #112]	; 0x70
    493e:	ldr	r7, [pc, #244]	; (4a34 <_svfprintf_r+0x66c>)
    4940:	ble.n	4988 <_svfprintf_r+0x5c0>
    4942:	movs	r5, #16
    4944:	ldr	r6, [sp, #20]
    4946:	ldr.w	r8, [sp, #12]
    494a:	b.n	4956 <_svfprintf_r+0x58e>
    494c:	subs	r4, #16
    494e:	cmp	r4, #16
    4950:	add.w	r9, r9, #8
    4954:	ble.n	4988 <_svfprintf_r+0x5c0>
    4956:	adds	r2, #1
    4958:	adds	r3, #16
    495a:	cmp	r2, #7
    495c:	str	r3, [sp, #116]	; 0x74
    495e:	str	r2, [sp, #112]	; 0x70
    4960:	str.w	r7, [r9]
    4964:	str.w	r5, [r9, #4]
    4968:	ble.n	494c <_svfprintf_r+0x584>
    496a:	add	r2, sp, #108	; 0x6c
    496c:	mov	r1, r8
    496e:	mov	r0, r6
    4970:	bl	5938 <__ssprint_r>
    4974:	cmp	r0, #0
    4976:	bne.w	45b4 <_svfprintf_r+0x1ec>
    497a:	subs	r4, #16
    497c:	cmp	r4, #16
    497e:	ldr	r3, [sp, #116]	; 0x74
    4980:	ldr	r2, [sp, #112]	; 0x70
    4982:	add.w	r9, sp, #160	; 0xa0
    4986:	bgt.n	4956 <_svfprintf_r+0x58e>
    4988:	adds	r2, #1
    498a:	add	r3, r4
    498c:	cmp	r2, #7
    498e:	str	r3, [sp, #116]	; 0x74
    4990:	str	r2, [sp, #112]	; 0x70
    4992:	str.w	r7, [r9]
    4996:	str.w	r4, [r9, #4]
    499a:	ble.n	49ae <_svfprintf_r+0x5e6>
    499c:	add	r2, sp, #108	; 0x6c
    499e:	ldr	r1, [sp, #12]
    49a0:	ldr	r0, [sp, #20]
    49a2:	bl	5938 <__ssprint_r>
    49a6:	cmp	r0, #0
    49a8:	bne.w	45b4 <_svfprintf_r+0x1ec>
    49ac:	ldr	r3, [sp, #116]	; 0x74
    49ae:	ldr	r2, [sp, #24]
    49b0:	ldr	r1, [sp, #28]
    49b2:	ldr	r0, [sp, #16]
    49b4:	cmp	r1, r0
    49b6:	ite	ge
    49b8:	addge	r2, r2, r1
    49ba:	addlt	r2, r2, r0
    49bc:	str	r2, [sp, #24]
    49be:	cmp	r3, #0
    49c0:	bne.w	4ec2 <_svfprintf_r+0xafa>
    49c4:	movs	r3, #0
    49c6:	str	r3, [sp, #112]	; 0x70
    49c8:	add.w	r9, sp, #160	; 0xa0
    49cc:	b.n	4414 <_svfprintf_r+0x4c>
    49ce:	orr.w	fp, fp, #8
    49d2:	ldrb.w	r3, [sl]
    49d6:	b.n	447a <_svfprintf_r+0xb2>
    49d8:	str	r3, [sp, #48]	; 0x30
    49da:	mov	r8, r5
    49dc:	cmp	r2, #0
    49de:	bne.w	5916 <_svfprintf_r+0x154e>
    49e2:	orr.w	fp, fp, #16
    49e6:	ands.w	r3, fp, #32
    49ea:	bne.w	45e2 <_svfprintf_r+0x21a>
    49ee:	ands.w	r2, fp, #16
    49f2:	bne.w	5118 <_svfprintf_r+0xd50>
    49f6:	ands.w	r3, fp, #64	; 0x40
    49fa:	beq.w	5118 <_svfprintf_r+0xd50>
    49fe:	ldr	r1, [sp, #36]	; 0x24
    4a00:	strb.w	r2, [sp, #79]	; 0x4f
    4a04:	mov	r3, r1
    4a06:	cmp.w	r8, #0
    4a0a:	add.w	r3, r3, #4
    4a0e:	ldrh	r4, [r1, #0]
    4a10:	mov.w	r5, #0
    4a14:	blt.w	556e <_svfprintf_r+0x11a6>
    4a18:	orrs.w	r1, r4, r5
    4a1c:	bic.w	fp, fp, #128	; 0x80
    4a20:	str	r3, [sp, #36]	; 0x24
    4a22:	beq.w	4ca2 <_svfprintf_r+0x8da>
    4a26:	mov	r7, r2
    4a28:	b.n	460c <_svfprintf_r+0x244>
    4a2a:	nop
    4a2c:	.word	0x2000055c
    4a30:	.word	0x20000558
    4a34:	.word	0x20000598
    4a38:	.word	0x20000548
    4a3c:	str	r3, [sp, #48]	; 0x30
    4a3e:	mov	r8, r5
    4a40:	cmp	r2, #0
    4a42:	bne.w	58f8 <_svfprintf_r+0x1530>
    4a46:	orr.w	fp, fp, #16
    4a4a:	ands.w	r3, fp, #32
    4a4e:	beq.w	5020 <_svfprintf_r+0xc58>
    4a52:	ldr	r7, [sp, #36]	; 0x24
    4a54:	adds	r7, #7
    4a56:	bic.w	r3, r7, #7
    4a5a:	movs	r7, #0
    4a5c:	add.w	r2, r3, #8
    4a60:	cmp	r8, r7
    4a62:	str	r2, [sp, #36]	; 0x24
    4a64:	ldrd	r4, r5, [r3]
    4a68:	strb.w	r7, [sp, #79]	; 0x4f
    4a6c:	bge.w	4706 <_svfprintf_r+0x33e>
    4a70:	orrs.w	r3, r4, r5
    4a74:	bne.w	4712 <_svfprintf_r+0x34a>
    4a78:	add	r6, sp, #224	; 0xe0
    4a7a:	adds	r4, #48	; 0x30
    4a7c:	strb.w	r4, [r6, #-65]!
    4a80:	add	r3, sp, #160	; 0xa0
    4a82:	subs	r3, r3, r6
    4a84:	str	r3, [sp, #32]
    4a86:	ldr	r3, [sp, #32]
    4a88:	cmp	r3, r8
    4a8a:	it	lt
    4a8c:	movlt	r3, r8
    4a8e:	str	r3, [sp, #16]
    4a90:	movs	r3, #0
    4a92:	str	r3, [sp, #56]	; 0x38
    4a94:	b.n	47ac <_svfprintf_r+0x3e4>
    4a96:	str	r3, [sp, #48]	; 0x30
    4a98:	mov	r8, r5
    4a9a:	cmp	r2, #0
    4a9c:	bne.w	58f0 <_svfprintf_r+0x1528>
    4aa0:	tst.w	fp, #32
    4aa4:	ldr	r0, [pc, #776]	; (4db0 <_svfprintf_r+0x9e8>)
    4aa6:	beq.w	4bb6 <_svfprintf_r+0x7ee>
    4aaa:	ldr	r7, [sp, #36]	; 0x24
    4aac:	adds	r7, #7
    4aae:	bic.w	r3, r7, #7
    4ab2:	ldrd	r4, r5, [r3]
    4ab6:	add.w	r2, r3, #8
    4aba:	str	r2, [sp, #36]	; 0x24
    4abc:	ands.w	r7, fp, #1
    4ac0:	beq.w	4f52 <_svfprintf_r+0xb8a>
    4ac4:	orrs.w	r3, r4, r5
    4ac8:	beq.w	5412 <_svfprintf_r+0x104a>
    4acc:	movs	r7, #0
    4ace:	movs	r3, #48	; 0x30
    4ad0:	ldrb.w	r2, [sp, #48]	; 0x30
    4ad4:	strb.w	r3, [sp, #80]	; 0x50
    4ad8:	cmp	r8, r7
    4ada:	strb.w	r2, [sp, #81]	; 0x51
    4ade:	strb.w	r7, [sp, #79]	; 0x4f
    4ae2:	orr.w	r3, fp, #2
    4ae6:	blt.w	5718 <_svfprintf_r+0x1350>
    4aea:	bic.w	r3, fp, #128	; 0x80
    4aee:	orr.w	fp, r3, #2
    4af2:	add	r6, sp, #160	; 0xa0
    4af4:	lsrs	r3, r4, #4
    4af6:	and.w	r1, r4, #15
    4afa:	orr.w	r3, r3, r5, lsl #28
    4afe:	lsrs	r2, r5, #4
    4b00:	mov	r4, r3
    4b02:	mov	r5, r2
    4b04:	ldrb	r3, [r0, r1]
    4b06:	strb.w	r3, [r6, #-1]!
    4b0a:	orrs.w	r3, r4, r5
    4b0e:	bne.n	4af4 <_svfprintf_r+0x72c>
    4b10:	b.n	4a80 <_svfprintf_r+0x6b8>
    4b12:	ldr	r1, [sp, #36]	; 0x24
    4b14:	str	r3, [sp, #48]	; 0x30
    4b16:	ldr	r2, [r1, #0]
    4b18:	strb.w	r2, [sp, #120]	; 0x78
    4b1c:	movs	r3, #0
    4b1e:	mov	r2, r1
    4b20:	mov	r7, r3
    4b22:	strb.w	r3, [sp, #79]	; 0x4f
    4b26:	adds	r2, #4
    4b28:	movs	r3, #1
    4b2a:	str	r3, [sp, #16]
    4b2c:	mov	r8, r7
    4b2e:	str	r7, [sp, #56]	; 0x38
    4b30:	str	r2, [sp, #36]	; 0x24
    4b32:	str	r3, [sp, #32]
    4b34:	add	r6, sp, #120	; 0x78
    4b36:	b.n	47b4 <_svfprintf_r+0x3ec>
    4b38:	str	r3, [sp, #48]	; 0x30
    4b3a:	mov	r8, r5
    4b3c:	cmp	r2, #0
    4b3e:	beq.w	46d2 <_svfprintf_r+0x30a>
    4b42:	strb.w	r1, [sp, #79]	; 0x4f
    4b46:	b.n	46d2 <_svfprintf_r+0x30a>
    4b48:	orr.w	fp, fp, #64	; 0x40
    4b4c:	ldrb.w	r3, [sl]
    4b50:	b.n	447a <_svfprintf_r+0xb2>
    4b52:	ldrb.w	r3, [sl]
    4b56:	cmp	r1, #0
    4b58:	bne.w	447a <_svfprintf_r+0xb2>
    4b5c:	movs	r2, #1
    4b5e:	movs	r1, #32
    4b60:	b.n	447a <_svfprintf_r+0xb2>
    4b62:	orr.w	fp, fp, #1
    4b66:	ldrb.w	r3, [sl]
    4b6a:	b.n	447a <_svfprintf_r+0xb2>
    4b6c:	ldr	r4, [sp, #36]	; 0x24
    4b6e:	ldr	r3, [r4, #0]
    4b70:	str	r3, [sp, #28]
    4b72:	mov	r0, r3
    4b74:	cmp	r0, #0
    4b76:	mov	r3, r4
    4b78:	add.w	r3, r3, #4
    4b7c:	blt.w	453e <_svfprintf_r+0x176>
    4b80:	str	r3, [sp, #36]	; 0x24
    4b82:	ldrb.w	r3, [sl]
    4b86:	b.n	447a <_svfprintf_r+0xb2>
    4b88:	ldrb.w	r3, [sl]
    4b8c:	movs	r2, #1
    4b8e:	movs	r1, #43	; 0x2b
    4b90:	b.n	447a <_svfprintf_r+0xb2>
    4b92:	str	r3, [sp, #48]	; 0x30
    4b94:	mov	r8, r5
    4b96:	cmp	r2, #0
    4b98:	beq.w	4a4a <_svfprintf_r+0x682>
    4b9c:	strb.w	r1, [sp, #79]	; 0x4f
    4ba0:	b.n	4a4a <_svfprintf_r+0x682>
    4ba2:	str	r3, [sp, #48]	; 0x30
    4ba4:	mov	r8, r5
    4ba6:	cmp	r2, #0
    4ba8:	bne.w	5900 <_svfprintf_r+0x1538>
    4bac:	tst.w	fp, #32
    4bb0:	ldr	r0, [pc, #512]	; (4db4 <_svfprintf_r+0x9ec>)
    4bb2:	bne.w	4aaa <_svfprintf_r+0x6e2>
    4bb6:	ldr	r2, [sp, #36]	; 0x24
    4bb8:	tst.w	fp, #16
    4bbc:	mov	r3, r2
    4bbe:	bne.w	5144 <_svfprintf_r+0xd7c>
    4bc2:	tst.w	fp, #64	; 0x40
    4bc6:	beq.w	5144 <_svfprintf_r+0xd7c>
    4bca:	adds	r3, #4
    4bcc:	ldrh	r4, [r2, #0]
    4bce:	str	r3, [sp, #36]	; 0x24
    4bd0:	movs	r5, #0
    4bd2:	b.n	4abc <_svfprintf_r+0x6f4>
    4bd4:	ldrb.w	r3, [sl]
    4bd8:	cmp	r3, #108	; 0x6c
    4bda:	ittte	eq
    4bdc:	ldrbeq.w	r3, [sl, #1]
    4be0:	orreq.w	fp, fp, #32
    4be4:	addeq.w	sl, sl, #1
    4be8:	orrne.w	fp, fp, #16
    4bec:	b.n	447a <_svfprintf_r+0xb2>
    4bee:	cmp	r2, #0
    4bf0:	bne.w	58d2 <_svfprintf_r+0x150a>
    4bf4:	tst.w	fp, #32
    4bf8:	beq.w	52c8 <_svfprintf_r+0xf00>
    4bfc:	ldr	r2, [sp, #36]	; 0x24
    4bfe:	ldr	r1, [sp, #24]
    4c00:	ldr	r3, [r2, #0]
    4c02:	asrs	r5, r1, #31
    4c04:	mov	r0, r1
    4c06:	adds	r2, #4
    4c08:	mov	r1, r5
    4c0a:	str	r2, [sp, #36]	; 0x24
    4c0c:	strd	r0, r1, [r3]
    4c10:	b.n	4414 <_svfprintf_r+0x4c>
    4c12:	orr.w	fp, fp, #32
    4c16:	ldrb.w	r3, [sl]
    4c1a:	b.n	447a <_svfprintf_r+0xb2>
    4c1c:	ldr	r2, [sp, #36]	; 0x24
    4c1e:	str	r3, [sp, #48]	; 0x30
    4c20:	ldr	r6, [r2, #0]
    4c22:	movs	r4, #0
    4c24:	strb.w	r4, [sp, #79]	; 0x4f
    4c28:	adds	r7, r2, #4
    4c2a:	cmp	r6, #0
    4c2c:	beq.w	56fa <_svfprintf_r+0x1332>
    4c30:	cmp	r5, #0
    4c32:	blt.w	557a <_svfprintf_r+0x11b2>
    4c36:	mov	r2, r5
    4c38:	mov	r1, r4
    4c3a:	mov	r0, r6
    4c3c:	bl	2e90 <memchr>
    4c40:	cmp	r0, #0
    4c42:	beq.w	57de <_svfprintf_r+0x1416>
    4c46:	subs	r3, r0, r6
    4c48:	str	r3, [sp, #32]
    4c4a:	mov	r8, r4
    4c4c:	bic.w	r3, r3, r3, asr #31
    4c50:	str	r7, [sp, #36]	; 0x24
    4c52:	str	r3, [sp, #16]
    4c54:	str.w	r8, [sp, #56]	; 0x38
    4c58:	ldrb.w	r7, [sp, #79]	; 0x4f
    4c5c:	b.n	47ac <_svfprintf_r+0x3e4>
    4c5e:	ldr	r0, [pc, #340]	; (4db4 <_svfprintf_r+0x9ec>)
    4c60:	str	r2, [sp, #48]	; 0x30
    4c62:	cmp.w	r8, #0
    4c66:	bne.w	4f72 <_svfprintf_r+0xbaa>
    4c6a:	mov	r7, r8
    4c6c:	mov.w	r8, #0
    4c70:	str.w	r8, [sp, #32]
    4c74:	add	r6, sp, #160	; 0xa0
    4c76:	b.n	4a86 <_svfprintf_r+0x6be>
    4c78:	str	r3, [sp, #48]	; 0x30
    4c7a:	cmp	r2, #0
    4c7c:	bne.w	58da <_svfprintf_r+0x1512>
    4c80:	ldr	r2, [sp, #48]	; 0x30
    4c82:	cmp	r2, #0
    4c84:	beq.w	45a6 <_svfprintf_r+0x1de>
    4c88:	movs	r3, #0
    4c8a:	movs	r1, #1
    4c8c:	mov	r7, r3
    4c8e:	str	r1, [sp, #16]
    4c90:	strb.w	r2, [sp, #120]	; 0x78
    4c94:	strb.w	r3, [sp, #79]	; 0x4f
    4c98:	mov	r8, r3
    4c9a:	str	r3, [sp, #56]	; 0x38
    4c9c:	str	r1, [sp, #32]
    4c9e:	add	r6, sp, #120	; 0x78
    4ca0:	b.n	47b4 <_svfprintf_r+0x3ec>
    4ca2:	cmp.w	r8, #0
    4ca6:	beq.w	57c0 <_svfprintf_r+0x13f8>
    4caa:	movs	r7, #0
    4cac:	movs	r4, #0
    4cae:	movs	r5, #0
    4cb0:	b.n	460c <_svfprintf_r+0x244>
    4cb2:	ldr	r0, [pc, #256]	; (4db4 <_svfprintf_r+0x9ec>)
    4cb4:	str	r2, [sp, #48]	; 0x30
    4cb6:	mov	fp, r3
    4cb8:	orrs.w	r3, r4, r5
    4cbc:	str	r7, [sp, #36]	; 0x24
    4cbe:	mov.w	r7, #0
    4cc2:	bne.w	4af2 <_svfprintf_r+0x72a>
    4cc6:	movs	r4, #0
    4cc8:	movs	r5, #0
    4cca:	b.n	4af2 <_svfprintf_r+0x72a>
    4ccc:	ldr	r3, [sp, #116]	; 0x74
    4cce:	b.n	4848 <_svfprintf_r+0x480>
    4cd0:	ldr	r2, [sp, #48]	; 0x30
    4cd2:	cmp	r2, #101	; 0x65
    4cd4:	ble.w	4e1a <_svfprintf_r+0xa52>
    4cd8:	vcmp.f64	d8, #0.0
    4cdc:	vmrs	APSR_nzcv, fpscr
    4ce0:	bne.w	4f76 <_svfprintf_r+0xbae>
    4ce4:	ldr	r2, [sp, #112]	; 0x70
    4ce6:	ldr	r1, [pc, #208]	; (4db8 <_svfprintf_r+0x9f0>)
    4ce8:	str.w	r1, [r9]
    4cec:	adds	r2, #1
    4cee:	adds	r3, #1
    4cf0:	movs	r1, #1
    4cf2:	cmp	r2, #7
    4cf4:	str	r3, [sp, #116]	; 0x74
    4cf6:	str	r2, [sp, #112]	; 0x70
    4cf8:	str.w	r1, [r9, #4]
    4cfc:	bgt.w	5424 <_svfprintf_r+0x105c>
    4d00:	add.w	r9, r9, #8
    4d04:	ldr	r2, [sp, #84]	; 0x54
    4d06:	ldr	r1, [sp, #52]	; 0x34
    4d08:	cmp	r2, r1
    4d0a:	blt.n	4d14 <_svfprintf_r+0x94c>
    4d0c:	tst.w	fp, #1
    4d10:	beq.w	492a <_svfprintf_r+0x562>
    4d14:	ldr	r2, [sp, #112]	; 0x70
    4d16:	ldr	r0, [sp, #60]	; 0x3c
    4d18:	ldr	r1, [sp, #64]	; 0x40
    4d1a:	str.w	r1, [r9]
    4d1e:	adds	r2, #1
    4d20:	add	r3, r0
    4d22:	cmp	r2, #7
    4d24:	str	r3, [sp, #116]	; 0x74
    4d26:	str.w	r0, [r9, #4]
    4d2a:	str	r2, [sp, #112]	; 0x70
    4d2c:	bgt.w	54dc <_svfprintf_r+0x1114>
    4d30:	add.w	r9, r9, #8
    4d34:	ldr	r2, [sp, #52]	; 0x34
    4d36:	subs	r4, r2, #1
    4d38:	cmp	r4, #0
    4d3a:	ble.w	492a <_svfprintf_r+0x562>
    4d3e:	cmp	r4, #16
    4d40:	ldr	r2, [sp, #112]	; 0x70
    4d42:	ldr	r7, [pc, #120]	; (4dbc <_svfprintf_r+0x9f4>)
    4d44:	ble.w	5100 <_svfprintf_r+0xd38>
    4d48:	movs	r5, #16
    4d4a:	ldr	r6, [sp, #20]
    4d4c:	ldr.w	r8, [sp, #12]
    4d50:	b.n	4d5e <_svfprintf_r+0x996>
    4d52:	add.w	r9, r9, #8
    4d56:	subs	r4, #16
    4d58:	cmp	r4, #16
    4d5a:	ble.w	5100 <_svfprintf_r+0xd38>
    4d5e:	adds	r2, #1
    4d60:	adds	r3, #16
    4d62:	cmp	r2, #7
    4d64:	str	r3, [sp, #116]	; 0x74
    4d66:	str	r2, [sp, #112]	; 0x70
    4d68:	str.w	r7, [r9]
    4d6c:	str.w	r5, [r9, #4]
    4d70:	ble.n	4d52 <_svfprintf_r+0x98a>
    4d72:	add	r2, sp, #108	; 0x6c
    4d74:	mov	r1, r8
    4d76:	mov	r0, r6
    4d78:	bl	5938 <__ssprint_r>
    4d7c:	cmp	r0, #0
    4d7e:	bne.w	45b4 <_svfprintf_r+0x1ec>
    4d82:	ldr	r3, [sp, #116]	; 0x74
    4d84:	ldr	r2, [sp, #112]	; 0x70
    4d86:	add.w	r9, sp, #160	; 0xa0
    4d8a:	b.n	4d56 <_svfprintf_r+0x98e>
    4d8c:	ldr	r2, [sp, #28]
    4d8e:	ldr	r1, [sp, #16]
    4d90:	subs	r4, r2, r1
    4d92:	cmp	r4, #0
    4d94:	ble.w	4890 <_svfprintf_r+0x4c8>
    4d98:	cmp	r4, #16
    4d9a:	ldr	r2, [sp, #112]	; 0x70
    4d9c:	ldr	r7, [pc, #28]	; (4dbc <_svfprintf_r+0x9f4>)
    4d9e:	ble.n	4dfe <_svfprintf_r+0xa36>
    4da0:	mov	r1, r9
    4da2:	movs	r5, #16
    4da4:	mov	r9, r8
    4da6:	mov	r0, r3
    4da8:	mov	r8, r6
    4daa:	ldr	r6, [sp, #20]
    4dac:	b.n	4dca <_svfprintf_r+0xa02>
    4dae:	nop
    4db0:	.word	0x20000568
    4db4:	.word	0x2000057c
    4db8:	.word	0x20000544
    4dbc:	.word	0x20000548
    4dc0:	subs	r4, #16
    4dc2:	cmp	r4, #16
    4dc4:	add.w	r1, r1, #8
    4dc8:	ble.n	4df6 <_svfprintf_r+0xa2e>
    4dca:	adds	r2, #1
    4dcc:	adds	r0, #16
    4dce:	cmp	r2, #7
    4dd0:	str	r0, [sp, #116]	; 0x74
    4dd2:	str	r2, [sp, #112]	; 0x70
    4dd4:	str	r7, [r1, #0]
    4dd6:	str	r5, [r1, #4]
    4dd8:	ble.n	4dc0 <_svfprintf_r+0x9f8>
    4dda:	add	r2, sp, #108	; 0x6c
    4ddc:	ldr	r1, [sp, #12]
    4dde:	mov	r0, r6
    4de0:	bl	5938 <__ssprint_r>
    4de4:	cmp	r0, #0
    4de6:	bne.w	45b4 <_svfprintf_r+0x1ec>
    4dea:	subs	r4, #16
    4dec:	cmp	r4, #16
    4dee:	ldr	r0, [sp, #116]	; 0x74
    4df0:	ldr	r2, [sp, #112]	; 0x70
    4df2:	add	r1, sp, #160	; 0xa0
    4df4:	bgt.n	4dca <_svfprintf_r+0xa02>
    4df6:	mov	r6, r8
    4df8:	mov	r3, r0
    4dfa:	mov	r8, r9
    4dfc:	mov	r9, r1
    4dfe:	adds	r2, #1
    4e00:	add	r3, r4
    4e02:	cmp	r2, #7
    4e04:	str	r3, [sp, #116]	; 0x74
    4e06:	str	r2, [sp, #112]	; 0x70
    4e08:	str.w	r7, [r9]
    4e0c:	str.w	r4, [r9, #4]
    4e10:	bgt.w	52a0 <_svfprintf_r+0xed8>
    4e14:	add.w	r9, r9, #8
    4e18:	b.n	4890 <_svfprintf_r+0x4c8>
    4e1a:	ldr	r2, [sp, #52]	; 0x34
    4e1c:	str.w	r6, [r9]
    4e20:	cmp	r2, #1
    4e22:	ldr	r2, [sp, #112]	; 0x70
    4e24:	add.w	r3, r3, #1
    4e28:	add.w	r2, r2, #1
    4e2c:	mov.w	r1, #1
    4e30:	str	r3, [sp, #116]	; 0x74
    4e32:	str	r2, [sp, #112]	; 0x70
    4e34:	str.w	r1, [r9, #4]
    4e38:	ble.w	525c <_svfprintf_r+0xe94>
    4e3c:	cmp	r2, #7
    4e3e:	bgt.w	526c <_svfprintf_r+0xea4>
    4e42:	add.w	r9, r9, #8
    4e46:	ldr	r0, [sp, #60]	; 0x3c
    4e48:	ldr	r1, [sp, #64]	; 0x40
    4e4a:	str.w	r1, [r9]
    4e4e:	adds	r2, #1
    4e50:	add	r3, r0
    4e52:	cmp	r2, #7
    4e54:	str	r3, [sp, #116]	; 0x74
    4e56:	str	r2, [sp, #112]	; 0x70
    4e58:	str.w	r0, [r9, #4]
    4e5c:	bgt.w	5286 <_svfprintf_r+0xebe>
    4e60:	add.w	r9, r9, #8
    4e64:	vcmp.f64	d8, #0.0
    4e68:	vmrs	APSR_nzcv, fpscr
    4e6c:	ldr	r1, [sp, #52]	; 0x34
    4e6e:	beq.w	505c <_svfprintf_r+0xc94>
    4e72:	subs	r1, #1
    4e74:	adds	r2, #1
    4e76:	adds	r6, #1
    4e78:	add	r3, r1
    4e7a:	cmp	r2, #7
    4e7c:	str.w	r6, [r9]
    4e80:	str	r2, [sp, #112]	; 0x70
    4e82:	str	r3, [sp, #116]	; 0x74
    4e84:	str.w	r1, [r9, #4]
    4e88:	bgt.w	50c6 <_svfprintf_r+0xcfe>
    4e8c:	add.w	r9, r9, #8
    4e90:	ldr	r0, [sp, #68]	; 0x44
    4e92:	str.w	r0, [r9, #4]
    4e96:	adds	r2, #1
    4e98:	add	r3, r0
    4e9a:	add	r1, sp, #92	; 0x5c
    4e9c:	cmp	r2, #7
    4e9e:	str	r3, [sp, #116]	; 0x74
    4ea0:	str	r2, [sp, #112]	; 0x70
    4ea2:	str.w	r1, [r9]
    4ea6:	ble.w	4926 <_svfprintf_r+0x55e>
    4eaa:	add	r2, sp, #108	; 0x6c
    4eac:	ldr	r1, [sp, #12]
    4eae:	ldr	r0, [sp, #20]
    4eb0:	bl	5938 <__ssprint_r>
    4eb4:	cmp	r0, #0
    4eb6:	bne.w	45b4 <_svfprintf_r+0x1ec>
    4eba:	ldr	r3, [sp, #116]	; 0x74
    4ebc:	add.w	r9, sp, #160	; 0xa0
    4ec0:	b.n	492a <_svfprintf_r+0x562>
    4ec2:	add	r2, sp, #108	; 0x6c
    4ec4:	ldr	r1, [sp, #12]
    4ec6:	ldr	r0, [sp, #20]
    4ec8:	bl	5938 <__ssprint_r>
    4ecc:	cmp	r0, #0
    4ece:	beq.w	49c4 <_svfprintf_r+0x5fc>
    4ed2:	b.w	45b4 <_svfprintf_r+0x1ec>
    4ed6:	ldr	r1, [sp, #36]	; 0x24
    4ed8:	cmp.w	r8, #0
    4edc:	ldr	r4, [r1, #0]
    4ede:	strb.w	r3, [sp, #79]	; 0x4f
    4ee2:	add.w	r7, r1, #4
    4ee6:	mov.w	r5, #0
    4eea:	blt.w	55d0 <_svfprintf_r+0x1208>
    4eee:	orrs.w	r2, r4, r5
    4ef2:	str	r7, [sp, #36]	; 0x24
    4ef4:	bic.w	fp, fp, #128	; 0x80
    4ef8:	mov	r7, r3
    4efa:	bne.w	4712 <_svfprintf_r+0x34a>
    4efe:	cmp.w	r8, #0
    4f02:	beq.w	4c6c <_svfprintf_r+0x8a4>
    4f06:	movs	r4, #0
    4f08:	b.n	4a78 <_svfprintf_r+0x6b0>
    4f0a:	add	r2, sp, #108	; 0x6c
    4f0c:	ldr	r1, [sp, #12]
    4f0e:	ldr	r0, [sp, #20]
    4f10:	bl	5938 <__ssprint_r>
    4f14:	cmp	r0, #0
    4f16:	bne.w	45b4 <_svfprintf_r+0x1ec>
    4f1a:	ldr	r3, [sp, #116]	; 0x74
    4f1c:	add.w	r9, sp, #160	; 0xa0
    4f20:	b.n	4904 <_svfprintf_r+0x53c>
    4f22:	add	r2, sp, #108	; 0x6c
    4f24:	ldr	r1, [sp, #12]
    4f26:	ldr	r0, [sp, #20]
    4f28:	bl	5938 <__ssprint_r>
    4f2c:	cmp	r0, #0
    4f2e:	bne.w	45b4 <_svfprintf_r+0x1ec>
    4f32:	ldr	r3, [sp, #116]	; 0x74
    4f34:	add.w	r9, sp, #160	; 0xa0
    4f38:	b.n	4868 <_svfprintf_r+0x4a0>
    4f3a:	add	r2, sp, #108	; 0x6c
    4f3c:	ldr	r1, [sp, #12]
    4f3e:	ldr	r0, [sp, #20]
    4f40:	bl	5938 <__ssprint_r>
    4f44:	cmp	r0, #0
    4f46:	bne.w	45b4 <_svfprintf_r+0x1ec>
    4f4a:	ldr	r3, [sp, #116]	; 0x74
    4f4c:	add.w	r9, sp, #160	; 0xa0
    4f50:	b.n	4888 <_svfprintf_r+0x4c0>
    4f52:	cmp.w	r8, #0
    4f56:	strb.w	r7, [sp, #79]	; 0x4f
    4f5a:	blt.w	543c <_svfprintf_r+0x1074>
    4f5e:	orrs.w	r3, r4, r5
    4f62:	bic.w	fp, fp, #128	; 0x80
    4f66:	bne.w	4af2 <_svfprintf_r+0x72a>
    4f6a:	cmp.w	r8, #0
    4f6e:	beq.w	4c6a <_svfprintf_r+0x8a2>
    4f72:	movs	r7, #0
    4f74:	b.n	4cc6 <_svfprintf_r+0x8fe>
    4f76:	ldr	r4, [sp, #84]	; 0x54
    4f78:	cmp	r4, #0
    4f7a:	ble.w	5440 <_svfprintf_r+0x1078>
    4f7e:	ldr	r2, [sp, #56]	; 0x38
    4f80:	ldr	r1, [sp, #52]	; 0x34
    4f82:	cmp	r2, r1
    4f84:	it	ge
    4f86:	movge	r2, r1
    4f88:	cmp	r2, #0
    4f8a:	mov	r4, r2
    4f8c:	ble.n	4faa <_svfprintf_r+0xbe2>
    4f8e:	ldr	r2, [sp, #112]	; 0x70
    4f90:	str.w	r6, [r9]
    4f94:	adds	r2, #1
    4f96:	add	r3, r4
    4f98:	cmp	r2, #7
    4f9a:	str	r3, [sp, #116]	; 0x74
    4f9c:	str.w	r4, [r9, #4]
    4fa0:	str	r2, [sp, #112]	; 0x70
    4fa2:	bgt.w	568a <_svfprintf_r+0x12c2>
    4fa6:	add.w	r9, r9, #8
    4faa:	ldr	r2, [sp, #56]	; 0x38
    4fac:	cmp	r4, #0
    4fae:	it	ge
    4fb0:	subge	r2, r2, r4
    4fb2:	cmp	r2, #0
    4fb4:	mov	r4, r2
    4fb6:	ble.w	519c <_svfprintf_r+0xdd4>
    4fba:	cmp	r4, #16
    4fbc:	ldr	r2, [sp, #112]	; 0x70
    4fbe:	ldr	r7, [pc, #772]	; (52c4 <_svfprintf_r+0xefc>)
    4fc0:	ble.w	53f6 <_svfprintf_r+0x102e>
    4fc4:	mov	r1, r9
    4fc6:	movs	r5, #16
    4fc8:	mov	r9, r6
    4fca:	ldr.w	r8, [sp, #20]
    4fce:	ldr	r6, [sp, #12]
    4fd0:	b.n	4fdc <_svfprintf_r+0xc14>
    4fd2:	adds	r1, #8
    4fd4:	subs	r4, #16
    4fd6:	cmp	r4, #16
    4fd8:	ble.w	53f2 <_svfprintf_r+0x102a>
    4fdc:	adds	r2, #1
    4fde:	adds	r3, #16
    4fe0:	cmp	r2, #7
    4fe2:	str	r3, [sp, #116]	; 0x74
    4fe4:	str	r2, [sp, #112]	; 0x70
    4fe6:	str	r7, [r1, #0]
    4fe8:	str	r5, [r1, #4]
    4fea:	ble.n	4fd2 <_svfprintf_r+0xc0a>
    4fec:	add	r2, sp, #108	; 0x6c
    4fee:	mov	r1, r6
    4ff0:	mov	r0, r8
    4ff2:	bl	5938 <__ssprint_r>
    4ff6:	cmp	r0, #0
    4ff8:	bne.w	45b4 <_svfprintf_r+0x1ec>
    4ffc:	ldr	r3, [sp, #116]	; 0x74
    4ffe:	ldr	r2, [sp, #112]	; 0x70
    5000:	add	r1, sp, #160	; 0xa0
    5002:	b.n	4fd4 <_svfprintf_r+0xc0c>
    5004:	add	r2, sp, #108	; 0x6c
    5006:	ldr	r1, [sp, #12]
    5008:	ldr	r0, [sp, #20]
    500a:	bl	5938 <__ssprint_r>
    500e:	cmp	r0, #0
    5010:	bne.w	45b4 <_svfprintf_r+0x1ec>
    5014:	ldrb.w	r7, [sp, #79]	; 0x4f
    5018:	ldr	r3, [sp, #116]	; 0x74
    501a:	add.w	r9, sp, #160	; 0xa0
    501e:	b.n	4848 <_svfprintf_r+0x480>
    5020:	ands.w	r2, fp, #16
    5024:	bne.w	4ed6 <_svfprintf_r+0xb0e>
    5028:	ands.w	r3, fp, #64	; 0x40
    502c:	beq.w	4ed6 <_svfprintf_r+0xb0e>
    5030:	ldr	r1, [sp, #36]	; 0x24
    5032:	strb.w	r2, [sp, #79]	; 0x4f
    5036:	mov	r3, r1
    5038:	cmp.w	r8, #0
    503c:	add.w	r3, r3, #4
    5040:	ldrh	r4, [r1, #0]
    5042:	mov.w	r5, #0
    5046:	blt.w	5572 <_svfprintf_r+0x11aa>
    504a:	orrs.w	r1, r4, r5
    504e:	bic.w	fp, fp, #128	; 0x80
    5052:	str	r3, [sp, #36]	; 0x24
    5054:	mov	r7, r2
    5056:	bne.w	4712 <_svfprintf_r+0x34a>
    505a:	b.n	4efe <_svfprintf_r+0xb36>
    505c:	subs	r4, r1, #1
    505e:	cmp	r4, #0
    5060:	ble.w	4e90 <_svfprintf_r+0xac8>
    5064:	cmp	r4, #16
    5066:	ldr	r7, [pc, #604]	; (52c4 <_svfprintf_r+0xefc>)
    5068:	ble.n	50b0 <_svfprintf_r+0xce8>
    506a:	movs	r5, #16
    506c:	ldr	r6, [sp, #20]
    506e:	ldr.w	r8, [sp, #12]
    5072:	b.n	507e <_svfprintf_r+0xcb6>
    5074:	subs	r4, #16
    5076:	cmp	r4, #16
    5078:	add.w	r9, r9, #8
    507c:	ble.n	50b0 <_svfprintf_r+0xce8>
    507e:	adds	r2, #1
    5080:	adds	r3, #16
    5082:	cmp	r2, #7
    5084:	str	r3, [sp, #116]	; 0x74
    5086:	str	r2, [sp, #112]	; 0x70
    5088:	str.w	r7, [r9]
    508c:	str.w	r5, [r9, #4]
    5090:	ble.n	5074 <_svfprintf_r+0xcac>
    5092:	add	r2, sp, #108	; 0x6c
    5094:	mov	r1, r8
    5096:	mov	r0, r6
    5098:	bl	5938 <__ssprint_r>
    509c:	cmp	r0, #0
    509e:	bne.w	45b4 <_svfprintf_r+0x1ec>
    50a2:	subs	r4, #16
    50a4:	cmp	r4, #16
    50a6:	ldr	r3, [sp, #116]	; 0x74
    50a8:	ldr	r2, [sp, #112]	; 0x70
    50aa:	add.w	r9, sp, #160	; 0xa0
    50ae:	bgt.n	507e <_svfprintf_r+0xcb6>
    50b0:	adds	r2, #1
    50b2:	add	r3, r4
    50b4:	cmp	r2, #7
    50b6:	str	r3, [sp, #116]	; 0x74
    50b8:	str	r2, [sp, #112]	; 0x70
    50ba:	str.w	r7, [r9]
    50be:	str.w	r4, [r9, #4]
    50c2:	ble.w	4e8c <_svfprintf_r+0xac4>
    50c6:	add	r2, sp, #108	; 0x6c
    50c8:	ldr	r1, [sp, #12]
    50ca:	ldr	r0, [sp, #20]
    50cc:	bl	5938 <__ssprint_r>
    50d0:	cmp	r0, #0
    50d2:	bne.w	45b4 <_svfprintf_r+0x1ec>
    50d6:	ldr	r3, [sp, #116]	; 0x74
    50d8:	ldr	r2, [sp, #112]	; 0x70
    50da:	add.w	r9, sp, #160	; 0xa0
    50de:	b.n	4e90 <_svfprintf_r+0xac8>
    50e0:	tst.w	fp, #16
    50e4:	bne.n	514e <_svfprintf_r+0xd86>
    50e6:	tst.w	fp, #64	; 0x40
    50ea:	beq.n	514e <_svfprintf_r+0xd86>
    50ec:	ldr	r1, [sp, #36]	; 0x24
    50ee:	ldrsh.w	r4, [r1]
    50f2:	adds	r1, #4
    50f4:	asrs	r5, r4, #31
    50f6:	mov	r2, r4
    50f8:	mov	r3, r5
    50fa:	str	r1, [sp, #36]	; 0x24
    50fc:	b.w	46f0 <_svfprintf_r+0x328>
    5100:	adds	r2, #1
    5102:	add	r3, r4
    5104:	cmp	r2, #7
    5106:	str	r3, [sp, #116]	; 0x74
    5108:	str	r2, [sp, #112]	; 0x70
    510a:	str.w	r7, [r9]
    510e:	str.w	r4, [r9, #4]
    5112:	ble.w	4926 <_svfprintf_r+0x55e>
    5116:	b.n	4eaa <_svfprintf_r+0xae2>
    5118:	ldr	r1, [sp, #36]	; 0x24
    511a:	cmp.w	r8, #0
    511e:	ldr	r4, [r1, #0]
    5120:	strb.w	r3, [sp, #79]	; 0x4f
    5124:	add.w	r7, r1, #4
    5128:	mov.w	r5, #0
    512c:	blt.w	52ba <_svfprintf_r+0xef2>
    5130:	orrs.w	r2, r4, r5
    5134:	bic.w	fp, fp, #128	; 0x80
    5138:	str	r7, [sp, #36]	; 0x24
    513a:	beq.w	4ca2 <_svfprintf_r+0x8da>
    513e:	mov	r7, r3
    5140:	b.w	460c <_svfprintf_r+0x244>
    5144:	ldr	r4, [r3, #0]
    5146:	adds	r3, #4
    5148:	str	r3, [sp, #36]	; 0x24
    514a:	movs	r5, #0
    514c:	b.n	4abc <_svfprintf_r+0x6f4>
    514e:	ldr	r2, [sp, #36]	; 0x24
    5150:	ldr	r4, [r2, #0]
    5152:	mov	r3, r2
    5154:	adds	r3, #4
    5156:	asrs	r5, r4, #31
    5158:	mov	r2, r4
    515a:	str	r3, [sp, #36]	; 0x24
    515c:	cmp	r2, #0
    515e:	mov	r3, r5
    5160:	sbcs.w	r3, r3, #0
    5164:	bge.w	46fa <_svfprintf_r+0x332>
    5168:	negs	r4, r4
    516a:	mov.w	r7, #45	; 0x2d
    516e:	sbc.w	r5, r5, r5, lsl #1
    5172:	cmp.w	r8, #0
    5176:	strb.w	r7, [sp, #79]	; 0x4f
    517a:	blt.w	4712 <_svfprintf_r+0x34a>
    517e:	bic.w	fp, fp, #128	; 0x80
    5182:	b.w	4712 <_svfprintf_r+0x34a>
    5186:	add	r2, sp, #108	; 0x6c
    5188:	ldr	r1, [sp, #12]
    518a:	ldr	r0, [sp, #20]
    518c:	bl	5938 <__ssprint_r>
    5190:	cmp	r0, #0
    5192:	bne.w	45b4 <_svfprintf_r+0x1ec>
    5196:	ldr	r3, [sp, #116]	; 0x74
    5198:	add.w	r9, sp, #160	; 0xa0
    519c:	ldr	r1, [sp, #56]	; 0x38
    519e:	ldr	r2, [sp, #84]	; 0x54
    51a0:	add	r1, r6
    51a2:	mov	r5, r1
    51a4:	ldr	r1, [sp, #52]	; 0x34
    51a6:	cmp	r2, r1
    51a8:	blt.n	523a <_svfprintf_r+0xe72>
    51aa:	tst.w	fp, #1
    51ae:	bne.n	523a <_svfprintf_r+0xe72>
    51b0:	ldr	r0, [sp, #52]	; 0x34
    51b2:	add	r6, r0
    51b4:	subs	r4, r6, r5
    51b6:	subs	r2, r0, r2
    51b8:	cmp	r4, r2
    51ba:	it	ge
    51bc:	movge	r4, r2
    51be:	cmp	r4, #0
    51c0:	mov	r6, r4
    51c2:	ble.n	51e0 <_svfprintf_r+0xe18>
    51c4:	ldr	r1, [sp, #112]	; 0x70
    51c6:	str.w	r5, [r9]
    51ca:	adds	r1, #1
    51cc:	add	r3, r4
    51ce:	cmp	r1, #7
    51d0:	str	r3, [sp, #116]	; 0x74
    51d2:	str.w	r4, [r9, #4]
    51d6:	str	r1, [sp, #112]	; 0x70
    51d8:	bgt.w	56dc <_svfprintf_r+0x1314>
    51dc:	add.w	r9, r9, #8
    51e0:	cmp	r6, #0
    51e2:	ite	ge
    51e4:	subge	r4, r2, r6
    51e6:	movlt	r4, r2
    51e8:	cmp	r4, #0
    51ea:	ble.w	492a <_svfprintf_r+0x562>
    51ee:	cmp	r4, #16
    51f0:	ldr	r2, [sp, #112]	; 0x70
    51f2:	ldr	r7, [pc, #208]	; (52c4 <_svfprintf_r+0xefc>)
    51f4:	ble.n	5100 <_svfprintf_r+0xd38>
    51f6:	movs	r5, #16
    51f8:	ldr	r6, [sp, #20]
    51fa:	ldr.w	r8, [sp, #12]
    51fe:	b.n	520c <_svfprintf_r+0xe44>
    5200:	add.w	r9, r9, #8
    5204:	subs	r4, #16
    5206:	cmp	r4, #16
    5208:	ble.w	5100 <_svfprintf_r+0xd38>
    520c:	adds	r2, #1
    520e:	adds	r3, #16
    5210:	cmp	r2, #7
    5212:	str	r3, [sp, #116]	; 0x74
    5214:	str	r2, [sp, #112]	; 0x70
    5216:	str.w	r7, [r9]
    521a:	str.w	r5, [r9, #4]
    521e:	ble.n	5200 <_svfprintf_r+0xe38>
    5220:	add	r2, sp, #108	; 0x6c
    5222:	mov	r1, r8
    5224:	mov	r0, r6
    5226:	bl	5938 <__ssprint_r>
    522a:	cmp	r0, #0
    522c:	bne.w	45b4 <_svfprintf_r+0x1ec>
    5230:	ldr	r3, [sp, #116]	; 0x74
    5232:	ldr	r2, [sp, #112]	; 0x70
    5234:	add.w	r9, sp, #160	; 0xa0
    5238:	b.n	5204 <_svfprintf_r+0xe3c>
    523a:	ldr	r1, [sp, #112]	; 0x70
    523c:	ldr	r4, [sp, #60]	; 0x3c
    523e:	ldr	r0, [sp, #64]	; 0x40
    5240:	str.w	r0, [r9]
    5244:	adds	r1, #1
    5246:	add	r3, r4
    5248:	cmp	r1, #7
    524a:	str	r3, [sp, #116]	; 0x74
    524c:	str.w	r4, [r9, #4]
    5250:	str	r1, [sp, #112]	; 0x70
    5252:	bgt.w	56a2 <_svfprintf_r+0x12da>
    5256:	add.w	r9, r9, #8
    525a:	b.n	51b0 <_svfprintf_r+0xde8>
    525c:	tst.w	fp, #1
    5260:	bne.w	4e3c <_svfprintf_r+0xa74>
    5264:	cmp	r2, #7
    5266:	ble.w	4e8c <_svfprintf_r+0xac4>
    526a:	b.n	50c6 <_svfprintf_r+0xcfe>
    526c:	add	r2, sp, #108	; 0x6c
    526e:	ldr	r1, [sp, #12]
    5270:	ldr	r0, [sp, #20]
    5272:	bl	5938 <__ssprint_r>
    5276:	cmp	r0, #0
    5278:	bne.w	45b4 <_svfprintf_r+0x1ec>
    527c:	ldr	r3, [sp, #116]	; 0x74
    527e:	ldr	r2, [sp, #112]	; 0x70
    5280:	add.w	r9, sp, #160	; 0xa0
    5284:	b.n	4e46 <_svfprintf_r+0xa7e>
    5286:	add	r2, sp, #108	; 0x6c
    5288:	ldr	r1, [sp, #12]
    528a:	ldr	r0, [sp, #20]
    528c:	bl	5938 <__ssprint_r>
    5290:	cmp	r0, #0
    5292:	bne.w	45b4 <_svfprintf_r+0x1ec>
    5296:	ldr	r3, [sp, #116]	; 0x74
    5298:	ldr	r2, [sp, #112]	; 0x70
    529a:	add.w	r9, sp, #160	; 0xa0
    529e:	b.n	4e64 <_svfprintf_r+0xa9c>
    52a0:	add	r2, sp, #108	; 0x6c
    52a2:	ldr	r1, [sp, #12]
    52a4:	ldr	r0, [sp, #20]
    52a6:	bl	5938 <__ssprint_r>
    52aa:	cmp	r0, #0
    52ac:	bne.w	45b4 <_svfprintf_r+0x1ec>
    52b0:	ldr	r3, [sp, #116]	; 0x74
    52b2:	add.w	r9, sp, #160	; 0xa0
    52b6:	b.w	4890 <_svfprintf_r+0x4c8>
    52ba:	str	r7, [sp, #36]	; 0x24
    52bc:	movs	r7, #0
    52be:	b.w	460c <_svfprintf_r+0x244>
    52c2:	nop
    52c4:	.word	0x20000548
    52c8:	tst.w	fp, #16
    52cc:	bne.n	52e6 <_svfprintf_r+0xf1e>
    52ce:	tst.w	fp, #64	; 0x40
    52d2:	beq.n	52e6 <_svfprintf_r+0xf1e>
    52d4:	ldr	r2, [sp, #36]	; 0x24
    52d6:	ldr	r3, [r2, #0]
    52d8:	adds	r2, #4
    52da:	str	r2, [sp, #36]	; 0x24
    52dc:	ldrh.w	r2, [sp, #24]
    52e0:	strh	r2, [r3, #0]
    52e2:	b.w	4414 <_svfprintf_r+0x4c>
    52e6:	ldr	r2, [sp, #36]	; 0x24
    52e8:	ldr	r3, [r2, #0]
    52ea:	adds	r2, #4
    52ec:	str	r2, [sp, #36]	; 0x24
    52ee:	ldr	r2, [sp, #24]
    52f0:	str	r2, [r3, #0]
    52f2:	b.w	4414 <_svfprintf_r+0x4c>
    52f6:	vcmp.f64	d8, d8
    52fa:	vmrs	APSR_nzcv, fpscr
    52fe:	bvs.w	583e <_svfprintf_r+0x1476>
    5302:	ldr	r3, [sp, #48]	; 0x30
    5304:	cmp.w	r8, #4294967295
    5308:	bic.w	r5, r3, #32
    530c:	beq.w	575a <_svfprintf_r+0x1392>
    5310:	cmp	r5, #71	; 0x47
    5312:	beq.w	5562 <_svfprintf_r+0x119a>
    5316:	orr.w	r3, fp, #256	; 0x100
    531a:	str	r3, [sp, #40]	; 0x28
    531c:	vmov	r3, s17
    5320:	cmp	r3, #0
    5322:	blt.w	5760 <_svfprintf_r+0x1398>
    5326:	vmov.f64	d10, d8
    532a:	movs	r7, #0
    532c:	ldr	r3, [sp, #48]	; 0x30
    532e:	cmp	r3, #102	; 0x66
    5330:	beq.w	5738 <_svfprintf_r+0x1370>
    5334:	cmp	r3, #70	; 0x46
    5336:	beq.w	5512 <_svfprintf_r+0x114a>
    533a:	vmov.f64	d0, d10
    533e:	cmp	r5, #69	; 0x45
    5340:	ite	eq
    5342:	addeq.w	r4, r8, #1
    5346:	movne	r4, r8
    5348:	add	r2, sp, #100	; 0x64
    534a:	add	r3, sp, #88	; 0x58
    534c:	str	r2, [sp, #4]
    534e:	str	r3, [sp, #0]
    5350:	mov	r2, r4
    5352:	add	r3, sp, #84	; 0x54
    5354:	movs	r1, #2
    5356:	ldr	r0, [sp, #20]
    5358:	bl	3740 <_dtoa_r>
    535c:	ldr	r3, [sp, #48]	; 0x30
    535e:	cmp	r3, #103	; 0x67
    5360:	mov	r6, r0
    5362:	bne.w	5782 <_svfprintf_r+0x13ba>
    5366:	tst.w	fp, #1
    536a:	beq.w	583a <_svfprintf_r+0x1472>
    536e:	adds	r1, r6, r4
    5370:	vcmp.f64	d10, #0.0
    5374:	vmrs	APSR_nzcv, fpscr
    5378:	beq.w	5686 <_svfprintf_r+0x12be>
    537c:	ldr	r3, [sp, #100]	; 0x64
    537e:	cmp	r1, r3
    5380:	bls.n	5390 <_svfprintf_r+0xfc8>
    5382:	movs	r0, #48	; 0x30
    5384:	adds	r2, r3, #1
    5386:	str	r2, [sp, #100]	; 0x64
    5388:	strb	r0, [r3, #0]
    538a:	ldr	r3, [sp, #100]	; 0x64
    538c:	cmp	r1, r3
    538e:	bhi.n	5384 <_svfprintf_r+0xfbc>
    5390:	subs	r3, r3, r6
    5392:	cmp	r5, #71	; 0x47
    5394:	str	r3, [sp, #52]	; 0x34
    5396:	beq.w	55d8 <_svfprintf_r+0x1210>
    539a:	ldr	r3, [sp, #48]	; 0x30
    539c:	cmp	r3, #101	; 0x65
    539e:	ble.w	57a0 <_svfprintf_r+0x13d8>
    53a2:	ldr	r3, [sp, #48]	; 0x30
    53a4:	cmp	r3, #102	; 0x66
    53a6:	ldr	r3, [sp, #84]	; 0x54
    53a8:	beq.w	57a4 <_svfprintf_r+0x13dc>
    53ac:	str	r3, [sp, #56]	; 0x38
    53ae:	ldr	r2, [sp, #56]	; 0x38
    53b0:	ldr	r1, [sp, #52]	; 0x34
    53b2:	cmp	r2, r1
    53b4:	blt.w	5768 <_svfprintf_r+0x13a0>
    53b8:	tst.w	fp, #1
    53bc:	bne.w	5828 <_svfprintf_r+0x1460>
    53c0:	bic.w	r3, r2, r2, asr #31
    53c4:	str	r2, [sp, #32]
    53c6:	movs	r2, #103	; 0x67
    53c8:	str	r2, [sp, #48]	; 0x30
    53ca:	cmp	r7, #0
    53cc:	bne.w	55bc <_svfprintf_r+0x11f4>
    53d0:	mov	r8, r7
    53d2:	str	r3, [sp, #16]
    53d4:	ldr.w	fp, [sp, #40]	; 0x28
    53d8:	ldrb.w	r7, [sp, #79]	; 0x4f
    53dc:	b.w	47ac <_svfprintf_r+0x3e4>
    53e0:	bic.w	r7, r7, #7
    53e4:	add.w	r3, r7, #8
    53e8:	vldr	d8, [r7]
    53ec:	str	r3, [sp, #36]	; 0x24
    53ee:	b.w	476e <_svfprintf_r+0x3a6>
    53f2:	mov	r6, r9
    53f4:	mov	r9, r1
    53f6:	adds	r2, #1
    53f8:	add	r3, r4
    53fa:	cmp	r2, #7
    53fc:	str	r3, [sp, #116]	; 0x74
    53fe:	str	r2, [sp, #112]	; 0x70
    5400:	str.w	r7, [r9]
    5404:	str.w	r4, [r9, #4]
    5408:	bgt.w	5186 <_svfprintf_r+0xdbe>
    540c:	add.w	r9, r9, #8
    5410:	b.n	519c <_svfprintf_r+0xdd4>
    5412:	movs	r7, #0
    5414:	cmp	r8, r7
    5416:	strb.w	r7, [sp, #79]	; 0x4f
    541a:	blt.w	4cc6 <_svfprintf_r+0x8fe>
    541e:	bic.w	fp, fp, #128	; 0x80
    5422:	b.n	4c62 <_svfprintf_r+0x89a>
    5424:	add	r2, sp, #108	; 0x6c
    5426:	ldr	r1, [sp, #12]
    5428:	ldr	r0, [sp, #20]
    542a:	bl	5938 <__ssprint_r>
    542e:	cmp	r0, #0
    5430:	bne.w	45b4 <_svfprintf_r+0x1ec>
    5434:	ldr	r3, [sp, #116]	; 0x74
    5436:	add.w	r9, sp, #160	; 0xa0
    543a:	b.n	4d04 <_svfprintf_r+0x93c>
    543c:	ldr	r7, [sp, #36]	; 0x24
    543e:	b.n	4cb8 <_svfprintf_r+0x8f0>
    5440:	ldr	r2, [sp, #112]	; 0x70
    5442:	ldr	r1, [pc, #740]	; (5728 <_svfprintf_r+0x1360>)
    5444:	str.w	r1, [r9]
    5448:	adds	r2, #1
    544a:	adds	r3, #1
    544c:	movs	r1, #1
    544e:	cmp	r2, #7
    5450:	str	r3, [sp, #116]	; 0x74
    5452:	str	r2, [sp, #112]	; 0x70
    5454:	str.w	r1, [r9, #4]
    5458:	bgt.n	5548 <_svfprintf_r+0x1180>
    545a:	add.w	r9, r9, #8
    545e:	cbnz	r4, 546c <_svfprintf_r+0x10a4>
    5460:	ldr	r2, [sp, #52]	; 0x34
    5462:	cbnz	r2, 546c <_svfprintf_r+0x10a4>
    5464:	tst.w	fp, #1
    5468:	beq.w	492a <_svfprintf_r+0x562>
    546c:	ldr	r2, [sp, #112]	; 0x70
    546e:	ldr	r0, [sp, #60]	; 0x3c
    5470:	ldr	r1, [sp, #64]	; 0x40
    5472:	str.w	r1, [r9]
    5476:	adds	r2, #1
    5478:	add	r3, r0
    547a:	cmp	r2, #7
    547c:	str	r3, [sp, #116]	; 0x74
    547e:	str.w	r0, [r9, #4]
    5482:	str	r2, [sp, #112]	; 0x70
    5484:	bgt.w	57f4 <_svfprintf_r+0x142c>
    5488:	add.w	r9, r9, #8
    548c:	negs	r4, r4
    548e:	cmp	r4, #0
    5490:	ble.w	55a2 <_svfprintf_r+0x11da>
    5494:	cmp	r4, #16
    5496:	ldr	r7, [pc, #660]	; (572c <_svfprintf_r+0x1364>)
    5498:	ble.w	56c0 <_svfprintf_r+0x12f8>
    549c:	mov	r1, r9
    549e:	movs	r5, #16
    54a0:	mov	r9, r6
    54a2:	ldr.w	r8, [sp, #20]
    54a6:	ldr	r6, [sp, #12]
    54a8:	b.n	54b4 <_svfprintf_r+0x10ec>
    54aa:	adds	r1, #8
    54ac:	subs	r4, #16
    54ae:	cmp	r4, #16
    54b0:	ble.w	56bc <_svfprintf_r+0x12f4>
    54b4:	adds	r2, #1
    54b6:	adds	r3, #16
    54b8:	cmp	r2, #7
    54ba:	str	r3, [sp, #116]	; 0x74
    54bc:	str	r2, [sp, #112]	; 0x70
    54be:	str	r7, [r1, #0]
    54c0:	str	r5, [r1, #4]
    54c2:	ble.n	54aa <_svfprintf_r+0x10e2>
    54c4:	add	r2, sp, #108	; 0x6c
    54c6:	mov	r1, r6
    54c8:	mov	r0, r8
    54ca:	bl	5938 <__ssprint_r>
    54ce:	cmp	r0, #0
    54d0:	bne.w	45b4 <_svfprintf_r+0x1ec>
    54d4:	ldr	r3, [sp, #116]	; 0x74
    54d6:	ldr	r2, [sp, #112]	; 0x70
    54d8:	add	r1, sp, #160	; 0xa0
    54da:	b.n	54ac <_svfprintf_r+0x10e4>
    54dc:	add	r2, sp, #108	; 0x6c
    54de:	ldr	r1, [sp, #12]
    54e0:	ldr	r0, [sp, #20]
    54e2:	bl	5938 <__ssprint_r>
    54e6:	cmp	r0, #0
    54e8:	bne.w	45b4 <_svfprintf_r+0x1ec>
    54ec:	ldr	r3, [sp, #116]	; 0x74
    54ee:	add.w	r9, sp, #160	; 0xa0
    54f2:	b.n	4d34 <_svfprintf_r+0x96c>
    54f4:	movs	r1, #64	; 0x40
    54f6:	ldr	r0, [sp, #20]
    54f8:	bl	1f6c <_malloc_r>
    54fc:	ldr	r2, [sp, #12]
    54fe:	str	r0, [r2, #0]
    5500:	str	r0, [r2, #16]
    5502:	cmp	r0, #0
    5504:	beq.w	58e2 <_svfprintf_r+0x151a>
    5508:	ldr	r2, [sp, #12]
    550a:	movs	r3, #64	; 0x40
    550c:	str	r3, [r2, #20]
    550e:	b.w	43fa <_svfprintf_r+0x32>
    5512:	add	r2, sp, #100	; 0x64
    5514:	add	r3, sp, #88	; 0x58
    5516:	str	r2, [sp, #4]
    5518:	str	r3, [sp, #0]
    551a:	mov	r2, r8
    551c:	add	r3, sp, #84	; 0x54
    551e:	movs	r1, #3
    5520:	vmov.f64	d0, d10
    5524:	ldr	r0, [sp, #20]
    5526:	bl	3740 <_dtoa_r>
    552a:	mov	r4, r8
    552c:	mov	r6, r0
    552e:	ldr	r3, [sp, #48]	; 0x30
    5530:	cmp	r3, #70	; 0x46
    5532:	add.w	r1, r6, r4
    5536:	bne.w	5370 <_svfprintf_r+0xfa8>
    553a:	ldrb	r3, [r6, #0]
    553c:	cmp	r3, #48	; 0x30
    553e:	beq.w	585c <_svfprintf_r+0x1494>
    5542:	ldr	r4, [sp, #84]	; 0x54
    5544:	add	r1, r4
    5546:	b.n	5370 <_svfprintf_r+0xfa8>
    5548:	add	r2, sp, #108	; 0x6c
    554a:	ldr	r1, [sp, #12]
    554c:	ldr	r0, [sp, #20]
    554e:	bl	5938 <__ssprint_r>
    5552:	cmp	r0, #0
    5554:	bne.w	45b4 <_svfprintf_r+0x1ec>
    5558:	ldr	r4, [sp, #84]	; 0x54
    555a:	ldr	r3, [sp, #116]	; 0x74
    555c:	add.w	r9, sp, #160	; 0xa0
    5560:	b.n	545e <_svfprintf_r+0x1096>
    5562:	cmp.w	r8, #0
    5566:	it	eq
    5568:	moveq.w	r8, #1
    556c:	b.n	5316 <_svfprintf_r+0xf4e>
    556e:	str	r3, [sp, #36]	; 0x24
    5570:	b.n	52bc <_svfprintf_r+0xef4>
    5572:	str	r3, [sp, #36]	; 0x24
    5574:	mov	r7, r2
    5576:	b.w	4a70 <_svfprintf_r+0x6a8>
    557a:	mov	r0, r6
    557c:	bl	2a80 <strlen>
    5580:	mov	r8, r4
    5582:	mov	r3, r0
    5584:	str	r0, [sp, #32]
    5586:	b.w	4c4c <_svfprintf_r+0x884>
    558a:	add	r2, sp, #108	; 0x6c
    558c:	ldr	r1, [sp, #12]
    558e:	ldr	r0, [sp, #20]
    5590:	bl	5938 <__ssprint_r>
    5594:	cmp	r0, #0
    5596:	bne.w	45b4 <_svfprintf_r+0x1ec>
    559a:	ldr	r3, [sp, #116]	; 0x74
    559c:	ldr	r2, [sp, #112]	; 0x70
    559e:	add.w	r9, sp, #160	; 0xa0
    55a2:	ldr	r0, [sp, #52]	; 0x34
    55a4:	str.w	r6, [r9]
    55a8:	adds	r2, #1
    55aa:	add	r3, r0
    55ac:	cmp	r2, #7
    55ae:	str	r3, [sp, #116]	; 0x74
    55b0:	str	r2, [sp, #112]	; 0x70
    55b2:	str.w	r0, [r9, #4]
    55b6:	ble.w	4926 <_svfprintf_r+0x55e>
    55ba:	b.n	4eaa <_svfprintf_r+0xae2>
    55bc:	movs	r7, #45	; 0x2d
    55be:	str	r3, [sp, #16]
    55c0:	ldr.w	fp, [sp, #40]	; 0x28
    55c4:	strb.w	r7, [sp, #79]	; 0x4f
    55c8:	mov.w	r8, #0
    55cc:	b.w	47ae <_svfprintf_r+0x3e6>
    55d0:	str	r7, [sp, #36]	; 0x24
    55d2:	mov	r7, r3
    55d4:	b.w	4a70 <_svfprintf_r+0x6a8>
    55d8:	ldr	r3, [sp, #84]	; 0x54
    55da:	adds	r2, r3, #3
    55dc:	blt.n	55e4 <_svfprintf_r+0x121c>
    55de:	cmp	r8, r3
    55e0:	bge.w	53ac <_svfprintf_r+0xfe4>
    55e4:	ldr	r2, [sp, #48]	; 0x30
    55e6:	subs	r2, #2
    55e8:	str	r2, [sp, #48]	; 0x30
    55ea:	subs	r3, #1
    55ec:	cmp	r3, #0
    55ee:	ldrb.w	r2, [sp, #48]	; 0x30
    55f2:	str	r3, [sp, #84]	; 0x54
    55f4:	it	lt
    55f6:	neglt	r3, r3
    55f8:	strb.w	r2, [sp, #92]	; 0x5c
    55fc:	ite	lt
    55fe:	movlt	r2, #45	; 0x2d
    5600:	movge	r2, #43	; 0x2b
    5602:	cmp	r3, #9
    5604:	strb.w	r2, [sp, #93]	; 0x5d
    5608:	ble.w	5818 <_svfprintf_r+0x1450>
    560c:	add.w	r0, sp, #107	; 0x6b
    5610:	mov	r4, r0
    5612:	ldr	r2, [pc, #284]	; (5730 <_svfprintf_r+0x1368>)
    5614:	smull	r2, r1, r2, r3
    5618:	asrs	r2, r3, #31
    561a:	rsb	r2, r2, r1, asr #2
    561e:	add.w	r1, r2, r2, lsl #2
    5622:	sub.w	r3, r3, r1, lsl #1
    5626:	add.w	r1, r3, #48	; 0x30
    562a:	cmp	r2, #9
    562c:	mov	r3, r2
    562e:	strb.w	r1, [r4, #-1]!
    5632:	bgt.n	5612 <_svfprintf_r+0x124a>
    5634:	mov	r1, r4
    5636:	adds	r3, #48	; 0x30
    5638:	uxtb	r2, r3
    563a:	strb.w	r2, [r1, #-1]!
    563e:	cmp	r0, r1
    5640:	bls.w	5908 <_svfprintf_r+0x1540>
    5644:	add.w	r1, sp, #94	; 0x5e
    5648:	mov	r3, r4
    564a:	b.n	5650 <_svfprintf_r+0x1288>
    564c:	ldrb.w	r2, [r3], #1
    5650:	strb.w	r2, [r1], #1
    5654:	cmp	r0, r3
    5656:	bne.n	564c <_svfprintf_r+0x1284>
    5658:	adds	r3, r0, #1
    565a:	subs	r3, r3, r4
    565c:	add.w	r2, sp, #94	; 0x5e
    5660:	add	r3, r2
    5662:	add	r2, sp, #92	; 0x5c
    5664:	subs	r3, r3, r2
    5666:	ldr	r2, [sp, #52]	; 0x34
    5668:	str	r3, [sp, #68]	; 0x44
    566a:	cmp	r2, #1
    566c:	add	r3, r2
    566e:	str	r3, [sp, #32]
    5670:	ble.w	5872 <_svfprintf_r+0x14aa>
    5674:	ldr	r3, [sp, #32]
    5676:	ldr	r2, [sp, #60]	; 0x3c
    5678:	add	r3, r2
    567a:	movs	r2, #0
    567c:	str	r3, [sp, #32]
    567e:	str	r2, [sp, #56]	; 0x38
    5680:	bic.w	r3, r3, r3, asr #31
    5684:	b.n	53ca <_svfprintf_r+0x1002>
    5686:	mov	r3, r1
    5688:	b.n	5390 <_svfprintf_r+0xfc8>
    568a:	add	r2, sp, #108	; 0x6c
    568c:	ldr	r1, [sp, #12]
    568e:	ldr	r0, [sp, #20]
    5690:	bl	5938 <__ssprint_r>
    5694:	cmp	r0, #0
    5696:	bne.w	45b4 <_svfprintf_r+0x1ec>
    569a:	ldr	r3, [sp, #116]	; 0x74
    569c:	add.w	r9, sp, #160	; 0xa0
    56a0:	b.n	4faa <_svfprintf_r+0xbe2>
    56a2:	add	r2, sp, #108	; 0x6c
    56a4:	ldr	r1, [sp, #12]
    56a6:	ldr	r0, [sp, #20]
    56a8:	bl	5938 <__ssprint_r>
    56ac:	cmp	r0, #0
    56ae:	bne.w	45b4 <_svfprintf_r+0x1ec>
    56b2:	ldr	r2, [sp, #84]	; 0x54
    56b4:	ldr	r3, [sp, #116]	; 0x74
    56b6:	add.w	r9, sp, #160	; 0xa0
    56ba:	b.n	51b0 <_svfprintf_r+0xde8>
    56bc:	mov	r6, r9
    56be:	mov	r9, r1
    56c0:	adds	r2, #1
    56c2:	add	r3, r4
    56c4:	cmp	r2, #7
    56c6:	str	r3, [sp, #116]	; 0x74
    56c8:	str	r2, [sp, #112]	; 0x70
    56ca:	str.w	r7, [r9]
    56ce:	str.w	r4, [r9, #4]
    56d2:	bgt.w	558a <_svfprintf_r+0x11c2>
    56d6:	add.w	r9, r9, #8
    56da:	b.n	55a2 <_svfprintf_r+0x11da>
    56dc:	add	r2, sp, #108	; 0x6c
    56de:	ldr	r1, [sp, #12]
    56e0:	ldr	r0, [sp, #20]
    56e2:	bl	5938 <__ssprint_r>
    56e6:	cmp	r0, #0
    56e8:	bne.w	45b4 <_svfprintf_r+0x1ec>
    56ec:	ldr	r2, [sp, #84]	; 0x54
    56ee:	ldr	r1, [sp, #52]	; 0x34
    56f0:	ldr	r3, [sp, #116]	; 0x74
    56f2:	subs	r2, r1, r2
    56f4:	add.w	r9, sp, #160	; 0xa0
    56f8:	b.n	51e0 <_svfprintf_r+0xe18>
    56fa:	cmp	r5, #6
    56fc:	mov	r3, r5
    56fe:	it	cs
    5700:	movcs	r3, #6
    5702:	str	r3, [sp, #32]
    5704:	bic.w	r3, r3, r3, asr #31
    5708:	mov	r8, r6
    570a:	str	r7, [sp, #36]	; 0x24
    570c:	str	r6, [sp, #56]	; 0x38
    570e:	mov	r7, r6
    5710:	str	r3, [sp, #16]
    5712:	ldr	r6, [pc, #32]	; (5734 <_svfprintf_r+0x136c>)
    5714:	b.w	47ac <_svfprintf_r+0x3e4>
    5718:	mov	fp, r3
    571a:	b.w	4af2 <_svfprintf_r+0x72a>
    571e:	movs	r7, #45	; 0x2d
    5720:	strb.w	r7, [sp, #79]	; 0x4f
    5724:	b.w	478e <_svfprintf_r+0x3c6>
    5728:	.word	0x20000544
    572c:	.word	0x20000548
    5730:	.word	0x66666667
    5734:	.word	0x20000590
    5738:	add	r2, sp, #100	; 0x64
    573a:	add	r3, sp, #88	; 0x58
    573c:	str	r2, [sp, #4]
    573e:	str	r3, [sp, #0]
    5740:	movs	r1, #3
    5742:	add	r3, sp, #84	; 0x54
    5744:	mov	r2, r8
    5746:	vmov.f64	d0, d10
    574a:	ldr	r0, [sp, #20]
    574c:	bl	3740 <_dtoa_r>
    5750:	mov	r4, r8
    5752:	mov	r6, r0
    5754:	add.w	r1, r0, r8
    5758:	b.n	553a <_svfprintf_r+0x1172>
    575a:	mov.w	r8, #6
    575e:	b.n	5316 <_svfprintf_r+0xf4e>
    5760:	vneg.f64	d10, d8
    5764:	movs	r7, #45	; 0x2d
    5766:	b.n	532c <_svfprintf_r+0xf64>
    5768:	ldr	r2, [sp, #60]	; 0x3c
    576a:	ldr	r3, [sp, #52]	; 0x34
    576c:	add	r3, r2
    576e:	ldr	r2, [sp, #56]	; 0x38
    5770:	str	r3, [sp, #32]
    5772:	cmp	r2, #0
    5774:	ble.w	5884 <_svfprintf_r+0x14bc>
    5778:	movs	r2, #103	; 0x67
    577a:	bic.w	r3, r3, r3, asr #31
    577e:	str	r2, [sp, #48]	; 0x30
    5780:	b.n	53ca <_svfprintf_r+0x1002>
    5782:	ldr	r3, [sp, #48]	; 0x30
    5784:	cmp	r3, #71	; 0x47
    5786:	bne.w	536e <_svfprintf_r+0xfa6>
    578a:	tst.w	fp, #1
    578e:	bne.w	552e <_svfprintf_r+0x1166>
    5792:	ldr	r3, [sp, #100]	; 0x64
    5794:	cmp	r5, #71	; 0x47
    5796:	sub.w	r3, r3, r6
    579a:	str	r3, [sp, #52]	; 0x34
    579c:	beq.w	55d8 <_svfprintf_r+0x1210>
    57a0:	ldr	r3, [sp, #84]	; 0x54
    57a2:	b.n	55ea <_svfprintf_r+0x1222>
    57a4:	cmp	r3, #0
    57a6:	mov	r2, r3
    57a8:	str	r3, [sp, #56]	; 0x38
    57aa:	ble.n	5894 <_svfprintf_r+0x14cc>
    57ac:	cmp.w	r8, #0
    57b0:	bne.n	584a <_svfprintf_r+0x1482>
    57b2:	tst.w	fp, #1
    57b6:	bne.n	584a <_svfprintf_r+0x1482>
    57b8:	bic.w	r3, r3, r3, asr #31
    57bc:	str	r2, [sp, #32]
    57be:	b.n	53ca <_svfprintf_r+0x1002>
    57c0:	tst.w	fp, #1
    57c4:	mov	r7, r8
    57c6:	beq.n	57d4 <_svfprintf_r+0x140c>
    57c8:	add	r6, sp, #224	; 0xe0
    57ca:	movs	r3, #48	; 0x30
    57cc:	strb.w	r3, [r6, #-65]!
    57d0:	b.w	4a80 <_svfprintf_r+0x6b8>
    57d4:	str.w	r8, [sp, #32]
    57d8:	add	r6, sp, #160	; 0xa0
    57da:	b.w	4a86 <_svfprintf_r+0x6be>
    57de:	bic.w	r3, r5, r5, asr #31
    57e2:	str	r7, [sp, #36]	; 0x24
    57e4:	str	r3, [sp, #16]
    57e6:	str	r5, [sp, #32]
    57e8:	mov	r8, r0
    57ea:	str	r0, [sp, #56]	; 0x38
    57ec:	ldrb.w	r7, [sp, #79]	; 0x4f
    57f0:	b.w	47ac <_svfprintf_r+0x3e4>
    57f4:	add	r2, sp, #108	; 0x6c
    57f6:	ldr	r1, [sp, #12]
    57f8:	ldr	r0, [sp, #20]
    57fa:	bl	5938 <__ssprint_r>
    57fe:	cmp	r0, #0
    5800:	bne.w	45b4 <_svfprintf_r+0x1ec>
    5804:	ldr	r4, [sp, #84]	; 0x54
    5806:	ldr	r3, [sp, #116]	; 0x74
    5808:	ldr	r2, [sp, #112]	; 0x70
    580a:	add.w	r9, sp, #160	; 0xa0
    580e:	b.n	548c <_svfprintf_r+0x10c4>
    5810:	mov	sl, r4
    5812:	movs	r5, #0
    5814:	b.w	447e <_svfprintf_r+0xb6>
    5818:	adds	r3, #48	; 0x30
    581a:	movs	r2, #48	; 0x30
    581c:	strb.w	r3, [sp, #95]	; 0x5f
    5820:	strb.w	r2, [sp, #94]	; 0x5e
    5824:	add	r3, sp, #96	; 0x60
    5826:	b.n	5662 <_svfprintf_r+0x129a>
    5828:	ldr	r2, [sp, #60]	; 0x3c
    582a:	ldr	r3, [sp, #56]	; 0x38
    582c:	add	r3, r2
    582e:	movs	r2, #103	; 0x67
    5830:	str	r3, [sp, #32]
    5832:	str	r2, [sp, #48]	; 0x30
    5834:	bic.w	r3, r3, r3, asr #31
    5838:	b.n	53ca <_svfprintf_r+0x1002>
    583a:	ldr	r3, [sp, #100]	; 0x64
    583c:	b.n	5390 <_svfprintf_r+0xfc8>
    583e:	ldr	r6, [pc, #240]	; (5930 <_svfprintf_r+0x1568>)
    5840:	ldr	r3, [pc, #240]	; (5934 <_svfprintf_r+0x156c>)
    5842:	ldrb.w	r7, [sp, #79]	; 0x4f
    5846:	b.w	4792 <_svfprintf_r+0x3ca>
    584a:	ldr	r3, [sp, #56]	; 0x38
    584c:	ldr	r2, [sp, #60]	; 0x3c
    584e:	adds	r5, r3, r2
    5850:	add.w	r3, r5, r8
    5854:	str	r3, [sp, #32]
    5856:	bic.w	r3, r3, r3, asr #31
    585a:	b.n	53ca <_svfprintf_r+0x1002>
    585c:	vcmp.f64	d10, #0.0
    5860:	vmrs	APSR_nzcv, fpscr
    5864:	beq.w	5542 <_svfprintf_r+0x117a>
    5868:	rsb	r4, r4, #1
    586c:	str	r4, [sp, #84]	; 0x54
    586e:	add	r1, r4
    5870:	b.n	5370 <_svfprintf_r+0xfa8>
    5872:	ands.w	r3, fp, #1
    5876:	bne.w	5674 <_svfprintf_r+0x12ac>
    587a:	str	r3, [sp, #56]	; 0x38
    587c:	ldr	r3, [sp, #32]
    587e:	bic.w	r3, r3, r3, asr #31
    5882:	b.n	53ca <_svfprintf_r+0x1002>
    5884:	ldr	r3, [sp, #56]	; 0x38
    5886:	ldr	r2, [sp, #32]
    5888:	rsb	r3, r3, #1
    588c:	add	r2, r3
    588e:	mov	r3, r2
    5890:	str	r2, [sp, #32]
    5892:	b.n	5778 <_svfprintf_r+0x13b0>
    5894:	cmp.w	r8, #0
    5898:	bne.n	58a0 <_svfprintf_r+0x14d8>
    589a:	tst.w	fp, #1
    589e:	beq.n	58b0 <_svfprintf_r+0x14e8>
    58a0:	ldr	r3, [sp, #60]	; 0x3c
    58a2:	adds	r5, r3, #1
    58a4:	add.w	r3, r5, r8
    58a8:	str	r3, [sp, #32]
    58aa:	bic.w	r3, r3, r3, asr #31
    58ae:	b.n	53ca <_svfprintf_r+0x1002>
    58b0:	movs	r3, #1
    58b2:	str	r3, [sp, #32]
    58b4:	b.n	53ca <_svfprintf_r+0x1002>
    58b6:	ldr	r0, [sp, #36]	; 0x24
    58b8:	ldrb.w	r3, [sl, #1]
    58bc:	ldr	r5, [r0, #0]
    58be:	adds	r0, #4
    58c0:	cmp	r5, #0
    58c2:	str	r0, [sp, #36]	; 0x24
    58c4:	mov	sl, r4
    58c6:	bge.w	447a <_svfprintf_r+0xb2>
    58ca:	mov.w	r5, #4294967295
    58ce:	b.w	447a <_svfprintf_r+0xb2>
    58d2:	strb.w	r1, [sp, #79]	; 0x4f
    58d6:	b.w	4bf4 <_svfprintf_r+0x82c>
    58da:	strb.w	r1, [sp, #79]	; 0x4f
    58de:	b.w	4c80 <_svfprintf_r+0x8b8>
    58e2:	ldr	r2, [sp, #20]
    58e4:	movs	r3, #12
    58e6:	str	r3, [r2, #0]
    58e8:	mov.w	r0, #4294967295
    58ec:	b.w	45c6 <_svfprintf_r+0x1fe>
    58f0:	strb.w	r1, [sp, #79]	; 0x4f
    58f4:	b.w	4aa0 <_svfprintf_r+0x6d8>
    58f8:	strb.w	r1, [sp, #79]	; 0x4f
    58fc:	b.w	4a46 <_svfprintf_r+0x67e>
    5900:	strb.w	r1, [sp, #79]	; 0x4f
    5904:	b.w	4bac <_svfprintf_r+0x7e4>
    5908:	add.w	r3, sp, #94	; 0x5e
    590c:	b.n	5662 <_svfprintf_r+0x129a>
    590e:	strb.w	r1, [sp, #79]	; 0x4f
    5912:	b.w	45da <_svfprintf_r+0x212>
    5916:	strb.w	r1, [sp, #79]	; 0x4f
    591a:	b.w	49e2 <_svfprintf_r+0x61a>
    591e:	strb.w	r1, [sp, #79]	; 0x4f
    5922:	b.w	4752 <_svfprintf_r+0x38a>
    5926:	strb.w	r1, [sp, #79]	; 0x4f
    592a:	b.w	46ce <_svfprintf_r+0x306>
    592e:	nop
    5930:	.word	0x20000564
    5934:	.word	0x20000560

00005938 <__ssprint_r>:
    5938:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    593c:	ldr	r3, [r2, #8]
    593e:	sub	sp, #12
    5940:	mov	r8, r2
    5942:	cmp	r3, #0
    5944:	beq.n	5a2c <__ssprint_r+0xf4>
    5946:	mov	fp, r0
    5948:	mov.w	r9, #0
    594c:	ldr	r6, [r2, #0]
    594e:	ldr	r0, [r1, #0]
    5950:	ldr	r3, [r1, #8]
    5952:	mov	r5, r1
    5954:	mov	r4, r9
    5956:	cmp	r4, #0
    5958:	beq.n	59e6 <__ssprint_r+0xae>
    595a:	cmp	r4, r3
    595c:	mov	r7, r3
    595e:	mov	sl, r3
    5960:	bcc.n	59f0 <__ssprint_r+0xb8>
    5962:	ldrh	r3, [r5, #12]
    5964:	tst.w	r3, #1152	; 0x480
    5968:	beq.n	59c6 <__ssprint_r+0x8e>
    596a:	ldr	r7, [r5, #20]
    596c:	ldr	r1, [r5, #16]
    596e:	add.w	r7, r7, r7, lsl #1
    5972:	rsb	sl, r1, r0
    5976:	add.w	r7, r7, r7, lsr #31
    597a:	adds	r0, r4, #1
    597c:	asrs	r7, r7, #1
    597e:	add	r0, sl
    5980:	cmp	r0, r7
    5982:	mov	r2, r7
    5984:	itt	hi
    5986:	movhi	r7, r0
    5988:	movhi	r2, r7
    598a:	lsls	r3, r3, #21
    598c:	bpl.n	59f6 <__ssprint_r+0xbe>
    598e:	mov	r1, r2
    5990:	mov	r0, fp
    5992:	bl	1f6c <_malloc_r>
    5996:	cmp	r0, #0
    5998:	beq.n	5a0a <__ssprint_r+0xd2>
    599a:	mov	r2, sl
    599c:	ldr	r1, [r5, #16]
    599e:	str	r0, [sp, #4]
    59a0:	bl	19d0 <memcpy>
    59a4:	ldrh	r2, [r5, #12]
    59a6:	ldr	r3, [sp, #4]
    59a8:	bic.w	r2, r2, #1152	; 0x480
    59ac:	orr.w	r2, r2, #128	; 0x80
    59b0:	strh	r2, [r5, #12]
    59b2:	rsb	r2, sl, r7
    59b6:	add.w	r0, r3, sl
    59ba:	str	r7, [r5, #20]
    59bc:	str	r3, [r5, #16]
    59be:	str	r0, [r5, #0]
    59c0:	str	r2, [r5, #8]
    59c2:	mov	r7, r4
    59c4:	mov	sl, r4
    59c6:	mov	r2, sl
    59c8:	mov	r1, r9
    59ca:	bl	2508 <memmove>
    59ce:	ldr.w	r2, [r8, #8]
    59d2:	ldr	r3, [r5, #8]
    59d4:	ldr	r0, [r5, #0]
    59d6:	subs	r3, r3, r7
    59d8:	add	r0, sl
    59da:	subs	r4, r2, r4
    59dc:	str	r3, [r5, #8]
    59de:	str	r0, [r5, #0]
    59e0:	str.w	r4, [r8, #8]
    59e4:	cbz	r4, 5a2c <__ssprint_r+0xf4>
    59e6:	ldr.w	r9, [r6]
    59ea:	ldr	r4, [r6, #4]
    59ec:	adds	r6, #8
    59ee:	b.n	5956 <__ssprint_r+0x1e>
    59f0:	mov	r7, r4
    59f2:	mov	sl, r4
    59f4:	b.n	59c6 <__ssprint_r+0x8e>
    59f6:	mov	r0, fp
    59f8:	bl	2674 <_realloc_r>
    59fc:	mov	r3, r0
    59fe:	cmp	r0, #0
    5a00:	bne.n	59b2 <__ssprint_r+0x7a>
    5a02:	ldr	r1, [r5, #16]
    5a04:	mov	r0, fp
    5a06:	bl	2ca4 <_free_r>
    5a0a:	movs	r3, #12
    5a0c:	str.w	r3, [fp]
    5a10:	ldrh	r3, [r5, #12]
    5a12:	movs	r2, #0
    5a14:	orr.w	r3, r3, #64	; 0x40
    5a18:	mov.w	r0, #4294967295
    5a1c:	strh	r3, [r5, #12]
    5a1e:	str.w	r2, [r8, #8]
    5a22:	str.w	r2, [r8, #4]
    5a26:	add	sp, #12
    5a28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a2c:	movs	r0, #0
    5a2e:	str.w	r0, [r8, #4]
    5a32:	add	sp, #12
    5a34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005a38 <__aeabi_uldivmod>:
    5a38:	cbnz	r3, 5a50 <__aeabi_uldivmod+0x18>
    5a3a:	cbnz	r2, 5a50 <__aeabi_uldivmod+0x18>
    5a3c:	cmp	r1, #0
    5a3e:	it	eq
    5a40:	cmpeq	r0, #0
    5a42:	itt	ne
    5a44:	movne.w	r1, #4294967295
    5a48:	movne.w	r0, #4294967295
    5a4c:	b.w	5d4c <__aeabi_idiv0>
    5a50:	sub.w	ip, sp, #8
    5a54:	strd	ip, lr, [sp, #-16]!
    5a58:	bl	5a68 <__udivmoddi4>
    5a5c:	ldr.w	lr, [sp, #4]
    5a60:	ldrd	r2, r3, [sp, #8]
    5a64:	add	sp, #16
    5a66:	bx	lr

00005a68 <__udivmoddi4>:
    5a68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a6c:	mov	ip, r1
    5a6e:	mov	r6, r1
    5a70:	mov	r4, r0
    5a72:	ldr	r5, [sp, #32]
    5a74:	cmp	r3, #0
    5a76:	bne.n	5b1a <__udivmoddi4+0xb2>
    5a78:	cmp	r2, r1
    5a7a:	mov	r7, r2
    5a7c:	bls.n	5b58 <__udivmoddi4+0xf0>
    5a7e:	clz	lr, r2
    5a82:	cmp.w	lr, #0
    5a86:	beq.n	5aa0 <__udivmoddi4+0x38>
    5a88:	rsb	r4, lr, #32
    5a8c:	lsr.w	r4, r0, r4
    5a90:	lsl.w	r6, r1, lr
    5a94:	orr.w	ip, r4, r6
    5a98:	lsl.w	r7, r2, lr
    5a9c:	lsl.w	r4, r0, lr
    5aa0:	mov.w	r9, r7, lsr #16
    5aa4:	lsrs	r2, r4, #16
    5aa6:	udiv	r0, ip, r9
    5aaa:	uxth.w	r8, r7
    5aae:	mls	r6, r9, r0, ip
    5ab2:	orr.w	r6, r2, r6, lsl #16
    5ab6:	mul.w	r3, r0, r8
    5aba:	cmp	r3, r6
    5abc:	bls.n	5ad2 <__udivmoddi4+0x6a>
    5abe:	adds	r6, r6, r7
    5ac0:	add.w	r2, r0, #4294967295
    5ac4:	bcs.w	5d0c <__udivmoddi4+0x2a4>
    5ac8:	cmp	r3, r6
    5aca:	bls.w	5d0c <__udivmoddi4+0x2a4>
    5ace:	subs	r0, #2
    5ad0:	add	r6, r7
    5ad2:	subs	r6, r6, r3
    5ad4:	uxth	r2, r4
    5ad6:	udiv	r3, r6, r9
    5ada:	mls	r6, r9, r3, r6
    5ade:	orr.w	r4, r2, r6, lsl #16
    5ae2:	mul.w	r8, r3, r8
    5ae6:	cmp	r8, r4
    5ae8:	bls.n	5afe <__udivmoddi4+0x96>
    5aea:	adds	r4, r4, r7
    5aec:	add.w	r2, r3, #4294967295
    5af0:	bcs.w	5d08 <__udivmoddi4+0x2a0>
    5af4:	cmp	r8, r4
    5af6:	bls.w	5d08 <__udivmoddi4+0x2a0>
    5afa:	subs	r3, #2
    5afc:	add	r4, r7
    5afe:	rsb	r4, r8, r4
    5b02:	orr.w	r0, r3, r0, lsl #16
    5b06:	movs	r1, #0
    5b08:	cmp	r5, #0
    5b0a:	beq.n	5bd2 <__udivmoddi4+0x16a>
    5b0c:	lsr.w	r4, r4, lr
    5b10:	movs	r3, #0
    5b12:	str	r4, [r5, #0]
    5b14:	str	r3, [r5, #4]
    5b16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b1a:	cmp	r3, r1
    5b1c:	bls.n	5b2e <__udivmoddi4+0xc6>
    5b1e:	cmp	r5, #0
    5b20:	beq.n	5bce <__udivmoddi4+0x166>
    5b22:	movs	r1, #0
    5b24:	stmia.w	r5, {r0, r6}
    5b28:	mov	r0, r1
    5b2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b2e:	clz	r1, r3
    5b32:	cmp	r1, #0
    5b34:	bne.w	5c58 <__udivmoddi4+0x1f0>
    5b38:	cmp	r3, r6
    5b3a:	bcc.n	5b42 <__udivmoddi4+0xda>
    5b3c:	cmp	r2, r0
    5b3e:	bhi.w	5d32 <__udivmoddi4+0x2ca>
    5b42:	subs	r4, r0, r2
    5b44:	sbc.w	r6, r6, r3
    5b48:	movs	r0, #1
    5b4a:	mov	ip, r6
    5b4c:	cmp	r5, #0
    5b4e:	beq.n	5bd2 <__udivmoddi4+0x16a>
    5b50:	stmia.w	r5, {r4, ip}
    5b54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b58:	cbnz	r2, 5b60 <__udivmoddi4+0xf8>
    5b5a:	movs	r7, #1
    5b5c:	udiv	r7, r7, r2
    5b60:	clz	lr, r7
    5b64:	cmp.w	lr, #0
    5b68:	bne.n	5bd6 <__udivmoddi4+0x16e>
    5b6a:	subs	r3, r6, r7
    5b6c:	mov.w	r8, r7, lsr #16
    5b70:	uxth.w	ip, r7
    5b74:	movs	r1, #1
    5b76:	udiv	r0, r3, r8
    5b7a:	lsrs	r2, r4, #16
    5b7c:	mls	r6, r8, r0, r3
    5b80:	orr.w	r6, r2, r6, lsl #16
    5b84:	mul.w	r3, ip, r0
    5b88:	cmp	r3, r6
    5b8a:	bls.n	5b9c <__udivmoddi4+0x134>
    5b8c:	adds	r6, r6, r7
    5b8e:	add.w	r2, r0, #4294967295
    5b92:	bcs.n	5b9a <__udivmoddi4+0x132>
    5b94:	cmp	r3, r6
    5b96:	bhi.w	5d36 <__udivmoddi4+0x2ce>
    5b9a:	mov	r0, r2
    5b9c:	subs	r6, r6, r3
    5b9e:	uxth	r2, r4
    5ba0:	udiv	r3, r6, r8
    5ba4:	mls	r6, r8, r3, r6
    5ba8:	orr.w	r4, r2, r6, lsl #16
    5bac:	mul.w	ip, ip, r3
    5bb0:	cmp	ip, r4
    5bb2:	bls.n	5bc4 <__udivmoddi4+0x15c>
    5bb4:	adds	r4, r4, r7
    5bb6:	add.w	r2, r3, #4294967295
    5bba:	bcs.n	5bc2 <__udivmoddi4+0x15a>
    5bbc:	cmp	ip, r4
    5bbe:	bhi.w	5d2c <__udivmoddi4+0x2c4>
    5bc2:	mov	r3, r2
    5bc4:	rsb	r4, ip, r4
    5bc8:	orr.w	r0, r3, r0, lsl #16
    5bcc:	b.n	5b08 <__udivmoddi4+0xa0>
    5bce:	mov	r1, r5
    5bd0:	mov	r0, r5
    5bd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bd6:	rsb	r1, lr, #32
    5bda:	lsl.w	r3, r6, lr
    5bde:	lsl.w	r7, r7, lr
    5be2:	lsr.w	r9, r0, r1
    5be6:	mov.w	r8, r7, lsr #16
    5bea:	lsrs	r6, r1
    5bec:	orr.w	r9, r9, r3
    5bf0:	udiv	sl, r6, r8
    5bf4:	mov.w	r4, r9, lsr #16
    5bf8:	mls	r6, r8, sl, r6
    5bfc:	uxth.w	ip, r7
    5c00:	orr.w	r3, r4, r6, lsl #16
    5c04:	mul.w	r2, sl, ip
    5c08:	cmp	r2, r3
    5c0a:	lsl.w	r4, r0, lr
    5c0e:	bls.n	5c26 <__udivmoddi4+0x1be>
    5c10:	adds	r3, r3, r7
    5c12:	add.w	r1, sl, #4294967295
    5c16:	bcs.w	5d28 <__udivmoddi4+0x2c0>
    5c1a:	cmp	r2, r3
    5c1c:	bls.w	5d28 <__udivmoddi4+0x2c0>
    5c20:	sub.w	sl, sl, #2
    5c24:	add	r3, r7
    5c26:	subs	r3, r3, r2
    5c28:	uxth.w	r9, r9
    5c2c:	udiv	r1, r3, r8
    5c30:	mls	r3, r8, r1, r3
    5c34:	orr.w	r3, r9, r3, lsl #16
    5c38:	mul.w	r6, r1, ip
    5c3c:	cmp	r6, r3
    5c3e:	bls.n	5c50 <__udivmoddi4+0x1e8>
    5c40:	adds	r3, r3, r7
    5c42:	add.w	r2, r1, #4294967295
    5c46:	bcs.n	5d20 <__udivmoddi4+0x2b8>
    5c48:	cmp	r6, r3
    5c4a:	bls.n	5d20 <__udivmoddi4+0x2b8>
    5c4c:	subs	r1, #2
    5c4e:	add	r3, r7
    5c50:	subs	r3, r3, r6
    5c52:	orr.w	r1, r1, sl, lsl #16
    5c56:	b.n	5b76 <__udivmoddi4+0x10e>
    5c58:	rsb	lr, r1, #32
    5c5c:	lsr.w	r4, r2, lr
    5c60:	lsls	r3, r1
    5c62:	orrs	r3, r4
    5c64:	lsr.w	r7, r0, lr
    5c68:	lsl.w	r4, r6, r1
    5c6c:	mov.w	ip, r3, lsr #16
    5c70:	lsr.w	r6, r6, lr
    5c74:	orrs	r4, r7
    5c76:	udiv	r9, r6, ip
    5c7a:	lsrs	r7, r4, #16
    5c7c:	mls	r6, ip, r9, r6
    5c80:	uxth.w	r8, r3
    5c84:	orr.w	r6, r7, r6, lsl #16
    5c88:	mul.w	r7, r9, r8
    5c8c:	cmp	r7, r6
    5c8e:	lsl.w	r2, r2, r1
    5c92:	lsl.w	sl, r0, r1
    5c96:	bls.n	5caa <__udivmoddi4+0x242>
    5c98:	adds	r6, r6, r3
    5c9a:	add.w	r0, r9, #4294967295
    5c9e:	bcs.n	5d24 <__udivmoddi4+0x2bc>
    5ca0:	cmp	r7, r6
    5ca2:	bls.n	5d24 <__udivmoddi4+0x2bc>
    5ca4:	sub.w	r9, r9, #2
    5ca8:	add	r6, r3
    5caa:	subs	r6, r6, r7
    5cac:	uxth	r0, r4
    5cae:	udiv	r4, r6, ip
    5cb2:	mls	r6, ip, r4, r6
    5cb6:	orr.w	r7, r0, r6, lsl #16
    5cba:	mul.w	r8, r4, r8
    5cbe:	cmp	r8, r7
    5cc0:	bls.n	5cd2 <__udivmoddi4+0x26a>
    5cc2:	adds	r7, r7, r3
    5cc4:	add.w	r0, r4, #4294967295
    5cc8:	bcs.n	5d1c <__udivmoddi4+0x2b4>
    5cca:	cmp	r8, r7
    5ccc:	bls.n	5d1c <__udivmoddi4+0x2b4>
    5cce:	subs	r4, #2
    5cd0:	add	r7, r3
    5cd2:	orr.w	r0, r4, r9, lsl #16
    5cd6:	rsb	r7, r8, r7
    5cda:	umull	r8, r9, r0, r2
    5cde:	cmp	r7, r9
    5ce0:	mov	r4, r8
    5ce2:	mov	r6, r9
    5ce4:	bcc.n	5d10 <__udivmoddi4+0x2a8>
    5ce6:	beq.n	5d3c <__udivmoddi4+0x2d4>
    5ce8:	cbz	r5, 5d44 <__udivmoddi4+0x2dc>
    5cea:	subs.w	r3, sl, r4
    5cee:	sbc.w	r7, r7, r6
    5cf2:	lsl.w	lr, r7, lr
    5cf6:	lsrs	r3, r1
    5cf8:	lsrs	r7, r1
    5cfa:	orr.w	r3, lr, r3
    5cfe:	stmia.w	r5, {r3, r7}
    5d02:	movs	r1, #0
    5d04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d08:	mov	r3, r2
    5d0a:	b.n	5afe <__udivmoddi4+0x96>
    5d0c:	mov	r0, r2
    5d0e:	b.n	5ad2 <__udivmoddi4+0x6a>
    5d10:	subs.w	r4, r8, r2
    5d14:	sbc.w	r6, r9, r3
    5d18:	subs	r0, #1
    5d1a:	b.n	5ce8 <__udivmoddi4+0x280>
    5d1c:	mov	r4, r0
    5d1e:	b.n	5cd2 <__udivmoddi4+0x26a>
    5d20:	mov	r1, r2
    5d22:	b.n	5c50 <__udivmoddi4+0x1e8>
    5d24:	mov	r9, r0
    5d26:	b.n	5caa <__udivmoddi4+0x242>
    5d28:	mov	sl, r1
    5d2a:	b.n	5c26 <__udivmoddi4+0x1be>
    5d2c:	subs	r3, #2
    5d2e:	add	r4, r7
    5d30:	b.n	5bc4 <__udivmoddi4+0x15c>
    5d32:	mov	r0, r1
    5d34:	b.n	5b4c <__udivmoddi4+0xe4>
    5d36:	subs	r0, #2
    5d38:	add	r6, r7
    5d3a:	b.n	5b9c <__udivmoddi4+0x134>
    5d3c:	cmp	sl, r8
    5d3e:	bcc.n	5d10 <__udivmoddi4+0x2a8>
    5d40:	mov	r6, r7
    5d42:	b.n	5ce8 <__udivmoddi4+0x280>
    5d44:	mov	r1, r5
    5d46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d4a:	nop

00005d4c <__aeabi_idiv0>:
    5d4c:	bx	lr
    5d4e:	nop

00005d50 <___init_veneer>:
    5d50:	ldr.w	pc, [pc]	; 5d54 <___init_veneer+0x4>
    5d54:	.word	0x600016a5
	...

Disassembly of section .fini:

00005d60 <_fini>:
    5d60:	push	{r3, r4, r5, r6, r7, lr}
    5d62:	nop
