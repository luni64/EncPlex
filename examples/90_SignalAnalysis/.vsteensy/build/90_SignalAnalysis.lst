
.vsteensy/build/90_SignalAnalysis.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001428 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	600016c8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016c0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	6000129c <usb_init>
	analog_init();
600011e4:	bl	6000148c <analog_init>
	pwm_init();
600011e8:	bl	600016b0 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e4 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600016e0 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	600016e8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600016b8 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001700
60001220:	.word	0x00005de0
60001224:	.word	0x20000000
60001228:	.word	0x600074ec
6000122c:	.word	0x20000fb0
60001230:	.word	0x20000fb0
60001234:	.word	0x20003700
60001238:	.word	0xe000ed88
6000123c:	.word	0x200033fc
60001240:	.word	0x00001b51
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00001875
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x00001979
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x2000125c
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20001264
60001290:	.word	0x20003400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	600016d8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	600016d0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #640	; 0x280
6000132a:	bl	600016f0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20003000
6000137c:	.word	0x20003400
60001380:	.word	0x00000d5d
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_32M	(SCB_MPU_RASR_SIZE(24) | SCB_MPU_RASR_ENABLE)
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000138a:	ldr	r2, [pc, #100]	; (600013f0 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000138e:	ldr	r3, [pc, #100]	; (600013f4 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001390:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r0, [pc, #96]	; (600013f8 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001398:	ldr	r6, [pc, #96]	; (600013fc <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
6000139a:	ldr	r5, [pc, #100]	; (60001400 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139c:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000139e:	ldr	r7, [pc, #100]	; (60001404 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013a0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013a4:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013a6:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013a8:	ldr	r6, [pc, #92]	; (60001408 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013aa:	ldr	r5, [pc, #96]	; (6000140c <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013ac:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013ae:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b0:	ldr	r7, [pc, #92]	; (60001410 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013b2:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013b4:	ldr	r6, [pc, #92]	; (60001414 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013b6:	ldr	r5, [pc, #96]	; (60001418 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013ba:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013bc:	ldr	r7, [pc, #92]	; (6000141c <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013be:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c0:	ldr	r6, [pc, #92]	; (60001420 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c2:	ldr	r5, [pc, #96]	; (60001424 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013c4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c8:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ca:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013cc:	dsb	sy
	asm("isb");
600013d0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013d4:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013d8:	dsb	sy
	asm("isb");
600013dc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013e0:	ldr.w	r3, [r2, #-136]
600013e4:	orr.w	r3, r3, #196608	; 0x30000
600013e8:	str.w	r3, [r2, #-136]
600013ec:	pop	{r4, r5, r6, r7, pc}
600013ee:	nop
600013f0:	.word	0xe000ed9c
600013f4:	.word	0xe000eda0
600013f8:	.word	0xe000ed94
600013fc:	.word	0x03080025
60001400:	.word	0x00200011
60001404:	.word	0x07020021
60001408:	.word	0x20000012
6000140c:	.word	0x13080025
60001410:	.word	0x20200013
60001414:	.word	0x130b0027
60001418:	.word	0x40000014
6000141c:	.word	0x13100033
60001420:	.word	0x60000015
60001424:	.word	0x070b002f

60001428 <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
60001428:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000142a:	ldr	r2, [pc, #92]	; (60001488 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000142c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000142e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001432:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001436:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000143a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000143e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001442:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001444:	tst.w	r3, #2
60001448:	beq.n	60001458 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000144a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000144c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000144e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001450:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001452:	tst.w	r3, #2
60001456:	bne.n	6000144a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001458:	tst.w	r3, #8192	; 0x2000
6000145c:	bne.n	60001462 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145e:	str	r5, [r2, #20]
			continue;
60001460:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001462:	tst.w	r3, #4096	; 0x1000
60001466:	bne.n	6000146c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001468:	str	r6, [r2, #20]
			continue;
6000146a:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000146c:	cmp	r3, #0
6000146e:	bge.n	60001442 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001470:	tst.w	r3, #65536	; 0x10000
60001474:	beq.n	6000147a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001476:	str	r1, [r2, #24]
			continue;
60001478:	b.n	60001442 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000147a:	lsls	r3, r3, #25
6000147c:	bmi.n	60001482 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000147e:	str	r7, [r2, #20]
			continue;
60001480:	b.n	60001442 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001482:	pop	{r4, r5, r6, r7}
60001484:	bx	lr
60001486:	nop
60001488:	.word	0x400d8000

6000148c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000148c:	ldr	r3, [pc, #68]	; (600014d4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148e:	ldr	r1, [pc, #72]	; (600014d8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001490:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001492:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001494:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001498:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000149a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000149c:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014a2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a4:	orr.w	r0, r0, #768	; 0x300
600014a8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014aa:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014ac:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ae:	ldr	r3, [r2, #72]	; 0x48
600014b0:	lsls	r3, r3, #24
600014b2:	bmi.n	600014ae <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014b4:	ldr	r3, [pc, #36]	; (600014dc <analog_init+0x50>)
600014b6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014ba:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014bc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014be:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014c0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014c2:	ldr	r3, [r2, #72]	; 0x48
600014c4:	ands.w	r3, r3, #128	; 0x80
600014c8:	bne.n	600014c2 <analog_init+0x36>
	calibrating = 0;
600014ca:	ldr	r2, [pc, #20]	; (600014e0 <analog_init+0x54>)
600014cc:	strb	r3, [r2, #0]
}
600014ce:	pop	{r4, r5}
600014d0:	bx	lr
600014d2:	nop
600014d4:	.word	0x400fc000
600014d8:	.word	0x400c4000
600014dc:	.word	0x400c8000
600014e0:	.word	0x20001288

600014e4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e4:	ldr	r2, [pc, #216]	; (600015c0 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014e6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014e8:	ldr	r1, [pc, #216]	; (600015c4 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ea:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ee:	ldr	r3, [r2, #0]
600014f0:	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

FLASHMEM void tempmon_init(void)
{
600014f4:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f6:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014f8:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014fc:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001500:	ldr.w	lr, [pc, #212]	; 600015d8 <tempmon_init+0xf4>
60001504:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001506:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150a:	ldr	r7, [pc, #188]	; (600015c8 <tempmon_init+0xe4>)
6000150c:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001514:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	vmov	s15, r0
60001528:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000152c:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000152e:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001532:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001536:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153a:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000153c:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001540:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001544:	ldr	r5, [pc, #132]	; (600015cc <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001546:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001550:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001554:	ldr	r6, [pc, #120]	; (600015d0 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001556:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155a:	ldr	r1, [pc, #120]	; (600015d4 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000155c:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155e:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001560:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001564:	vmov	s15, r3
60001568:	vcvt.f32.u32	s15, s15
6000156c:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001570:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001578:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000157c:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001580:	vmov	r3, s11
60001584:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001588:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158c:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001590:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001592:	and.w	r1, r1, r0, lsl #16
60001596:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159e:	orrs	r3, r1
600015a0:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a4:	vmov	r3, s15
600015a8:	ldr.w	r1, [r2, #272]	; 0x110
600015ac:	ubfx	r3, r3, #0, #12
600015b0:	orrs	r3, r1
600015b2:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015b6:	ldr	r3, [r2, #0]
600015b8:	orr.w	r3, r3, #2
600015bc:	str	r3, [r2, #0]
600015be:	pop	{r4, r5, r6, r7, pc}
600015c0:	.word	0x400d8180
600015c4:	.word	0x401f4400
600015c8:	.word	0x20001294
600015cc:	.word	0x20001290
600015d0:	.word	0x20001298
600015d4:	.word	0x0fff0000
600015d8:	.word	0x2000128c

600015dc <usb_string_product_name_default>:
600015dc:	..U.S.B. .S.e.r.
600015ec:	i.a.l...

600015f4 <usb_string_manufacturer_name_default>:
600015f4:	..T.e.e.n.s.y.d.
60001604:	u.i.n.o.

6000160c <string0>:
6000160c:	....

60001610 <usb_config_descriptor_12>:
60001610:	..C.....2.......
60001620:	...$....$....$..
60001630:	.$..............
60001640:	.........@......
60001650:	@...

60001654 <usb_config_descriptor_480>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	................
60001694:	....

60001698 <qualifier_descriptor>:
60001698:	.......@....

600016a4 <_init>:
600016a4:	push	{r3, r4, r5, r6, r7, lr}
600016a6:	nop
600016a8:	pop	{r3, r4, r5, r6, r7}
600016aa:	pop	{r3}
600016ac:	mov	lr, r3
600016ae:	bx	lr

600016b0 <__pwm_init_veneer>:
600016b0:	ldr.w	pc, [pc]	; 600016b4 <__pwm_init_veneer+0x4>
600016b4:	.word	0x00001c7d

600016b8 <__main_veneer>:
600016b8:	ldr.w	pc, [pc]	; 600016bc <__main_veneer+0x4>
600016bc:	.word	0x000016e5

600016c0 <__startup_early_hook_veneer>:
600016c0:	ldr.w	pc, [pc]	; 600016c4 <__startup_early_hook_veneer+0x4>
600016c4:	.word	0x00001b69

600016c8 <__set_arm_clock_veneer>:
600016c8:	ldr.w	pc, [pc]	; 600016cc <__set_arm_clock_veneer+0x4>
600016cc:	.word	0x00000961

600016d0 <__delay_veneer>:
600016d0:	ldr.w	pc, [pc]	; 600016d4 <__delay_veneer+0x4>
600016d4:	.word	0x00001541

600016d8 <__usb_init_serialnumber_veneer>:
600016d8:	ldr.w	pc, [pc]	; 600016dc <__usb_init_serialnumber_veneer+0x4>
600016dc:	.word	0x0000168d

600016e0 <__startup_late_hook_veneer>:
600016e0:	ldr.w	pc, [pc]	; 600016e4 <__startup_late_hook_veneer+0x4>
600016e4:	.word	0x00001b6d

600016e8 <____libc_init_array_veneer>:
600016e8:	ldr.w	pc, [pc]	; 600016ec <____libc_init_array_veneer+0x4>
600016ec:	.word	0x00001f69

600016f0 <__memset_veneer>:
600016f0:	ldr.w	pc, [pc]	; 600016f4 <__memset_veneer+0x4>
600016f4:	.word	0x0000261d

600016f8 <__init_array_start>:
600016f8:	.word	0x00000045

600016fc <__init_array_end>:
600016fc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	lsrs	r0, r6, #30
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	ldrb	r4, [r4, r7]
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	nop
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r6, #30
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	ldrb	r4, [r4, r7]
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	lsrs	r0, r6, #30
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
	...

00000080 <setup>:
      80:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      84:	ldr	r2, [pc, #296]	; (1b0 <setup+0x130>)
      86:	ldr	r1, [pc, #300]	; (1b4 <setup+0x134>)
    unsigned phaseB;
} data[bufSize];


void setup()
{
      88:	ldr	r5, [pc, #300]	; (1b8 <setup+0x138>)
      8a:	ldr	r4, [pc, #304]	; (1bc <setup+0x13c>)
      8c:	.word	0x8b06ed2d
      90:	sub	sp, #8
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      92:	.short	0x7813
      94:	cmp	r3, #0
      96:	.short	0xd0fc
      98:	ldrb	r3, [r1, #0]
      9a:	.short	0x07db
      9c:	bpl.n	92 <setup+0x12>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      9e:	ldr	r3, [r5, #0]
      a0:	.word	0x1a1b6820
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      a4:	cmp	r3, #14
      a6:	bls.n	92 <setup+0x12>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      a8:	movs	r1, #4
      aa:	.short	0x4845
      ac:	bl	85c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
      b0:	ldr	r0, [pc, #272]	; (1c4 <setup+0x144>)
      b2:	.short	0xf001
      b4:	stc2	1, cr2, [fp], {1}
    while (!Serial) {}
    Serial.println("asdf");

    pinMode(LED_BUILTIN, OUTPUT);
      b8:	movs	r0, #13
    pinMode(0, INPUT_PULLUP);
    pinMode(1, INPUT_PULLUP);

    data[0].cycles = ARM_DWT_CYCCNT;
      ba:	ldr	r4, [pc, #268]	; (1c8 <setup+0x148>)
void setup()
{
    while (!Serial) {}
    Serial.println("asdf");

    pinMode(LED_BUILTIN, OUTPUT);
      bc:	bl	160c <pinMode>
    pinMode(0, INPUT_PULLUP);
      c0:	movs	r1, #2
      c2:	movs	r0, #0
      c4:	.word	0xfaa2f001
    pinMode(1, INPUT_PULLUP);
      c8:	movs	r1, #2
      ca:	.short	0x2001
      cc:	bl	160c <pinMode>

    data[0].cycles = ARM_DWT_CYCCNT;
      d0:	.word	0xf04f4a3e
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
      d4:	bics	r4, r0
      d6:	.short	0x6811
    data[0].phaseB = digitalReadFast(1);

    unsigned i = 0;
    while (i < bufSize)
    {
        unsigned cycles = ARM_DWT_CYCCNT;
      d8:	mov	ip, r2
      da:	.short	0x461e

    data[0].cycles = ARM_DWT_CYCCNT;
    data[0].phaseA = digitalReadFast(0);
    data[0].phaseB = digitalReadFast(1);

    unsigned i = 0;
      dc:	movs	r2, #0

    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(0, INPUT_PULLUP);
    pinMode(1, INPUT_PULLUP);

    data[0].cycles = ARM_DWT_CYCCNT;
      de:	.short	0x6021
      e0:	ldr	r1, [r3, #8]
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
      e2:	ldr	r3, [r3, #8]
    data[0].phaseA = digitalReadFast(0);
      e4:	.word	0x01c0f3c1
    data[0].phaseB = digitalReadFast(1);
      e8:	ubfx	r3, r3, #2, #1
    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(0, INPUT_PULLUP);
    pinMode(1, INPUT_PULLUP);

    data[0].cycles = ARM_DWT_CYCCNT;
    data[0].phaseA = digitalReadFast(0);
      ec:	.word	0x60a36061
    data[0].phaseB = digitalReadFast(1);
      f0:	b.n	104 <setup+0x84>
        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
            data[i].phaseA = A;
            data[i].phaseB = B;
            i++;
      f2:	adds	r2, #1
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
      f4:	str.w	lr, [r4, r5, lsl #2]
            data[i].phaseA = A;
      f8:	str.w	r1, [r8, #4]
    data[0].cycles = ARM_DWT_CYCCNT;
    data[0].phaseA = digitalReadFast(0);
    data[0].phaseB = digitalReadFast(1);

    unsigned i = 0;
    while (i < bufSize)
      fc:	cmp	r2, #10

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
            data[i].phaseA = A;
            data[i].phaseB = B;
      fe:	str.w	r0, [r8, #8]
    data[0].cycles = ARM_DWT_CYCCNT;
    data[0].phaseA = digitalReadFast(0);
    data[0].phaseB = digitalReadFast(1);

    unsigned i = 0;
    while (i < bufSize)
     102:	beq.n	136 <setup+0xb6>
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
     104:	.word	0xf8dc1e53
    data[0].phaseB = digitalReadFast(1);

    unsigned i = 0;
    while (i < bufSize)
    {
        unsigned cycles = ARM_DWT_CYCCNT;
     108:	b.n	10c <setup+0x8c>
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
     10a:	.short	0x68b1
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
     10c:	add.w	r5, r2, r2, lsl #1
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
     110:	add.w	r3, r3, r3, lsl #1
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
     114:	ldr	r0, [r6, #8]

    unsigned i = 0;
    while (i < bufSize)
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
     116:	ubfx	r1, r1, #3, #1
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
        {
            data[i].cycles = cycles;
     11a:	add.w	r8, r4, r5, lsl #2
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
     11e:	add.w	r3, r4, r3, lsl #2
    unsigned i = 0;
    while (i < bufSize)
    {
        unsigned cycles = ARM_DWT_CYCCNT;
        unsigned A = digitalReadFast(0);
        unsigned B = digitalReadFast(1);
     122:	ubfx	r0, r0, #2, #1

        if (A != data[i - 1].phaseA || B != data[i - 1].phaseB)
     126:	ldr	r7, [r3, #4]
     128:	cmp	r1, r7
     12a:	.short	0xd1e2
     12c:	ldr	r3, [r3, #8]
     12e:	.short	0x4298
     130:	bne.n	f2 <setup+0x72>
    data[0].cycles = ARM_DWT_CYCCNT;
    data[0].phaseA = digitalReadFast(0);
    data[0].phaseB = digitalReadFast(1);

    unsigned i = 0;
    while (i < bufSize)
     132:	.short	0x2a0a
     134:	bne.n	104 <setup+0x84>
     136:	ldr	r4, [pc, #152]	; (1d0 <setup+0x150>)
     138:	.word	0xab17ed9f
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     13c:	vldr	d9, [pc, #96]	; 1a0 <setup+0x120>
     140:	vldr	d8, [pc, #100]	; 1a8 <setup+0x128>
     144:	.word	0x056cf104
     148:	ldr.w	r1, [r4, #-12]
     14c:	.word	0xf854340c
     150:	subs	r4, #12
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     152:	ldr.w	r2, [r4, #-4]
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     156:	.short	0x1a5b
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     158:	ldr	r0, [pc, #104]	; (1c4 <setup+0x144>)
     15a:	.short	0x491e
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     15c:	vmov	s14, r3
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     160:	.word	0x3c08f854
     164:	str	r2, [sp, #4]
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     166:	vcvt.f64.u32	d7, s14
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     16a:	.short	0x9300
    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
     16c:	vmul.f64	d7, d7, d9
     170:	.word	0x6b08ee87
     174:	vadd.f64	d7, d6, d10
     178:	vcvt.f32.f64	s14, d7
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
     17c:	.word	0xaac7eeb7
     180:	vmov	r2, r3, d10
     184:	.word	0xfc3af001



    float time = 0;

    for (unsigned i = 1; i < bufSize; i++)
     188:	cmp	r4, r5
     18a:	bne.n	148 <setup+0xc8>
    {
        double dt = (data[i].cycles - data[i-1].cycles) * 1.E3 / F_CPU;
        time += dt;
        Serial.printf("%.5f,%u,%u\n", time, data[i].phaseA, data[i].phaseB);
    }
}
     18c:	.word	0xecbdb002
     190:	ldrh	r6, [r0, #24]
     192:	.short	0xe8bd
     194:	strh	r0, [r6, #14]
     196:	.short	0xbf00
	...
     1a4:	ands	r0, r0
     1a6:	lsls	r7, r1
     1a8:	.word	0x00000000
     1ac:	b.n	4f6 <usb_serial_write.part.1+0x11e>
     1ae:	.short	0x41c1
     1b0:	asrs	r0, r3, #9
     1b2:	.short	0x2000
     1b4:	asrs	r0, r1, #6
     1b6:	.short	0x2000
     1b8:	asrs	r4, r4, #9
     1ba:	.short	0x2000
     1bc:	asrs	r0, r7, #11
     1be:	.short	0x2000
     1c0:	movs	r4, r1
     1c2:	movs	r0, #0
     1c4:	.word	0x200005f4
     1c8:	lsrs	r4, r2, #31
     1ca:	.short	0x2000
     1cc:	asrs	r4, r0, #32
     1ce:	.short	0xe000
     1d0:	lsrs	r0, r4, #31
     1d2:	.short	0x2000
     1d4:	movs	r0, r0
     1d6:	.short	0x2000

000001d8 <loop>:

int olda, oldb;


void loop()
{
     1d8:	push	{r3, r4, r5, r6, r7, lr}
static inline uint8_t digitalReadFast(uint8_t pin) __attribute__((always_inline, unused));
static inline uint8_t digitalReadFast(uint8_t pin)
{
	if (__builtin_constant_p(pin)) {
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
     1da:	mov.w	r3, #1107296256	; 0x42000000

    int a = digitalReadFast(0);
    int b = digitalReadFast(1);
    int val = a & (b << 1);

    if(a != olda || b!= oldb)
     1de:	.short	0x4e0c
     1e0:	ldr	r7, [pc, #48]	; (214 <loop+0x3c>)
     1e2:	.short	0x689c
     1e4:	ldr	r2, [r6, #0]
void loop()
{
    // digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
    // delay(200);

    int a = digitalReadFast(0);
     1e6:	.short	0xf3c4
     1e8:	lsls	r0, r0, #19
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
     1ea:	.short	0x689d
    int b = digitalReadFast(1);
    int val = a & (b << 1);

    if(a != olda || b!= oldb)
     1ec:	cmp	r4, r2
{
    // digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
    // delay(200);

    int a = digitalReadFast(0);
    int b = digitalReadFast(1);
     1ee:	.short	0xf3c5
     1f0:	lsls	r0, r0, #22
    int val = a & (b << 1);

    if(a != olda || b!= oldb)
     1f2:	beq.n	206 <loop+0x2e>
    {
        Serial.printf("x: %d%d\n", a, b);
     1f4:	mov	r3, r5
     1f6:	mov	r2, r4
     1f8:	ldr	r1, [pc, #28]	; (218 <loop+0x40>)
     1fa:	ldr	r0, [pc, #32]	; (21c <loop+0x44>)
     1fc:	bl	19fc <Print::printf(char const*, ...)>
        olda = a;
     200:	str	r4, [r6, #0]
        oldb = b;
     202:	str	r5, [r7, #0]
     204:	pop	{r3, r4, r5, r6, r7, pc}

    int a = digitalReadFast(0);
    int b = digitalReadFast(1);
    int val = a & (b << 1);

    if(a != olda || b!= oldb)
     206:	ldr	r3, [r7, #0]
     208:	cmp	r5, r3
     20a:	bne.n	1f4 <loop+0x1c>
     20c:	b.n	204 <loop+0x2c>
     20e:	nop
     210:	.word	0x20000fcc
     214:	.word	0x20000fd0
     218:	.word	0x20000014
     21c:	.word	0x200005f4

00000220 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     220:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     222:	ldr	r1, [pc, #80]	; (274 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     224:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     228:	ldr	r5, [pc, #76]	; (278 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     22a:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     22c:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     230:	ldr	r6, [pc, #72]	; (27c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     232:	ldr	r2, [pc, #76]	; (280 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     234:	add.w	r5, r5, r0, lsl #5
     238:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     23a:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     23c:	mov	r0, r5
     23e:	ldrh	r2, [r6, #0]
     240:	bl	14c0 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     244:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     246:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     24a:	add	r1, r4
	asm("dsb");
     24c:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     250:	ldr	r2, [pc, #48]	; (284 <rx_queue_transfer+0x64>)
     252:	str	r3, [r2, #0]
		location += 32;
     254:	adds	r3, #32
	} while (location < end_addr);
     256:	cmp	r1, r3
     258:	bhi.n	252 <rx_queue_transfer+0x32>
	asm("dsb");
     25a:	dsb	sy
	asm("isb");
     25e:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     262:	movs	r0, #3
     264:	mov	r1, r5
     266:	bl	1518 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     26a:	ldr	r3, [pc, #28]	; (288 <rx_queue_transfer+0x68>)
     26c:	mov.w	r2, #131072	; 0x20000
     270:	str	r2, [r3, #0]
     272:	pop	{r3, r4, r5, r6, r7, pc}
     274:	.word	0x20200000
     278:	.word	0x20001060
     27c:	.word	0x2000116e
     280:	.word	0xe000e18c
     284:	.word	0xe000ef5c
     288:	.word	0xe000e10c

0000028c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     28c:	ldr	r2, [pc, #144]	; (320 <rx_event+0x94>)
     28e:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     290:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     294:	ubfx	r3, r3, #16, #15
     298:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     29a:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     29c:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     29e:	cmp	r4, #0
     2a0:	ble.n	314 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     2a2:	ldr	r1, [pc, #128]	; (324 <rx_event+0x98>)
		if (head != rx_tail) {
     2a4:	ldr	r2, [pc, #128]	; (328 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     2a6:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     2a8:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     2aa:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     2ac:	ldr	r0, [pc, #124]	; (32c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     2ae:	ldr	r6, [pc, #128]	; (330 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     2b0:	cmp	r3, r2
     2b2:	beq.n	2c4 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     2b4:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     2b8:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     2bc:	rsb	r2, r7, #512	; 0x200
     2c0:	cmp	r4, r2
     2c2:	bls.n	2ea <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     2c4:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     2c6:	movs	r2, #0
     2c8:	ldr	r7, [pc, #104]	; (334 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     2ca:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     2cc:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     2d0:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     2d4:	ldr	r6, [pc, #96]	; (338 <rx_event+0xac>)
     2d6:	ite	ls
     2d8:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     2da:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     2dc:	strb	r2, [r1, #0]
		rx_available += len;
     2de:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     2e0:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     2e2:	add	r4, r2
     2e4:	str	r4, [r6, #0]
     2e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     2ea:	ldr	r3, [pc, #80]	; (33c <rx_event+0xb0>)
     2ec:	add.w	r0, r7, r8, lsl #9
     2f0:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     2f2:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     2f4:	add.w	r1, r3, r5, lsl #9
     2f8:	add	r0, r3
     2fa:	bl	1a1c <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     2fe:	ldr	r2, [pc, #56]	; (338 <rx_event+0xac>)
				rx_queue_transfer(i);
     300:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     302:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     306:	ldr	r3, [r2, #0]
     308:	add	r4, r3
     30a:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     30c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     310:	b.w	220 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     314:	mov	r0, r5
	}
}
     316:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     31a:	b.w	220 <rx_queue_transfer>
     31e:	nop
     320:	.word	0x2000116e
     324:	.word	0x20001184
     328:	.word	0x20001160
     32c:	.word	0x20001164
     330:	.word	0x20001170
     334:	.word	0x2000104c
     338:	.word	0x20001180
     33c:	.word	0x20200000

00000340 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     340:	ldr	r3, [pc, #120]	; (3bc <usb_serial_flush_callback+0x7c>)
     342:	ldrb	r2, [r3, #0]
     344:	cbnz	r2, 35e <usb_serial_flush_callback+0x1e>
     346:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     34a:	ldr	r2, [pc, #116]	; (3c0 <usb_serial_flush_callback+0x80>)
     34c:	ldrb	r2, [r2, #0]
     34e:	cbz	r2, 35e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     350:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     354:	ldr	r5, [pc, #108]	; (3c4 <usb_serial_flush_callback+0x84>)
     356:	ldrh	r2, [r5, #0]
     358:	cbnz	r2, 360 <usb_serial_flush_callback+0x20>
     35a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     35e:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     360:	ldr	r6, [pc, #100]	; (3c8 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     362:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     366:	ldr	r7, [pc, #100]	; (3cc <usb_serial_flush_callback+0x8c>)
     368:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     36a:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     36c:	ldr	r4, [pc, #96]	; (3d0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     36e:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     372:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     376:	mov	r0, r7
     378:	mov	r1, r4
     37a:	bl	14c0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     37e:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     382:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     386:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     38a:	ldr	r3, [pc, #72]	; (3d4 <usb_serial_flush_callback+0x94>)
     38c:	str	r1, [r3, #0]
		location += 32;
     38e:	adds	r1, #32
	} while (location < end_addr);
     390:	cmp	r2, r1
     392:	bhi.n	38c <usb_serial_flush_callback+0x4c>
	asm("dsb");
     394:	dsb	sy
	asm("isb");
     398:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     39c:	movs	r0, #4
     39e:	mov	r1, r7
     3a0:	bl	14f0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     3a4:	ldrb	r3, [r6, #0]
     3a6:	ldr	r2, [pc, #32]	; (3c8 <usb_serial_flush_callback+0x88>)
     3a8:	adds	r3, #1
     3aa:	uxtb	r3, r3
     3ac:	cmp	r3, #3
     3ae:	it	hi
     3b0:	movhi	r3, #0
     3b2:	strb	r3, [r2, #0]
	tx_available = 0;
     3b4:	movs	r3, #0
     3b6:	strh	r3, [r5, #0]
     3b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     3bc:	.word	0x2000105e
     3c0:	.word	0x20001258
     3c4:	.word	0x20001186
     3c8:	.word	0x2000105f
     3cc:	.word	0x200011a0
     3d0:	.word	0x20201000
     3d4:	.word	0xe000ef70

000003d8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     3d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3dc:	sub	sp, #20
     3de:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     3e0:	str	r1, [sp, #4]
     3e2:	cmp	r1, #0
     3e4:	beq.w	52c <usb_serial_write.part.1+0x154>
     3e8:	movs	r3, #0
     3ea:	ldr.w	r8, [pc, #348]	; 548 <usb_serial_write.part.1+0x170>
     3ee:	ldr.w	r9, [pc, #332]	; 53c <usb_serial_write.part.1+0x164>
     3f2:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     3f4:	ldr	r6, [pc, #312]	; (530 <usb_serial_write.part.1+0x158>)
     3f6:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     3fa:	ldr.w	sl, [pc, #336]	; 54c <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     3fe:	ldr.w	fp, [pc, #336]	; 550 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     402:	ldr	r2, [pc, #304]	; (534 <usb_serial_write.part.1+0x15c>)
     404:	ldrb	r4, [r2, #0]
     406:	ldr	r2, [pc, #304]	; (538 <usb_serial_write.part.1+0x160>)
     408:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     40c:	cmp	r3, #0
     40e:	bne.n	4ee <usb_serial_write.part.1+0x116>
     410:	mov	r5, r3
     412:	mov	r4, r3
     414:	b.n	440 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     416:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     41a:	cbnz	r4, 41e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     41c:	ldr	r5, [r6, #0]
     41e:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     420:	cmp	r3, #0
     422:	bne.n	4e2 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     424:	ldr	r3, [r6, #0]
     426:	subs	r3, r3, r5
     428:	cmp	r3, #120	; 0x78
     42a:	bhi.n	520 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     42c:	ldrb.w	r3, [sl]
     430:	cmp	r3, #0
     432:	beq.n	4e2 <usb_serial_write.part.1+0x10a>
			yield();
     434:	bl	16f4 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     438:	ldrh.w	r3, [r8]
     43c:	cmp	r3, #0
     43e:	bne.n	4ea <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     440:	mov	r0, r7
     442:	bl	153c <usb_transfer_status>
			if (!(status & 0x80)) {
     446:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     44a:	ldr	r2, [pc, #240]	; (53c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     44c:	bne.n	416 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     44e:	mov.w	r3, #2048	; 0x800
     452:	ldr	r2, [pc, #224]	; (534 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     454:	strb.w	r0, [r9]
     458:	ldrb	r4, [r2, #0]
     45a:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     45c:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     460:	lsls	r4, r4, #11
		if (size >= tx_available) {
     462:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     464:	ldr	r1, [pc, #216]	; (540 <usb_serial_write.part.1+0x168>)
     466:	add	r0, r4
		if (size >= tx_available) {
     468:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     46a:	add	r0, r1
		if (size >= tx_available) {
     46c:	bcc.n	4f6 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     46e:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     470:	ldr	r1, [sp, #8]
     472:	bl	1a1c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     476:	movs	r3, #0
     478:	mov	r1, r4
     47a:	mov.w	r2, #2048	; 0x800
     47e:	mov	r0, r7
     480:	bl	14c0 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     484:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     488:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     48c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     490:	str.w	r3, [fp]
		location += 32;
     494:	adds	r3, #32
	} while (location < end_addr);
     496:	cmp	r4, r3
     498:	bhi.n	490 <usb_serial_write.part.1+0xb8>
	asm("dsb");
     49a:	dsb	sy
	asm("isb");
     49e:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     4a2:	movs	r0, #4
     4a4:	mov	r1, r7
     4a6:	bl	14f0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     4aa:	ldr	r3, [pc, #136]	; (534 <usb_serial_write.part.1+0x15c>)
     4ac:	ldr	r2, [pc, #132]	; (534 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     4ae:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     4b0:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     4b2:	ldr	r0, [pc, #144]	; (544 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     4b4:	adds	r3, #1
     4b6:	uxtb	r3, r3
     4b8:	cmp	r3, #3
     4ba:	it	hi
     4bc:	movhi	r3, #0
     4be:	strb	r3, [r2, #0]
			size -= tx_available;
     4c0:	ldrh.w	r2, [r8]
			sent += tx_available;
     4c4:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     4c6:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     4ca:	add	r3, r2
     4cc:	str	r3, [sp, #0]
			data += tx_available;
     4ce:	ldr	r3, [sp, #8]
     4d0:	add	r3, r2
     4d2:	str	r3, [sp, #8]
     4d4:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     4d6:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     4da:	ldr	r1, [sp, #4]
     4dc:	subs	r2, r1, r2
     4de:	str	r2, [sp, #4]
     4e0:	bne.n	402 <usb_serial_write.part.1+0x2a>
     4e2:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     4e4:	add	sp, #20
     4e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4ea:	ldr	r2, [pc, #72]	; (534 <usb_serial_write.part.1+0x15c>)
     4ec:	ldrb	r4, [r2, #0]
     4ee:	mov	r2, r3
     4f0:	rsb	r0, r3, #2048	; 0x800
     4f4:	b.n	460 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     4f6:	ldr	r4, [sp, #4]
     4f8:	ldr	r1, [sp, #8]
     4fa:	mov	r2, r4
     4fc:	str	r3, [sp, #12]
     4fe:	bl	1a1c <memcpy>
			tx_available -= size;
     502:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     504:	ldr	r2, [pc, #60]	; (544 <usb_serial_write.part.1+0x16c>)
     506:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     50a:	subs	r3, r3, r4
     50c:	strh.w	r3, [r8]
     510:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     512:	str.w	r1, [r2, #132]	; 0x84
     516:	mov	r0, r3
     518:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     51a:	add	sp, #20
     51c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     520:	movs	r3, #1
				return sent;
     522:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     524:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     526:	add	sp, #20
     528:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     52c:	ldr	r0, [sp, #4]
     52e:	b.n	4e4 <usb_serial_write.part.1+0x10c>
     530:	.word	0x20001264
     534:	.word	0x2000105f
     538:	.word	0x200011a0
     53c:	.word	0x20001185
     540:	.word	0x20201000
     544:	.word	0x402e0000
     548:	.word	0x20001186
     54c:	.word	0x20001258
     550:	.word	0xe000ef70

00000554 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     554:	bx	lr
     556:	nop

00000558 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     558:	ldr	r3, [pc, #196]	; (620 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     55a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     55e:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     560:	ldr	r7, [pc, #192]	; (624 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     562:	cmp	r3, #0
     564:	beq.n	610 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     566:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     56a:	ldr.w	r8, [pc, #236]	; 658 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     56e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     570:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     574:	movs	r1, #0
     576:	movs	r2, #128	; 0x80
     578:	ldr	r0, [pc, #172]	; (628 <usb_serial_configure+0xd0>)
	tx_head = 0;
     57a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     57c:	ldr	r6, [pc, #172]	; (62c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     57e:	bl	261c <memset>
	tx_head = 0;
     582:	ldr	r4, [pc, #172]	; (630 <usb_serial_configure+0xd8>)
	tx_available = 0;
     584:	ldr	r3, [pc, #172]	; (634 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     586:	mov	r1, r5
     588:	mov.w	r2, #256	; 0x100
     58c:	ldr	r0, [pc, #168]	; (638 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     58e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     590:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     592:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     594:	bl	261c <memset>
	memset(rx_count, 0, sizeof(rx_count));
     598:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     59a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     59c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     59e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     5a0:	str	r5, [r6, #8]
     5a2:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     5a4:	ldr	r1, [pc, #148]	; (63c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     5a6:	ldr	r6, [pc, #152]	; (640 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     5a8:	ldr	r0, [pc, #152]	; (644 <usb_serial_configure+0xec>)
	rx_available = 0;
     5aa:	ldr.w	lr, [pc, #176]	; 65c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     5ae:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     5b0:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     5b2:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     5b4:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     5b6:	str	r5, [r6, #0]
     5b8:	str	r5, [r6, #4]
     5ba:	str	r5, [r6, #8]
     5bc:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     5be:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     5c2:	bl	1458 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     5c6:	ldrh.w	r1, [r8]
     5ca:	mov	r2, r5
     5cc:	ldr	r3, [pc, #120]	; (648 <usb_serial_configure+0xf0>)
     5ce:	movs	r0, #3
     5d0:	bl	13f4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     5d4:	mov	r3, r5
     5d6:	ldrh	r1, [r7, #0]
     5d8:	movs	r2, #1
     5da:	movs	r0, #4
     5dc:	bl	1458 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     5e0:	mov	r0, r4
     5e2:	adds	r4, #1
     5e4:	bl	220 <rx_queue_transfer>
     5e8:	cmp	r4, #8
     5ea:	bne.n	5e0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     5ec:	ldr	r3, [pc, #92]	; (64c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     5ee:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     5f0:	ldr	r0, [pc, #92]	; (650 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     5f2:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     5f4:	ldr	r4, [pc, #92]	; (654 <usb_serial_configure+0xfc>)
     5f6:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     5f8:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     5fc:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     600:	ldr.w	r2, [r3, #328]	; 0x148
     604:	orr.w	r2, r2, #16777216	; 0x1000000
     608:	str.w	r2, [r3, #328]	; 0x148
     60c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     610:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     612:	ldr.w	r8, [pc, #68]	; 658 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     616:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     618:	strh.w	r3, [r8]
     61c:	b.n	574 <usb_serial_configure+0x1c>
     61e:	nop
     620:	.word	0x20001230
     624:	.word	0x2000105c
     628:	.word	0x200011a0
     62c:	.word	0x20001170
     630:	.word	0x2000105f
     634:	.word	0x20001186
     638:	.word	0x20001060
     63c:	.word	0x20001184
     640:	.word	0x2000104c
     644:	.word	0x20001160
     648:	.word	0x0000028d
     64c:	.word	0x402e0000
     650:	.word	0x20001220
     654:	.word	0x00000341
     658:	.word	0x2000116e
     65c:	.word	0x20001180

00000660 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     660:	ldr	r3, [pc, #196]	; (728 <usb_serial_read+0xc8>)
     662:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     666:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     66a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     66c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     66e:	ldr	r3, [pc, #188]	; (72c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     670:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     672:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     674:	cmp	r1, #0
     676:	beq.n	720 <usb_serial_read+0xc0>
     678:	ldr	r3, [pc, #180]	; (730 <usb_serial_read+0xd0>)
     67a:	uxtb	r4, r4
     67c:	ldrb	r3, [r3, #0]
     67e:	cmp	r4, r3
     680:	beq.n	724 <usb_serial_read+0xc4>
     682:	mov	sl, r0
     684:	movs	r7, #0
     686:	ldr.w	fp, [pc, #192]	; 748 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
     68a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     68c:	ldr	r3, [pc, #164]	; (734 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
     68e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     692:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     694:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     696:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
     698:	ldr	r3, [pc, #156]	; (738 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     69a:	it	cs
     69c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
     69e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     6a0:	ldr	r3, [pc, #144]	; (734 <usb_serial_read+0xd4>)
     6a2:	ldrh.w	lr, [r3, r5, lsl #1]
     6a6:	ldr	r3, [pc, #148]	; (73c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6a8:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     6ac:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6b0:	ldr	r3, [pc, #140]	; (740 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     6b2:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6b6:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     6b8:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6ba:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
     6bc:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     6be:	bcs.n	6f4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
     6c0:	add.w	r1, lr, r5, lsl #9
     6c4:	mov	r2, r8
     6c6:	add	r1, r3
     6c8:	bl	1a1c <memcpy>
			rx_available -= len;
			rx_index[i] += len;
     6cc:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6ce:	ldr.w	r1, [fp]
     6d2:	mov	r0, r9
			rx_index[i] += len;
     6d4:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6d8:	rsb	r1, r8, r1
			rx_index[i] += len;
     6dc:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6de:	str.w	r1, [fp]
			rx_index[i] += len;
     6e2:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
     6e6:	ldr	r3, [pc, #92]	; (744 <usb_serial_read+0xe4>)
     6e8:	mov.w	r2, #131072	; 0x20000
     6ec:	str	r2, [r3, #0]
	return count;
}
     6ee:	add	sp, #12
     6f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6f4:	bl	1a1c <memcpy>
			p += avail;
			rx_available -= avail;
     6f8:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     6fc:	uxtb	r3, r4
			rx_queue_transfer(i);
     6fe:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
     700:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
     702:	add	sl, r6
			rx_available -= avail;
     704:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     708:	ldr	r2, [pc, #32]	; (72c <usb_serial_read+0xcc>)
     70a:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
     70c:	bl	220 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     710:	cmp	r9, r7
     712:	bls.n	71c <usb_serial_read+0xbc>
     714:	ldr	r3, [pc, #24]	; (730 <usb_serial_read+0xd0>)
     716:	ldrb	r3, [r3, #0]
     718:	cmp	r4, r3
     71a:	bne.n	68a <usb_serial_read+0x2a>
     71c:	mov	r0, r7
     71e:	b.n	6e6 <usb_serial_read+0x86>
     720:	mov	r0, r1
     722:	b.n	6e6 <usb_serial_read+0x86>
     724:	movs	r0, #0
     726:	b.n	6e6 <usb_serial_read+0x86>
     728:	.word	0xe000e18c
     72c:	.word	0x20001160
     730:	.word	0x20001184
     734:	.word	0x2000104c
     738:	.word	0x20001164
     73c:	.word	0x20001170
     740:	.word	0x20200000
     744:	.word	0xe000e10c
     748:	.word	0x20001180

0000074c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     74c:	ldr	r3, [pc, #44]	; (77c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
     74e:	ldr	r2, [pc, #48]	; (780 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     750:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
     752:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     754:	uxtb	r3, r3
	if (tail == rx_head) return -1;
     756:	cmp	r3, r2
     758:	beq.n	776 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
     75a:	adds	r3, #1
	uint32_t i = rx_list[tail];
     75c:	ldr	r0, [pc, #36]	; (784 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     75e:	ldr	r2, [pc, #40]	; (788 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     760:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     762:	ldr	r1, [pc, #40]	; (78c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     764:	it	cs
     766:	movcs	r3, #0
	uint32_t i = rx_list[tail];
     768:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     76a:	ldrh.w	r1, [r1, r3, lsl #1]
     76e:	add.w	r3, r2, r3, lsl #9
     772:	ldrb	r0, [r3, r1]
     774:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
     776:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
     77a:	bx	lr
     77c:	.word	0x20001160
     780:	.word	0x20001184
     784:	.word	0x20001164
     788:	.word	0x20200000
     78c:	.word	0x2000104c

00000790 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
     790:	ldr	r3, [pc, #4]	; (798 <usb_serial_available+0x8>)
     792:	ldr	r0, [r3, #0]
}
     794:	bx	lr
     796:	nop
     798:	.word	0x20001180

0000079c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
     79c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
     7a0:	ldr	r6, [pc, #84]	; (7f8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
     7a2:	ldr	r5, [pc, #88]	; (7fc <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     7a4:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
     7a6:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     7a8:	uxtb	r4, r4
	while (tail != rx_head) {
     7aa:	cmp	r4, r3
     7ac:	beq.n	7f2 <usb_serial_flush_input+0x56>
     7ae:	ldr.w	r9, [pc, #84]	; 804 <usb_serial_flush_input+0x68>
     7b2:	ldr.w	fp, [pc, #84]	; 808 <usb_serial_flush_input+0x6c>
     7b6:	ldr.w	r8, [pc, #84]	; 80c <usb_serial_flush_input+0x70>
     7ba:	ldr	r7, [pc, #68]	; (800 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
     7bc:	adds	r4, #1
     7be:	cmp	r4, #8
     7c0:	uxtb.w	sl, r4
     7c4:	bls.n	7ca <usb_serial_flush_input+0x2e>
     7c6:	movs	r4, #0
     7c8:	mov	sl, r4
		uint32_t i = rx_list[tail];
     7ca:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
     7ce:	ldr.w	r2, [fp]
     7d2:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
     7d6:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
     7d8:	ldrh.w	r1, [r7, r1, lsl #1]
     7dc:	subs	r3, r3, r1
     7de:	subs	r3, r2, r3
     7e0:	str.w	r3, [fp]
		rx_queue_transfer(i);
     7e4:	bl	220 <rx_queue_transfer>
		rx_tail = tail;
     7e8:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
     7ec:	ldrb	r3, [r5, #0]
     7ee:	cmp	r4, r3
     7f0:	bne.n	7bc <usb_serial_flush_input+0x20>
     7f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7f6:	nop
     7f8:	.word	0x20001160
     7fc:	.word	0x20001184
     800:	.word	0x2000104c
     804:	.word	0x20001164
     808:	.word	0x20001180
     80c:	.word	0x20001170

00000810 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     810:	push	{lr}
     812:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
     814:	movs	r1, #1
     816:	add.w	r0, sp, #7
     81a:	bl	660 <usb_serial_read>
     81e:	cbz	r0, 82a <usb_serial_getchar+0x1a>
     820:	ldrb.w	r0, [sp, #7]
	return -1;
}
     824:	add	sp, #12
     826:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
     82a:	mov.w	r0, #4294967295
     82e:	b.n	824 <usb_serial_getchar+0x14>

00000830 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     830:	ldr	r3, [pc, #36]	; (858 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     832:	push	{lr}
     834:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     836:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     838:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     83c:	cbnz	r3, 848 <usb_serial_putchar+0x18>
     83e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     842:	add	sp, #12
     844:	ldr.w	pc, [sp], #4
     848:	movs	r1, #1
     84a:	add.w	r0, sp, #7
     84e:	bl	3d8 <usb_serial_write.part.1>
     852:	add	sp, #12
     854:	ldr.w	pc, [sp], #4
     858:	.word	0x20001258

0000085c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     85c:	ldr	r3, [pc, #16]	; (870 <usb_serial_write+0x14>)
     85e:	ldrb	r3, [r3, #0]
     860:	and.w	r2, r3, #255	; 0xff
     864:	cbz	r3, 86a <usb_serial_write+0xe>
     866:	b.w	3d8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     86a:	mov	r0, r2
     86c:	bx	lr
     86e:	nop
     870:	.word	0x20001258

00000874 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     874:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     878:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     87a:	ldr.w	r8, [pc, #64]	; 8bc <usb_serial_write_buffer_free+0x48>
     87e:	movs	r3, #1
     880:	ldr	r5, [pc, #48]	; (8b4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     882:	mov	r7, r4
     884:	ldr	r6, [pc, #48]	; (8b8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     886:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     88a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     88c:	mov	r0, r5
     88e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     890:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     892:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     896:	beq.n	8a4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     898:	bl	153c <usb_transfer_status>
     89c:	lsls	r3, r0, #24
     89e:	it	pl
     8a0:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     8a4:	cmp	r4, #4
     8a6:	bne.n	88a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     8a8:	movs	r3, #0
	return sum;
}
     8aa:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     8ac:	strb.w	r3, [r8]
	return sum;
}
     8b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8b4:	.word	0x200011a0
     8b8:	.word	0x2000105f
     8bc:	.word	0x2000105e

000008c0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     8c0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
     8c4:	ldr	r3, [pc, #124]	; (944 <usb_serial_flush_output+0x84>)
     8c6:	ldrb	r3, [r3, #0]
     8c8:	cbz	r3, 8d0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
     8ca:	ldr	r5, [pc, #124]	; (948 <usb_serial_flush_output+0x88>)
     8cc:	ldrh	r2, [r5, #0]
     8ce:	cbnz	r2, 8d4 <usb_serial_flush_output+0x14>
     8d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8d4:	ldr.w	r8, [pc, #132]	; 95c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     8d8:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8dc:	ldr	r6, [pc, #108]	; (94c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8de:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     8e2:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8e6:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     8e8:	ldr	r4, [pc, #100]	; (950 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8ea:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8ec:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8f0:	ldr	r7, [pc, #96]	; (954 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     8f2:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8f6:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8f8:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8fc:	mov	r1, r4
     8fe:	bl	14c0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     902:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     906:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     90a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     90e:	ldr	r3, [pc, #72]	; (958 <usb_serial_flush_output+0x98>)
     910:	str	r1, [r3, #0]
		location += 32;
     912:	adds	r1, #32
	} while (location < end_addr);
     914:	cmp	r2, r1
     916:	bhi.n	910 <usb_serial_flush_output+0x50>
	asm("dsb");
     918:	dsb	sy
	asm("isb");
     91c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     920:	movs	r0, #4
     922:	mov	r1, r6
     924:	bl	14f0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     928:	ldrb.w	r3, [r8]
     92c:	ldr	r2, [pc, #44]	; (95c <usb_serial_flush_output+0x9c>)
     92e:	adds	r3, #1
     930:	uxtb	r3, r3
     932:	cmp	r3, #3
     934:	it	hi
     936:	movhi	r3, #0
     938:	strb	r3, [r2, #0]
	tx_available = 0;
     93a:	movs	r3, #0
     93c:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
     93e:	strb	r3, [r7, #0]
     940:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     944:	.word	0x20001258
     948:	.word	0x20001186
     94c:	.word	0x200011a0
     950:	.word	0x20201000
     954:	.word	0x2000105e
     958:	.word	0xe000ef70
     95c:	.word	0x2000105f

00000960 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     960:	ldr	r2, [pc, #600]	; (bbc <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     962:	ldr	r3, [pc, #604]	; (bc0 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     964:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     966:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     96a:	ldr	r4, [pc, #600]	; (bc4 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     96c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     970:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     972:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     974:	bls.n	9b0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     976:	ldr	r3, [pc, #592]	; (bc8 <set_arm_clock+0x268>)
     978:	cmp	r0, r3
     97a:	bls.w	ba8 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     97e:	ldr	r3, [pc, #588]	; (bcc <set_arm_clock+0x26c>)
     980:	movw	r5, #1575	; 0x627
     984:	ldr	r7, [pc, #584]	; (bd0 <set_arm_clock+0x270>)
     986:	add	r3, r0
     988:	ldr	r4, [pc, #584]	; (bd4 <set_arm_clock+0x274>)
     98a:	lsrs	r2, r3, #8
     98c:	umull	r3, r2, r7, r2
     990:	lsrs	r3, r2, #7
     992:	add.w	r3, r3, r3, lsl #2
     996:	add.w	r2, r3, r3, lsl #2
     99a:	addw	r3, r2, #1250	; 0x4e2
     99e:	cmp	r3, r5
     9a0:	it	cs
     9a2:	movcs	r3, r5
     9a4:	sub.w	r3, r3, #800	; 0x320
     9a8:	umull	r3, r5, r4, r3
     9ac:	lsrs	r5, r5, #3
     9ae:	b.n	9ba <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     9b0:	ldr	r5, [pc, #548]	; (bd8 <set_arm_clock+0x278>)
     9b2:	cmp	r0, r5
     9b4:	ite	ls
     9b6:	movls	r5, #6
     9b8:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     9ba:	ldr	r2, [pc, #516]	; (bc0 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     9bc:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     9c0:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     9c4:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     9c6:	orr.w	r3, r3, #192	; 0xc0
     9ca:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     9ce:	bcs.n	9e6 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     9d0:	ldr	r3, [pc, #496]	; (bc4 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     9d2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     9d6:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     9d8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     9da:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     9dc:	ldr	r3, [r2, #0]
     9de:	cmp	r3, #0
     9e0:	bge.n	9dc <set_arm_clock+0x7c>
     9e2:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     9e6:	ands.w	r3, lr, #33554432	; 0x2000000
     9ea:	bne.n	a50 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     9ec:	ldr	r4, [pc, #492]	; (bdc <set_arm_clock+0x27c>)
     9ee:	ldr	r2, [pc, #496]	; (be0 <set_arm_clock+0x280>)
     9f0:	ldr.w	ip, [r4, #16]
     9f4:	mov	r4, r2
     9f6:	and.w	r2, ip, r2
     9fa:	cmp	r2, r4
     9fc:	itet	eq
     9fe:	moveq.w	r3, #402653184	; 0x18000000
     a02:	movne.w	r2, #4096	; 0x1000
     a06:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     a08:	eor.w	r4, lr, r3
     a0c:	tst.w	r4, #939524096	; 0x38000000
     a10:	beq.n	a24 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     a12:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     a16:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     a1a:	ldr	r4, [pc, #420]	; (bc0 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     a1c:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     a20:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     a24:	eor.w	r3, r1, r2
     a28:	tst.w	r3, #12288	; 0x3000
     a2c:	beq.n	a40 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     a2e:	ldr	r3, [pc, #400]	; (bc0 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     a30:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     a34:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     a36:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     a38:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     a3a:	ldr	r3, [r2, #72]	; 0x48
     a3c:	lsls	r4, r3, #28
     a3e:	bmi.n	a3a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     a40:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     a44:	ldr	r2, [pc, #376]	; (bc0 <set_arm_clock+0x260>)
     a46:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     a4a:	ldr	r3, [r2, #72]	; 0x48
     a4c:	lsls	r1, r3, #26
     a4e:	bmi.n	a4a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     a50:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     a52:	ldr	r4, [pc, #400]	; (be4 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     a54:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     a56:	mul.w	r3, r1, r2
     a5a:	mul.w	r3, r0, r3
     a5e:	cmp	r3, r4
     a60:	bhi.n	a76 <set_arm_clock+0x116>
		if (div_arm < 8) {
     a62:	cmp	r2, #7
     a64:	bhi.w	b92 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     a68:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     a6a:	mul.w	r3, r1, r2
     a6e:	mul.w	r3, r0, r3
     a72:	cmp	r3, r4
     a74:	bls.n	a62 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     a76:	ldr	r0, [pc, #368]	; (be8 <set_arm_clock+0x288>)
     a78:	ldr	r4, [pc, #368]	; (bec <set_arm_clock+0x28c>)
     a7a:	add	r0, r3
     a7c:	umull	r0, r3, r4, r0
     a80:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     a82:	cmp	r3, #108	; 0x6c
     a84:	bhi.w	b9e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     a88:	cmp	r3, #53	; 0x35
     a8a:	bhi.w	bac <set_arm_clock+0x24c>
     a8e:	ldr.w	r8, [pc, #392]	; c18 <set_arm_clock+0x2b8>
     a92:	movs	r3, #54	; 0x36
     a94:	ldr	r0, [pc, #344]	; (bf0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     a96:	ldr.w	ip, [pc, #324]	; bdc <set_arm_clock+0x27c>
     a9a:	ldr	r4, [pc, #344]	; (bf4 <set_arm_clock+0x294>)
     a9c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     aa0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     aa4:	and.w	r4, r9, r4
     aa8:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     aaa:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     aae:	beq.n	ac8 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     ab0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     ab4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     ab8:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     aba:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     abe:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     ac2:	ldr	r3, [r4, #0]
     ac4:	cmp	r3, #0
     ac6:	bge.n	ac2 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     ac8:	ldr.w	ip, [pc, #244]	; bc0 <set_arm_clock+0x260>
     acc:	subs	r2, #1
     ace:	ldr.w	r3, [ip, #16]
     ad2:	and.w	r3, r3, #7
     ad6:	cmp	r3, r2
     ad8:	beq.n	aea <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     ada:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     ade:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     ae0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     ae4:	ldr	r3, [r4, #72]	; 0x48
     ae6:	lsls	r3, r3, #15
     ae8:	bmi.n	ae4 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     aea:	subs	r1, #1
     aec:	lsls	r1, r1, #10
     aee:	eor.w	r3, lr, r1
     af2:	tst.w	r3, #7168	; 0x1c00
     af6:	beq.n	b12 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     af8:	ldr	r3, [pc, #196]	; (bc0 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     afa:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     afe:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     b02:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     b04:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     b08:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     b0c:	ldr	r3, [r2, #72]	; 0x48
     b0e:	lsls	r1, r3, #30
     b10:	bmi.n	b0c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     b12:	ldr	r3, [pc, #228]	; (bf8 <set_arm_clock+0x298>)
     b14:	ldr	r1, [pc, #228]	; (bfc <set_arm_clock+0x29c>)
     b16:	add	r3, r0
     b18:	lsrs	r3, r3, #7
     b1a:	umull	r3, r1, r1, r3
     b1e:	lsrs	r1, r1, #12
     b20:	cmp	r1, #4
     b22:	it	cs
     b24:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     b26:	subs	r3, r1, #1
     b28:	lsls	r3, r3, #8
     b2a:	eor.w	r2, lr, r3
     b2e:	tst.w	r2, #768	; 0x300
     b32:	beq.n	b44 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     b34:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     b38:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     b3c:	ldr	r2, [pc, #128]	; (bc0 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     b3e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     b42:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     b44:	ldr	r3, [pc, #120]	; (bc0 <set_arm_clock+0x260>)
     b46:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     b48:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     b4a:	bic.w	r4, r4, #33554432	; 0x2000000
     b4e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     b50:	ldr	r3, [r2, #72]	; 0x48
     b52:	lsls	r3, r3, #26
     b54:	bmi.n	b50 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b56:	ldr	r3, [pc, #168]	; (c00 <set_arm_clock+0x2a0>)
     b58:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     b5c:	ldr	r4, [pc, #164]	; (c04 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     b5e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b60:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     b64:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b66:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b6a:	ldr	r4, [pc, #156]	; (c08 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b6c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b70:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b74:	ldr	r2, [pc, #148]	; (c0c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     b76:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     b78:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     b7a:	bcs.n	b8e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     b7c:	ldr	r3, [pc, #68]	; (bc4 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     b7e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     b82:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     b84:	orrs	r6, r5
		DCDC_REG3 = dcdc;
     b86:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     b88:	ldr	r3, [r2, #0]
     b8a:	cmp	r3, #0
     b8c:	bge.n	b88 <set_arm_clock+0x228>
	}

	return frequency;
}
     b8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     b92:	cmp	r1, #4
     b94:	bhi.w	a76 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     b98:	adds	r1, #1
				div_arm = 1;
     b9a:	movs	r2, #1
     b9c:	b.n	a56 <set_arm_clock+0xf6>
     b9e:	ldr.w	r8, [pc, #124]	; c1c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     ba2:	movs	r3, #108	; 0x6c
     ba4:	ldr	r0, [pc, #104]	; (c10 <set_arm_clock+0x2b0>)
     ba6:	b.n	a96 <set_arm_clock+0x136>
     ba8:	movs	r5, #18
     baa:	b.n	9ba <set_arm_clock+0x5a>
     bac:	ldr	r0, [pc, #100]	; (c14 <set_arm_clock+0x2b4>)
     bae:	ldr.w	r8, [pc, #112]	; c20 <set_arm_clock+0x2c0>
     bb2:	mul.w	r0, r0, r3
     bb6:	orr.w	r8, r3, r8
     bba:	b.n	a96 <set_arm_clock+0x136>
     bbc:	.word	0x1f78a400
     bc0:	.word	0x400fc000
     bc4:	.word	0x40080000
     bc8:	.word	0x23c34600
     bcc:	.word	0xdc3cba00
     bd0:	.word	0x004cb223
     bd4:	.word	0x51eb851f
     bd8:	.word	0x016e3600
     bdc:	.word	0x400d8000
     be0:	.word	0x80003040
     be4:	.word	0x269fb1ff
     be8:	.word	0x005b8d80
     bec:	.word	0x165e9f81
     bf0:	.word	0x269fb200
     bf4:	.word	0x8001307f
     bf8:	.word	0x08f0d17f
     bfc:	.word	0x00e5109f
     c00:	.word	0x431bde83
     c04:	.word	0x200005c4
     c08:	.word	0x200005c0
     c0c:	.word	0x20001260
     c10:	.word	0x4d3f6400
     c14:	.word	0x00b71b00
     c18:	.word	0x80002036
     c1c:	.word	0x8000206c
     c20:	.word	0x80002000

00000c24 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     c24:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     c26:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     c28:	cbz	r3, c32 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     c2a:	ldr	r3, [r2, #4]
     c2c:	orr.w	r3, r3, #32768	; 0x8000
     c30:	str	r3, [r2, #4]
	}
	__disable_irq();
     c32:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     c34:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     c36:	cbz	r4, c60 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     c38:	ldr	r3, [pc, #64]	; (c7c <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     c3a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     c3c:	ldr.w	r4, [r3, #432]	; 0x1b0
     c40:	tst	r4, r1
     c42:	bne.n	c74 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     c44:	ldr.w	r4, [r3, #320]	; 0x140
     c48:	orr.w	r4, r4, #16384	; 0x4000
     c4c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     c50:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
     c54:	ldr.w	r4, [r3, #320]	; 0x140
     c58:	lsls	r4, r4, #17
     c5a:	bpl.n	c44 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     c5c:	tst	r1, r5
     c5e:	bne.n	c74 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     c60:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     c62:	ldr	r4, [pc, #24]	; (c7c <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     c64:	str	r2, [r0, #8]
	endpoint->status = 0;
     c66:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     c68:	ldr.w	r3, [r4, #432]	; 0x1b0
     c6c:	orrs	r1, r3
     c6e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     c72:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     c74:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     c76:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     c78:	pop	{r4, r5}
     c7a:	bx	lr
     c7c:	.word	0x402e0000

00000c80 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     c80:	push	{r4, r5, r6, lr}
     c82:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     c84:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
     c86:	cbz	r0, cae <run_callbacks+0x2e>
     c88:	mov	r2, r0
     c8a:	movs	r4, #0
     c8c:	b.n	c96 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     c8e:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     c90:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     c92:	cmp	r2, #1
     c94:	beq.n	cb0 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     c96:	ldr	r3, [r2, #4]
     c98:	ands.w	r3, r3, #128	; 0x80
     c9c:	beq.n	c8e <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     c9e:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     ca0:	cbz	r4, cae <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     ca2:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     ca4:	ldr	r5, [r0, #0]
		ep->callback_function(first);
     ca6:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     ca8:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     caa:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     cac:	bne.n	ca2 <run_callbacks+0x22>
     cae:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
     cb0:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
     cb2:	str	r3, [r6, #52]	; 0x34
			break;
     cb4:	b.n	ca0 <run_callbacks+0x20>
     cb6:	nop

00000cb8 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     cb8:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     cba:	cbnz	r1, cfa <endpoint0_transmit.constprop.1+0x42>
     cbc:	ldr	r4, [pc, #136]	; (d48 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cbe:	ldr	r1, [pc, #140]	; (d4c <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     cc0:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     cc2:	ldr	r3, [pc, #140]	; (d50 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cc4:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cc6:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     cc8:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cca:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     ccc:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cce:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     cd0:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     cd2:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     cd6:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     cd8:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     cdc:	ldr	r5, [pc, #116]	; (d54 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     cde:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     ce2:	ldr.w	r1, [r3, #432]	; 0x1b0
     ce6:	orr.w	r1, r1, #1
     cea:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     cee:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
     cf0:	ldr.w	r3, [r2, #432]	; 0x1b0
     cf4:	cmp	r3, #0
     cf6:	bne.n	cf0 <endpoint0_transmit.constprop.1+0x38>
}
     cf8:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     cfa:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     cfc:	ldr	r3, [pc, #88]	; (d58 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     cfe:	ldr	r5, [pc, #80]	; (d50 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     d00:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     d02:	ldr	r4, [pc, #68]	; (d48 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     d04:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     d08:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     d0a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     d0c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     d0e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     d12:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     d14:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     d18:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     d1a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     d1e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     d22:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     d26:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     d28:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     d2a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     d2e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     d32:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     d36:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     d38:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     d3a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     d3e:	ldr.w	r3, [r2, #432]	; 0x1b0
     d42:	cmp	r3, #0
     d44:	bne.n	d3e <endpoint0_transmit.constprop.1+0x86>
     d46:	b.n	cbe <endpoint0_transmit.constprop.1+0x6>
     d48:	.word	0x20003000
     d4c:	.word	0x20002020
     d50:	.word	0x402e0000
     d54:	.word	0x20001234
     d58:	.word	0x20002000

00000d5c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
     d5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     d60:	ldr	r4, [pc, #752]	; (1054 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
     d62:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     d64:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     d68:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
     d6c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     d70:	beq.n	e30 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     d72:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     d76:	cmp	r3, #0
     d78:	beq.n	e26 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     d7a:	mov.w	fp, #65537	; 0x10001
     d7e:	ldr.w	r9, [pc, #764]	; 107c <isr+0x320>
     d82:	ldr	r6, [pc, #724]	; (1058 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     d84:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     d86:	mov	sl, fp
     d88:	ldr	r0, [r6, #40]	; 0x28
     d8a:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     d8c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     d90:	ldr.w	r3, [r4, #320]	; 0x140
     d94:	orr.w	r3, r3, #8192	; 0x2000
     d98:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     d9c:	ldr.w	r3, [r4, #320]	; 0x140
     da0:	lsls	r7, r3, #18
     da2:	bpl.n	d90 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     da4:	ldr.w	r3, [r5, #320]	; 0x140
     da8:	bic.w	r3, r3, #8192	; 0x2000
     dac:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     db0:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     db4:	ldr.w	r3, [r4, #436]	; 0x1b4
     db8:	ands.w	r3, r3, #65537	; 0x10001
     dbc:	bne.n	db4 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     dbe:	uxth	r1, r0
     dc0:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
     dc4:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     dc8:	cmp	r1, r7
     dca:	bhi.w	f18 <isr+0x1bc>
     dce:	cmp.w	r1, #1664	; 0x680
     dd2:	bcs.w	11ac <isr+0x450>
     dd6:	cmp.w	r1, #258	; 0x102
     dda:	beq.w	10b2 <isr+0x356>
     dde:	bhi.w	faa <isr+0x24e>
     de2:	cmp	r1, #128	; 0x80
     de4:	beq.w	1098 <isr+0x33c>
     de8:	cmp	r1, #130	; 0x82
     dea:	bne.w	f9a <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
     dee:	uxth	r2, r2
     df0:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
     df4:	cmp	r1, #7
     df6:	bhi.w	f9a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     dfa:	lsls	r1, r1, #2
     dfc:	ldr	r0, [pc, #604]	; (105c <isr+0x300>)
		reply_buffer[0] = 0;
     dfe:	ldr	r7, [pc, #608]	; (1060 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     e00:	add	r0, r1
     e02:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     e04:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
     e06:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
     e08:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     e0a:	bpl.w	122a <isr+0x4ce>
     e0e:	lsls	r2, r1, #15
     e10:	bpl.n	e16 <isr+0xba>
			reply_buffer[0] = 1;
     e12:	movs	r3, #1
     e14:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
     e16:	movs	r1, #2
     e18:	ldr	r0, [pc, #580]	; (1060 <isr+0x304>)
     e1a:	bl	cb8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e1e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e22:	cmp	r3, #0
     e24:	bne.n	d88 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     e26:	ldr	r2, [pc, #556]	; (1054 <isr+0x2f8>)
     e28:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     e2c:	cmp	r3, #0
     e2e:	bne.n	ed2 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
     e30:	tst.w	r8, #64	; 0x40
     e34:	beq.n	e68 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     e36:	ldr	r3, [pc, #540]	; (1054 <isr+0x2f8>)
     e38:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     e3c:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     e3e:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     e42:	ldr.w	r1, [r3, #444]	; 0x1bc
     e46:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     e4a:	ldr.w	r4, [r2, #432]	; 0x1b0
     e4e:	ldr	r3, [pc, #516]	; (1054 <isr+0x2f8>)
     e50:	cmp	r4, #0
     e52:	bne.n	e4a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     e54:	mov.w	r2, #4294967295
     e58:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     e5c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
     e60:	bl	554 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
     e64:	ldr	r3, [pc, #508]	; (1064 <isr+0x308>)
     e66:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
     e68:	tst.w	r8, #16777216	; 0x1000000
     e6c:	beq.n	e76 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     e6e:	ldr	r3, [pc, #504]	; (1068 <isr+0x30c>)
     e70:	ldr	r3, [r3, #0]
     e72:	cbz	r3, e76 <isr+0x11a>
     e74:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
     e76:	tst.w	r8, #33554432	; 0x2000000
     e7a:	beq.n	e84 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     e7c:	ldr	r3, [pc, #492]	; (106c <isr+0x310>)
     e7e:	ldr	r3, [r3, #0]
     e80:	cbz	r3, e84 <isr+0x128>
     e82:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
     e84:	tst.w	r8, #4
     e88:	beq.n	e9c <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     e8a:	ldr	r3, [pc, #456]	; (1054 <isr+0x2f8>)
     e8c:	ldr.w	r3, [r3, #388]	; 0x184
     e90:	ands.w	r3, r3, #512	; 0x200
     e94:	beq.n	f12 <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
     e96:	ldr	r3, [pc, #472]	; (1070 <isr+0x314>)
     e98:	movs	r2, #1
     e9a:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     e9c:	ldr	r3, [pc, #436]	; (1054 <isr+0x2f8>)
     e9e:	ldr.w	r2, [r3, #328]	; 0x148
     ea2:	lsls	r2, r2, #24
     ea4:	bpl.n	ecc <isr+0x170>
     ea6:	tst.w	r8, #128	; 0x80
     eaa:	beq.n	ecc <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
     eac:	ldr	r1, [pc, #452]	; (1074 <isr+0x318>)
     eae:	ldrb	r2, [r1, #0]
     eb0:	cbz	r2, ecc <isr+0x170>
			if (--usb_reboot_timer == 0) {
     eb2:	subs	r2, #1
     eb4:	uxtb	r2, r2
     eb6:	strb	r2, [r1, #0]
     eb8:	cbnz	r2, ecc <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
     eba:	ldr	r1, [pc, #444]	; (1078 <isr+0x31c>)
     ebc:	ldrb	r2, [r1, #0]
     ebe:	and.w	r2, r2, #251	; 0xfb
     ec2:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
     ec4:	cmp	r2, #0
     ec6:	beq.w	132e <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
     eca:	bkpt	0x00fb
		#endif
		#ifdef MULTITOUCH_INTERFACE
		usb_touchscreen_update_callback();
		#endif
	}
}
     ecc:	add	sp, #12
     ece:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     ed2:	ldr	r1, [pc, #424]	; (107c <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     ed4:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     ed8:	ldr	r0, [r1, #0]
     eda:	tst	r3, r0
     edc:	bne.w	12b6 <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
     ee0:	ldr	r2, [pc, #384]	; (1064 <isr+0x308>)
     ee2:	ldr	r4, [r2, #0]
			if (completestatus) {
     ee4:	ands	r4, r3
     ee6:	beq.n	e30 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     ee8:	lsls	r3, r4, #29
     eea:	bmi.w	134c <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     eee:	lsls	r7, r4, #13
     ef0:	bmi.w	1344 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     ef4:	lsls	r6, r4, #28
     ef6:	bmi.w	135c <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     efa:	lsls	r5, r4, #12
     efc:	bmi.w	1354 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     f00:	lsls	r0, r4, #27
     f02:	bmi.w	133c <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     f06:	lsls	r1, r4, #11
     f08:	bpl.n	e30 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
     f0a:	ldr	r0, [pc, #372]	; (1080 <isr+0x324>)
     f0c:	bl	c80 <run_callbacks>
     f10:	b.n	e30 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
     f12:	ldr	r2, [pc, #348]	; (1070 <isr+0x314>)
     f14:	strb	r3, [r2, #0]
     f16:	b.n	e9c <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     f18:	movw	r7, #8225	; 0x2021
     f1c:	cmp	r1, r7
     f1e:	beq.n	f92 <isr+0x236>
     f20:	bhi.n	1002 <isr+0x2a6>
     f22:	cmp.w	r1, #2176	; 0x880
     f26:	beq.w	1190 <isr+0x434>
     f2a:	cmp.w	r1, #2304	; 0x900
     f2e:	bne.n	f9a <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     f30:	ubfx	r0, r0, #16, #8
     f34:	ldr	r2, [pc, #332]	; (1084 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     f36:	ldr	r1, [pc, #336]	; (1088 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     f38:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     f3a:	ldr	r7, [pc, #336]	; (108c <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     f3c:	ldr	r2, [pc, #336]	; (1090 <isr+0x334>)
     f3e:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     f40:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     f44:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     f48:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
     f4c:	bl	558 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f50:	ldr	r2, [pc, #320]	; (1094 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     f52:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f54:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f56:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     f58:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f5a:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f5c:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f5e:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     f62:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f64:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     f68:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f6a:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     f6e:	ldr.w	r2, [r5, #432]	; 0x1b0
     f72:	orr.w	r2, r2, #65536	; 0x10000
     f76:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     f7a:	ldr	r2, [pc, #256]	; (107c <isr+0x320>)
     f7c:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
     f7e:	ldr.w	r3, [r4, #432]	; 0x1b0
     f82:	cmp	r3, #0
     f84:	bne.n	f7e <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     f86:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     f8a:	cmp	r3, #0
     f8c:	bne.w	d88 <isr+0x2c>
     f90:	b.n	e26 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
     f92:	lsrs	r1, r2, #16
     f94:	cmp	r1, #7
     f96:	beq.w	1232 <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     f9a:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     f9e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     fa2:	cmp	r3, #0
     fa4:	bne.w	d88 <isr+0x2c>
     fa8:	b.n	e26 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     faa:	movw	r7, #770	; 0x302
     fae:	cmp	r1, r7
     fb0:	beq.w	112a <isr+0x3ce>
     fb4:	cmp.w	r1, #1280	; 0x500
     fb8:	bne.n	f9a <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fba:	ldr	r2, [pc, #216]	; (1094 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     fbc:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fbe:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     fc0:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     fc2:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fc4:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fc6:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     fca:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fcc:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     fd0:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fd2:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     fd6:	ldr.w	r3, [r5, #432]	; 0x1b0
     fda:	orr.w	r3, r3, #65536	; 0x10000
     fde:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     fe2:	ldr.w	r3, [r4, #432]	; 0x1b0
     fe6:	cmp	r3, #0
     fe8:	bne.n	fe2 <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     fea:	lsrs	r3, r0, #16
     fec:	lsls	r3, r3, #25
     fee:	orr.w	r3, r3, #16777216	; 0x1000000
     ff2:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     ff6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     ffa:	cmp	r3, #0
     ffc:	bne.w	d88 <isr+0x2c>
    1000:	b.n	e26 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1002:	movw	r3, #8737	; 0x2221
    1006:	cmp	r1, r3
    1008:	beq.w	1118 <isr+0x3bc>
    100c:	movw	r3, #8993	; 0x2321
    1010:	cmp	r1, r3
    1012:	bne.n	f9a <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1014:	ldr	r3, [pc, #124]	; (1094 <isr+0x338>)
    1016:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1018:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    101a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    101c:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    101e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1020:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1024:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1026:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    102a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    102c:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    102e:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1032:	ldr.w	r3, [r4, #432]	; 0x1b0
    1036:	orr.w	r3, r3, #65536	; 0x10000
    103a:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    103e:	ldr.w	r3, [r4, #432]	; 0x1b0
    1042:	cmp	r3, #0
    1044:	bne.n	103e <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1046:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    104a:	cmp	r3, #0
    104c:	bne.w	d88 <isr+0x2c>
    1050:	b.n	e26 <isr+0xca>
    1052:	nop
    1054:	.word	0x402e0000
    1058:	.word	0x20003000
    105c:	.word	0x402e01c0
    1060:	.word	0x20001248
    1064:	.word	0x20001224
    1068:	.word	0x20001220
    106c:	.word	0x2000122c
    1070:	.word	0x20001230
    1074:	.word	0x20001238
    1078:	.word	0x20001228
    107c:	.word	0x20001234
    1080:	.word	0x20003240
    1084:	.word	0x20001258
    1088:	.word	0x000200c8
    108c:	.word	0x00cc0002
    1090:	.word	0x00c80002
    1094:	.word	0x20002020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1098:	ldr	r2, [pc, #744]	; (1384 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    109a:	movs	r1, #2
    109c:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    109e:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    10a0:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    10a2:	bl	cb8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    10a6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    10aa:	cmp	r3, #0
    10ac:	bne.w	d88 <isr+0x2c>
    10b0:	b.n	e26 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    10b2:	uxth	r2, r2
    10b4:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    10b8:	cmp	r3, #7
    10ba:	bhi.w	f9a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    10be:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    10c2:	mov.w	r3, r3, lsl #2
    10c6:	ldr	r2, [pc, #704]	; (1388 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    10c8:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    10cc:	add	r2, r3
    10ce:	ldr	r3, [r2, #0]
    10d0:	ite	ne
    10d2:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    10d6:	biceq.w	r3, r3, #1
    10da:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    10dc:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    10de:	ldr	r3, [pc, #684]	; (138c <isr+0x630>)
    10e0:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    10e2:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    10e4:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    10e6:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    10ea:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    10ec:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    10f0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    10f2:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    10f4:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    10f8:	ldr.w	r3, [r4, #432]	; 0x1b0
    10fc:	orr.w	r3, r3, #65536	; 0x10000
    1100:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1104:	ldr.w	r3, [r4, #432]	; 0x1b0
    1108:	cmp	r3, #0
    110a:	bne.n	1104 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    110c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1110:	cmp	r3, #0
    1112:	bne.w	d88 <isr+0x2c>
    1116:	b.n	e26 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1118:	ldr	r3, [pc, #628]	; (1390 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    111a:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    111e:	ldr	r2, [pc, #628]	; (1394 <isr+0x638>)
    1120:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    1122:	ldr	r3, [pc, #628]	; (1398 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1124:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    1126:	strb	r0, [r3, #0]
    1128:	b.n	1014 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    112a:	uxth	r2, r2
    112c:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1130:	cmp	r3, #7
    1132:	bhi.w	f9a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1136:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    113a:	mov.w	r3, r3, lsl #2
    113e:	ldr	r2, [pc, #584]	; (1388 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1140:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1144:	add	r2, r3
    1146:	ldr	r3, [r2, #0]
    1148:	ite	ne
    114a:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    114e:	orreq.w	r3, r3, #1
    1152:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1154:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1156:	ldr	r3, [pc, #564]	; (138c <isr+0x630>)
    1158:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    115a:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    115c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    115e:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1162:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1164:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1168:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    116a:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    116c:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1170:	ldr.w	r3, [r4, #432]	; 0x1b0
    1174:	orr.w	r3, r3, #65536	; 0x10000
    1178:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    117c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1180:	cmp	r3, #0
    1182:	bne.n	117c <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1184:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1188:	cmp	r3, #0
    118a:	bne.w	d88 <isr+0x2c>
    118e:	b.n	e26 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1190:	ldr	r2, [pc, #520]	; (139c <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1192:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1194:	ldr	r3, [pc, #492]	; (1384 <isr+0x628>)
    1196:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1198:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    119a:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    119c:	bl	cb8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    11a0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    11a4:	cmp	r3, #0
    11a6:	bne.w	d88 <isr+0x2c>
    11aa:	b.n	e26 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    11ac:	ldr	r3, [pc, #496]	; (13a0 <isr+0x644>)
    11ae:	ldr	r1, [r3, #4]
    11b0:	cmp	r1, #0
    11b2:	beq.w	f9a <isr+0x23e>
    11b6:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    11b8:	uxth.w	lr, r2
    11bc:	b.n	11c8 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    11be:	adds	r3, #12
    11c0:	ldr	r1, [r3, #4]
    11c2:	cmp	r1, #0
    11c4:	beq.w	f9a <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    11c8:	ldrh	r7, [r3, #0]
    11ca:	cmp	r7, r0
    11cc:	bne.n	11be <isr+0x462>
    11ce:	ldrh	r7, [r3, #2]
    11d0:	cmp	r7, lr
    11d2:	bne.n	11be <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    11d4:	lsrs	r7, r0, #8
    11d6:	cmp	r7, #3
    11d8:	beq.w	13e8 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    11dc:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    11de:	lsrs	r2, r2, #16
    11e0:	cmp	r3, r2
    11e2:	it	cs
    11e4:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    11e6:	cmp.w	r0, #512	; 0x200
    11ea:	beq.w	1364 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    11ee:	cmp.w	r0, #1792	; 0x700
    11f2:	beq.w	1308 <isr+0x5ac>
    11f6:	ldr	r7, [pc, #428]	; (13a4 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    11f8:	mov	r2, r3
    11fa:	str	r3, [sp, #4]
    11fc:	mov	r0, r7
    11fe:	bl	1a1c <memcpy>
    1202:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1204:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1208:	add	r7, r3
	asm("dsb");
    120a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    120e:	ldr	r1, [pc, #408]	; (13a8 <isr+0x64c>)
    1210:	str	r2, [r1, #0]
		location += 32;
    1212:	adds	r2, #32
	} while (location < end_addr);
    1214:	cmp	r7, r2
    1216:	bhi.n	120e <isr+0x4b2>
	asm("dsb");
    1218:	dsb	sy
	asm("isb");
    121c:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1220:	ldr	r0, [pc, #384]	; (13a4 <isr+0x648>)
    1222:	mov	r1, r3
    1224:	bl	cb8 <endpoint0_transmit.constprop.1>
    1228:	b.n	e1e <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    122a:	lsls	r3, r1, #31
    122c:	bpl.w	e16 <isr+0xba>
    1230:	b.n	e12 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1232:	ldr	r7, [pc, #376]	; (13ac <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1234:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1238:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    123a:	ldr	r1, [pc, #372]	; (13b0 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    123c:	ldr	r3, [pc, #372]	; (13b4 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    123e:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1240:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1244:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1246:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    124a:	ldr	r1, [pc, #364]	; (13b8 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    124c:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    124e:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1252:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1256:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    125a:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    125c:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1260:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1264:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1268:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    126a:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    126c:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1270:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1272:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1274:	ldr.w	r3, [r4, #432]	; 0x1b0
    1278:	cmp	r3, #0
    127a:	bne.n	1274 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    127c:	ldr	r2, [pc, #268]	; (138c <isr+0x630>)
    127e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1280:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1284:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1286:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1288:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    128c:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    128e:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1292:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1294:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1298:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    129a:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    129e:	ldr.w	r3, [r5, #432]	; 0x1b0
    12a2:	orrs	r3, r0
    12a4:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    12a8:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    12ac:	ldr.w	r3, [r4, #432]	; 0x1b0
    12b0:	cmp	r3, #0
    12b2:	bne.n	12ac <isr+0x550>
    12b4:	b.n	e1e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    12b6:	ldr	r4, [pc, #244]	; (13ac <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    12b8:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    12bc:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    12be:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    12c0:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    12c2:	cmp	r4, r0
    12c4:	bne.w	ee0 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    12c8:	ldr	r1, [pc, #236]	; (13b8 <isr+0x65c>)
    12ca:	ldr	r4, [pc, #240]	; (13bc <isr+0x660>)
    12cc:	ldmia	r1, {r0, r1}
    12ce:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    12d0:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    12d2:	str	r0, [r4, #0]
    12d4:	strh	r1, [r4, #4]
    12d6:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    12d8:	bne.w	ee0 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    12dc:	cpsid	i
	sof_usage |= (1 << interface);
    12de:	ldr	r0, [pc, #224]	; (13c0 <isr+0x664>)
    12e0:	ldrb	r1, [r0, #0]
    12e2:	orr.w	r1, r1, #4
    12e6:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    12e8:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    12ec:	lsls	r0, r1, #24
    12ee:	bmi.n	12fe <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    12f0:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    12f4:	movs	r0, #128	; 0x80
    12f6:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    12fa:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    12fe:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1300:	ldr	r2, [pc, #192]	; (13c4 <isr+0x668>)
    1302:	movs	r1, #80	; 0x50
    1304:	strb	r1, [r2, #0]
    1306:	b.n	ee0 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1308:	ldr	r0, [pc, #188]	; (13c8 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    130a:	mov	r2, r3
    130c:	ldr	r7, [pc, #148]	; (13a4 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    130e:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1312:	ldr	r1, [pc, #184]	; (13cc <isr+0x670>)
    1314:	ldr	r0, [pc, #184]	; (13d0 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1316:	str	r3, [sp, #4]
    1318:	cmp.w	lr, #0
    131c:	it	eq
    131e:	moveq	r1, r0
    1320:	mov	r0, r7
    1322:	bl	1a1c <memcpy>
					usb_descriptor_buffer[1] = 7;
    1326:	movs	r2, #7
    1328:	ldr	r3, [sp, #4]
    132a:	strb	r2, [r7, #1]
    132c:	b.n	1204 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    132e:	ldr.w	r2, [r3, #328]	; 0x148
    1332:	bic.w	r2, r2, #128	; 0x80
    1336:	str.w	r2, [r3, #328]	; 0x148
    133a:	b.n	eca <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    133c:	ldr	r0, [pc, #148]	; (13d4 <isr+0x678>)
    133e:	bl	c80 <run_callbacks>
    1342:	b.n	f06 <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1344:	ldr	r0, [pc, #144]	; (13d8 <isr+0x67c>)
    1346:	bl	c80 <run_callbacks>
    134a:	b.n	ef4 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    134c:	ldr	r0, [pc, #140]	; (13dc <isr+0x680>)
    134e:	bl	c80 <run_callbacks>
    1352:	b.n	eee <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1354:	ldr	r0, [pc, #136]	; (13e0 <isr+0x684>)
    1356:	bl	c80 <run_callbacks>
    135a:	b.n	f00 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    135c:	ldr	r0, [pc, #132]	; (13e4 <isr+0x688>)
    135e:	bl	c80 <run_callbacks>
    1362:	b.n	efa <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1364:	ldr	r0, [pc, #96]	; (13c8 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1366:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1368:	ldr	r1, [pc, #100]	; (13d0 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    136a:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    136c:	ldr	r0, [pc, #92]	; (13cc <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    136e:	str	r3, [sp, #4]
    1370:	cmp	r7, #0
    1372:	it	eq
    1374:	moveq	r1, r0
    1376:	ldr	r0, [pc, #44]	; (13a4 <isr+0x648>)
    1378:	bl	1a1c <memcpy>
    137c:	ldr	r7, [pc, #36]	; (13a4 <isr+0x648>)
    137e:	ldr	r3, [sp, #4]
    1380:	b.n	1204 <isr+0x4a8>
    1382:	nop
    1384:	.word	0x20001248
    1388:	.word	0x402e01c0
    138c:	.word	0x20002020
    1390:	.word	0x20001264
    1394:	.word	0x200012f8
    1398:	.word	0x20001188
    139c:	.word	0x20001258
    13a0:	.word	0x200002a0
    13a4:	.word	0x20203000
    13a8:	.word	0xe000ef70
    13ac:	.word	0x20001240
    13b0:	.word	0x00070080
    13b4:	.word	0x20002000
    13b8:	.word	0x20001250
    13bc:	.word	0x200012f0
    13c0:	.word	0x20001228
    13c4:	.word	0x20001238
    13c8:	.word	0x20001230
    13cc:	.word	0x60001610
    13d0:	.word	0x60001654
    13d4:	.word	0x20003200
    13d8:	.word	0x20003140
    13dc:	.word	0x20003100
    13e0:	.word	0x200031c0
    13e4:	.word	0x20003180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    13e8:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    13ea:	ldrb	r3, [r1, #0]
    13ec:	cmp	r3, r2
    13ee:	it	cs
    13f0:	movcs	r3, r2
    13f2:	b.n	11ee <isr+0x492>

000013f4 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    13f4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    13f6:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    13fa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    13fe:	ite	ne
    1400:	movne	r7, #0
    1402:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1406:	cmp	r2, #2
    1408:	bls.n	140e <usb_config_rx+0x1a>
    140a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    140e:	mov.w	sl, r0, lsl #7
    1412:	ldr.w	r9, [pc, #64]	; 1454 <usb_config_rx+0x60>
    1416:	mov	r5, r1
    1418:	mov	r4, r0
    141a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    141e:	movs	r1, #0
    1420:	movs	r2, #64	; 0x40
    1422:	mov	r8, r3
    1424:	mov	r0, r6
    1426:	bl	261c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    142a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    142c:	orr.w	r1, r7, r5, lsl #16
    1430:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1434:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1438:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    143a:	cmp.w	r8, #0
    143e:	beq.n	140a <usb_config_rx+0x16>
    1440:	ldr	r3, [pc, #12]	; (1450 <usb_config_rx+0x5c>)
    1442:	lsls	r0, r4
    1444:	ldr	r4, [r3, #0]
    1446:	orrs	r0, r4
    1448:	str	r0, [r3, #0]
    144a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    144e:	nop
    1450:	.word	0x20001224
    1454:	.word	0x20003000

00001458 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1458:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    145a:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    145e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1462:	ite	ne
    1464:	movne	r7, #0
    1466:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    146a:	cmp	r2, #2
    146c:	bls.n	1472 <usb_config_tx+0x1a>
    146e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1472:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1474:	lsls	r5, r0, #7
    1476:	ldr.w	r9, [pc, #68]	; 14bc <usb_config_tx+0x64>
    147a:	mov	r8, r1
    147c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    147e:	movs	r1, #0
    1480:	mov	r4, r0
    1482:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1484:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1488:	mov	r0, sl
    148a:	bl	261c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    148e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1490:	orr.w	r1, r7, r8, lsl #16
    1494:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1498:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    149c:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    14a0:	cmp	r6, #0
    14a2:	beq.n	146e <usb_config_tx+0x16>
    14a4:	add.w	r0, r4, #16
    14a8:	ldr	r3, [pc, #12]	; (14b8 <usb_config_tx+0x60>)
    14aa:	lsls	r2, r0
    14ac:	ldr	r0, [r3, #0]
    14ae:	orrs	r2, r0
    14b0:	str	r2, [r3, #0]
    14b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    14b6:	nop
    14b8:	.word	0x20001224
    14bc:	.word	0x20003000

000014c0 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    14c0:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    14c2:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    14c4:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    14c6:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    14ca:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    14cc:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    14ce:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    14d0:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    14d4:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    14d8:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    14dc:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    14e0:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    14e2:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    14e4:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    14e6:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    14e8:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    14ea:	pop	{r4, r5, r6, r7}
    14ec:	bx	lr
    14ee:	nop

000014f0 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    14f0:	subs	r3, r0, #2
    14f2:	cmp	r3, #2
    14f4:	bls.n	14f8 <usb_transmit+0x8>
    14f6:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    14f8:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    14fa:	ldr	r3, [pc, #24]	; (1514 <usb_transmit+0x24>)
    14fc:	add.w	r4, r0, #16
    1500:	movs	r5, #1
    1502:	mov	r2, r1
    1504:	add.w	r0, r3, r0, lsl #7
    1508:	lsl.w	r1, r5, r4
}
    150c:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    150e:	b.w	c24 <schedule_transfer>
    1512:	nop
    1514:	.word	0x20003040

00001518 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1518:	subs	r3, r0, #2
    151a:	cmp	r3, #2
    151c:	bls.n	1520 <usb_receive+0x8>
    151e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1520:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1522:	ldr	r3, [pc, #20]	; (1538 <usb_receive+0x20>)
    1524:	movs	r4, #1
    1526:	mov	r2, r1
    1528:	lsl.w	r1, r4, r0
    152c:	add.w	r0, r3, r0, lsl #7
}
    1530:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1534:	b.w	c24 <schedule_transfer>
    1538:	.word	0x20003000

0000153c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    153c:	ldr	r0, [r0, #4]
#endif
}
    153e:	bx	lr

00001540 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1540:	cmp	r0, #0
    1542:	beq.n	15f4 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1544:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    1546:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    154a:	sub	sp, #20
    154c:	mov	fp, r0
    154e:	ldr	r4, [pc, #168]	; (15f8 <delay+0xb8>)
    1550:	ldr	r5, [pc, #168]	; (15fc <delay+0xbc>)
    1552:	ldr	r6, [pc, #172]	; (1600 <delay+0xc0>)
    1554:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1558:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    155c:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    155e:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1560:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1564:	cmp	r1, #0
    1566:	bne.n	1558 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1568:	ldr	r7, [pc, #152]	; (1604 <delay+0xc4>)
    156a:	strd	r8, r9, [sp, #8]
    156e:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1570:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1572:	ldr	r2, [pc, #148]	; (1608 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1574:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1578:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    157a:	ldr	r2, [r2, #0]
    157c:	movs	r7, #1
    157e:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    1582:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1586:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    1588:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    158a:	cmp	r3, r1
    158c:	it	eq
    158e:	cmpeq	r2, r8
    1590:	ite	cs
    1592:	movcs	sl, r8
    1594:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1596:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    159a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    159e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    15a0:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    15a2:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    15a6:	cmp	r3, #0
    15a8:	bne.n	159a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    15aa:	ldr	r0, [sp, #4]
    15ac:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    15ae:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    15b0:	ldr	r0, [pc, #84]	; (1608 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    15b2:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    15b6:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    15b8:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    15bc:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    15c0:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    15c4:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    15c8:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    15ca:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    15cc:	cmp	r1, r3
    15ce:	it	eq
    15d0:	cmpeq	r0, r8
    15d2:	ite	cs
    15d4:	movcs	r3, r8
    15d6:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    15d8:	add	r2, r3
    15da:	cmp	r2, lr
    15dc:	bcc.n	15ee <delay+0xae>
			if (--msec == 0) return;
    15de:	subs.w	fp, fp, #1
			start += 1000;
    15e2:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    15e6:	bne.n	159a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    15e8:	add	sp, #20
    15ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    15ee:	bl	16f4 <yield>
	}
    15f2:	b.n	159a <delay+0x5a>
    15f4:	bx	lr
    15f6:	nop
    15f8:	.word	0x20003280
    15fc:	.word	0x20001264
    1600:	.word	0x2000125c
    1604:	.word	0xe0001004
    1608:	.word	0x20001260

0000160c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    160c:	cmp	r0, #39	; 0x27
    160e:	bhi.n	164a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    1610:	lsls	r0, r0, #4
    1612:	ldr	r2, [pc, #104]	; (167c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1614:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    1616:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    161a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    161c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    161e:	beq.n	164c <pinMode+0x40>
    1620:	cmp	r1, #4
    1622:	beq.n	164c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1624:	ldr	r4, [r3, #12]
    1626:	ldr	r2, [r0, #4]
    1628:	bic.w	r2, r2, r4
    162c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    162e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1630:	cbz	r1, 166e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1632:	cmp	r1, #2
    1634:	beq.n	1674 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1636:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1638:	ldr	r3, [r3, #4]
}
    163a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    163e:	ite	eq
    1640:	ldreq	r1, [pc, #60]	; (1680 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1642:	ldrne	r1, [pc, #64]	; (1684 <pinMode+0x78>)
    1644:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1646:	movs	r2, #21
    1648:	str	r2, [r3, #0]
}
    164a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    164c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    164e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1650:	ldr	r4, [r0, #4]
    1652:	orr.w	r2, r2, r4
    1656:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1658:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    165a:	beq.n	166e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    165c:	movw	r1, #2104	; 0x838
    1660:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1662:	ldr	r3, [r3, #4]
    1664:	movs	r2, #21
}
    1666:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    166a:	str	r2, [r3, #0]
}
    166c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    166e:	movs	r1, #56	; 0x38
    1670:	str	r1, [r2, #0]
    1672:	b.n	1662 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1674:	ldr	r1, [pc, #16]	; (1688 <pinMode+0x7c>)
    1676:	str	r1, [r2, #0]
    1678:	b.n	1662 <pinMode+0x56>
    167a:	nop
    167c:	.word	0x20000020
    1680:	.word	0x00013038
    1684:	.word	0x00010038
    1688:	.word	0x0001f038

0000168c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    168c:	ldr	r2, [pc, #72]	; (16d8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    168e:	ldr	r3, [pc, #76]	; (16dc <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1690:	ldr.w	r0, [r2, #544]	; 0x220
    1694:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1698:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    169a:	push	{r4, lr}
    169c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    169e:	bhi.n	16a6 <usb_init_serialnumber+0x1a>
    16a0:	add.w	r0, r0, r0, lsl #2
    16a4:	lsls	r0, r0, #1
    16a6:	ldr	r4, [pc, #56]	; (16e0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    16a8:	add	r1, sp, #4
    16aa:	movs	r2, #10
    16ac:	bl	1c2c <ultoa>
    16b0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    16b2:	movs	r3, #0
    16b4:	mov	r0, r4
		char c = buf[i];
    16b6:	ldrb.w	r2, [r1], #1
    16ba:	adds	r3, #1
		if (!c) break;
    16bc:	cbz	r2, 16ce <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    16be:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    16c0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    16c4:	bne.n	16b6 <usb_init_serialnumber+0x2a>
    16c6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    16c8:	strb	r3, [r4, #0]
}
    16ca:	add	sp, #16
    16cc:	pop	{r4, pc}
    16ce:	lsls	r3, r3, #1
    16d0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    16d2:	strb	r3, [r4, #0]
}
    16d4:	add	sp, #16
    16d6:	pop	{r4, pc}
    16d8:	.word	0x401f4400
    16dc:	.word	0x0098967f
    16e0:	.word	0x200005dc

000016e4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    16e4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    16e6:	bl	80 <setup>
	while (1) {
		loop();
    16ea:	bl	1d8 <loop>
		yield();
    16ee:	bl	16f4 <yield>
    16f2:	b.n	16ea <main+0x6>

000016f4 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    16f4:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    16f6:	ldr	r4, [pc, #132]	; (177c <yield+0x88>)
    16f8:	ldrb	r3, [r4, #0]
    16fa:	cbnz	r3, 171e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    16fc:	ldr	r3, [pc, #128]	; (1780 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    16fe:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1700:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1702:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1704:	cbnz	r3, 174e <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    1706:	ldr	r3, [pc, #124]	; (1784 <yield+0x90>)
    1708:	ldrb	r3, [r3, #0]
    170a:	cmp	r3, #0
    170c:	bne.n	1762 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    170e:	ldr	r3, [pc, #120]	; (1788 <yield+0x94>)

	running = 0;
    1710:	movs	r1, #0
    1712:	ldr	r2, [r3, #0]
    1714:	strb	r1, [r4, #0]
    1716:	cbz	r2, 171e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1718:	mrs	r2, IPSR
		if (ipsr != 0) return;
    171c:	cbz	r2, 1720 <yield+0x2c>
    171e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1720:	mrs	r0, PRIMASK
		__disable_irq();
    1724:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    1726:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    1728:	cbz	r2, 1768 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    172a:	ldr	r4, [pc, #96]	; (178c <yield+0x98>)
    172c:	ldrb	r1, [r4, #0]
    172e:	cbnz	r1, 1768 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1730:	movs	r6, #1
		firstYield = first->_next;
    1732:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1734:	strb	r6, [r4, #0]
		firstYield = first->_next;
    1736:	str	r5, [r3, #0]
		if (firstYield) {
    1738:	cbz	r5, 1770 <yield+0x7c>
			firstYield->_prev = nullptr;
    173a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    173c:	cbnz	r0, 1740 <yield+0x4c>
    173e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1740:	movs	r5, #0
		(*(first->_function))(*first);
    1742:	ldr	r3, [r2, #8]
    1744:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1746:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    1748:	blx	r3
		runningFromYield = false;
    174a:	strb	r5, [r4, #0]
    174c:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    174e:	bl	790 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1752:	cmp	r0, #0
    1754:	beq.n	1706 <yield+0x12>
    1756:	bl	19c0 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    175a:	ldr	r3, [pc, #40]	; (1784 <yield+0x90>)
    175c:	ldrb	r3, [r3, #0]
    175e:	cmp	r3, #0
    1760:	beq.n	170e <yield+0x1a>
    1762:	bl	1f34 <HardwareSerial::processSerialEvents()>
    1766:	b.n	170e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1768:	cmp	r0, #0
    176a:	bne.n	171e <yield+0x2a>
    176c:	cpsie	i
    176e:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    1770:	ldr	r3, [pc, #28]	; (1790 <yield+0x9c>)
    1772:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1774:	cmp	r0, #0
    1776:	bne.n	1740 <yield+0x4c>
    1778:	b.n	173e <yield+0x4a>
    177a:	nop
    177c:	.word	0x20001268
    1780:	.word	0x200005f2
    1784:	.word	0x200012b8
    1788:	.word	0x2000127c
    178c:	.word	0x20001280
    1790:	.word	0x20001278

00001794 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    1794:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1796:	mrs	r2, PRIMASK
		__disable_irq();
    179a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    179c:	ldrb	r3, [r0, #29]
    179e:	cbnz	r3, 17ae <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    17a0:	ldrb	r1, [r0, #28]
    17a2:	cmp	r1, #1
    17a4:	beq.n	17b8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    17a6:	cmp	r1, #3
    17a8:	beq.n	17cc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    17aa:	movs	r3, #1
    17ac:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    17ae:	cbnz	r2, 17b2 <EventResponder::triggerEventNotImmediate()+0x1e>
    17b0:	cpsie	i
	}
	enableInterrupts(irq);
}
    17b2:	ldr.w	r4, [sp], #4
    17b6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    17b8:	ldr	r4, [pc, #68]	; (1800 <EventResponder::triggerEventNotImmediate()+0x6c>)
    17ba:	ldr	r1, [r4, #0]
    17bc:	cbz	r1, 17e8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    17be:	ldr	r1, [pc, #68]	; (1804 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    17c0:	str	r3, [r0, #20]
				_prev = lastYield;
    17c2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    17c4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    17c6:	str	r3, [r0, #24]
				_prev->_next = this;
    17c8:	str	r0, [r3, #20]
    17ca:	b.n	17aa <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    17cc:	ldr	r4, [pc, #56]	; (1808 <EventResponder::triggerEventNotImmediate()+0x74>)
    17ce:	ldr	r1, [r4, #0]
    17d0:	cbz	r1, 17f4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    17d2:	ldr	r1, [pc, #56]	; (180c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    17d4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    17d6:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    17d8:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    17da:	str	r3, [r0, #24]
				_prev->_next = this;
    17dc:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    17de:	ldr	r3, [pc, #48]	; (1810 <EventResponder::triggerEventNotImmediate()+0x7c>)
    17e0:	mov.w	r1, #268435456	; 0x10000000
    17e4:	str	r1, [r3, #0]
    17e6:	b.n	17aa <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    17e8:	ldr	r3, [pc, #24]	; (1804 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    17ea:	str	r1, [r0, #20]
				_prev = nullptr;
    17ec:	str	r1, [r0, #24]
				firstYield = this;
    17ee:	str	r0, [r4, #0]
				lastYield = this;
    17f0:	str	r0, [r3, #0]
    17f2:	b.n	17aa <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    17f4:	ldr	r3, [pc, #20]	; (180c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    17f6:	str	r1, [r0, #20]
				_prev = nullptr;
    17f8:	str	r1, [r0, #24]
				firstInterrupt = this;
    17fa:	str	r0, [r4, #0]
				lastInterrupt = this;
    17fc:	str	r0, [r3, #0]
    17fe:	b.n	17de <EventResponder::triggerEventNotImmediate()+0x4a>
    1800:	.word	0x2000127c
    1804:	.word	0x20001278
    1808:	.word	0x2000126c
    180c:	.word	0x20001270
    1810:	.word	0xe000ed04

00001814 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1814:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1816:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1818:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    181a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    181c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    181e:	beq.n	1828 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1820:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1824:	b.w	1794 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1828:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    182a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    182e:	bx	r3

00001830 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1830:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1832:	mrs	r1, PRIMASK
		__disable_irq();
    1836:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1838:	ldr	r4, [pc, #48]	; (186c <EventResponder::runFromInterrupt()+0x3c>)
    183a:	ldr	r3, [r4, #0]
		if (first) {
    183c:	cbz	r3, 1862 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    183e:	ldr	r6, [pc, #48]	; (1870 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1840:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1842:	ldr	r2, [r3, #20]
    1844:	str	r2, [r4, #0]
			if (firstInterrupt) {
    1846:	cbz	r2, 1868 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    1848:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    184a:	cbnz	r1, 184e <EventResponder::runFromInterrupt()+0x1e>
    184c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    184e:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    1850:	mov	r0, r3
    1852:	ldr	r3, [r3, #8]
    1854:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1856:	mrs	r1, PRIMASK
		__disable_irq();
    185a:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    185c:	ldr	r3, [r4, #0]
		if (first) {
    185e:	cmp	r3, #0
    1860:	bne.n	1842 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1862:	cbnz	r1, 1866 <EventResponder::runFromInterrupt()+0x36>
    1864:	cpsie	i
    1866:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1868:	str	r2, [r6, #0]
    186a:	b.n	184a <EventResponder::runFromInterrupt()+0x1a>
    186c:	.word	0x2000126c
    1870:	.word	0x20001270

00001874 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    1874:	b.w	1830 <EventResponder::runFromInterrupt()>

00001878 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    1878:	ldr	r2, [pc, #96]	; (18dc <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    187a:	push	{r4, r5}
	if (listActive == nullptr) {
    187c:	ldr	r4, [r2, #0]
    187e:	cmp	r4, #0
    1880:	beq.n	18d4 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    1882:	ldr	r3, [r0, #0]
    1884:	ldr	r1, [r4, #0]
    1886:	cmp	r3, r1
    1888:	bcs.n	18aa <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    188a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    188c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    188e:	str	r4, [r0, #8]
		_prev = nullptr;
    1890:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    1892:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    1894:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    1896:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    1898:	movs	r3, #2
}
    189a:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    189c:	strb	r3, [r0, #20]
}
    189e:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    18a0:	str	r3, [r0, #0]
    18a2:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    18a4:	ldr	r1, [r2, #0]
    18a6:	cmp	r3, r1
    18a8:	bcc.n	18bc <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    18aa:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    18ac:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    18ae:	cmp	r2, #0
    18b0:	bne.n	18a0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    18b2:	str	r2, [r0, #8]
		_prev = timer;
    18b4:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    18b6:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    18b8:	str	r0, [r4, #8]
    18ba:	b.n	1898 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    18bc:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    18be:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    18c0:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    18c2:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    18c4:	str	r5, [r0, #12]
				timer->_prev = this;
    18c6:	str	r0, [r4, #12]
				_prev->_next = this;
    18c8:	ldr	r1, [r0, #12]
    18ca:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    18cc:	str	r3, [r4, #0]
				_state = TimerActive;
    18ce:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    18d0:	pop	{r4, r5}
    18d2:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    18d4:	str	r4, [r0, #8]
		_prev = nullptr;
    18d6:	str	r4, [r0, #12]
		listActive = this;
    18d8:	str	r0, [r2, #0]
    18da:	b.n	1898 <MillisTimer::addToActiveList()+0x20>
    18dc:	.word	0x20001274

000018e0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    18e0:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    18e2:	ldr	r6, [pc, #136]	; (196c <MillisTimer::runFromTimer()+0x8c>)
    18e4:	ldr	r4, [r6, #0]
	while (timer) {
    18e6:	cbz	r4, 1934 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    18e8:	ldr	r3, [r4, #0]
    18ea:	cmp	r3, #0
    18ec:	bne.n	1964 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    18ee:	mov	r5, r3
    18f0:	ldr	r7, [pc, #124]	; (1970 <MillisTimer::runFromTimer()+0x90>)
    18f2:	b.n	18fe <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    18f4:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    18f6:	cbz	r4, 1934 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    18f8:	ldr	r3, [r4, #0]
    18fa:	cmp	r3, #0
    18fc:	bne.n	1964 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    18fe:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    1900:	cbz	r3, 1904 <MillisTimer::runFromTimer()+0x24>
    1902:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    1904:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    1906:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1908:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    190a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    190c:	ldr	r3, [r3, #0]
    190e:	cmp	r3, r7
    1910:	bne.n	1956 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1912:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1914:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1916:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1918:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    191a:	beq.n	195e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    191c:	bl	1794 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    1920:	ldr	r3, [r4, #4]
    1922:	cmp	r3, #0
    1924:	beq.n	18f4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    1926:	str	r3, [r4, #0]
				timer->addToActiveList();
    1928:	mov	r0, r4
    192a:	bl	1878 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    192e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1930:	cmp	r4, #0
    1932:	bne.n	18f8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1934:	mrs	r3, PRIMASK
		__disable_irq();
    1938:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    193a:	ldr	r2, [pc, #56]	; (1974 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    193c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    193e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1940:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    1942:	cbnz	r3, 1946 <MillisTimer::runFromTimer()+0x66>
    1944:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    1946:	cbz	r0, 1954 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    1948:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    194a:	bl	1878 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    194e:	mov	r0, r4
    1950:	cmp	r0, #0
    1952:	bne.n	1948 <MillisTimer::runFromTimer()+0x68>
    1954:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1956:	mov	r2, r4
    1958:	movs	r1, #0
    195a:	blx	r3
    195c:	b.n	1920 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    195e:	ldr	r3, [r0, #8]
    1960:	blx	r3
    1962:	b.n	1920 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    1964:	subs	r3, #1
    1966:	str	r3, [r4, #0]
			break;
    1968:	b.n	1934 <MillisTimer::runFromTimer()+0x54>
    196a:	nop
    196c:	.word	0x20001274
    1970:	.word	0x00001815
    1974:	.word	0x20001284

00001978 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1978:	ldr	r2, [pc, #16]	; (198c <systick_isr+0x14>)
    197a:	ldr	r3, [pc, #20]	; (1990 <systick_isr+0x18>)
    197c:	ldr	r1, [r2, #0]
	systick_millis_count++;
    197e:	ldr	r2, [pc, #20]	; (1994 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1980:	str	r1, [r3, #0]
	systick_millis_count++;
    1982:	ldr	r3, [r2, #0]
    1984:	adds	r3, #1
    1986:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    1988:	b.w	18e0 <MillisTimer::runFromTimer()>
    198c:	.word	0xe0001004
    1990:	.word	0x2000125c
    1994:	.word	0x20001264

00001998 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    1998:	b.w	79c <usb_serial_flush_input>

0000199c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    199c:	b.w	74c <usb_serial_peekchar>

000019a0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    19a0:	b.w	810 <usb_serial_getchar>

000019a4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    19a4:	b.w	790 <usb_serial_available>

000019a8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    19a8:	b.w	8c0 <usb_serial_flush_output>

000019ac <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    19ac:	b.w	874 <usb_serial_write_buffer_free>

000019b0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    19b0:	mov	r0, r1
    19b2:	mov	r1, r2
    19b4:	b.w	85c <usb_serial_write>

000019b8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    19b8:	mov	r0, r1
    19ba:	b.w	830 <usb_serial_putchar>
    19be:	nop

000019c0 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    19c0:	ldr	r3, [pc, #4]	; (19c8 <serialEvent()+0x8>)
    19c2:	movs	r2, #0
    19c4:	strb	r2, [r3, #0]
    19c6:	bx	lr
    19c8:	.word	0x200005f2

000019cc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    19cc:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    19ce:	ldr	r4, [pc, #24]	; (19e8 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    19d0:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    19d2:	ldr	r3, [r0, #0]
    19d4:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    19d6:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    19d8:	add	r1, sp, #4
    19da:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    19dc:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    19e0:	blx	r3
}
    19e2:	add	sp, #8
    19e4:	pop	{r4, pc}
    19e6:	nop
    19e8:	.word	0x20000334

000019ec <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    19ec:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    19ee:	push	{r4, lr}
    19f0:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    19f2:	ldr	r3, [r3, #4]
    19f4:	blx	r3
	return len;
}
    19f6:	mov	r0, r4
    19f8:	pop	{r4, pc}
    19fa:	nop

000019fc <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    19fc:	push	{r1, r2, r3}
    19fe:	push	{lr}
    1a00:	sub	sp, #8
    1a02:	add	r3, sp, #12
    1a04:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    1a08:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    1a0a:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    1a0c:	bl	2c28 <vdprintf>
#endif
}
    1a10:	add	sp, #8
    1a12:	ldr.w	lr, [sp], #4
    1a16:	add	sp, #12
    1a18:	bx	lr
    1a1a:	nop

00001a1c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1a1c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1a1e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1a22:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1a26:	bne.n	1b04 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1a28:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1a2a:	bcc.n	1ab0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1a2c:	ldr.w	r3, [r1], #4
    1a30:	str.w	r3, [r0], #4
    1a34:	ldr.w	r3, [r1], #4
    1a38:	str.w	r3, [r0], #4
    1a3c:	ldr.w	r3, [r1], #4
    1a40:	str.w	r3, [r0], #4
    1a44:	ldr.w	r3, [r1], #4
    1a48:	str.w	r3, [r0], #4
    1a4c:	ldr.w	r3, [r1], #4
    1a50:	str.w	r3, [r0], #4
    1a54:	ldr.w	r3, [r1], #4
    1a58:	str.w	r3, [r0], #4
    1a5c:	ldr.w	r3, [r1], #4
    1a60:	str.w	r3, [r0], #4
    1a64:	ldr.w	r3, [r1], #4
    1a68:	str.w	r3, [r0], #4
    1a6c:	ldr.w	r3, [r1], #4
    1a70:	str.w	r3, [r0], #4
    1a74:	ldr.w	r3, [r1], #4
    1a78:	str.w	r3, [r0], #4
    1a7c:	ldr.w	r3, [r1], #4
    1a80:	str.w	r3, [r0], #4
    1a84:	ldr.w	r3, [r1], #4
    1a88:	str.w	r3, [r0], #4
    1a8c:	ldr.w	r3, [r1], #4
    1a90:	str.w	r3, [r0], #4
    1a94:	ldr.w	r3, [r1], #4
    1a98:	str.w	r3, [r0], #4
    1a9c:	ldr.w	r3, [r1], #4
    1aa0:	str.w	r3, [r0], #4
    1aa4:	ldr.w	r3, [r1], #4
    1aa8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1aac:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1aae:	bcs.n	1a2c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1ab0:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1ab2:	bcc.n	1ad8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1ab4:	ldr.w	r3, [r1], #4
    1ab8:	str.w	r3, [r0], #4
    1abc:	ldr.w	r3, [r1], #4
    1ac0:	str.w	r3, [r0], #4
    1ac4:	ldr.w	r3, [r1], #4
    1ac8:	str.w	r3, [r0], #4
    1acc:	ldr.w	r3, [r1], #4
    1ad0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1ad4:	subs	r2, #16
	bhs	.Lmid_block_loop
    1ad6:	bcs.n	1ab4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1ad8:	adds	r2, #12
	blo	.Lcopy_less_than_4
    1ada:	bcc.n	1ae8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1adc:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1ae0:	str.w	r3, [r0], #4
	subs	r2, #4
    1ae4:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1ae6:	bcs.n	1adc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1ae8:	adds	r2, #4
	beq	.Ldone
    1aea:	beq.n	1afe <memcpy+0xe2>

	lsls	r2, r2, #31
    1aec:	lsls	r2, r2, #31
	itt ne
    1aee:	itt	ne
	ldrbne  r3, [r1], #1
    1af0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1af4:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1af8:	bcc.n	1afe <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1afa:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1afc:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1afe:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1b00:	bx	lr
    1b02:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1b04:	cmp	r2, #8
	blo	.Lbyte_copy
    1b06:	bcc.n	1b30 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1b08:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1b0a:	beq.n	1a28 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1b0c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1b10:	beq.n	1a28 <memcpy+0xc>

	rsb	r3, #4
    1b12:	rsb	r3, r3, #4
	subs	r2, r3
    1b16:	subs	r2, r2, r3

	lsls    r3, r3, #31
    1b18:	lsls	r3, r3, #31
	itt ne
    1b1a:	itt	ne
	ldrbne  r3, [r1], #1
    1b1c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1b20:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1b24:	bcc.n	1a28 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1b26:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1b2a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1b2e:	b.n	1a28 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1b30:	subs	r2, #4
	blo	.Lcopy_less_than_4
    1b32:	bcc.n	1ae8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1b34:	subs	r2, #1
	ldrb    r3, [r1], #1
    1b36:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1b3a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1b3e:	bcs.n	1b34 <memcpy+0x118>

	ldrb	r3, [r1]
    1b40:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1b42:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1b44:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1b46:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1b48:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1b4a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1b4c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1b4e:	bx	lr

00001b50 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1b50:	movs	r0, #4
    1b52:	mov	r1, lr
    1b54:	tst	r0, r1
    1b56:	beq.n	1b60 <_MSP>
    1b58:	mrs	r0, PSP
    1b5c:	b.w	1b70 <HardFault_HandlerC>

00001b60 <_MSP>:
    1b60:	mrs	r0, MSP
    1b64:	b.w	1b70 <HardFault_HandlerC>

00001b68 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1b68:	bx	lr
    1b6a:	nop

00001b6c <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1b6c:	bx	lr
    1b6e:	nop

00001b70 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1b70:	ldr	r3, [pc, #108]	; (1be0 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1b72:	movs	r1, #5
    1b74:	ldr	r2, [pc, #108]	; (1be4 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1b76:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1b78:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1b7a:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1b7e:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1b80:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1b84:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1b86:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1b88:	ldr	r4, [pc, #92]	; (1be8 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1b8a:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1b8c:	ldr	r0, [pc, #92]	; (1bec <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1b8e:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1b90:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1b94:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1b98:	ldr	r3, [r4, #0]
    1b9a:	cmp	r3, r0
    1b9c:	bls.n	1ba4 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1b9e:	ldr	r0, [pc, #80]	; (1bf0 <HardFault_HandlerC+0x80>)
    1ba0:	bl	960 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1ba4:	ldr	r5, [pc, #56]	; (1be0 <HardFault_HandlerC+0x70>)
    1ba6:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1ba8:	movs	r0, #0
    1baa:	ldr	r2, [pc, #72]	; (1bf4 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1bac:	ldr	r1, [pc, #72]	; (1bf8 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1bae:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1bb2:	str	r0, [sp, #4]
    1bb4:	ldr	r3, [sp, #4]
    1bb6:	cmp	r3, r2
    1bb8:	bhi.n	1bc6 <HardFault_HandlerC+0x56>
    1bba:	ldr	r3, [sp, #4]
    1bbc:	adds	r3, #1
    1bbe:	str	r3, [sp, #4]
    1bc0:	ldr	r3, [sp, #4]
    1bc2:	cmp	r3, r2
    1bc4:	bls.n	1bba <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1bc6:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1bca:	str	r0, [sp, #4]
    1bcc:	ldr	r3, [sp, #4]
    1bce:	cmp	r3, r1
    1bd0:	bhi.n	1bae <HardFault_HandlerC+0x3e>
    1bd2:	ldr	r3, [sp, #4]
    1bd4:	adds	r3, #1
    1bd6:	str	r3, [sp, #4]
    1bd8:	ldr	r3, [sp, #4]
    1bda:	cmp	r3, r1
    1bdc:	bls.n	1bd2 <HardFault_HandlerC+0x62>
    1bde:	b.n	1bae <HardFault_HandlerC+0x3e>
    1be0:	.word	0x401bc000
    1be4:	.word	0x401f8000
    1be8:	.word	0x200005c4
    1bec:	.word	0x23c345ff
    1bf0:	.word	0x11e1a300
    1bf4:	.word	0x000f423f
    1bf8:	.word	0x0089543f

00001bfc <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    1bfc:	ldr	r2, [pc, #36]	; (1c24 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    1bfe:	push	{r3, lr}
        char *prev = __brkval;
    1c00:	ldr	r3, [r2, #0]
        if (incr != 0) {
    1c02:	cbz	r0, 1c0e <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    1c04:	add	r0, r3
    1c06:	ldr	r1, [pc, #32]	; (1c28 <_sbrk+0x2c>)
    1c08:	cmp	r0, r1
    1c0a:	bhi.n	1c12 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    1c0c:	str	r0, [r2, #0]
        }
        return prev;
}
    1c0e:	mov	r0, r3
    1c10:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1c12:	bl	1f5c <__errno>
    1c16:	movs	r2, #12
                        return (void *)-1;
    1c18:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1c1c:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1c1e:	mov	r0, r3
    1c20:	pop	{r3, pc}
    1c22:	nop
    1c24:	.word	0x20000604
    1c28:	.word	0x20280000

00001c2c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1c2c:	push	{r4, r5, r6, r7}
    1c2e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    1c30:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1c32:	mov	r7, r6
    1c34:	b.n	1c38 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1c36:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1c38:	udiv	r3, r0, r2
    1c3c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1c40:	add.w	r4, r0, #55	; 0x37
    1c44:	cmp	r0, #9
    1c46:	add.w	r0, r0, #48	; 0x30
    1c4a:	uxtb	r4, r4
    1c4c:	it	ls
    1c4e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    1c50:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1c52:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    1c56:	cmp	r3, #0
    1c58:	bne.n	1c36 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    1c5a:	adds	r2, r1, r5
    1c5c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    1c5e:	cbz	r5, 1c74 <ultoa+0x48>
    1c60:	adds	r3, #1
		t = buf[j];
    1c62:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    1c66:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1c68:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    1c6a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1c6c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    1c6e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1c72:	blt.n	1c60 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    1c74:	mov	r0, r1
    1c76:	pop	{r4, r5, r6, r7}
    1c78:	bx	lr
    1c7a:	nop

00001c7c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c7c:	ldr	r0, [pc, #656]	; (1f10 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1c7e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c82:	ldr	r3, [pc, #656]	; (1f14 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c84:	ldr	r2, [r0, #120]	; 0x78
    1c86:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1c8a:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1c8c:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1c8e:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c90:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1c94:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1c98:	ldr	r4, [pc, #636]	; (1f18 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1c9a:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1c9e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1ca0:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1ca4:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1ca6:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1ca8:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1cac:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1cb0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cb4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1cb8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1cbc:	ldrh.w	r0, [r3, #392]	; 0x188
    1cc0:	uxth	r0, r0
    1cc2:	orr.w	r0, r0, #240	; 0xf0
    1cc6:	strh.w	r0, [r3, #392]	; 0x188
    1cca:	add.w	r0, r1, r1, lsl #1
    1cce:	ldr	r3, [pc, #580]	; (1f14 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1cd0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1cd2:	movs	r5, #0
    1cd4:	lsls	r0, r0, #5
    1cd6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cd8:	cmp	r1, #4
    1cda:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1cdc:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1ce0:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1ce2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1ce4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1ce6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1ce8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1cea:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1cec:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1cee:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1cf0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1cf2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1cf4:	bne.n	1cca <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1cf6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1cfa:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1cfe:	ldr	r3, [pc, #540]	; (1f1c <pwm_init+0x2a0>)
    1d00:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d04:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d06:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d08:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d0c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d0e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d12:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d16:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1d1a:	ldrh.w	r0, [r4, #392]	; 0x188
    1d1e:	uxth	r0, r0
    1d20:	orr.w	r0, r0, #3840	; 0xf00
    1d24:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d28:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1d2c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d30:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1d34:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1d38:	ldrh.w	r0, [r3, #392]	; 0x188
    1d3c:	uxth	r0, r0
    1d3e:	orr.w	r0, r0, #240	; 0xf0
    1d42:	strh.w	r0, [r3, #392]	; 0x188
    1d46:	add.w	r0, r1, r1, lsl #1
    1d4a:	ldr	r3, [pc, #464]	; (1f1c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1d4c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d4e:	movs	r5, #0
    1d50:	lsls	r0, r0, #5
    1d52:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d54:	cmp	r1, #4
    1d56:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d58:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d5a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1d5e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1d60:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1d62:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1d64:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1d66:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1d68:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1d6a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1d6c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1d6e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d70:	bne.n	1d46 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d72:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1d76:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1d7a:	ldr	r3, [pc, #420]	; (1f20 <pwm_init+0x2a4>)
    1d7c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d80:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1d82:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1d84:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1d88:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d8a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1d8e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1d92:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1d96:	ldrh.w	r0, [r4, #392]	; 0x188
    1d9a:	uxth	r0, r0
    1d9c:	orr.w	r0, r0, #3840	; 0xf00
    1da0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1da4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1da8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1dac:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1db0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1db4:	ldrh.w	r0, [r3, #392]	; 0x188
    1db8:	uxth	r0, r0
    1dba:	orr.w	r0, r0, #240	; 0xf0
    1dbe:	strh.w	r0, [r3, #392]	; 0x188
    1dc2:	add.w	r0, r1, r1, lsl #1
    1dc6:	ldr	r3, [pc, #344]	; (1f20 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    1dc8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1dca:	movs	r5, #0
    1dcc:	lsls	r0, r0, #5
    1dce:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1dd0:	cmp	r1, #4
    1dd2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1dd4:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1dd6:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1dda:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1ddc:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1dde:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1de0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1de2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1de4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1de6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1de8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1dea:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1dec:	bne.n	1dc2 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dee:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1df2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1df6:	ldr	r3, [pc, #300]	; (1f24 <pwm_init+0x2a8>)
    1df8:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1dfc:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1dfe:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1e00:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1e04:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e06:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1e0a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e0e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1e12:	ldrh.w	r0, [r4, #392]	; 0x188
    1e16:	uxth	r0, r0
    1e18:	orr.w	r0, r0, #3840	; 0xf00
    1e1c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1e20:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1e24:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1e28:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1e2c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1e30:	ldrh.w	r0, [r3, #392]	; 0x188
    1e34:	uxth	r0, r0
    1e36:	orr.w	r0, r0, #240	; 0xf0
    1e3a:	strh.w	r0, [r3, #392]	; 0x188
    1e3e:	add.w	r0, r1, r1, lsl #1
    1e42:	ldr	r3, [pc, #224]	; (1f24 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    1e44:	adds	r1, #1
    1e46:	lsls	r0, r0, #5
    1e48:	mov	r4, r3
    1e4a:	cmp	r1, #4
    1e4c:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1e4e:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1e50:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1e54:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1e56:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1e58:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1e5a:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1e5c:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    1e5e:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1e60:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1e62:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1e64:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1e66:	bne.n	1e3e <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e68:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1e6c:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e6e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1e70:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e74:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1e76:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e7a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1e7c:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1e80:	orrs	r3, r7
    1e82:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1e86:	ldrh.w	r3, [r4, #392]	; 0x188
    1e8a:	uxth	r3, r3
    1e8c:	orr.w	r3, r3, #3840	; 0xf00
    1e90:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1e94:	lsls	r0, r2, #5
    1e96:	ldr	r3, [pc, #144]	; (1f28 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e98:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1e9a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1e9c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1e9e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1ea0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1ea2:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1ea4:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1ea6:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1eaa:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1eac:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1eae:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1eb0:	bne.n	1e94 <pwm_init+0x218>
    1eb2:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1eb4:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1eb6:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1eba:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1ebe:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1ec0:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1ec4:	lsls	r0, r2, #5
    1ec6:	ldr	r3, [pc, #100]	; (1f2c <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ec8:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1eca:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ecc:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1ece:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1ed0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1ed2:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1ed4:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1ed6:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1ed8:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1eda:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1edc:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ede:	bne.n	1ec4 <pwm_init+0x248>
    1ee0:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1ee2:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1ee4:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1ee8:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1eec:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1eee:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1ef2:	lsls	r0, r2, #5
    1ef4:	ldr	r3, [pc, #56]	; (1f30 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1ef6:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1ef8:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1efa:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1efc:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1efe:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1f00:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1f02:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1f04:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1f06:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1f08:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1f0a:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1f0c:	bne.n	1ef2 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1f0e:	pop	{r4, r5, r6, r7, pc}
    1f10:	.word	0x400fc000
    1f14:	.word	0x403dc000
    1f18:	.word	0xfc030000
    1f1c:	.word	0x403e0000
    1f20:	.word	0x403e4000
    1f24:	.word	0x403e8000
    1f28:	.word	0x401dc000
    1f2c:	.word	0x401e0000
    1f30:	.word	0x401e4000

00001f34 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    1f34:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    1f36:	ldr	r3, [pc, #28]	; (1f54 <HardwareSerial::processSerialEvents()+0x20>)
    1f38:	ldrb	r4, [r3, #0]
    1f3a:	cbz	r4, 1f50 <HardwareSerial::processSerialEvents()+0x1c>
    1f3c:	ldr	r5, [pc, #24]	; (1f58 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    1f3e:	ldr.w	r3, [r5, #4]!
    1f42:	cmp	r3, #0
    1f44:	beq.n	1f3e <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    1f46:	blx	r3
			if (--handlers_still_to_process == 0) return;
    1f48:	subs	r3, r4, #1
    1f4a:	ands.w	r4, r3, #255	; 0xff
    1f4e:	bne.n	1f3e <HardwareSerial::processSerialEvents()+0xa>
    1f50:	pop	{r3, r4, r5, pc}
    1f52:	nop
    1f54:	.word	0x200012b8
    1f58:	.word	0x20001298

00001f5c <__errno>:
    1f5c:	ldr	r3, [pc, #4]	; (1f64 <__errno+0x8>)
    1f5e:	ldr	r0, [r3, #0]
    1f60:	bx	lr
    1f62:	nop
    1f64:	.word	0x20000a30

00001f68 <__libc_init_array>:
    1f68:	push	{r4, r5, r6, lr}
    1f6a:	ldr	r6, [pc, #60]	; (1fa8 <__libc_init_array+0x40>)
    1f6c:	ldr	r5, [pc, #60]	; (1fac <__libc_init_array+0x44>)
    1f6e:	subs	r6, r6, r5
    1f70:	asrs	r6, r6, #2
    1f72:	it	ne
    1f74:	movne	r4, #0
    1f76:	beq.n	1f84 <__libc_init_array+0x1c>
    1f78:	adds	r4, #1
    1f7a:	ldr.w	r3, [r5], #4
    1f7e:	blx	r3
    1f80:	cmp	r6, r4
    1f82:	bne.n	1f78 <__libc_init_array+0x10>
    1f84:	ldr	r6, [pc, #40]	; (1fb0 <__libc_init_array+0x48>)
    1f86:	ldr	r5, [pc, #44]	; (1fb4 <__libc_init_array+0x4c>)
    1f88:	subs	r6, r6, r5
    1f8a:	bl	5dd0 <___init_veneer>
    1f8e:	asrs	r6, r6, #2
    1f90:	it	ne
    1f92:	movne	r4, #0
    1f94:	beq.n	1fa4 <__libc_init_array+0x3c>
    1f96:	adds	r4, #1
    1f98:	ldr.w	r3, [r5], #4
    1f9c:	blx	r3
    1f9e:	cmp	r6, r4
    1fa0:	bne.n	1f96 <__libc_init_array+0x2e>
    1fa2:	pop	{r4, r5, r6, pc}
    1fa4:	pop	{r4, r5, r6, pc}
    1fa6:	nop
    1fa8:	.word	0x600016f8
    1fac:	.word	0x600016f8
    1fb0:	.word	0x600016fc
    1fb4:	.word	0x600016f8

00001fb8 <_malloc_r>:
    1fb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fbc:	add.w	r5, r1, #11
    1fc0:	cmp	r5, #22
    1fc2:	sub	sp, #12
    1fc4:	mov	r6, r0
    1fc6:	bls.w	2108 <_malloc_r+0x150>
    1fca:	bics.w	r5, r5, #7
    1fce:	bmi.w	2150 <_malloc_r+0x198>
    1fd2:	cmp	r1, r5
    1fd4:	bhi.w	2150 <_malloc_r+0x198>
    1fd8:	bl	26b8 <__malloc_lock>
    1fdc:	cmp.w	r5, #504	; 0x1f8
    1fe0:	bcc.w	251c <_malloc_r+0x564>
    1fe4:	lsrs	r3, r5, #9
    1fe6:	beq.w	215e <_malloc_r+0x1a6>
    1fea:	cmp	r3, #4
    1fec:	bhi.w	22f6 <_malloc_r+0x33e>
    1ff0:	lsrs	r0, r5, #6
    1ff2:	add.w	lr, r0, #57	; 0x39
    1ff6:	mov.w	r3, lr, lsl #1
    1ffa:	adds	r0, #56	; 0x38
    1ffc:	ldr	r7, [pc, #784]	; (2310 <_malloc_r+0x358>)
    1ffe:	add.w	r3, r7, r3, lsl #2
    2002:	sub.w	r1, r3, #8
    2006:	ldr	r4, [r3, #4]
    2008:	cmp	r1, r4
    200a:	bne.n	201c <_malloc_r+0x64>
    200c:	b.n	2168 <_malloc_r+0x1b0>
    200e:	cmp	r2, #0
    2010:	bge.w	216c <_malloc_r+0x1b4>
    2014:	ldr	r4, [r4, #12]
    2016:	cmp	r1, r4
    2018:	beq.w	2168 <_malloc_r+0x1b0>
    201c:	ldr	r3, [r4, #4]
    201e:	bic.w	r3, r3, #3
    2022:	subs	r2, r3, r5
    2024:	cmp	r2, #15
    2026:	ble.n	200e <_malloc_r+0x56>
    2028:	ldr	r1, [pc, #740]	; (2310 <_malloc_r+0x358>)
    202a:	ldr	r4, [r7, #16]
    202c:	add.w	lr, r1, #8
    2030:	cmp	r4, lr
    2032:	beq.w	239c <_malloc_r+0x3e4>
    2036:	ldr	r3, [r4, #4]
    2038:	bic.w	r3, r3, #3
    203c:	subs	r2, r3, r5
    203e:	cmp	r2, #15
    2040:	bgt.w	2376 <_malloc_r+0x3be>
    2044:	cmp	r2, #0
    2046:	str.w	lr, [r1, #20]
    204a:	str.w	lr, [r1, #16]
    204e:	bge.w	218e <_malloc_r+0x1d6>
    2052:	cmp.w	r3, #512	; 0x200
    2056:	bcs.w	2328 <_malloc_r+0x370>
    205a:	lsrs	r3, r3, #3
    205c:	add.w	ip, r3, #1
    2060:	movs	r2, #1
    2062:	asrs	r3, r3, #2
    2064:	lsl.w	r3, r2, r3
    2068:	ldr	r2, [r1, #4]
    206a:	ldr.w	r8, [r1, ip, lsl #3]
    206e:	str.w	r8, [r4, #8]
    2072:	add.w	r9, r1, ip, lsl #3
    2076:	orrs	r2, r3
    2078:	sub.w	r3, r9, #8
    207c:	str	r3, [r4, #12]
    207e:	str	r2, [r1, #4]
    2080:	str.w	r4, [r1, ip, lsl #3]
    2084:	str.w	r4, [r8, #12]
    2088:	asrs	r3, r0, #2
    208a:	movs	r4, #1
    208c:	lsls	r4, r3
    208e:	cmp	r4, r2
    2090:	bhi.w	21a8 <_malloc_r+0x1f0>
    2094:	tst	r4, r2
    2096:	bne.n	20a6 <_malloc_r+0xee>
    2098:	bic.w	r0, r0, #3
    209c:	lsls	r4, r4, #1
    209e:	tst	r4, r2
    20a0:	add.w	r0, r0, #4
    20a4:	beq.n	209c <_malloc_r+0xe4>
    20a6:	add.w	r9, r7, r0, lsl #3
    20aa:	mov	ip, r9
    20ac:	mov	r8, r0
    20ae:	ldr.w	r1, [ip, #12]
    20b2:	cmp	ip, r1
    20b4:	bne.n	20c6 <_malloc_r+0x10e>
    20b6:	b.n	23a0 <_malloc_r+0x3e8>
    20b8:	cmp	r2, #0
    20ba:	bge.w	23c0 <_malloc_r+0x408>
    20be:	ldr	r1, [r1, #12]
    20c0:	cmp	ip, r1
    20c2:	beq.w	23a0 <_malloc_r+0x3e8>
    20c6:	ldr	r3, [r1, #4]
    20c8:	bic.w	r3, r3, #3
    20cc:	subs	r2, r3, r5
    20ce:	cmp	r2, #15
    20d0:	ble.n	20b8 <_malloc_r+0x100>
    20d2:	mov	r4, r1
    20d4:	ldr.w	ip, [r1, #12]
    20d8:	ldr.w	r8, [r4, #8]!
    20dc:	adds	r3, r1, r5
    20de:	orr.w	r5, r5, #1
    20e2:	str	r5, [r1, #4]
    20e4:	orr.w	r1, r2, #1
    20e8:	str.w	ip, [r8, #12]
    20ec:	mov	r0, r6
    20ee:	str.w	r8, [ip, #8]
    20f2:	str	r3, [r7, #20]
    20f4:	str	r3, [r7, #16]
    20f6:	str.w	lr, [r3, #12]
    20fa:	str.w	lr, [r3, #8]
    20fe:	str	r1, [r3, #4]
    2100:	str	r2, [r3, r2]
    2102:	bl	26bc <__malloc_unlock>
    2106:	b.n	2148 <_malloc_r+0x190>
    2108:	cmp	r1, #16
    210a:	bhi.n	2150 <_malloc_r+0x198>
    210c:	bl	26b8 <__malloc_lock>
    2110:	movs	r5, #16
    2112:	movs	r3, #6
    2114:	movs	r0, #2
    2116:	ldr	r7, [pc, #504]	; (2310 <_malloc_r+0x358>)
    2118:	add.w	r3, r7, r3, lsl #2
    211c:	sub.w	r2, r3, #8
    2120:	ldr	r4, [r3, #4]
    2122:	cmp	r4, r2
    2124:	beq.w	23b2 <_malloc_r+0x3fa>
    2128:	ldr	r3, [r4, #4]
    212a:	ldr	r1, [r4, #12]
    212c:	ldr	r5, [r4, #8]
    212e:	bic.w	r3, r3, #3
    2132:	add	r3, r4
    2134:	mov	r0, r6
    2136:	ldr	r2, [r3, #4]
    2138:	str	r1, [r5, #12]
    213a:	orr.w	r2, r2, #1
    213e:	str	r5, [r1, #8]
    2140:	str	r2, [r3, #4]
    2142:	bl	26bc <__malloc_unlock>
    2146:	adds	r4, #8
    2148:	mov	r0, r4
    214a:	add	sp, #12
    214c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2150:	movs	r4, #0
    2152:	movs	r3, #12
    2154:	mov	r0, r4
    2156:	str	r3, [r6, #0]
    2158:	add	sp, #12
    215a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    215e:	movs	r3, #128	; 0x80
    2160:	mov.w	lr, #64	; 0x40
    2164:	movs	r0, #63	; 0x3f
    2166:	b.n	1ffc <_malloc_r+0x44>
    2168:	mov	r0, lr
    216a:	b.n	2028 <_malloc_r+0x70>
    216c:	add	r3, r4
    216e:	ldr	r1, [r4, #12]
    2170:	ldr	r2, [r3, #4]
    2172:	ldr	r5, [r4, #8]
    2174:	orr.w	r2, r2, #1
    2178:	str	r1, [r5, #12]
    217a:	mov	r0, r6
    217c:	str	r5, [r1, #8]
    217e:	str	r2, [r3, #4]
    2180:	bl	26bc <__malloc_unlock>
    2184:	adds	r4, #8
    2186:	mov	r0, r4
    2188:	add	sp, #12
    218a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    218e:	add	r3, r4
    2190:	mov	r0, r6
    2192:	ldr	r2, [r3, #4]
    2194:	orr.w	r2, r2, #1
    2198:	str	r2, [r3, #4]
    219a:	bl	26bc <__malloc_unlock>
    219e:	adds	r4, #8
    21a0:	mov	r0, r4
    21a2:	add	sp, #12
    21a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21a8:	ldr	r4, [r7, #8]
    21aa:	ldr	r3, [r4, #4]
    21ac:	bic.w	r8, r3, #3
    21b0:	cmp	r8, r5
    21b2:	bcc.n	21be <_malloc_r+0x206>
    21b4:	rsb	r3, r5, r8
    21b8:	cmp	r3, #15
    21ba:	bgt.w	22d6 <_malloc_r+0x31e>
    21be:	ldr	r3, [pc, #340]	; (2314 <_malloc_r+0x35c>)
    21c0:	ldr.w	r9, [pc, #352]	; 2324 <_malloc_r+0x36c>
    21c4:	ldr	r2, [r3, #0]
    21c6:	ldr.w	r3, [r9]
    21ca:	adds	r3, #1
    21cc:	add	r2, r5
    21ce:	add.w	sl, r4, r8
    21d2:	beq.w	2496 <_malloc_r+0x4de>
    21d6:	add.w	r2, r2, #4096	; 0x1000
    21da:	adds	r2, #15
    21dc:	bic.w	r2, r2, #4080	; 0xff0
    21e0:	bic.w	r2, r2, #15
    21e4:	mov	r1, r2
    21e6:	mov	r0, r6
    21e8:	str	r2, [sp, #4]
    21ea:	bl	2aa0 <_sbrk_r>
    21ee:	cmp.w	r0, #4294967295
    21f2:	mov	fp, r0
    21f4:	ldr	r2, [sp, #4]
    21f6:	beq.w	24aa <_malloc_r+0x4f2>
    21fa:	cmp	sl, r0
    21fc:	bhi.w	23f8 <_malloc_r+0x440>
    2200:	ldr	r3, [pc, #276]	; (2318 <_malloc_r+0x360>)
    2202:	ldr	r1, [r3, #0]
    2204:	cmp	sl, fp
    2206:	add	r1, r2
    2208:	str	r1, [r3, #0]
    220a:	beq.w	24b4 <_malloc_r+0x4fc>
    220e:	ldr.w	r0, [r9]
    2212:	ldr.w	lr, [pc, #272]	; 2324 <_malloc_r+0x36c>
    2216:	adds	r0, #1
    2218:	ittet	ne
    221a:	rsbne	sl, sl, fp
    221e:	addne	r1, sl
    2220:	streq.w	fp, [lr]
    2224:	strne	r1, [r3, #0]
    2226:	ands.w	r1, fp, #7
    222a:	beq.w	245c <_malloc_r+0x4a4>
    222e:	rsb	r0, r1, #8
    2232:	rsb	r1, r1, #4096	; 0x1000
    2236:	add	fp, r0
    2238:	adds	r1, #8
    223a:	add	r2, fp
    223c:	ubfx	r2, r2, #0, #12
    2240:	rsb	r9, r2, r1
    2244:	mov	r1, r9
    2246:	mov	r0, r6
    2248:	str	r3, [sp, #4]
    224a:	bl	2aa0 <_sbrk_r>
    224e:	adds	r3, r0, #1
    2250:	ldr	r3, [sp, #4]
    2252:	beq.w	24d4 <_malloc_r+0x51c>
    2256:	rsb	r2, fp, r0
    225a:	add	r2, r9
    225c:	orr.w	r2, r2, #1
    2260:	ldr	r1, [r3, #0]
    2262:	str.w	fp, [r7, #8]
    2266:	add	r1, r9
    2268:	cmp	r4, r7
    226a:	str.w	r2, [fp, #4]
    226e:	str	r1, [r3, #0]
    2270:	ldr.w	r9, [pc, #164]	; 2318 <_malloc_r+0x360>
    2274:	beq.n	22a4 <_malloc_r+0x2ec>
    2276:	cmp.w	r8, #15
    227a:	bls.w	2478 <_malloc_r+0x4c0>
    227e:	ldr	r2, [r4, #4]
    2280:	sub.w	r3, r8, #12
    2284:	bic.w	r3, r3, #7
    2288:	adds	r0, r4, r3
    228a:	and.w	r2, r2, #1
    228e:	mov.w	lr, #5
    2292:	orrs	r2, r3
    2294:	cmp	r3, #15
    2296:	str	r2, [r4, #4]
    2298:	str.w	lr, [r0, #4]
    229c:	str.w	lr, [r0, #8]
    22a0:	bhi.w	24dc <_malloc_r+0x524>
    22a4:	ldr	r3, [pc, #116]	; (231c <_malloc_r+0x364>)
    22a6:	ldr	r4, [r7, #8]
    22a8:	ldr	r2, [r3, #0]
    22aa:	cmp	r1, r2
    22ac:	it	hi
    22ae:	strhi	r1, [r3, #0]
    22b0:	ldr	r3, [pc, #108]	; (2320 <_malloc_r+0x368>)
    22b2:	ldr	r2, [r3, #0]
    22b4:	cmp	r1, r2
    22b6:	ldr	r2, [r4, #4]
    22b8:	it	hi
    22ba:	strhi	r1, [r3, #0]
    22bc:	bic.w	r2, r2, #3
    22c0:	cmp	r5, r2
    22c2:	sub.w	r3, r2, r5
    22c6:	bhi.n	22cc <_malloc_r+0x314>
    22c8:	cmp	r3, #15
    22ca:	bgt.n	22d6 <_malloc_r+0x31e>
    22cc:	mov	r0, r6
    22ce:	bl	26bc <__malloc_unlock>
    22d2:	movs	r4, #0
    22d4:	b.n	2148 <_malloc_r+0x190>
    22d6:	adds	r2, r4, r5
    22d8:	orr.w	r3, r3, #1
    22dc:	orr.w	r5, r5, #1
    22e0:	str	r5, [r4, #4]
    22e2:	mov	r0, r6
    22e4:	str	r2, [r7, #8]
    22e6:	str	r3, [r2, #4]
    22e8:	bl	26bc <__malloc_unlock>
    22ec:	adds	r4, #8
    22ee:	mov	r0, r4
    22f0:	add	sp, #12
    22f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22f6:	cmp	r3, #20
    22f8:	bls.n	23de <_malloc_r+0x426>
    22fa:	cmp	r3, #84	; 0x54
    22fc:	bhi.w	2448 <_malloc_r+0x490>
    2300:	lsrs	r0, r5, #12
    2302:	add.w	lr, r0, #111	; 0x6f
    2306:	mov.w	r3, lr, lsl #1
    230a:	adds	r0, #110	; 0x6e
    230c:	b.n	1ffc <_malloc_r+0x44>
    230e:	nop
    2310:	.word	0x20000ba0
    2314:	.word	0x200012c4
    2318:	.word	0x200012c8
    231c:	.word	0x200012c0
    2320:	.word	0x200012bc
    2324:	.word	0x20000fac
    2328:	lsrs	r2, r3, #9
    232a:	cmp	r2, #4
    232c:	bls.n	23ec <_malloc_r+0x434>
    232e:	cmp	r2, #20
    2330:	bhi.w	249a <_malloc_r+0x4e2>
    2334:	add.w	r1, r2, #92	; 0x5c
    2338:	lsls	r1, r1, #1
    233a:	adds	r2, #91	; 0x5b
    233c:	add.w	ip, r7, r1, lsl #2
    2340:	ldr.w	r1, [r7, r1, lsl #2]
    2344:	ldr.w	r8, [pc, #476]	; 2524 <_malloc_r+0x56c>
    2348:	sub.w	ip, ip, #8
    234c:	cmp	ip, r1
    234e:	beq.w	2462 <_malloc_r+0x4aa>
    2352:	ldr	r2, [r1, #4]
    2354:	bic.w	r2, r2, #3
    2358:	cmp	r3, r2
    235a:	bcs.n	2362 <_malloc_r+0x3aa>
    235c:	ldr	r1, [r1, #8]
    235e:	cmp	ip, r1
    2360:	bne.n	2352 <_malloc_r+0x39a>
    2362:	ldr.w	ip, [r1, #12]
    2366:	ldr	r2, [r7, #4]
    2368:	str.w	ip, [r4, #12]
    236c:	str	r1, [r4, #8]
    236e:	str.w	r4, [ip, #8]
    2372:	str	r4, [r1, #12]
    2374:	b.n	2088 <_malloc_r+0xd0>
    2376:	adds	r3, r4, r5
    2378:	orr.w	r7, r2, #1
    237c:	orr.w	r5, r5, #1
    2380:	str	r5, [r4, #4]
    2382:	mov	r0, r6
    2384:	str	r3, [r1, #20]
    2386:	str	r3, [r1, #16]
    2388:	str.w	lr, [r3, #12]
    238c:	str.w	lr, [r3, #8]
    2390:	str	r7, [r3, #4]
    2392:	str	r2, [r3, r2]
    2394:	adds	r4, #8
    2396:	bl	26bc <__malloc_unlock>
    239a:	b.n	2148 <_malloc_r+0x190>
    239c:	ldr	r2, [r1, #4]
    239e:	b.n	2088 <_malloc_r+0xd0>
    23a0:	add.w	r8, r8, #1
    23a4:	tst.w	r8, #3
    23a8:	add.w	ip, ip, #8
    23ac:	bne.w	20ae <_malloc_r+0xf6>
    23b0:	b.n	2414 <_malloc_r+0x45c>
    23b2:	ldr	r4, [r3, #12]
    23b4:	cmp	r3, r4
    23b6:	it	eq
    23b8:	addeq	r0, #2
    23ba:	beq.w	2028 <_malloc_r+0x70>
    23be:	b.n	2128 <_malloc_r+0x170>
    23c0:	add	r3, r1
    23c2:	mov	r4, r1
    23c4:	ldr	r2, [r3, #4]
    23c6:	ldr	r1, [r1, #12]
    23c8:	ldr.w	r5, [r4, #8]!
    23cc:	orr.w	r2, r2, #1
    23d0:	str	r2, [r3, #4]
    23d2:	mov	r0, r6
    23d4:	str	r1, [r5, #12]
    23d6:	str	r5, [r1, #8]
    23d8:	bl	26bc <__malloc_unlock>
    23dc:	b.n	2148 <_malloc_r+0x190>
    23de:	add.w	lr, r3, #92	; 0x5c
    23e2:	add.w	r0, r3, #91	; 0x5b
    23e6:	mov.w	r3, lr, lsl #1
    23ea:	b.n	1ffc <_malloc_r+0x44>
    23ec:	lsrs	r2, r3, #6
    23ee:	add.w	r1, r2, #57	; 0x39
    23f2:	lsls	r1, r1, #1
    23f4:	adds	r2, #56	; 0x38
    23f6:	b.n	233c <_malloc_r+0x384>
    23f8:	cmp	r4, r7
    23fa:	ldr	r3, [pc, #296]	; (2524 <_malloc_r+0x56c>)
    23fc:	beq.w	2200 <_malloc_r+0x248>
    2400:	ldr	r4, [r3, #8]
    2402:	ldr	r2, [r4, #4]
    2404:	bic.w	r2, r2, #3
    2408:	b.n	22c0 <_malloc_r+0x308>
    240a:	ldr.w	r3, [r9], #-8
    240e:	cmp	r9, r3
    2410:	bne.w	2518 <_malloc_r+0x560>
    2414:	tst.w	r0, #3
    2418:	add.w	r0, r0, #4294967295
    241c:	bne.n	240a <_malloc_r+0x452>
    241e:	ldr	r3, [r7, #4]
    2420:	bic.w	r3, r3, r4
    2424:	str	r3, [r7, #4]
    2426:	lsls	r4, r4, #1
    2428:	cmp	r4, r3
    242a:	bhi.w	21a8 <_malloc_r+0x1f0>
    242e:	cmp	r4, #0
    2430:	beq.w	21a8 <_malloc_r+0x1f0>
    2434:	tst	r4, r3
    2436:	mov	r0, r8
    2438:	bne.w	20a6 <_malloc_r+0xee>
    243c:	lsls	r4, r4, #1
    243e:	tst	r4, r3
    2440:	add.w	r0, r0, #4
    2444:	beq.n	243c <_malloc_r+0x484>
    2446:	b.n	20a6 <_malloc_r+0xee>
    2448:	cmp.w	r3, #340	; 0x154
    244c:	bhi.n	2480 <_malloc_r+0x4c8>
    244e:	lsrs	r0, r5, #15
    2450:	add.w	lr, r0, #120	; 0x78
    2454:	mov.w	r3, lr, lsl #1
    2458:	adds	r0, #119	; 0x77
    245a:	b.n	1ffc <_malloc_r+0x44>
    245c:	mov.w	r1, #4096	; 0x1000
    2460:	b.n	223a <_malloc_r+0x282>
    2462:	movs	r1, #1
    2464:	ldr.w	r3, [r8, #4]
    2468:	asrs	r2, r2, #2
    246a:	lsl.w	r2, r1, r2
    246e:	orrs	r2, r3
    2470:	str.w	r2, [r8, #4]
    2474:	mov	r1, ip
    2476:	b.n	2368 <_malloc_r+0x3b0>
    2478:	movs	r3, #1
    247a:	str.w	r3, [fp, #4]
    247e:	b.n	22cc <_malloc_r+0x314>
    2480:	movw	r2, #1364	; 0x554
    2484:	cmp	r3, r2
    2486:	bhi.n	24ca <_malloc_r+0x512>
    2488:	lsrs	r0, r5, #18
    248a:	add.w	lr, r0, #125	; 0x7d
    248e:	mov.w	r3, lr, lsl #1
    2492:	adds	r0, #124	; 0x7c
    2494:	b.n	1ffc <_malloc_r+0x44>
    2496:	adds	r2, #16
    2498:	b.n	21e4 <_malloc_r+0x22c>
    249a:	cmp	r2, #84	; 0x54
    249c:	bhi.n	24ec <_malloc_r+0x534>
    249e:	lsrs	r2, r3, #12
    24a0:	add.w	r1, r2, #111	; 0x6f
    24a4:	lsls	r1, r1, #1
    24a6:	adds	r2, #110	; 0x6e
    24a8:	b.n	233c <_malloc_r+0x384>
    24aa:	ldr	r4, [r7, #8]
    24ac:	ldr	r2, [r4, #4]
    24ae:	bic.w	r2, r2, #3
    24b2:	b.n	22c0 <_malloc_r+0x308>
    24b4:	ubfx	r0, sl, #0, #12
    24b8:	cmp	r0, #0
    24ba:	bne.w	220e <_malloc_r+0x256>
    24be:	add	r2, r8
    24c0:	ldr	r3, [r7, #8]
    24c2:	orr.w	r2, r2, #1
    24c6:	str	r2, [r3, #4]
    24c8:	b.n	22a4 <_malloc_r+0x2ec>
    24ca:	movs	r3, #254	; 0xfe
    24cc:	mov.w	lr, #127	; 0x7f
    24d0:	movs	r0, #126	; 0x7e
    24d2:	b.n	1ffc <_malloc_r+0x44>
    24d4:	movs	r2, #1
    24d6:	mov.w	r9, #0
    24da:	b.n	2260 <_malloc_r+0x2a8>
    24dc:	add.w	r1, r4, #8
    24e0:	mov	r0, r6
    24e2:	bl	2d24 <_free_r>
    24e6:	ldr.w	r1, [r9]
    24ea:	b.n	22a4 <_malloc_r+0x2ec>
    24ec:	cmp.w	r2, #340	; 0x154
    24f0:	bhi.n	24fe <_malloc_r+0x546>
    24f2:	lsrs	r2, r3, #15
    24f4:	add.w	r1, r2, #120	; 0x78
    24f8:	lsls	r1, r1, #1
    24fa:	adds	r2, #119	; 0x77
    24fc:	b.n	233c <_malloc_r+0x384>
    24fe:	movw	r1, #1364	; 0x554
    2502:	cmp	r2, r1
    2504:	bhi.n	2512 <_malloc_r+0x55a>
    2506:	lsrs	r2, r3, #18
    2508:	add.w	r1, r2, #125	; 0x7d
    250c:	lsls	r1, r1, #1
    250e:	adds	r2, #124	; 0x7c
    2510:	b.n	233c <_malloc_r+0x384>
    2512:	movs	r1, #254	; 0xfe
    2514:	movs	r2, #126	; 0x7e
    2516:	b.n	233c <_malloc_r+0x384>
    2518:	ldr	r3, [r7, #4]
    251a:	b.n	2426 <_malloc_r+0x46e>
    251c:	lsrs	r0, r5, #3
    251e:	adds	r3, r0, #1
    2520:	lsls	r3, r3, #1
    2522:	b.n	2116 <_malloc_r+0x15e>
    2524:	.word	0x20000ba0

00002528 <__ascii_mbtowc>:
    2528:	sub	sp, #8
    252a:	cbz	r1, 2540 <__ascii_mbtowc+0x18>
    252c:	cbz	r2, 2546 <__ascii_mbtowc+0x1e>
    252e:	cbz	r3, 254c <__ascii_mbtowc+0x24>
    2530:	ldrb	r3, [r2, #0]
    2532:	str	r3, [r1, #0]
    2534:	ldrb	r2, [r2, #0]
    2536:	adds	r0, r2, #0
    2538:	it	ne
    253a:	movne	r0, #1
    253c:	add	sp, #8
    253e:	bx	lr
    2540:	add	r1, sp, #4
    2542:	cmp	r2, #0
    2544:	bne.n	252e <__ascii_mbtowc+0x6>
    2546:	mov	r0, r2
    2548:	add	sp, #8
    254a:	bx	lr
    254c:	mvn.w	r0, #1
    2550:	b.n	253c <__ascii_mbtowc+0x14>
    2552:	nop

00002554 <memmove>:
    2554:	cmp	r0, r1
    2556:	push	{r4, r5, r6, r7, lr}
    2558:	bls.n	2576 <memmove+0x22>
    255a:	adds	r3, r1, r2
    255c:	cmp	r0, r3
    255e:	bcs.n	2576 <memmove+0x22>
    2560:	adds	r1, r0, r2
    2562:	cmp	r2, #0
    2564:	beq.n	260a <memmove+0xb6>
    2566:	subs	r2, r3, r2
    2568:	ldrb.w	r4, [r3, #-1]!
    256c:	strb.w	r4, [r1, #-1]!
    2570:	cmp	r3, r2
    2572:	bne.n	2568 <memmove+0x14>
    2574:	pop	{r4, r5, r6, r7, pc}
    2576:	cmp	r2, #15
    2578:	bls.n	260c <memmove+0xb8>
    257a:	orr.w	r3, r1, r0
    257e:	lsls	r3, r3, #30
    2580:	bne.n	2610 <memmove+0xbc>
    2582:	add.w	r4, r0, #16
    2586:	add.w	r3, r1, #16
    258a:	mov	r5, r2
    258c:	ldr.w	r6, [r3, #-16]
    2590:	str.w	r6, [r4, #-16]
    2594:	ldr.w	r6, [r3, #-12]
    2598:	str.w	r6, [r4, #-12]
    259c:	ldr.w	r6, [r3, #-8]
    25a0:	str.w	r6, [r4, #-8]
    25a4:	subs	r5, #16
    25a6:	ldr.w	r6, [r3, #-4]
    25aa:	str.w	r6, [r4, #-4]
    25ae:	cmp	r5, #15
    25b0:	add.w	r3, r3, #16
    25b4:	add.w	r4, r4, #16
    25b8:	bhi.n	258c <memmove+0x38>
    25ba:	sub.w	r3, r2, #16
    25be:	bic.w	r3, r3, #15
    25c2:	and.w	lr, r2, #15
    25c6:	adds	r3, #16
    25c8:	cmp.w	lr, #3
    25cc:	add	r1, r3
    25ce:	add	r3, r0
    25d0:	bls.n	2616 <memmove+0xc2>
    25d2:	subs	r6, r3, #4
    25d4:	mov	r5, r1
    25d6:	mov	r4, lr
    25d8:	subs	r4, #4
    25da:	ldr.w	r7, [r5], #4
    25de:	str.w	r7, [r6, #4]!
    25e2:	cmp	r4, #3
    25e4:	bhi.n	25d8 <memmove+0x84>
    25e6:	sub.w	r4, lr, #4
    25ea:	bic.w	r4, r4, #3
    25ee:	adds	r4, #4
    25f0:	add	r3, r4
    25f2:	add	r1, r4
    25f4:	and.w	r2, r2, #3
    25f8:	cbz	r2, 2614 <memmove+0xc0>
    25fa:	subs	r3, #1
    25fc:	add	r2, r1
    25fe:	ldrb.w	r4, [r1], #1
    2602:	strb.w	r4, [r3, #1]!
    2606:	cmp	r2, r1
    2608:	bne.n	25fe <memmove+0xaa>
    260a:	pop	{r4, r5, r6, r7, pc}
    260c:	mov	r3, r0
    260e:	b.n	25f8 <memmove+0xa4>
    2610:	mov	r3, r0
    2612:	b.n	25fa <memmove+0xa6>
    2614:	pop	{r4, r5, r6, r7, pc}
    2616:	mov	r2, lr
    2618:	b.n	25f8 <memmove+0xa4>
    261a:	nop

0000261c <memset>:
    261c:	push	{r4, r5, r6}
    261e:	lsls	r4, r0, #30
    2620:	beq.n	26b0 <memset+0x94>
    2622:	subs	r4, r2, #1
    2624:	cmp	r2, #0
    2626:	beq.n	26ac <memset+0x90>
    2628:	uxtb	r5, r1
    262a:	mov	r3, r0
    262c:	b.n	2634 <memset+0x18>
    262e:	subs	r2, r4, #1
    2630:	cbz	r4, 26ac <memset+0x90>
    2632:	mov	r4, r2
    2634:	strb.w	r5, [r3], #1
    2638:	lsls	r2, r3, #30
    263a:	bne.n	262e <memset+0x12>
    263c:	cmp	r4, #3
    263e:	bls.n	269e <memset+0x82>
    2640:	uxtb	r5, r1
    2642:	orr.w	r5, r5, r5, lsl #8
    2646:	cmp	r4, #15
    2648:	orr.w	r5, r5, r5, lsl #16
    264c:	bls.n	2682 <memset+0x66>
    264e:	add.w	r2, r3, #16
    2652:	mov	r6, r4
    2654:	subs	r6, #16
    2656:	cmp	r6, #15
    2658:	str.w	r5, [r2, #-16]
    265c:	str.w	r5, [r2, #-12]
    2660:	str.w	r5, [r2, #-8]
    2664:	str.w	r5, [r2, #-4]
    2668:	add.w	r2, r2, #16
    266c:	bhi.n	2654 <memset+0x38>
    266e:	sub.w	r2, r4, #16
    2672:	bic.w	r2, r2, #15
    2676:	and.w	r4, r4, #15
    267a:	adds	r2, #16
    267c:	cmp	r4, #3
    267e:	add	r3, r2
    2680:	bls.n	269e <memset+0x82>
    2682:	mov	r6, r3
    2684:	mov	r2, r4
    2686:	subs	r2, #4
    2688:	cmp	r2, #3
    268a:	str.w	r5, [r6], #4
    268e:	bhi.n	2686 <memset+0x6a>
    2690:	subs	r2, r4, #4
    2692:	bic.w	r2, r2, #3
    2696:	adds	r2, #4
    2698:	add	r3, r2
    269a:	and.w	r4, r4, #3
    269e:	cbz	r4, 26ac <memset+0x90>
    26a0:	uxtb	r1, r1
    26a2:	add	r4, r3
    26a4:	strb.w	r1, [r3], #1
    26a8:	cmp	r3, r4
    26aa:	bne.n	26a4 <memset+0x88>
    26ac:	pop	{r4, r5, r6}
    26ae:	bx	lr
    26b0:	mov	r4, r2
    26b2:	mov	r3, r0
    26b4:	b.n	263c <memset+0x20>
    26b6:	nop

000026b8 <__malloc_lock>:
    26b8:	bx	lr
    26ba:	nop

000026bc <__malloc_unlock>:
    26bc:	bx	lr
    26be:	nop

000026c0 <_realloc_r>:
    26c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26c4:	mov	r7, r2
    26c6:	sub	sp, #12
    26c8:	cmp	r1, #0
    26ca:	beq.w	2850 <_realloc_r+0x190>
    26ce:	mov	r6, r1
    26d0:	mov	r9, r0
    26d2:	add.w	r5, r7, #11
    26d6:	bl	26b8 <__malloc_lock>
    26da:	ldr.w	lr, [r6, #-4]
    26de:	cmp	r5, #22
    26e0:	bic.w	r4, lr, #3
    26e4:	sub.w	r8, r6, #8
    26e8:	bhi.n	276c <_realloc_r+0xac>
    26ea:	movs	r2, #16
    26ec:	mov	r5, r2
    26ee:	cmp	r7, r5
    26f0:	bhi.n	2776 <_realloc_r+0xb6>
    26f2:	cmp	r4, r2
    26f4:	bge.n	27e2 <_realloc_r+0x122>
    26f6:	ldr	r3, [pc, #804]	; (2a1c <_realloc_r+0x35c>)
    26f8:	ldr	r1, [r3, #8]
    26fa:	add.w	r0, r8, r4
    26fe:	cmp	r0, r1
    2700:	ldr	r1, [r0, #4]
    2702:	beq.w	28b8 <_realloc_r+0x1f8>
    2706:	bic.w	r3, r1, #1
    270a:	add	r3, r0
    270c:	ldr	r3, [r3, #4]
    270e:	lsls	r3, r3, #31
    2710:	bpl.n	280e <_realloc_r+0x14e>
    2712:	tst.w	lr, #1
    2716:	beq.n	2784 <_realloc_r+0xc4>
    2718:	mov	r1, r7
    271a:	mov	r0, r9
    271c:	bl	1fb8 <_malloc_r>
    2720:	mov	r7, r0
    2722:	cbz	r0, 275e <_realloc_r+0x9e>
    2724:	ldr.w	r3, [r6, #-4]
    2728:	bic.w	r3, r3, #1
    272c:	add	r3, r8
    272e:	sub.w	r2, r0, #8
    2732:	cmp	r2, r3
    2734:	beq.w	29c0 <_realloc_r+0x300>
    2738:	subs	r2, r4, #4
    273a:	cmp	r2, #36	; 0x24
    273c:	bhi.w	29a2 <_realloc_r+0x2e2>
    2740:	cmp	r2, #19
    2742:	bhi.w	294e <_realloc_r+0x28e>
    2746:	mov	r3, r0
    2748:	mov	r2, r6
    274a:	ldr	r1, [r2, #0]
    274c:	str	r1, [r3, #0]
    274e:	ldr	r1, [r2, #4]
    2750:	str	r1, [r3, #4]
    2752:	ldr	r2, [r2, #8]
    2754:	str	r2, [r3, #8]
    2756:	mov	r1, r6
    2758:	mov	r0, r9
    275a:	bl	2d24 <_free_r>
    275e:	mov	r0, r9
    2760:	bl	26bc <__malloc_unlock>
    2764:	mov	r0, r7
    2766:	add	sp, #12
    2768:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    276c:	bic.w	r5, r5, #7
    2770:	cmp	r5, #0
    2772:	mov	r2, r5
    2774:	bge.n	26ee <_realloc_r+0x2e>
    2776:	movs	r3, #12
    2778:	movs	r0, #0
    277a:	str.w	r3, [r9]
    277e:	add	sp, #12
    2780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2784:	ldr.w	r3, [r6, #-8]
    2788:	rsb	sl, r3, r8
    278c:	ldr.w	r3, [sl, #4]
    2790:	bic.w	ip, r3, #3
    2794:	add.w	r3, r4, ip
    2798:	cmp	r3, r2
    279a:	blt.n	2718 <_realloc_r+0x58>
    279c:	mov	r7, sl
    279e:	ldr.w	r1, [sl, #12]
    27a2:	ldr.w	r0, [r7, #8]!
    27a6:	subs	r2, r4, #4
    27a8:	cmp	r2, #36	; 0x24
    27aa:	str	r1, [r0, #12]
    27ac:	str	r0, [r1, #8]
    27ae:	bhi.w	29e0 <_realloc_r+0x320>
    27b2:	cmp	r2, #19
    27b4:	bls.w	29dc <_realloc_r+0x31c>
    27b8:	ldr	r1, [r6, #0]
    27ba:	str.w	r1, [sl, #8]
    27be:	ldr	r1, [r6, #4]
    27c0:	str.w	r1, [sl, #12]
    27c4:	cmp	r2, #27
    27c6:	bhi.w	2a20 <_realloc_r+0x360>
    27ca:	adds	r6, #8
    27cc:	add.w	r2, sl, #16
    27d0:	ldr	r1, [r6, #0]
    27d2:	str	r1, [r2, #0]
    27d4:	ldr	r1, [r6, #4]
    27d6:	str	r1, [r2, #4]
    27d8:	ldr	r1, [r6, #8]
    27da:	str	r1, [r2, #8]
    27dc:	mov	r6, r7
    27de:	mov	r4, r3
    27e0:	mov	r8, sl
    27e2:	subs	r3, r4, r5
    27e4:	cmp	r3, #15
    27e6:	bhi.n	2824 <_realloc_r+0x164>
    27e8:	ldr.w	r3, [r8, #4]
    27ec:	and.w	r3, r3, #1
    27f0:	orrs	r3, r4
    27f2:	add	r4, r8
    27f4:	str.w	r3, [r8, #4]
    27f8:	ldr	r3, [r4, #4]
    27fa:	orr.w	r3, r3, #1
    27fe:	str	r3, [r4, #4]
    2800:	mov	r0, r9
    2802:	bl	26bc <__malloc_unlock>
    2806:	mov	r0, r6
    2808:	add	sp, #12
    280a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    280e:	bic.w	r1, r1, #3
    2812:	add	r1, r4
    2814:	cmp	r1, r2
    2816:	blt.n	285c <_realloc_r+0x19c>
    2818:	ldr	r3, [r0, #12]
    281a:	ldr	r2, [r0, #8]
    281c:	mov	r4, r1
    281e:	str	r3, [r2, #12]
    2820:	str	r2, [r3, #8]
    2822:	b.n	27e2 <_realloc_r+0x122>
    2824:	ldr.w	r2, [r8, #4]
    2828:	add.w	r1, r8, r5
    282c:	and.w	r2, r2, #1
    2830:	orrs	r5, r2
    2832:	orr.w	r2, r3, #1
    2836:	add	r3, r1
    2838:	str.w	r5, [r8, #4]
    283c:	str	r2, [r1, #4]
    283e:	ldr	r2, [r3, #4]
    2840:	orr.w	r2, r2, #1
    2844:	adds	r1, #8
    2846:	str	r2, [r3, #4]
    2848:	mov	r0, r9
    284a:	bl	2d24 <_free_r>
    284e:	b.n	2800 <_realloc_r+0x140>
    2850:	mov	r1, r2
    2852:	add	sp, #12
    2854:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2858:	b.w	1fb8 <_malloc_r>
    285c:	tst.w	lr, #1
    2860:	bne.w	2718 <_realloc_r+0x58>
    2864:	ldr.w	r3, [r6, #-8]
    2868:	rsb	sl, r3, r8
    286c:	ldr.w	r3, [sl, #4]
    2870:	bic.w	ip, r3, #3
    2874:	add.w	lr, r1, ip
    2878:	cmp	lr, r2
    287a:	blt.n	2794 <_realloc_r+0xd4>
    287c:	ldr	r3, [r0, #12]
    287e:	ldr	r2, [r0, #8]
    2880:	mov	r7, sl
    2882:	str	r3, [r2, #12]
    2884:	str	r2, [r3, #8]
    2886:	ldr.w	r1, [r7, #8]!
    288a:	ldr.w	r3, [sl, #12]
    288e:	str	r3, [r1, #12]
    2890:	subs	r2, r4, #4
    2892:	cmp	r2, #36	; 0x24
    2894:	str	r1, [r3, #8]
    2896:	bhi.w	29cc <_realloc_r+0x30c>
    289a:	cmp	r2, #19
    289c:	bls.n	2964 <_realloc_r+0x2a4>
    289e:	ldr	r3, [r6, #0]
    28a0:	str.w	r3, [sl, #8]
    28a4:	ldr	r3, [r6, #4]
    28a6:	str.w	r3, [sl, #12]
    28aa:	cmp	r2, #27
    28ac:	bhi.w	29f0 <_realloc_r+0x330>
    28b0:	adds	r6, #8
    28b2:	add.w	r3, sl, #16
    28b6:	b.n	2966 <_realloc_r+0x2a6>
    28b8:	bic.w	fp, r1, #3
    28bc:	add	fp, r4
    28be:	add.w	r0, r5, #16
    28c2:	cmp	fp, r0
    28c4:	bge.n	297a <_realloc_r+0x2ba>
    28c6:	tst.w	lr, #1
    28ca:	bne.w	2718 <_realloc_r+0x58>
    28ce:	ldr.w	r1, [r6, #-8]
    28d2:	rsb	sl, r1, r8
    28d6:	ldr.w	r1, [sl, #4]
    28da:	bic.w	ip, r1, #3
    28de:	add	fp, ip
    28e0:	cmp	r0, fp
    28e2:	bgt.w	2794 <_realloc_r+0xd4>
    28e6:	mov	r7, sl
    28e8:	ldr.w	r1, [sl, #12]
    28ec:	ldr.w	r0, [r7, #8]!
    28f0:	subs	r2, r4, #4
    28f2:	cmp	r2, #36	; 0x24
    28f4:	str	r1, [r0, #12]
    28f6:	str	r0, [r1, #8]
    28f8:	bhi.w	2a64 <_realloc_r+0x3a4>
    28fc:	cmp	r2, #19
    28fe:	bls.w	2a4c <_realloc_r+0x38c>
    2902:	ldr	r1, [r6, #0]
    2904:	str.w	r1, [sl, #8]
    2908:	ldr	r1, [r6, #4]
    290a:	str.w	r1, [sl, #12]
    290e:	cmp	r2, #27
    2910:	bhi.w	2a72 <_realloc_r+0x3b2>
    2914:	adds	r6, #8
    2916:	add.w	r2, sl, #16
    291a:	ldr	r1, [r6, #0]
    291c:	str	r1, [r2, #0]
    291e:	ldr	r1, [r6, #4]
    2920:	str	r1, [r2, #4]
    2922:	ldr	r1, [r6, #8]
    2924:	str	r1, [r2, #8]
    2926:	add.w	r1, sl, r5
    292a:	rsb	r2, r5, fp
    292e:	orr.w	r2, r2, #1
    2932:	str	r1, [r3, #8]
    2934:	str	r2, [r1, #4]
    2936:	ldr.w	r3, [sl, #4]
    293a:	and.w	r3, r3, #1
    293e:	orrs	r5, r3
    2940:	mov	r0, r9
    2942:	str.w	r5, [sl, #4]
    2946:	bl	26bc <__malloc_unlock>
    294a:	mov	r0, r7
    294c:	b.n	2808 <_realloc_r+0x148>
    294e:	ldr	r3, [r6, #0]
    2950:	str	r3, [r0, #0]
    2952:	ldr	r3, [r6, #4]
    2954:	str	r3, [r0, #4]
    2956:	cmp	r2, #27
    2958:	bhi.n	29aa <_realloc_r+0x2ea>
    295a:	add.w	r3, r0, #8
    295e:	add.w	r2, r6, #8
    2962:	b.n	274a <_realloc_r+0x8a>
    2964:	mov	r3, r7
    2966:	ldr	r2, [r6, #0]
    2968:	str	r2, [r3, #0]
    296a:	ldr	r2, [r6, #4]
    296c:	str	r2, [r3, #4]
    296e:	ldr	r2, [r6, #8]
    2970:	str	r2, [r3, #8]
    2972:	mov	r6, r7
    2974:	mov	r4, lr
    2976:	mov	r8, sl
    2978:	b.n	27e2 <_realloc_r+0x122>
    297a:	add.w	r1, r8, r5
    297e:	rsb	fp, r5, fp
    2982:	orr.w	r2, fp, #1
    2986:	str	r1, [r3, #8]
    2988:	str	r2, [r1, #4]
    298a:	ldr.w	r3, [r6, #-4]
    298e:	and.w	r3, r3, #1
    2992:	orrs	r5, r3
    2994:	mov	r0, r9
    2996:	str.w	r5, [r6, #-4]
    299a:	bl	26bc <__malloc_unlock>
    299e:	mov	r0, r6
    29a0:	b.n	2808 <_realloc_r+0x148>
    29a2:	mov	r1, r6
    29a4:	bl	2554 <memmove>
    29a8:	b.n	2756 <_realloc_r+0x96>
    29aa:	ldr	r3, [r6, #8]
    29ac:	str	r3, [r0, #8]
    29ae:	ldr	r3, [r6, #12]
    29b0:	str	r3, [r0, #12]
    29b2:	cmp	r2, #36	; 0x24
    29b4:	beq.n	2a08 <_realloc_r+0x348>
    29b6:	add.w	r3, r0, #16
    29ba:	add.w	r2, r6, #16
    29be:	b.n	274a <_realloc_r+0x8a>
    29c0:	ldr.w	r3, [r0, #-4]
    29c4:	bic.w	r3, r3, #3
    29c8:	add	r4, r3
    29ca:	b.n	27e2 <_realloc_r+0x122>
    29cc:	mov	r1, r6
    29ce:	mov	r0, r7
    29d0:	mov	r4, lr
    29d2:	mov	r8, sl
    29d4:	bl	2554 <memmove>
    29d8:	mov	r6, r7
    29da:	b.n	27e2 <_realloc_r+0x122>
    29dc:	mov	r2, r7
    29de:	b.n	27d0 <_realloc_r+0x110>
    29e0:	mov	r1, r6
    29e2:	mov	r0, r7
    29e4:	mov	r4, r3
    29e6:	mov	r8, sl
    29e8:	bl	2554 <memmove>
    29ec:	mov	r6, r7
    29ee:	b.n	27e2 <_realloc_r+0x122>
    29f0:	ldr	r3, [r6, #8]
    29f2:	str.w	r3, [sl, #16]
    29f6:	ldr	r3, [r6, #12]
    29f8:	str.w	r3, [sl, #20]
    29fc:	cmp	r2, #36	; 0x24
    29fe:	beq.n	2a38 <_realloc_r+0x378>
    2a00:	adds	r6, #16
    2a02:	add.w	r3, sl, #24
    2a06:	b.n	2966 <_realloc_r+0x2a6>
    2a08:	ldr	r3, [r6, #16]
    2a0a:	str	r3, [r0, #16]
    2a0c:	ldr	r3, [r6, #20]
    2a0e:	str	r3, [r0, #20]
    2a10:	add.w	r2, r6, #24
    2a14:	add.w	r3, r0, #24
    2a18:	b.n	274a <_realloc_r+0x8a>
    2a1a:	nop
    2a1c:	.word	0x20000ba0
    2a20:	ldr	r1, [r6, #8]
    2a22:	str.w	r1, [sl, #16]
    2a26:	ldr	r1, [r6, #12]
    2a28:	str.w	r1, [sl, #20]
    2a2c:	cmp	r2, #36	; 0x24
    2a2e:	beq.n	2a50 <_realloc_r+0x390>
    2a30:	adds	r6, #16
    2a32:	add.w	r2, sl, #24
    2a36:	b.n	27d0 <_realloc_r+0x110>
    2a38:	ldr	r3, [r6, #16]
    2a3a:	str.w	r3, [sl, #24]
    2a3e:	ldr	r3, [r6, #20]
    2a40:	str.w	r3, [sl, #28]
    2a44:	adds	r6, #24
    2a46:	add.w	r3, sl, #32
    2a4a:	b.n	2966 <_realloc_r+0x2a6>
    2a4c:	mov	r2, r7
    2a4e:	b.n	291a <_realloc_r+0x25a>
    2a50:	ldr	r2, [r6, #16]
    2a52:	str.w	r2, [sl, #24]
    2a56:	ldr	r2, [r6, #20]
    2a58:	str.w	r2, [sl, #28]
    2a5c:	adds	r6, #24
    2a5e:	add.w	r2, sl, #32
    2a62:	b.n	27d0 <_realloc_r+0x110>
    2a64:	mov	r1, r6
    2a66:	mov	r0, r7
    2a68:	str	r3, [sp, #4]
    2a6a:	bl	2554 <memmove>
    2a6e:	ldr	r3, [sp, #4]
    2a70:	b.n	2926 <_realloc_r+0x266>
    2a72:	ldr	r1, [r6, #8]
    2a74:	str.w	r1, [sl, #16]
    2a78:	ldr	r1, [r6, #12]
    2a7a:	str.w	r1, [sl, #20]
    2a7e:	cmp	r2, #36	; 0x24
    2a80:	beq.n	2a8a <_realloc_r+0x3ca>
    2a82:	adds	r6, #16
    2a84:	add.w	r2, sl, #24
    2a88:	b.n	291a <_realloc_r+0x25a>
    2a8a:	ldr	r2, [r6, #16]
    2a8c:	str.w	r2, [sl, #24]
    2a90:	ldr	r2, [r6, #20]
    2a92:	str.w	r2, [sl, #28]
    2a96:	adds	r6, #24
    2a98:	add.w	r2, sl, #32
    2a9c:	b.n	291a <_realloc_r+0x25a>
    2a9e:	nop

00002aa0 <_sbrk_r>:
    2aa0:	push	{r3, r4, r5, lr}
    2aa2:	ldr	r4, [pc, #28]	; (2ac0 <_sbrk_r+0x20>)
    2aa4:	movs	r3, #0
    2aa6:	mov	r5, r0
    2aa8:	mov	r0, r1
    2aaa:	str	r3, [r4, #0]
    2aac:	bl	1bfc <_sbrk>
    2ab0:	adds	r3, r0, #1
    2ab2:	beq.n	2ab6 <_sbrk_r+0x16>
    2ab4:	pop	{r3, r4, r5, pc}
    2ab6:	ldr	r3, [r4, #0]
    2ab8:	cmp	r3, #0
    2aba:	beq.n	2ab4 <_sbrk_r+0x14>
    2abc:	str	r3, [r5, #0]
    2abe:	pop	{r3, r4, r5, pc}
    2ac0:	.word	0x200036c0
	...

00002b00 <strlen>:
    2b00:	pld	[r0]
    2b04:	strd	r4, r5, [sp, #-8]!
    2b08:	bic.w	r1, r0, #7
    2b0c:	mvn.w	ip, #0
    2b10:	ands.w	r4, r0, #7
    2b14:	pld	[r1, #32]
    2b18:	bne.w	2bae <strlen+0xae>
    2b1c:	mov.w	r4, #0
    2b20:	mvn.w	r0, #7
    2b24:	ldrd	r2, r3, [r1]
    2b28:	pld	[r1, #64]	; 0x40
    2b2c:	add.w	r0, r0, #8
    2b30:	uadd8	r2, r2, ip
    2b34:	sel	r2, r4, ip
    2b38:	uadd8	r3, r3, ip
    2b3c:	sel	r3, r2, ip
    2b40:	cbnz	r3, 2b96 <strlen+0x96>
    2b42:	ldrd	r2, r3, [r1, #8]
    2b46:	uadd8	r2, r2, ip
    2b4a:	add.w	r0, r0, #8
    2b4e:	sel	r2, r4, ip
    2b52:	uadd8	r3, r3, ip
    2b56:	sel	r3, r2, ip
    2b5a:	cbnz	r3, 2b96 <strlen+0x96>
    2b5c:	ldrd	r2, r3, [r1, #16]
    2b60:	uadd8	r2, r2, ip
    2b64:	add.w	r0, r0, #8
    2b68:	sel	r2, r4, ip
    2b6c:	uadd8	r3, r3, ip
    2b70:	sel	r3, r2, ip
    2b74:	cbnz	r3, 2b96 <strlen+0x96>
    2b76:	ldrd	r2, r3, [r1, #24]
    2b7a:	add.w	r1, r1, #32
    2b7e:	uadd8	r2, r2, ip
    2b82:	add.w	r0, r0, #8
    2b86:	sel	r2, r4, ip
    2b8a:	uadd8	r3, r3, ip
    2b8e:	sel	r3, r2, ip
    2b92:	cmp	r3, #0
    2b94:	beq.n	2b24 <strlen+0x24>
    2b96:	cmp	r2, #0
    2b98:	itt	eq
    2b9a:	addeq	r0, #4
    2b9c:	moveq	r2, r3
    2b9e:	rev	r2, r2
    2ba0:	clz	r2, r2
    2ba4:	ldrd	r4, r5, [sp], #8
    2ba8:	add.w	r0, r0, r2, lsr #3
    2bac:	bx	lr
    2bae:	ldrd	r2, r3, [r1]
    2bb2:	and.w	r5, r4, #3
    2bb6:	rsb	r0, r4, #0
    2bba:	mov.w	r5, r5, lsl #3
    2bbe:	tst.w	r4, #4
    2bc2:	pld	[r1, #64]	; 0x40
    2bc6:	lsl.w	r5, ip, r5
    2bca:	orn	r2, r2, r5
    2bce:	itt	ne
    2bd0:	ornne	r3, r3, r5
    2bd4:	movne	r2, ip
    2bd6:	mov.w	r4, #0
    2bda:	b.n	2b30 <strlen+0x30>

00002bdc <_vdprintf_r>:
    2bdc:	push	{r4, r5, r6, r7, lr}
    2bde:	sub.w	sp, sp, #532	; 0x214
    2be2:	add	r5, sp, #16
    2be4:	str	r3, [sp, #0]
    2be6:	mov	r7, r1
    2be8:	mov	r3, r2
    2bea:	mov.w	r4, #512	; 0x200
    2bee:	add	r2, sp, #12
    2bf0:	mov	r1, r5
    2bf2:	str	r4, [sp, #12]
    2bf4:	mov	r6, r0
    2bf6:	bl	35d4 <_vasnprintf_r>
    2bfa:	cbz	r0, 2c20 <_vdprintf_r+0x44>
    2bfc:	mov	r4, r0
    2bfe:	mov	r2, r0
    2c00:	mov	r1, r7
    2c02:	ldr	r3, [sp, #12]
    2c04:	mov	r0, r6
    2c06:	bl	2c5c <_write_r>
    2c0a:	cmp	r4, r5
    2c0c:	str	r0, [sp, #12]
    2c0e:	beq.n	2c1a <_vdprintf_r+0x3e>
    2c10:	mov	r0, r6
    2c12:	mov	r1, r4
    2c14:	bl	2d24 <_free_r>
    2c18:	ldr	r0, [sp, #12]
    2c1a:	add.w	sp, sp, #532	; 0x214
    2c1e:	pop	{r4, r5, r6, r7, pc}
    2c20:	mov.w	r0, #4294967295
    2c24:	b.n	2c1a <_vdprintf_r+0x3e>
    2c26:	nop

00002c28 <vdprintf>:
    2c28:	push	{r4}
    2c2a:	ldr	r4, [pc, #16]	; (2c3c <vdprintf+0x14>)
    2c2c:	mov	r3, r2
    2c2e:	mov	r2, r1
    2c30:	mov	r1, r0
    2c32:	ldr	r0, [r4, #0]
    2c34:	ldr.w	r4, [sp], #4
    2c38:	b.w	2bdc <_vdprintf_r>
    2c3c:	.word	0x20000a30

00002c40 <__ascii_wctomb>:
    2c40:	cbz	r1, 2c4c <__ascii_wctomb+0xc>
    2c42:	cmp	r2, #255	; 0xff
    2c44:	bhi.n	2c50 <__ascii_wctomb+0x10>
    2c46:	strb	r2, [r1, #0]
    2c48:	movs	r0, #1
    2c4a:	bx	lr
    2c4c:	mov	r0, r1
    2c4e:	bx	lr
    2c50:	movs	r3, #138	; 0x8a
    2c52:	str	r3, [r0, #0]
    2c54:	mov.w	r0, #4294967295
    2c58:	bx	lr
    2c5a:	nop

00002c5c <_write_r>:
    2c5c:	push	{r4, r5, r6, lr}
    2c5e:	mov	r5, r1
    2c60:	ldr	r4, [pc, #32]	; (2c84 <_write_r+0x28>)
    2c62:	mov	r1, r2
    2c64:	mov	r6, r0
    2c66:	mov	r2, r3
    2c68:	mov	r0, r5
    2c6a:	movs	r3, #0
    2c6c:	str	r3, [r4, #0]
    2c6e:	bl	19ec <_write>
    2c72:	adds	r3, r0, #1
    2c74:	beq.n	2c78 <_write_r+0x1c>
    2c76:	pop	{r4, r5, r6, pc}
    2c78:	ldr	r3, [r4, #0]
    2c7a:	cmp	r3, #0
    2c7c:	beq.n	2c76 <_write_r+0x1a>
    2c7e:	str	r3, [r6, #0]
    2c80:	pop	{r4, r5, r6, pc}
    2c82:	nop
    2c84:	.word	0x200036c0

00002c88 <_malloc_trim_r>:
    2c88:	push	{r3, r4, r5, r6, r7, lr}
    2c8a:	ldr	r7, [pc, #140]	; (2d18 <_malloc_trim_r+0x90>)
    2c8c:	mov	r4, r1
    2c8e:	mov	r6, r0
    2c90:	bl	26b8 <__malloc_lock>
    2c94:	ldr	r3, [r7, #8]
    2c96:	ldr	r5, [r3, #4]
    2c98:	bic.w	r5, r5, #3
    2c9c:	subs	r1, r5, r4
    2c9e:	addw	r1, r1, #4079	; 0xfef
    2ca2:	bic.w	r1, r1, #4080	; 0xff0
    2ca6:	bic.w	r1, r1, #15
    2caa:	sub.w	r4, r1, #4096	; 0x1000
    2cae:	cmp.w	r4, #4096	; 0x1000
    2cb2:	blt.n	2cc4 <_malloc_trim_r+0x3c>
    2cb4:	movs	r1, #0
    2cb6:	mov	r0, r6
    2cb8:	bl	2aa0 <_sbrk_r>
    2cbc:	ldr	r3, [r7, #8]
    2cbe:	add	r3, r5
    2cc0:	cmp	r0, r3
    2cc2:	beq.n	2cce <_malloc_trim_r+0x46>
    2cc4:	mov	r0, r6
    2cc6:	bl	26bc <__malloc_unlock>
    2cca:	movs	r0, #0
    2ccc:	pop	{r3, r4, r5, r6, r7, pc}
    2cce:	negs	r1, r4
    2cd0:	mov	r0, r6
    2cd2:	bl	2aa0 <_sbrk_r>
    2cd6:	adds	r0, #1
    2cd8:	beq.n	2cf6 <_malloc_trim_r+0x6e>
    2cda:	ldr	r3, [pc, #64]	; (2d1c <_malloc_trim_r+0x94>)
    2cdc:	ldr	r2, [r7, #8]
    2cde:	ldr	r1, [r3, #0]
    2ce0:	subs	r5, r5, r4
    2ce2:	orr.w	r5, r5, #1
    2ce6:	mov	r0, r6
    2ce8:	subs	r1, r1, r4
    2cea:	str	r5, [r2, #4]
    2cec:	str	r1, [r3, #0]
    2cee:	bl	26bc <__malloc_unlock>
    2cf2:	movs	r0, #1
    2cf4:	pop	{r3, r4, r5, r6, r7, pc}
    2cf6:	movs	r1, #0
    2cf8:	mov	r0, r6
    2cfa:	bl	2aa0 <_sbrk_r>
    2cfe:	ldr	r2, [r7, #8]
    2d00:	subs	r3, r0, r2
    2d02:	cmp	r3, #15
    2d04:	ble.n	2cc4 <_malloc_trim_r+0x3c>
    2d06:	ldr	r4, [pc, #24]	; (2d20 <_malloc_trim_r+0x98>)
    2d08:	ldr	r1, [pc, #16]	; (2d1c <_malloc_trim_r+0x94>)
    2d0a:	ldr	r4, [r4, #0]
    2d0c:	orr.w	r3, r3, #1
    2d10:	subs	r0, r0, r4
    2d12:	str	r3, [r2, #4]
    2d14:	str	r0, [r1, #0]
    2d16:	b.n	2cc4 <_malloc_trim_r+0x3c>
    2d18:	.word	0x20000ba0
    2d1c:	.word	0x200012c8
    2d20:	.word	0x20000fac

00002d24 <_free_r>:
    2d24:	cmp	r1, #0
    2d26:	beq.n	2db4 <_free_r+0x90>
    2d28:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d2c:	mov	r5, r1
    2d2e:	mov	r8, r0
    2d30:	bl	26b8 <__malloc_lock>
    2d34:	ldr.w	r7, [r5, #-4]
    2d38:	ldr	r1, [pc, #424]	; (2ee4 <_free_r+0x1c0>)
    2d3a:	bic.w	r3, r7, #1
    2d3e:	sub.w	r4, r5, #8
    2d42:	adds	r2, r4, r3
    2d44:	ldr	r6, [r1, #8]
    2d46:	ldr	r0, [r2, #4]
    2d48:	cmp	r2, r6
    2d4a:	bic.w	r0, r0, #3
    2d4e:	beq.n	2e16 <_free_r+0xf2>
    2d50:	lsls	r6, r7, #31
    2d52:	str	r0, [r2, #4]
    2d54:	bmi.n	2d6e <_free_r+0x4a>
    2d56:	ldr.w	r7, [r5, #-8]
    2d5a:	subs	r4, r4, r7
    2d5c:	add.w	lr, r1, #8
    2d60:	ldr	r5, [r4, #8]
    2d62:	cmp	r5, lr
    2d64:	add	r3, r7
    2d66:	beq.n	2e48 <_free_r+0x124>
    2d68:	ldr	r7, [r4, #12]
    2d6a:	str	r7, [r5, #12]
    2d6c:	str	r5, [r7, #8]
    2d6e:	adds	r5, r2, r0
    2d70:	ldr	r5, [r5, #4]
    2d72:	lsls	r5, r5, #31
    2d74:	bpl.n	2dfc <_free_r+0xd8>
    2d76:	orr.w	r2, r3, #1
    2d7a:	str	r2, [r4, #4]
    2d7c:	str	r3, [r4, r3]
    2d7e:	cmp.w	r3, #512	; 0x200
    2d82:	bcs.n	2db6 <_free_r+0x92>
    2d84:	lsrs	r3, r3, #3
    2d86:	adds	r2, r3, #1
    2d88:	ldr	r5, [r1, #4]
    2d8a:	ldr.w	r7, [r1, r2, lsl #3]
    2d8e:	str	r7, [r4, #8]
    2d90:	movs	r0, #1
    2d92:	asrs	r3, r3, #2
    2d94:	lsl.w	r3, r0, r3
    2d98:	add.w	r0, r1, r2, lsl #3
    2d9c:	orrs	r5, r3
    2d9e:	subs	r0, #8
    2da0:	str	r0, [r4, #12]
    2da2:	str	r5, [r1, #4]
    2da4:	str.w	r4, [r1, r2, lsl #3]
    2da8:	str	r4, [r7, #12]
    2daa:	mov	r0, r8
    2dac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2db0:	b.w	26bc <__malloc_unlock>
    2db4:	bx	lr
    2db6:	lsrs	r2, r3, #9
    2db8:	cmp	r2, #4
    2dba:	bhi.n	2e64 <_free_r+0x140>
    2dbc:	lsrs	r2, r3, #6
    2dbe:	add.w	r7, r2, #57	; 0x39
    2dc2:	lsls	r7, r7, #1
    2dc4:	add.w	r5, r2, #56	; 0x38
    2dc8:	add.w	r0, r1, r7, lsl #2
    2dcc:	ldr.w	r2, [r1, r7, lsl #2]
    2dd0:	ldr	r1, [pc, #272]	; (2ee4 <_free_r+0x1c0>)
    2dd2:	subs	r0, #8
    2dd4:	cmp	r0, r2
    2dd6:	beq.n	2e74 <_free_r+0x150>
    2dd8:	ldr	r1, [r2, #4]
    2dda:	bic.w	r1, r1, #3
    2dde:	cmp	r3, r1
    2de0:	bcs.n	2de8 <_free_r+0xc4>
    2de2:	ldr	r2, [r2, #8]
    2de4:	cmp	r0, r2
    2de6:	bne.n	2dd8 <_free_r+0xb4>
    2de8:	ldr	r0, [r2, #12]
    2dea:	str	r0, [r4, #12]
    2dec:	str	r2, [r4, #8]
    2dee:	str	r4, [r0, #8]
    2df0:	str	r4, [r2, #12]
    2df2:	mov	r0, r8
    2df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2df8:	b.w	26bc <__malloc_unlock>
    2dfc:	ldr	r5, [r2, #8]
    2dfe:	ldr	r7, [pc, #232]	; (2ee8 <_free_r+0x1c4>)
    2e00:	cmp	r5, r7
    2e02:	add	r3, r0
    2e04:	beq.n	2e86 <_free_r+0x162>
    2e06:	ldr	r0, [r2, #12]
    2e08:	str	r0, [r5, #12]
    2e0a:	orr.w	r2, r3, #1
    2e0e:	str	r5, [r0, #8]
    2e10:	str	r2, [r4, #4]
    2e12:	str	r3, [r4, r3]
    2e14:	b.n	2d7e <_free_r+0x5a>
    2e16:	lsls	r7, r7, #31
    2e18:	add	r3, r0
    2e1a:	bmi.n	2e2c <_free_r+0x108>
    2e1c:	ldr.w	r2, [r5, #-8]
    2e20:	subs	r4, r4, r2
    2e22:	add	r3, r2
    2e24:	ldr	r0, [r4, #8]
    2e26:	ldr	r2, [r4, #12]
    2e28:	str	r2, [r0, #12]
    2e2a:	str	r0, [r2, #8]
    2e2c:	ldr	r2, [pc, #188]	; (2eec <_free_r+0x1c8>)
    2e2e:	ldr	r2, [r2, #0]
    2e30:	orr.w	r0, r3, #1
    2e34:	cmp	r3, r2
    2e36:	str	r0, [r4, #4]
    2e38:	str	r4, [r1, #8]
    2e3a:	bcc.n	2daa <_free_r+0x86>
    2e3c:	ldr	r3, [pc, #176]	; (2ef0 <_free_r+0x1cc>)
    2e3e:	mov	r0, r8
    2e40:	ldr	r1, [r3, #0]
    2e42:	bl	2c88 <_malloc_trim_r>
    2e46:	b.n	2daa <_free_r+0x86>
    2e48:	adds	r1, r2, r0
    2e4a:	ldr	r1, [r1, #4]
    2e4c:	lsls	r1, r1, #31
    2e4e:	bmi.n	2eda <_free_r+0x1b6>
    2e50:	ldr	r1, [r2, #8]
    2e52:	ldr	r2, [r2, #12]
    2e54:	str	r2, [r1, #12]
    2e56:	add	r3, r0
    2e58:	orr.w	r0, r3, #1
    2e5c:	str	r1, [r2, #8]
    2e5e:	str	r0, [r4, #4]
    2e60:	str	r3, [r4, r3]
    2e62:	b.n	2daa <_free_r+0x86>
    2e64:	cmp	r2, #20
    2e66:	bhi.n	2e98 <_free_r+0x174>
    2e68:	add.w	r7, r2, #92	; 0x5c
    2e6c:	lsls	r7, r7, #1
    2e6e:	add.w	r5, r2, #91	; 0x5b
    2e72:	b.n	2dc8 <_free_r+0xa4>
    2e74:	asrs	r2, r5, #2
    2e76:	ldr	r3, [r1, #4]
    2e78:	movs	r5, #1
    2e7a:	lsl.w	r2, r5, r2
    2e7e:	orrs	r3, r2
    2e80:	str	r3, [r1, #4]
    2e82:	mov	r2, r0
    2e84:	b.n	2dea <_free_r+0xc6>
    2e86:	orr.w	r2, r3, #1
    2e8a:	str	r4, [r1, #20]
    2e8c:	str	r4, [r1, #16]
    2e8e:	str	r5, [r4, #12]
    2e90:	str	r5, [r4, #8]
    2e92:	str	r2, [r4, #4]
    2e94:	str	r3, [r4, r3]
    2e96:	b.n	2daa <_free_r+0x86>
    2e98:	cmp	r2, #84	; 0x54
    2e9a:	bhi.n	2eaa <_free_r+0x186>
    2e9c:	lsrs	r2, r3, #12
    2e9e:	add.w	r7, r2, #111	; 0x6f
    2ea2:	lsls	r7, r7, #1
    2ea4:	add.w	r5, r2, #110	; 0x6e
    2ea8:	b.n	2dc8 <_free_r+0xa4>
    2eaa:	cmp.w	r2, #340	; 0x154
    2eae:	bhi.n	2ebe <_free_r+0x19a>
    2eb0:	lsrs	r2, r3, #15
    2eb2:	add.w	r7, r2, #120	; 0x78
    2eb6:	lsls	r7, r7, #1
    2eb8:	add.w	r5, r2, #119	; 0x77
    2ebc:	b.n	2dc8 <_free_r+0xa4>
    2ebe:	movw	r0, #1364	; 0x554
    2ec2:	cmp	r2, r0
    2ec4:	bhi.n	2ed4 <_free_r+0x1b0>
    2ec6:	lsrs	r2, r3, #18
    2ec8:	add.w	r7, r2, #125	; 0x7d
    2ecc:	lsls	r7, r7, #1
    2ece:	add.w	r5, r2, #124	; 0x7c
    2ed2:	b.n	2dc8 <_free_r+0xa4>
    2ed4:	movs	r7, #254	; 0xfe
    2ed6:	movs	r5, #126	; 0x7e
    2ed8:	b.n	2dc8 <_free_r+0xa4>
    2eda:	orr.w	r2, r3, #1
    2ede:	str	r2, [r4, #4]
    2ee0:	str	r3, [r4, r3]
    2ee2:	b.n	2daa <_free_r+0x86>
    2ee4:	.word	0x20000ba0
    2ee8:	.word	0x20000ba8
    2eec:	.word	0x20000fa8
    2ef0:	.word	0x200012c4

00002ef4 <_localeconv_r>:
    2ef4:	ldr	r2, [pc, #16]	; (2f08 <_localeconv_r+0x14>)
    2ef6:	ldr	r3, [pc, #20]	; (2f0c <_localeconv_r+0x18>)
    2ef8:	ldr	r2, [r2, #0]
    2efa:	ldr	r0, [r2, #52]	; 0x34
    2efc:	cmp	r0, #0
    2efe:	it	eq
    2f00:	moveq	r0, r3
    2f02:	adds	r0, #240	; 0xf0
    2f04:	bx	lr
    2f06:	nop
    2f08:	.word	0x20000a30
    2f0c:	.word	0x20000a34

00002f10 <memchr>:
    2f10:	and.w	r1, r1, #255	; 0xff
    2f14:	cmp	r2, #16
    2f16:	blt.n	2f70 <memchr+0x60>
    2f18:	tst.w	r0, #7
    2f1c:	beq.n	2f30 <memchr+0x20>
    2f1e:	ldrb.w	r3, [r0], #1
    2f22:	subs	r2, #1
    2f24:	cmp	r3, r1
    2f26:	beq.n	2f84 <memchr+0x74>
    2f28:	tst.w	r0, #7
    2f2c:	cbz	r2, 2f80 <memchr+0x70>
    2f2e:	bne.n	2f1e <memchr+0xe>
    2f30:	push	{r4, r5, r6, r7}
    2f32:	orr.w	r1, r1, r1, lsl #8
    2f36:	orr.w	r1, r1, r1, lsl #16
    2f3a:	bic.w	r4, r2, #7
    2f3e:	mvns.w	r7, #0
    2f42:	movs	r3, #0
    2f44:	ldrd	r5, r6, [r0], #8
    2f48:	subs	r4, #8
    2f4a:	eor.w	r5, r5, r1
    2f4e:	eor.w	r6, r6, r1
    2f52:	uadd8	r5, r5, r7
    2f56:	sel	r5, r3, r7
    2f5a:	uadd8	r6, r6, r7
    2f5e:	sel	r6, r5, r7
    2f62:	cbnz	r6, 2f88 <memchr+0x78>
    2f64:	bne.n	2f44 <memchr+0x34>
    2f66:	pop	{r4, r5, r6, r7}
    2f68:	and.w	r1, r1, #255	; 0xff
    2f6c:	and.w	r2, r2, #7
    2f70:	cbz	r2, 2f80 <memchr+0x70>
    2f72:	ldrb.w	r3, [r0], #1
    2f76:	subs	r2, #1
    2f78:	eor.w	r3, r3, r1
    2f7c:	cbz	r3, 2f84 <memchr+0x74>
    2f7e:	bne.n	2f72 <memchr+0x62>
    2f80:	movs	r0, #0
    2f82:	bx	lr
    2f84:	subs	r0, #1
    2f86:	bx	lr
    2f88:	cmp	r5, #0
    2f8a:	itte	eq
    2f8c:	moveq	r5, r6
    2f8e:	subeq	r0, #3
    2f90:	subne	r0, #7
    2f92:	tst.w	r5, #1
    2f96:	bne.n	2fa8 <memchr+0x98>
    2f98:	adds	r0, #1
    2f9a:	tst.w	r5, #256	; 0x100
    2f9e:	ittt	eq
    2fa0:	addeq	r0, #1
    2fa2:	tsteq.w	r5, #98304	; 0x18000
    2fa6:	addeq	r0, #1
    2fa8:	pop	{r4, r5, r6, r7}
    2faa:	subs	r0, #1
    2fac:	bx	lr
    2fae:	nop

00002fb0 <_Balloc>:
    2fb0:	ldr	r3, [r0, #76]	; 0x4c
    2fb2:	push	{r4, r5, r6, lr}
    2fb4:	mov	r5, r0
    2fb6:	mov	r4, r1
    2fb8:	cbz	r3, 2fce <_Balloc+0x1e>
    2fba:	ldr.w	r0, [r3, r4, lsl #2]
    2fbe:	cbz	r0, 2fe2 <_Balloc+0x32>
    2fc0:	ldr	r2, [r0, #0]
    2fc2:	str.w	r2, [r3, r4, lsl #2]
    2fc6:	movs	r3, #0
    2fc8:	str	r3, [r0, #16]
    2fca:	str	r3, [r0, #12]
    2fcc:	pop	{r4, r5, r6, pc}
    2fce:	movs	r2, #33	; 0x21
    2fd0:	movs	r1, #4
    2fd2:	bl	3634 <_calloc_r>
    2fd6:	str	r0, [r5, #76]	; 0x4c
    2fd8:	mov	r3, r0
    2fda:	cmp	r0, #0
    2fdc:	bne.n	2fba <_Balloc+0xa>
    2fde:	movs	r0, #0
    2fe0:	pop	{r4, r5, r6, pc}
    2fe2:	movs	r1, #1
    2fe4:	lsl.w	r6, r1, r4
    2fe8:	adds	r2, r6, #5
    2fea:	mov	r0, r5
    2fec:	lsls	r2, r2, #2
    2fee:	bl	3634 <_calloc_r>
    2ff2:	cmp	r0, #0
    2ff4:	beq.n	2fde <_Balloc+0x2e>
    2ff6:	str	r4, [r0, #4]
    2ff8:	str	r6, [r0, #8]
    2ffa:	b.n	2fc6 <_Balloc+0x16>

00002ffc <_Bfree>:
    2ffc:	cbz	r1, 300c <_Bfree+0x10>
    2ffe:	ldr	r3, [r0, #76]	; 0x4c
    3000:	ldr	r2, [r1, #4]
    3002:	ldr.w	r0, [r3, r2, lsl #2]
    3006:	str	r0, [r1, #0]
    3008:	str.w	r1, [r3, r2, lsl #2]
    300c:	bx	lr
    300e:	nop

00003010 <__multadd>:
    3010:	push	{r4, r5, r6, r7, lr}
    3012:	ldr	r4, [r1, #16]
    3014:	sub	sp, #12
    3016:	mov	r5, r1
    3018:	mov	r6, r0
    301a:	add.w	lr, r1, #20
    301e:	movs	r7, #0
    3020:	ldr.w	r0, [lr]
    3024:	uxth	r1, r0
    3026:	mla	r1, r2, r1, r3
    302a:	lsrs	r3, r1, #16
    302c:	lsrs	r0, r0, #16
    302e:	mla	r3, r2, r0, r3
    3032:	uxth	r1, r1
    3034:	adds	r7, #1
    3036:	add.w	r1, r1, r3, lsl #16
    303a:	cmp	r4, r7
    303c:	str.w	r1, [lr], #4
    3040:	mov.w	r3, r3, lsr #16
    3044:	bgt.n	3020 <__multadd+0x10>
    3046:	cbz	r3, 3058 <__multadd+0x48>
    3048:	ldr	r2, [r5, #8]
    304a:	cmp	r4, r2
    304c:	bge.n	305e <__multadd+0x4e>
    304e:	add.w	r2, r5, r4, lsl #2
    3052:	adds	r4, #1
    3054:	str	r3, [r2, #20]
    3056:	str	r4, [r5, #16]
    3058:	mov	r0, r5
    305a:	add	sp, #12
    305c:	pop	{r4, r5, r6, r7, pc}
    305e:	ldr	r1, [r5, #4]
    3060:	str	r3, [sp, #4]
    3062:	adds	r1, #1
    3064:	mov	r0, r6
    3066:	bl	2fb0 <_Balloc>
    306a:	ldr	r2, [r5, #16]
    306c:	adds	r2, #2
    306e:	add.w	r1, r5, #12
    3072:	mov	r7, r0
    3074:	lsls	r2, r2, #2
    3076:	adds	r0, #12
    3078:	bl	1a1c <memcpy>
    307c:	ldr	r2, [r6, #76]	; 0x4c
    307e:	ldr	r1, [r5, #4]
    3080:	ldr	r3, [sp, #4]
    3082:	ldr.w	r0, [r2, r1, lsl #2]
    3086:	str	r0, [r5, #0]
    3088:	str.w	r5, [r2, r1, lsl #2]
    308c:	mov	r5, r7
    308e:	b.n	304e <__multadd+0x3e>

00003090 <__hi0bits>:
    3090:	lsrs	r3, r0, #16
    3092:	lsls	r3, r3, #16
    3094:	cbnz	r3, 30c4 <__hi0bits+0x34>
    3096:	lsls	r0, r0, #16
    3098:	movs	r3, #16
    309a:	tst.w	r0, #4278190080	; 0xff000000
    309e:	itt	eq
    30a0:	lsleq	r0, r0, #8
    30a2:	addeq	r3, #8
    30a4:	tst.w	r0, #4026531840	; 0xf0000000
    30a8:	itt	eq
    30aa:	lsleq	r0, r0, #4
    30ac:	addeq	r3, #4
    30ae:	tst.w	r0, #3221225472	; 0xc0000000
    30b2:	itt	eq
    30b4:	lsleq	r0, r0, #2
    30b6:	addeq	r3, #2
    30b8:	cmp	r0, #0
    30ba:	blt.n	30cc <__hi0bits+0x3c>
    30bc:	lsls	r2, r0, #1
    30be:	bmi.n	30c8 <__hi0bits+0x38>
    30c0:	movs	r0, #32
    30c2:	bx	lr
    30c4:	movs	r3, #0
    30c6:	b.n	309a <__hi0bits+0xa>
    30c8:	adds	r0, r3, #1
    30ca:	bx	lr
    30cc:	mov	r0, r3
    30ce:	bx	lr

000030d0 <__lo0bits>:
    30d0:	ldr	r3, [r0, #0]
    30d2:	ands.w	r2, r3, #7
    30d6:	beq.n	30e8 <__lo0bits+0x18>
    30d8:	lsls	r1, r3, #31
    30da:	bmi.n	311e <__lo0bits+0x4e>
    30dc:	lsls	r2, r3, #30
    30de:	bmi.n	3122 <__lo0bits+0x52>
    30e0:	lsrs	r3, r3, #2
    30e2:	str	r3, [r0, #0]
    30e4:	movs	r0, #2
    30e6:	bx	lr
    30e8:	uxth	r1, r3
    30ea:	cbnz	r1, 30f0 <__lo0bits+0x20>
    30ec:	lsrs	r3, r3, #16
    30ee:	movs	r2, #16
    30f0:	tst.w	r3, #255	; 0xff
    30f4:	itt	eq
    30f6:	lsreq	r3, r3, #8
    30f8:	addeq	r2, #8
    30fa:	lsls	r1, r3, #28
    30fc:	itt	eq
    30fe:	lsreq	r3, r3, #4
    3100:	addeq	r2, #4
    3102:	lsls	r1, r3, #30
    3104:	itt	eq
    3106:	lsreq	r3, r3, #2
    3108:	addeq	r2, #2
    310a:	lsls	r1, r3, #31
    310c:	bmi.n	3118 <__lo0bits+0x48>
    310e:	lsrs	r3, r3, #1
    3110:	bne.n	3116 <__lo0bits+0x46>
    3112:	movs	r0, #32
    3114:	bx	lr
    3116:	adds	r2, #1
    3118:	str	r3, [r0, #0]
    311a:	mov	r0, r2
    311c:	bx	lr
    311e:	movs	r0, #0
    3120:	bx	lr
    3122:	lsrs	r3, r3, #1
    3124:	str	r3, [r0, #0]
    3126:	movs	r0, #1
    3128:	bx	lr
    312a:	nop

0000312c <__i2b>:
    312c:	push	{r4, lr}
    312e:	mov	r4, r1
    3130:	movs	r1, #1
    3132:	bl	2fb0 <_Balloc>
    3136:	movs	r2, #1
    3138:	str	r4, [r0, #20]
    313a:	str	r2, [r0, #16]
    313c:	pop	{r4, pc}
    313e:	nop

00003140 <__multiply>:
    3140:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3144:	ldr	r5, [r1, #16]
    3146:	ldr	r7, [r2, #16]
    3148:	cmp	r5, r7
    314a:	sub	sp, #12
    314c:	mov	r4, r1
    314e:	mov	r6, r2
    3150:	bge.n	315c <__multiply+0x1c>
    3152:	mov	r2, r5
    3154:	mov	r4, r6
    3156:	mov	r5, r7
    3158:	mov	r6, r1
    315a:	mov	r7, r2
    315c:	ldr	r3, [r4, #8]
    315e:	ldr	r1, [r4, #4]
    3160:	add.w	r8, r5, r7
    3164:	cmp	r8, r3
    3166:	it	gt
    3168:	addgt	r1, #1
    316a:	bl	2fb0 <_Balloc>
    316e:	add.w	ip, r0, #20
    3172:	add.w	r9, ip, r8, lsl #2
    3176:	cmp	ip, r9
    3178:	str	r0, [sp, #0]
    317a:	bcs.n	3188 <__multiply+0x48>
    317c:	mov	r3, ip
    317e:	movs	r1, #0
    3180:	str.w	r1, [r3], #4
    3184:	cmp	r9, r3
    3186:	bhi.n	3180 <__multiply+0x40>
    3188:	add.w	r2, r6, #20
    318c:	add.w	sl, r2, r7, lsl #2
    3190:	add.w	r3, r4, #20
    3194:	cmp	r2, sl
    3196:	add.w	lr, r3, r5, lsl #2
    319a:	bcs.n	3246 <__multiply+0x106>
    319c:	str.w	r9, [sp, #4]
    31a0:	mov	r9, r3
    31a2:	ldr.w	r3, [r2], #4
    31a6:	uxth.w	fp, r3
    31aa:	cmp.w	fp, #0
    31ae:	beq.n	31f2 <__multiply+0xb2>
    31b0:	movs	r0, #0
    31b2:	mov	r7, r9
    31b4:	mov	r6, ip
    31b6:	mov	r5, r0
    31b8:	b.n	31bc <__multiply+0x7c>
    31ba:	mov	r6, r3
    31bc:	ldr.w	r4, [r7], #4
    31c0:	ldr	r0, [r6, #0]
    31c2:	uxth	r1, r4
    31c4:	uxth	r3, r0
    31c6:	mla	r1, fp, r1, r3
    31ca:	lsrs	r4, r4, #16
    31cc:	lsrs	r0, r0, #16
    31ce:	adds	r3, r1, r5
    31d0:	mla	r0, fp, r4, r0
    31d4:	add.w	r0, r0, r3, lsr #16
    31d8:	uxth	r1, r3
    31da:	mov	r3, r6
    31dc:	orr.w	r1, r1, r0, lsl #16
    31e0:	cmp	lr, r7
    31e2:	mov.w	r5, r0, lsr #16
    31e6:	str.w	r1, [r3], #4
    31ea:	bhi.n	31ba <__multiply+0x7a>
    31ec:	str	r5, [r6, #4]
    31ee:	ldr.w	r3, [r2, #-4]
    31f2:	movs.w	fp, r3, lsr #16
    31f6:	beq.n	323a <__multiply+0xfa>
    31f8:	ldr.w	r3, [ip]
    31fc:	mov	r7, ip
    31fe:	mov	r0, r3
    3200:	mov	r5, r9
    3202:	movs	r1, #0
    3204:	b.n	3208 <__multiply+0xc8>
    3206:	mov	r7, r6
    3208:	ldrh	r4, [r5, #0]
    320a:	lsrs	r0, r0, #16
    320c:	mla	r0, fp, r4, r0
    3210:	add	r1, r0
    3212:	uxth	r4, r3
    3214:	mov	r6, r7
    3216:	orr.w	r3, r4, r1, lsl #16
    321a:	str.w	r3, [r6], #4
    321e:	ldr	r0, [r7, #4]
    3220:	ldr.w	r4, [r5], #4
    3224:	uxth	r3, r0
    3226:	lsrs	r4, r4, #16
    3228:	mla	r4, fp, r4, r3
    322c:	add.w	r3, r4, r1, lsr #16
    3230:	cmp	lr, r5
    3232:	mov.w	r1, r3, lsr #16
    3236:	bhi.n	3206 <__multiply+0xc6>
    3238:	str	r3, [r7, #4]
    323a:	cmp	sl, r2
    323c:	add.w	ip, ip, #4
    3240:	bhi.n	31a2 <__multiply+0x62>
    3242:	ldr.w	r9, [sp, #4]
    3246:	cmp.w	r8, #0
    324a:	ble.n	3264 <__multiply+0x124>
    324c:	ldr.w	r3, [r9, #-4]
    3250:	sub.w	r9, r9, #4
    3254:	cbz	r3, 325e <__multiply+0x11e>
    3256:	b.n	3264 <__multiply+0x124>
    3258:	ldr.w	r3, [r9, #-4]!
    325c:	cbnz	r3, 3264 <__multiply+0x124>
    325e:	subs.w	r8, r8, #1
    3262:	bne.n	3258 <__multiply+0x118>
    3264:	ldr	r0, [sp, #0]
    3266:	str.w	r8, [r0, #16]
    326a:	add	sp, #12
    326c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003270 <__pow5mult>:
    3270:	ands.w	r3, r2, #3
    3274:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3278:	mov	r4, r2
    327a:	mov	r7, r0
    327c:	bne.n	32dc <__pow5mult+0x6c>
    327e:	mov	r6, r1
    3280:	asrs	r4, r4, #2
    3282:	beq.n	32be <__pow5mult+0x4e>
    3284:	ldr	r5, [r7, #72]	; 0x48
    3286:	cbz	r5, 32ee <__pow5mult+0x7e>
    3288:	lsls	r3, r4, #31
    328a:	mov.w	r8, #0
    328e:	bmi.n	329e <__pow5mult+0x2e>
    3290:	asrs	r4, r4, #1
    3292:	beq.n	32be <__pow5mult+0x4e>
    3294:	ldr	r0, [r5, #0]
    3296:	cbz	r0, 32c4 <__pow5mult+0x54>
    3298:	mov	r5, r0
    329a:	lsls	r3, r4, #31
    329c:	bpl.n	3290 <__pow5mult+0x20>
    329e:	mov	r2, r5
    32a0:	mov	r1, r6
    32a2:	mov	r0, r7
    32a4:	bl	3140 <__multiply>
    32a8:	cbz	r6, 32d8 <__pow5mult+0x68>
    32aa:	ldr	r2, [r6, #4]
    32ac:	ldr	r3, [r7, #76]	; 0x4c
    32ae:	asrs	r4, r4, #1
    32b0:	ldr.w	r1, [r3, r2, lsl #2]
    32b4:	str	r1, [r6, #0]
    32b6:	str.w	r6, [r3, r2, lsl #2]
    32ba:	mov	r6, r0
    32bc:	bne.n	3294 <__pow5mult+0x24>
    32be:	mov	r0, r6
    32c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32c4:	mov	r2, r5
    32c6:	mov	r1, r5
    32c8:	mov	r0, r7
    32ca:	bl	3140 <__multiply>
    32ce:	str	r0, [r5, #0]
    32d0:	str.w	r8, [r0]
    32d4:	mov	r5, r0
    32d6:	b.n	329a <__pow5mult+0x2a>
    32d8:	mov	r6, r0
    32da:	b.n	3290 <__pow5mult+0x20>
    32dc:	subs	r2, r3, #1
    32de:	ldr	r5, [pc, #44]	; (330c <__pow5mult+0x9c>)
    32e0:	movs	r3, #0
    32e2:	ldr.w	r2, [r5, r2, lsl #2]
    32e6:	bl	3010 <__multadd>
    32ea:	mov	r6, r0
    32ec:	b.n	3280 <__pow5mult+0x10>
    32ee:	movs	r1, #1
    32f0:	mov	r0, r7
    32f2:	bl	2fb0 <_Balloc>
    32f6:	movw	r1, #625	; 0x271
    32fa:	movs	r2, #1
    32fc:	movs	r3, #0
    32fe:	str	r1, [r0, #20]
    3300:	str	r2, [r0, #16]
    3302:	mov	r5, r0
    3304:	str	r0, [r7, #72]	; 0x48
    3306:	str	r3, [r0, #0]
    3308:	b.n	3288 <__pow5mult+0x18>
    330a:	nop
    330c:	.word	0x20000540

00003310 <__lshift>:
    3310:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3314:	mov	r9, r2
    3316:	ldr	r2, [r1, #16]
    3318:	ldr	r3, [r1, #8]
    331a:	mov.w	r4, r9, asr #5
    331e:	add.w	r8, r4, r2
    3322:	add.w	r5, r8, #1
    3326:	cmp	r5, r3
    3328:	mov	r6, r1
    332a:	mov	sl, r0
    332c:	ldr	r1, [r1, #4]
    332e:	ble.n	333a <__lshift+0x2a>
    3330:	lsls	r3, r3, #1
    3332:	cmp	r5, r3
    3334:	add.w	r1, r1, #1
    3338:	bgt.n	3330 <__lshift+0x20>
    333a:	mov	r0, sl
    333c:	bl	2fb0 <_Balloc>
    3340:	cmp	r4, #0
    3342:	add.w	r2, r0, #20
    3346:	ble.n	33ba <__lshift+0xaa>
    3348:	add.w	r3, r2, r4, lsl #2
    334c:	movs	r1, #0
    334e:	str.w	r1, [r2], #4
    3352:	cmp	r3, r2
    3354:	bne.n	334e <__lshift+0x3e>
    3356:	ldr	r4, [r6, #16]
    3358:	add.w	r1, r6, #20
    335c:	ands.w	r9, r9, #31
    3360:	add.w	lr, r1, r4, lsl #2
    3364:	beq.n	33aa <__lshift+0x9a>
    3366:	rsb	r2, r9, #32
    336a:	movs	r4, #0
    336c:	ldr	r7, [r1, #0]
    336e:	lsl.w	ip, r7, r9
    3372:	orr.w	r4, ip, r4
    3376:	mov	ip, r3
    3378:	str.w	r4, [r3], #4
    337c:	ldr.w	r4, [r1], #4
    3380:	cmp	lr, r1
    3382:	lsr.w	r4, r4, r2
    3386:	bhi.n	336c <__lshift+0x5c>
    3388:	str.w	r4, [ip, #4]
    338c:	cbz	r4, 3392 <__lshift+0x82>
    338e:	add.w	r5, r8, #2
    3392:	ldr.w	r3, [sl, #76]	; 0x4c
    3396:	ldr	r2, [r6, #4]
    3398:	subs	r5, #1
    339a:	ldr.w	r1, [r3, r2, lsl #2]
    339e:	str	r5, [r0, #16]
    33a0:	str	r1, [r6, #0]
    33a2:	str.w	r6, [r3, r2, lsl #2]
    33a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33aa:	subs	r3, #4
    33ac:	ldr.w	r2, [r1], #4
    33b0:	str.w	r2, [r3, #4]!
    33b4:	cmp	lr, r1
    33b6:	bhi.n	33ac <__lshift+0x9c>
    33b8:	b.n	3392 <__lshift+0x82>
    33ba:	mov	r3, r2
    33bc:	b.n	3356 <__lshift+0x46>
    33be:	nop

000033c0 <__mcmp>:
    33c0:	ldr	r2, [r0, #16]
    33c2:	ldr	r3, [r1, #16]
    33c4:	subs	r2, r2, r3
    33c6:	bne.n	33f0 <__mcmp+0x30>
    33c8:	lsls	r3, r3, #2
    33ca:	adds	r0, #20
    33cc:	adds	r1, #20
    33ce:	add	r1, r3
    33d0:	push	{r4}
    33d2:	add	r3, r0
    33d4:	b.n	33da <__mcmp+0x1a>
    33d6:	cmp	r0, r3
    33d8:	bcs.n	33f4 <__mcmp+0x34>
    33da:	ldr.w	r4, [r3, #-4]!
    33de:	ldr.w	r2, [r1, #-4]!
    33e2:	cmp	r4, r2
    33e4:	beq.n	33d6 <__mcmp+0x16>
    33e6:	bcc.n	33fc <__mcmp+0x3c>
    33e8:	movs	r0, #1
    33ea:	ldr.w	r4, [sp], #4
    33ee:	bx	lr
    33f0:	mov	r0, r2
    33f2:	bx	lr
    33f4:	movs	r0, #0
    33f6:	ldr.w	r4, [sp], #4
    33fa:	bx	lr
    33fc:	mov.w	r0, #4294967295
    3400:	b.n	33ea <__mcmp+0x2a>
    3402:	nop

00003404 <__mdiff>:
    3404:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3408:	ldr	r3, [r1, #16]
    340a:	mov	r7, r1
    340c:	ldr	r1, [r2, #16]
    340e:	subs	r3, r3, r1
    3410:	cmp	r3, #0
    3412:	mov	r8, r2
    3414:	bne.n	3446 <__mdiff+0x42>
    3416:	lsls	r1, r1, #2
    3418:	add.w	r2, r7, #20
    341c:	add.w	r5, r8, #20
    3420:	adds	r3, r2, r1
    3422:	add	r1, r5
    3424:	b.n	342a <__mdiff+0x26>
    3426:	cmp	r2, r3
    3428:	bcs.n	34e8 <__mdiff+0xe4>
    342a:	ldr.w	r6, [r3, #-4]!
    342e:	ldr.w	r4, [r1, #-4]!
    3432:	cmp	r6, r4
    3434:	beq.n	3426 <__mdiff+0x22>
    3436:	bcs.n	34fa <__mdiff+0xf6>
    3438:	mov	r3, r7
    343a:	mov	r4, r2
    343c:	mov	r7, r8
    343e:	mov.w	r9, #1
    3442:	mov	r8, r3
    3444:	b.n	3454 <__mdiff+0x50>
    3446:	blt.n	3504 <__mdiff+0x100>
    3448:	add.w	r5, r7, #20
    344c:	add.w	r4, r2, #20
    3450:	mov.w	r9, #0
    3454:	ldr	r1, [r7, #4]
    3456:	bl	2fb0 <_Balloc>
    345a:	ldr.w	r3, [r8, #16]
    345e:	ldr	r6, [r7, #16]
    3460:	str.w	r9, [r0, #12]
    3464:	add.w	ip, r4, r3, lsl #2
    3468:	mov	lr, r4
    346a:	add.w	r7, r5, r6, lsl #2
    346e:	add.w	r4, r0, #20
    3472:	movs	r3, #0
    3474:	ldr.w	r1, [lr], #4
    3478:	ldr.w	r8, [r5], #4
    347c:	uxth	r2, r1
    347e:	uxtah	r3, r3, r8
    3482:	lsrs	r1, r1, #16
    3484:	subs	r2, r3, r2
    3486:	rsb	r3, r1, r8, lsr #16
    348a:	add.w	r3, r3, r2, asr #16
    348e:	uxth	r2, r2
    3490:	orr.w	r2, r2, r3, lsl #16
    3494:	cmp	ip, lr
    3496:	str.w	r2, [r4], #4
    349a:	mov.w	r3, r3, asr #16
    349e:	bhi.n	3474 <__mdiff+0x70>
    34a0:	cmp	r7, r5
    34a2:	bls.n	34d4 <__mdiff+0xd0>
    34a4:	mov	ip, r4
    34a6:	mov	r1, r5
    34a8:	ldr.w	lr, [r1], #4
    34ac:	uxtah	r2, r3, lr
    34b0:	asrs	r3, r2, #16
    34b2:	add.w	r3, r3, lr, lsr #16
    34b6:	uxth	r2, r2
    34b8:	orr.w	r2, r2, r3, lsl #16
    34bc:	cmp	r7, r1
    34be:	str.w	r2, [ip], #4
    34c2:	mov.w	r3, r3, asr #16
    34c6:	bhi.n	34a8 <__mdiff+0xa4>
    34c8:	mvns	r5, r5
    34ca:	add	r5, r7
    34cc:	bic.w	r5, r5, #3
    34d0:	adds	r5, #4
    34d2:	add	r4, r5
    34d4:	subs	r4, #4
    34d6:	cbnz	r2, 34e2 <__mdiff+0xde>
    34d8:	ldr.w	r3, [r4, #-4]!
    34dc:	subs	r6, #1
    34de:	cmp	r3, #0
    34e0:	beq.n	34d8 <__mdiff+0xd4>
    34e2:	str	r6, [r0, #16]
    34e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    34e8:	movs	r1, #0
    34ea:	bl	2fb0 <_Balloc>
    34ee:	movs	r2, #1
    34f0:	movs	r3, #0
    34f2:	str	r2, [r0, #16]
    34f4:	str	r3, [r0, #20]
    34f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    34fa:	mov	r4, r5
    34fc:	mov.w	r9, #0
    3500:	mov	r5, r2
    3502:	b.n	3454 <__mdiff+0x50>
    3504:	mov	r3, r7
    3506:	add.w	r4, r7, #20
    350a:	add.w	r5, r8, #20
    350e:	mov	r7, r8
    3510:	mov.w	r9, #1
    3514:	mov	r8, r3
    3516:	b.n	3454 <__mdiff+0x50>

00003518 <__d2b>:
    3518:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    351c:	vmov	r6, r7, d0
    3520:	sub	sp, #12
    3522:	mov	r8, r1
    3524:	movs	r1, #1
    3526:	mov	r4, r7
    3528:	ubfx	r5, r7, #20, #11
    352c:	mov	r7, r2
    352e:	bl	2fb0 <_Balloc>
    3532:	ubfx	r4, r4, #0, #20
    3536:	mov	r9, r0
    3538:	cbz	r5, 353e <__d2b+0x26>
    353a:	orr.w	r4, r4, #1048576	; 0x100000
    353e:	str	r4, [sp, #4]
    3540:	cbz	r6, 358a <__d2b+0x72>
    3542:	add	r0, sp, #8
    3544:	str.w	r6, [r0, #-8]!
    3548:	bl	30d0 <__lo0bits>
    354c:	cmp	r0, #0
    354e:	bne.n	35ba <__d2b+0xa2>
    3550:	ldmia.w	sp, {r2, r3}
    3554:	str.w	r2, [r9, #20]
    3558:	cmp	r3, #0
    355a:	ite	eq
    355c:	moveq	r1, #1
    355e:	movne	r1, #2
    3560:	str.w	r3, [r9, #24]
    3564:	str.w	r1, [r9, #16]
    3568:	cbnz	r5, 35a2 <__d2b+0x8a>
    356a:	add.w	r3, r9, r1, lsl #2
    356e:	subw	r0, r0, #1074	; 0x432
    3572:	str.w	r0, [r8]
    3576:	ldr	r0, [r3, #16]
    3578:	bl	3090 <__hi0bits>
    357c:	rsb	r0, r0, r1, lsl #5
    3580:	str	r0, [r7, #0]
    3582:	mov	r0, r9
    3584:	add	sp, #12
    3586:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    358a:	add	r0, sp, #4
    358c:	bl	30d0 <__lo0bits>
    3590:	ldr	r3, [sp, #4]
    3592:	str.w	r3, [r9, #20]
    3596:	movs	r1, #1
    3598:	adds	r0, #32
    359a:	str.w	r1, [r9, #16]
    359e:	cmp	r5, #0
    35a0:	beq.n	356a <__d2b+0x52>
    35a2:	subw	r5, r5, #1075	; 0x433
    35a6:	add	r5, r0
    35a8:	rsb	r0, r0, #53	; 0x35
    35ac:	str.w	r5, [r8]
    35b0:	str	r0, [r7, #0]
    35b2:	mov	r0, r9
    35b4:	add	sp, #12
    35b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    35ba:	ldmia.w	sp, {r2, r3}
    35be:	rsb	r1, r0, #32
    35c2:	lsl.w	r1, r3, r1
    35c6:	orrs	r2, r1
    35c8:	lsrs	r3, r0
    35ca:	str	r3, [sp, #4]
    35cc:	str.w	r2, [r9, #20]
    35d0:	b.n	3558 <__d2b+0x40>
    35d2:	nop

000035d4 <_vasnprintf_r>:
    35d4:	push	{r4, r5, r6, lr}
    35d6:	mov	r5, r2
    35d8:	sub	sp, #104	; 0x68
    35da:	ldr	r4, [r2, #0]
    35dc:	cbz	r1, 35e2 <_vasnprintf_r+0xe>
    35de:	cmp	r4, #0
    35e0:	bne.n	3618 <_vasnprintf_r+0x44>
    35e2:	movs	r4, #0
    35e4:	mov.w	r2, #648	; 0x288
    35e8:	strh.w	r2, [sp, #12]
    35ec:	str	r4, [sp, #0]
    35ee:	str	r4, [sp, #16]
    35f0:	mov	r2, r3
    35f2:	movw	r6, #65535	; 0xffff
    35f6:	ldr	r3, [sp, #120]	; 0x78
    35f8:	str	r4, [sp, #8]
    35fa:	mov	r1, sp
    35fc:	str	r4, [sp, #20]
    35fe:	strh.w	r6, [sp, #14]
    3602:	bl	4448 <_svfprintf_r>
    3606:	cmp	r0, #0
    3608:	blt.n	362e <_vasnprintf_r+0x5a>
    360a:	ldr	r3, [sp, #0]
    360c:	str	r0, [r5, #0]
    360e:	movs	r2, #0
    3610:	strb	r2, [r3, #0]
    3612:	ldr	r0, [sp, #16]
    3614:	add	sp, #104	; 0x68
    3616:	pop	{r4, r5, r6, pc}
    3618:	mov.w	r2, #1544	; 0x608
    361c:	str	r1, [sp, #0]
    361e:	str	r1, [sp, #16]
    3620:	strh.w	r2, [sp, #12]
    3624:	bge.n	35f0 <_vasnprintf_r+0x1c>
    3626:	movs	r3, #139	; 0x8b
    3628:	str	r3, [r0, #0]
    362a:	movs	r0, #0
    362c:	b.n	3614 <_vasnprintf_r+0x40>
    362e:	movs	r0, #0
    3630:	b.n	3614 <_vasnprintf_r+0x40>
    3632:	nop

00003634 <_calloc_r>:
    3634:	push	{r4, lr}
    3636:	mul.w	r1, r2, r1
    363a:	bl	1fb8 <_malloc_r>
    363e:	mov	r4, r0
    3640:	cbz	r0, 367a <_calloc_r+0x46>
    3642:	ldr.w	r2, [r0, #-4]
    3646:	bic.w	r2, r2, #3
    364a:	subs	r2, #4
    364c:	cmp	r2, #36	; 0x24
    364e:	bhi.n	3682 <_calloc_r+0x4e>
    3650:	cmp	r2, #19
    3652:	bls.n	367e <_calloc_r+0x4a>
    3654:	movs	r3, #0
    3656:	cmp	r2, #27
    3658:	str	r3, [r0, #0]
    365a:	str	r3, [r0, #4]
    365c:	bls.n	368c <_calloc_r+0x58>
    365e:	cmp	r2, #36	; 0x24
    3660:	str	r3, [r0, #8]
    3662:	str	r3, [r0, #12]
    3664:	iteee	ne
    3666:	addne.w	r2, r0, #16
    366a:	streq	r3, [r0, #16]
    366c:	streq	r3, [r0, #20]
    366e:	addeq.w	r2, r0, #24
    3672:	movs	r3, #0
    3674:	str	r3, [r2, #0]
    3676:	str	r3, [r2, #4]
    3678:	str	r3, [r2, #8]
    367a:	mov	r0, r4
    367c:	pop	{r4, pc}
    367e:	mov	r2, r0
    3680:	b.n	3672 <_calloc_r+0x3e>
    3682:	movs	r1, #0
    3684:	bl	261c <memset>
    3688:	mov	r0, r4
    368a:	pop	{r4, pc}
    368c:	add.w	r2, r0, #8
    3690:	b.n	3672 <_calloc_r+0x3e>
    3692:	nop

00003694 <quorem>:
    3694:	ldr	r2, [r0, #16]
    3696:	ldr	r3, [r1, #16]
    3698:	cmp	r3, r2
    369a:	bgt.w	37b8 <quorem+0x124>
    369e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36a2:	add.w	r8, r3, #4294967295
    36a6:	add.w	r7, r1, #20
    36aa:	add.w	fp, r0, #20
    36ae:	ldr.w	r2, [r7, r8, lsl #2]
    36b2:	ldr.w	r3, [fp, r8, lsl #2]
    36b6:	mov.w	r4, r8, lsl #2
    36ba:	sub	sp, #12
    36bc:	adds	r2, #1
    36be:	udiv	r9, r3, r2
    36c2:	add.w	r3, fp, r4
    36c6:	str	r4, [sp, #0]
    36c8:	add.w	sl, r7, r4
    36cc:	str	r3, [sp, #4]
    36ce:	cmp.w	r9, #0
    36d2:	beq.n	3748 <quorem+0xb4>
    36d4:	movs	r5, #0
    36d6:	mov	ip, r7
    36d8:	mov	lr, fp
    36da:	mov	r3, r5
    36dc:	ldr.w	r6, [ip], #4
    36e0:	ldr.w	r2, [lr]
    36e4:	uxth	r4, r6
    36e6:	mla	r5, r9, r4, r5
    36ea:	lsrs	r6, r6, #16
    36ec:	lsrs	r4, r5, #16
    36ee:	mla	r4, r9, r6, r4
    36f2:	uxth	r5, r5
    36f4:	subs	r3, r3, r5
    36f6:	uxth	r6, r4
    36f8:	uxtah	r3, r3, r2
    36fc:	rsb	r6, r6, r2, lsr #16
    3700:	add.w	r6, r6, r3, asr #16
    3704:	uxth	r3, r3
    3706:	orr.w	r3, r3, r6, lsl #16
    370a:	cmp	sl, ip
    370c:	str.w	r3, [lr], #4
    3710:	mov.w	r5, r4, lsr #16
    3714:	mov.w	r3, r6, asr #16
    3718:	bcs.n	36dc <quorem+0x48>
    371a:	ldr	r3, [sp, #0]
    371c:	ldr.w	r3, [fp, r3]
    3720:	cbnz	r3, 3748 <quorem+0xb4>
    3722:	ldr	r4, [sp, #4]
    3724:	subs	r3, r4, #4
    3726:	cmp	fp, r3
    3728:	bcs.n	3744 <quorem+0xb0>
    372a:	ldr.w	r3, [r4, #-4]
    372e:	cbnz	r3, 3744 <quorem+0xb0>
    3730:	sub.w	r3, r4, #8
    3734:	b.n	373c <quorem+0xa8>
    3736:	ldr	r2, [r3, #0]
    3738:	subs	r3, #4
    373a:	cbnz	r2, 3744 <quorem+0xb0>
    373c:	cmp	fp, r3
    373e:	add.w	r8, r8, #4294967295
    3742:	bcc.n	3736 <quorem+0xa2>
    3744:	str.w	r8, [r0, #16]
    3748:	mov	r4, r0
    374a:	bl	33c0 <__mcmp>
    374e:	cmp	r0, #0
    3750:	blt.n	37b0 <quorem+0x11c>
    3752:	add.w	r9, r9, #1
    3756:	mov	r5, fp
    3758:	movs	r3, #0
    375a:	ldr.w	r1, [r7], #4
    375e:	ldr	r0, [r5, #0]
    3760:	uxth	r2, r1
    3762:	subs	r2, r3, r2
    3764:	lsrs	r1, r1, #16
    3766:	uxtah	r2, r2, r0
    376a:	rsb	r3, r1, r0, lsr #16
    376e:	add.w	r3, r3, r2, asr #16
    3772:	uxth	r1, r2
    3774:	orr.w	r1, r1, r3, lsl #16
    3778:	cmp	sl, r7
    377a:	str.w	r1, [r5], #4
    377e:	mov.w	r3, r3, asr #16
    3782:	bcs.n	375a <quorem+0xc6>
    3784:	ldr.w	r2, [fp, r8, lsl #2]
    3788:	add.w	r3, fp, r8, lsl #2
    378c:	cbnz	r2, 37b0 <quorem+0x11c>
    378e:	subs	r2, r3, #4
    3790:	cmp	fp, r2
    3792:	bcs.n	37ac <quorem+0x118>
    3794:	ldr.w	r2, [r3, #-4]
    3798:	cbnz	r2, 37ac <quorem+0x118>
    379a:	subs	r3, #8
    379c:	b.n	37a4 <quorem+0x110>
    379e:	ldr	r2, [r3, #0]
    37a0:	subs	r3, #4
    37a2:	cbnz	r2, 37ac <quorem+0x118>
    37a4:	cmp	fp, r3
    37a6:	add.w	r8, r8, #4294967295
    37aa:	bcc.n	379e <quorem+0x10a>
    37ac:	str.w	r8, [r4, #16]
    37b0:	mov	r0, r9
    37b2:	add	sp, #12
    37b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37b8:	movs	r0, #0
    37ba:	bx	lr
    37bc:	movs	r0, r0
	...

000037c0 <_dtoa_r>:
    37c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37c4:	vmov	r6, r7, d0
    37c8:	sub	sp, #76	; 0x4c
    37ca:	ldr	r5, [r0, #64]	; 0x40
    37cc:	str	r1, [sp, #4]
    37ce:	mov	r4, r0
    37d0:	mov	r8, r2
    37d2:	str	r3, [sp, #16]
    37d4:	vmov	sl, s0
    37d8:	mov	fp, r7
    37da:	cbz	r5, 37f0 <_dtoa_r+0x30>
    37dc:	ldr	r2, [r0, #68]	; 0x44
    37de:	str	r2, [r5, #4]
    37e0:	movs	r3, #1
    37e2:	lsls	r3, r2
    37e4:	str	r3, [r5, #8]
    37e6:	mov	r1, r5
    37e8:	bl	2ffc <_Bfree>
    37ec:	movs	r3, #0
    37ee:	str	r3, [r4, #64]	; 0x40
    37f0:	cmp.w	fp, #0
    37f4:	mov	r6, fp
    37f6:	blt.n	3862 <_dtoa_r+0xa2>
    37f8:	ldr	r2, [sp, #112]	; 0x70
    37fa:	movs	r3, #0
    37fc:	str	r3, [r2, #0]
    37fe:	ldr	r3, [pc, #784]	; (3b10 <_dtoa_r+0x350>)
    3800:	mov	r2, r3
    3802:	ands	r3, r6
    3804:	cmp	r3, r2
    3806:	beq.n	3834 <_dtoa_r+0x74>
    3808:	vmov	d7, sl, fp
    380c:	vcmp.f64	d7, #0.0
    3810:	vmrs	APSR_nzcv, fpscr
    3814:	strd	sl, fp, [sp, #8]
    3818:	bne.n	3870 <_dtoa_r+0xb0>
    381a:	ldr	r2, [sp, #16]
    381c:	movs	r3, #1
    381e:	str	r3, [r2, #0]
    3820:	ldr	r3, [sp, #116]	; 0x74
    3822:	cmp	r3, #0
    3824:	beq.w	3996 <_dtoa_r+0x1d6>
    3828:	ldr	r0, [pc, #744]	; (3b14 <_dtoa_r+0x354>)
    382a:	str	r0, [r3, #0]
    382c:	subs	r0, #1
    382e:	add	sp, #76	; 0x4c
    3830:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3834:	ldr	r2, [sp, #16]
    3836:	movw	r3, #9999	; 0x270f
    383a:	str	r3, [r2, #0]
    383c:	cmp.w	sl, #0
    3840:	beq.w	3968 <_dtoa_r+0x1a8>
    3844:	ldr	r0, [pc, #720]	; (3b18 <_dtoa_r+0x358>)
    3846:	ldr	r3, [sp, #116]	; 0x74
    3848:	cmp	r3, #0
    384a:	beq.n	382e <_dtoa_r+0x6e>
    384c:	ldrb	r3, [r0, #3]
    384e:	cmp	r3, #0
    3850:	beq.w	399a <_dtoa_r+0x1da>
    3854:	add.w	r3, r0, #8
    3858:	ldr	r2, [sp, #116]	; 0x74
    385a:	str	r3, [r2, #0]
    385c:	add	sp, #76	; 0x4c
    385e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3862:	ldr	r2, [sp, #112]	; 0x70
    3864:	movs	r3, #1
    3866:	bic.w	r6, fp, #2147483648	; 0x80000000
    386a:	str	r3, [r2, #0]
    386c:	mov	fp, r6
    386e:	b.n	37fe <_dtoa_r+0x3e>
    3870:	add	r1, sp, #68	; 0x44
    3872:	add	r2, sp, #64	; 0x40
    3874:	vldr	d0, [sp, #8]
    3878:	mov	r0, r4
    387a:	bl	3518 <__d2b>
    387e:	lsrs	r1, r6, #20
    3880:	str	r0, [sp, #28]
    3882:	bne.n	397a <_dtoa_r+0x1ba>
    3884:	ldr	r0, [sp, #64]	; 0x40
    3886:	ldr	r1, [sp, #68]	; 0x44
    3888:	add	r1, r0
    388a:	addw	r3, r1, #1074	; 0x432
    388e:	cmp	r3, #32
    3890:	ble.w	3d16 <_dtoa_r+0x556>
    3894:	rsb	r3, r3, #64	; 0x40
    3898:	addw	r2, r1, #1042	; 0x412
    389c:	lsls	r6, r3
    389e:	lsr.w	r3, sl, r2
    38a2:	orrs	r3, r6
    38a4:	vmov	s15, r3
    38a8:	vcvt.f64.u32	d7, s15
    38ac:	movs	r5, #1
    38ae:	vmov	r2, r3, d7
    38b2:	subs	r1, #1
    38b4:	sub.w	r3, r3, #32505856	; 0x1f00000
    38b8:	str	r5, [sp, #40]	; 0x28
    38ba:	vmov	d7, r2, r3
    38be:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    38c2:	vldr	d4, [pc, #564]	; 3af8 <_dtoa_r+0x338>
    38c6:	vsub.f64	d6, d7, d6
    38ca:	vldr	d7, [pc, #564]	; 3b00 <_dtoa_r+0x340>
    38ce:	vldr	d5, [pc, #568]	; 3b08 <_dtoa_r+0x348>
    38d2:	vfma.f64	d7, d6, d4
    38d6:	vmov	s13, r1
    38da:	vcvt.f64.s32	d6, s13
    38de:	vfma.f64	d7, d6, d5
    38e2:	vcvt.s32.f64	s13, d7
    38e6:	vcmpe.f64	d7, #0.0
    38ea:	vmrs	APSR_nzcv, fpscr
    38ee:	vstr	s13, [sp, #8]
    38f2:	bmi.w	3b2e <_dtoa_r+0x36e>
    38f6:	ldr	r5, [sp, #8]
    38f8:	cmp	r5, #22
    38fa:	bhi.w	3b28 <_dtoa_r+0x368>
    38fe:	ldr	r3, [pc, #540]	; (3b1c <_dtoa_r+0x35c>)
    3900:	add.w	r3, r3, r5, lsl #3
    3904:	vldr	d7, [r3]
    3908:	vmov	d6, sl, fp
    390c:	vcmpe.f64	d7, d6
    3910:	vmrs	APSR_nzcv, fpscr
    3914:	ble.w	3d24 <_dtoa_r+0x564>
    3918:	subs	r3, r5, #1
    391a:	str	r3, [sp, #8]
    391c:	movs	r3, #0
    391e:	str	r3, [sp, #48]	; 0x30
    3920:	subs	r1, r0, r1
    3922:	subs.w	r9, r1, #1
    3926:	bmi.w	3b58 <_dtoa_r+0x398>
    392a:	movs	r3, #0
    392c:	str	r3, [sp, #24]
    392e:	ldr	r3, [sp, #8]
    3930:	cmp	r3, #0
    3932:	blt.w	3b46 <_dtoa_r+0x386>
    3936:	add	r9, r3
    3938:	str	r3, [sp, #44]	; 0x2c
    393a:	movs	r3, #0
    393c:	str	r3, [sp, #20]
    393e:	ldr	r3, [sp, #4]
    3940:	cmp	r3, #9
    3942:	bhi.n	399e <_dtoa_r+0x1de>
    3944:	cmp	r3, #5
    3946:	ble.w	4408 <_dtoa_r+0xc48>
    394a:	subs	r3, #4
    394c:	str	r3, [sp, #4]
    394e:	movs	r3, #0
    3950:	str	r3, [sp, #56]	; 0x38
    3952:	ldr	r3, [sp, #4]
    3954:	subs	r3, #2
    3956:	cmp	r3, #3
    3958:	bhi.w	441a <_dtoa_r+0xc5a>
    395c:	tbh	[pc, r3, lsl #1]
    3960:	.word	0x01e502a9
    3964:	.word	0x03c802b5
    3968:	ldr	r3, [pc, #428]	; (3b18 <_dtoa_r+0x358>)
    396a:	ldr	r2, [pc, #436]	; (3b20 <_dtoa_r+0x360>)
    396c:	ubfx	r0, r6, #0, #20
    3970:	cmp	r0, #0
    3972:	ite	ne
    3974:	movne	r0, r3
    3976:	moveq	r0, r2
    3978:	b.n	3846 <_dtoa_r+0x86>
    397a:	ldrd	r2, r3, [sp, #8]
    397e:	ubfx	r0, r3, #0, #20
    3982:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    3986:	movs	r5, #0
    3988:	subw	r1, r1, #1023	; 0x3ff
    398c:	orr.w	r3, r3, #3145728	; 0x300000
    3990:	ldr	r0, [sp, #64]	; 0x40
    3992:	str	r5, [sp, #40]	; 0x28
    3994:	b.n	38ba <_dtoa_r+0xfa>
    3996:	ldr	r0, [pc, #396]	; (3b24 <_dtoa_r+0x364>)
    3998:	b.n	382e <_dtoa_r+0x6e>
    399a:	adds	r3, r0, #3
    399c:	b.n	3858 <_dtoa_r+0x98>
    399e:	movs	r1, #0
    39a0:	str	r1, [r4, #68]	; 0x44
    39a2:	mov	r0, r4
    39a4:	mov	r8, r1
    39a6:	str	r1, [sp, #4]
    39a8:	bl	2fb0 <_Balloc>
    39ac:	mov.w	r7, #4294967295
    39b0:	movs	r3, #1
    39b2:	str	r0, [sp, #32]
    39b4:	str	r0, [r4, #64]	; 0x40
    39b6:	str	r7, [sp, #52]	; 0x34
    39b8:	str	r3, [sp, #36]	; 0x24
    39ba:	ldr	r3, [sp, #68]	; 0x44
    39bc:	cmp	r3, #0
    39be:	blt.n	3ab6 <_dtoa_r+0x2f6>
    39c0:	ldr	r2, [sp, #8]
    39c2:	cmp	r2, #14
    39c4:	bgt.n	3ab6 <_dtoa_r+0x2f6>
    39c6:	ldr	r3, [pc, #340]	; (3b1c <_dtoa_r+0x35c>)
    39c8:	cmp.w	r8, #0
    39cc:	add.w	r3, r3, r2, lsl #3
    39d0:	vldr	d4, [r3]
    39d4:	blt.w	3ee0 <_dtoa_r+0x720>
    39d8:	vneg.f64	d2, d4
    39dc:	vmov	d7, sl, fp
    39e0:	vdiv.f64	d6, d7, d4
    39e4:	vcvt.s32.f64	s12, d6
    39e8:	ldr	r2, [sp, #32]
    39ea:	vmov	r3, s12
    39ee:	cmp	r7, #1
    39f0:	add.w	r3, r3, #48	; 0x30
    39f4:	vcvt.f64.s32	d5, s12
    39f8:	add.w	fp, r2, #1
    39fc:	strb	r3, [r2, #0]
    39fe:	vfma.f64	d7, d2, d5
    3a02:	beq.n	3a4a <_dtoa_r+0x28a>
    3a04:	vmov.f64	d3, #36	; 0x41200000  10.0
    3a08:	vmul.f64	d7, d7, d3
    3a0c:	vcmp.f64	d7, #0.0
    3a10:	vmrs	APSR_nzcv, fpscr
    3a14:	beq.n	3a8c <_dtoa_r+0x2cc>
    3a16:	ldr	r2, [sp, #32]
    3a18:	b.n	3a28 <_dtoa_r+0x268>
    3a1a:	vmul.f64	d7, d7, d3
    3a1e:	vcmp.f64	d7, #0.0
    3a22:	vmrs	APSR_nzcv, fpscr
    3a26:	beq.n	3a8c <_dtoa_r+0x2cc>
    3a28:	vdiv.f64	d6, d7, d4
    3a2c:	vcvt.s32.f64	s12, d6
    3a30:	vmov	r3, s12
    3a34:	adds	r3, #48	; 0x30
    3a36:	strb.w	r3, [fp], #1
    3a3a:	rsb	r3, r2, fp
    3a3e:	cmp	r3, r7
    3a40:	vcvt.f64.s32	d5, s12
    3a44:	vfma.f64	d7, d2, d5
    3a48:	bne.n	3a1a <_dtoa_r+0x25a>
    3a4a:	vadd.f64	d7, d7, d7
    3a4e:	vcmpe.f64	d4, d7
    3a52:	vmrs	APSR_nzcv, fpscr
    3a56:	bmi.n	3a6a <_dtoa_r+0x2aa>
    3a58:	vcmp.f64	d4, d7
    3a5c:	vmrs	APSR_nzcv, fpscr
    3a60:	bne.n	3a8c <_dtoa_r+0x2cc>
    3a62:	vmov	r3, s12
    3a66:	lsls	r3, r3, #31
    3a68:	bpl.n	3a8c <_dtoa_r+0x2cc>
    3a6a:	ldrb.w	r0, [fp, #-1]
    3a6e:	ldr	r2, [sp, #32]
    3a70:	add.w	r3, fp, #4294967295
    3a74:	b.n	3a80 <_dtoa_r+0x2c0>
    3a76:	cmp	r2, r3
    3a78:	beq.w	4246 <_dtoa_r+0xa86>
    3a7c:	ldrb.w	r0, [r3, #-1]!
    3a80:	cmp	r0, #57	; 0x39
    3a82:	add.w	fp, r3, #1
    3a86:	beq.n	3a76 <_dtoa_r+0x2b6>
    3a88:	adds	r0, #1
    3a8a:	strb	r0, [r3, #0]
    3a8c:	ldr	r1, [sp, #28]
    3a8e:	mov	r0, r4
    3a90:	bl	2ffc <_Bfree>
    3a94:	movs	r2, #0
    3a96:	ldr	r3, [sp, #8]
    3a98:	strb.w	r2, [fp]
    3a9c:	ldr	r2, [sp, #16]
    3a9e:	adds	r3, #1
    3aa0:	str	r3, [r2, #0]
    3aa2:	ldr	r3, [sp, #116]	; 0x74
    3aa4:	cmp	r3, #0
    3aa6:	beq.w	4176 <_dtoa_r+0x9b6>
    3aaa:	ldr	r0, [sp, #32]
    3aac:	str.w	fp, [r3]
    3ab0:	add	sp, #76	; 0x4c
    3ab2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ab6:	ldr	r2, [sp, #36]	; 0x24
    3ab8:	cmp	r2, #0
    3aba:	beq.n	3b64 <_dtoa_r+0x3a4>
    3abc:	ldr	r2, [sp, #4]
    3abe:	cmp	r2, #1
    3ac0:	ble.w	3f20 <_dtoa_r+0x760>
    3ac4:	ldr	r1, [sp, #20]
    3ac6:	subs	r2, r7, #1
    3ac8:	cmp	r1, r2
    3aca:	blt.w	417c <_dtoa_r+0x9bc>
    3ace:	subs	r3, r1, r2
    3ad0:	str	r3, [sp, #56]	; 0x38
    3ad2:	cmp	r7, #0
    3ad4:	ldr	r3, [sp, #24]
    3ad6:	blt.w	4322 <_dtoa_r+0xb62>
    3ada:	str	r3, [sp, #40]	; 0x28
    3adc:	mov	r3, r7
    3ade:	ldr	r2, [sp, #24]
    3ae0:	movs	r1, #1
    3ae2:	add	r2, r3
    3ae4:	mov	r0, r4
    3ae6:	str	r2, [sp, #24]
    3ae8:	add	r9, r3
    3aea:	bl	312c <__i2b>
    3aee:	mov	r6, r0
    3af0:	b.n	3b6e <_dtoa_r+0x3ae>
    3af2:	nop
    3af4:	nop.w
    3af8:	.word	0x636f4361
    3afc:	.word	0x3fd287a7
    3b00:	.word	0x8b60c8b3
    3b04:	.word	0x3fc68a28
    3b08:	.word	0x509f79fb
    3b0c:	.word	0x3fd34413
    3b10:	.word	0x7ff00000
    3b14:	.word	0x2000055d
    3b18:	.word	0x20000558
    3b1c:	.word	0x20000450
    3b20:	.word	0x2000054c
    3b24:	.word	0x2000055c
    3b28:	movs	r3, #1
    3b2a:	str	r3, [sp, #48]	; 0x30
    3b2c:	b.n	3920 <_dtoa_r+0x160>
    3b2e:	vcvt.f64.s32	d6, s13
    3b32:	vcmp.f64	d7, d6
    3b36:	vmrs	APSR_nzcv, fpscr
    3b3a:	beq.w	38f6 <_dtoa_r+0x136>
    3b3e:	ldr	r3, [sp, #8]
    3b40:	subs	r3, #1
    3b42:	str	r3, [sp, #8]
    3b44:	b.n	38f6 <_dtoa_r+0x136>
    3b46:	ldr	r2, [sp, #24]
    3b48:	ldr	r3, [sp, #8]
    3b4a:	subs	r2, r2, r3
    3b4c:	negs	r3, r3
    3b4e:	str	r3, [sp, #20]
    3b50:	movs	r3, #0
    3b52:	str	r2, [sp, #24]
    3b54:	str	r3, [sp, #44]	; 0x2c
    3b56:	b.n	393e <_dtoa_r+0x17e>
    3b58:	rsb	r3, r9, #0
    3b5c:	str	r3, [sp, #24]
    3b5e:	mov.w	r9, #0
    3b62:	b.n	392e <_dtoa_r+0x16e>
    3b64:	ldr	r3, [sp, #20]
    3b66:	str	r3, [sp, #56]	; 0x38
    3b68:	ldr	r6, [sp, #36]	; 0x24
    3b6a:	ldr	r3, [sp, #24]
    3b6c:	str	r3, [sp, #40]	; 0x28
    3b6e:	ldr	r1, [sp, #40]	; 0x28
    3b70:	mov	r3, r1
    3b72:	cbz	r1, 3b8e <_dtoa_r+0x3ce>
    3b74:	cmp.w	r9, #0
    3b78:	ble.n	3b8e <_dtoa_r+0x3ce>
    3b7a:	cmp	r1, r9
    3b7c:	ldr	r2, [sp, #24]
    3b7e:	it	ge
    3b80:	movge	r3, r9
    3b82:	subs	r2, r2, r3
    3b84:	str	r2, [sp, #24]
    3b86:	subs	r2, r1, r3
    3b88:	str	r2, [sp, #40]	; 0x28
    3b8a:	rsb	r9, r3, r9
    3b8e:	ldr	r3, [sp, #20]
    3b90:	cmp	r3, #0
    3b92:	ble.w	4096 <_dtoa_r+0x8d6>
    3b96:	ldr	r2, [sp, #36]	; 0x24
    3b98:	cmp	r2, #0
    3b9a:	beq.w	3ed2 <_dtoa_r+0x712>
    3b9e:	ldr	r2, [sp, #56]	; 0x38
    3ba0:	cmp	r2, #0
    3ba2:	beq.w	3ed2 <_dtoa_r+0x712>
    3ba6:	mov	r1, r6
    3ba8:	mov	r0, r4
    3baa:	bl	3270 <__pow5mult>
    3bae:	ldr	r2, [sp, #28]
    3bb0:	mov	r1, r0
    3bb2:	mov	r6, r0
    3bb4:	mov	r0, r4
    3bb6:	bl	3140 <__multiply>
    3bba:	ldr	r1, [sp, #28]
    3bbc:	mov	r5, r0
    3bbe:	mov	r0, r4
    3bc0:	bl	2ffc <_Bfree>
    3bc4:	ldr	r3, [sp, #20]
    3bc6:	ldr	r2, [sp, #56]	; 0x38
    3bc8:	subs	r3, r3, r2
    3bca:	str	r3, [sp, #20]
    3bcc:	bne.w	3ed0 <_dtoa_r+0x710>
    3bd0:	movs	r1, #1
    3bd2:	mov	r0, r4
    3bd4:	bl	312c <__i2b>
    3bd8:	ldr	r3, [sp, #44]	; 0x2c
    3bda:	str	r0, [sp, #20]
    3bdc:	cmp	r3, #0
    3bde:	beq.w	3f3a <_dtoa_r+0x77a>
    3be2:	mov	r1, r0
    3be4:	mov	r2, r3
    3be6:	mov	r0, r4
    3be8:	bl	3270 <__pow5mult>
    3bec:	ldr	r3, [sp, #4]
    3bee:	str	r0, [sp, #20]
    3bf0:	cmp	r3, #1
    3bf2:	ble.w	40f6 <_dtoa_r+0x936>
    3bf6:	movs	r3, #0
    3bf8:	str	r3, [sp, #28]
    3bfa:	ldr	r2, [sp, #20]
    3bfc:	ldr	r3, [r2, #16]
    3bfe:	add.w	r3, r2, r3, lsl #2
    3c02:	ldr	r0, [r3, #16]
    3c04:	bl	3090 <__hi0bits>
    3c08:	rsb	r0, r0, #32
    3c0c:	add	r0, r9
    3c0e:	ands.w	r0, r0, #31
    3c12:	beq.w	3f36 <_dtoa_r+0x776>
    3c16:	rsb	r3, r0, #32
    3c1a:	cmp	r3, #4
    3c1c:	ble.w	4410 <_dtoa_r+0xc50>
    3c20:	rsb	r0, r0, #28
    3c24:	ldr	r3, [sp, #24]
    3c26:	add	r3, r0
    3c28:	str	r3, [sp, #24]
    3c2a:	ldr	r3, [sp, #40]	; 0x28
    3c2c:	add	r3, r0
    3c2e:	str	r3, [sp, #40]	; 0x28
    3c30:	add	r9, r0
    3c32:	ldr	r3, [sp, #24]
    3c34:	cmp	r3, #0
    3c36:	ble.n	3c44 <_dtoa_r+0x484>
    3c38:	mov	r1, r5
    3c3a:	mov	r2, r3
    3c3c:	mov	r0, r4
    3c3e:	bl	3310 <__lshift>
    3c42:	mov	r5, r0
    3c44:	cmp.w	r9, #0
    3c48:	ble.n	3c56 <_dtoa_r+0x496>
    3c4a:	mov	r2, r9
    3c4c:	ldr	r1, [sp, #20]
    3c4e:	mov	r0, r4
    3c50:	bl	3310 <__lshift>
    3c54:	str	r0, [sp, #20]
    3c56:	ldr	r3, [sp, #48]	; 0x30
    3c58:	cmp	r3, #0
    3c5a:	bne.w	4060 <_dtoa_r+0x8a0>
    3c5e:	cmp	r7, #0
    3c60:	ble.w	40a4 <_dtoa_r+0x8e4>
    3c64:	ldr	r3, [sp, #36]	; 0x24
    3c66:	cmp	r3, #0
    3c68:	bne.w	3f62 <_dtoa_r+0x7a2>
    3c6c:	ldr.w	fp, [sp, #32]
    3c70:	ldr.w	sl, [sp, #20]
    3c74:	mov	r8, fp
    3c76:	b.n	3c7e <_dtoa_r+0x4be>
    3c78:	bl	3010 <__multadd>
    3c7c:	mov	r5, r0
    3c7e:	mov	r1, sl
    3c80:	mov	r0, r5
    3c82:	bl	3694 <quorem>
    3c86:	add.w	r9, r0, #48	; 0x30
    3c8a:	strb.w	r9, [r8], #1
    3c8e:	rsb	r3, fp, r8
    3c92:	cmp	r3, r7
    3c94:	mov.w	r2, #10
    3c98:	mov.w	r3, #0
    3c9c:	mov	r1, r5
    3c9e:	mov	r0, r4
    3ca0:	blt.n	3c78 <_dtoa_r+0x4b8>
    3ca2:	ldr	r3, [sp, #32]
    3ca4:	cmp	r7, #1
    3ca6:	ite	ge
    3ca8:	addge	r3, r3, r7
    3caa:	addlt	r3, #1
    3cac:	mov	fp, r3
    3cae:	mov.w	sl, #0
    3cb2:	mov	r1, r5
    3cb4:	movs	r2, #1
    3cb6:	mov	r0, r4
    3cb8:	bl	3310 <__lshift>
    3cbc:	ldr	r1, [sp, #20]
    3cbe:	str	r0, [sp, #28]
    3cc0:	bl	33c0 <__mcmp>
    3cc4:	cmp	r0, #0
    3cc6:	ble.w	41e2 <_dtoa_r+0xa22>
    3cca:	ldrb.w	r2, [fp, #-1]
    3cce:	ldr	r1, [sp, #32]
    3cd0:	add.w	r3, fp, #4294967295
    3cd4:	b.n	3ce0 <_dtoa_r+0x520>
    3cd6:	cmp	r3, r1
    3cd8:	beq.w	40e2 <_dtoa_r+0x922>
    3cdc:	ldrb.w	r2, [r3, #-1]!
    3ce0:	cmp	r2, #57	; 0x39
    3ce2:	add.w	fp, r3, #1
    3ce6:	beq.n	3cd6 <_dtoa_r+0x516>
    3ce8:	adds	r2, #1
    3cea:	strb	r2, [r3, #0]
    3cec:	ldr	r1, [sp, #20]
    3cee:	mov	r0, r4
    3cf0:	bl	2ffc <_Bfree>
    3cf4:	cmp	r6, #0
    3cf6:	beq.w	3a8c <_dtoa_r+0x2cc>
    3cfa:	cmp.w	sl, #0
    3cfe:	beq.n	3d0c <_dtoa_r+0x54c>
    3d00:	cmp	sl, r6
    3d02:	beq.n	3d0c <_dtoa_r+0x54c>
    3d04:	mov	r1, sl
    3d06:	mov	r0, r4
    3d08:	bl	2ffc <_Bfree>
    3d0c:	mov	r1, r6
    3d0e:	mov	r0, r4
    3d10:	bl	2ffc <_Bfree>
    3d14:	b.n	3a8c <_dtoa_r+0x2cc>
    3d16:	rsb	r3, r3, #32
    3d1a:	lsl.w	r3, sl, r3
    3d1e:	vmov	s15, r3
    3d22:	b.n	38a8 <_dtoa_r+0xe8>
    3d24:	movs	r3, #0
    3d26:	str	r3, [sp, #48]	; 0x30
    3d28:	b.n	3920 <_dtoa_r+0x160>
    3d2a:	movs	r3, #0
    3d2c:	str	r3, [sp, #36]	; 0x24
    3d2e:	ldr	r3, [sp, #8]
    3d30:	add	r3, r8
    3d32:	adds	r7, r3, #1
    3d34:	cmp	r7, #0
    3d36:	str	r3, [sp, #52]	; 0x34
    3d38:	ble.w	4196 <_dtoa_r+0x9d6>
    3d3c:	mov	r6, r7
    3d3e:	mov	r5, r7
    3d40:	movs	r1, #0
    3d42:	cmp	r6, #23
    3d44:	str	r1, [r4, #68]	; 0x44
    3d46:	bls.n	3d5e <_dtoa_r+0x59e>
    3d48:	movs	r2, #1
    3d4a:	movs	r3, #4
    3d4c:	lsls	r3, r3, #1
    3d4e:	add.w	r0, r3, #20
    3d52:	cmp	r0, r6
    3d54:	mov	r1, r2
    3d56:	add.w	r2, r2, #1
    3d5a:	bls.n	3d4c <_dtoa_r+0x58c>
    3d5c:	str	r1, [r4, #68]	; 0x44
    3d5e:	mov	r0, r4
    3d60:	bl	2fb0 <_Balloc>
    3d64:	cmp	r5, #14
    3d66:	str	r0, [sp, #32]
    3d68:	str	r0, [r4, #64]	; 0x40
    3d6a:	bhi.w	39ba <_dtoa_r+0x1fa>
    3d6e:	ldr	r3, [sp, #56]	; 0x38
    3d70:	cmp	r3, #0
    3d72:	beq.w	39ba <_dtoa_r+0x1fa>
    3d76:	ldr	r1, [sp, #8]
    3d78:	cmp	r1, #0
    3d7a:	strd	sl, fp, [sp, #56]	; 0x38
    3d7e:	ble.w	4204 <_dtoa_r+0xa44>
    3d82:	ldr	r3, [pc, #792]	; (409c <_dtoa_r+0x8dc>)
    3d84:	and.w	r2, r1, #15
    3d88:	add.w	r2, r3, r2, lsl #3
    3d8c:	asrs	r3, r1, #4
    3d8e:	lsls	r6, r3, #27
    3d90:	vldr	d6, [r2]
    3d94:	bpl.w	418e <_dtoa_r+0x9ce>
    3d98:	ldr	r2, [pc, #772]	; (40a0 <_dtoa_r+0x8e0>)
    3d9a:	vldr	d7, [r2, #32]
    3d9e:	vmov	d4, sl, fp
    3da2:	and.w	r3, r3, #15
    3da6:	movs	r1, #3
    3da8:	vdiv.f64	d5, d4, d7
    3dac:	cbz	r3, 3dc6 <_dtoa_r+0x606>
    3dae:	ldr	r2, [pc, #752]	; (40a0 <_dtoa_r+0x8e0>)
    3db0:	lsls	r5, r3, #31
    3db2:	bpl.n	3dbe <_dtoa_r+0x5fe>
    3db4:	vldr	d7, [r2]
    3db8:	adds	r1, #1
    3dba:	vmul.f64	d6, d6, d7
    3dbe:	asrs	r3, r3, #1
    3dc0:	add.w	r2, r2, #8
    3dc4:	bne.n	3db0 <_dtoa_r+0x5f0>
    3dc6:	vdiv.f64	d4, d5, d6
    3dca:	ldr	r3, [sp, #48]	; 0x30
    3dcc:	cbz	r3, 3dde <_dtoa_r+0x61e>
    3dce:	vmov.f64	d7, #112	; 0x3f800000  1.0
    3dd2:	vcmpe.f64	d4, d7
    3dd6:	vmrs	APSR_nzcv, fpscr
    3dda:	bmi.w	434c <_dtoa_r+0xb8c>
    3dde:	vmov	s15, r1
    3de2:	vcvt.f64.s32	d6, s15
    3de6:	vmov.f64	d7, #28	; 0x40e00000  7.0
    3dea:	vfma.f64	d7, d6, d4
    3dee:	vmov	r2, r3, d7
    3df2:	sub.w	r3, r3, #54525952	; 0x3400000
    3df6:	cmp	r7, #0
    3df8:	beq.w	4148 <_dtoa_r+0x988>
    3dfc:	ldr	r6, [sp, #8]
    3dfe:	mov	r1, r7
    3e00:	ldr	r0, [sp, #36]	; 0x24
    3e02:	cmp	r0, #0
    3e04:	beq.w	42a2 <_dtoa_r+0xae2>
    3e08:	vmov.f64	d3, #96	; 0x3f000000  0.5
    3e0c:	ldr	r0, [pc, #652]	; (409c <_dtoa_r+0x8dc>)
    3e0e:	ldr	r5, [sp, #32]
    3e10:	add.w	r0, r0, r1, lsl #3
    3e14:	vldr	d6, [r0, #-8]
    3e18:	vcvt.s32.f64	s14, d4
    3e1c:	vdiv.f64	d5, d3, d6
    3e20:	vmov	r0, s14
    3e24:	vmov	d6, r2, r3
    3e28:	adds	r0, #48	; 0x30
    3e2a:	uxtb	r0, r0
    3e2c:	vsub.f64	d5, d5, d6
    3e30:	vcvt.f64.s32	d7, s14
    3e34:	vsub.f64	d7, d4, d7
    3e38:	vcmpe.f64	d5, d7
    3e3c:	vmrs	APSR_nzcv, fpscr
    3e40:	strb	r0, [r5, #0]
    3e42:	add.w	fp, r5, #1
    3e46:	bgt.n	3eae <_dtoa_r+0x6ee>
    3e48:	vmov.f64	d3, #112	; 0x3f800000  1.0
    3e4c:	vsub.f64	d6, d3, d7
    3e50:	vcmpe.f64	d5, d6
    3e54:	vmrs	APSR_nzcv, fpscr
    3e58:	bgt.w	43b8 <_dtoa_r+0xbf8>
    3e5c:	cmp	r1, #1
    3e5e:	ble.w	41fc <_dtoa_r+0xa3c>
    3e62:	vmov.f64	d4, #36	; 0x41200000  10.0
    3e66:	ldr	r3, [sp, #32]
    3e68:	add	r1, r3
    3e6a:	b.n	3e82 <_dtoa_r+0x6c2>
    3e6c:	vsub.f64	d6, d3, d7
    3e70:	vcmpe.f64	d6, d5
    3e74:	vmrs	APSR_nzcv, fpscr
    3e78:	bmi.w	43b8 <_dtoa_r+0xbf8>
    3e7c:	cmp	fp, r1
    3e7e:	beq.w	41fc <_dtoa_r+0xa3c>
    3e82:	vmul.f64	d7, d7, d4
    3e86:	vmul.f64	d5, d5, d4
    3e8a:	vcvt.s32.f64	s12, d7
    3e8e:	vmov	r3, s12
    3e92:	add.w	r0, r3, #48	; 0x30
    3e96:	uxtb	r0, r0
    3e98:	vcvt.f64.s32	d6, s12
    3e9c:	vsub.f64	d7, d7, d6
    3ea0:	vcmpe.f64	d7, d5
    3ea4:	vmrs	APSR_nzcv, fpscr
    3ea8:	strb.w	r0, [fp], #1
    3eac:	bpl.n	3e6c <_dtoa_r+0x6ac>
    3eae:	str	r6, [sp, #8]
    3eb0:	b.n	3a8c <_dtoa_r+0x2cc>
    3eb2:	movs	r3, #0
    3eb4:	str	r3, [sp, #36]	; 0x24
    3eb6:	cmp.w	r8, #0
    3eba:	ble.w	419e <_dtoa_r+0x9de>
    3ebe:	mov	r6, r8
    3ec0:	mov	r5, r8
    3ec2:	str.w	r8, [sp, #52]	; 0x34
    3ec6:	mov	r7, r8
    3ec8:	b.n	3d40 <_dtoa_r+0x580>
    3eca:	movs	r3, #1
    3ecc:	str	r3, [sp, #36]	; 0x24
    3ece:	b.n	3eb6 <_dtoa_r+0x6f6>
    3ed0:	str	r5, [sp, #28]
    3ed2:	ldr	r2, [sp, #20]
    3ed4:	ldr	r1, [sp, #28]
    3ed6:	mov	r0, r4
    3ed8:	bl	3270 <__pow5mult>
    3edc:	mov	r5, r0
    3ede:	b.n	3bd0 <_dtoa_r+0x410>
    3ee0:	cmp	r7, #0
    3ee2:	bgt.w	39d8 <_dtoa_r+0x218>
    3ee6:	bne.w	416e <_dtoa_r+0x9ae>
    3eea:	vmov.f64	d7, #20	; 0x40a00000  5.0
    3eee:	vmul.f64	d4, d4, d7
    3ef2:	vmov	d7, sl, fp
    3ef6:	vcmpe.f64	d4, d7
    3efa:	vmrs	APSR_nzcv, fpscr
    3efe:	mov	r6, r7
    3f00:	str	r7, [sp, #20]
    3f02:	blt.w	40d0 <_dtoa_r+0x910>
    3f06:	mvn.w	r3, r8
    3f0a:	ldr.w	fp, [sp, #32]
    3f0e:	str	r3, [sp, #8]
    3f10:	ldr	r1, [sp, #20]
    3f12:	mov	r0, r4
    3f14:	bl	2ffc <_Bfree>
    3f18:	cmp	r6, #0
    3f1a:	beq.w	3a8c <_dtoa_r+0x2cc>
    3f1e:	b.n	3d0c <_dtoa_r+0x54c>
    3f20:	ldr	r2, [sp, #40]	; 0x28
    3f22:	cmp	r2, #0
    3f24:	beq.w	432c <_dtoa_r+0xb6c>
    3f28:	ldr	r2, [sp, #20]
    3f2a:	str	r2, [sp, #56]	; 0x38
    3f2c:	ldr	r2, [sp, #24]
    3f2e:	str	r2, [sp, #40]	; 0x28
    3f30:	addw	r3, r3, #1075	; 0x433
    3f34:	b.n	3ade <_dtoa_r+0x31e>
    3f36:	movs	r0, #28
    3f38:	b.n	3c24 <_dtoa_r+0x464>
    3f3a:	ldr	r3, [sp, #4]
    3f3c:	cmp	r3, #1
    3f3e:	ble.w	43c2 <_dtoa_r+0xc02>
    3f42:	ldr	r3, [sp, #44]	; 0x2c
    3f44:	str	r3, [sp, #28]
    3f46:	movs	r0, #1
    3f48:	b.n	3c0c <_dtoa_r+0x44c>
    3f4a:	mov	r1, r6
    3f4c:	movs	r3, #0
    3f4e:	movs	r2, #10
    3f50:	mov	r0, r4
    3f52:	bl	3010 <__multadd>
    3f56:	ldr	r3, [sp, #52]	; 0x34
    3f58:	cmp	r3, #0
    3f5a:	mov	r6, r0
    3f5c:	ble.w	43fa <_dtoa_r+0xc3a>
    3f60:	mov	r7, r3
    3f62:	ldr	r3, [sp, #40]	; 0x28
    3f64:	cmp	r3, #0
    3f66:	ble.n	3f74 <_dtoa_r+0x7b4>
    3f68:	mov	r1, r6
    3f6a:	mov	r2, r3
    3f6c:	mov	r0, r4
    3f6e:	bl	3310 <__lshift>
    3f72:	mov	r6, r0
    3f74:	ldr	r3, [sp, #28]
    3f76:	cmp	r3, #0
    3f78:	bne.w	4258 <_dtoa_r+0xa98>
    3f7c:	mov	r8, r6
    3f7e:	ldr	r3, [sp, #32]
    3f80:	subs	r7, #1
    3f82:	adds	r2, r3, r7
    3f84:	str	r2, [sp, #36]	; 0x24
    3f86:	and.w	r2, sl, #1
    3f8a:	str	r2, [sp, #40]	; 0x28
    3f8c:	mov	r7, r3
    3f8e:	ldr.w	fp, [sp, #20]
    3f92:	mov	r0, r5
    3f94:	mov	r1, fp
    3f96:	bl	3694 <quorem>
    3f9a:	mov	r1, r6
    3f9c:	mov	sl, r0
    3f9e:	mov	r0, r5
    3fa0:	bl	33c0 <__mcmp>
    3fa4:	mov	r2, r8
    3fa6:	mov	r1, fp
    3fa8:	mov	r9, r0
    3faa:	mov	r0, r4
    3fac:	bl	3404 <__mdiff>
    3fb0:	ldr	r3, [r0, #12]
    3fb2:	mov	fp, r0
    3fb4:	add.w	r2, sl, #48	; 0x30
    3fb8:	cmp	r3, #0
    3fba:	bne.n	4050 <_dtoa_r+0x890>
    3fbc:	mov	r1, r0
    3fbe:	mov	r0, r5
    3fc0:	str	r2, [sp, #28]
    3fc2:	bl	33c0 <__mcmp>
    3fc6:	mov	r1, fp
    3fc8:	str	r0, [sp, #24]
    3fca:	mov	r0, r4
    3fcc:	bl	2ffc <_Bfree>
    3fd0:	ldr	r3, [sp, #24]
    3fd2:	ldr	r2, [sp, #28]
    3fd4:	cbnz	r3, 3fe2 <_dtoa_r+0x822>
    3fd6:	ldr	r1, [sp, #4]
    3fd8:	cbnz	r1, 3fe2 <_dtoa_r+0x822>
    3fda:	ldr	r1, [sp, #40]	; 0x28
    3fdc:	cmp	r1, #0
    3fde:	beq.w	43cc <_dtoa_r+0xc0c>
    3fe2:	cmp.w	r9, #0
    3fe6:	blt.w	41a8 <_dtoa_r+0x9e8>
    3fea:	bne.n	3ff8 <_dtoa_r+0x838>
    3fec:	ldr	r1, [sp, #4]
    3fee:	cbnz	r1, 3ff8 <_dtoa_r+0x838>
    3ff0:	ldr	r1, [sp, #40]	; 0x28
    3ff2:	cmp	r1, #0
    3ff4:	beq.w	41a8 <_dtoa_r+0x9e8>
    3ff8:	cmp	r3, #0
    3ffa:	bgt.w	4280 <_dtoa_r+0xac0>
    3ffe:	ldr	r3, [sp, #36]	; 0x24
    4000:	strb	r2, [r7, #0]
    4002:	add.w	r9, r7, #1
    4006:	cmp	r7, r3
    4008:	mov	fp, r9
    400a:	beq.w	429a <_dtoa_r+0xada>
    400e:	mov	r1, r5
    4010:	movs	r3, #0
    4012:	movs	r2, #10
    4014:	mov	r0, r4
    4016:	bl	3010 <__multadd>
    401a:	cmp	r6, r8
    401c:	mov	r5, r0
    401e:	mov	r1, r6
    4020:	mov.w	r3, #0
    4024:	mov.w	r2, #10
    4028:	mov	r0, r4
    402a:	beq.n	4044 <_dtoa_r+0x884>
    402c:	bl	3010 <__multadd>
    4030:	mov	r1, r8
    4032:	mov	r6, r0
    4034:	movs	r3, #0
    4036:	movs	r2, #10
    4038:	mov	r0, r4
    403a:	bl	3010 <__multadd>
    403e:	mov	r7, r9
    4040:	mov	r8, r0
    4042:	b.n	3f8e <_dtoa_r+0x7ce>
    4044:	bl	3010 <__multadd>
    4048:	mov	r7, r9
    404a:	mov	r6, r0
    404c:	mov	r8, r0
    404e:	b.n	3f8e <_dtoa_r+0x7ce>
    4050:	mov	r1, r0
    4052:	mov	r0, r4
    4054:	str	r2, [sp, #24]
    4056:	bl	2ffc <_Bfree>
    405a:	movs	r3, #1
    405c:	ldr	r2, [sp, #24]
    405e:	b.n	3fe2 <_dtoa_r+0x822>
    4060:	ldr	r1, [sp, #20]
    4062:	mov	r0, r5
    4064:	bl	33c0 <__mcmp>
    4068:	cmp	r0, #0
    406a:	bge.w	3c5e <_dtoa_r+0x49e>
    406e:	mov	r1, r5
    4070:	ldr	r5, [sp, #8]
    4072:	movs	r3, #0
    4074:	subs	r5, #1
    4076:	movs	r2, #10
    4078:	mov	r0, r4
    407a:	str	r5, [sp, #8]
    407c:	bl	3010 <__multadd>
    4080:	ldr	r3, [sp, #36]	; 0x24
    4082:	mov	r5, r0
    4084:	cmp	r3, #0
    4086:	bne.w	3f4a <_dtoa_r+0x78a>
    408a:	ldr	r3, [sp, #52]	; 0x34
    408c:	cmp	r3, #0
    408e:	ble.w	43ec <_dtoa_r+0xc2c>
    4092:	mov	r7, r3
    4094:	b.n	3c6c <_dtoa_r+0x4ac>
    4096:	ldr	r5, [sp, #28]
    4098:	b.n	3bd0 <_dtoa_r+0x410>
    409a:	nop
    409c:	.word	0x20000450
    40a0:	.word	0x20000518
    40a4:	ldr	r3, [sp, #4]
    40a6:	cmp	r3, #2
    40a8:	ble.w	3c64 <_dtoa_r+0x4a4>
    40ac:	cmp	r7, #0
    40ae:	bne.w	4384 <_dtoa_r+0xbc4>
    40b2:	mov	r3, r7
    40b4:	ldr	r1, [sp, #20]
    40b6:	movs	r2, #5
    40b8:	mov	r0, r4
    40ba:	bl	3010 <__multadd>
    40be:	mov	r1, r0
    40c0:	str	r0, [sp, #20]
    40c2:	mov	r0, r5
    40c4:	bl	33c0 <__mcmp>
    40c8:	cmp	r0, #0
    40ca:	str	r5, [sp, #28]
    40cc:	ble.w	3f06 <_dtoa_r+0x746>
    40d0:	ldr	r2, [sp, #8]
    40d2:	ldr	r1, [sp, #32]
    40d4:	movs	r3, #49	; 0x31
    40d6:	adds	r2, #1
    40d8:	str	r2, [sp, #8]
    40da:	strb	r3, [r1, #0]
    40dc:	add.w	fp, r1, #1
    40e0:	b.n	3f10 <_dtoa_r+0x750>
    40e2:	ldr	r2, [sp, #8]
    40e4:	adds	r2, #1
    40e6:	str	r2, [sp, #8]
    40e8:	ldr	r2, [sp, #32]
    40ea:	movs	r3, #49	; 0x31
    40ec:	strb	r3, [r2, #0]
    40ee:	b.n	3cec <_dtoa_r+0x52c>
    40f0:	movs	r3, #1
    40f2:	str	r3, [sp, #36]	; 0x24
    40f4:	b.n	3d2e <_dtoa_r+0x56e>
    40f6:	cmp.w	sl, #0
    40fa:	bne.w	3bf6 <_dtoa_r+0x436>
    40fe:	ubfx	r3, fp, #0, #20
    4102:	cmp	r3, #0
    4104:	bne.w	433e <_dtoa_r+0xb7e>
    4108:	bic.w	r3, fp, #2147483648	; 0x80000000
    410c:	lsrs	r3, r3, #20
    410e:	lsls	r3, r3, #20
    4110:	cmp	r3, #0
    4112:	beq.w	43be <_dtoa_r+0xbfe>
    4116:	ldr	r3, [sp, #24]
    4118:	adds	r3, #1
    411a:	str	r3, [sp, #24]
    411c:	movs	r3, #1
    411e:	add.w	r9, r9, #1
    4122:	str	r3, [sp, #28]
    4124:	ldr	r3, [sp, #44]	; 0x2c
    4126:	movs	r0, #1
    4128:	cmp	r3, #0
    412a:	beq.w	3c0c <_dtoa_r+0x44c>
    412e:	b.n	3bfa <_dtoa_r+0x43a>
    4130:	vmov	s15, r1
    4134:	vcvt.f64.s32	d6, s15
    4138:	vmov.f64	d7, #28	; 0x40e00000  7.0
    413c:	vfma.f64	d7, d4, d6
    4140:	vmov	r2, r3, d7
    4144:	sub.w	r3, r3, #54525952	; 0x3400000
    4148:	vmov	d6, r2, r3
    414c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    4150:	vsub.f64	d7, d4, d7
    4154:	vcmpe.f64	d7, d6
    4158:	vmrs	APSR_nzcv, fpscr
    415c:	bgt.w	431a <_dtoa_r+0xb5a>
    4160:	vneg.f64	d6, d6
    4164:	vcmpe.f64	d7, d6
    4168:	vmrs	APSR_nzcv, fpscr
    416c:	bpl.n	41fc <_dtoa_r+0xa3c>
    416e:	movs	r3, #0
    4170:	str	r3, [sp, #20]
    4172:	mov	r6, r3
    4174:	b.n	3f06 <_dtoa_r+0x746>
    4176:	ldr	r0, [sp, #32]
    4178:	b.w	382e <_dtoa_r+0x6e>
    417c:	ldr	r3, [sp, #20]
    417e:	ldr	r1, [sp, #44]	; 0x2c
    4180:	str	r2, [sp, #20]
    4182:	subs	r3, r2, r3
    4184:	add	r1, r3
    4186:	movs	r3, #0
    4188:	str	r1, [sp, #44]	; 0x2c
    418a:	str	r3, [sp, #56]	; 0x38
    418c:	b.n	3ad2 <_dtoa_r+0x312>
    418e:	vldr	d5, [sp, #56]	; 0x38
    4192:	movs	r1, #2
    4194:	b.n	3dac <_dtoa_r+0x5ec>
    4196:	mov	r5, r7
    4198:	movs	r1, #0
    419a:	str	r1, [r4, #68]	; 0x44
    419c:	b.n	3d5e <_dtoa_r+0x59e>
    419e:	movs	r5, #1
    41a0:	str	r5, [sp, #52]	; 0x34
    41a2:	mov	r7, r5
    41a4:	mov	r8, r5
    41a6:	b.n	4198 <_dtoa_r+0x9d8>
    41a8:	cmp	r3, #0
    41aa:	mov	r9, r2
    41ac:	ble.n	41d2 <_dtoa_r+0xa12>
    41ae:	mov	r1, r5
    41b0:	movs	r2, #1
    41b2:	mov	r0, r4
    41b4:	bl	3310 <__lshift>
    41b8:	ldr	r1, [sp, #20]
    41ba:	mov	r5, r0
    41bc:	bl	33c0 <__mcmp>
    41c0:	cmp	r0, #0
    41c2:	ble.w	43de <_dtoa_r+0xc1e>
    41c6:	cmp.w	r9, #57	; 0x39
    41ca:	beq.w	4388 <_dtoa_r+0xbc8>
    41ce:	add.w	r9, sl, #49	; 0x31
    41d2:	mov	sl, r6
    41d4:	strb.w	r9, [r7]
    41d8:	add.w	fp, r7, #1
    41dc:	mov	r6, r8
    41de:	str	r5, [sp, #28]
    41e0:	b.n	3cec <_dtoa_r+0x52c>
    41e2:	bne.n	41ee <_dtoa_r+0xa2e>
    41e4:	tst.w	r9, #1
    41e8:	beq.n	41ee <_dtoa_r+0xa2e>
    41ea:	b.n	3cca <_dtoa_r+0x50a>
    41ec:	mov	fp, r2
    41ee:	ldrb.w	r3, [fp, #-1]
    41f2:	cmp	r3, #48	; 0x30
    41f4:	add.w	r2, fp, #4294967295
    41f8:	beq.n	41ec <_dtoa_r+0xa2c>
    41fa:	b.n	3cec <_dtoa_r+0x52c>
    41fc:	ldrd	sl, fp, [sp, #56]	; 0x38
    4200:	b.w	39ba <_dtoa_r+0x1fa>
    4204:	ldr	r3, [sp, #8]
    4206:	negs	r3, r3
    4208:	cmp	r3, #0
    420a:	beq.w	4344 <_dtoa_r+0xb84>
    420e:	ldr	r2, [pc, #556]	; (443c <_dtoa_r+0xc7c>)
    4210:	and.w	r1, r3, #15
    4214:	add.w	r2, r2, r1, lsl #3
    4218:	vldr	d7, [r2]
    421c:	vldr	d6, [sp, #56]	; 0x38
    4220:	asrs	r3, r3, #4
    4222:	vmul.f64	d4, d6, d7
    4226:	beq.w	43f6 <_dtoa_r+0xc36>
    422a:	ldr	r2, [pc, #532]	; (4440 <_dtoa_r+0xc80>)
    422c:	movs	r1, #2
    422e:	lsls	r0, r3, #31
    4230:	bpl.n	423c <_dtoa_r+0xa7c>
    4232:	vldr	d7, [r2]
    4236:	adds	r1, #1
    4238:	vmul.f64	d4, d4, d7
    423c:	asrs	r3, r3, #1
    423e:	add.w	r2, r2, #8
    4242:	bne.n	422e <_dtoa_r+0xa6e>
    4244:	b.n	3dca <_dtoa_r+0x60a>
    4246:	ldr	r1, [sp, #32]
    4248:	movs	r2, #48	; 0x30
    424a:	strb	r2, [r1, #0]
    424c:	ldr	r2, [sp, #8]
    424e:	ldrb.w	r0, [fp, #-1]
    4252:	adds	r2, #1
    4254:	str	r2, [sp, #8]
    4256:	b.n	3a88 <_dtoa_r+0x2c8>
    4258:	ldr	r1, [r6, #4]
    425a:	mov	r0, r4
    425c:	bl	2fb0 <_Balloc>
    4260:	ldr	r3, [r6, #16]
    4262:	adds	r2, r3, #2
    4264:	mov	r8, r0
    4266:	lsls	r2, r2, #2
    4268:	add.w	r1, r6, #12
    426c:	adds	r0, #12
    426e:	bl	1a1c <memcpy>
    4272:	mov	r1, r8
    4274:	movs	r2, #1
    4276:	mov	r0, r4
    4278:	bl	3310 <__lshift>
    427c:	mov	r8, r0
    427e:	b.n	3f7e <_dtoa_r+0x7be>
    4280:	cmp	r2, #57	; 0x39
    4282:	beq.w	4388 <_dtoa_r+0xbc8>
    4286:	add.w	r9, r2, #1
    428a:	mov	sl, r6
    428c:	strb.w	r9, [r7]
    4290:	add.w	fp, r7, #1
    4294:	mov	r6, r8
    4296:	str	r5, [sp, #28]
    4298:	b.n	3cec <_dtoa_r+0x52c>
    429a:	mov	sl, r6
    429c:	mov	r9, r2
    429e:	mov	r6, r8
    42a0:	b.n	3cb2 <_dtoa_r+0x4f2>
    42a2:	ldr	r0, [pc, #408]	; (443c <_dtoa_r+0xc7c>)
    42a4:	vcvt.s32.f64	s12, d4
    42a8:	subs	r5, r1, #1
    42aa:	add.w	r0, r0, r5, lsl #3
    42ae:	vmov	d7, r2, r3
    42b2:	vldr	d3, [r0]
    42b6:	vmov	r3, s12
    42ba:	vmul.f64	d3, d3, d7
    42be:	ldr	r0, [sp, #32]
    42c0:	adds	r3, #48	; 0x30
    42c2:	cmp	r1, #1
    42c4:	vcvt.f64.s32	d6, s12
    42c8:	strb	r3, [r0, #0]
    42ca:	add.w	fp, r0, #1
    42ce:	vsub.f64	d7, d4, d6
    42d2:	beq.n	42fe <_dtoa_r+0xb3e>
    42d4:	vmov.f64	d5, #36	; 0x41200000  10.0
    42d8:	ldr	r3, [sp, #32]
    42da:	add	r1, r3
    42dc:	mov	r3, fp
    42de:	vmul.f64	d7, d7, d5
    42e2:	vcvt.s32.f64	s12, d7
    42e6:	vmov	r2, s12
    42ea:	adds	r2, #48	; 0x30
    42ec:	strb.w	r2, [r3], #1
    42f0:	cmp	r1, r3
    42f2:	vcvt.f64.s32	d6, s12
    42f6:	vsub.f64	d7, d7, d6
    42fa:	bne.n	42de <_dtoa_r+0xb1e>
    42fc:	add	fp, r5
    42fe:	vmov.f64	d6, #96	; 0x3f000000  0.5
    4302:	vadd.f64	d5, d3, d6
    4306:	vcmpe.f64	d5, d7
    430a:	vmrs	APSR_nzcv, fpscr
    430e:	bpl.n	4398 <_dtoa_r+0xbd8>
    4310:	str	r6, [sp, #8]
    4312:	ldrb.w	r0, [fp, #-1]
    4316:	b.w	3a6e <_dtoa_r+0x2ae>
    431a:	movs	r3, #0
    431c:	str	r3, [sp, #20]
    431e:	mov	r6, r3
    4320:	b.n	40d0 <_dtoa_r+0x910>
    4322:	subs	r3, r3, r7
    4324:	str	r3, [sp, #40]	; 0x28
    4326:	movs	r3, #0
    4328:	b.w	3ade <_dtoa_r+0x31e>
    432c:	ldr	r2, [sp, #20]
    432e:	ldr	r3, [sp, #64]	; 0x40
    4330:	str	r2, [sp, #56]	; 0x38
    4332:	ldr	r2, [sp, #24]
    4334:	str	r2, [sp, #40]	; 0x28
    4336:	rsb	r3, r3, #54	; 0x36
    433a:	b.w	3ade <_dtoa_r+0x31e>
    433e:	movs	r3, #0
    4340:	str	r3, [sp, #28]
    4342:	b.n	4124 <_dtoa_r+0x964>
    4344:	vldr	d4, [sp, #56]	; 0x38
    4348:	movs	r1, #2
    434a:	b.n	3dca <_dtoa_r+0x60a>
    434c:	cmp	r7, #0
    434e:	beq.w	4130 <_dtoa_r+0x970>
    4352:	ldr	r0, [sp, #52]	; 0x34
    4354:	cmp	r0, #0
    4356:	ble.w	41fc <_dtoa_r+0xa3c>
    435a:	vmov.f64	d5, #36	; 0x41200000  10.0
    435e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    4362:	adds	r1, #1
    4364:	vmov	s13, r1
    4368:	vmul.f64	d4, d4, d5
    436c:	ldr	r3, [sp, #8]
    436e:	vcvt.f64.s32	d6, s13
    4372:	subs	r6, r3, #1
    4374:	vfma.f64	d7, d4, d6
    4378:	vmov	r2, r3, d7
    437c:	mov	r1, r0
    437e:	sub.w	r3, r3, #54525952	; 0x3400000
    4382:	b.n	3e00 <_dtoa_r+0x640>
    4384:	str	r5, [sp, #28]
    4386:	b.n	3f06 <_dtoa_r+0x746>
    4388:	movs	r2, #57	; 0x39
    438a:	mov	sl, r6
    438c:	str	r5, [sp, #28]
    438e:	mov	r6, r8
    4390:	strb	r2, [r7, #0]
    4392:	add.w	fp, r7, #1
    4396:	b.n	3cce <_dtoa_r+0x50e>
    4398:	vsub.f64	d6, d6, d3
    439c:	vcmpe.f64	d6, d7
    43a0:	vmrs	APSR_nzcv, fpscr
    43a4:	bgt.n	43aa <_dtoa_r+0xbea>
    43a6:	b.n	41fc <_dtoa_r+0xa3c>
    43a8:	mov	fp, r2
    43aa:	ldrb.w	r3, [fp, #-1]
    43ae:	cmp	r3, #48	; 0x30
    43b0:	add.w	r2, fp, #4294967295
    43b4:	beq.n	43a8 <_dtoa_r+0xbe8>
    43b6:	b.n	3eae <_dtoa_r+0x6ee>
    43b8:	str	r6, [sp, #8]
    43ba:	b.w	3a6e <_dtoa_r+0x2ae>
    43be:	str	r3, [sp, #28]
    43c0:	b.n	4124 <_dtoa_r+0x964>
    43c2:	cmp.w	sl, #0
    43c6:	bne.w	3f42 <_dtoa_r+0x782>
    43ca:	b.n	40fe <_dtoa_r+0x93e>
    43cc:	cmp	r2, #57	; 0x39
    43ce:	mov	fp, r9
    43d0:	mov	r9, r2
    43d2:	beq.n	4388 <_dtoa_r+0xbc8>
    43d4:	cmp.w	fp, #0
    43d8:	bgt.w	41ce <_dtoa_r+0xa0e>
    43dc:	b.n	41d2 <_dtoa_r+0xa12>
    43de:	bne.w	41d2 <_dtoa_r+0xa12>
    43e2:	tst.w	r9, #1
    43e6:	beq.w	41d2 <_dtoa_r+0xa12>
    43ea:	b.n	41c6 <_dtoa_r+0xa06>
    43ec:	ldr	r3, [sp, #4]
    43ee:	cmp	r3, #2
    43f0:	bgt.n	4404 <_dtoa_r+0xc44>
    43f2:	ldr	r7, [sp, #52]	; 0x34
    43f4:	b.n	3c6c <_dtoa_r+0x4ac>
    43f6:	movs	r1, #2
    43f8:	b.n	3dca <_dtoa_r+0x60a>
    43fa:	ldr	r3, [sp, #4]
    43fc:	cmp	r3, #2
    43fe:	bgt.n	4404 <_dtoa_r+0xc44>
    4400:	ldr	r7, [sp, #52]	; 0x34
    4402:	b.n	3f62 <_dtoa_r+0x7a2>
    4404:	ldr	r7, [sp, #52]	; 0x34
    4406:	b.n	40ac <_dtoa_r+0x8ec>
    4408:	movs	r3, #1
    440a:	str	r3, [sp, #56]	; 0x38
    440c:	b.w	3952 <_dtoa_r+0x192>
    4410:	beq.w	3c32 <_dtoa_r+0x472>
    4414:	rsb	r0, r0, #60	; 0x3c
    4418:	b.n	3c24 <_dtoa_r+0x464>
    441a:	movs	r5, #0
    441c:	str	r5, [r4, #68]	; 0x44
    441e:	mov	r1, r5
    4420:	mov	r0, r4
    4422:	bl	2fb0 <_Balloc>
    4426:	mov.w	r7, #4294967295
    442a:	movs	r3, #1
    442c:	str	r0, [sp, #32]
    442e:	mov	r8, r5
    4430:	str	r0, [r4, #64]	; 0x40
    4432:	str	r7, [sp, #52]	; 0x34
    4434:	str	r3, [sp, #36]	; 0x24
    4436:	b.w	39ba <_dtoa_r+0x1fa>
    443a:	nop
    443c:	.word	0x20000450
    4440:	.word	0x20000518
    4444:	.word	0x00000000

00004448 <_svfprintf_r>:
    4448:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    444c:	vpush	{d8-d10}
    4450:	sub	sp, #228	; 0xe4
    4452:	mov	r4, r1
    4454:	str	r1, [sp, #12]
    4456:	mov	sl, r2
    4458:	str	r3, [sp, #36]	; 0x24
    445a:	str	r0, [sp, #20]
    445c:	bl	2ef4 <_localeconv_r>
    4460:	ldr	r3, [r0, #0]
    4462:	str	r3, [sp, #64]	; 0x40
    4464:	mov	r0, r3
    4466:	bl	2b00 <strlen>
    446a:	ldrh	r3, [r4, #12]
    446c:	str	r0, [sp, #60]	; 0x3c
    446e:	lsls	r1, r3, #24
    4470:	bpl.n	447a <_svfprintf_r+0x32>
    4472:	ldr	r3, [r4, #16]
    4474:	cmp	r3, #0
    4476:	beq.w	5574 <_svfprintf_r+0x112c>
    447a:	movs	r3, #0
    447c:	vldr	d8, [pc, #656]	; 4710 <_svfprintf_r+0x2c8>
    4480:	vldr	d9, [pc, #660]	; 4718 <_svfprintf_r+0x2d0>
    4484:	str	r3, [sp, #52]	; 0x34
    4486:	str	r3, [sp, #116]	; 0x74
    4488:	str	r3, [sp, #112]	; 0x70
    448a:	str	r3, [sp, #68]	; 0x44
    448c:	str	r3, [sp, #24]
    448e:	add	r3, sp, #160	; 0xa0
    4490:	str	r3, [sp, #108]	; 0x6c
    4492:	mov	r9, r3
    4494:	ldrb.w	r3, [sl]
    4498:	mov	r4, sl
    449a:	cbz	r3, 44d8 <_svfprintf_r+0x90>
    449c:	cmp	r3, #37	; 0x25
    449e:	bne.n	44a6 <_svfprintf_r+0x5e>
    44a0:	b.n	44d8 <_svfprintf_r+0x90>
    44a2:	cmp	r3, #37	; 0x25
    44a4:	beq.n	44ae <_svfprintf_r+0x66>
    44a6:	ldrb.w	r3, [r4, #1]!
    44aa:	cmp	r3, #0
    44ac:	bne.n	44a2 <_svfprintf_r+0x5a>
    44ae:	rsb	r5, sl, r4
    44b2:	cbz	r5, 44d8 <_svfprintf_r+0x90>
    44b4:	ldr	r3, [sp, #112]	; 0x70
    44b6:	ldr	r2, [sp, #116]	; 0x74
    44b8:	str.w	sl, [r9]
    44bc:	adds	r3, #1
    44be:	add	r2, r5
    44c0:	cmp	r3, #7
    44c2:	str.w	r5, [r9, #4]
    44c6:	str	r2, [sp, #116]	; 0x74
    44c8:	str	r3, [sp, #112]	; 0x70
    44ca:	bgt.w	4614 <_svfprintf_r+0x1cc>
    44ce:	add.w	r9, r9, #8
    44d2:	ldr	r3, [sp, #24]
    44d4:	add	r3, r5
    44d6:	str	r3, [sp, #24]
    44d8:	ldrb	r3, [r4, #0]
    44da:	cmp	r3, #0
    44dc:	beq.w	4626 <_svfprintf_r+0x1de>
    44e0:	movs	r3, #0
    44e2:	mov	r2, r3
    44e4:	strb.w	r3, [sp, #79]	; 0x4f
    44e8:	mov	r1, r3
    44ea:	str	r3, [sp, #28]
    44ec:	mov	fp, r3
    44ee:	mov.w	r8, #4294967295
    44f2:	ldrb	r3, [r4, #1]
    44f4:	add.w	sl, r4, #1
    44f8:	mov	r5, r8
    44fa:	add.w	sl, sl, #1
    44fe:	sub.w	r0, r3, #32
    4502:	cmp	r0, #88	; 0x58
    4504:	bhi.w	4cf8 <_svfprintf_r+0x8b0>
    4508:	tbh	[pc, r0, lsl #1]
    450c:	.word	0x03f60363
    4510:	.word	0x036b03f6
    4514:	.word	0x03f603f6
    4518:	.word	0x03f603f6
    451c:	.word	0x03f603f6
    4520:	.word	0x037e0370
    4524:	.word	0x005d03f6
    4528:	.word	0x03f600df
    452c:	.word	0x010c00fb
    4530:	.word	0x010c010c
    4534:	.word	0x010c010c
    4538:	.word	0x010c010c
    453c:	.word	0x010c010c
    4540:	.word	0x03f603f6
    4544:	.word	0x03f603f6
    4548:	.word	0x03f603f6
    454c:	.word	0x03f603f6
    4550:	.word	0x03f603f6
    4554:	.word	0x015e011c
    4558:	.word	0x015e03f6
    455c:	.word	0x03f603f6
    4560:	.word	0x03f603f6
    4564:	.word	0x03f602a1
    4568:	.word	0x02a603f6
    456c:	.word	0x03f603f6
    4570:	.word	0x03f603f6
    4574:	.word	0x02d803f6
    4578:	.word	0x03f603f6
    457c:	.word	0x03f60305
    4580:	.word	0x03f603f6
    4584:	.word	0x03f603f6
    4588:	.word	0x03f603f6
    458c:	.word	0x03f603f6
    4590:	.word	0x034303f6
    4594:	.word	0x015e0356
    4598:	.word	0x015e015e
    459c:	.word	0x0356035e
    45a0:	.word	0x03f603f6
    45a4:	.word	0x03f603a4
    45a8:	.word	0x00a203b1
    45ac:	.word	0x03c30062
    45b0:	.word	0x03c803f6
    45b4:	.word	0x038303f6
    45b8:	.word	0x03f603f6
    45bc:	.short	0x038b
    45be:	ldr	r0, [sp, #28]
    45c0:	str	r3, [sp, #36]	; 0x24
    45c2:	negs	r0, r0
    45c4:	str	r0, [sp, #28]
    45c6:	orr.w	fp, fp, #4
    45ca:	ldrb.w	r3, [sl]
    45ce:	b.n	44fa <_svfprintf_r+0xb2>
    45d0:	mov	r8, r5
    45d2:	ldr	r0, [sp, #36]	; 0x24
    45d4:	movs	r1, #0
    45d6:	movs	r3, #48	; 0x30
    45d8:	movs	r2, #120	; 0x78
    45da:	cmp	r8, r1
    45dc:	strb.w	r3, [sp, #80]	; 0x50
    45e0:	ldr	r4, [r0, #0]
    45e2:	strb.w	r2, [sp, #81]	; 0x51
    45e6:	add.w	r7, r0, #4
    45ea:	mov.w	r5, #0
    45ee:	strb.w	r1, [sp, #79]	; 0x4f
    45f2:	orr.w	r3, fp, #2
    45f6:	blt.w	4d32 <_svfprintf_r+0x8ea>
    45fa:	bic.w	r3, fp, #128	; 0x80
    45fe:	orr.w	fp, r3, #2
    4602:	orrs.w	r3, r4, r5
    4606:	str	r7, [sp, #36]	; 0x24
    4608:	beq.w	4cde <_svfprintf_r+0x896>
    460c:	mov	r7, r1
    460e:	str	r2, [sp, #48]	; 0x30
    4610:	ldr	r0, [pc, #268]	; (4720 <_svfprintf_r+0x2d8>)
    4612:	b.n	4b72 <_svfprintf_r+0x72a>
    4614:	add	r2, sp, #108	; 0x6c
    4616:	ldr	r1, [sp, #12]
    4618:	ldr	r0, [sp, #20]
    461a:	bl	59b8 <__ssprint_r>
    461e:	cbnz	r0, 4634 <_svfprintf_r+0x1ec>
    4620:	add.w	r9, sp, #160	; 0xa0
    4624:	b.n	44d2 <_svfprintf_r+0x8a>
    4626:	ldr	r3, [sp, #116]	; 0x74
    4628:	cbz	r3, 4634 <_svfprintf_r+0x1ec>
    462a:	ldr	r0, [sp, #20]
    462c:	ldr	r1, [sp, #12]
    462e:	add	r2, sp, #108	; 0x6c
    4630:	bl	59b8 <__ssprint_r>
    4634:	ldr	r3, [sp, #12]
    4636:	ldrh	r3, [r3, #12]
    4638:	tst.w	r3, #64	; 0x40
    463c:	ldr	r3, [sp, #24]
    463e:	it	ne
    4640:	movne.w	r3, #4294967295
    4644:	mov	r0, r3
    4646:	add	sp, #228	; 0xe4
    4648:	vpop	{d8-d10}
    464c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4650:	str	r3, [sp, #48]	; 0x30
    4652:	mov	r8, r5
    4654:	cmp	r2, #0
    4656:	bne.w	598e <_svfprintf_r+0x1546>
    465a:	ands.w	r3, fp, #32
    465e:	beq.w	4a6e <_svfprintf_r+0x626>
    4662:	ldr	r7, [sp, #36]	; 0x24
    4664:	adds	r7, #7
    4666:	bic.w	r3, r7, #7
    466a:	movs	r7, #0
    466c:	add.w	r2, r3, #8
    4670:	cmp	r8, r7
    4672:	str	r2, [sp, #36]	; 0x24
    4674:	ldrd	r4, r5, [r3]
    4678:	strb.w	r7, [sp, #79]	; 0x4f
    467c:	blt.w	533c <_svfprintf_r+0xef4>
    4680:	orrs.w	r3, r4, r5
    4684:	bic.w	fp, fp, #128	; 0x80
    4688:	beq.w	4d22 <_svfprintf_r+0x8da>
    468c:	add	r6, sp, #160	; 0xa0
    468e:	lsrs	r2, r4, #3
    4690:	orr.w	r2, r2, r5, lsl #29
    4694:	lsrs	r1, r5, #3
    4696:	and.w	r3, r4, #7
    469a:	mov	r5, r1
    469c:	mov	r4, r2
    469e:	adds	r3, #48	; 0x30
    46a0:	orrs.w	r2, r4, r5
    46a4:	strb.w	r3, [r6, #-1]!
    46a8:	bne.n	468e <_svfprintf_r+0x246>
    46aa:	tst.w	fp, #1
    46ae:	beq.w	4b00 <_svfprintf_r+0x6b8>
    46b2:	cmp	r3, #48	; 0x30
    46b4:	beq.w	4b00 <_svfprintf_r+0x6b8>
    46b8:	movs	r2, #48	; 0x30
    46ba:	subs	r3, r6, #1
    46bc:	strb.w	r2, [r6, #-1]
    46c0:	add	r2, sp, #160	; 0xa0
    46c2:	subs	r2, r2, r3
    46c4:	str	r2, [sp, #32]
    46c6:	mov	r6, r3
    46c8:	b.n	4b06 <_svfprintf_r+0x6be>
    46ca:	ldrb.w	r3, [sl]
    46ce:	cmp	r3, #42	; 0x2a
    46d0:	add.w	r4, sl, #1
    46d4:	beq.w	5936 <_svfprintf_r+0x14ee>
    46d8:	sub.w	r0, r3, #48	; 0x30
    46dc:	cmp	r0, #9
    46de:	it	ls
    46e0:	movls	r5, #0
    46e2:	bhi.w	5890 <_svfprintf_r+0x1448>
    46e6:	ldrb.w	r3, [r4], #1
    46ea:	add.w	r5, r5, r5, lsl #2
    46ee:	add.w	r5, r0, r5, lsl #1
    46f2:	sub.w	r0, r3, #48	; 0x30
    46f6:	cmp	r0, #9
    46f8:	bls.n	46e6 <_svfprintf_r+0x29e>
    46fa:	orr.w	r5, r5, r5, asr #31
    46fe:	mov	sl, r4
    4700:	b.n	44fe <_svfprintf_r+0xb6>
    4702:	orr.w	fp, fp, #128	; 0x80
    4706:	ldrb.w	r3, [sl]
    470a:	b.n	44fa <_svfprintf_r+0xb2>
    470c:	nop.w
	...
    4718:	.word	0xffffffff
    471c:	.word	0x7fefffff
    4720:	.word	0x20000594
    4724:	sub.w	r0, r3, #48	; 0x30
    4728:	movs	r3, #0
    472a:	mov	r4, r3
    472c:	ldrb.w	r3, [sl], #1
    4730:	add.w	r4, r4, r4, lsl #2
    4734:	add.w	r4, r0, r4, lsl #1
    4738:	sub.w	r0, r3, #48	; 0x30
    473c:	cmp	r0, #9
    473e:	bls.n	472c <_svfprintf_r+0x2e4>
    4740:	str	r4, [sp, #28]
    4742:	b.n	44fe <_svfprintf_r+0xb6>
    4744:	str	r3, [sp, #48]	; 0x30
    4746:	mov	r8, r5
    4748:	cmp	r2, #0
    474a:	bne.w	59a6 <_svfprintf_r+0x155e>
    474e:	orr.w	fp, fp, #16
    4752:	tst.w	fp, #32
    4756:	beq.w	5160 <_svfprintf_r+0xd18>
    475a:	ldr	r7, [sp, #36]	; 0x24
    475c:	adds	r7, #7
    475e:	bic.w	r7, r7, #7
    4762:	ldrd	r2, r3, [r7]
    4766:	add.w	r1, r7, #8
    476a:	str	r1, [sp, #36]	; 0x24
    476c:	mov	r4, r2
    476e:	mov	r5, r3
    4770:	cmp	r2, #0
    4772:	sbcs.w	r3, r3, #0
    4776:	blt.w	51e8 <_svfprintf_r+0xda0>
    477a:	cmp.w	r8, #0
    477e:	ldrb.w	r7, [sp, #79]	; 0x4f
    4782:	blt.w	4af0 <_svfprintf_r+0x6a8>
    4786:	orrs.w	r3, r4, r5
    478a:	bic.w	fp, fp, #128	; 0x80
    478e:	beq.w	4f7e <_svfprintf_r+0xb36>
    4792:	cmp	r5, #0
    4794:	it	eq
    4796:	cmpeq	r4, #10
    4798:	bcc.w	4af8 <_svfprintf_r+0x6b0>
    479c:	add	r6, sp, #160	; 0xa0
    479e:	mov	r0, r4
    47a0:	mov	r1, r5
    47a2:	movs	r2, #10
    47a4:	movs	r3, #0
    47a6:	bl	5ab8 <__aeabi_uldivmod>
    47aa:	adds	r2, #48	; 0x30
    47ac:	strb.w	r2, [r6, #-1]!
    47b0:	mov	r0, r4
    47b2:	mov	r1, r5
    47b4:	movs	r3, #0
    47b6:	movs	r2, #10
    47b8:	bl	5ab8 <__aeabi_uldivmod>
    47bc:	mov	r4, r0
    47be:	mov	r5, r1
    47c0:	orrs.w	r3, r4, r5
    47c4:	bne.n	479e <_svfprintf_r+0x356>
    47c6:	b.n	4b00 <_svfprintf_r+0x6b8>
    47c8:	str	r3, [sp, #48]	; 0x30
    47ca:	mov	r8, r5
    47cc:	cmp	r2, #0
    47ce:	bne.w	599e <_svfprintf_r+0x1556>
    47d2:	ldr	r7, [sp, #36]	; 0x24
    47d4:	tst.w	fp, #8
    47d8:	add.w	r7, r7, #7
    47dc:	beq.w	5460 <_svfprintf_r+0x1018>
    47e0:	bic.w	r3, r7, #7
    47e4:	vldr	d8, [r3]
    47e8:	add.w	r2, r3, #8
    47ec:	str	r2, [sp, #36]	; 0x24
    47ee:	vabs.f64	d7, d8
    47f2:	vcmp.f64	d7, d9
    47f6:	vmrs	APSR_nzcv, fpscr
    47fa:	ble.w	5376 <_svfprintf_r+0xf2e>
    47fe:	vcmpe.f64	d8, #0.0
    4802:	vmrs	APSR_nzcv, fpscr
    4806:	bmi.w	579e <_svfprintf_r+0x1356>
    480a:	ldrb.w	r7, [sp, #79]	; 0x4f
    480e:	ldr	r6, [pc, #668]	; (4aac <_svfprintf_r+0x664>)
    4810:	ldr	r3, [pc, #668]	; (4ab0 <_svfprintf_r+0x668>)
    4812:	ldr	r1, [sp, #48]	; 0x30
    4814:	movs	r2, #3
    4816:	mov.w	r8, #0
    481a:	str	r2, [sp, #16]
    481c:	bic.w	fp, fp, #128	; 0x80
    4820:	cmp	r1, #71	; 0x47
    4822:	it	le
    4824:	movle	r6, r3
    4826:	str	r2, [sp, #32]
    4828:	str.w	r8, [sp, #56]	; 0x38
    482c:	cbz	r7, 4834 <_svfprintf_r+0x3ec>
    482e:	ldr	r3, [sp, #16]
    4830:	adds	r3, #1
    4832:	str	r3, [sp, #16]
    4834:	ands.w	r3, fp, #2
    4838:	str	r3, [sp, #40]	; 0x28
    483a:	beq.n	4842 <_svfprintf_r+0x3fa>
    483c:	ldr	r3, [sp, #16]
    483e:	adds	r3, #2
    4840:	str	r3, [sp, #16]
    4842:	ands.w	r3, fp, #132	; 0x84
    4846:	str	r3, [sp, #44]	; 0x2c
    4848:	bne.w	4d4c <_svfprintf_r+0x904>
    484c:	ldr	r3, [sp, #28]
    484e:	ldr	r2, [sp, #16]
    4850:	subs	r4, r3, r2
    4852:	cmp	r4, #0
    4854:	ble.w	4d4c <_svfprintf_r+0x904>
    4858:	cmp	r4, #16
    485a:	ldr	r1, [sp, #116]	; 0x74
    485c:	ldr	r2, [sp, #112]	; 0x70
    485e:	ldr	r7, [pc, #596]	; (4ab4 <_svfprintf_r+0x66c>)
    4860:	ble.n	48aa <_svfprintf_r+0x462>
    4862:	mov	r0, r9
    4864:	movs	r5, #16
    4866:	mov	r9, r8
    4868:	mov	r8, r6
    486a:	ldr	r6, [sp, #20]
    486c:	b.n	4878 <_svfprintf_r+0x430>
    486e:	subs	r4, #16
    4870:	cmp	r4, #16
    4872:	add.w	r0, r0, #8
    4876:	ble.n	48a4 <_svfprintf_r+0x45c>
    4878:	adds	r2, #1
    487a:	adds	r1, #16
    487c:	cmp	r2, #7
    487e:	str	r1, [sp, #116]	; 0x74
    4880:	str	r2, [sp, #112]	; 0x70
    4882:	str	r7, [r0, #0]
    4884:	str	r5, [r0, #4]
    4886:	ble.n	486e <_svfprintf_r+0x426>
    4888:	add	r2, sp, #108	; 0x6c
    488a:	ldr	r1, [sp, #12]
    488c:	mov	r0, r6
    488e:	bl	59b8 <__ssprint_r>
    4892:	cmp	r0, #0
    4894:	bne.w	4634 <_svfprintf_r+0x1ec>
    4898:	subs	r4, #16
    489a:	cmp	r4, #16
    489c:	ldr	r1, [sp, #116]	; 0x74
    489e:	ldr	r2, [sp, #112]	; 0x70
    48a0:	add	r0, sp, #160	; 0xa0
    48a2:	bgt.n	4878 <_svfprintf_r+0x430>
    48a4:	mov	r6, r8
    48a6:	mov	r8, r9
    48a8:	mov	r9, r0
    48aa:	adds	r2, #1
    48ac:	adds	r3, r4, r1
    48ae:	cmp	r2, #7
    48b0:	str	r3, [sp, #116]	; 0x74
    48b2:	str	r2, [sp, #112]	; 0x70
    48b4:	str.w	r7, [r9]
    48b8:	str.w	r4, [r9, #4]
    48bc:	bgt.w	5084 <_svfprintf_r+0xc3c>
    48c0:	ldrb.w	r7, [sp, #79]	; 0x4f
    48c4:	add.w	r9, r9, #8
    48c8:	cbz	r7, 48e8 <_svfprintf_r+0x4a0>
    48ca:	ldr	r2, [sp, #112]	; 0x70
    48cc:	adds	r2, #1
    48ce:	adds	r3, #1
    48d0:	add.w	r0, sp, #79	; 0x4f
    48d4:	movs	r1, #1
    48d6:	cmp	r2, #7
    48d8:	str	r3, [sp, #116]	; 0x74
    48da:	str	r2, [sp, #112]	; 0x70
    48dc:	stmia.w	r9, {r0, r1}
    48e0:	bgt.w	4fa2 <_svfprintf_r+0xb5a>
    48e4:	add.w	r9, r9, #8
    48e8:	ldr	r2, [sp, #40]	; 0x28
    48ea:	cbz	r2, 4908 <_svfprintf_r+0x4c0>
    48ec:	ldr	r2, [sp, #112]	; 0x70
    48ee:	adds	r2, #1
    48f0:	adds	r3, #2
    48f2:	add	r0, sp, #80	; 0x50
    48f4:	movs	r1, #2
    48f6:	cmp	r2, #7
    48f8:	str	r3, [sp, #116]	; 0x74
    48fa:	str	r2, [sp, #112]	; 0x70
    48fc:	stmia.w	r9, {r0, r1}
    4900:	bgt.w	4fba <_svfprintf_r+0xb72>
    4904:	add.w	r9, r9, #8
    4908:	ldr	r2, [sp, #44]	; 0x2c
    490a:	cmp	r2, #128	; 0x80
    490c:	beq.w	4e0c <_svfprintf_r+0x9c4>
    4910:	ldr	r2, [sp, #32]
    4912:	rsb	r4, r2, r8
    4916:	cmp	r4, #0
    4918:	ble.n	4984 <_svfprintf_r+0x53c>
    491a:	cmp	r4, #16
    491c:	ldr	r2, [sp, #112]	; 0x70
    491e:	ldr	r7, [pc, #408]	; (4ab8 <_svfprintf_r+0x670>)
    4920:	ble.n	496a <_svfprintf_r+0x522>
    4922:	mov	r1, r9
    4924:	mov.w	r8, #16
    4928:	mov	r9, r6
    492a:	ldr	r5, [sp, #20]
    492c:	ldr	r6, [sp, #12]
    492e:	b.n	493a <_svfprintf_r+0x4f2>
    4930:	subs	r4, #16
    4932:	cmp	r4, #16
    4934:	add.w	r1, r1, #8
    4938:	ble.n	4966 <_svfprintf_r+0x51e>
    493a:	adds	r2, #1
    493c:	adds	r3, #16
    493e:	cmp	r2, #7
    4940:	str	r3, [sp, #116]	; 0x74
    4942:	str	r2, [sp, #112]	; 0x70
    4944:	stmia.w	r1, {r7, r8}
    4948:	ble.n	4930 <_svfprintf_r+0x4e8>
    494a:	add	r2, sp, #108	; 0x6c
    494c:	mov	r1, r6
    494e:	mov	r0, r5
    4950:	bl	59b8 <__ssprint_r>
    4954:	cmp	r0, #0
    4956:	bne.w	4634 <_svfprintf_r+0x1ec>
    495a:	subs	r4, #16
    495c:	cmp	r4, #16
    495e:	ldr	r3, [sp, #116]	; 0x74
    4960:	ldr	r2, [sp, #112]	; 0x70
    4962:	add	r1, sp, #160	; 0xa0
    4964:	bgt.n	493a <_svfprintf_r+0x4f2>
    4966:	mov	r6, r9
    4968:	mov	r9, r1
    496a:	adds	r2, #1
    496c:	add	r3, r4
    496e:	cmp	r2, #7
    4970:	str	r3, [sp, #116]	; 0x74
    4972:	str	r2, [sp, #112]	; 0x70
    4974:	str.w	r7, [r9]
    4978:	str.w	r4, [r9, #4]
    497c:	bgt.w	4f8a <_svfprintf_r+0xb42>
    4980:	add.w	r9, r9, #8
    4984:	tst.w	fp, #256	; 0x100
    4988:	bne.w	4d50 <_svfprintf_r+0x908>
    498c:	ldr	r2, [sp, #112]	; 0x70
    498e:	ldr	r0, [sp, #32]
    4990:	str.w	r6, [r9]
    4994:	adds	r2, #1
    4996:	add	r3, r0
    4998:	cmp	r2, #7
    499a:	str	r3, [sp, #116]	; 0x74
    499c:	str.w	r0, [r9, #4]
    49a0:	str	r2, [sp, #112]	; 0x70
    49a2:	bgt.w	4f2a <_svfprintf_r+0xae2>
    49a6:	add.w	r9, r9, #8
    49aa:	tst.w	fp, #4
    49ae:	beq.n	4a2e <_svfprintf_r+0x5e6>
    49b0:	ldr	r2, [sp, #28]
    49b2:	ldr	r1, [sp, #16]
    49b4:	subs	r4, r2, r1
    49b6:	cmp	r4, #0
    49b8:	ble.n	4a2e <_svfprintf_r+0x5e6>
    49ba:	cmp	r4, #16
    49bc:	ldr	r2, [sp, #112]	; 0x70
    49be:	ldr	r7, [pc, #244]	; (4ab4 <_svfprintf_r+0x66c>)
    49c0:	ble.n	4a08 <_svfprintf_r+0x5c0>
    49c2:	movs	r5, #16
    49c4:	ldr	r6, [sp, #20]
    49c6:	ldr.w	r8, [sp, #12]
    49ca:	b.n	49d6 <_svfprintf_r+0x58e>
    49cc:	subs	r4, #16
    49ce:	cmp	r4, #16
    49d0:	add.w	r9, r9, #8
    49d4:	ble.n	4a08 <_svfprintf_r+0x5c0>
    49d6:	adds	r2, #1
    49d8:	adds	r3, #16
    49da:	cmp	r2, #7
    49dc:	str	r3, [sp, #116]	; 0x74
    49de:	str	r2, [sp, #112]	; 0x70
    49e0:	str.w	r7, [r9]
    49e4:	str.w	r5, [r9, #4]
    49e8:	ble.n	49cc <_svfprintf_r+0x584>
    49ea:	add	r2, sp, #108	; 0x6c
    49ec:	mov	r1, r8
    49ee:	mov	r0, r6
    49f0:	bl	59b8 <__ssprint_r>
    49f4:	cmp	r0, #0
    49f6:	bne.w	4634 <_svfprintf_r+0x1ec>
    49fa:	subs	r4, #16
    49fc:	cmp	r4, #16
    49fe:	ldr	r3, [sp, #116]	; 0x74
    4a00:	ldr	r2, [sp, #112]	; 0x70
    4a02:	add.w	r9, sp, #160	; 0xa0
    4a06:	bgt.n	49d6 <_svfprintf_r+0x58e>
    4a08:	adds	r2, #1
    4a0a:	add	r3, r4
    4a0c:	cmp	r2, #7
    4a0e:	str	r3, [sp, #116]	; 0x74
    4a10:	str	r2, [sp, #112]	; 0x70
    4a12:	str.w	r7, [r9]
    4a16:	str.w	r4, [r9, #4]
    4a1a:	ble.n	4a2e <_svfprintf_r+0x5e6>
    4a1c:	add	r2, sp, #108	; 0x6c
    4a1e:	ldr	r1, [sp, #12]
    4a20:	ldr	r0, [sp, #20]
    4a22:	bl	59b8 <__ssprint_r>
    4a26:	cmp	r0, #0
    4a28:	bne.w	4634 <_svfprintf_r+0x1ec>
    4a2c:	ldr	r3, [sp, #116]	; 0x74
    4a2e:	ldr	r2, [sp, #24]
    4a30:	ldr	r1, [sp, #28]
    4a32:	ldr	r0, [sp, #16]
    4a34:	cmp	r1, r0
    4a36:	ite	ge
    4a38:	addge	r2, r2, r1
    4a3a:	addlt	r2, r2, r0
    4a3c:	str	r2, [sp, #24]
    4a3e:	cmp	r3, #0
    4a40:	bne.w	4f42 <_svfprintf_r+0xafa>
    4a44:	movs	r3, #0
    4a46:	str	r3, [sp, #112]	; 0x70
    4a48:	add.w	r9, sp, #160	; 0xa0
    4a4c:	b.n	4494 <_svfprintf_r+0x4c>
    4a4e:	orr.w	fp, fp, #8
    4a52:	ldrb.w	r3, [sl]
    4a56:	b.n	44fa <_svfprintf_r+0xb2>
    4a58:	str	r3, [sp, #48]	; 0x30
    4a5a:	mov	r8, r5
    4a5c:	cmp	r2, #0
    4a5e:	bne.w	5996 <_svfprintf_r+0x154e>
    4a62:	orr.w	fp, fp, #16
    4a66:	ands.w	r3, fp, #32
    4a6a:	bne.w	4662 <_svfprintf_r+0x21a>
    4a6e:	ands.w	r2, fp, #16
    4a72:	bne.w	5198 <_svfprintf_r+0xd50>
    4a76:	ands.w	r3, fp, #64	; 0x40
    4a7a:	beq.w	5198 <_svfprintf_r+0xd50>
    4a7e:	ldr	r1, [sp, #36]	; 0x24
    4a80:	strb.w	r2, [sp, #79]	; 0x4f
    4a84:	mov	r3, r1
    4a86:	cmp.w	r8, #0
    4a8a:	add.w	r3, r3, #4
    4a8e:	ldrh	r4, [r1, #0]
    4a90:	mov.w	r5, #0
    4a94:	blt.w	55ee <_svfprintf_r+0x11a6>
    4a98:	orrs.w	r1, r4, r5
    4a9c:	bic.w	fp, fp, #128	; 0x80
    4aa0:	str	r3, [sp, #36]	; 0x24
    4aa2:	beq.w	4d22 <_svfprintf_r+0x8da>
    4aa6:	mov	r7, r2
    4aa8:	b.n	468c <_svfprintf_r+0x244>
    4aaa:	nop
    4aac:	.word	0x20000574
    4ab0:	.word	0x20000570
    4ab4:	.word	0x200005b0
    4ab8:	.word	0x20000560
    4abc:	str	r3, [sp, #48]	; 0x30
    4abe:	mov	r8, r5
    4ac0:	cmp	r2, #0
    4ac2:	bne.w	5978 <_svfprintf_r+0x1530>
    4ac6:	orr.w	fp, fp, #16
    4aca:	ands.w	r3, fp, #32
    4ace:	beq.w	50a0 <_svfprintf_r+0xc58>
    4ad2:	ldr	r7, [sp, #36]	; 0x24
    4ad4:	adds	r7, #7
    4ad6:	bic.w	r3, r7, #7
    4ada:	movs	r7, #0
    4adc:	add.w	r2, r3, #8
    4ae0:	cmp	r8, r7
    4ae2:	str	r2, [sp, #36]	; 0x24
    4ae4:	ldrd	r4, r5, [r3]
    4ae8:	strb.w	r7, [sp, #79]	; 0x4f
    4aec:	bge.w	4786 <_svfprintf_r+0x33e>
    4af0:	orrs.w	r3, r4, r5
    4af4:	bne.w	4792 <_svfprintf_r+0x34a>
    4af8:	add	r6, sp, #224	; 0xe0
    4afa:	adds	r4, #48	; 0x30
    4afc:	strb.w	r4, [r6, #-65]!
    4b00:	add	r3, sp, #160	; 0xa0
    4b02:	subs	r3, r3, r6
    4b04:	str	r3, [sp, #32]
    4b06:	ldr	r3, [sp, #32]
    4b08:	cmp	r3, r8
    4b0a:	it	lt
    4b0c:	movlt	r3, r8
    4b0e:	str	r3, [sp, #16]
    4b10:	movs	r3, #0
    4b12:	str	r3, [sp, #56]	; 0x38
    4b14:	b.n	482c <_svfprintf_r+0x3e4>
    4b16:	str	r3, [sp, #48]	; 0x30
    4b18:	mov	r8, r5
    4b1a:	cmp	r2, #0
    4b1c:	bne.w	5970 <_svfprintf_r+0x1528>
    4b20:	tst.w	fp, #32
    4b24:	ldr	r0, [pc, #776]	; (4e30 <_svfprintf_r+0x9e8>)
    4b26:	beq.w	4c36 <_svfprintf_r+0x7ee>
    4b2a:	ldr	r7, [sp, #36]	; 0x24
    4b2c:	adds	r7, #7
    4b2e:	bic.w	r3, r7, #7
    4b32:	ldrd	r4, r5, [r3]
    4b36:	add.w	r2, r3, #8
    4b3a:	str	r2, [sp, #36]	; 0x24
    4b3c:	ands.w	r7, fp, #1
    4b40:	beq.w	4fd2 <_svfprintf_r+0xb8a>
    4b44:	orrs.w	r3, r4, r5
    4b48:	beq.w	5492 <_svfprintf_r+0x104a>
    4b4c:	movs	r7, #0
    4b4e:	movs	r3, #48	; 0x30
    4b50:	ldrb.w	r2, [sp, #48]	; 0x30
    4b54:	strb.w	r3, [sp, #80]	; 0x50
    4b58:	cmp	r8, r7
    4b5a:	strb.w	r2, [sp, #81]	; 0x51
    4b5e:	strb.w	r7, [sp, #79]	; 0x4f
    4b62:	orr.w	r3, fp, #2
    4b66:	blt.w	5798 <_svfprintf_r+0x1350>
    4b6a:	bic.w	r3, fp, #128	; 0x80
    4b6e:	orr.w	fp, r3, #2
    4b72:	add	r6, sp, #160	; 0xa0
    4b74:	lsrs	r3, r4, #4
    4b76:	and.w	r1, r4, #15
    4b7a:	orr.w	r3, r3, r5, lsl #28
    4b7e:	lsrs	r2, r5, #4
    4b80:	mov	r4, r3
    4b82:	mov	r5, r2
    4b84:	ldrb	r3, [r0, r1]
    4b86:	strb.w	r3, [r6, #-1]!
    4b8a:	orrs.w	r3, r4, r5
    4b8e:	bne.n	4b74 <_svfprintf_r+0x72c>
    4b90:	b.n	4b00 <_svfprintf_r+0x6b8>
    4b92:	ldr	r1, [sp, #36]	; 0x24
    4b94:	str	r3, [sp, #48]	; 0x30
    4b96:	ldr	r2, [r1, #0]
    4b98:	strb.w	r2, [sp, #120]	; 0x78
    4b9c:	movs	r3, #0
    4b9e:	mov	r2, r1
    4ba0:	mov	r7, r3
    4ba2:	strb.w	r3, [sp, #79]	; 0x4f
    4ba6:	adds	r2, #4
    4ba8:	movs	r3, #1
    4baa:	str	r3, [sp, #16]
    4bac:	mov	r8, r7
    4bae:	str	r7, [sp, #56]	; 0x38
    4bb0:	str	r2, [sp, #36]	; 0x24
    4bb2:	str	r3, [sp, #32]
    4bb4:	add	r6, sp, #120	; 0x78
    4bb6:	b.n	4834 <_svfprintf_r+0x3ec>
    4bb8:	str	r3, [sp, #48]	; 0x30
    4bba:	mov	r8, r5
    4bbc:	cmp	r2, #0
    4bbe:	beq.w	4752 <_svfprintf_r+0x30a>
    4bc2:	strb.w	r1, [sp, #79]	; 0x4f
    4bc6:	b.n	4752 <_svfprintf_r+0x30a>
    4bc8:	orr.w	fp, fp, #64	; 0x40
    4bcc:	ldrb.w	r3, [sl]
    4bd0:	b.n	44fa <_svfprintf_r+0xb2>
    4bd2:	ldrb.w	r3, [sl]
    4bd6:	cmp	r1, #0
    4bd8:	bne.w	44fa <_svfprintf_r+0xb2>
    4bdc:	movs	r2, #1
    4bde:	movs	r1, #32
    4be0:	b.n	44fa <_svfprintf_r+0xb2>
    4be2:	orr.w	fp, fp, #1
    4be6:	ldrb.w	r3, [sl]
    4bea:	b.n	44fa <_svfprintf_r+0xb2>
    4bec:	ldr	r4, [sp, #36]	; 0x24
    4bee:	ldr	r3, [r4, #0]
    4bf0:	str	r3, [sp, #28]
    4bf2:	mov	r0, r3
    4bf4:	cmp	r0, #0
    4bf6:	mov	r3, r4
    4bf8:	add.w	r3, r3, #4
    4bfc:	blt.w	45be <_svfprintf_r+0x176>
    4c00:	str	r3, [sp, #36]	; 0x24
    4c02:	ldrb.w	r3, [sl]
    4c06:	b.n	44fa <_svfprintf_r+0xb2>
    4c08:	ldrb.w	r3, [sl]
    4c0c:	movs	r2, #1
    4c0e:	movs	r1, #43	; 0x2b
    4c10:	b.n	44fa <_svfprintf_r+0xb2>
    4c12:	str	r3, [sp, #48]	; 0x30
    4c14:	mov	r8, r5
    4c16:	cmp	r2, #0
    4c18:	beq.w	4aca <_svfprintf_r+0x682>
    4c1c:	strb.w	r1, [sp, #79]	; 0x4f
    4c20:	b.n	4aca <_svfprintf_r+0x682>
    4c22:	str	r3, [sp, #48]	; 0x30
    4c24:	mov	r8, r5
    4c26:	cmp	r2, #0
    4c28:	bne.w	5980 <_svfprintf_r+0x1538>
    4c2c:	tst.w	fp, #32
    4c30:	ldr	r0, [pc, #512]	; (4e34 <_svfprintf_r+0x9ec>)
    4c32:	bne.w	4b2a <_svfprintf_r+0x6e2>
    4c36:	ldr	r2, [sp, #36]	; 0x24
    4c38:	tst.w	fp, #16
    4c3c:	mov	r3, r2
    4c3e:	bne.w	51c4 <_svfprintf_r+0xd7c>
    4c42:	tst.w	fp, #64	; 0x40
    4c46:	beq.w	51c4 <_svfprintf_r+0xd7c>
    4c4a:	adds	r3, #4
    4c4c:	ldrh	r4, [r2, #0]
    4c4e:	str	r3, [sp, #36]	; 0x24
    4c50:	movs	r5, #0
    4c52:	b.n	4b3c <_svfprintf_r+0x6f4>
    4c54:	ldrb.w	r3, [sl]
    4c58:	cmp	r3, #108	; 0x6c
    4c5a:	ittte	eq
    4c5c:	ldrbeq.w	r3, [sl, #1]
    4c60:	orreq.w	fp, fp, #32
    4c64:	addeq.w	sl, sl, #1
    4c68:	orrne.w	fp, fp, #16
    4c6c:	b.n	44fa <_svfprintf_r+0xb2>
    4c6e:	cmp	r2, #0
    4c70:	bne.w	5952 <_svfprintf_r+0x150a>
    4c74:	tst.w	fp, #32
    4c78:	beq.w	5348 <_svfprintf_r+0xf00>
    4c7c:	ldr	r2, [sp, #36]	; 0x24
    4c7e:	ldr	r1, [sp, #24]
    4c80:	ldr	r3, [r2, #0]
    4c82:	asrs	r5, r1, #31
    4c84:	mov	r0, r1
    4c86:	adds	r2, #4
    4c88:	mov	r1, r5
    4c8a:	str	r2, [sp, #36]	; 0x24
    4c8c:	strd	r0, r1, [r3]
    4c90:	b.n	4494 <_svfprintf_r+0x4c>
    4c92:	orr.w	fp, fp, #32
    4c96:	ldrb.w	r3, [sl]
    4c9a:	b.n	44fa <_svfprintf_r+0xb2>
    4c9c:	ldr	r2, [sp, #36]	; 0x24
    4c9e:	str	r3, [sp, #48]	; 0x30
    4ca0:	ldr	r6, [r2, #0]
    4ca2:	movs	r4, #0
    4ca4:	strb.w	r4, [sp, #79]	; 0x4f
    4ca8:	adds	r7, r2, #4
    4caa:	cmp	r6, #0
    4cac:	beq.w	577a <_svfprintf_r+0x1332>
    4cb0:	cmp	r5, #0
    4cb2:	blt.w	55fa <_svfprintf_r+0x11b2>
    4cb6:	mov	r2, r5
    4cb8:	mov	r1, r4
    4cba:	mov	r0, r6
    4cbc:	bl	2f10 <memchr>
    4cc0:	cmp	r0, #0
    4cc2:	beq.w	585e <_svfprintf_r+0x1416>
    4cc6:	subs	r3, r0, r6
    4cc8:	str	r3, [sp, #32]
    4cca:	mov	r8, r4
    4ccc:	bic.w	r3, r3, r3, asr #31
    4cd0:	str	r7, [sp, #36]	; 0x24
    4cd2:	str	r3, [sp, #16]
    4cd4:	str.w	r8, [sp, #56]	; 0x38
    4cd8:	ldrb.w	r7, [sp, #79]	; 0x4f
    4cdc:	b.n	482c <_svfprintf_r+0x3e4>
    4cde:	ldr	r0, [pc, #340]	; (4e34 <_svfprintf_r+0x9ec>)
    4ce0:	str	r2, [sp, #48]	; 0x30
    4ce2:	cmp.w	r8, #0
    4ce6:	bne.w	4ff2 <_svfprintf_r+0xbaa>
    4cea:	mov	r7, r8
    4cec:	mov.w	r8, #0
    4cf0:	str.w	r8, [sp, #32]
    4cf4:	add	r6, sp, #160	; 0xa0
    4cf6:	b.n	4b06 <_svfprintf_r+0x6be>
    4cf8:	str	r3, [sp, #48]	; 0x30
    4cfa:	cmp	r2, #0
    4cfc:	bne.w	595a <_svfprintf_r+0x1512>
    4d00:	ldr	r2, [sp, #48]	; 0x30
    4d02:	cmp	r2, #0
    4d04:	beq.w	4626 <_svfprintf_r+0x1de>
    4d08:	movs	r3, #0
    4d0a:	movs	r1, #1
    4d0c:	mov	r7, r3
    4d0e:	str	r1, [sp, #16]
    4d10:	strb.w	r2, [sp, #120]	; 0x78
    4d14:	strb.w	r3, [sp, #79]	; 0x4f
    4d18:	mov	r8, r3
    4d1a:	str	r3, [sp, #56]	; 0x38
    4d1c:	str	r1, [sp, #32]
    4d1e:	add	r6, sp, #120	; 0x78
    4d20:	b.n	4834 <_svfprintf_r+0x3ec>
    4d22:	cmp.w	r8, #0
    4d26:	beq.w	5840 <_svfprintf_r+0x13f8>
    4d2a:	movs	r7, #0
    4d2c:	movs	r4, #0
    4d2e:	movs	r5, #0
    4d30:	b.n	468c <_svfprintf_r+0x244>
    4d32:	ldr	r0, [pc, #256]	; (4e34 <_svfprintf_r+0x9ec>)
    4d34:	str	r2, [sp, #48]	; 0x30
    4d36:	mov	fp, r3
    4d38:	orrs.w	r3, r4, r5
    4d3c:	str	r7, [sp, #36]	; 0x24
    4d3e:	mov.w	r7, #0
    4d42:	bne.w	4b72 <_svfprintf_r+0x72a>
    4d46:	movs	r4, #0
    4d48:	movs	r5, #0
    4d4a:	b.n	4b72 <_svfprintf_r+0x72a>
    4d4c:	ldr	r3, [sp, #116]	; 0x74
    4d4e:	b.n	48c8 <_svfprintf_r+0x480>
    4d50:	ldr	r2, [sp, #48]	; 0x30
    4d52:	cmp	r2, #101	; 0x65
    4d54:	ble.w	4e9a <_svfprintf_r+0xa52>
    4d58:	vcmp.f64	d8, #0.0
    4d5c:	vmrs	APSR_nzcv, fpscr
    4d60:	bne.w	4ff6 <_svfprintf_r+0xbae>
    4d64:	ldr	r2, [sp, #112]	; 0x70
    4d66:	ldr	r1, [pc, #208]	; (4e38 <_svfprintf_r+0x9f0>)
    4d68:	str.w	r1, [r9]
    4d6c:	adds	r2, #1
    4d6e:	adds	r3, #1
    4d70:	movs	r1, #1
    4d72:	cmp	r2, #7
    4d74:	str	r3, [sp, #116]	; 0x74
    4d76:	str	r2, [sp, #112]	; 0x70
    4d78:	str.w	r1, [r9, #4]
    4d7c:	bgt.w	54a4 <_svfprintf_r+0x105c>
    4d80:	add.w	r9, r9, #8
    4d84:	ldr	r2, [sp, #84]	; 0x54
    4d86:	ldr	r1, [sp, #52]	; 0x34
    4d88:	cmp	r2, r1
    4d8a:	blt.n	4d94 <_svfprintf_r+0x94c>
    4d8c:	tst.w	fp, #1
    4d90:	beq.w	49aa <_svfprintf_r+0x562>
    4d94:	ldr	r2, [sp, #112]	; 0x70
    4d96:	ldr	r0, [sp, #60]	; 0x3c
    4d98:	ldr	r1, [sp, #64]	; 0x40
    4d9a:	str.w	r1, [r9]
    4d9e:	adds	r2, #1
    4da0:	add	r3, r0
    4da2:	cmp	r2, #7
    4da4:	str	r3, [sp, #116]	; 0x74
    4da6:	str.w	r0, [r9, #4]
    4daa:	str	r2, [sp, #112]	; 0x70
    4dac:	bgt.w	555c <_svfprintf_r+0x1114>
    4db0:	add.w	r9, r9, #8
    4db4:	ldr	r2, [sp, #52]	; 0x34
    4db6:	subs	r4, r2, #1
    4db8:	cmp	r4, #0
    4dba:	ble.w	49aa <_svfprintf_r+0x562>
    4dbe:	cmp	r4, #16
    4dc0:	ldr	r2, [sp, #112]	; 0x70
    4dc2:	ldr	r7, [pc, #120]	; (4e3c <_svfprintf_r+0x9f4>)
    4dc4:	ble.w	5180 <_svfprintf_r+0xd38>
    4dc8:	movs	r5, #16
    4dca:	ldr	r6, [sp, #20]
    4dcc:	ldr.w	r8, [sp, #12]
    4dd0:	b.n	4dde <_svfprintf_r+0x996>
    4dd2:	add.w	r9, r9, #8
    4dd6:	subs	r4, #16
    4dd8:	cmp	r4, #16
    4dda:	ble.w	5180 <_svfprintf_r+0xd38>
    4dde:	adds	r2, #1
    4de0:	adds	r3, #16
    4de2:	cmp	r2, #7
    4de4:	str	r3, [sp, #116]	; 0x74
    4de6:	str	r2, [sp, #112]	; 0x70
    4de8:	str.w	r7, [r9]
    4dec:	str.w	r5, [r9, #4]
    4df0:	ble.n	4dd2 <_svfprintf_r+0x98a>
    4df2:	add	r2, sp, #108	; 0x6c
    4df4:	mov	r1, r8
    4df6:	mov	r0, r6
    4df8:	bl	59b8 <__ssprint_r>
    4dfc:	cmp	r0, #0
    4dfe:	bne.w	4634 <_svfprintf_r+0x1ec>
    4e02:	ldr	r3, [sp, #116]	; 0x74
    4e04:	ldr	r2, [sp, #112]	; 0x70
    4e06:	add.w	r9, sp, #160	; 0xa0
    4e0a:	b.n	4dd6 <_svfprintf_r+0x98e>
    4e0c:	ldr	r2, [sp, #28]
    4e0e:	ldr	r1, [sp, #16]
    4e10:	subs	r4, r2, r1
    4e12:	cmp	r4, #0
    4e14:	ble.w	4910 <_svfprintf_r+0x4c8>
    4e18:	cmp	r4, #16
    4e1a:	ldr	r2, [sp, #112]	; 0x70
    4e1c:	ldr	r7, [pc, #28]	; (4e3c <_svfprintf_r+0x9f4>)
    4e1e:	ble.n	4e7e <_svfprintf_r+0xa36>
    4e20:	mov	r1, r9
    4e22:	movs	r5, #16
    4e24:	mov	r9, r8
    4e26:	mov	r0, r3
    4e28:	mov	r8, r6
    4e2a:	ldr	r6, [sp, #20]
    4e2c:	b.n	4e4a <_svfprintf_r+0xa02>
    4e2e:	nop
    4e30:	.word	0x20000580
    4e34:	.word	0x20000594
    4e38:	.word	0x2000055c
    4e3c:	.word	0x20000560
    4e40:	subs	r4, #16
    4e42:	cmp	r4, #16
    4e44:	add.w	r1, r1, #8
    4e48:	ble.n	4e76 <_svfprintf_r+0xa2e>
    4e4a:	adds	r2, #1
    4e4c:	adds	r0, #16
    4e4e:	cmp	r2, #7
    4e50:	str	r0, [sp, #116]	; 0x74
    4e52:	str	r2, [sp, #112]	; 0x70
    4e54:	str	r7, [r1, #0]
    4e56:	str	r5, [r1, #4]
    4e58:	ble.n	4e40 <_svfprintf_r+0x9f8>
    4e5a:	add	r2, sp, #108	; 0x6c
    4e5c:	ldr	r1, [sp, #12]
    4e5e:	mov	r0, r6
    4e60:	bl	59b8 <__ssprint_r>
    4e64:	cmp	r0, #0
    4e66:	bne.w	4634 <_svfprintf_r+0x1ec>
    4e6a:	subs	r4, #16
    4e6c:	cmp	r4, #16
    4e6e:	ldr	r0, [sp, #116]	; 0x74
    4e70:	ldr	r2, [sp, #112]	; 0x70
    4e72:	add	r1, sp, #160	; 0xa0
    4e74:	bgt.n	4e4a <_svfprintf_r+0xa02>
    4e76:	mov	r6, r8
    4e78:	mov	r3, r0
    4e7a:	mov	r8, r9
    4e7c:	mov	r9, r1
    4e7e:	adds	r2, #1
    4e80:	add	r3, r4
    4e82:	cmp	r2, #7
    4e84:	str	r3, [sp, #116]	; 0x74
    4e86:	str	r2, [sp, #112]	; 0x70
    4e88:	str.w	r7, [r9]
    4e8c:	str.w	r4, [r9, #4]
    4e90:	bgt.w	5320 <_svfprintf_r+0xed8>
    4e94:	add.w	r9, r9, #8
    4e98:	b.n	4910 <_svfprintf_r+0x4c8>
    4e9a:	ldr	r2, [sp, #52]	; 0x34
    4e9c:	str.w	r6, [r9]
    4ea0:	cmp	r2, #1
    4ea2:	ldr	r2, [sp, #112]	; 0x70
    4ea4:	add.w	r3, r3, #1
    4ea8:	add.w	r2, r2, #1
    4eac:	mov.w	r1, #1
    4eb0:	str	r3, [sp, #116]	; 0x74
    4eb2:	str	r2, [sp, #112]	; 0x70
    4eb4:	str.w	r1, [r9, #4]
    4eb8:	ble.w	52dc <_svfprintf_r+0xe94>
    4ebc:	cmp	r2, #7
    4ebe:	bgt.w	52ec <_svfprintf_r+0xea4>
    4ec2:	add.w	r9, r9, #8
    4ec6:	ldr	r0, [sp, #60]	; 0x3c
    4ec8:	ldr	r1, [sp, #64]	; 0x40
    4eca:	str.w	r1, [r9]
    4ece:	adds	r2, #1
    4ed0:	add	r3, r0
    4ed2:	cmp	r2, #7
    4ed4:	str	r3, [sp, #116]	; 0x74
    4ed6:	str	r2, [sp, #112]	; 0x70
    4ed8:	str.w	r0, [r9, #4]
    4edc:	bgt.w	5306 <_svfprintf_r+0xebe>
    4ee0:	add.w	r9, r9, #8
    4ee4:	vcmp.f64	d8, #0.0
    4ee8:	vmrs	APSR_nzcv, fpscr
    4eec:	ldr	r1, [sp, #52]	; 0x34
    4eee:	beq.w	50dc <_svfprintf_r+0xc94>
    4ef2:	subs	r1, #1
    4ef4:	adds	r2, #1
    4ef6:	adds	r6, #1
    4ef8:	add	r3, r1
    4efa:	cmp	r2, #7
    4efc:	str.w	r6, [r9]
    4f00:	str	r2, [sp, #112]	; 0x70
    4f02:	str	r3, [sp, #116]	; 0x74
    4f04:	str.w	r1, [r9, #4]
    4f08:	bgt.w	5146 <_svfprintf_r+0xcfe>
    4f0c:	add.w	r9, r9, #8
    4f10:	ldr	r0, [sp, #68]	; 0x44
    4f12:	str.w	r0, [r9, #4]
    4f16:	adds	r2, #1
    4f18:	add	r3, r0
    4f1a:	add	r1, sp, #92	; 0x5c
    4f1c:	cmp	r2, #7
    4f1e:	str	r3, [sp, #116]	; 0x74
    4f20:	str	r2, [sp, #112]	; 0x70
    4f22:	str.w	r1, [r9]
    4f26:	ble.w	49a6 <_svfprintf_r+0x55e>
    4f2a:	add	r2, sp, #108	; 0x6c
    4f2c:	ldr	r1, [sp, #12]
    4f2e:	ldr	r0, [sp, #20]
    4f30:	bl	59b8 <__ssprint_r>
    4f34:	cmp	r0, #0
    4f36:	bne.w	4634 <_svfprintf_r+0x1ec>
    4f3a:	ldr	r3, [sp, #116]	; 0x74
    4f3c:	add.w	r9, sp, #160	; 0xa0
    4f40:	b.n	49aa <_svfprintf_r+0x562>
    4f42:	add	r2, sp, #108	; 0x6c
    4f44:	ldr	r1, [sp, #12]
    4f46:	ldr	r0, [sp, #20]
    4f48:	bl	59b8 <__ssprint_r>
    4f4c:	cmp	r0, #0
    4f4e:	beq.w	4a44 <_svfprintf_r+0x5fc>
    4f52:	b.w	4634 <_svfprintf_r+0x1ec>
    4f56:	ldr	r1, [sp, #36]	; 0x24
    4f58:	cmp.w	r8, #0
    4f5c:	ldr	r4, [r1, #0]
    4f5e:	strb.w	r3, [sp, #79]	; 0x4f
    4f62:	add.w	r7, r1, #4
    4f66:	mov.w	r5, #0
    4f6a:	blt.w	5650 <_svfprintf_r+0x1208>
    4f6e:	orrs.w	r2, r4, r5
    4f72:	str	r7, [sp, #36]	; 0x24
    4f74:	bic.w	fp, fp, #128	; 0x80
    4f78:	mov	r7, r3
    4f7a:	bne.w	4792 <_svfprintf_r+0x34a>
    4f7e:	cmp.w	r8, #0
    4f82:	beq.w	4cec <_svfprintf_r+0x8a4>
    4f86:	movs	r4, #0
    4f88:	b.n	4af8 <_svfprintf_r+0x6b0>
    4f8a:	add	r2, sp, #108	; 0x6c
    4f8c:	ldr	r1, [sp, #12]
    4f8e:	ldr	r0, [sp, #20]
    4f90:	bl	59b8 <__ssprint_r>
    4f94:	cmp	r0, #0
    4f96:	bne.w	4634 <_svfprintf_r+0x1ec>
    4f9a:	ldr	r3, [sp, #116]	; 0x74
    4f9c:	add.w	r9, sp, #160	; 0xa0
    4fa0:	b.n	4984 <_svfprintf_r+0x53c>
    4fa2:	add	r2, sp, #108	; 0x6c
    4fa4:	ldr	r1, [sp, #12]
    4fa6:	ldr	r0, [sp, #20]
    4fa8:	bl	59b8 <__ssprint_r>
    4fac:	cmp	r0, #0
    4fae:	bne.w	4634 <_svfprintf_r+0x1ec>
    4fb2:	ldr	r3, [sp, #116]	; 0x74
    4fb4:	add.w	r9, sp, #160	; 0xa0
    4fb8:	b.n	48e8 <_svfprintf_r+0x4a0>
    4fba:	add	r2, sp, #108	; 0x6c
    4fbc:	ldr	r1, [sp, #12]
    4fbe:	ldr	r0, [sp, #20]
    4fc0:	bl	59b8 <__ssprint_r>
    4fc4:	cmp	r0, #0
    4fc6:	bne.w	4634 <_svfprintf_r+0x1ec>
    4fca:	ldr	r3, [sp, #116]	; 0x74
    4fcc:	add.w	r9, sp, #160	; 0xa0
    4fd0:	b.n	4908 <_svfprintf_r+0x4c0>
    4fd2:	cmp.w	r8, #0
    4fd6:	strb.w	r7, [sp, #79]	; 0x4f
    4fda:	blt.w	54bc <_svfprintf_r+0x1074>
    4fde:	orrs.w	r3, r4, r5
    4fe2:	bic.w	fp, fp, #128	; 0x80
    4fe6:	bne.w	4b72 <_svfprintf_r+0x72a>
    4fea:	cmp.w	r8, #0
    4fee:	beq.w	4cea <_svfprintf_r+0x8a2>
    4ff2:	movs	r7, #0
    4ff4:	b.n	4d46 <_svfprintf_r+0x8fe>
    4ff6:	ldr	r4, [sp, #84]	; 0x54
    4ff8:	cmp	r4, #0
    4ffa:	ble.w	54c0 <_svfprintf_r+0x1078>
    4ffe:	ldr	r2, [sp, #56]	; 0x38
    5000:	ldr	r1, [sp, #52]	; 0x34
    5002:	cmp	r2, r1
    5004:	it	ge
    5006:	movge	r2, r1
    5008:	cmp	r2, #0
    500a:	mov	r4, r2
    500c:	ble.n	502a <_svfprintf_r+0xbe2>
    500e:	ldr	r2, [sp, #112]	; 0x70
    5010:	str.w	r6, [r9]
    5014:	adds	r2, #1
    5016:	add	r3, r4
    5018:	cmp	r2, #7
    501a:	str	r3, [sp, #116]	; 0x74
    501c:	str.w	r4, [r9, #4]
    5020:	str	r2, [sp, #112]	; 0x70
    5022:	bgt.w	570a <_svfprintf_r+0x12c2>
    5026:	add.w	r9, r9, #8
    502a:	ldr	r2, [sp, #56]	; 0x38
    502c:	cmp	r4, #0
    502e:	it	ge
    5030:	subge	r2, r2, r4
    5032:	cmp	r2, #0
    5034:	mov	r4, r2
    5036:	ble.w	521c <_svfprintf_r+0xdd4>
    503a:	cmp	r4, #16
    503c:	ldr	r2, [sp, #112]	; 0x70
    503e:	ldr	r7, [pc, #772]	; (5344 <_svfprintf_r+0xefc>)
    5040:	ble.w	5476 <_svfprintf_r+0x102e>
    5044:	mov	r1, r9
    5046:	movs	r5, #16
    5048:	mov	r9, r6
    504a:	ldr.w	r8, [sp, #20]
    504e:	ldr	r6, [sp, #12]
    5050:	b.n	505c <_svfprintf_r+0xc14>
    5052:	adds	r1, #8
    5054:	subs	r4, #16
    5056:	cmp	r4, #16
    5058:	ble.w	5472 <_svfprintf_r+0x102a>
    505c:	adds	r2, #1
    505e:	adds	r3, #16
    5060:	cmp	r2, #7
    5062:	str	r3, [sp, #116]	; 0x74
    5064:	str	r2, [sp, #112]	; 0x70
    5066:	str	r7, [r1, #0]
    5068:	str	r5, [r1, #4]
    506a:	ble.n	5052 <_svfprintf_r+0xc0a>
    506c:	add	r2, sp, #108	; 0x6c
    506e:	mov	r1, r6
    5070:	mov	r0, r8
    5072:	bl	59b8 <__ssprint_r>
    5076:	cmp	r0, #0
    5078:	bne.w	4634 <_svfprintf_r+0x1ec>
    507c:	ldr	r3, [sp, #116]	; 0x74
    507e:	ldr	r2, [sp, #112]	; 0x70
    5080:	add	r1, sp, #160	; 0xa0
    5082:	b.n	5054 <_svfprintf_r+0xc0c>
    5084:	add	r2, sp, #108	; 0x6c
    5086:	ldr	r1, [sp, #12]
    5088:	ldr	r0, [sp, #20]
    508a:	bl	59b8 <__ssprint_r>
    508e:	cmp	r0, #0
    5090:	bne.w	4634 <_svfprintf_r+0x1ec>
    5094:	ldrb.w	r7, [sp, #79]	; 0x4f
    5098:	ldr	r3, [sp, #116]	; 0x74
    509a:	add.w	r9, sp, #160	; 0xa0
    509e:	b.n	48c8 <_svfprintf_r+0x480>
    50a0:	ands.w	r2, fp, #16
    50a4:	bne.w	4f56 <_svfprintf_r+0xb0e>
    50a8:	ands.w	r3, fp, #64	; 0x40
    50ac:	beq.w	4f56 <_svfprintf_r+0xb0e>
    50b0:	ldr	r1, [sp, #36]	; 0x24
    50b2:	strb.w	r2, [sp, #79]	; 0x4f
    50b6:	mov	r3, r1
    50b8:	cmp.w	r8, #0
    50bc:	add.w	r3, r3, #4
    50c0:	ldrh	r4, [r1, #0]
    50c2:	mov.w	r5, #0
    50c6:	blt.w	55f2 <_svfprintf_r+0x11aa>
    50ca:	orrs.w	r1, r4, r5
    50ce:	bic.w	fp, fp, #128	; 0x80
    50d2:	str	r3, [sp, #36]	; 0x24
    50d4:	mov	r7, r2
    50d6:	bne.w	4792 <_svfprintf_r+0x34a>
    50da:	b.n	4f7e <_svfprintf_r+0xb36>
    50dc:	subs	r4, r1, #1
    50de:	cmp	r4, #0
    50e0:	ble.w	4f10 <_svfprintf_r+0xac8>
    50e4:	cmp	r4, #16
    50e6:	ldr	r7, [pc, #604]	; (5344 <_svfprintf_r+0xefc>)
    50e8:	ble.n	5130 <_svfprintf_r+0xce8>
    50ea:	movs	r5, #16
    50ec:	ldr	r6, [sp, #20]
    50ee:	ldr.w	r8, [sp, #12]
    50f2:	b.n	50fe <_svfprintf_r+0xcb6>
    50f4:	subs	r4, #16
    50f6:	cmp	r4, #16
    50f8:	add.w	r9, r9, #8
    50fc:	ble.n	5130 <_svfprintf_r+0xce8>
    50fe:	adds	r2, #1
    5100:	adds	r3, #16
    5102:	cmp	r2, #7
    5104:	str	r3, [sp, #116]	; 0x74
    5106:	str	r2, [sp, #112]	; 0x70
    5108:	str.w	r7, [r9]
    510c:	str.w	r5, [r9, #4]
    5110:	ble.n	50f4 <_svfprintf_r+0xcac>
    5112:	add	r2, sp, #108	; 0x6c
    5114:	mov	r1, r8
    5116:	mov	r0, r6
    5118:	bl	59b8 <__ssprint_r>
    511c:	cmp	r0, #0
    511e:	bne.w	4634 <_svfprintf_r+0x1ec>
    5122:	subs	r4, #16
    5124:	cmp	r4, #16
    5126:	ldr	r3, [sp, #116]	; 0x74
    5128:	ldr	r2, [sp, #112]	; 0x70
    512a:	add.w	r9, sp, #160	; 0xa0
    512e:	bgt.n	50fe <_svfprintf_r+0xcb6>
    5130:	adds	r2, #1
    5132:	add	r3, r4
    5134:	cmp	r2, #7
    5136:	str	r3, [sp, #116]	; 0x74
    5138:	str	r2, [sp, #112]	; 0x70
    513a:	str.w	r7, [r9]
    513e:	str.w	r4, [r9, #4]
    5142:	ble.w	4f0c <_svfprintf_r+0xac4>
    5146:	add	r2, sp, #108	; 0x6c
    5148:	ldr	r1, [sp, #12]
    514a:	ldr	r0, [sp, #20]
    514c:	bl	59b8 <__ssprint_r>
    5150:	cmp	r0, #0
    5152:	bne.w	4634 <_svfprintf_r+0x1ec>
    5156:	ldr	r3, [sp, #116]	; 0x74
    5158:	ldr	r2, [sp, #112]	; 0x70
    515a:	add.w	r9, sp, #160	; 0xa0
    515e:	b.n	4f10 <_svfprintf_r+0xac8>
    5160:	tst.w	fp, #16
    5164:	bne.n	51ce <_svfprintf_r+0xd86>
    5166:	tst.w	fp, #64	; 0x40
    516a:	beq.n	51ce <_svfprintf_r+0xd86>
    516c:	ldr	r1, [sp, #36]	; 0x24
    516e:	ldrsh.w	r4, [r1]
    5172:	adds	r1, #4
    5174:	asrs	r5, r4, #31
    5176:	mov	r2, r4
    5178:	mov	r3, r5
    517a:	str	r1, [sp, #36]	; 0x24
    517c:	b.w	4770 <_svfprintf_r+0x328>
    5180:	adds	r2, #1
    5182:	add	r3, r4
    5184:	cmp	r2, #7
    5186:	str	r3, [sp, #116]	; 0x74
    5188:	str	r2, [sp, #112]	; 0x70
    518a:	str.w	r7, [r9]
    518e:	str.w	r4, [r9, #4]
    5192:	ble.w	49a6 <_svfprintf_r+0x55e>
    5196:	b.n	4f2a <_svfprintf_r+0xae2>
    5198:	ldr	r1, [sp, #36]	; 0x24
    519a:	cmp.w	r8, #0
    519e:	ldr	r4, [r1, #0]
    51a0:	strb.w	r3, [sp, #79]	; 0x4f
    51a4:	add.w	r7, r1, #4
    51a8:	mov.w	r5, #0
    51ac:	blt.w	533a <_svfprintf_r+0xef2>
    51b0:	orrs.w	r2, r4, r5
    51b4:	bic.w	fp, fp, #128	; 0x80
    51b8:	str	r7, [sp, #36]	; 0x24
    51ba:	beq.w	4d22 <_svfprintf_r+0x8da>
    51be:	mov	r7, r3
    51c0:	b.w	468c <_svfprintf_r+0x244>
    51c4:	ldr	r4, [r3, #0]
    51c6:	adds	r3, #4
    51c8:	str	r3, [sp, #36]	; 0x24
    51ca:	movs	r5, #0
    51cc:	b.n	4b3c <_svfprintf_r+0x6f4>
    51ce:	ldr	r2, [sp, #36]	; 0x24
    51d0:	ldr	r4, [r2, #0]
    51d2:	mov	r3, r2
    51d4:	adds	r3, #4
    51d6:	asrs	r5, r4, #31
    51d8:	mov	r2, r4
    51da:	str	r3, [sp, #36]	; 0x24
    51dc:	cmp	r2, #0
    51de:	mov	r3, r5
    51e0:	sbcs.w	r3, r3, #0
    51e4:	bge.w	477a <_svfprintf_r+0x332>
    51e8:	negs	r4, r4
    51ea:	mov.w	r7, #45	; 0x2d
    51ee:	sbc.w	r5, r5, r5, lsl #1
    51f2:	cmp.w	r8, #0
    51f6:	strb.w	r7, [sp, #79]	; 0x4f
    51fa:	blt.w	4792 <_svfprintf_r+0x34a>
    51fe:	bic.w	fp, fp, #128	; 0x80
    5202:	b.w	4792 <_svfprintf_r+0x34a>
    5206:	add	r2, sp, #108	; 0x6c
    5208:	ldr	r1, [sp, #12]
    520a:	ldr	r0, [sp, #20]
    520c:	bl	59b8 <__ssprint_r>
    5210:	cmp	r0, #0
    5212:	bne.w	4634 <_svfprintf_r+0x1ec>
    5216:	ldr	r3, [sp, #116]	; 0x74
    5218:	add.w	r9, sp, #160	; 0xa0
    521c:	ldr	r1, [sp, #56]	; 0x38
    521e:	ldr	r2, [sp, #84]	; 0x54
    5220:	add	r1, r6
    5222:	mov	r5, r1
    5224:	ldr	r1, [sp, #52]	; 0x34
    5226:	cmp	r2, r1
    5228:	blt.n	52ba <_svfprintf_r+0xe72>
    522a:	tst.w	fp, #1
    522e:	bne.n	52ba <_svfprintf_r+0xe72>
    5230:	ldr	r0, [sp, #52]	; 0x34
    5232:	add	r6, r0
    5234:	subs	r4, r6, r5
    5236:	subs	r2, r0, r2
    5238:	cmp	r4, r2
    523a:	it	ge
    523c:	movge	r4, r2
    523e:	cmp	r4, #0
    5240:	mov	r6, r4
    5242:	ble.n	5260 <_svfprintf_r+0xe18>
    5244:	ldr	r1, [sp, #112]	; 0x70
    5246:	str.w	r5, [r9]
    524a:	adds	r1, #1
    524c:	add	r3, r4
    524e:	cmp	r1, #7
    5250:	str	r3, [sp, #116]	; 0x74
    5252:	str.w	r4, [r9, #4]
    5256:	str	r1, [sp, #112]	; 0x70
    5258:	bgt.w	575c <_svfprintf_r+0x1314>
    525c:	add.w	r9, r9, #8
    5260:	cmp	r6, #0
    5262:	ite	ge
    5264:	subge	r4, r2, r6
    5266:	movlt	r4, r2
    5268:	cmp	r4, #0
    526a:	ble.w	49aa <_svfprintf_r+0x562>
    526e:	cmp	r4, #16
    5270:	ldr	r2, [sp, #112]	; 0x70
    5272:	ldr	r7, [pc, #208]	; (5344 <_svfprintf_r+0xefc>)
    5274:	ble.n	5180 <_svfprintf_r+0xd38>
    5276:	movs	r5, #16
    5278:	ldr	r6, [sp, #20]
    527a:	ldr.w	r8, [sp, #12]
    527e:	b.n	528c <_svfprintf_r+0xe44>
    5280:	add.w	r9, r9, #8
    5284:	subs	r4, #16
    5286:	cmp	r4, #16
    5288:	ble.w	5180 <_svfprintf_r+0xd38>
    528c:	adds	r2, #1
    528e:	adds	r3, #16
    5290:	cmp	r2, #7
    5292:	str	r3, [sp, #116]	; 0x74
    5294:	str	r2, [sp, #112]	; 0x70
    5296:	str.w	r7, [r9]
    529a:	str.w	r5, [r9, #4]
    529e:	ble.n	5280 <_svfprintf_r+0xe38>
    52a0:	add	r2, sp, #108	; 0x6c
    52a2:	mov	r1, r8
    52a4:	mov	r0, r6
    52a6:	bl	59b8 <__ssprint_r>
    52aa:	cmp	r0, #0
    52ac:	bne.w	4634 <_svfprintf_r+0x1ec>
    52b0:	ldr	r3, [sp, #116]	; 0x74
    52b2:	ldr	r2, [sp, #112]	; 0x70
    52b4:	add.w	r9, sp, #160	; 0xa0
    52b8:	b.n	5284 <_svfprintf_r+0xe3c>
    52ba:	ldr	r1, [sp, #112]	; 0x70
    52bc:	ldr	r4, [sp, #60]	; 0x3c
    52be:	ldr	r0, [sp, #64]	; 0x40
    52c0:	str.w	r0, [r9]
    52c4:	adds	r1, #1
    52c6:	add	r3, r4
    52c8:	cmp	r1, #7
    52ca:	str	r3, [sp, #116]	; 0x74
    52cc:	str.w	r4, [r9, #4]
    52d0:	str	r1, [sp, #112]	; 0x70
    52d2:	bgt.w	5722 <_svfprintf_r+0x12da>
    52d6:	add.w	r9, r9, #8
    52da:	b.n	5230 <_svfprintf_r+0xde8>
    52dc:	tst.w	fp, #1
    52e0:	bne.w	4ebc <_svfprintf_r+0xa74>
    52e4:	cmp	r2, #7
    52e6:	ble.w	4f0c <_svfprintf_r+0xac4>
    52ea:	b.n	5146 <_svfprintf_r+0xcfe>
    52ec:	add	r2, sp, #108	; 0x6c
    52ee:	ldr	r1, [sp, #12]
    52f0:	ldr	r0, [sp, #20]
    52f2:	bl	59b8 <__ssprint_r>
    52f6:	cmp	r0, #0
    52f8:	bne.w	4634 <_svfprintf_r+0x1ec>
    52fc:	ldr	r3, [sp, #116]	; 0x74
    52fe:	ldr	r2, [sp, #112]	; 0x70
    5300:	add.w	r9, sp, #160	; 0xa0
    5304:	b.n	4ec6 <_svfprintf_r+0xa7e>
    5306:	add	r2, sp, #108	; 0x6c
    5308:	ldr	r1, [sp, #12]
    530a:	ldr	r0, [sp, #20]
    530c:	bl	59b8 <__ssprint_r>
    5310:	cmp	r0, #0
    5312:	bne.w	4634 <_svfprintf_r+0x1ec>
    5316:	ldr	r3, [sp, #116]	; 0x74
    5318:	ldr	r2, [sp, #112]	; 0x70
    531a:	add.w	r9, sp, #160	; 0xa0
    531e:	b.n	4ee4 <_svfprintf_r+0xa9c>
    5320:	add	r2, sp, #108	; 0x6c
    5322:	ldr	r1, [sp, #12]
    5324:	ldr	r0, [sp, #20]
    5326:	bl	59b8 <__ssprint_r>
    532a:	cmp	r0, #0
    532c:	bne.w	4634 <_svfprintf_r+0x1ec>
    5330:	ldr	r3, [sp, #116]	; 0x74
    5332:	add.w	r9, sp, #160	; 0xa0
    5336:	b.w	4910 <_svfprintf_r+0x4c8>
    533a:	str	r7, [sp, #36]	; 0x24
    533c:	movs	r7, #0
    533e:	b.w	468c <_svfprintf_r+0x244>
    5342:	nop
    5344:	.word	0x20000560
    5348:	tst.w	fp, #16
    534c:	bne.n	5366 <_svfprintf_r+0xf1e>
    534e:	tst.w	fp, #64	; 0x40
    5352:	beq.n	5366 <_svfprintf_r+0xf1e>
    5354:	ldr	r2, [sp, #36]	; 0x24
    5356:	ldr	r3, [r2, #0]
    5358:	adds	r2, #4
    535a:	str	r2, [sp, #36]	; 0x24
    535c:	ldrh.w	r2, [sp, #24]
    5360:	strh	r2, [r3, #0]
    5362:	b.w	4494 <_svfprintf_r+0x4c>
    5366:	ldr	r2, [sp, #36]	; 0x24
    5368:	ldr	r3, [r2, #0]
    536a:	adds	r2, #4
    536c:	str	r2, [sp, #36]	; 0x24
    536e:	ldr	r2, [sp, #24]
    5370:	str	r2, [r3, #0]
    5372:	b.w	4494 <_svfprintf_r+0x4c>
    5376:	vcmp.f64	d8, d8
    537a:	vmrs	APSR_nzcv, fpscr
    537e:	bvs.w	58be <_svfprintf_r+0x1476>
    5382:	ldr	r3, [sp, #48]	; 0x30
    5384:	cmp.w	r8, #4294967295
    5388:	bic.w	r5, r3, #32
    538c:	beq.w	57da <_svfprintf_r+0x1392>
    5390:	cmp	r5, #71	; 0x47
    5392:	beq.w	55e2 <_svfprintf_r+0x119a>
    5396:	orr.w	r3, fp, #256	; 0x100
    539a:	str	r3, [sp, #40]	; 0x28
    539c:	vmov	r3, s17
    53a0:	cmp	r3, #0
    53a2:	blt.w	57e0 <_svfprintf_r+0x1398>
    53a6:	vmov.f64	d10, d8
    53aa:	movs	r7, #0
    53ac:	ldr	r3, [sp, #48]	; 0x30
    53ae:	cmp	r3, #102	; 0x66
    53b0:	beq.w	57b8 <_svfprintf_r+0x1370>
    53b4:	cmp	r3, #70	; 0x46
    53b6:	beq.w	5592 <_svfprintf_r+0x114a>
    53ba:	vmov.f64	d0, d10
    53be:	cmp	r5, #69	; 0x45
    53c0:	ite	eq
    53c2:	addeq.w	r4, r8, #1
    53c6:	movne	r4, r8
    53c8:	add	r2, sp, #100	; 0x64
    53ca:	add	r3, sp, #88	; 0x58
    53cc:	str	r2, [sp, #4]
    53ce:	str	r3, [sp, #0]
    53d0:	mov	r2, r4
    53d2:	add	r3, sp, #84	; 0x54
    53d4:	movs	r1, #2
    53d6:	ldr	r0, [sp, #20]
    53d8:	bl	37c0 <_dtoa_r>
    53dc:	ldr	r3, [sp, #48]	; 0x30
    53de:	cmp	r3, #103	; 0x67
    53e0:	mov	r6, r0
    53e2:	bne.w	5802 <_svfprintf_r+0x13ba>
    53e6:	tst.w	fp, #1
    53ea:	beq.w	58ba <_svfprintf_r+0x1472>
    53ee:	adds	r1, r6, r4
    53f0:	vcmp.f64	d10, #0.0
    53f4:	vmrs	APSR_nzcv, fpscr
    53f8:	beq.w	5706 <_svfprintf_r+0x12be>
    53fc:	ldr	r3, [sp, #100]	; 0x64
    53fe:	cmp	r1, r3
    5400:	bls.n	5410 <_svfprintf_r+0xfc8>
    5402:	movs	r0, #48	; 0x30
    5404:	adds	r2, r3, #1
    5406:	str	r2, [sp, #100]	; 0x64
    5408:	strb	r0, [r3, #0]
    540a:	ldr	r3, [sp, #100]	; 0x64
    540c:	cmp	r1, r3
    540e:	bhi.n	5404 <_svfprintf_r+0xfbc>
    5410:	subs	r3, r3, r6
    5412:	cmp	r5, #71	; 0x47
    5414:	str	r3, [sp, #52]	; 0x34
    5416:	beq.w	5658 <_svfprintf_r+0x1210>
    541a:	ldr	r3, [sp, #48]	; 0x30
    541c:	cmp	r3, #101	; 0x65
    541e:	ble.w	5820 <_svfprintf_r+0x13d8>
    5422:	ldr	r3, [sp, #48]	; 0x30
    5424:	cmp	r3, #102	; 0x66
    5426:	ldr	r3, [sp, #84]	; 0x54
    5428:	beq.w	5824 <_svfprintf_r+0x13dc>
    542c:	str	r3, [sp, #56]	; 0x38
    542e:	ldr	r2, [sp, #56]	; 0x38
    5430:	ldr	r1, [sp, #52]	; 0x34
    5432:	cmp	r2, r1
    5434:	blt.w	57e8 <_svfprintf_r+0x13a0>
    5438:	tst.w	fp, #1
    543c:	bne.w	58a8 <_svfprintf_r+0x1460>
    5440:	bic.w	r3, r2, r2, asr #31
    5444:	str	r2, [sp, #32]
    5446:	movs	r2, #103	; 0x67
    5448:	str	r2, [sp, #48]	; 0x30
    544a:	cmp	r7, #0
    544c:	bne.w	563c <_svfprintf_r+0x11f4>
    5450:	mov	r8, r7
    5452:	str	r3, [sp, #16]
    5454:	ldr.w	fp, [sp, #40]	; 0x28
    5458:	ldrb.w	r7, [sp, #79]	; 0x4f
    545c:	b.w	482c <_svfprintf_r+0x3e4>
    5460:	bic.w	r7, r7, #7
    5464:	add.w	r3, r7, #8
    5468:	vldr	d8, [r7]
    546c:	str	r3, [sp, #36]	; 0x24
    546e:	b.w	47ee <_svfprintf_r+0x3a6>
    5472:	mov	r6, r9
    5474:	mov	r9, r1
    5476:	adds	r2, #1
    5478:	add	r3, r4
    547a:	cmp	r2, #7
    547c:	str	r3, [sp, #116]	; 0x74
    547e:	str	r2, [sp, #112]	; 0x70
    5480:	str.w	r7, [r9]
    5484:	str.w	r4, [r9, #4]
    5488:	bgt.w	5206 <_svfprintf_r+0xdbe>
    548c:	add.w	r9, r9, #8
    5490:	b.n	521c <_svfprintf_r+0xdd4>
    5492:	movs	r7, #0
    5494:	cmp	r8, r7
    5496:	strb.w	r7, [sp, #79]	; 0x4f
    549a:	blt.w	4d46 <_svfprintf_r+0x8fe>
    549e:	bic.w	fp, fp, #128	; 0x80
    54a2:	b.n	4ce2 <_svfprintf_r+0x89a>
    54a4:	add	r2, sp, #108	; 0x6c
    54a6:	ldr	r1, [sp, #12]
    54a8:	ldr	r0, [sp, #20]
    54aa:	bl	59b8 <__ssprint_r>
    54ae:	cmp	r0, #0
    54b0:	bne.w	4634 <_svfprintf_r+0x1ec>
    54b4:	ldr	r3, [sp, #116]	; 0x74
    54b6:	add.w	r9, sp, #160	; 0xa0
    54ba:	b.n	4d84 <_svfprintf_r+0x93c>
    54bc:	ldr	r7, [sp, #36]	; 0x24
    54be:	b.n	4d38 <_svfprintf_r+0x8f0>
    54c0:	ldr	r2, [sp, #112]	; 0x70
    54c2:	ldr	r1, [pc, #740]	; (57a8 <_svfprintf_r+0x1360>)
    54c4:	str.w	r1, [r9]
    54c8:	adds	r2, #1
    54ca:	adds	r3, #1
    54cc:	movs	r1, #1
    54ce:	cmp	r2, #7
    54d0:	str	r3, [sp, #116]	; 0x74
    54d2:	str	r2, [sp, #112]	; 0x70
    54d4:	str.w	r1, [r9, #4]
    54d8:	bgt.n	55c8 <_svfprintf_r+0x1180>
    54da:	add.w	r9, r9, #8
    54de:	cbnz	r4, 54ec <_svfprintf_r+0x10a4>
    54e0:	ldr	r2, [sp, #52]	; 0x34
    54e2:	cbnz	r2, 54ec <_svfprintf_r+0x10a4>
    54e4:	tst.w	fp, #1
    54e8:	beq.w	49aa <_svfprintf_r+0x562>
    54ec:	ldr	r2, [sp, #112]	; 0x70
    54ee:	ldr	r0, [sp, #60]	; 0x3c
    54f0:	ldr	r1, [sp, #64]	; 0x40
    54f2:	str.w	r1, [r9]
    54f6:	adds	r2, #1
    54f8:	add	r3, r0
    54fa:	cmp	r2, #7
    54fc:	str	r3, [sp, #116]	; 0x74
    54fe:	str.w	r0, [r9, #4]
    5502:	str	r2, [sp, #112]	; 0x70
    5504:	bgt.w	5874 <_svfprintf_r+0x142c>
    5508:	add.w	r9, r9, #8
    550c:	negs	r4, r4
    550e:	cmp	r4, #0
    5510:	ble.w	5622 <_svfprintf_r+0x11da>
    5514:	cmp	r4, #16
    5516:	ldr	r7, [pc, #660]	; (57ac <_svfprintf_r+0x1364>)
    5518:	ble.w	5740 <_svfprintf_r+0x12f8>
    551c:	mov	r1, r9
    551e:	movs	r5, #16
    5520:	mov	r9, r6
    5522:	ldr.w	r8, [sp, #20]
    5526:	ldr	r6, [sp, #12]
    5528:	b.n	5534 <_svfprintf_r+0x10ec>
    552a:	adds	r1, #8
    552c:	subs	r4, #16
    552e:	cmp	r4, #16
    5530:	ble.w	573c <_svfprintf_r+0x12f4>
    5534:	adds	r2, #1
    5536:	adds	r3, #16
    5538:	cmp	r2, #7
    553a:	str	r3, [sp, #116]	; 0x74
    553c:	str	r2, [sp, #112]	; 0x70
    553e:	str	r7, [r1, #0]
    5540:	str	r5, [r1, #4]
    5542:	ble.n	552a <_svfprintf_r+0x10e2>
    5544:	add	r2, sp, #108	; 0x6c
    5546:	mov	r1, r6
    5548:	mov	r0, r8
    554a:	bl	59b8 <__ssprint_r>
    554e:	cmp	r0, #0
    5550:	bne.w	4634 <_svfprintf_r+0x1ec>
    5554:	ldr	r3, [sp, #116]	; 0x74
    5556:	ldr	r2, [sp, #112]	; 0x70
    5558:	add	r1, sp, #160	; 0xa0
    555a:	b.n	552c <_svfprintf_r+0x10e4>
    555c:	add	r2, sp, #108	; 0x6c
    555e:	ldr	r1, [sp, #12]
    5560:	ldr	r0, [sp, #20]
    5562:	bl	59b8 <__ssprint_r>
    5566:	cmp	r0, #0
    5568:	bne.w	4634 <_svfprintf_r+0x1ec>
    556c:	ldr	r3, [sp, #116]	; 0x74
    556e:	add.w	r9, sp, #160	; 0xa0
    5572:	b.n	4db4 <_svfprintf_r+0x96c>
    5574:	movs	r1, #64	; 0x40
    5576:	ldr	r0, [sp, #20]
    5578:	bl	1fb8 <_malloc_r>
    557c:	ldr	r2, [sp, #12]
    557e:	str	r0, [r2, #0]
    5580:	str	r0, [r2, #16]
    5582:	cmp	r0, #0
    5584:	beq.w	5962 <_svfprintf_r+0x151a>
    5588:	ldr	r2, [sp, #12]
    558a:	movs	r3, #64	; 0x40
    558c:	str	r3, [r2, #20]
    558e:	b.w	447a <_svfprintf_r+0x32>
    5592:	add	r2, sp, #100	; 0x64
    5594:	add	r3, sp, #88	; 0x58
    5596:	str	r2, [sp, #4]
    5598:	str	r3, [sp, #0]
    559a:	mov	r2, r8
    559c:	add	r3, sp, #84	; 0x54
    559e:	movs	r1, #3
    55a0:	vmov.f64	d0, d10
    55a4:	ldr	r0, [sp, #20]
    55a6:	bl	37c0 <_dtoa_r>
    55aa:	mov	r4, r8
    55ac:	mov	r6, r0
    55ae:	ldr	r3, [sp, #48]	; 0x30
    55b0:	cmp	r3, #70	; 0x46
    55b2:	add.w	r1, r6, r4
    55b6:	bne.w	53f0 <_svfprintf_r+0xfa8>
    55ba:	ldrb	r3, [r6, #0]
    55bc:	cmp	r3, #48	; 0x30
    55be:	beq.w	58dc <_svfprintf_r+0x1494>
    55c2:	ldr	r4, [sp, #84]	; 0x54
    55c4:	add	r1, r4
    55c6:	b.n	53f0 <_svfprintf_r+0xfa8>
    55c8:	add	r2, sp, #108	; 0x6c
    55ca:	ldr	r1, [sp, #12]
    55cc:	ldr	r0, [sp, #20]
    55ce:	bl	59b8 <__ssprint_r>
    55d2:	cmp	r0, #0
    55d4:	bne.w	4634 <_svfprintf_r+0x1ec>
    55d8:	ldr	r4, [sp, #84]	; 0x54
    55da:	ldr	r3, [sp, #116]	; 0x74
    55dc:	add.w	r9, sp, #160	; 0xa0
    55e0:	b.n	54de <_svfprintf_r+0x1096>
    55e2:	cmp.w	r8, #0
    55e6:	it	eq
    55e8:	moveq.w	r8, #1
    55ec:	b.n	5396 <_svfprintf_r+0xf4e>
    55ee:	str	r3, [sp, #36]	; 0x24
    55f0:	b.n	533c <_svfprintf_r+0xef4>
    55f2:	str	r3, [sp, #36]	; 0x24
    55f4:	mov	r7, r2
    55f6:	b.w	4af0 <_svfprintf_r+0x6a8>
    55fa:	mov	r0, r6
    55fc:	bl	2b00 <strlen>
    5600:	mov	r8, r4
    5602:	mov	r3, r0
    5604:	str	r0, [sp, #32]
    5606:	b.w	4ccc <_svfprintf_r+0x884>
    560a:	add	r2, sp, #108	; 0x6c
    560c:	ldr	r1, [sp, #12]
    560e:	ldr	r0, [sp, #20]
    5610:	bl	59b8 <__ssprint_r>
    5614:	cmp	r0, #0
    5616:	bne.w	4634 <_svfprintf_r+0x1ec>
    561a:	ldr	r3, [sp, #116]	; 0x74
    561c:	ldr	r2, [sp, #112]	; 0x70
    561e:	add.w	r9, sp, #160	; 0xa0
    5622:	ldr	r0, [sp, #52]	; 0x34
    5624:	str.w	r6, [r9]
    5628:	adds	r2, #1
    562a:	add	r3, r0
    562c:	cmp	r2, #7
    562e:	str	r3, [sp, #116]	; 0x74
    5630:	str	r2, [sp, #112]	; 0x70
    5632:	str.w	r0, [r9, #4]
    5636:	ble.w	49a6 <_svfprintf_r+0x55e>
    563a:	b.n	4f2a <_svfprintf_r+0xae2>
    563c:	movs	r7, #45	; 0x2d
    563e:	str	r3, [sp, #16]
    5640:	ldr.w	fp, [sp, #40]	; 0x28
    5644:	strb.w	r7, [sp, #79]	; 0x4f
    5648:	mov.w	r8, #0
    564c:	b.w	482e <_svfprintf_r+0x3e6>
    5650:	str	r7, [sp, #36]	; 0x24
    5652:	mov	r7, r3
    5654:	b.w	4af0 <_svfprintf_r+0x6a8>
    5658:	ldr	r3, [sp, #84]	; 0x54
    565a:	adds	r2, r3, #3
    565c:	blt.n	5664 <_svfprintf_r+0x121c>
    565e:	cmp	r8, r3
    5660:	bge.w	542c <_svfprintf_r+0xfe4>
    5664:	ldr	r2, [sp, #48]	; 0x30
    5666:	subs	r2, #2
    5668:	str	r2, [sp, #48]	; 0x30
    566a:	subs	r3, #1
    566c:	cmp	r3, #0
    566e:	ldrb.w	r2, [sp, #48]	; 0x30
    5672:	str	r3, [sp, #84]	; 0x54
    5674:	it	lt
    5676:	neglt	r3, r3
    5678:	strb.w	r2, [sp, #92]	; 0x5c
    567c:	ite	lt
    567e:	movlt	r2, #45	; 0x2d
    5680:	movge	r2, #43	; 0x2b
    5682:	cmp	r3, #9
    5684:	strb.w	r2, [sp, #93]	; 0x5d
    5688:	ble.w	5898 <_svfprintf_r+0x1450>
    568c:	add.w	r0, sp, #107	; 0x6b
    5690:	mov	r4, r0
    5692:	ldr	r2, [pc, #284]	; (57b0 <_svfprintf_r+0x1368>)
    5694:	smull	r2, r1, r2, r3
    5698:	asrs	r2, r3, #31
    569a:	rsb	r2, r2, r1, asr #2
    569e:	add.w	r1, r2, r2, lsl #2
    56a2:	sub.w	r3, r3, r1, lsl #1
    56a6:	add.w	r1, r3, #48	; 0x30
    56aa:	cmp	r2, #9
    56ac:	mov	r3, r2
    56ae:	strb.w	r1, [r4, #-1]!
    56b2:	bgt.n	5692 <_svfprintf_r+0x124a>
    56b4:	mov	r1, r4
    56b6:	adds	r3, #48	; 0x30
    56b8:	uxtb	r2, r3
    56ba:	strb.w	r2, [r1, #-1]!
    56be:	cmp	r0, r1
    56c0:	bls.w	5988 <_svfprintf_r+0x1540>
    56c4:	add.w	r1, sp, #94	; 0x5e
    56c8:	mov	r3, r4
    56ca:	b.n	56d0 <_svfprintf_r+0x1288>
    56cc:	ldrb.w	r2, [r3], #1
    56d0:	strb.w	r2, [r1], #1
    56d4:	cmp	r0, r3
    56d6:	bne.n	56cc <_svfprintf_r+0x1284>
    56d8:	adds	r3, r0, #1
    56da:	subs	r3, r3, r4
    56dc:	add.w	r2, sp, #94	; 0x5e
    56e0:	add	r3, r2
    56e2:	add	r2, sp, #92	; 0x5c
    56e4:	subs	r3, r3, r2
    56e6:	ldr	r2, [sp, #52]	; 0x34
    56e8:	str	r3, [sp, #68]	; 0x44
    56ea:	cmp	r2, #1
    56ec:	add	r3, r2
    56ee:	str	r3, [sp, #32]
    56f0:	ble.w	58f2 <_svfprintf_r+0x14aa>
    56f4:	ldr	r3, [sp, #32]
    56f6:	ldr	r2, [sp, #60]	; 0x3c
    56f8:	add	r3, r2
    56fa:	movs	r2, #0
    56fc:	str	r3, [sp, #32]
    56fe:	str	r2, [sp, #56]	; 0x38
    5700:	bic.w	r3, r3, r3, asr #31
    5704:	b.n	544a <_svfprintf_r+0x1002>
    5706:	mov	r3, r1
    5708:	b.n	5410 <_svfprintf_r+0xfc8>
    570a:	add	r2, sp, #108	; 0x6c
    570c:	ldr	r1, [sp, #12]
    570e:	ldr	r0, [sp, #20]
    5710:	bl	59b8 <__ssprint_r>
    5714:	cmp	r0, #0
    5716:	bne.w	4634 <_svfprintf_r+0x1ec>
    571a:	ldr	r3, [sp, #116]	; 0x74
    571c:	add.w	r9, sp, #160	; 0xa0
    5720:	b.n	502a <_svfprintf_r+0xbe2>
    5722:	add	r2, sp, #108	; 0x6c
    5724:	ldr	r1, [sp, #12]
    5726:	ldr	r0, [sp, #20]
    5728:	bl	59b8 <__ssprint_r>
    572c:	cmp	r0, #0
    572e:	bne.w	4634 <_svfprintf_r+0x1ec>
    5732:	ldr	r2, [sp, #84]	; 0x54
    5734:	ldr	r3, [sp, #116]	; 0x74
    5736:	add.w	r9, sp, #160	; 0xa0
    573a:	b.n	5230 <_svfprintf_r+0xde8>
    573c:	mov	r6, r9
    573e:	mov	r9, r1
    5740:	adds	r2, #1
    5742:	add	r3, r4
    5744:	cmp	r2, #7
    5746:	str	r3, [sp, #116]	; 0x74
    5748:	str	r2, [sp, #112]	; 0x70
    574a:	str.w	r7, [r9]
    574e:	str.w	r4, [r9, #4]
    5752:	bgt.w	560a <_svfprintf_r+0x11c2>
    5756:	add.w	r9, r9, #8
    575a:	b.n	5622 <_svfprintf_r+0x11da>
    575c:	add	r2, sp, #108	; 0x6c
    575e:	ldr	r1, [sp, #12]
    5760:	ldr	r0, [sp, #20]
    5762:	bl	59b8 <__ssprint_r>
    5766:	cmp	r0, #0
    5768:	bne.w	4634 <_svfprintf_r+0x1ec>
    576c:	ldr	r2, [sp, #84]	; 0x54
    576e:	ldr	r1, [sp, #52]	; 0x34
    5770:	ldr	r3, [sp, #116]	; 0x74
    5772:	subs	r2, r1, r2
    5774:	add.w	r9, sp, #160	; 0xa0
    5778:	b.n	5260 <_svfprintf_r+0xe18>
    577a:	cmp	r5, #6
    577c:	mov	r3, r5
    577e:	it	cs
    5780:	movcs	r3, #6
    5782:	str	r3, [sp, #32]
    5784:	bic.w	r3, r3, r3, asr #31
    5788:	mov	r8, r6
    578a:	str	r7, [sp, #36]	; 0x24
    578c:	str	r6, [sp, #56]	; 0x38
    578e:	mov	r7, r6
    5790:	str	r3, [sp, #16]
    5792:	ldr	r6, [pc, #32]	; (57b4 <_svfprintf_r+0x136c>)
    5794:	b.w	482c <_svfprintf_r+0x3e4>
    5798:	mov	fp, r3
    579a:	b.w	4b72 <_svfprintf_r+0x72a>
    579e:	movs	r7, #45	; 0x2d
    57a0:	strb.w	r7, [sp, #79]	; 0x4f
    57a4:	b.w	480e <_svfprintf_r+0x3c6>
    57a8:	.word	0x2000055c
    57ac:	.word	0x20000560
    57b0:	.word	0x66666667
    57b4:	.word	0x200005a8
    57b8:	add	r2, sp, #100	; 0x64
    57ba:	add	r3, sp, #88	; 0x58
    57bc:	str	r2, [sp, #4]
    57be:	str	r3, [sp, #0]
    57c0:	movs	r1, #3
    57c2:	add	r3, sp, #84	; 0x54
    57c4:	mov	r2, r8
    57c6:	vmov.f64	d0, d10
    57ca:	ldr	r0, [sp, #20]
    57cc:	bl	37c0 <_dtoa_r>
    57d0:	mov	r4, r8
    57d2:	mov	r6, r0
    57d4:	add.w	r1, r0, r8
    57d8:	b.n	55ba <_svfprintf_r+0x1172>
    57da:	mov.w	r8, #6
    57de:	b.n	5396 <_svfprintf_r+0xf4e>
    57e0:	vneg.f64	d10, d8
    57e4:	movs	r7, #45	; 0x2d
    57e6:	b.n	53ac <_svfprintf_r+0xf64>
    57e8:	ldr	r2, [sp, #60]	; 0x3c
    57ea:	ldr	r3, [sp, #52]	; 0x34
    57ec:	add	r3, r2
    57ee:	ldr	r2, [sp, #56]	; 0x38
    57f0:	str	r3, [sp, #32]
    57f2:	cmp	r2, #0
    57f4:	ble.w	5904 <_svfprintf_r+0x14bc>
    57f8:	movs	r2, #103	; 0x67
    57fa:	bic.w	r3, r3, r3, asr #31
    57fe:	str	r2, [sp, #48]	; 0x30
    5800:	b.n	544a <_svfprintf_r+0x1002>
    5802:	ldr	r3, [sp, #48]	; 0x30
    5804:	cmp	r3, #71	; 0x47
    5806:	bne.w	53ee <_svfprintf_r+0xfa6>
    580a:	tst.w	fp, #1
    580e:	bne.w	55ae <_svfprintf_r+0x1166>
    5812:	ldr	r3, [sp, #100]	; 0x64
    5814:	cmp	r5, #71	; 0x47
    5816:	sub.w	r3, r3, r6
    581a:	str	r3, [sp, #52]	; 0x34
    581c:	beq.w	5658 <_svfprintf_r+0x1210>
    5820:	ldr	r3, [sp, #84]	; 0x54
    5822:	b.n	566a <_svfprintf_r+0x1222>
    5824:	cmp	r3, #0
    5826:	mov	r2, r3
    5828:	str	r3, [sp, #56]	; 0x38
    582a:	ble.n	5914 <_svfprintf_r+0x14cc>
    582c:	cmp.w	r8, #0
    5830:	bne.n	58ca <_svfprintf_r+0x1482>
    5832:	tst.w	fp, #1
    5836:	bne.n	58ca <_svfprintf_r+0x1482>
    5838:	bic.w	r3, r3, r3, asr #31
    583c:	str	r2, [sp, #32]
    583e:	b.n	544a <_svfprintf_r+0x1002>
    5840:	tst.w	fp, #1
    5844:	mov	r7, r8
    5846:	beq.n	5854 <_svfprintf_r+0x140c>
    5848:	add	r6, sp, #224	; 0xe0
    584a:	movs	r3, #48	; 0x30
    584c:	strb.w	r3, [r6, #-65]!
    5850:	b.w	4b00 <_svfprintf_r+0x6b8>
    5854:	str.w	r8, [sp, #32]
    5858:	add	r6, sp, #160	; 0xa0
    585a:	b.w	4b06 <_svfprintf_r+0x6be>
    585e:	bic.w	r3, r5, r5, asr #31
    5862:	str	r7, [sp, #36]	; 0x24
    5864:	str	r3, [sp, #16]
    5866:	str	r5, [sp, #32]
    5868:	mov	r8, r0
    586a:	str	r0, [sp, #56]	; 0x38
    586c:	ldrb.w	r7, [sp, #79]	; 0x4f
    5870:	b.w	482c <_svfprintf_r+0x3e4>
    5874:	add	r2, sp, #108	; 0x6c
    5876:	ldr	r1, [sp, #12]
    5878:	ldr	r0, [sp, #20]
    587a:	bl	59b8 <__ssprint_r>
    587e:	cmp	r0, #0
    5880:	bne.w	4634 <_svfprintf_r+0x1ec>
    5884:	ldr	r4, [sp, #84]	; 0x54
    5886:	ldr	r3, [sp, #116]	; 0x74
    5888:	ldr	r2, [sp, #112]	; 0x70
    588a:	add.w	r9, sp, #160	; 0xa0
    588e:	b.n	550c <_svfprintf_r+0x10c4>
    5890:	mov	sl, r4
    5892:	movs	r5, #0
    5894:	b.w	44fe <_svfprintf_r+0xb6>
    5898:	adds	r3, #48	; 0x30
    589a:	movs	r2, #48	; 0x30
    589c:	strb.w	r3, [sp, #95]	; 0x5f
    58a0:	strb.w	r2, [sp, #94]	; 0x5e
    58a4:	add	r3, sp, #96	; 0x60
    58a6:	b.n	56e2 <_svfprintf_r+0x129a>
    58a8:	ldr	r2, [sp, #60]	; 0x3c
    58aa:	ldr	r3, [sp, #56]	; 0x38
    58ac:	add	r3, r2
    58ae:	movs	r2, #103	; 0x67
    58b0:	str	r3, [sp, #32]
    58b2:	str	r2, [sp, #48]	; 0x30
    58b4:	bic.w	r3, r3, r3, asr #31
    58b8:	b.n	544a <_svfprintf_r+0x1002>
    58ba:	ldr	r3, [sp, #100]	; 0x64
    58bc:	b.n	5410 <_svfprintf_r+0xfc8>
    58be:	ldr	r6, [pc, #240]	; (59b0 <_svfprintf_r+0x1568>)
    58c0:	ldr	r3, [pc, #240]	; (59b4 <_svfprintf_r+0x156c>)
    58c2:	ldrb.w	r7, [sp, #79]	; 0x4f
    58c6:	b.w	4812 <_svfprintf_r+0x3ca>
    58ca:	ldr	r3, [sp, #56]	; 0x38
    58cc:	ldr	r2, [sp, #60]	; 0x3c
    58ce:	adds	r5, r3, r2
    58d0:	add.w	r3, r5, r8
    58d4:	str	r3, [sp, #32]
    58d6:	bic.w	r3, r3, r3, asr #31
    58da:	b.n	544a <_svfprintf_r+0x1002>
    58dc:	vcmp.f64	d10, #0.0
    58e0:	vmrs	APSR_nzcv, fpscr
    58e4:	beq.w	55c2 <_svfprintf_r+0x117a>
    58e8:	rsb	r4, r4, #1
    58ec:	str	r4, [sp, #84]	; 0x54
    58ee:	add	r1, r4
    58f0:	b.n	53f0 <_svfprintf_r+0xfa8>
    58f2:	ands.w	r3, fp, #1
    58f6:	bne.w	56f4 <_svfprintf_r+0x12ac>
    58fa:	str	r3, [sp, #56]	; 0x38
    58fc:	ldr	r3, [sp, #32]
    58fe:	bic.w	r3, r3, r3, asr #31
    5902:	b.n	544a <_svfprintf_r+0x1002>
    5904:	ldr	r3, [sp, #56]	; 0x38
    5906:	ldr	r2, [sp, #32]
    5908:	rsb	r3, r3, #1
    590c:	add	r2, r3
    590e:	mov	r3, r2
    5910:	str	r2, [sp, #32]
    5912:	b.n	57f8 <_svfprintf_r+0x13b0>
    5914:	cmp.w	r8, #0
    5918:	bne.n	5920 <_svfprintf_r+0x14d8>
    591a:	tst.w	fp, #1
    591e:	beq.n	5930 <_svfprintf_r+0x14e8>
    5920:	ldr	r3, [sp, #60]	; 0x3c
    5922:	adds	r5, r3, #1
    5924:	add.w	r3, r5, r8
    5928:	str	r3, [sp, #32]
    592a:	bic.w	r3, r3, r3, asr #31
    592e:	b.n	544a <_svfprintf_r+0x1002>
    5930:	movs	r3, #1
    5932:	str	r3, [sp, #32]
    5934:	b.n	544a <_svfprintf_r+0x1002>
    5936:	ldr	r0, [sp, #36]	; 0x24
    5938:	ldrb.w	r3, [sl, #1]
    593c:	ldr	r5, [r0, #0]
    593e:	adds	r0, #4
    5940:	cmp	r5, #0
    5942:	str	r0, [sp, #36]	; 0x24
    5944:	mov	sl, r4
    5946:	bge.w	44fa <_svfprintf_r+0xb2>
    594a:	mov.w	r5, #4294967295
    594e:	b.w	44fa <_svfprintf_r+0xb2>
    5952:	strb.w	r1, [sp, #79]	; 0x4f
    5956:	b.w	4c74 <_svfprintf_r+0x82c>
    595a:	strb.w	r1, [sp, #79]	; 0x4f
    595e:	b.w	4d00 <_svfprintf_r+0x8b8>
    5962:	ldr	r2, [sp, #20]
    5964:	movs	r3, #12
    5966:	str	r3, [r2, #0]
    5968:	mov.w	r0, #4294967295
    596c:	b.w	4646 <_svfprintf_r+0x1fe>
    5970:	strb.w	r1, [sp, #79]	; 0x4f
    5974:	b.w	4b20 <_svfprintf_r+0x6d8>
    5978:	strb.w	r1, [sp, #79]	; 0x4f
    597c:	b.w	4ac6 <_svfprintf_r+0x67e>
    5980:	strb.w	r1, [sp, #79]	; 0x4f
    5984:	b.w	4c2c <_svfprintf_r+0x7e4>
    5988:	add.w	r3, sp, #94	; 0x5e
    598c:	b.n	56e2 <_svfprintf_r+0x129a>
    598e:	strb.w	r1, [sp, #79]	; 0x4f
    5992:	b.w	465a <_svfprintf_r+0x212>
    5996:	strb.w	r1, [sp, #79]	; 0x4f
    599a:	b.w	4a62 <_svfprintf_r+0x61a>
    599e:	strb.w	r1, [sp, #79]	; 0x4f
    59a2:	b.w	47d2 <_svfprintf_r+0x38a>
    59a6:	strb.w	r1, [sp, #79]	; 0x4f
    59aa:	b.w	474e <_svfprintf_r+0x306>
    59ae:	nop
    59b0:	.word	0x2000057c
    59b4:	.word	0x20000578

000059b8 <__ssprint_r>:
    59b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59bc:	ldr	r3, [r2, #8]
    59be:	sub	sp, #12
    59c0:	mov	r8, r2
    59c2:	cmp	r3, #0
    59c4:	beq.n	5aac <__ssprint_r+0xf4>
    59c6:	mov	fp, r0
    59c8:	mov.w	r9, #0
    59cc:	ldr	r6, [r2, #0]
    59ce:	ldr	r0, [r1, #0]
    59d0:	ldr	r3, [r1, #8]
    59d2:	mov	r5, r1
    59d4:	mov	r4, r9
    59d6:	cmp	r4, #0
    59d8:	beq.n	5a66 <__ssprint_r+0xae>
    59da:	cmp	r4, r3
    59dc:	mov	r7, r3
    59de:	mov	sl, r3
    59e0:	bcc.n	5a70 <__ssprint_r+0xb8>
    59e2:	ldrh	r3, [r5, #12]
    59e4:	tst.w	r3, #1152	; 0x480
    59e8:	beq.n	5a46 <__ssprint_r+0x8e>
    59ea:	ldr	r7, [r5, #20]
    59ec:	ldr	r1, [r5, #16]
    59ee:	add.w	r7, r7, r7, lsl #1
    59f2:	rsb	sl, r1, r0
    59f6:	add.w	r7, r7, r7, lsr #31
    59fa:	adds	r0, r4, #1
    59fc:	asrs	r7, r7, #1
    59fe:	add	r0, sl
    5a00:	cmp	r0, r7
    5a02:	mov	r2, r7
    5a04:	itt	hi
    5a06:	movhi	r7, r0
    5a08:	movhi	r2, r7
    5a0a:	lsls	r3, r3, #21
    5a0c:	bpl.n	5a76 <__ssprint_r+0xbe>
    5a0e:	mov	r1, r2
    5a10:	mov	r0, fp
    5a12:	bl	1fb8 <_malloc_r>
    5a16:	cmp	r0, #0
    5a18:	beq.n	5a8a <__ssprint_r+0xd2>
    5a1a:	mov	r2, sl
    5a1c:	ldr	r1, [r5, #16]
    5a1e:	str	r0, [sp, #4]
    5a20:	bl	1a1c <memcpy>
    5a24:	ldrh	r2, [r5, #12]
    5a26:	ldr	r3, [sp, #4]
    5a28:	bic.w	r2, r2, #1152	; 0x480
    5a2c:	orr.w	r2, r2, #128	; 0x80
    5a30:	strh	r2, [r5, #12]
    5a32:	rsb	r2, sl, r7
    5a36:	add.w	r0, r3, sl
    5a3a:	str	r7, [r5, #20]
    5a3c:	str	r3, [r5, #16]
    5a3e:	str	r0, [r5, #0]
    5a40:	str	r2, [r5, #8]
    5a42:	mov	r7, r4
    5a44:	mov	sl, r4
    5a46:	mov	r2, sl
    5a48:	mov	r1, r9
    5a4a:	bl	2554 <memmove>
    5a4e:	ldr.w	r2, [r8, #8]
    5a52:	ldr	r3, [r5, #8]
    5a54:	ldr	r0, [r5, #0]
    5a56:	subs	r3, r3, r7
    5a58:	add	r0, sl
    5a5a:	subs	r4, r2, r4
    5a5c:	str	r3, [r5, #8]
    5a5e:	str	r0, [r5, #0]
    5a60:	str.w	r4, [r8, #8]
    5a64:	cbz	r4, 5aac <__ssprint_r+0xf4>
    5a66:	ldr.w	r9, [r6]
    5a6a:	ldr	r4, [r6, #4]
    5a6c:	adds	r6, #8
    5a6e:	b.n	59d6 <__ssprint_r+0x1e>
    5a70:	mov	r7, r4
    5a72:	mov	sl, r4
    5a74:	b.n	5a46 <__ssprint_r+0x8e>
    5a76:	mov	r0, fp
    5a78:	bl	26c0 <_realloc_r>
    5a7c:	mov	r3, r0
    5a7e:	cmp	r0, #0
    5a80:	bne.n	5a32 <__ssprint_r+0x7a>
    5a82:	ldr	r1, [r5, #16]
    5a84:	mov	r0, fp
    5a86:	bl	2d24 <_free_r>
    5a8a:	movs	r3, #12
    5a8c:	str.w	r3, [fp]
    5a90:	ldrh	r3, [r5, #12]
    5a92:	movs	r2, #0
    5a94:	orr.w	r3, r3, #64	; 0x40
    5a98:	mov.w	r0, #4294967295
    5a9c:	strh	r3, [r5, #12]
    5a9e:	str.w	r2, [r8, #8]
    5aa2:	str.w	r2, [r8, #4]
    5aa6:	add	sp, #12
    5aa8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5aac:	movs	r0, #0
    5aae:	str.w	r0, [r8, #4]
    5ab2:	add	sp, #12
    5ab4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005ab8 <__aeabi_uldivmod>:
    5ab8:	cbnz	r3, 5ad0 <__aeabi_uldivmod+0x18>
    5aba:	cbnz	r2, 5ad0 <__aeabi_uldivmod+0x18>
    5abc:	cmp	r1, #0
    5abe:	it	eq
    5ac0:	cmpeq	r0, #0
    5ac2:	itt	ne
    5ac4:	movne.w	r1, #4294967295
    5ac8:	movne.w	r0, #4294967295
    5acc:	b.w	5dcc <__aeabi_idiv0>
    5ad0:	sub.w	ip, sp, #8
    5ad4:	strd	ip, lr, [sp, #-16]!
    5ad8:	bl	5ae8 <__udivmoddi4>
    5adc:	ldr.w	lr, [sp, #4]
    5ae0:	ldrd	r2, r3, [sp, #8]
    5ae4:	add	sp, #16
    5ae6:	bx	lr

00005ae8 <__udivmoddi4>:
    5ae8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5aec:	mov	ip, r1
    5aee:	mov	r6, r1
    5af0:	mov	r4, r0
    5af2:	ldr	r5, [sp, #32]
    5af4:	cmp	r3, #0
    5af6:	bne.n	5b9a <__udivmoddi4+0xb2>
    5af8:	cmp	r2, r1
    5afa:	mov	r7, r2
    5afc:	bls.n	5bd8 <__udivmoddi4+0xf0>
    5afe:	clz	lr, r2
    5b02:	cmp.w	lr, #0
    5b06:	beq.n	5b20 <__udivmoddi4+0x38>
    5b08:	rsb	r4, lr, #32
    5b0c:	lsr.w	r4, r0, r4
    5b10:	lsl.w	r6, r1, lr
    5b14:	orr.w	ip, r4, r6
    5b18:	lsl.w	r7, r2, lr
    5b1c:	lsl.w	r4, r0, lr
    5b20:	mov.w	r9, r7, lsr #16
    5b24:	lsrs	r2, r4, #16
    5b26:	udiv	r0, ip, r9
    5b2a:	uxth.w	r8, r7
    5b2e:	mls	r6, r9, r0, ip
    5b32:	orr.w	r6, r2, r6, lsl #16
    5b36:	mul.w	r3, r0, r8
    5b3a:	cmp	r3, r6
    5b3c:	bls.n	5b52 <__udivmoddi4+0x6a>
    5b3e:	adds	r6, r6, r7
    5b40:	add.w	r2, r0, #4294967295
    5b44:	bcs.w	5d8c <__udivmoddi4+0x2a4>
    5b48:	cmp	r3, r6
    5b4a:	bls.w	5d8c <__udivmoddi4+0x2a4>
    5b4e:	subs	r0, #2
    5b50:	add	r6, r7
    5b52:	subs	r6, r6, r3
    5b54:	uxth	r2, r4
    5b56:	udiv	r3, r6, r9
    5b5a:	mls	r6, r9, r3, r6
    5b5e:	orr.w	r4, r2, r6, lsl #16
    5b62:	mul.w	r8, r3, r8
    5b66:	cmp	r8, r4
    5b68:	bls.n	5b7e <__udivmoddi4+0x96>
    5b6a:	adds	r4, r4, r7
    5b6c:	add.w	r2, r3, #4294967295
    5b70:	bcs.w	5d88 <__udivmoddi4+0x2a0>
    5b74:	cmp	r8, r4
    5b76:	bls.w	5d88 <__udivmoddi4+0x2a0>
    5b7a:	subs	r3, #2
    5b7c:	add	r4, r7
    5b7e:	rsb	r4, r8, r4
    5b82:	orr.w	r0, r3, r0, lsl #16
    5b86:	movs	r1, #0
    5b88:	cmp	r5, #0
    5b8a:	beq.n	5c52 <__udivmoddi4+0x16a>
    5b8c:	lsr.w	r4, r4, lr
    5b90:	movs	r3, #0
    5b92:	str	r4, [r5, #0]
    5b94:	str	r3, [r5, #4]
    5b96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b9a:	cmp	r3, r1
    5b9c:	bls.n	5bae <__udivmoddi4+0xc6>
    5b9e:	cmp	r5, #0
    5ba0:	beq.n	5c4e <__udivmoddi4+0x166>
    5ba2:	movs	r1, #0
    5ba4:	stmia.w	r5, {r0, r6}
    5ba8:	mov	r0, r1
    5baa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bae:	clz	r1, r3
    5bb2:	cmp	r1, #0
    5bb4:	bne.w	5cd8 <__udivmoddi4+0x1f0>
    5bb8:	cmp	r3, r6
    5bba:	bcc.n	5bc2 <__udivmoddi4+0xda>
    5bbc:	cmp	r2, r0
    5bbe:	bhi.w	5db2 <__udivmoddi4+0x2ca>
    5bc2:	subs	r4, r0, r2
    5bc4:	sbc.w	r6, r6, r3
    5bc8:	movs	r0, #1
    5bca:	mov	ip, r6
    5bcc:	cmp	r5, #0
    5bce:	beq.n	5c52 <__udivmoddi4+0x16a>
    5bd0:	stmia.w	r5, {r4, ip}
    5bd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bd8:	cbnz	r2, 5be0 <__udivmoddi4+0xf8>
    5bda:	movs	r7, #1
    5bdc:	udiv	r7, r7, r2
    5be0:	clz	lr, r7
    5be4:	cmp.w	lr, #0
    5be8:	bne.n	5c56 <__udivmoddi4+0x16e>
    5bea:	subs	r3, r6, r7
    5bec:	mov.w	r8, r7, lsr #16
    5bf0:	uxth.w	ip, r7
    5bf4:	movs	r1, #1
    5bf6:	udiv	r0, r3, r8
    5bfa:	lsrs	r2, r4, #16
    5bfc:	mls	r6, r8, r0, r3
    5c00:	orr.w	r6, r2, r6, lsl #16
    5c04:	mul.w	r3, ip, r0
    5c08:	cmp	r3, r6
    5c0a:	bls.n	5c1c <__udivmoddi4+0x134>
    5c0c:	adds	r6, r6, r7
    5c0e:	add.w	r2, r0, #4294967295
    5c12:	bcs.n	5c1a <__udivmoddi4+0x132>
    5c14:	cmp	r3, r6
    5c16:	bhi.w	5db6 <__udivmoddi4+0x2ce>
    5c1a:	mov	r0, r2
    5c1c:	subs	r6, r6, r3
    5c1e:	uxth	r2, r4
    5c20:	udiv	r3, r6, r8
    5c24:	mls	r6, r8, r3, r6
    5c28:	orr.w	r4, r2, r6, lsl #16
    5c2c:	mul.w	ip, ip, r3
    5c30:	cmp	ip, r4
    5c32:	bls.n	5c44 <__udivmoddi4+0x15c>
    5c34:	adds	r4, r4, r7
    5c36:	add.w	r2, r3, #4294967295
    5c3a:	bcs.n	5c42 <__udivmoddi4+0x15a>
    5c3c:	cmp	ip, r4
    5c3e:	bhi.w	5dac <__udivmoddi4+0x2c4>
    5c42:	mov	r3, r2
    5c44:	rsb	r4, ip, r4
    5c48:	orr.w	r0, r3, r0, lsl #16
    5c4c:	b.n	5b88 <__udivmoddi4+0xa0>
    5c4e:	mov	r1, r5
    5c50:	mov	r0, r5
    5c52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c56:	rsb	r1, lr, #32
    5c5a:	lsl.w	r3, r6, lr
    5c5e:	lsl.w	r7, r7, lr
    5c62:	lsr.w	r9, r0, r1
    5c66:	mov.w	r8, r7, lsr #16
    5c6a:	lsrs	r6, r1
    5c6c:	orr.w	r9, r9, r3
    5c70:	udiv	sl, r6, r8
    5c74:	mov.w	r4, r9, lsr #16
    5c78:	mls	r6, r8, sl, r6
    5c7c:	uxth.w	ip, r7
    5c80:	orr.w	r3, r4, r6, lsl #16
    5c84:	mul.w	r2, sl, ip
    5c88:	cmp	r2, r3
    5c8a:	lsl.w	r4, r0, lr
    5c8e:	bls.n	5ca6 <__udivmoddi4+0x1be>
    5c90:	adds	r3, r3, r7
    5c92:	add.w	r1, sl, #4294967295
    5c96:	bcs.w	5da8 <__udivmoddi4+0x2c0>
    5c9a:	cmp	r2, r3
    5c9c:	bls.w	5da8 <__udivmoddi4+0x2c0>
    5ca0:	sub.w	sl, sl, #2
    5ca4:	add	r3, r7
    5ca6:	subs	r3, r3, r2
    5ca8:	uxth.w	r9, r9
    5cac:	udiv	r1, r3, r8
    5cb0:	mls	r3, r8, r1, r3
    5cb4:	orr.w	r3, r9, r3, lsl #16
    5cb8:	mul.w	r6, r1, ip
    5cbc:	cmp	r6, r3
    5cbe:	bls.n	5cd0 <__udivmoddi4+0x1e8>
    5cc0:	adds	r3, r3, r7
    5cc2:	add.w	r2, r1, #4294967295
    5cc6:	bcs.n	5da0 <__udivmoddi4+0x2b8>
    5cc8:	cmp	r6, r3
    5cca:	bls.n	5da0 <__udivmoddi4+0x2b8>
    5ccc:	subs	r1, #2
    5cce:	add	r3, r7
    5cd0:	subs	r3, r3, r6
    5cd2:	orr.w	r1, r1, sl, lsl #16
    5cd6:	b.n	5bf6 <__udivmoddi4+0x10e>
    5cd8:	rsb	lr, r1, #32
    5cdc:	lsr.w	r4, r2, lr
    5ce0:	lsls	r3, r1
    5ce2:	orrs	r3, r4
    5ce4:	lsr.w	r7, r0, lr
    5ce8:	lsl.w	r4, r6, r1
    5cec:	mov.w	ip, r3, lsr #16
    5cf0:	lsr.w	r6, r6, lr
    5cf4:	orrs	r4, r7
    5cf6:	udiv	r9, r6, ip
    5cfa:	lsrs	r7, r4, #16
    5cfc:	mls	r6, ip, r9, r6
    5d00:	uxth.w	r8, r3
    5d04:	orr.w	r6, r7, r6, lsl #16
    5d08:	mul.w	r7, r9, r8
    5d0c:	cmp	r7, r6
    5d0e:	lsl.w	r2, r2, r1
    5d12:	lsl.w	sl, r0, r1
    5d16:	bls.n	5d2a <__udivmoddi4+0x242>
    5d18:	adds	r6, r6, r3
    5d1a:	add.w	r0, r9, #4294967295
    5d1e:	bcs.n	5da4 <__udivmoddi4+0x2bc>
    5d20:	cmp	r7, r6
    5d22:	bls.n	5da4 <__udivmoddi4+0x2bc>
    5d24:	sub.w	r9, r9, #2
    5d28:	add	r6, r3
    5d2a:	subs	r6, r6, r7
    5d2c:	uxth	r0, r4
    5d2e:	udiv	r4, r6, ip
    5d32:	mls	r6, ip, r4, r6
    5d36:	orr.w	r7, r0, r6, lsl #16
    5d3a:	mul.w	r8, r4, r8
    5d3e:	cmp	r8, r7
    5d40:	bls.n	5d52 <__udivmoddi4+0x26a>
    5d42:	adds	r7, r7, r3
    5d44:	add.w	r0, r4, #4294967295
    5d48:	bcs.n	5d9c <__udivmoddi4+0x2b4>
    5d4a:	cmp	r8, r7
    5d4c:	bls.n	5d9c <__udivmoddi4+0x2b4>
    5d4e:	subs	r4, #2
    5d50:	add	r7, r3
    5d52:	orr.w	r0, r4, r9, lsl #16
    5d56:	rsb	r7, r8, r7
    5d5a:	umull	r8, r9, r0, r2
    5d5e:	cmp	r7, r9
    5d60:	mov	r4, r8
    5d62:	mov	r6, r9
    5d64:	bcc.n	5d90 <__udivmoddi4+0x2a8>
    5d66:	beq.n	5dbc <__udivmoddi4+0x2d4>
    5d68:	cbz	r5, 5dc4 <__udivmoddi4+0x2dc>
    5d6a:	subs.w	r3, sl, r4
    5d6e:	sbc.w	r7, r7, r6
    5d72:	lsl.w	lr, r7, lr
    5d76:	lsrs	r3, r1
    5d78:	lsrs	r7, r1
    5d7a:	orr.w	r3, lr, r3
    5d7e:	stmia.w	r5, {r3, r7}
    5d82:	movs	r1, #0
    5d84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d88:	mov	r3, r2
    5d8a:	b.n	5b7e <__udivmoddi4+0x96>
    5d8c:	mov	r0, r2
    5d8e:	b.n	5b52 <__udivmoddi4+0x6a>
    5d90:	subs.w	r4, r8, r2
    5d94:	sbc.w	r6, r9, r3
    5d98:	subs	r0, #1
    5d9a:	b.n	5d68 <__udivmoddi4+0x280>
    5d9c:	mov	r4, r0
    5d9e:	b.n	5d52 <__udivmoddi4+0x26a>
    5da0:	mov	r1, r2
    5da2:	b.n	5cd0 <__udivmoddi4+0x1e8>
    5da4:	mov	r9, r0
    5da6:	b.n	5d2a <__udivmoddi4+0x242>
    5da8:	mov	sl, r1
    5daa:	b.n	5ca6 <__udivmoddi4+0x1be>
    5dac:	subs	r3, #2
    5dae:	add	r4, r7
    5db0:	b.n	5c44 <__udivmoddi4+0x15c>
    5db2:	mov	r0, r1
    5db4:	b.n	5bcc <__udivmoddi4+0xe4>
    5db6:	subs	r0, #2
    5db8:	add	r6, r7
    5dba:	b.n	5c1c <__udivmoddi4+0x134>
    5dbc:	cmp	sl, r8
    5dbe:	bcc.n	5d90 <__udivmoddi4+0x2a8>
    5dc0:	mov	r6, r7
    5dc2:	b.n	5d68 <__udivmoddi4+0x280>
    5dc4:	mov	r1, r5
    5dc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dca:	nop

00005dcc <__aeabi_idiv0>:
    5dcc:	bx	lr
    5dce:	nop

00005dd0 <___init_veneer>:
    5dd0:	ldr.w	pc, [pc]	; 5dd4 <___init_veneer+0x4>
    5dd4:	.word	0x600016a5
	...

Disassembly of section .fini:

00005de0 <_fini>:
    5de0:	push	{r3, r4, r5, r6, r7, lr}
    5de2:	nop
